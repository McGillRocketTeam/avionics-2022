
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  080137a8  080137a8  000237a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a70  08014a70  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08014a70  08014a70  00024a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a78  08014a78  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014a78  08014a78  00024a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a80  08014a80  00024a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08014a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030210  2**0
                  CONTENTS
 10 .bss          0000549c  20000210  20000210  00030210  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200056ac  200056ac  00030210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004dd50  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d7f  00000000  00000000  0007df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003360  00000000  00000000  00084d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003168  00000000  00000000  00088070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009e10  00000000  00000000  0008b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031d3d  00000000  00000000  00094fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111158  00000000  00000000  000c6d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d7e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f640  00000000  00000000  001d7ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000210 	.word	0x20000210
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013790 	.word	0x08013790

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000214 	.word	0x20000214
 80001ec:	08013790 	.word	0x08013790

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f005 fc88 	bl	800694c <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f005 fd65 	bl	8006b40 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f009 fb1a 	bl	800a6d6 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f004 fd68 	bl	8005b84 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fa12 	bl	80054e4 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f009 fb03 	bl	800a6d6 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f009 faf7 	bl	800a6d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f009 faef 	bl	800a6d6 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00e fb8f 	bl	800f828 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f009 fad5 	bl	800a6d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f009 facd 	bl	800a6d6 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f009 fac4 	bl	800a6d6 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f9d6 	bl	8005506 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f004 fd11 	bl	8005b84 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f004 f9f2 	bl	8005552 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f861 	bl	8005244 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fe3d 	bl	8004e08 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f003 ff59 	bl	800504c <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fe0b 	bl	8004dbc <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 ff27 	bl	8005000 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f009 fa8a 	bl	800a6d6 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004f44 	.word	0x20004f44
 80011e0:	080137a8 	.word	0x080137a8
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	2000023c 	.word	0x2000023c
 80011f0:	080137c0 	.word	0x080137c0
 80011f4:	080137d8 	.word	0x080137d8
 80011f8:	080137e4 	.word	0x080137e4
 80011fc:	080137f8 	.word	0x080137f8
 8001200:	08013800 	.word	0x08013800
 8001204:	08013818 	.word	0x08013818
 8001208:	2000023d 	.word	0x2000023d
 800120c:	08013820 	.word	0x08013820

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f004 f832 	bl	8005290 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f00d fa78 	bl	800e72c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f004 f8de 	bl	8005402 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fd69 	bl	8004d24 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f003 fd5c 	bl	8004d24 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f003 fd4f 	bl	8004d24 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	2000022c 	.word	0x2000022c

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f81e 	bl	80052f4 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f82c 	bl	8005326 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fd55 	bl	8004d84 <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	2000023a 	.word	0x2000023a

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f003 ffdb 	bl	80052c2 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f00d fa08 	bl	800e72c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f004 f823 	bl	800536c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fd11 	bl	8004d54 <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f003 fd04 	bl	8004d54 <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f003 fcf7 	bl	8004d54 <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	20000234 	.word	0x20000234

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f009 f99c 	bl	800a6d6 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f004 fbea 	bl	8005b84 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fc30 	bl	8004c22 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f009 f982 	bl	800a6d6 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f009 f976 	bl	800a6d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f009 f96e 	bl	800a6d6 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f00e fa0e 	bl	800f828 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f009 f955 	bl	800a6d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f009 f94d 	bl	800a6d6 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f009 f944 	bl	800a6d6 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fbf5 	bl	8004c44 <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f004 fb91 	bl	8005b84 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fc11 	bl	8004c90 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f003 faf7 	bl	8004a70 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fb17 	bl	8004abc <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f009 f91c 	bl	800a6d6 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20004f44 	.word	0x20004f44
 80014bc:	08013838 	.word	0x08013838
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000246 	.word	0x20000246
 80014cc:	080137c0 	.word	0x080137c0
 80014d0:	080137d8 	.word	0x080137d8
 80014d4:	080137e4 	.word	0x080137e4
 80014d8:	080137f8 	.word	0x080137f8
 80014dc:	08013800 	.word	0x08013800
 80014e0:	08013818 	.word	0x08013818
 80014e4:	20000247 	.word	0x20000247
 80014e8:	08013850 	.word	0x08013850

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f003 fa52 	bl	80049ac <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fb33 	bl	8004b8a <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fa6f 	bl	8004a0c <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000240 	.word	0x20000240

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fafc 	bl	8004b58 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fb33 	bl	8004bdc <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fa5d 	bl	8004a3c <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000244 	.word	0x20000244

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f005 f9c2 	bl	800694c <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f005 fa9f 	bl	8006b40 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b097      	sub	sp, #92	; 0x5c
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f004 fa5f 	bl	8005b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f95b 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fcd1 	bl	8001fec <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9b9 	bl	80019c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa09 	bl	8001a64 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa47 	bl	8001ae4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fa85 	bl	8001b64 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fb4f 	bl	8001cfc <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fb83 	bl	8001d68 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fbb7 	bl	8001dd4 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fbeb 	bl	8001e40 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fc41 	bl	8001ef0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fc69 	bl	8001f44 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fc91 	bl	8001f98 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fab5 	bl	8001be4 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	487d      	ldr	r0, [pc, #500]	; (8001874 <main+0x23c>)
 8001680:	f004 ffee 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	487a      	ldr	r0, [pc, #488]	; (8001874 <main+0x23c>)
 800168a:	f004 ffe9 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	4878      	ldr	r0, [pc, #480]	; (8001874 <main+0x23c>)
 8001694:	f004 ffe4 	bl	8006660 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169e:	4876      	ldr	r0, [pc, #472]	; (8001878 <main+0x240>)
 80016a0:	f004 ffde 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	4873      	ldr	r0, [pc, #460]	; (8001878 <main+0x240>)
 80016ac:	f004 ffd8 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	4870      	ldr	r0, [pc, #448]	; (8001878 <main+0x240>)
 80016b8:	f004 ffd2 	bl	8006660 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	486d      	ldr	r0, [pc, #436]	; (8001878 <main+0x240>)
 80016c2:	f004 ffcd 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	486b      	ldr	r0, [pc, #428]	; (800187c <main+0x244>)
 80016ce:	f004 ffc7 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d8:	4868      	ldr	r0, [pc, #416]	; (800187c <main+0x244>)
 80016da:	f004 ffc1 	bl	8006660 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016de:	2200      	movs	r2, #0
 80016e0:	2104      	movs	r1, #4
 80016e2:	4867      	ldr	r0, [pc, #412]	; (8001880 <main+0x248>)
 80016e4:	f004 ffbc 	bl	8006660 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4864      	ldr	r0, [pc, #400]	; (8001880 <main+0x248>)
 80016f0:	f004 ffb6 	bl	8006660 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	485f      	ldr	r0, [pc, #380]	; (8001878 <main+0x240>)
 80016fc:	f004 ffb0 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	485f      	ldr	r0, [pc, #380]	; (8001884 <main+0x24c>)
 8001706:	f004 ffab 	bl	8006660 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	485d      	ldr	r0, [pc, #372]	; (8001884 <main+0x24c>)
 8001710:	f004 ffa6 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	485a      	ldr	r0, [pc, #360]	; (8001884 <main+0x24c>)
 800171a:	f004 ffa1 	bl	8006660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4858      	ldr	r0, [pc, #352]	; (8001884 <main+0x24c>)
 8001724:	f004 ff9c 	bl	8006660 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2213      	movs	r2, #19
 800172e:	4956      	ldr	r1, [pc, #344]	; (8001888 <main+0x250>)
 8001730:	4856      	ldr	r0, [pc, #344]	; (800188c <main+0x254>)
 8001732:	f008 ffd0 	bl	800a6d6 <HAL_UART_Transmit>
   * -(Optional) Use MCU APB1 freeze register to freeze the WD in StandByMode instead of resetting the FC
   * -(Optional) Setup alarm A and the clock time in .ioc (not recommend because random resets)
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_setRTC(0x0,0x0,0x0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2000      	movs	r0, #0
 800173c:	f004 f90a 	bl	8005954 <MRT_setRTC>
  MRT_setAlarmA(0x0,0x0,WHEN_SLEEP_TIME);
 8001740:	2215      	movs	r2, #21
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f004 f8c7 	bl	80058d8 <MRT_setAlarmA>
  MRT_SetupRTOS(DEBUG_USART,SLEEP_TIME);
 800174a:	4e50      	ldr	r6, [pc, #320]	; (800188c <main+0x254>)
 800174c:	231e      	movs	r3, #30
 800174e:	930d      	str	r3, [sp, #52]	; 0x34
 8001750:	466d      	mov	r5, sp
 8001752:	f106 0410 	add.w	r4, r6, #16
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	602b      	str	r3, [r5, #0]
 8001766:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800176a:	f003 ff97 	bl	800569c <MRT_SetupRTOS>

  /*
   * For external FLASH memory
   *
   */
	MRT_externalFlashSetup(&huart8);
 800176e:	4847      	ldr	r0, [pc, #284]	; (800188c <main+0x254>)
 8001770:	f001 ff96 	bl	80036a0 <MRT_externalFlashSetup>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001774:	4c46      	ldr	r4, [pc, #280]	; (8001890 <main+0x258>)
 8001776:	463b      	mov	r3, r7
 8001778:	4a44      	ldr	r2, [pc, #272]	; (800188c <main+0x254>)
 800177a:	4946      	ldr	r1, [pc, #280]	; (8001894 <main+0x25c>)
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc7f 	bl	8001080 <MRT_LSM6DSR_Setup>
 8001782:	463b      	mov	r3, r7
 8001784:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001788:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 800178c:	4c42      	ldr	r4, [pc, #264]	; (8001898 <main+0x260>)
 800178e:	463b      	mov	r3, r7
 8001790:	4a3e      	ldr	r2, [pc, #248]	; (800188c <main+0x254>)
 8001792:	4940      	ldr	r1, [pc, #256]	; (8001894 <main+0x25c>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fdf1 	bl	800137c <MRT_LPS22HH_Setup>
 800179a:	463b      	mov	r3, r7
 800179c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &DEBUG_USART);
 80017a4:	4939      	ldr	r1, [pc, #228]	; (800188c <main+0x254>)
 80017a6:	483d      	ldr	r0, [pc, #244]	; (800189c <main+0x264>)
 80017a8:	f001 ff46 	bl	8003638 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017b6:	f004 ff53 	bl	8006660 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 80017ba:	4c39      	ldr	r4, [pc, #228]	; (80018a0 <main+0x268>)
 80017bc:	4668      	mov	r0, sp
 80017be:	f104 0310 	add.w	r3, r4, #16
 80017c2:	2248      	movs	r2, #72	; 0x48
 80017c4:	4619      	mov	r1, r3
 80017c6:	f00c ff89 	bl	800e6dc <memcpy>
 80017ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017ce:	f009 fbd5 	bl	800af7c <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80017d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d6:	4833      	ldr	r0, [pc, #204]	; (80018a4 <main+0x26c>)
 80017d8:	f009 fb78 	bl	800aecc <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80017dc:	2108      	movs	r1, #8
 80017de:	4826      	ldr	r0, [pc, #152]	; (8001878 <main+0x240>)
 80017e0:	f009 fb8a 	bl	800aef8 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80017e4:	2104      	movs	r1, #4
 80017e6:	4824      	ldr	r0, [pc, #144]	; (8001878 <main+0x240>)
 80017e8:	f009 fb9c 	bl	800af24 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 80017ec:	2110      	movs	r1, #16
 80017ee:	4822      	ldr	r0, [pc, #136]	; (8001878 <main+0x240>)
 80017f0:	f009 fbae 	bl	800af50 <set_DIO1_pin>
	Tx_setup();
 80017f4:	f009 fbda 	bl	800afac <Tx_setup>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017f8:	f00a f816 	bl	800b828 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <main+0x270>)
 80017fe:	2100      	movs	r1, #0
 8001800:	482a      	ldr	r0, [pc, #168]	; (80018ac <main+0x274>)
 8001802:	f00a f85b 	bl	800b8bc <osThreadNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <main+0x278>)
 800180a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <main+0x27c>)
 800180e:	2100      	movs	r1, #0
 8001810:	4829      	ldr	r0, [pc, #164]	; (80018b8 <main+0x280>)
 8001812:	f00a f853 	bl	800b8bc <osThreadNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <main+0x284>)
 800181a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800181c:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <main+0x288>)
 800181e:	2100      	movs	r1, #0
 8001820:	4828      	ldr	r0, [pc, #160]	; (80018c4 <main+0x28c>)
 8001822:	f00a f84b 	bl	800b8bc <osThreadNew>
 8001826:	4603      	mov	r3, r0
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <main+0x290>)
 800182a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <main+0x294>)
 800182e:	2100      	movs	r1, #0
 8001830:	4827      	ldr	r0, [pc, #156]	; (80018d0 <main+0x298>)
 8001832:	f00a f843 	bl	800b8bc <osThreadNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <main+0x29c>)
 800183a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <main+0x2a0>)
 800183e:	2100      	movs	r1, #0
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <main+0x2a4>)
 8001842:	f00a f83b 	bl	800b8bc <osThreadNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <main+0x2a8>)
 800184a:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800184c:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <main+0x2ac>)
 800184e:	2100      	movs	r1, #0
 8001850:	4825      	ldr	r0, [pc, #148]	; (80018e8 <main+0x2b0>)
 8001852:	f00a f833 	bl	800b8bc <osThreadNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <main+0x2b4>)
 800185a:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <main+0x2b8>)
 800185e:	2100      	movs	r1, #0
 8001860:	4824      	ldr	r0, [pc, #144]	; (80018f4 <main+0x2bc>)
 8001862:	f00a f82b 	bl	800b8bc <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <main+0x2c0>)
 800186a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800186c:	f00a f800 	bl	800b870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001870:	e7fe      	b.n	8001870 <main+0x238>
 8001872:	bf00      	nop
 8001874:	40020800 	.word	0x40020800
 8001878:	40021800 	.word	0x40021800
 800187c:	40021400 	.word	0x40021400
 8001880:	40021000 	.word	0x40021000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	080138b8 	.word	0x080138b8
 800188c:	200053c4 	.word	0x200053c4
 8001890:	200054b0 	.word	0x200054b0
 8001894:	20004f48 	.word	0x20004f48
 8001898:	200054a4 	.word	0x200054a4
 800189c:	20005408 	.word	0x20005408
 80018a0:	20004f9c 	.word	0x20004f9c
 80018a4:	40020400 	.word	0x40020400
 80018a8:	08014444 	.word	0x08014444
 80018ac:	0800233d 	.word	0x0800233d
 80018b0:	20005178 	.word	0x20005178
 80018b4:	08014468 	.word	0x08014468
 80018b8:	08002395 	.word	0x08002395
 80018bc:	200053bc 	.word	0x200053bc
 80018c0:	0801448c 	.word	0x0801448c
 80018c4:	080023a5 	.word	0x080023a5
 80018c8:	200053c0 	.word	0x200053c0
 80018cc:	080144b0 	.word	0x080144b0
 80018d0:	080026d5 	.word	0x080026d5
 80018d4:	200054a0 	.word	0x200054a0
 80018d8:	080144d4 	.word	0x080144d4
 80018dc:	08002775 	.word	0x08002775
 80018e0:	200054bc 	.word	0x200054bc
 80018e4:	080144f8 	.word	0x080144f8
 80018e8:	08002781 	.word	0x08002781
 80018ec:	2000534c 	.word	0x2000534c
 80018f0:	0801451c 	.word	0x0801451c
 80018f4:	0800278f 	.word	0x0800278f
 80018f8:	20005164 	.word	0x20005164

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00c ff0e 	bl	800e72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <SystemClock_Config+0xbc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <SystemClock_Config+0xbc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <SystemClock_Config+0xbc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <SystemClock_Config+0xc0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <SystemClock_Config+0xc0>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <SystemClock_Config+0xc0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800195c:	2309      	movs	r3, #9
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001966:	2301      	movs	r3, #1
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4618      	mov	r0, r3
 8001974:	f005 ff64 	bl	8007840 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800197e:	f000 ff21 	bl	80027c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001986:	2301      	movs	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 f9c6 	bl	8007d30 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019aa:	f000 ff0b 	bl	80027c4 <Error_Handler>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	; 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <MX_ADC1_Init+0x9c>)
 80019d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_ADC1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <MX_ADC1_Init+0xa0>)
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a20:	f004 f8d4 	bl	8005bcc <HAL_ADC_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a2a:	f000 fecb 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_ADC1_Init+0x98>)
 8001a40:	f004 f908 	bl	8005c54 <HAL_ADC_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a4a:	f000 febb 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20005180 	.word	0x20005180
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	0f000001 	.word	0x0f000001

08001a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_I2C1_Init+0x78>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <MX_I2C1_Init+0x7c>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001aa2:	f004 fe0f 	bl	80066c4 <HAL_I2C_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aac:	f000 fe8a 	bl	80027c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ab4:	f005 fdfb 	bl	80076ae <HAL_I2CEx_ConfigAnalogFilter>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001abe:	f000 fe81 	bl	80027c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ac6:	f005 fe2e 	bl	8007726 <HAL_I2CEx_ConfigDigitalFilter>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ad0:	f000 fe78 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200050b0 	.word	0x200050b0
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	000186a0 	.word	0x000186a0

08001ae4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C2_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C2_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b22:	f004 fdcf 	bl	80066c4 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 fe4a 	bl	80027c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b34:	f005 fdbb 	bl	80076ae <HAL_I2CEx_ConfigAnalogFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b3e:	f000 fe41 	bl	80027c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b46:	f005 fdee 	bl	8007726 <HAL_I2CEx_ConfigDigitalFilter>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 fe38 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20005110 	.word	0x20005110
 8001b5c:	40005800 	.word	0x40005800
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_I2C3_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_I2C3_Init+0x7c>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001ba2:	f004 fd8f 	bl	80066c4 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 fe0a 	bl	80027c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001bb4:	f005 fd7b 	bl	80076ae <HAL_I2CEx_ConfigAnalogFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bbe:	f000 fe01 	bl	80027c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_I2C3_Init+0x74>)
 8001bc6:	f005 fdae 	bl	8007726 <HAL_I2CEx_ConfigDigitalFilter>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f000 fdf8 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20004f48 	.word	0x20004f48
 8001bdc:	40005c00 	.word	0x40005c00
 8001be0:	000186a0 	.word	0x000186a0

08001be4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b090      	sub	sp, #64	; 0x40
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2228      	movs	r2, #40	; 0x28
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00c fd91 	bl	800e72c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c0c:	4a3a      	ldr	r2, [pc, #232]	; (8001cf8 <MX_RTC_Init+0x114>)
 8001c0e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c10:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c18:	227f      	movs	r2, #127	; 0x7f
 8001c1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c1e:	22ff      	movs	r2, #255	; 0xff
 8001c20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c22:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c34:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c36:	f006 fc65 	bl	8008504 <HAL_RTC_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c40:	f000 fdc0 	bl	80027c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c68:	f006 fcdd 	bl	8008626 <HAL_RTC_SetTime>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c72:	f000 fda7 	bl	80027c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c92:	2201      	movs	r2, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001c98:	f006 fd82 	bl	80087a0 <HAL_RTC_SetDate>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001ca2:	f000 fd8f 	bl	80027c4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_RTC_Init+0x110>)
 8001cde:	f006 fe07 	bl	80088f0 <HAL_RTC_SetAlarm_IT>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ce8:	f000 fd6c 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3740      	adds	r7, #64	; 0x40
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20005328 	.word	0x20005328
 8001cf8:	40002800 	.word	0x40002800

08001cfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <MX_SPI2_Init+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d48:	220a      	movs	r2, #10
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_SPI2_Init+0x64>)
 8001d4e:	f007 f8e1 	bl	8008f14 <HAL_SPI_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d58:	f000 fd34 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20004f9c 	.word	0x20004f9c
 8001d64:	40003800 	.word	0x40003800

08001d68 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <MX_SPI4_Init+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d78:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d98:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001db4:	220a      	movs	r2, #10
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_SPI4_Init+0x64>)
 8001dba:	f007 f8ab 	bl	8008f14 <HAL_SPI_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001dc4:	f000 fcfe 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200052d0 	.word	0x200052d0
 8001dd0:	40013400 	.word	0x40013400

08001dd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <MX_SPI5_Init+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_SPI5_Init+0x64>)
 8001e26:	f007 f875 	bl	8008f14 <HAL_SPI_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e30:	f000 fcc8 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20004ff8 	.word	0x20004ff8
 8001e3c:	40015000 	.word	0x40015000

08001e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_TIM2_Init+0xac>)
 8001e8c:	f007 feb4 	bl	8009bf8 <HAL_TIM_PWM_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e96:	f000 fc95 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4810      	ldr	r0, [pc, #64]	; (8001eec <MX_TIM2_Init+0xac>)
 8001eaa:	f008 fb37 	bl	800a51c <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001eb4:	f000 fc86 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb8:	2360      	movs	r3, #96	; 0x60
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_TIM2_Init+0xac>)
 8001ed0:	f007 ffea 	bl	8009ea8 <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001eda:	f000 fc73 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM2_Init+0xac>)
 8001ee0:	f000 fec6 	bl	8002c70 <HAL_TIM_MspPostInit>

}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20005458 	.word	0x20005458

08001ef0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_UART8_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_UART8_Init+0x4c>)
 8001f28:	f008 fb88 	bl	800a63c <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 fc47 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200053c4 	.word	0x200053c4
 8001f40:	40007c00 	.word	0x40007c00

08001f44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <MX_USART3_UART_Init+0x50>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f7c:	f008 fb5e 	bl	800a63c <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f86:	f000 fc1d 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20005054 	.word	0x20005054
 8001f94:	40004800 	.word	0x40004800

08001f98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <MX_USART6_UART_Init+0x50>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_USART6_UART_Init+0x4c>)
 8001fd0:	f008 fb34 	bl	800a63c <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fda:	f000 fbf3 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20005408 	.word	0x20005408
 8001fe8:	40011400 	.word	0x40011400

08001fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	4bb5      	ldr	r3, [pc, #724]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4ab4      	ldr	r2, [pc, #720]	; (80022dc <MX_GPIO_Init+0x2f0>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4bb2      	ldr	r3, [pc, #712]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	4bae      	ldr	r3, [pc, #696]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4aad      	ldr	r2, [pc, #692]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4bab      	ldr	r3, [pc, #684]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4ba7      	ldr	r3, [pc, #668]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4aa6      	ldr	r2, [pc, #664]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002044:	f043 0320 	orr.w	r3, r3, #32
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4ba4      	ldr	r3, [pc, #656]	; (80022dc <MX_GPIO_Init+0x2f0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <MX_GPIO_Init+0x2f0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a9f      	ldr	r2, [pc, #636]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b9d      	ldr	r3, [pc, #628]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b99      	ldr	r3, [pc, #612]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a98      	ldr	r2, [pc, #608]	; (80022dc <MX_GPIO_Init+0x2f0>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b96      	ldr	r3, [pc, #600]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b92      	ldr	r3, [pc, #584]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a91      	ldr	r2, [pc, #580]	; (80022dc <MX_GPIO_Init+0x2f0>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b84      	ldr	r3, [pc, #528]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a83      	ldr	r2, [pc, #524]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b81      	ldr	r3, [pc, #516]	; (80022dc <MX_GPIO_Init+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f248 4184 	movw	r1, #33924	; 0x8484
 80020e8:	487d      	ldr	r0, [pc, #500]	; (80022e0 <MX_GPIO_Init+0x2f4>)
 80020ea:	f004 fab9 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80020f4:	487b      	ldr	r0, [pc, #492]	; (80022e4 <MX_GPIO_Init+0x2f8>)
 80020f6:	f004 fab3 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002100:	4879      	ldr	r0, [pc, #484]	; (80022e8 <MX_GPIO_Init+0x2fc>)
 8002102:	f004 faad 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2108      	movs	r1, #8
 800210a:	4878      	ldr	r0, [pc, #480]	; (80022ec <MX_GPIO_Init+0x300>)
 800210c:	f004 faa8 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002110:	2200      	movs	r2, #0
 8002112:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8002116:	4876      	ldr	r0, [pc, #472]	; (80022f0 <MX_GPIO_Init+0x304>)
 8002118:	f004 faa2 	bl	8006660 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002122:	4874      	ldr	r0, [pc, #464]	; (80022f4 <MX_GPIO_Init+0x308>)
 8002124:	f004 fa9c 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002128:	2200      	movs	r2, #0
 800212a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800212e:	4872      	ldr	r0, [pc, #456]	; (80022f8 <MX_GPIO_Init+0x30c>)
 8002130:	f004 fa96 	bl	8006660 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002134:	f248 4384 	movw	r3, #33924	; 0x8484
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <MX_GPIO_Init+0x2f4>)
 800214e:	f004 f8c3 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002152:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	485e      	ldr	r0, [pc, #376]	; (80022e4 <MX_GPIO_Init+0x2f8>)
 800216c:	f004 f8b4 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002174:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4858      	ldr	r0, [pc, #352]	; (80022e8 <MX_GPIO_Init+0x2fc>)
 8002186:	f004 f8a7 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800218a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4851      	ldr	r0, [pc, #324]	; (80022e8 <MX_GPIO_Init+0x2fc>)
 80021a4:	f004 f898 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80021a8:	2308      	movs	r3, #8
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	484b      	ldr	r0, [pc, #300]	; (80022ec <MX_GPIO_Init+0x300>)
 80021c0:	f004 f88a 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80021c4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	4619      	mov	r1, r3
 80021d8:	4843      	ldr	r0, [pc, #268]	; (80022e8 <MX_GPIO_Init+0x2fc>)
 80021da:	f004 f87d 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80021de:	2302      	movs	r3, #2
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ee:	4619      	mov	r1, r3
 80021f0:	4840      	ldr	r0, [pc, #256]	; (80022f4 <MX_GPIO_Init+0x308>)
 80021f2:	f004 f871 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4836      	ldr	r0, [pc, #216]	; (80022e4 <MX_GPIO_Init+0x2f8>)
 800220c:	f004 f864 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8002210:	f242 4301 	movw	r3, #9217	; 0x2401
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	4832      	ldr	r0, [pc, #200]	; (80022f0 <MX_GPIO_Init+0x304>)
 8002226:	f004 f857 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 800222a:	f645 233e 	movw	r3, #23102	; 0x5a3e
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	482b      	ldr	r0, [pc, #172]	; (80022f0 <MX_GPIO_Init+0x304>)
 8002244:	f004 f848 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002248:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	4820      	ldr	r0, [pc, #128]	; (80022e0 <MX_GPIO_Init+0x2f4>)
 800225e:	f004 f83b 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	481e      	ldr	r0, [pc, #120]	; (80022f4 <MX_GPIO_Init+0x308>)
 800227c:	f004 f82c 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002280:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002286:	2301      	movs	r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	4619      	mov	r1, r3
 8002298:	4817      	ldr	r0, [pc, #92]	; (80022f8 <MX_GPIO_Init+0x30c>)
 800229a:	f004 f81d 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b0:	4619      	mov	r1, r3
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <MX_GPIO_Init+0x30c>)
 80022b4:	f004 f810 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80022b8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4808      	ldr	r0, [pc, #32]	; (80022f0 <MX_GPIO_Init+0x304>)
 80022d0:	f004 f802 	bl	80062d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2105      	movs	r1, #5
 80022d8:	2006      	movs	r0, #6
 80022da:	e00f      	b.n	80022fc <MX_GPIO_Init+0x310>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	f003 ffb4 	bl	8006268 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002300:	2006      	movs	r0, #6
 8002302:	f003 ffcd 	bl	80062a0 <HAL_NVIC_EnableIRQ>

}
 8002306:	bf00      	nop
 8002308:	3738      	adds	r7, #56	; 0x38
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_USART, Msg, strlen(Msg), HAL_Delay);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fd ff69 	bl	80001f0 <strlen>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <XTend_Transmit+0x24>)
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <XTend_Transmit+0x28>)
 8002328:	f008 f9d5 	bl	800a6d6 <HAL_UART_Transmit>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08005b85 	.word	0x08005b85
 8002338:	20005054 	.word	0x20005054

0800233c <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8002344:	f009 fb4c 	bl	800b9e0 <osThreadGetId>
 8002348:	4603      	mov	r3, r0
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <StartMemory0+0x48>)
 800234c:	6013      	str	r3, [r2, #0]
		  //Write data to sd and flash


		  //Check if it's sleep time
		//if (flagA==1 && wu_flag !=1){
		  if (flagA==1){
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <StartMemory0+0x4c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d111      	bne.n	800237a <StartMemory0+0x3e>
			//Update iwdg_flag
			iwdg_flag = 1;
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <StartMemory0+0x50>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <StartMemory0+0x50>)
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <StartMemory0+0x54>)
 8002362:	709a      	strb	r2, [r3, #2]
			W25qxx_EraseSector(1);
 8002364:	2001      	movs	r0, #1
 8002366:	f001 fd81 	bl	8003e6c <W25qxx_EraseSector>
			W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800236a:	2303      	movs	r3, #3
 800236c:	2200      	movs	r2, #0
 800236e:	2101      	movs	r1, #1
 8002370:	4807      	ldr	r0, [pc, #28]	; (8002390 <StartMemory0+0x54>)
 8002372:	f001 fec5 	bl	8004100 <W25qxx_WriteSector>

			//Reset to deactivate IWDG
			NVIC_SystemReset();
 8002376:	f7ff f949 	bl	800160c <__NVIC_SystemReset>
		}

		  //osDelay(1000/DATA_FREQ);
		osDelay(3000);
 800237a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800237e:	f009 fb40 	bl	800ba02 <osDelay>
		  if (flagA==1){
 8002382:	e7e4      	b.n	800234e <StartMemory0+0x12>
 8002384:	2000509c 	.word	0x2000509c
 8002388:	2000049c 	.word	0x2000049c
 800238c:	20000273 	.word	0x20000273
 8002390:	20005098 	.word	0x20005098

08002394 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0c2      	sub	sp, #264	; 0x108
 8002398:	af00      	add	r7, sp, #0
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 800239e:	f009 fb2a 	bl	800b9f6 <osThreadExit>
	...

080023a4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80023a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a8:	b0ae      	sub	sp, #184	; 0xb8
 80023aa:	af1a      	add	r7, sp, #104	; 0x68
 80023ac:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN StartTelemetry2 */

	//osThreadExit();

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80023ae:	f009 fb17 	bl	800b9e0 <osThreadGetId>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4aa8      	ldr	r2, [pc, #672]	; (8002658 <StartTelemetry2+0x2b4>)
 80023b6:	6093      	str	r3, [r2, #8]

	osDelay(1000);
 80023b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023bc:	f009 fb21 	bl	800ba02 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  //Poll sensors data in other thread

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2108      	movs	r1, #8
 80023c4:	48a5      	ldr	r0, [pc, #660]	; (800265c <StartTelemetry2+0x2b8>)
 80023c6:	f004 f94b 	bl	8006660 <HAL_GPIO_WritePin>

	  //Updating data variables

	  //Need to verify these six to make sure they are in the right order

  	  ACCx = acceleration_mg[0];
 80023ca:	4ba5      	ldr	r3, [pc, #660]	; (8002660 <StartTelemetry2+0x2bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4aa5      	ldr	r2, [pc, #660]	; (8002664 <StartTelemetry2+0x2c0>)
 80023d0:	6013      	str	r3, [r2, #0]
  	  ACCy = acceleration_mg[1];
 80023d2:	4ba3      	ldr	r3, [pc, #652]	; (8002660 <StartTelemetry2+0x2bc>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4aa4      	ldr	r2, [pc, #656]	; (8002668 <StartTelemetry2+0x2c4>)
 80023d8:	6013      	str	r3, [r2, #0]
  	  ACCz = acceleration_mg[2];
 80023da:	4ba1      	ldr	r3, [pc, #644]	; (8002660 <StartTelemetry2+0x2bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4aa3      	ldr	r2, [pc, #652]	; (800266c <StartTelemetry2+0x2c8>)
 80023e0:	6013      	str	r3, [r2, #0]
  	  GYROx = angular_rate_mdps[0];
 80023e2:	4ba3      	ldr	r3, [pc, #652]	; (8002670 <StartTelemetry2+0x2cc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4aa3      	ldr	r2, [pc, #652]	; (8002674 <StartTelemetry2+0x2d0>)
 80023e8:	6013      	str	r3, [r2, #0]
  	  GYROy = angular_rate_mdps[1];
 80023ea:	4ba1      	ldr	r3, [pc, #644]	; (8002670 <StartTelemetry2+0x2cc>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4aa2      	ldr	r2, [pc, #648]	; (8002678 <StartTelemetry2+0x2d4>)
 80023f0:	6013      	str	r3, [r2, #0]
  	  GYROz = angular_rate_mdps[2];
 80023f2:	4b9f      	ldr	r3, [pc, #636]	; (8002670 <StartTelemetry2+0x2cc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4aa1      	ldr	r2, [pc, #644]	; (800267c <StartTelemetry2+0x2d8>)
 80023f8:	6013      	str	r3, [r2, #0]
  	  PRESSURE = pressure_hPa;
 80023fa:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <StartTelemetry2+0x2dc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4aa1      	ldr	r2, [pc, #644]	; (8002684 <StartTelemetry2+0x2e0>)
 8002400:	6013      	str	r3, [r2, #0]
  	  LAT = latitude;
 8002402:	4ba1      	ldr	r3, [pc, #644]	; (8002688 <StartTelemetry2+0x2e4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4aa1      	ldr	r2, [pc, #644]	; (800268c <StartTelemetry2+0x2e8>)
 8002408:	6013      	str	r3, [r2, #0]
  	  LONG = longitude;
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <StartTelemetry2+0x2ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4aa1      	ldr	r2, [pc, #644]	; (8002694 <StartTelemetry2+0x2f0>)
 8002410:	6013      	str	r3, [r2, #0]
  	  MIN = 0.0;
 8002412:	4ba1      	ldr	r3, [pc, #644]	; (8002698 <StartTelemetry2+0x2f4>)
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
  	  SEC = 0.0;
 800241a:	4ba0      	ldr	r3, [pc, #640]	; (800269c <StartTelemetry2+0x2f8>)
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  	  SUBSEC = 0.0;
 8002422:	4b9f      	ldr	r3, [pc, #636]	; (80026a0 <StartTelemetry2+0x2fc>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  	  STATE = THERMO_TEMP;
 800242a:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <StartTelemetry2+0x300>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a9e      	ldr	r2, [pc, #632]	; (80026a8 <StartTelemetry2+0x304>)
 8002430:	6013      	str	r3, [r2, #0]
  	  CONT = MRT_getContinuity();
 8002432:	f001 fa8d 	bl	8003950 <MRT_getContinuity>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b9c      	ldr	r3, [pc, #624]	; (80026ac <StartTelemetry2+0x308>)
 800243c:	701a      	strb	r2, [r3, #0]
	  MIN = t.tm_min;
	  SEC = t.tm_sec;
	  */
	  //From the GPS time value

	  MIN = ((uint8_t) time % 3600) / 60.0;
 800243e:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <StartTelemetry2+0x30c>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002448:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800244c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4a98      	ldr	r2, [pc, #608]	; (80026b4 <StartTelemetry2+0x310>)
 8002454:	fb82 1203 	smull	r1, r2, r2, r3
 8002458:	441a      	add	r2, r3
 800245a:	12d1      	asrs	r1, r2, #11
 800245c:	17da      	asrs	r2, r3, #31
 800245e:	1a8a      	subs	r2, r1, r2
 8002460:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002464:	fb01 f202 	mul.w	r2, r1, r2
 8002468:	1a9a      	subs	r2, r3, r2
 800246a:	4610      	mov	r0, r2
 800246c:	f7fe f86a 	bl	8000544 <__aeabi_i2d>
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b90      	ldr	r3, [pc, #576]	; (80026b8 <StartTelemetry2+0x314>)
 8002476:	f7fe f9f9 	bl	800086c <__aeabi_ddiv>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fbc1 	bl	8000c08 <__aeabi_d2f>
 8002486:	4603      	mov	r3, r0
 8002488:	4a83      	ldr	r2, [pc, #524]	; (8002698 <StartTelemetry2+0x2f4>)
 800248a:	6013      	str	r3, [r2, #0]
	  sprintf(&MIN, "%.0f",MIN);
 800248c:	4b82      	ldr	r3, [pc, #520]	; (8002698 <StartTelemetry2+0x2f4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f869 	bl	8000568 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4988      	ldr	r1, [pc, #544]	; (80026bc <StartTelemetry2+0x318>)
 800249c:	487e      	ldr	r0, [pc, #504]	; (8002698 <StartTelemetry2+0x2f4>)
 800249e:	f00d f9c3 	bl	800f828 <siprintf>
	  SEC = (uint8_t) time % 60;
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <StartTelemetry2+0x30c>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80024b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <StartTelemetry2+0x31c>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	0959      	lsrs	r1, r3, #5
 80024be:	460b      	mov	r3, r1
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <StartTelemetry2+0x2f8>)
 80024d4:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SEC,"%.0f",SEC);
 80024d8:	4b70      	ldr	r3, [pc, #448]	; (800269c <StartTelemetry2+0x2f8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f843 	bl	8000568 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4975      	ldr	r1, [pc, #468]	; (80026bc <StartTelemetry2+0x318>)
 80024e8:	486c      	ldr	r0, [pc, #432]	; (800269c <StartTelemetry2+0x2f8>)
 80024ea:	f00d f99d 	bl	800f828 <siprintf>
	  SUBSEC = time / 3600.0;
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <StartTelemetry2+0x30c>)
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	eddf 6a73 	vldr	s13, [pc, #460]	; 80026c4 <StartTelemetry2+0x320>
 80024f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024fc:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <StartTelemetry2+0x2fc>)
 80024fe:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SUBSEC,"%.0f",SUBSEC);
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <StartTelemetry2+0x2fc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f82e 	bl	8000568 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	496a      	ldr	r1, [pc, #424]	; (80026bc <StartTelemetry2+0x318>)
 8002512:	4863      	ldr	r0, [pc, #396]	; (80026a0 <StartTelemetry2+0x2fc>)
 8002514:	f00d f988 	bl	800f828 <siprintf>



	  //TODO maybe add variable for GPS time and both temperature values?

  	  memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 8002518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251c:	2100      	movs	r1, #0
 800251e:	486a      	ldr	r0, [pc, #424]	; (80026c8 <StartTelemetry2+0x324>)
 8002520:	f00c f904 	bl	800e72c <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%.2f,%i,E",
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <StartTelemetry2+0x2c0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f81d 	bl	8000568 <__aeabi_f2d>
 800252e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002532:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <StartTelemetry2+0x2c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f816 	bl	8000568 <__aeabi_f2d>
 800253c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002540:	4b4a      	ldr	r3, [pc, #296]	; (800266c <StartTelemetry2+0x2c8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f80f 	bl	8000568 <__aeabi_f2d>
 800254a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800254e:	4b49      	ldr	r3, [pc, #292]	; (8002674 <StartTelemetry2+0x2d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f808 	bl	8000568 <__aeabi_f2d>
 8002558:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800255c:	4b46      	ldr	r3, [pc, #280]	; (8002678 <StartTelemetry2+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f801 	bl	8000568 <__aeabi_f2d>
 8002566:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <StartTelemetry2+0x2d8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd fffa 	bl	8000568 <__aeabi_f2d>
 8002574:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <StartTelemetry2+0x2e0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd fff3 	bl	8000568 <__aeabi_f2d>
 8002582:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <StartTelemetry2+0x2e8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffec 	bl	8000568 <__aeabi_f2d>
 8002590:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002594:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <StartTelemetry2+0x2f0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffe5 	bl	8000568 <__aeabi_f2d>
 800259e:	e9c7 0100 	strd	r0, r1, [r7]
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <StartTelemetry2+0x2f4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ffde 	bl	8000568 <__aeabi_f2d>
 80025ac:	4682      	mov	sl, r0
 80025ae:	468b      	mov	fp, r1
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <StartTelemetry2+0x2f8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffd7 	bl	8000568 <__aeabi_f2d>
 80025ba:	4680      	mov	r8, r0
 80025bc:	4689      	mov	r9, r1
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <StartTelemetry2+0x2fc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffd0 	bl	8000568 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <StartTelemetry2+0x304>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffc9 	bl	8000568 <__aeabi_f2d>
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <StartTelemetry2+0x308>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	9318      	str	r3, [sp, #96]	; 0x60
 80025dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80025e0:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80025e4:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80025e8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80025ec:	ed97 7b00 	vldr	d7, [r7]
 80025f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80025f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80025f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80025fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002600:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002604:	ed97 7b06 	vldr	d7, [r7, #24]
 8002608:	ed8d 7b08 	vstr	d7, [sp, #32]
 800260c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002610:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002614:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002618:	ed8d 7b04 	vstr	d7, [sp, #16]
 800261c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002620:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002624:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002628:	ed8d 7b00 	vstr	d7, [sp]
 800262c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002630:	4926      	ldr	r1, [pc, #152]	; (80026cc <StartTelemetry2+0x328>)
 8002632:	4825      	ldr	r0, [pc, #148]	; (80026c8 <StartTelemetry2+0x324>)
 8002634:	f00d f8f8 	bl	800f828 <siprintf>
  			  	  	  	  	  	  ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT);

	  //Xtend send
	  XTend_Transmit(xtend_tx_buffer);
 8002638:	4823      	ldr	r0, [pc, #140]	; (80026c8 <StartTelemetry2+0x324>)
 800263a:	f7ff fe69 	bl	8002310 <XTend_Transmit>

	  //Iridium send
	  //MRT_Static_Iridium_getTime(); TODO doesn't cost anything
	  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2108      	movs	r1, #8
 8002642:	4806      	ldr	r0, [pc, #24]	; (800265c <StartTelemetry2+0x2b8>)
 8002644:	f004 f80c 	bl	8006660 <HAL_GPIO_WritePin>

	  HAL_IWDG_Refresh(&hiwdg);
 8002648:	4821      	ldr	r0, [pc, #132]	; (80026d0 <StartTelemetry2+0x32c>)
 800264a:	f005 f8ab 	bl	80077a4 <HAL_IWDG_Refresh>


    osDelay(1000/SEND_FREQ);
 800264e:	2064      	movs	r0, #100	; 0x64
 8002650:	f009 f9d7 	bl	800ba02 <osDelay>
  {
 8002654:	e6b4      	b.n	80023c0 <StartTelemetry2+0x1c>
 8002656:	bf00      	nop
 8002658:	2000509c 	.word	0x2000509c
 800265c:	40020800 	.word	0x40020800
 8002660:	20000250 	.word	0x20000250
 8002664:	200053b8 	.word	0x200053b8
 8002668:	2000544c 	.word	0x2000544c
 800266c:	2000517c 	.word	0x2000517c
 8002670:	2000025c 	.word	0x2000025c
 8002674:	20005170 	.word	0x20005170
 8002678:	20005168 	.word	0x20005168
 800267c:	200051c8 	.word	0x200051c8
 8002680:	20000248 	.word	0x20000248
 8002684:	2000516c 	.word	0x2000516c
 8002688:	20005450 	.word	0x20005450
 800268c:	200054cc 	.word	0x200054cc
 8002690:	20005348 	.word	0x20005348
 8002694:	20005050 	.word	0x20005050
 8002698:	200054c8 	.word	0x200054c8
 800269c:	20005174 	.word	0x20005174
 80026a0:	200054c4 	.word	0x200054c4
 80026a4:	20005454 	.word	0x20005454
 80026a8:	200052cc 	.word	0x200052cc
 80026ac:	200054c0 	.word	0x200054c0
 80026b0:	200053b4 	.word	0x200053b4
 80026b4:	91a2b3c5 	.word	0x91a2b3c5
 80026b8:	404e0000 	.word	0x404e0000
 80026bc:	080138cc 	.word	0x080138cc
 80026c0:	88888889 	.word	0x88888889
 80026c4:	45610000 	.word	0x45610000
 80026c8:	200051cc 	.word	0x200051cc
 80026cc:	080138d4 	.word	0x080138d4
 80026d0:	20005104 	.word	0x20005104

080026d4 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80026dc:	f009 f980 	bl	800b9e0 <osThreadGetId>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <StartSensors3+0x70>)
 80026e4:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2102      	movs	r1, #2
 80026ea:	4817      	ldr	r0, [pc, #92]	; (8002748 <StartSensors3+0x74>)
 80026ec:	f003 ffb8 	bl	8006660 <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <StartSensors3+0x78>)
 80026f2:	4917      	ldr	r1, [pc, #92]	; (8002750 <StartSensors3+0x7c>)
 80026f4:	4817      	ldr	r0, [pc, #92]	; (8002754 <StartSensors3+0x80>)
 80026f6:	f000 fd3d 	bl	8003174 <GPS_Poll>
  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <StartSensors3+0x84>)
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <StartSensors3+0x88>)
 80026fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002700:	f7fe fd86 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <StartSensors3+0x84>)
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <StartSensors3+0x8c>)
 8002708:	ca07      	ldmia	r2, {r0, r1, r2}
 800270a:	f7fe fdf1 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <StartSensors3+0x84>)
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <StartSensors3+0x90>)
 8002712:	ca07      	ldmia	r2, {r0, r1, r2}
 8002714:	f7fe fdc2 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <StartSensors3+0x94>)
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <StartSensors3+0x98>)
 800271c:	ca07      	ldmia	r2, {r0, r1, r2}
 800271e:	f7fe fee5 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <StartSensors3+0x94>)
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <StartSensors3+0x9c>)
 8002726:	ca07      	ldmia	r2, {r0, r1, r2}
 8002728:	f7fe ff0c 	bl	8001544 <MRT_LPS22HH_getTemperature>

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 800272c:	f003 f954 	bl	80059d8 <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	2102      	movs	r1, #2
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <StartSensors3+0x74>)
 8002736:	f003 ff93 	bl	8006660 <HAL_GPIO_WritePin>

	  osDelay(1000);
 800273a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273e:	f009 f960 	bl	800ba02 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002742:	e7d0      	b.n	80026e6 <StartSensors3+0x12>
 8002744:	2000509c 	.word	0x2000509c
 8002748:	40020800 	.word	0x40020800
 800274c:	200053b4 	.word	0x200053b4
 8002750:	20005348 	.word	0x20005348
 8002754:	20005450 	.word	0x20005450
 8002758:	200054b0 	.word	0x200054b0
 800275c:	20000250 	.word	0x20000250
 8002760:	2000025c 	.word	0x2000025c
 8002764:	20000268 	.word	0x20000268
 8002768:	200054a4 	.word	0x200054a4
 800276c:	20000248 	.word	0x20000248
 8002770:	2000024c 	.word	0x2000024c

08002774 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 800277c:	f009 f93b 	bl	800b9f6 <osThreadExit>

08002780 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0c2      	sub	sp, #264	; 0x108
 8002784:	af00      	add	r7, sp, #0
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 800278a:	f009 f934 	bl	800b9f6 <osThreadExit>

0800278e <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchDog */
  /* Infinite loop */
  for(;;)
  {
	 //HAL_IWDG_Refresh(&hiwdg);
    osDelay(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f009 f933 	bl	800ba02 <osDelay>
 800279c:	e7fb      	b.n	8002796 <StartWatchDog+0x8>
	...

080027a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027b2:	f003 f9c7 	bl	8005b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40001000 	.word	0x40001000

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_MspInit+0x54>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_MspInit+0x54>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_MspInit+0x54>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_MspInit+0x54>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_MspInit+0x54>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_MspInit+0x54>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	210f      	movs	r1, #15
 8002816:	f06f 0001 	mvn.w	r0, #1
 800281a:	f003 fd25 	bl	8006268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <HAL_ADC_MspInit+0x7c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d127      	bne.n	800289e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_ADC_MspInit+0x80>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_ADC_MspInit+0x80>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_ADC_MspInit+0x80>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_ADC_MspInit+0x80>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_ADC_MspInit+0x80>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_ADC_MspInit+0x80>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800288a:	2303      	movs	r3, #3
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <HAL_ADC_MspInit+0x84>)
 800289a:	f003 fd1d 	bl	80062d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <HAL_I2C_MspInit+0x190>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12d      	bne.n	8002932 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a5a      	ldr	r2, [pc, #360]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f8:	2312      	movs	r3, #18
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002904:	2304      	movs	r3, #4
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290c:	4619      	mov	r1, r3
 800290e:	484f      	ldr	r0, [pc, #316]	; (8002a4c <HAL_I2C_MspInit+0x198>)
 8002910:	f003 fce2 	bl	80062d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a4a      	ldr	r2, [pc, #296]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 800291e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002930:	e083      	b.n	8002a3a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a46      	ldr	r2, [pc, #280]	; (8002a50 <HAL_I2C_MspInit+0x19c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d12d      	bne.n	8002998 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002958:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295e:	2312      	movs	r3, #18
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800296a:	2304      	movs	r3, #4
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	4835      	ldr	r0, [pc, #212]	; (8002a4c <HAL_I2C_MspInit+0x198>)
 8002976:	f003 fcaf 	bl	80062d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
}
 8002996:	e050      	b.n	8002a3a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_I2C_MspInit+0x1a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d14b      	bne.n	8002a3a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e0:	2312      	movs	r3, #18
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029ec:	2304      	movs	r3, #4
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4818      	ldr	r0, [pc, #96]	; (8002a58 <HAL_I2C_MspInit+0x1a4>)
 80029f8:	f003 fc6e 	bl	80062d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a02:	2312      	movs	r3, #18
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a16:	4619      	mov	r1, r3
 8002a18:	4810      	ldr	r0, [pc, #64]	; (8002a5c <HAL_I2C_MspInit+0x1a8>)
 8002a1a:	f003 fc5d 	bl	80062d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_I2C_MspInit+0x194>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	3738      	adds	r7, #56	; 0x38
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40005400 	.word	0x40005400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40005800 	.word	0x40005800
 8002a54:	40005c00 	.word	0x40005c00
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020000 	.word	0x40020000

08002a60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	2230      	movs	r2, #48	; 0x30
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00b fe5b 	bl	800e72c <memset>
  if(hrtc->Instance==RTC)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_RTC_MspInit+0x5c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d119      	bne.n	8002ab4 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a80:	2320      	movs	r3, #32
 8002a82:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 fb7a 	bl	8008188 <HAL_RCCEx_PeriphCLKConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a9a:	f7ff fe93 	bl	80027c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RTC_MspInit+0x60>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	2029      	movs	r0, #41	; 0x29
 8002aaa:	f003 fbdd 	bl	8006268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002aae:	2029      	movs	r0, #41	; 0x29
 8002ab0:	f003 fbf6 	bl	80062a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3738      	adds	r7, #56	; 0x38
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40002800 	.word	0x40002800
 8002ac0:	42470e3c 	.word	0x42470e3c

08002ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4c      	ldr	r2, [pc, #304]	; (8002c14 <HAL_SPI_MspInit+0x150>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12d      	bne.n	8002b42 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
 8002aea:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b30:	2305      	movs	r3, #5
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4838      	ldr	r0, [pc, #224]	; (8002c1c <HAL_SPI_MspInit+0x158>)
 8002b3c:	f003 fbcc 	bl	80062d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002b40:	e064      	b.n	8002c0c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_SPI_MspInit+0x15c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d12d      	bne.n	8002ba8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6313      	str	r3, [r2, #48]	; 0x30
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002b84:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b96:	2305      	movs	r3, #5
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4820      	ldr	r0, [pc, #128]	; (8002c24 <HAL_SPI_MspInit+0x160>)
 8002ba2:	f003 fb99 	bl	80062d8 <HAL_GPIO_Init>
}
 8002ba6:	e031      	b.n	8002c0c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_SPI_MspInit+0x164>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12c      	bne.n	8002c0c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_SPI_MspInit+0x154>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002bea:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002bfc:	2305      	movs	r3, #5
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	4619      	mov	r1, r3
 8002c06:	4809      	ldr	r0, [pc, #36]	; (8002c2c <HAL_SPI_MspInit+0x168>)
 8002c08:	f003 fb66 	bl	80062d8 <HAL_GPIO_Init>
}
 8002c0c:	bf00      	nop
 8002c0e:	3738      	adds	r7, #56	; 0x38
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40003800 	.word	0x40003800
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40013400 	.word	0x40013400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40015000 	.word	0x40015000
 8002c2c:	40021400 	.word	0x40021400

08002c30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d10d      	bne.n	8002c5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d11d      	bne.n	8002cce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_TIM_MspPostInit+0x68>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_TIM_MspPostInit+0x68>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_TIM_MspPostInit+0x68>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <HAL_TIM_MspPostInit+0x6c>)
 8002cca:	f003 fb05 	bl	80062d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	; (8002e2c <HAL_UART_MspInit+0x14c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d12c      	bne.n	8002d5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a49      	ldr	r2, [pc, #292]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d52:	4619      	mov	r1, r3
 8002d54:	4837      	ldr	r0, [pc, #220]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d56:	f003 fabf 	bl	80062d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d5a:	e063      	b.n	8002e24 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12d      	bne.n	8002dc2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d8c:	f043 0308 	orr.w	r3, r3, #8
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002db0:	2307      	movs	r3, #7
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4820      	ldr	r0, [pc, #128]	; (8002e3c <HAL_UART_MspInit+0x15c>)
 8002dbc:	f003 fa8c 	bl	80062d8 <HAL_GPIO_Init>
}
 8002dc0:	e030      	b.n	8002e24 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d12b      	bne.n	8002e24 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6453      	str	r3, [r2, #68]	; 0x44
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002e04:	23c0      	movs	r3, #192	; 0xc0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e14:	2308      	movs	r3, #8
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HAL_UART_MspInit+0x164>)
 8002e20:	f003 fa5a 	bl	80062d8 <HAL_GPIO_Init>
}
 8002e24:	bf00      	nop
 8002e26:	3738      	adds	r7, #56	; 0x38
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40007c00 	.word	0x40007c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40004800 	.word	0x40004800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40011400 	.word	0x40011400
 8002e44:	40020800 	.word	0x40020800

08002e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	2036      	movs	r0, #54	; 0x36
 8002e5e:	f003 fa03 	bl	8006268 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e62:	2036      	movs	r0, #54	; 0x36
 8002e64:	f003 fa1c 	bl	80062a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <HAL_InitTick+0xa4>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_InitTick+0xa4>)
 8002e72:	f043 0310 	orr.w	r3, r3, #16
 8002e76:	6413      	str	r3, [r2, #64]	; 0x40
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <HAL_InitTick+0xa4>)
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e84:	f107 0210 	add.w	r2, r7, #16
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f005 f948 	bl	8008124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e94:	f005 f91e 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <HAL_InitTick+0xa8>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_InitTick+0xac>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_InitTick+0xb0>)
 8002eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_InitTick+0xac>)
 8002eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_InitTick+0xac>)
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_InitTick+0xac>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_InitTick+0xac>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ecc:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <HAL_InitTick+0xac>)
 8002ece:	f006 fdc9 	bl	8009a64 <HAL_TIM_Base_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d104      	bne.n	8002ee2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ed8:	4806      	ldr	r0, [pc, #24]	; (8002ef4 <HAL_InitTick+0xac>)
 8002eda:	f006 fe1d 	bl	8009b18 <HAL_TIM_Base_Start_IT>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	200054d0 	.word	0x200054d0
 8002ef8:	40001000 	.word	0x40001000

08002efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <HardFault_Handler+0x4>

08002f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <MemManage_Handler+0x4>

08002f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1a:	e7fe      	b.n	8002f1a <BusFault_Handler+0x4>

08002f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <UsageFault_Handler+0x4>

08002f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f003 fbad 	bl	8006694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <RTC_Alarm_IRQHandler+0x10>)
 8002f46:	f005 fe0b 	bl	8008b60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20005328 	.word	0x20005328

08002f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <TIM6_DAC_IRQHandler+0x10>)
 8002f5a:	f006 fe9c 	bl	8009c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200054d0 	.word	0x200054d0

08002f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	return 1;
 8002f6c:	2301      	movs	r3, #1
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_kill>:

int _kill(int pid, int sig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f82:	f00b fa77 	bl	800e474 <__errno>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2216      	movs	r2, #22
 8002f8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_exit>:

void _exit (int status)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ffe7 	bl	8002f78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002faa:	e7fe      	b.n	8002faa <_exit+0x12>

08002fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e00a      	b.n	8002fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fbe:	f3af 8000 	nop.w
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	60ba      	str	r2, [r7, #8]
 8002fca:	b2ca      	uxtb	r2, r1
 8002fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dbf0      	blt.n	8002fbe <_read+0x12>
	}

return len;
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e009      	b.n	800300c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	60ba      	str	r2, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbf1      	blt.n	8002ff8 <_write+0x12>
	}
	return len;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_close>:

int _close(int file)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
	return -1;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003046:	605a      	str	r2, [r3, #4]
	return 0;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_isatty>:

int _isatty(int file)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	return 1;
 800305e:	2301      	movs	r3, #1
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	return 0;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <_sbrk+0x5c>)
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <_sbrk+0x60>)
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <_sbrk+0x64>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <_sbrk+0x68>)
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <_sbrk+0x64>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d207      	bcs.n	80030c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b8:	f00b f9dc 	bl	800e474 <__errno>
 80030bc:	4603      	mov	r3, r0
 80030be:	220c      	movs	r2, #12
 80030c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e009      	b.n	80030dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <_sbrk+0x64>)
 80030d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20030000 	.word	0x20030000
 80030e8:	00000400 	.word	0x00000400
 80030ec:	2000026c 	.word	0x2000026c
 80030f0:	200056b0 	.word	0x200056b0

080030f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <SystemInit+0x28>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <SystemInit+0x28>)
 8003100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <SystemInit+0x28>)
 800310a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800310e:	609a      	str	r2, [r3, #8]
#endif
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003126:	e003      	b.n	8003130 <LoopCopyDataInit>

08003128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800312a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800312c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800312e:	3104      	adds	r1, #4

08003130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003138:	d3f6      	bcc.n	8003128 <CopyDataInit>
  ldr  r2, =_sbss
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800313c:	e002      	b.n	8003144 <LoopFillZerobss>

0800313e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800313e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003140:	f842 3b04 	str.w	r3, [r2], #4

08003144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003148:	d3f9      	bcc.n	800313e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800314a:	f7ff ffd3 	bl	80030f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314e:	f00b fa8d 	bl	800e66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003152:	f7fe fa71 	bl	8001638 <main>
  bx  lr    
 8003156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003158:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800315c:	08014a84 	.word	0x08014a84
  ldr  r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003164:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8003168:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800316c:	200056ac 	.word	0x200056ac

08003170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC_IRQHandler>
	...

08003174 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003180:	2364      	movs	r3, #100	; 0x64
 8003182:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800318c:	e073      	b.n	8003276 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <GPS_Poll+0x118>)
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	2364      	movs	r3, #100	; 0x64
 8003194:	2201      	movs	r2, #1
 8003196:	493e      	ldr	r1, [pc, #248]	; (8003290 <GPS_Poll+0x11c>)
 8003198:	f007 fb2f 	bl	800a7fa <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 800319c:	4b3c      	ldr	r3, [pc, #240]	; (8003290 <GPS_Poll+0x11c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b0a      	cmp	r3, #10
 80031a2:	d00f      	beq.n	80031c4 <GPS_Poll+0x50>
 80031a4:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <GPS_Poll+0x120>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b63      	cmp	r3, #99	; 0x63
 80031aa:	d80b      	bhi.n	80031c4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <GPS_Poll+0x120>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	b2d1      	uxtb	r1, r2
 80031b4:	4a37      	ldr	r2, [pc, #220]	; (8003294 <GPS_Poll+0x120>)
 80031b6:	7011      	strb	r1, [r2, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b35      	ldr	r3, [pc, #212]	; (8003290 <GPS_Poll+0x11c>)
 80031bc:	7819      	ldrb	r1, [r3, #0]
 80031be:	4b36      	ldr	r3, [pc, #216]	; (8003298 <GPS_Poll+0x124>)
 80031c0:	5499      	strb	r1, [r3, r2]
 80031c2:	e021      	b.n	8003208 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80031c4:	4834      	ldr	r0, [pc, #208]	; (8003298 <GPS_Poll+0x124>)
 80031c6:	f000 f86b 	bl	80032a0 <GPS_validate>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80031d0:	4831      	ldr	r0, [pc, #196]	; (8003298 <GPS_Poll+0x124>)
 80031d2:	f000 f8c7 	bl	8003364 <GPS_parse>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <GPS_Poll+0x128>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <GPS_Poll+0x128>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <GPS_Poll+0x128>)
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
					done = 1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <GPS_Poll+0x120>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80031fe:	2264      	movs	r2, #100	; 0x64
 8003200:	2100      	movs	r1, #0
 8003202:	4825      	ldr	r0, [pc, #148]	; (8003298 <GPS_Poll+0x124>)
 8003204:	f00b fa92 	bl	800e72c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003208:	2300      	movs	r3, #0
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <GPS_Poll+0x118>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <GPS_Poll+0x118>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <GPS_Poll+0x118>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <GPS_Poll+0x118>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <GPS_Poll+0x118>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <GPS_Poll+0x118>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <GPS_Poll+0x118>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <GPS_Poll+0x118>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003272:	3301      	adds	r3, #1
 8003274:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800327a:	429a      	cmp	r2, r3
 800327c:	d202      	bcs.n	8003284 <GPS_Poll+0x110>
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d084      	beq.n	800318e <GPS_Poll+0x1a>
	}
}
 8003284:	bf00      	nop
 8003286:	3730      	adds	r7, #48	; 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20004ff4 	.word	0x20004ff4
 8003290:	20000270 	.word	0x20000270
 8003294:	20000271 	.word	0x20000271
 8003298:	20005570 	.word	0x20005570
 800329c:	20005518 	.word	0x20005518

080032a0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b24      	cmp	r3, #36	; 0x24
 80032ba:	d103      	bne.n	80032c4 <GPS_validate+0x24>
        i++;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80032c2:	e00c      	b.n	80032de <GPS_validate+0x3e>
        return 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e047      	b.n	8003358 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4053      	eors	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        i++;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <GPS_validate+0x5c>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b2a      	cmp	r3, #42	; 0x2a
 80032f4:	d002      	beq.n	80032fc <GPS_validate+0x5c>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b4a      	cmp	r3, #74	; 0x4a
 80032fa:	dde5      	ble.n	80032c8 <GPS_validate+0x28>
    }

    if(i >= 75){
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b4a      	cmp	r3, #74	; 0x4a
 8003300:	dd01      	ble.n	8003306 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8003302:	2300      	movs	r3, #0
 8003304:	e028      	b.n	8003358 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b2a      	cmp	r3, #42	; 0x2a
 8003310:	d119      	bne.n	8003346 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3302      	adds	r3, #2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	490a      	ldr	r1, [pc, #40]	; (8003360 <GPS_validate+0xc0>)
 8003336:	4618      	mov	r0, r3
 8003338:	f00c fa76 	bl	800f828 <siprintf>
    return((checkcalcstr[0] == check[0])
 800333c:	7a3a      	ldrb	r2, [r7, #8]
 800333e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003340:	429a      	cmp	r2, r3
 8003342:	d108      	bne.n	8003356 <GPS_validate+0xb6>
 8003344:	e001      	b.n	800334a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003346:	2300      	movs	r3, #0
 8003348:	e006      	b.n	8003358 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800334a:	7a7a      	ldrb	r2, [r7, #9]
 800334c:	7b7b      	ldrb	r3, [r7, #13]
 800334e:	429a      	cmp	r2, r3
 8003350:	d101      	bne.n	8003356 <GPS_validate+0xb6>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <GPS_validate+0xb8>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0801391c 	.word	0x0801391c

08003364 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af08      	add	r7, sp, #32
 800336a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 800336c:	2206      	movs	r2, #6
 800336e:	496d      	ldr	r1, [pc, #436]	; (8003524 <GPS_parse+0x1c0>)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f00c faea 	bl	800f94a <strncmp>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d139      	bne.n	80033f0 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <GPS_parse+0x1c4>)
 800337e:	9307      	str	r3, [sp, #28]
 8003380:	4b6a      	ldr	r3, [pc, #424]	; (800352c <GPS_parse+0x1c8>)
 8003382:	9306      	str	r3, [sp, #24]
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <GPS_parse+0x1cc>)
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <GPS_parse+0x1d0>)
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <GPS_parse+0x1d4>)
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <GPS_parse+0x1d8>)
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <GPS_parse+0x1dc>)
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <GPS_parse+0x1e0>)
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <GPS_parse+0x1e4>)
 800339e:	4a6b      	ldr	r2, [pc, #428]	; (800354c <GPS_parse+0x1e8>)
 80033a0:	496b      	ldr	r1, [pc, #428]	; (8003550 <GPS_parse+0x1ec>)
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f00c fa60 	bl	800f868 <siscanf>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f340 80b5 	ble.w	800351a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <GPS_parse+0x1f0>)
 80033b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <GPS_parse+0x1f0>)
 80033b8:	7e1b      	ldrb	r3, [r3, #24]
 80033ba:	4618      	mov	r0, r3
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	f000 f8ec 	bl	800359c <GPS_nmea_to_dec>
 80033c4:	eef0 7a40 	vmov.f32	s15, s0
 80033c8:	4b62      	ldr	r3, [pc, #392]	; (8003554 <GPS_parse+0x1f0>)
 80033ca:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <GPS_parse+0x1f0>)
 80033d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033d4:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <GPS_parse+0x1f0>)
 80033d6:	7e5b      	ldrb	r3, [r3, #25]
 80033d8:	4618      	mov	r0, r3
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	f000 f8dd 	bl	800359c <GPS_nmea_to_dec>
 80033e2:	eef0 7a40 	vmov.f32	s15, s0
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <GPS_parse+0x1f0>)
 80033e8:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e095      	b.n	800351c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80033f0:	2206      	movs	r2, #6
 80033f2:	4959      	ldr	r1, [pc, #356]	; (8003558 <GPS_parse+0x1f4>)
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f00c faa8 	bl	800f94a <strncmp>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d134      	bne.n	800346a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <GPS_parse+0x1f8>)
 8003402:	9305      	str	r3, [sp, #20]
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <GPS_parse+0x1fc>)
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	4b56      	ldr	r3, [pc, #344]	; (8003564 <GPS_parse+0x200>)
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	4b4b      	ldr	r3, [pc, #300]	; (800353c <GPS_parse+0x1d8>)
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <GPS_parse+0x1dc>)
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <GPS_parse+0x1e0>)
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <GPS_parse+0x1e4>)
 800341a:	4a4c      	ldr	r2, [pc, #304]	; (800354c <GPS_parse+0x1e8>)
 800341c:	4952      	ldr	r1, [pc, #328]	; (8003568 <GPS_parse+0x204>)
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f00c fa22 	bl	800f868 <siscanf>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	dd77      	ble.n	800351a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <GPS_parse+0x1f0>)
 800342c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <GPS_parse+0x1f0>)
 8003432:	7e1b      	ldrb	r3, [r3, #24]
 8003434:	4618      	mov	r0, r3
 8003436:	eeb0 0a67 	vmov.f32	s0, s15
 800343a:	f000 f8af 	bl	800359c <GPS_nmea_to_dec>
 800343e:	eef0 7a40 	vmov.f32	s15, s0
 8003442:	4b44      	ldr	r3, [pc, #272]	; (8003554 <GPS_parse+0x1f0>)
 8003444:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003448:	4b42      	ldr	r3, [pc, #264]	; (8003554 <GPS_parse+0x1f0>)
 800344a:	edd3 7a03 	vldr	s15, [r3, #12]
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <GPS_parse+0x1f0>)
 8003450:	7e5b      	ldrb	r3, [r3, #25]
 8003452:	4618      	mov	r0, r3
 8003454:	eeb0 0a67 	vmov.f32	s0, s15
 8003458:	f000 f8a0 	bl	800359c <GPS_nmea_to_dec>
 800345c:	eef0 7a40 	vmov.f32	s15, s0
 8003460:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <GPS_parse+0x1f0>)
 8003462:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003466:	2301      	movs	r3, #1
 8003468:	e058      	b.n	800351c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800346a:	2206      	movs	r2, #6
 800346c:	493f      	ldr	r1, [pc, #252]	; (800356c <GPS_parse+0x208>)
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00c fa6b 	bl	800f94a <strncmp>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d130      	bne.n	80034dc <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <GPS_parse+0x20c>)
 800347c:	9303      	str	r3, [sp, #12]
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <GPS_parse+0x1e8>)
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	4b2e      	ldr	r3, [pc, #184]	; (800353c <GPS_parse+0x1d8>)
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <GPS_parse+0x1dc>)
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <GPS_parse+0x1e0>)
 800348c:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <GPS_parse+0x1e4>)
 800348e:	4939      	ldr	r1, [pc, #228]	; (8003574 <GPS_parse+0x210>)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f00c f9e9 	bl	800f868 <siscanf>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	dd3e      	ble.n	800351a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <GPS_parse+0x1f0>)
 800349e:	edd3 7a04 	vldr	s15, [r3, #16]
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <GPS_parse+0x1f0>)
 80034a4:	7e1b      	ldrb	r3, [r3, #24]
 80034a6:	4618      	mov	r0, r3
 80034a8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ac:	f000 f876 	bl	800359c <GPS_nmea_to_dec>
 80034b0:	eef0 7a40 	vmov.f32	s15, s0
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <GPS_parse+0x1f0>)
 80034b6:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <GPS_parse+0x1f0>)
 80034bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <GPS_parse+0x1f0>)
 80034c2:	7e5b      	ldrb	r3, [r3, #25]
 80034c4:	4618      	mov	r0, r3
 80034c6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ca:	f000 f867 	bl	800359c <GPS_nmea_to_dec>
 80034ce:	eef0 7a40 	vmov.f32	s15, s0
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <GPS_parse+0x1f0>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01f      	b.n	800351c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80034dc:	2206      	movs	r2, #6
 80034de:	4926      	ldr	r1, [pc, #152]	; (8003578 <GPS_parse+0x214>)
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f00c fa32 	bl	800f94a <strncmp>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <GPS_parse+0x218>)
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <GPS_parse+0x21c>)
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <GPS_parse+0x220>)
 80034f6:	9303      	str	r3, [sp, #12]
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <GPS_parse+0x200>)
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	4b22      	ldr	r3, [pc, #136]	; (8003588 <GPS_parse+0x224>)
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	4b22      	ldr	r3, [pc, #136]	; (800358c <GPS_parse+0x228>)
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <GPS_parse+0x22c>)
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <GPS_parse+0x230>)
 8003508:	4923      	ldr	r1, [pc, #140]	; (8003598 <GPS_parse+0x234>)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f00c f9ac 	bl	800f868 <siscanf>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	dd01      	ble.n	800351a <GPS_parse+0x1b6>
            return 0;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <GPS_parse+0x1b8>
    }
    return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	08013924 	.word	0x08013924
 8003528:	20005544 	.word	0x20005544
 800352c:	20005540 	.word	0x20005540
 8003530:	2000553c 	.word	0x2000553c
 8003534:	20005538 	.word	0x20005538
 8003538:	20005534 	.word	0x20005534
 800353c:	20005531 	.word	0x20005531
 8003540:	20005524 	.word	0x20005524
 8003544:	20005530 	.word	0x20005530
 8003548:	20005528 	.word	0x20005528
 800354c:	2000552c 	.word	0x2000552c
 8003550:	0801392c 	.word	0x0801392c
 8003554:	20005518 	.word	0x20005518
 8003558:	08013954 	.word	0x08013954
 800355c:	20005550 	.word	0x20005550
 8003560:	2000554c 	.word	0x2000554c
 8003564:	20005548 	.word	0x20005548
 8003568:	0801395c 	.word	0x0801395c
 800356c:	0801397c 	.word	0x0801397c
 8003570:	20005554 	.word	0x20005554
 8003574:	08013984 	.word	0x08013984
 8003578:	080139a0 	.word	0x080139a0
 800357c:	2000556c 	.word	0x2000556c
 8003580:	20005568 	.word	0x20005568
 8003584:	20005565 	.word	0x20005565
 8003588:	20005564 	.word	0x20005564
 800358c:	20005560 	.word	0x20005560
 8003590:	2000555c 	.word	0x2000555c
 8003594:	20005558 	.word	0x20005558
 8003598:	080139a8 	.word	0x080139a8

0800359c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80035a6:	4603      	mov	r3, r0
 80035a8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80035aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80035ae:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003630 <GPS_nmea_to_dec+0x94>
 80035b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ba:	ee17 3a90 	vmov	r3, s15
 80035be:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2264      	movs	r2, #100	; 0x64
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80035d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80035dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80035e0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003634 <GPS_nmea_to_dec+0x98>
 80035e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80035fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fe:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	2b53      	cmp	r3, #83	; 0x53
 8003606:	d002      	beq.n	800360e <GPS_nmea_to_dec+0x72>
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	2b57      	cmp	r3, #87	; 0x57
 800360c:	d105      	bne.n	800361a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eef1 7a67 	vneg.f32	s15, s15
 8003616:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	ee07 3a90 	vmov	s15, r3
}
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	42c80000 	.word	0x42c80000
 8003634:	42700000 	.word	0x42700000

08003638 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <GPS_init+0x30>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <GPS_init+0x34>)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <GPS_init+0x34>)
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	2210      	movs	r2, #16
 8003658:	4905      	ldr	r1, [pc, #20]	; (8003670 <GPS_init+0x38>)
 800365a:	f007 f83c 	bl	800a6d6 <HAL_UART_Transmit>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20004ff4 	.word	0x20004ff4
 800366c:	200055d4 	.word	0x200055d4
 8003670:	080139c8 	.word	0x080139c8

08003674 <__NVIC_SystemReset>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003678:	f3bf 8f4f 	dsb	sy
}
 800367c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <__NVIC_SystemReset+0x24>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003686:	4904      	ldr	r1, [pc, #16]	; (8003698 <__NVIC_SystemReset+0x24>)
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <__NVIC_SystemReset+0x28>)
 800368a:	4313      	orrs	r3, r2
 800368c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800368e:	f3bf 8f4f 	dsb	sy
}
 8003692:	bf00      	nop
    __NOP();
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <__NVIC_SystemReset+0x20>
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	05fa0004 	.word	0x05fa0004

080036a0 <MRT_externalFlashSetup>:
uint8_t NULL_BUFFER[NB_OF_FLAGS];

/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e007      	b.n	80036be <MRT_externalFlashSetup+0x1e>
		NULL_BUFFER[i] = 0; //Setup the null buffer for the correct number of values
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <MRT_externalFlashSetup+0x4c>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	ddf4      	ble.n	80036ae <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80036c4:	f000 fa80 	bl	8003bc8 <W25qxx_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80036d4:	f7ff f876 	bl	80027c4 <Error_Handler>
	}
	MRT_getFlags();
 80036d8:	f000 f828 	bl	800372c <MRT_getFlags>
	MRT_resetInfo(uart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8a7 	bl	8003830 <MRT_resetInfo>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200055e0 	.word	0x200055e0

080036f0 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset
		MRT_resetFromStart();
 8003700:	f000 f804 	bl	800370c <MRT_resetFromStart>
	}

}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
	//Clear all saved data of stages
	//TODO

	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f000 fbab 	bl	8003e6c <W25qxx_EraseSector>
	W25qxx_WriteSector(NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003716:	2303      	movs	r3, #3
 8003718:	2200      	movs	r2, #0
 800371a:	2101      	movs	r1, #1
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <MRT_resetFromStart+0x1c>)
 800371e:	f000 fcef 	bl	8004100 <W25qxx_WriteSector>

	//Reset function
	NVIC_SystemReset();
 8003722:	f7ff ffa7 	bl	8003674 <__NVIC_SystemReset>
 8003726:	bf00      	nop
 8003728:	200055e0 	.word	0x200055e0

0800372c <MRT_getFlags>:
		flash_flags_buffer[i] = *flash_flags[i];
	}
}


void MRT_getFlags(void){
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003732:	2303      	movs	r3, #3
 8003734:	2200      	movs	r2, #0
 8003736:	2101      	movs	r1, #1
 8003738:	4838      	ldr	r0, [pc, #224]	; (800381c <MRT_getFlags+0xf0>)
 800373a:	f000 fe1f 	bl	800437c <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <MRT_getFlags+0xf4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10c      	bne.n	8003760 <MRT_getFlags+0x34>
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <MRT_getFlags+0xf4>)
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <MRT_getFlags+0xf0>)
 800374c:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 800374e:	2001      	movs	r0, #1
 8003750:	f000 fb8c 	bl	8003e6c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003754:	2303      	movs	r3, #3
 8003756:	2200      	movs	r2, #0
 8003758:	2101      	movs	r1, #1
 800375a:	4830      	ldr	r0, [pc, #192]	; (800381c <MRT_getFlags+0xf0>)
 800375c:	f000 fcd0 	bl	8004100 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003760:	2300      	movs	r3, #0
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e00b      	b.n	800377e <MRT_getFlags+0x52>
		*flash_flags[i] = flash_flags_buffer[i];
 8003766:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <MRT_getFlags+0xf8>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	492b      	ldr	r1, [pc, #172]	; (800381c <MRT_getFlags+0xf0>)
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	440a      	add	r2, r1
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b02      	cmp	r3, #2
 8003782:	ddf0      	ble.n	8003766 <MRT_getFlags+0x3a>


	//Check flags values

	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <MRT_getFlags+0xfc>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <MRT_getFlags+0x88>
 800378c:	4b26      	ldr	r3, [pc, #152]	; (8003828 <MRT_getFlags+0xfc>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d00f      	beq.n	80037b4 <MRT_getFlags+0x88>
		reset_flag = 0;
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <MRT_getFlags+0xfc>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <MRT_getFlags+0xfc>)
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <MRT_getFlags+0xf0>)
 80037a0:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 fb62 	bl	8003e6c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80037a8:	2303      	movs	r3, #3
 80037aa:	2200      	movs	r2, #0
 80037ac:	2101      	movs	r1, #1
 80037ae:	481b      	ldr	r0, [pc, #108]	; (800381c <MRT_getFlags+0xf0>)
 80037b0:	f000 fca6 	bl	8004100 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1){ //If random value (none was written)
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <MRT_getFlags+0xf4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <MRT_getFlags+0xb8>
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <MRT_getFlags+0xf4>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00f      	beq.n	80037e4 <MRT_getFlags+0xb8>
		wu_flag = 0;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <MRT_getFlags+0xf4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <MRT_getFlags+0xf4>)
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <MRT_getFlags+0xf0>)
 80037d0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80037d2:	2001      	movs	r0, #1
 80037d4:	f000 fb4a 	bl	8003e6c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80037d8:	2303      	movs	r3, #3
 80037da:	2200      	movs	r2, #0
 80037dc:	2101      	movs	r1, #1
 80037de:	480f      	ldr	r0, [pc, #60]	; (800381c <MRT_getFlags+0xf0>)
 80037e0:	f000 fc8e 	bl	8004100 <W25qxx_WriteSector>
	}


	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <MRT_getFlags+0x100>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <MRT_getFlags+0xe8>
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MRT_getFlags+0x100>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d00f      	beq.n	8003814 <MRT_getFlags+0xe8>
		iwdg_flag = 0;
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <MRT_getFlags+0x100>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MRT_getFlags+0x100>)
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <MRT_getFlags+0xf0>)
 8003800:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003802:	2001      	movs	r0, #1
 8003804:	f000 fb32 	bl	8003e6c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003808:	2303      	movs	r3, #3
 800380a:	2200      	movs	r2, #0
 800380c:	2101      	movs	r1, #1
 800380e:	4803      	ldr	r0, [pc, #12]	; (800381c <MRT_getFlags+0xf0>)
 8003810:	f000 fc76 	bl	8004100 <W25qxx_WriteSector>
	}
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20005098 	.word	0x20005098
 8003820:	2000049d 	.word	0x2000049d
 8003824:	20000004 	.word	0x20000004
 8003828:	20000272 	.word	0x20000272
 800382c:	20000273 	.word	0x20000273

08003830 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]

	  char buffer[50];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\n",reset_flag, wu_flag, iwdg_flag);
 8003838:	4b3c      	ldr	r3, [pc, #240]	; (800392c <MRT_resetInfo+0xfc>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <MRT_resetInfo+0x100>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <MRT_resetInfo+0x104>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f107 000c 	add.w	r0, r7, #12
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	460b      	mov	r3, r1
 8003850:	4939      	ldr	r1, [pc, #228]	; (8003938 <MRT_resetInfo+0x108>)
 8003852:	f00b ffe9 	bl	800f828 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcc8 	bl	80001f0 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	f107 010c 	add.w	r1, r7, #12
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f006 ff32 	bl	800a6d6 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003872:	4b30      	ldr	r3, [pc, #192]	; (8003934 <MRT_resetInfo+0x104>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d124      	bne.n	80038c4 <MRT_resetInfo+0x94>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	2213      	movs	r2, #19
 8003880:	492e      	ldr	r1, [pc, #184]	; (800393c <MRT_resetInfo+0x10c>)
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f006 ff27 	bl	800a6d6 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <MRT_resetInfo+0x104>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <MRT_resetInfo+0x104>)
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <MRT_resetInfo+0x110>)
 8003894:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003896:	2001      	movs	r0, #1
 8003898:	f000 fae8 	bl	8003e6c <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800389c:	2303      	movs	r3, #3
 800389e:	2200      	movs	r2, #0
 80038a0:	2101      	movs	r1, #1
 80038a2:	4827      	ldr	r0, [pc, #156]	; (8003940 <MRT_resetInfo+0x110>)
 80038a4:	f000 fc2c 	bl	8004100 <W25qxx_WriteSector>

		  //Disable alarm A only
		  MRT_setAlarmA(0,0,0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2000      	movs	r0, #0
 80038ae:	f002 f813 	bl	80058d8 <MRT_setAlarmA>
		  MRT_ClearFlags();
 80038b2:	f001 ff51 	bl	8005758 <MRT_ClearFlags>

		  HAL_Delay(1000);
 80038b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ba:	f002 f963 	bl	8005b84 <HAL_Delay>


		  //MRT_Static_Iridium_Shutdown(); TODO

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80038be:	201e      	movs	r0, #30
 80038c0:	f001 ffc2 	bl	8005848 <MRT_StandByMode>
	  }


	  //Check if we are after waking up
	  if (wu_flag==1){
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <MRT_resetInfo+0x100>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10f      	bne.n	80038ec <MRT_resetInfo+0xbc>
		  HAL_UART_Transmit(uart, "FC wake up\r\n", 12, HAL_MAX_DELAY);
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	220c      	movs	r2, #12
 80038d2:	491c      	ldr	r1, [pc, #112]	; (8003944 <MRT_resetInfo+0x114>)
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f006 fefe 	bl	800a6d6 <HAL_UART_Transmit>

		  //Deactivate alarm interrupts
		  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80038da:	2029      	movs	r0, #41	; 0x29
 80038dc:	f002 fcee 	bl	80062bc <HAL_NVIC_DisableIRQ>
		  __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <MRT_resetInfo+0x118>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <MRT_resetInfo+0x118>)
 80038e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038ea:	6013      	str	r3, [r2, #0]
	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <MRT_resetInfo+0xfc>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <MRT_resetInfo+0xf2>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	220e      	movs	r2, #14
 80038fa:	4914      	ldr	r1, [pc, #80]	; (800394c <MRT_resetInfo+0x11c>)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f006 feea 	bl	800a6d6 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <MRT_resetInfo+0xfc>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <MRT_resetInfo+0xfc>)
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <MRT_resetInfo+0x110>)
 800390e:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003910:	2001      	movs	r0, #1
 8003912:	f000 faab 	bl	8003e6c <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003916:	2303      	movs	r3, #3
 8003918:	2200      	movs	r2, #0
 800391a:	2101      	movs	r1, #1
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <MRT_resetInfo+0x110>)
 800391e:	f000 fbef 	bl	8004100 <W25qxx_WriteSector>
	  }
}
 8003922:	bf00      	nop
 8003924:	3740      	adds	r7, #64	; 0x40
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000272 	.word	0x20000272
 8003930:	2000049d 	.word	0x2000049d
 8003934:	20000273 	.word	0x20000273
 8003938:	08013a0c 	.word	0x08013a0c
 800393c:	08013a2c 	.word	0x08013a2c
 8003940:	20005098 	.word	0x20005098
 8003944:	08013a40 	.word	0x08013a40
 8003948:	40013c00 	.word	0x40013c00
 800394c:	08013a50 	.word	0x08013a50

08003950 <MRT_getContinuity>:


uint8_t MRT_getContinuity(void){
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800395a:	4815      	ldr	r0, [pc, #84]	; (80039b0 <MRT_getContinuity+0x60>)
 800395c:	f002 fe68 	bl	8006630 <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003968:	4811      	ldr	r0, [pc, #68]	; (80039b0 <MRT_getContinuity+0x60>)
 800396a:	f002 fe61 	bl	8006630 <HAL_GPIO_ReadPin>
 800396e:	4603      	mov	r3, r0
 8003970:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003972:	2101      	movs	r1, #1
 8003974:	480e      	ldr	r0, [pc, #56]	; (80039b0 <MRT_getContinuity+0x60>)
 8003976:	f002 fe5b 	bl	8006630 <HAL_GPIO_ReadPin>
 800397a:	4603      	mov	r3, r0
 800397c:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 800397e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003982:	480c      	ldr	r0, [pc, #48]	; (80039b4 <MRT_getContinuity+0x64>)
 8003984:	f002 fe54 	bl	8006630 <HAL_GPIO_ReadPin>
 8003988:	4603      	mov	r3, r0
 800398a:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	005a      	lsls	r2, r3, #1
 8003990:	79bb      	ldrb	r3, [r7, #6]
 8003992:	4413      	add	r3, r2
 8003994:	005a      	lsls	r2, r3, #1
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	4413      	add	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	793b      	ldrb	r3, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021800 	.word	0x40021800
 80039b4:	40021400 	.word	0x40021400

080039b8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80039c2:	f107 020f 	add.w	r2, r7, #15
 80039c6:	1df9      	adds	r1, r7, #7
 80039c8:	2364      	movs	r3, #100	; 0x64
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2301      	movs	r3, #1
 80039ce:	4804      	ldr	r0, [pc, #16]	; (80039e0 <W25qxx_Spi+0x28>)
 80039d0:	f005 fd76 	bl	80094c0 <HAL_SPI_TransmitReceive>
	return ret;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20004ff8 	.word	0x20004ff8

080039e4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	2300      	movs	r3, #0
 80039f8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	4813      	ldr	r0, [pc, #76]	; (8003a4c <W25qxx_ReadID+0x68>)
 8003a00:	f002 fe2e 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003a04:	209f      	movs	r0, #159	; 0x9f
 8003a06:	f7ff ffd7 	bl	80039b8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a0a:	20a5      	movs	r0, #165	; 0xa5
 8003a0c:	f7ff ffd4 	bl	80039b8 <W25qxx_Spi>
 8003a10:	4603      	mov	r3, r0
 8003a12:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a14:	20a5      	movs	r0, #165	; 0xa5
 8003a16:	f7ff ffcf 	bl	80039b8 <W25qxx_Spi>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a1e:	20a5      	movs	r0, #165	; 0xa5
 8003a20:	f7ff ffca 	bl	80039b8 <W25qxx_Spi>
 8003a24:	4603      	mov	r3, r0
 8003a26:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	4807      	ldr	r0, [pc, #28]	; (8003a4c <W25qxx_ReadID+0x68>)
 8003a2e:	f002 fe17 	bl	8006660 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003a42:	68fb      	ldr	r3, [r7, #12]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40020c00 	.word	0x40020c00

08003a50 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	4816      	ldr	r0, [pc, #88]	; (8003ab4 <W25qxx_ReadUniqID+0x64>)
 8003a5c:	f002 fe00 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003a60:	204b      	movs	r0, #75	; 0x4b
 8003a62:	f7ff ffa9 	bl	80039b8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	71fb      	strb	r3, [r7, #7]
 8003a6a:	e005      	b.n	8003a78 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a6c:	20a5      	movs	r0, #165	; 0xa5
 8003a6e:	f7ff ffa3 	bl	80039b8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	3301      	adds	r3, #1
 8003a76:	71fb      	strb	r3, [r7, #7]
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d9f6      	bls.n	8003a6c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	71bb      	strb	r3, [r7, #6]
 8003a82:	e00b      	b.n	8003a9c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a84:	79bc      	ldrb	r4, [r7, #6]
 8003a86:	20a5      	movs	r0, #165	; 0xa5
 8003a88:	f7ff ff96 	bl	80039b8 <W25qxx_Spi>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <W25qxx_ReadUniqID+0x68>)
 8003a92:	4423      	add	r3, r4
 8003a94:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003a96:	79bb      	ldrb	r3, [r7, #6]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	71bb      	strb	r3, [r7, #6]
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	2b07      	cmp	r3, #7
 8003aa0:	d9f0      	bls.n	8003a84 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	4803      	ldr	r0, [pc, #12]	; (8003ab4 <W25qxx_ReadUniqID+0x64>)
 8003aa8:	f002 fdda 	bl	8006660 <HAL_GPIO_WritePin>
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}
 8003ab4:	40020c00 	.word	0x40020c00
 8003ab8:	200055e4 	.word	0x200055e4

08003abc <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <W25qxx_WriteEnable+0x28>)
 8003ac6:	f002 fdcb 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003aca:	2006      	movs	r0, #6
 8003acc:	f7ff ff74 	bl	80039b8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <W25qxx_WriteEnable+0x28>)
 8003ad6:	f002 fdc3 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003ada:	2001      	movs	r0, #1
 8003adc:	f007 ff91 	bl	800ba02 <osDelay>
}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40020c00 	.word	0x40020c00

08003ae8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2140      	movs	r1, #64	; 0x40
 8003afa:	481c      	ldr	r0, [pc, #112]	; (8003b6c <W25qxx_ReadStatusRegister+0x84>)
 8003afc:	f002 fdb0 	bl	8006660 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10c      	bne.n	8003b20 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003b06:	2005      	movs	r0, #5
 8003b08:	f7ff ff56 	bl	80039b8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b0c:	20a5      	movs	r0, #165	; 0xa5
 8003b0e:	f7ff ff53 	bl	80039b8 <W25qxx_Spi>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003b16:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <W25qxx_ReadStatusRegister+0x88>)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003b1e:	e01b      	b.n	8003b58 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d10c      	bne.n	8003b40 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003b26:	2035      	movs	r0, #53	; 0x35
 8003b28:	f7ff ff46 	bl	80039b8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b2c:	20a5      	movs	r0, #165	; 0xa5
 8003b2e:	f7ff ff43 	bl	80039b8 <W25qxx_Spi>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <W25qxx_ReadStatusRegister+0x88>)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003b3e:	e00b      	b.n	8003b58 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003b40:	2015      	movs	r0, #21
 8003b42:	f7ff ff39 	bl	80039b8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b46:	20a5      	movs	r0, #165	; 0xa5
 8003b48:	f7ff ff36 	bl	80039b8 <W25qxx_Spi>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <W25qxx_ReadStatusRegister+0x88>)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	4803      	ldr	r0, [pc, #12]	; (8003b6c <W25qxx_ReadStatusRegister+0x84>)
 8003b5e:	f002 fd7f 	bl	8006660 <HAL_GPIO_WritePin>
	return status;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	200055e4 	.word	0x200055e4

08003b74 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f007 ff42 	bl	800ba02 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	480f      	ldr	r0, [pc, #60]	; (8003bc0 <W25qxx_WaitForWriteEnd+0x4c>)
 8003b84:	f002 fd6c 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003b88:	2005      	movs	r0, #5
 8003b8a:	f7ff ff15 	bl	80039b8 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b8e:	20a5      	movs	r0, #165	; 0xa5
 8003b90:	f7ff ff12 	bl	80039b8 <W25qxx_Spi>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <W25qxx_WaitForWriteEnd+0x50>)
 8003b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f007 ff2f 	bl	800ba02 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <W25qxx_WaitForWriteEnd+0x50>)
 8003ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ed      	bne.n	8003b8e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <W25qxx_WaitForWriteEnd+0x4c>)
 8003bb8:	f002 fd52 	bl	8006660 <HAL_GPIO_WritePin>
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	200055e4 	.word	0x200055e4

08003bc8 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003bce:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <W25qxx_Init+0x248>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003bd6:	e002      	b.n	8003bde <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f007 ff12 	bl	800ba02 <osDelay>
	while (HAL_GetTick() < 100)
 8003bde:	f001 ffc5 	bl	8005b6c <HAL_GetTick>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b63      	cmp	r3, #99	; 0x63
 8003be6:	d9f7      	bls.n	8003bd8 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003be8:	2201      	movs	r2, #1
 8003bea:	2140      	movs	r1, #64	; 0x40
 8003bec:	4889      	ldr	r0, [pc, #548]	; (8003e14 <W25qxx_Init+0x24c>)
 8003bee:	f002 fd37 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003bf2:	2064      	movs	r0, #100	; 0x64
 8003bf4:	f007 ff05 	bl	800ba02 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003bf8:	4887      	ldr	r0, [pc, #540]	; (8003e18 <W25qxx_Init+0x250>)
 8003bfa:	f00b fd49 	bl	800f690 <puts>
#endif
	id = W25qxx_ReadID();
 8003bfe:	f7ff fef1 	bl	80039e4 <W25qxx_ReadID>
 8003c02:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4885      	ldr	r0, [pc, #532]	; (8003e1c <W25qxx_Init+0x254>)
 8003c08:	f00b fcbc 	bl	800f584 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3b11      	subs	r3, #17
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	f200 808b 	bhi.w	8003d2e <W25qxx_Init+0x166>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <W25qxx_Init+0x58>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003d1b 	.word	0x08003d1b
 8003c24:	08003d07 	.word	0x08003d07
 8003c28:	08003cf3 	.word	0x08003cf3
 8003c2c:	08003cdf 	.word	0x08003cdf
 8003c30:	08003ccb 	.word	0x08003ccb
 8003c34:	08003cb7 	.word	0x08003cb7
 8003c38:	08003ca3 	.word	0x08003ca3
 8003c3c:	08003c8d 	.word	0x08003c8d
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003d2f 	.word	0x08003d2f
 8003c48:	08003d2f 	.word	0x08003d2f
 8003c4c:	08003d2f 	.word	0x08003d2f
 8003c50:	08003d2f 	.word	0x08003d2f
 8003c54:	08003d2f 	.word	0x08003d2f
 8003c58:	08003d2f 	.word	0x08003d2f
 8003c5c:	08003c61 	.word	0x08003c61
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003c60:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <W25qxx_Init+0x248>)
 8003c62:	220a      	movs	r2, #10
 8003c64:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <W25qxx_Init+0x248>)
 8003c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003c6e:	486c      	ldr	r0, [pc, #432]	; (8003e20 <W25qxx_Init+0x258>)
 8003c70:	f00b fd0e 	bl	800f690 <puts>
#endif
		break;
 8003c74:	e064      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003c76:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <W25qxx_Init+0x248>)
 8003c78:	2209      	movs	r2, #9
 8003c7a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <W25qxx_Init+0x248>)
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003c84:	4867      	ldr	r0, [pc, #412]	; (8003e24 <W25qxx_Init+0x25c>)
 8003c86:	f00b fd03 	bl	800f690 <puts>
#endif
		break;
 8003c8a:	e059      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003c8c:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <W25qxx_Init+0x248>)
 8003c8e:	2208      	movs	r2, #8
 8003c90:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <W25qxx_Init+0x248>)
 8003c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003c9a:	4863      	ldr	r0, [pc, #396]	; (8003e28 <W25qxx_Init+0x260>)
 8003c9c:	f00b fcf8 	bl	800f690 <puts>
#endif
		break;
 8003ca0:	e04e      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <W25qxx_Init+0x248>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003ca8:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <W25qxx_Init+0x248>)
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003cae:	485f      	ldr	r0, [pc, #380]	; (8003e2c <W25qxx_Init+0x264>)
 8003cb0:	f00b fcee 	bl	800f690 <puts>
#endif
		break;
 8003cb4:	e044      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003cb6:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <W25qxx_Init+0x248>)
 8003cb8:	2206      	movs	r2, #6
 8003cba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003cbc:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <W25qxx_Init+0x248>)
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003cc2:	485b      	ldr	r0, [pc, #364]	; (8003e30 <W25qxx_Init+0x268>)
 8003cc4:	f00b fce4 	bl	800f690 <puts>
#endif
		break;
 8003cc8:	e03a      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <W25qxx_Init+0x248>)
 8003ccc:	2205      	movs	r2, #5
 8003cce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <W25qxx_Init+0x248>)
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003cd6:	4857      	ldr	r0, [pc, #348]	; (8003e34 <W25qxx_Init+0x26c>)
 8003cd8:	f00b fcda 	bl	800f690 <puts>
#endif
		break;
 8003cdc:	e030      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <W25qxx_Init+0x248>)
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003ce4:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <W25qxx_Init+0x248>)
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003cea:	4853      	ldr	r0, [pc, #332]	; (8003e38 <W25qxx_Init+0x270>)
 8003cec:	f00b fcd0 	bl	800f690 <puts>
#endif
		break;
 8003cf0:	e026      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <W25qxx_Init+0x248>)
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <W25qxx_Init+0x248>)
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003cfe:	484f      	ldr	r0, [pc, #316]	; (8003e3c <W25qxx_Init+0x274>)
 8003d00:	f00b fcc6 	bl	800f690 <puts>
#endif
		break;
 8003d04:	e01c      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <W25qxx_Init+0x248>)
 8003d08:	2202      	movs	r2, #2
 8003d0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <W25qxx_Init+0x248>)
 8003d0e:	2204      	movs	r2, #4
 8003d10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003d12:	484b      	ldr	r0, [pc, #300]	; (8003e40 <W25qxx_Init+0x278>)
 8003d14:	f00b fcbc 	bl	800f690 <puts>
#endif
		break;
 8003d18:	e012      	b.n	8003d40 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <W25qxx_Init+0x248>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <W25qxx_Init+0x248>)
 8003d22:	2202      	movs	r2, #2
 8003d24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003d26:	4847      	ldr	r0, [pc, #284]	; (8003e44 <W25qxx_Init+0x27c>)
 8003d28:	f00b fcb2 	bl	800f690 <puts>
#endif
		break;
 8003d2c:	e008      	b.n	8003d40 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003d2e:	4846      	ldr	r0, [pc, #280]	; (8003e48 <W25qxx_Init+0x280>)
 8003d30:	f00b fcae 	bl	800f690 <puts>
#endif
		w25qxx.Lock = 0;
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <W25qxx_Init+0x248>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e063      	b.n	8003e08 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003d40:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <W25qxx_Init+0x248>)
 8003d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d46:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <W25qxx_Init+0x248>)
 8003d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d4e:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003d50:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <W25qxx_Init+0x248>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <W25qxx_Init+0x248>)
 8003d58:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <W25qxx_Init+0x248>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <W25qxx_Init+0x248>)
 8003d60:	6912      	ldr	r2, [r2, #16]
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <W25qxx_Init+0x248>)
 8003d68:	8952      	ldrh	r2, [r2, #10]
 8003d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <W25qxx_Init+0x248>)
 8003d70:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <W25qxx_Init+0x248>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <W25qxx_Init+0x248>)
 8003d7a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <W25qxx_Init+0x248>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <W25qxx_Init+0x248>)
 8003d82:	6912      	ldr	r2, [r2, #16]
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	0a9b      	lsrs	r3, r3, #10
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <W25qxx_Init+0x248>)
 8003d8c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003d8e:	f7ff fe5f 	bl	8003a50 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff fea8 	bl	8003ae8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003d98:	2002      	movs	r0, #2
 8003d9a:	f7ff fea5 	bl	8003ae8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003d9e:	2003      	movs	r0, #3
 8003da0:	f7ff fea2 	bl	8003ae8 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <W25qxx_Init+0x248>)
 8003da6:	895b      	ldrh	r3, [r3, #10]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4828      	ldr	r0, [pc, #160]	; (8003e4c <W25qxx_Init+0x284>)
 8003dac:	f00b fbea 	bl	800f584 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <W25qxx_Init+0x248>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4826      	ldr	r0, [pc, #152]	; (8003e50 <W25qxx_Init+0x288>)
 8003db8:	f00b fbe4 	bl	800f584 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <W25qxx_Init+0x248>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4824      	ldr	r0, [pc, #144]	; (8003e54 <W25qxx_Init+0x28c>)
 8003dc4:	f00b fbde 	bl	800f584 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <W25qxx_Init+0x248>)
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4822      	ldr	r0, [pc, #136]	; (8003e58 <W25qxx_Init+0x290>)
 8003dd0:	f00b fbd8 	bl	800f584 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <W25qxx_Init+0x248>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4820      	ldr	r0, [pc, #128]	; (8003e5c <W25qxx_Init+0x294>)
 8003ddc:	f00b fbd2 	bl	800f584 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <W25qxx_Init+0x248>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4619      	mov	r1, r3
 8003de6:	481e      	ldr	r0, [pc, #120]	; (8003e60 <W25qxx_Init+0x298>)
 8003de8:	f00b fbcc 	bl	800f584 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <W25qxx_Init+0x248>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4619      	mov	r1, r3
 8003df2:	481c      	ldr	r0, [pc, #112]	; (8003e64 <W25qxx_Init+0x29c>)
 8003df4:	f00b fbc6 	bl	800f584 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003df8:	481b      	ldr	r0, [pc, #108]	; (8003e68 <W25qxx_Init+0x2a0>)
 8003dfa:	f00b fc49 	bl	800f690 <puts>
#endif
	w25qxx.Lock = 0;
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <W25qxx_Init+0x248>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200055e4 	.word	0x200055e4
 8003e14:	40020c00 	.word	0x40020c00
 8003e18:	08013a60 	.word	0x08013a60
 8003e1c:	08013a78 	.word	0x08013a78
 8003e20:	08013a8c 	.word	0x08013a8c
 8003e24:	08013aa4 	.word	0x08013aa4
 8003e28:	08013abc 	.word	0x08013abc
 8003e2c:	08013ad4 	.word	0x08013ad4
 8003e30:	08013aec 	.word	0x08013aec
 8003e34:	08013b04 	.word	0x08013b04
 8003e38:	08013b1c 	.word	0x08013b1c
 8003e3c:	08013b34 	.word	0x08013b34
 8003e40:	08013b4c 	.word	0x08013b4c
 8003e44:	08013b64 	.word	0x08013b64
 8003e48:	08013b7c 	.word	0x08013b7c
 8003e4c:	08013b90 	.word	0x08013b90
 8003e50:	08013bb0 	.word	0x08013bb0
 8003e54:	08013bc8 	.word	0x08013bc8
 8003e58:	08013be8 	.word	0x08013be8
 8003e5c:	08013c04 	.word	0x08013c04
 8003e60:	08013c24 	.word	0x08013c24
 8003e64:	08013c40 	.word	0x08013c40
 8003e68:	08013c60 	.word	0x08013c60

08003e6c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003e74:	e002      	b.n	8003e7c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003e76:	2001      	movs	r0, #1
 8003e78:	f007 fdc3 	bl	800ba02 <osDelay>
	while (w25qxx.Lock == 1)
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <W25qxx_EraseSector+0xc8>)
 8003e7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d0f7      	beq.n	8003e76 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <W25qxx_EraseSector+0xc8>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003e8e:	f001 fe6d 	bl	8005b6c <HAL_GetTick>
 8003e92:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4828      	ldr	r0, [pc, #160]	; (8003f38 <W25qxx_EraseSector+0xcc>)
 8003e98:	f00b fb74 	bl	800f584 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003e9c:	f7ff fe6a 	bl	8003b74 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <W25qxx_EraseSector+0xc8>)
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003eac:	f7ff fe06 	bl	8003abc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	4821      	ldr	r0, [pc, #132]	; (8003f3c <W25qxx_EraseSector+0xd0>)
 8003eb6:	f002 fbd3 	bl	8006660 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <W25qxx_EraseSector+0xc8>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d909      	bls.n	8003ed6 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003ec2:	2021      	movs	r0, #33	; 0x21
 8003ec4:	f7ff fd78 	bl	80039b8 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0e1b      	lsrs	r3, r3, #24
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fd72 	bl	80039b8 <W25qxx_Spi>
 8003ed4:	e002      	b.n	8003edc <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003ed6:	2020      	movs	r0, #32
 8003ed8:	f7ff fd6e 	bl	80039b8 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fd68 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fd62 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fd5d 	bl	80039b8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003efe:	2201      	movs	r2, #1
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	480e      	ldr	r0, [pc, #56]	; (8003f3c <W25qxx_EraseSector+0xd0>)
 8003f04:	f002 fbac 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003f08:	f7ff fe34 	bl	8003b74 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003f0c:	f001 fe2e 	bl	8005b6c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <W25qxx_EraseSector+0xd4>)
 8003f1a:	f00b fb33 	bl	800f584 <iprintf>
#endif
	W25qxx_Delay(1);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f007 fd6f 	bl	800ba02 <osDelay>
	w25qxx.Lock = 0;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <W25qxx_EraseSector+0xc8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	200055e4 	.word	0x200055e4
 8003f38:	08013cb8 	.word	0x08013cb8
 8003f3c:	40020c00 	.word	0x40020c00
 8003f40:	08013cdc 	.word	0x08013cdc

08003f44 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <W25qxx_SectorToPage+0x28>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <W25qxx_SectorToPage+0x28>)
 8003f58:	8952      	ldrh	r2, [r2, #10]
 8003f5a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	200055e4 	.word	0x200055e4

08003f70 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003f7e:	e002      	b.n	8003f86 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003f80:	2001      	movs	r0, #1
 8003f82:	f007 fd3e 	bl	800ba02 <osDelay>
	while (w25qxx.Lock == 1)
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003f88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d0f7      	beq.n	8003f80 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003f90:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003fa0:	8952      	ldrh	r2, [r2, #10]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <W25qxx_WritePage+0x3c>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003fae:	895b      	ldrh	r3, [r3, #10]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a49      	ldr	r2, [pc, #292]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003fc0:	8952      	ldrh	r2, [r2, #10]
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d905      	bls.n	8003fd2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003fc8:	895b      	ldrh	r3, [r3, #10]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	4843      	ldr	r0, [pc, #268]	; (80040e8 <W25qxx_WritePage+0x178>)
 8003fda:	f00b fad3 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 8003fde:	2064      	movs	r0, #100	; 0x64
 8003fe0:	f007 fd0f 	bl	800ba02 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003fe4:	f001 fdc2 	bl	8005b6c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8003fea:	f7ff fdc3 	bl	8003b74 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003fee:	f7ff fd65 	bl	8003abc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	483d      	ldr	r0, [pc, #244]	; (80040ec <W25qxx_WritePage+0x17c>)
 8003ff8:	f002 fb32 	bl	8006660 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003ffc:	4b39      	ldr	r3, [pc, #228]	; (80040e4 <W25qxx_WritePage+0x174>)
 8003ffe:	895b      	ldrh	r3, [r3, #10]
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	fb03 f302 	mul.w	r3, r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <W25qxx_WritePage+0x174>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d909      	bls.n	800402a <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004016:	2012      	movs	r0, #18
 8004018:	f7ff fcce 	bl	80039b8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fcc8 	bl	80039b8 <W25qxx_Spi>
 8004028:	e002      	b.n	8004030 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800402a:	2002      	movs	r0, #2
 800402c:	f7ff fcc4 	bl	80039b8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fcbe 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fcb8 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fcb3 	bl	80039b8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	2364      	movs	r3, #100	; 0x64
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	4825      	ldr	r0, [pc, #148]	; (80040f0 <W25qxx_WritePage+0x180>)
 800405c:	f004 ffe3 	bl	8009026 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004060:	2201      	movs	r2, #1
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	4821      	ldr	r0, [pc, #132]	; (80040ec <W25qxx_WritePage+0x17c>)
 8004066:	f002 fafb 	bl	8006660 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800406a:	f7ff fd83 	bl	8003b74 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800406e:	f001 fd7d 	bl	8005b6c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e018      	b.n	80040b2 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <W25qxx_WritePage+0x12c>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d905      	bls.n	800409c <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004090:	4818      	ldr	r0, [pc, #96]	; (80040f4 <W25qxx_WritePage+0x184>)
 8004092:	f00b fafd 	bl	800f690 <puts>
			W25qxx_Delay(10);
 8004096:	200a      	movs	r0, #10
 8004098:	f007 fcb3 	bl	800ba02 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4814      	ldr	r0, [pc, #80]	; (80040f8 <W25qxx_WritePage+0x188>)
 80040a8:	f00b fa6c 	bl	800f584 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3e2      	bcc.n	8004080 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80040ba:	480e      	ldr	r0, [pc, #56]	; (80040f4 <W25qxx_WritePage+0x184>)
 80040bc:	f00b fae8 	bl	800f690 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80040c0:	6939      	ldr	r1, [r7, #16]
 80040c2:	480e      	ldr	r0, [pc, #56]	; (80040fc <W25qxx_WritePage+0x18c>)
 80040c4:	f00b fa5e 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 80040c8:	2064      	movs	r0, #100	; 0x64
 80040ca:	f007 fc9a 	bl	800ba02 <osDelay>
#endif
	W25qxx_Delay(1);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f007 fc97 	bl	800ba02 <osDelay>
	w25qxx.Lock = 0;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <W25qxx_WritePage+0x174>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200055e4 	.word	0x200055e4
 80040e8:	08013f40 	.word	0x08013f40
 80040ec:	40020c00 	.word	0x40020c00
 80040f0:	20004ff8 	.word	0x20004ff8
 80040f4:	08013f7c 	.word	0x08013f7c
 80040f8:	08013f80 	.word	0x08013f80
 80040fc:	08013f88 	.word	0x08013f88

08004100 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d802      	bhi.n	800411e <W25qxx_WriteSector+0x1e>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4830      	ldr	r0, [pc, #192]	; (80041ec <W25qxx_WriteSector+0xec>)
 800412c:	f00b fa2a 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 8004130:	2064      	movs	r0, #100	; 0x64
 8004132:	f007 fc66 	bl	800ba02 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004136:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d306      	bcc.n	800414e <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004140:	482b      	ldr	r0, [pc, #172]	; (80041f0 <W25qxx_WriteSector+0xf0>)
 8004142:	f00b faa5 	bl	800f690 <puts>
		W25qxx_Delay(100);
 8004146:	2064      	movs	r0, #100	; 0x64
 8004148:	f007 fc5b 	bl	800ba02 <osDelay>
#endif
		return;
 800414c:	e048      	b.n	80041e0 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	441a      	add	r2, r3
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d905      	bls.n	8004168 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e001      	b.n	800416c <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800416c:	68b8      	ldr	r0, [r7, #8]
 800416e:	f7ff fee9 	bl	8003f44 <W25qxx_SectorToPage>
 8004172:	4602      	mov	r2, r0
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004176:	895b      	ldrh	r3, [r3, #10]
 8004178:	4619      	mov	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 8004186:	895b      	ldrh	r3, [r3, #10]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004190:	fb02 f201 	mul.w	r2, r2, r1
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	69f9      	ldr	r1, [r7, #28]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff fee6 	bl	8003f70 <W25qxx_WritePage>
		StartPage++;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	461a      	mov	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1a9a      	subs	r2, r3, r2
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <W25qxx_WriteSector+0xe8>)
 80041bc:	895b      	ldrh	r3, [r3, #10]
 80041be:	461a      	mov	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dce1      	bgt.n	8004198 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80041d4:	4807      	ldr	r0, [pc, #28]	; (80041f4 <W25qxx_WriteSector+0xf4>)
 80041d6:	f00b fa5b 	bl	800f690 <puts>
	W25qxx_Delay(100);
 80041da:	2064      	movs	r0, #100	; 0x64
 80041dc:	f007 fc11 	bl	800ba02 <osDelay>
#endif
}
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200055e4 	.word	0x200055e4
 80041ec:	08013fac 	.word	0x08013fac
 80041f0:	08013fec 	.word	0x08013fec
 80041f4:	0801400c 	.word	0x0801400c

080041f8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004206:	e002      	b.n	800420e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004208:	2001      	movs	r0, #1
 800420a:	f007 fbfa 	bl	800ba02 <osDelay>
	while (w25qxx.Lock == 1)
 800420e:	4b54      	ldr	r3, [pc, #336]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004210:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004214:	2b01      	cmp	r3, #1
 8004216:	d0f7      	beq.n	8004208 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004218:	4b51      	ldr	r3, [pc, #324]	; (8004360 <W25qxx_ReadPage+0x168>)
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004222:	895b      	ldrh	r3, [r3, #10]
 8004224:	461a      	mov	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4293      	cmp	r3, r2
 800422a:	d802      	bhi.n	8004232 <W25qxx_ReadPage+0x3a>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004232:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004234:	895b      	ldrh	r3, [r3, #10]
 8004236:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4413      	add	r3, r2
 800423e:	4a48      	ldr	r2, [pc, #288]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004240:	8952      	ldrh	r2, [r2, #10]
 8004242:	4293      	cmp	r3, r2
 8004244:	d905      	bls.n	8004252 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004246:	4b46      	ldr	r3, [pc, #280]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4842      	ldr	r0, [pc, #264]	; (8004364 <W25qxx_ReadPage+0x16c>)
 800425a:	f00b f993 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 800425e:	2064      	movs	r0, #100	; 0x64
 8004260:	f007 fbcf 	bl	800ba02 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004264:	f001 fc82 	bl	8005b6c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <W25qxx_ReadPage+0x168>)
 800426c:	895b      	ldrh	r3, [r3, #10]
 800426e:	461a      	mov	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	fb03 f302 	mul.w	r3, r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	4839      	ldr	r0, [pc, #228]	; (8004368 <W25qxx_ReadPage+0x170>)
 8004282:	f002 f9ed 	bl	8006660 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b08      	cmp	r3, #8
 800428c:	d909      	bls.n	80042a2 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800428e:	200c      	movs	r0, #12
 8004290:	f7ff fb92 	bl	80039b8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	0e1b      	lsrs	r3, r3, #24
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fb8c 	bl	80039b8 <W25qxx_Spi>
 80042a0:	e002      	b.n	80042a8 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80042a2:	200b      	movs	r0, #11
 80042a4:	f7ff fb88 	bl	80039b8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb82 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fb7c 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fb77 	bl	80039b8 <W25qxx_Spi>
	W25qxx_Spi(0);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7ff fb74 	bl	80039b8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	2364      	movs	r3, #100	; 0x64
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	4824      	ldr	r0, [pc, #144]	; (800436c <W25qxx_ReadPage+0x174>)
 80042da:	f004 ffe0 	bl	800929e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042de:	2201      	movs	r2, #1
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	4821      	ldr	r0, [pc, #132]	; (8004368 <W25qxx_ReadPage+0x170>)
 80042e4:	f002 f9bc 	bl	8006660 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80042e8:	f001 fc40 	bl	8005b6c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e018      	b.n	800432c <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <W25qxx_ReadPage+0x11e>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d905      	bls.n	8004316 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800430a:	4819      	ldr	r0, [pc, #100]	; (8004370 <W25qxx_ReadPage+0x178>)
 800430c:	f00b f9c0 	bl	800f690 <puts>
			W25qxx_Delay(10);
 8004310:	200a      	movs	r0, #10
 8004312:	f007 fb76 	bl	800ba02 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4413      	add	r3, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4814      	ldr	r0, [pc, #80]	; (8004374 <W25qxx_ReadPage+0x17c>)
 8004322:	f00b f92f 	bl	800f584 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d3e2      	bcc.n	80042fa <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004334:	480e      	ldr	r0, [pc, #56]	; (8004370 <W25qxx_ReadPage+0x178>)
 8004336:	f00b f9ab 	bl	800f690 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	480e      	ldr	r0, [pc, #56]	; (8004378 <W25qxx_ReadPage+0x180>)
 800433e:	f00b f921 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 8004342:	2064      	movs	r0, #100	; 0x64
 8004344:	f007 fb5d 	bl	800ba02 <osDelay>
#endif
	W25qxx_Delay(1);
 8004348:	2001      	movs	r0, #1
 800434a:	f007 fb5a 	bl	800ba02 <osDelay>
	w25qxx.Lock = 0;
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <W25qxx_ReadPage+0x168>)
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200055e4 	.word	0x200055e4
 8004364:	08014158 	.word	0x08014158
 8004368:	40020c00 	.word	0x40020c00
 800436c:	20004ff8 	.word	0x20004ff8
 8004370:	08013f7c 	.word	0x08013f7c
 8004374:	08013f80 	.word	0x08013f80
 8004378:	08014194 	.word	0x08014194

0800437c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <W25qxx_ReadSector+0xe8>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d802      	bhi.n	800439a <W25qxx_ReadSector+0x1e>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <W25qxx_ReadSector+0xe8>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4830      	ldr	r0, [pc, #192]	; (8004468 <W25qxx_ReadSector+0xec>)
 80043a8:	f00b f8ec 	bl	800f584 <iprintf>
	W25qxx_Delay(100);
 80043ac:	2064      	movs	r0, #100	; 0x64
 80043ae:	f007 fb28 	bl	800ba02 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <W25qxx_ReadSector+0xe8>)
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d306      	bcc.n	80043ca <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80043bc:	482b      	ldr	r0, [pc, #172]	; (800446c <W25qxx_ReadSector+0xf0>)
 80043be:	f00b f967 	bl	800f690 <puts>
		W25qxx_Delay(100);
 80043c2:	2064      	movs	r0, #100	; 0x64
 80043c4:	f007 fb1d 	bl	800ba02 <osDelay>
#endif
		return;
 80043c8:	e048      	b.n	800445c <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	441a      	add	r2, r3
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <W25qxx_ReadSector+0xe8>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d905      	bls.n	80043e4 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <W25qxx_ReadSector+0xe8>)
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e001      	b.n	80043e8 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80043e8:	68b8      	ldr	r0, [r7, #8]
 80043ea:	f7ff fdab 	bl	8003f44 <W25qxx_SectorToPage>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <W25qxx_ReadSector+0xe8>)
 80043f2:	895b      	ldrh	r3, [r3, #10]
 80043f4:	4619      	mov	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fc:	4413      	add	r3, r2
 80043fe:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <W25qxx_ReadSector+0xe8>)
 8004402:	895b      	ldrh	r3, [r3, #10]
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	fbb3 f1f2 	udiv	r1, r3, r2
 800440c:	fb02 f201 	mul.w	r2, r2, r1
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff feec 	bl	80041f8 <W25qxx_ReadPage>
		StartPage++;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3301      	adds	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <W25qxx_ReadSector+0xe8>)
 8004428:	895b      	ldrh	r3, [r3, #10]
 800442a:	461a      	mov	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1a9a      	subs	r2, r3, r2
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	4413      	add	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <W25qxx_ReadSector+0xe8>)
 8004438:	895b      	ldrh	r3, [r3, #10]
 800443a:	461a      	mov	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	dce1      	bgt.n	8004414 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <W25qxx_ReadSector+0xf4>)
 8004452:	f00b f91d 	bl	800f690 <puts>
	W25qxx_Delay(100);
 8004456:	2064      	movs	r0, #100	; 0x64
 8004458:	f007 fad3 	bl	800ba02 <osDelay>
#endif
}
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200055e4 	.word	0x200055e4
 8004468:	080141b8 	.word	0x080141b8
 800446c:	080141f8 	.word	0x080141f8
 8004470:	08014218 	.word	0x08014218

08004474 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1e5a      	subs	r2, r3, #1
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	4790      	blx	r2
 80044ac:	4602      	mov	r2, r0
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	4413      	add	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80044b4:	e7e6      	b.n	8004484 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80044b6:	697b      	ldr	r3, [r7, #20]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <_ZN5PrintC1Ev+0x24>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	08014560 	.word	0x08014560

080044e8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ffe4 	bl	80044c0 <_ZN5PrintC1Ev>
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <_ZN6StreamC1Ev+0x28>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	08014590 	.word	0x08014590

08004514 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ffe1 	bl	80044e8 <_ZN6StreamC1Ev>
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3390      	adds	r3, #144	; 0x90
 8004536:	2220      	movs	r2, #32
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f00a f8f6 	bl	800e72c <memset>
  rxBufferIndex = 0;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08014570 	.word	0x08014570

08004584 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01d      	beq.n	80045d6 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045a0:	2b1f      	cmp	r3, #31
 80045a2:	d901      	bls.n	80045a8 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e028      	b.n	80045fa <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045ae:	4619      	mov	r1, r3
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	440b      	add	r3, r1
 80045b6:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045be:	3301      	adds	r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80045d4:	e010      	b.n	80045f8 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f984 	bl	80048e4 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80045dc:	1cfb      	adds	r3, r7, #3
 80045de:	2201      	movs	r2, #1
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8b7 	bl	8004756 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f949 	bl	8004880 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	333c      	adds	r3, #60	; 0x3c
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fcca 	bl	8006f8c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80045f8:	2301      	movs	r3, #1
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d21e      	bcs.n	8004662 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	440a      	add	r2, r1
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	4611      	mov	r1, r2
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e7ed      	b.n	800461c <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f94f 	bl	80048e4 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	461a      	mov	r2, r3
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f882 	bl	8004756 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f914 	bl	8004880 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	333c      	adds	r3, #60	; 0x3c
 800465c:	4618      	mov	r0, r3
 800465e:	f002 fc95 	bl	8006f8c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8004662:	687b      	ldr	r3, [r7, #4]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  int value = -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf34      	ite	cc
 80046b6:	2301      	movcc	r3, #1
 80046b8:	2300      	movcs	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80046d2:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  int value = -1;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	429a      	cmp	r2, r3
 8004714:	bf34      	ite	cc
 8004716:	2301      	movcc	r3, #1
 8004718:	2300      	movcs	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004732:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8004756:	b480      	push	{r7}
 8004758:	b089      	sub	sp, #36	; 0x24
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	dd41      	ble.n	80047f6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8004772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004776:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	bf14      	ite	ne
 8004786:	2301      	movne	r3, #1
 8004788:	2300      	moveq	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3b01      	subs	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ed      	bne.n	8004778 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	e068      	b.n	8004874 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	60ba      	str	r2, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	611a      	str	r2, [r3, #16]
        length--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
        size++;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d104      	bne.n	80047d4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0c8      	beq.n	800476c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	60ba      	str	r2, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	611a      	str	r2, [r3, #16]
            length--;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
            size++;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80047f4:	e7ba      	b.n	800476c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80047f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fa:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3b01      	subs	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ec      	bne.n	80047fc <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	e025      	b.n	8004874 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004830:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8004832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004836:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3b01      	subs	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ed      	bne.n	8004838 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
 8004860:	e008      	b.n	8004874 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8004872:	69bb      	ldr	r3, [r7, #24]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d106      	bne.n	80048a0 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004892:	2049      	movs	r0, #73	; 0x49
 8004894:	f001 fd04 	bl	80062a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004898:	2048      	movs	r0, #72	; 0x48
 800489a:	f001 fd01 	bl	80062a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800489e:	e016      	b.n	80048ce <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d106      	bne.n	80048b8 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80048aa:	2022      	movs	r0, #34	; 0x22
 80048ac:	f001 fcf8 	bl	80062a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80048b0:	2021      	movs	r0, #33	; 0x21
 80048b2:	f001 fcf5 	bl	80062a0 <HAL_NVIC_EnableIRQ>
}
 80048b6:	e00a      	b.n	80048ce <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d105      	bne.n	80048ce <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80048c2:	2020      	movs	r0, #32
 80048c4:	f001 fcec 	bl	80062a0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80048c8:	201f      	movs	r0, #31
 80048ca:	f001 fce9 	bl	80062a0 <HAL_NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40005c00 	.word	0x40005c00
 80048dc:	40005800 	.word	0x40005800
 80048e0:	40005400 	.word	0x40005400

080048e4 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <_ZN7TwoWire16disableInterruptEv+0x58>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d106      	bne.n	8004904 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80048f6:	2049      	movs	r0, #73	; 0x49
 80048f8:	f001 fce0 	bl	80062bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80048fc:	2048      	movs	r0, #72	; 0x48
 80048fe:	f001 fcdd 	bl	80062bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004902:	e016      	b.n	8004932 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d106      	bne.n	800491c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800490e:	2022      	movs	r0, #34	; 0x22
 8004910:	f001 fcd4 	bl	80062bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8004914:	2021      	movs	r0, #33	; 0x21
 8004916:	f001 fcd1 	bl	80062bc <HAL_NVIC_DisableIRQ>
}
 800491a:	e00a      	b.n	8004932 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d105      	bne.n	8004932 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004926:	2020      	movs	r0, #32
 8004928:	f001 fcc8 	bl	80062bc <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800492c:	201f      	movs	r0, #31
 800492e:	f001 fcc5 	bl	80062bc <HAL_NVIC_DisableIRQ>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40005c00 	.word	0x40005c00
 8004940:	40005800 	.word	0x40005800
 8004944:	40005400 	.word	0x40005400

08004948 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d110      	bne.n	800497a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800495e:	4293      	cmp	r3, r2
 8004960:	d10b      	bne.n	800497a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8004962:	4908      	ldr	r1, [pc, #32]	; (8004984 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004964:	4808      	ldr	r0, [pc, #32]	; (8004988 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004966:	f7ff fdd5 	bl	8004514 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800496a:	4908      	ldr	r1, [pc, #32]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800496c:	4808      	ldr	r0, [pc, #32]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800496e:	f7ff fdd1 	bl	8004514 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8004972:	4908      	ldr	r1, [pc, #32]	; (8004994 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004974:	4808      	ldr	r0, [pc, #32]	; (8004998 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004976:	f7ff fdcd 	bl	8004514 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40005400 	.word	0x40005400
 8004988:	20000274 	.word	0x20000274
 800498c:	40005800 	.word	0x40005800
 8004990:	2000032c 	.word	0x2000032c
 8004994:	40005c00 	.word	0x40005c00
 8004998:	200003e4 	.word	0x200003e4

0800499c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
 80049a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049a4:	2001      	movs	r0, #1
 80049a6:	f7ff ffcf 	bl	8004948 <_Z41__static_initialization_and_destruction_0ii>
 80049aa:	bd80      	pop	{r7, pc}

080049ac <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	460b      	mov	r3, r1
 80049ba:	72fb      	strb	r3, [r7, #11]
 80049bc:	4613      	mov	r3, r2
 80049be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685c      	ldr	r4, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6898      	ldr	r0, [r3, #8]
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	7af9      	ldrb	r1, [r7, #11]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	47a0      	blx	r4
 80049d0:	6178      	str	r0, [r7, #20]

  return ret;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}

080049dc <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	72fb      	strb	r3, [r7, #11]
 80049ec:	4613      	mov	r3, r2
 80049ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681c      	ldr	r4, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6898      	ldr	r0, [r3, #8]
 80049f8:	893b      	ldrh	r3, [r7, #8]
 80049fa:	7af9      	ldrb	r1, [r7, #11]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	47a0      	blx	r4
 8004a00:	6178      	str	r0, [r7, #20]

  return ret;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a38 <lps22hh_from_lsb_to_hpa+0x2c>
 8004a22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a26:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	49800000 	.word	0x49800000

08004a3c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a52:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a6c <lps22hh_from_lsb_to_celsius+0x30>
 8004a56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a5a:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	42c80000 	.word	0x42c80000

08004a70 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004a7c:	f107 0208 	add.w	r2, r7, #8
 8004a80:	2301      	movs	r3, #1
 8004a82:	2110      	movs	r1, #16
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff91 	bl	80049ac <lps22hh_read_reg>
 8004a8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	7a3b      	ldrb	r3, [r7, #8]
 8004a9c:	f362 0341 	bfi	r3, r2, #1, #1
 8004aa0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004aa2:	f107 0208 	add.w	r2, r7, #8
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	2110      	movs	r1, #16
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ff96 	bl	80049dc <lps22hh_write_reg>
 8004ab0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004ac8:	f107 0210 	add.w	r2, r7, #16
 8004acc:	2301      	movs	r3, #1
 8004ace:	2110      	movs	r1, #16
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff6b 	bl	80049ac <lps22hh_read_reg>
 8004ad6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004ade:	f107 020c 	add.w	r2, r7, #12
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	2111      	movs	r1, #17
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff60 	bl	80049ac <lps22hh_read_reg>
 8004aec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	7c3b      	ldrb	r3, [r7, #16]
 8004afe:	f362 1306 	bfi	r3, r2, #4, #3
 8004b02:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004b04:	f107 0210 	add.w	r2, r7, #16
 8004b08:	2301      	movs	r3, #1
 8004b0a:	2110      	movs	r1, #16
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff65 	bl	80049dc <lps22hh_write_reg>
 8004b12:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d119      	bne.n	8004b4e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	7b3b      	ldrb	r3, [r7, #12]
 8004b26:	f362 0341 	bfi	r3, r2, #1, #1
 8004b2a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	08db      	lsrs	r3, r3, #3
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	7b3b      	ldrb	r3, [r7, #12]
 8004b38:	f362 0300 	bfi	r3, r2, #0, #1
 8004b3c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004b3e:	f107 020c 	add.w	r2, r7, #12
 8004b42:	2301      	movs	r3, #1
 8004b44:	2111      	movs	r1, #17
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff48 	bl	80049dc <lps22hh_write_reg>
 8004b4c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b4e:	697b      	ldr	r3, [r7, #20]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004b62:	f107 0208 	add.w	r2, r7, #8
 8004b66:	2301      	movs	r3, #1
 8004b68:	2127      	movs	r1, #39	; 0x27
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff1e 	bl	80049ac <lps22hh_read_reg>
 8004b70:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004b72:	7a3b      	ldrb	r3, [r7, #8]
 8004b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004b94:	f107 0208 	add.w	r2, r7, #8
 8004b98:	2303      	movs	r3, #3
 8004b9a:	2128      	movs	r1, #40	; 0x28
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff05 	bl	80049ac <lps22hh_read_reg>
 8004ba2:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004ba4:	7abb      	ldrb	r3, [r7, #10]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	7a7a      	ldrb	r2, [r7, #9]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	7a3a      	ldrb	r2, [r7, #8]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021a      	lsls	r2, r3, #8
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	601a      	str	r2, [r3, #0]

  return ret;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004be6:	f107 0208 	add.w	r2, r7, #8
 8004bea:	2302      	movs	r3, #2
 8004bec:	212b      	movs	r1, #43	; 0x2b
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff fedc 	bl	80049ac <lps22hh_read_reg>
 8004bf4:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004bf6:	7a7b      	ldrb	r3, [r7, #9]
 8004bf8:	b21a      	sxth	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	7a3b      	ldrb	r3, [r7, #8]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b21a      	sxth	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	210f      	movs	r1, #15
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff feba 	bl	80049ac <lps22hh_read_reg>
 8004c38:	60f8      	str	r0, [r7, #12]

  return ret;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004c50:	f107 0208 	add.w	r2, r7, #8
 8004c54:	2301      	movs	r3, #1
 8004c56:	2111      	movs	r1, #17
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fea7 	bl	80049ac <lps22hh_read_reg>
 8004c5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	7a3b      	ldrb	r3, [r7, #8]
 8004c70:	f362 0382 	bfi	r3, r2, #2, #1
 8004c74:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004c76:	f107 0208 	add.w	r2, r7, #8
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	2111      	movs	r1, #17
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff feac 	bl	80049dc <lps22hh_write_reg>
 8004c84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004c9a:	f107 0208 	add.w	r2, r7, #8
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	2111      	movs	r1, #17
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe82 	bl	80049ac <lps22hh_read_reg>
 8004ca8:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004caa:	7a3b      	ldrb	r3, [r7, #8]
 8004cac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]

  return ret;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004cc2:	b590      	push	{r4, r7, lr}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	460b      	mov	r3, r1
 8004cd0:	72fb      	strb	r3, [r7, #11]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685c      	ldr	r4, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6898      	ldr	r0, [r3, #8]
 8004cde:	893b      	ldrh	r3, [r7, #8]
 8004ce0:	7af9      	ldrb	r1, [r7, #11]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	47a0      	blx	r4
 8004ce6:	6178      	str	r0, [r7, #20]

  return ret;
 8004ce8:	697b      	ldr	r3, [r7, #20]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}

08004cf2 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004cf2:	b590      	push	{r4, r7, lr}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	460b      	mov	r3, r1
 8004d00:	72fb      	strb	r3, [r7, #11]
 8004d02:	4613      	mov	r3, r2
 8004d04:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681c      	ldr	r4, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6898      	ldr	r0, [r3, #8]
 8004d0e:	893b      	ldrh	r3, [r7, #8]
 8004d10:	7af9      	ldrb	r1, [r7, #11]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	47a0      	blx	r4
 8004d16:	6178      	str	r0, [r7, #20]

  return ret;
 8004d18:	697b      	ldr	r3, [r7, #20]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
	...

08004d24 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d50 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004d42:	eeb0 0a67 	vmov.f32	s0, s15
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	3d79db23 	.word	0x3d79db23

08004d54 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d80 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004d72:	eeb0 0a67 	vmov.f32	s0, s15
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	428c0000 	.word	0x428c0000

08004d84 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004db8 <lsm6dsr_from_lsb_to_celsius+0x34>
 8004d9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004da2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004da6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004daa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	43800000 	.word	0x43800000

08004dbc <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004dc8:	f107 0208 	add.w	r2, r7, #8
 8004dcc:	2301      	movs	r3, #1
 8004dce:	2110      	movs	r1, #16
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff76 	bl	8004cc2 <lsm6dsr_read_reg>
 8004dd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	7a3b      	ldrb	r3, [r7, #8]
 8004de8:	f362 0383 	bfi	r3, r2, #2, #2
 8004dec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004dee:	f107 0208 	add.w	r2, r7, #8
 8004df2:	2301      	movs	r3, #1
 8004df4:	2110      	movs	r1, #16
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff7b 	bl	8004cf2 <lsm6dsr_write_reg>
 8004dfc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fbb0 	bl	8005584 <lsm6dsr_fsm_enable_get>
 8004e24:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80c4 	bne.w	8004fb6 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e2e:	7b3b      	ldrb	r3, [r7, #12]
 8004e30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e36:	7b3b      	ldrb	r3, [r7, #12]
 8004e38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e3c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e42:	7b3b      	ldrb	r3, [r7, #12]
 8004e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e4e:	7b3b      	ldrb	r3, [r7, #12]
 8004e50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e5a:	7b3b      	ldrb	r3, [r7, #12]
 8004e5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e66:	7b3b      	ldrb	r3, [r7, #12]
 8004e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e72:	7b3b      	ldrb	r3, [r7, #12]
 8004e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e7e:	7b3b      	ldrb	r3, [r7, #12]
 8004e80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e8a:	7b7b      	ldrb	r3, [r7, #13]
 8004e8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004e96:	7b7b      	ldrb	r3, [r7, #13]
 8004e98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004ea2:	7b7b      	ldrb	r3, [r7, #13]
 8004ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004eae:	7b7b      	ldrb	r3, [r7, #13]
 8004eb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004eba:	7b7b      	ldrb	r3, [r7, #13]
 8004ebc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004ec6:	7b7b      	ldrb	r3, [r7, #13]
 8004ec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ed2:	7b7b      	ldrb	r3, [r7, #13]
 8004ed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004ede:	7b7b      	ldrb	r3, [r7, #13]
 8004ee0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d163      	bne.n	8004fb6 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004eee:	f107 030b 	add.w	r3, r7, #11
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb71 	bl	80055dc <lsm6dsr_fsm_data_rate_get>
 8004efa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d159      	bne.n	8004fb6 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d853      	bhi.n	8004fb0 <lsm6dsr_xl_data_rate_set+0x1a8>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <lsm6dsr_xl_data_rate_set+0x108>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f7b 	.word	0x08004f7b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f2a:	e045      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f30:	e042      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f3c:	e03c      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004f44:	2302      	movs	r3, #2
 8004f46:	75fb      	strb	r3, [r7, #23]
            break;
 8004f48:	e036      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	75fb      	strb	r3, [r7, #23]
            break;
 8004f4e:	e033      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004f56:	2303      	movs	r3, #3
 8004f58:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f5a:	e02d      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004f62:	2303      	movs	r3, #3
 8004f64:	75fb      	strb	r3, [r7, #23]
            break;
 8004f66:	e027      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d102      	bne.n	8004f74 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	75fb      	strb	r3, [r7, #23]
            break;
 8004f72:	e021      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	75fb      	strb	r3, [r7, #23]
            break;
 8004f78:	e01e      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004f80:	2304      	movs	r3, #4
 8004f82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f84:	e018      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e012      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d102      	bne.n	8004f9e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f9c:	e00c      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d102      	bne.n	8004faa <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa8:	e006      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	75fb      	strb	r3, [r7, #23]
            break;
 8004fae:	e003      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb4:	e000      	b.n	8004fb8 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8004fb6:	bf00      	nop
    }
  }

  if (ret == 0)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d107      	bne.n	8004fce <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004fbe:	f107 0208 	add.w	r2, r7, #8
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	2110      	movs	r1, #16
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe7b 	bl	8004cc2 <lsm6dsr_read_reg>
 8004fcc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10f      	bne.n	8004ff4 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	7a3b      	ldrb	r3, [r7, #8]
 8004fde:	f362 1307 	bfi	r3, r2, #4, #4
 8004fe2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004fe4:	f107 0208 	add.w	r2, r7, #8
 8004fe8:	2301      	movs	r3, #1
 8004fea:	2110      	movs	r1, #16
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe80 	bl	8004cf2 <lsm6dsr_write_reg>
 8004ff2:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004ff4:	693b      	ldr	r3, [r7, #16]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800500c:	f107 0208 	add.w	r2, r7, #8
 8005010:	2301      	movs	r3, #1
 8005012:	2111      	movs	r1, #17
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fe54 	bl	8004cc2 <lsm6dsr_read_reg>
 800501a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	b2da      	uxtb	r2, r3
 800502a:	7a3b      	ldrb	r3, [r7, #8]
 800502c:	f362 0303 	bfi	r3, r2, #0, #4
 8005030:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005032:	f107 0208 	add.w	r2, r7, #8
 8005036:	2301      	movs	r3, #1
 8005038:	2111      	movs	r1, #17
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe59 	bl	8004cf2 <lsm6dsr_write_reg>
 8005040:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa8e 	bl	8005584 <lsm6dsr_fsm_enable_get>
 8005068:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 80c4 	bne.w	80051fa <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005072:	7b3b      	ldrb	r3, [r7, #12]
 8005074:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800507a:	7b3b      	ldrb	r3, [r7, #12]
 800507c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005080:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005082:	4313      	orrs	r3, r2
 8005084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005086:	7b3b      	ldrb	r3, [r7, #12]
 8005088:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800508c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800508e:	4313      	orrs	r3, r2
 8005090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005092:	7b3b      	ldrb	r3, [r7, #12]
 8005094:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800509a:	4313      	orrs	r3, r2
 800509c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800509e:	7b3b      	ldrb	r3, [r7, #12]
 80050a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80050aa:	7b3b      	ldrb	r3, [r7, #12]
 80050ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80050b6:	7b3b      	ldrb	r3, [r7, #12]
 80050b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80050be:	4313      	orrs	r3, r2
 80050c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80050c2:	7b3b      	ldrb	r3, [r7, #12]
 80050c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80050ce:	7b7b      	ldrb	r3, [r7, #13]
 80050d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80050da:	7b7b      	ldrb	r3, [r7, #13]
 80050dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80050e6:	7b7b      	ldrb	r3, [r7, #13]
 80050e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80050f2:	7b7b      	ldrb	r3, [r7, #13]
 80050f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80050fe:	7b7b      	ldrb	r3, [r7, #13]
 8005100:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800510a:	7b7b      	ldrb	r3, [r7, #13]
 800510c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005112:	4313      	orrs	r3, r2
 8005114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800511c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800511e:	4313      	orrs	r3, r2
 8005120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005122:	7b7b      	ldrb	r3, [r7, #13]
 8005124:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800512a:	4313      	orrs	r3, r2
 800512c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800512e:	2b01      	cmp	r3, #1
 8005130:	d163      	bne.n	80051fa <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005132:	f107 030b 	add.w	r3, r7, #11
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fa4f 	bl	80055dc <lsm6dsr_fsm_data_rate_get>
 800513e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d159      	bne.n	80051fa <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005146:	7afb      	ldrb	r3, [r7, #11]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d853      	bhi.n	80051f4 <lsm6dsr_gy_data_rate_set+0x1a8>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <lsm6dsr_gy_data_rate_set+0x108>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005165 	.word	0x08005165
 8005158:	08005177 	.word	0x08005177
 800515c:	08005195 	.word	0x08005195
 8005160:	080051bf 	.word	0x080051bf
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800516e:	e045      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	75fb      	strb	r3, [r7, #23]
            break;
 8005174:	e042      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800517c:	2302      	movs	r3, #2
 800517e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005180:	e03c      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005188:	2302      	movs	r3, #2
 800518a:	75fb      	strb	r3, [r7, #23]
            break;
 800518c:	e036      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	75fb      	strb	r3, [r7, #23]
            break;
 8005192:	e033      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800519a:	2303      	movs	r3, #3
 800519c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800519e:	e02d      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d102      	bne.n	80051ac <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80051a6:	2303      	movs	r3, #3
 80051a8:	75fb      	strb	r3, [r7, #23]
            break;
 80051aa:	e027      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d102      	bne.n	80051b8 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80051b2:	2303      	movs	r3, #3
 80051b4:	75fb      	strb	r3, [r7, #23]
            break;
 80051b6:	e021      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	75fb      	strb	r3, [r7, #23]
            break;
 80051bc:	e01e      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80051c4:	2304      	movs	r3, #4
 80051c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051c8:	e018      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d102      	bne.n	80051d6 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80051d0:	2304      	movs	r3, #4
 80051d2:	75fb      	strb	r3, [r7, #23]
            break;
 80051d4:	e012      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d102      	bne.n	80051e2 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80051dc:	2304      	movs	r3, #4
 80051de:	75fb      	strb	r3, [r7, #23]
            break;
 80051e0:	e00c      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d102      	bne.n	80051ee <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80051e8:	2304      	movs	r3, #4
 80051ea:	75fb      	strb	r3, [r7, #23]
            break;
 80051ec:	e006      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	75fb      	strb	r3, [r7, #23]
            break;
 80051f2:	e003      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	75fb      	strb	r3, [r7, #23]
            break;
 80051f8:	e000      	b.n	80051fc <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80051fa:	bf00      	nop
    }
  }

  if (ret == 0)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005202:	f107 0208 	add.w	r2, r7, #8
 8005206:	2301      	movs	r3, #1
 8005208:	2111      	movs	r1, #17
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fd59 	bl	8004cc2 <lsm6dsr_read_reg>
 8005210:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	b2da      	uxtb	r2, r3
 8005220:	7a3b      	ldrb	r3, [r7, #8]
 8005222:	f362 1307 	bfi	r3, r2, #4, #4
 8005226:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005228:	f107 0208 	add.w	r2, r7, #8
 800522c:	2301      	movs	r3, #1
 800522e:	2111      	movs	r1, #17
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fd5e 	bl	8004cf2 <lsm6dsr_write_reg>
 8005236:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005238:	693b      	ldr	r3, [r7, #16]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005250:	f107 0208 	add.w	r2, r7, #8
 8005254:	2301      	movs	r3, #1
 8005256:	2112      	movs	r1, #18
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fd32 	bl	8004cc2 <lsm6dsr_read_reg>
 800525e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	7a3b      	ldrb	r3, [r7, #8]
 8005270:	f362 1386 	bfi	r3, r2, #6, #1
 8005274:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005276:	f107 0208 	add.w	r2, r7, #8
 800527a:	2301      	movs	r3, #1
 800527c:	2112      	movs	r1, #18
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fd37 	bl	8004cf2 <lsm6dsr_write_reg>
 8005284:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	211e      	movs	r1, #30
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fd0d 	bl	8004cc2 <lsm6dsr_read_reg>
 80052a8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80052aa:	7a3b      	ldrb	r3, [r7, #8]
 80052ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	701a      	strb	r2, [r3, #0]

  return ret;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80052cc:	f107 0208 	add.w	r2, r7, #8
 80052d0:	2301      	movs	r3, #1
 80052d2:	211e      	movs	r1, #30
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fcf4 	bl	8004cc2 <lsm6dsr_read_reg>
 80052da:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80052dc:	7a3b      	ldrb	r3, [r7, #8]
 80052de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	2301      	movs	r3, #1
 8005304:	211e      	movs	r1, #30
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fcdb 	bl	8004cc2 <lsm6dsr_read_reg>
 800530c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800530e:	7a3b      	ldrb	r3, [r7, #8]
 8005310:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	701a      	strb	r2, [r3, #0]

  return ret;
 800531c:	68fb      	ldr	r3, [r7, #12]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005330:	f107 0208 	add.w	r2, r7, #8
 8005334:	2302      	movs	r3, #2
 8005336:	2120      	movs	r1, #32
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fcc2 	bl	8004cc2 <lsm6dsr_read_reg>
 800533e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005340:	7a7b      	ldrb	r3, [r7, #9]
 8005342:	b21a      	sxth	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800534e:	b29b      	uxth	r3, r3
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	b29a      	uxth	r2, r3
 8005354:	7a3b      	ldrb	r3, [r7, #8]
 8005356:	b29b      	uxth	r3, r3
 8005358:	4413      	add	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	b21a      	sxth	r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	801a      	strh	r2, [r3, #0]

  return ret;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8005376:	f107 020c 	add.w	r2, r7, #12
 800537a:	2306      	movs	r3, #6
 800537c:	2122      	movs	r1, #34	; 0x22
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fc9f 	bl	8004cc2 <lsm6dsr_read_reg>
 8005384:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005386:	7b7b      	ldrb	r3, [r7, #13]
 8005388:	b21a      	sxth	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005394:	b29b      	uxth	r3, r3
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b29a      	uxth	r2, r3
 800539a:	7b3b      	ldrb	r3, [r7, #12]
 800539c:	b29b      	uxth	r3, r3
 800539e:	4413      	add	r3, r2
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	3302      	adds	r3, #2
 80053ae:	b212      	sxth	r2, r2
 80053b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3302      	adds	r3, #2
 80053b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b29a      	uxth	r2, r3
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	3302      	adds	r3, #2
 80053cc:	b212      	sxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053d0:	7c7a      	ldrb	r2, [r7, #17]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3304      	adds	r3, #4
 80053d6:	b212      	sxth	r2, r2
 80053d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	3304      	adds	r3, #4
 80053de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	7c3b      	ldrb	r3, [r7, #16]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	3304      	adds	r3, #4
 80053f4:	b212      	sxth	r2, r2
 80053f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80053f8:	697b      	ldr	r3, [r7, #20]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800540c:	f107 020c 	add.w	r2, r7, #12
 8005410:	2306      	movs	r3, #6
 8005412:	2128      	movs	r1, #40	; 0x28
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fc54 	bl	8004cc2 <lsm6dsr_read_reg>
 800541a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800541c:	7b7b      	ldrb	r3, [r7, #13]
 800541e:	b21a      	sxth	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542a:	b29b      	uxth	r3, r3
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	b29a      	uxth	r2, r3
 8005430:	7b3b      	ldrb	r3, [r7, #12]
 8005432:	b29b      	uxth	r3, r3
 8005434:	4413      	add	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	b21a      	sxth	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	3302      	adds	r3, #2
 8005444:	b212      	sxth	r2, r2
 8005446:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	3302      	adds	r3, #2
 800544c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005450:	b29b      	uxth	r3, r3
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	b29a      	uxth	r2, r3
 8005456:	7bbb      	ldrb	r3, [r7, #14]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4413      	add	r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	3302      	adds	r3, #2
 8005462:	b212      	sxth	r2, r2
 8005464:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005466:	7c7a      	ldrb	r2, [r7, #17]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	3304      	adds	r3, #4
 800546c:	b212      	sxth	r2, r2
 800546e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005478:	b29b      	uxth	r3, r3
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	b29a      	uxth	r2, r3
 800547e:	7c3b      	ldrb	r3, [r7, #16]
 8005480:	b29b      	uxth	r3, r3
 8005482:	4413      	add	r3, r2
 8005484:	b29a      	uxth	r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3304      	adds	r3, #4
 800548a:	b212      	sxth	r2, r2
 800548c:	801a      	strh	r2, [r3, #0]

  return ret;
 800548e:	697b      	ldr	r3, [r7, #20]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80054a4:	f107 0208 	add.w	r2, r7, #8
 80054a8:	2301      	movs	r3, #1
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fc08 	bl	8004cc2 <lsm6dsr_read_reg>
 80054b2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	7a3b      	ldrb	r3, [r7, #8]
 80054c4:	f362 1387 	bfi	r3, r2, #6, #2
 80054c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	2101      	movs	r1, #1
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fc0d 	bl	8004cf2 <lsm6dsr_write_reg>
 80054d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80054ee:	2301      	movs	r3, #1
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	210f      	movs	r1, #15
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff fbe4 	bl	8004cc2 <lsm6dsr_read_reg>
 80054fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80054fc:	68fb      	ldr	r3, [r7, #12]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005512:	f107 0208 	add.w	r2, r7, #8
 8005516:	2301      	movs	r3, #1
 8005518:	2112      	movs	r1, #18
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff fbd1 	bl	8004cc2 <lsm6dsr_read_reg>
 8005520:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10f      	bne.n	8005548 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	7a3b      	ldrb	r3, [r7, #8]
 8005532:	f362 0300 	bfi	r3, r2, #0, #1
 8005536:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005538:	f107 0208 	add.w	r2, r7, #8
 800553c:	2301      	movs	r3, #1
 800553e:	2112      	movs	r1, #18
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fbd6 	bl	8004cf2 <lsm6dsr_write_reg>
 8005546:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800555c:	f107 0208 	add.w	r2, r7, #8
 8005560:	2301      	movs	r3, #1
 8005562:	2112      	movs	r1, #18
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fbac 	bl	8004cc2 <lsm6dsr_read_reg>
 800556a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800556c:	7a3b      	ldrb	r3, [r7, #8]
 800556e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	701a      	strb	r2, [r3, #0]

  return ret;
 800557a:	68fb      	ldr	r3, [r7, #12]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800558e:	2102      	movs	r1, #2
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff81 	bl	8005498 <lsm6dsr_mem_bank_set>
 8005596:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800559e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80055a0:	2301      	movs	r3, #1
 80055a2:	2146      	movs	r1, #70	; 0x46
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fb8c 	bl	8004cc2 <lsm6dsr_read_reg>
 80055aa:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80055b6:	2301      	movs	r3, #1
 80055b8:	2147      	movs	r1, #71	; 0x47
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fb81 	bl	8004cc2 <lsm6dsr_read_reg>
 80055c0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80055c8:	2100      	movs	r1, #0
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ff64 	bl	8005498 <lsm6dsr_mem_bank_set>
 80055d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80055e6:	2102      	movs	r1, #2
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff55 	bl	8005498 <lsm6dsr_mem_bank_set>
 80055ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80055f6:	f107 0208 	add.w	r2, r7, #8
 80055fa:	2301      	movs	r3, #1
 80055fc:	215f      	movs	r1, #95	; 0x5f
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fb5f 	bl	8004cc2 <lsm6dsr_read_reg>
 8005604:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800560c:	2100      	movs	r1, #0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff42 	bl	8005498 <lsm6dsr_mem_bank_set>
 8005614:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005616:	7a3b      	ldrb	r3, [r7, #8]
 8005618:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b03      	cmp	r3, #3
 8005620:	d81a      	bhi.n	8005658 <lsm6dsr_fsm_data_rate_get+0x7c>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	08005641 	.word	0x08005641
 8005630:	08005649 	.word	0x08005649
 8005634:	08005651 	.word	0x08005651
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
      break;
 800563e:	e00f      	b.n	8005660 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
      break;
 8005646:	e00b      	b.n	8005660 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2202      	movs	r2, #2
 800564c:	701a      	strb	r2, [r3, #0]
      break;
 800564e:	e007      	b.n	8005660 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2203      	movs	r2, #3
 8005654:	701a      	strb	r2, [r3, #0]
      break;
 8005656:	e003      	b.n	8005660 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
      break;
 800565e:	bf00      	nop
  }

  return ret;
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop

0800566c <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	2208      	movs	r2, #8
 800567a:	4905      	ldr	r1, [pc, #20]	; (8005690 <HAL_RTC_AlarmAEventCallback+0x24>)
 800567c:	4805      	ldr	r0, [pc, #20]	; (8005694 <HAL_RTC_AlarmAEventCallback+0x28>)
 800567e:	f005 f82a 	bl	800a6d6 <HAL_UART_Transmit>
	flagA = 1;
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	080142ac 	.word	0x080142ac
 8005694:	2000560c 	.word	0x2000560c
 8005698:	2000049c 	.word	0x2000049c

0800569c <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	f107 0c08 	add.w	ip, r7, #8
 80056a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <MRT_SetupRTOS+0x48>)
 80056ac:	4618      	mov	r0, r3
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	2244      	movs	r2, #68	; 0x44
 80056b4:	4619      	mov	r1, r3
 80056b6:	f009 f811 	bl	800e6dc <memcpy>
	rtos.sleepTime = sleepT;
 80056ba:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <MRT_SetupRTOS+0x48>)
 80056bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80056c0:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	2211      	movs	r2, #17
 80056ca:	4907      	ldr	r1, [pc, #28]	; (80056e8 <MRT_SetupRTOS+0x4c>)
 80056cc:	4805      	ldr	r0, [pc, #20]	; (80056e4 <MRT_SetupRTOS+0x48>)
 80056ce:	f005 f802 	bl	800a6d6 <HAL_UART_Transmit>
	MRT_WUProcedure();
 80056d2:	f000 f80b 	bl	80056ec <MRT_WUProcedure>
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056de:	b004      	add	sp, #16
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000560c 	.word	0x2000560c
 80056e8:	080142c4 	.word	0x080142c4

080056ec <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <MRT_WUProcedure+0x58>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d11c      	bne.n	8005738 <MRT_WUProcedure+0x4c>
	{

		wu_flag = 1;
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <MRT_WUProcedure+0x5c>)
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <MRT_WUProcedure+0x58>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <MRT_WUProcedure+0x58>)
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8005710:	4b0e      	ldr	r3, [pc, #56]	; (800574c <MRT_WUProcedure+0x60>)
 8005712:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fa fd6b 	bl	80001f0 <strlen>
 800571a:	4603      	mov	r3, r0
 800571c:	b29a      	uxth	r2, r3
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	480a      	ldr	r0, [pc, #40]	; (8005750 <MRT_WUProcedure+0x64>)
 8005726:	f004 ffd6 	bl	800a6d6 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800572a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800572e:	f002 f85b 	bl	80077e8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8005732:	4808      	ldr	r0, [pc, #32]	; (8005754 <MRT_WUProcedure+0x68>)
 8005734:	f003 fb8c 	bl	8008e50 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8005738:	f000 f80e 	bl	8005758 <MRT_ClearFlags>
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40007000 	.word	0x40007000
 8005748:	2000049d 	.word	0x2000049d
 800574c:	080142d8 	.word	0x080142d8
 8005750:	2000560c 	.word	0x2000560c
 8005754:	20005328 	.word	0x20005328

08005758 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	2214      	movs	r2, #20
 8005762:	4932      	ldr	r1, [pc, #200]	; (800582c <MRT_ClearFlags+0xd4>)
 8005764:	4832      	ldr	r0, [pc, #200]	; (8005830 <MRT_ClearFlags+0xd8>)
 8005766:	f004 ffb6 	bl	800a6d6 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800576a:	4b32      	ldr	r3, [pc, #200]	; (8005834 <MRT_ClearFlags+0xdc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	22ca      	movs	r2, #202	; 0xca
 8005770:	625a      	str	r2, [r3, #36]	; 0x24
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <MRT_ClearFlags+0xdc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2253      	movs	r2, #83	; 0x53
 8005778:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800577a:	e00f      	b.n	800579c <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	2217      	movs	r2, #23
 8005782:	492d      	ldr	r1, [pc, #180]	; (8005838 <MRT_ClearFlags+0xe0>)
 8005784:	482a      	ldr	r0, [pc, #168]	; (8005830 <MRT_ClearFlags+0xd8>)
 8005786:	f004 ffa6 	bl	800a6d6 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <MRT_ClearFlags+0xdc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4b28      	ldr	r3, [pc, #160]	; (8005834 <MRT_ClearFlags+0xdc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800579a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <MRT_ClearFlags+0xdc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e8      	bne.n	800577c <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	22ff      	movs	r2, #255	; 0xff
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <MRT_ClearFlags+0xe4>)
 80057b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057b8:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80057ba:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	22ca      	movs	r2, #202	; 0xca
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24
 80057c2:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2253      	movs	r2, #83	; 0x53
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80057ca:	e00f      	b.n	80057ec <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	2217      	movs	r2, #23
 80057d2:	491b      	ldr	r1, [pc, #108]	; (8005840 <MRT_ClearFlags+0xe8>)
 80057d4:	4816      	ldr	r0, [pc, #88]	; (8005830 <MRT_ClearFlags+0xd8>)
 80057d6:	f004 ff7e 	bl	800a6d6 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b14      	ldr	r3, [pc, #80]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80057ea:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80057ec:	4b11      	ldr	r3, [pc, #68]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e8      	bne.n	80057cc <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80057fa:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <MRT_ClearFlags+0xdc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	22ff      	movs	r2, #255	; 0xff
 8005800:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005802:	4b0e      	ldr	r3, [pc, #56]	; (800583c <MRT_ClearFlags+0xe4>)
 8005804:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005808:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <MRT_ClearFlags+0xec>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <MRT_ClearFlags+0xec>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <MRT_ClearFlags+0xdc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <MRT_ClearFlags+0xdc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005826:	60da      	str	r2, [r3, #12]
}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}
 800582c:	080142f8 	.word	0x080142f8
 8005830:	2000560c 	.word	0x2000560c
 8005834:	20005328 	.word	0x20005328
 8005838:	08014310 	.word	0x08014310
 800583c:	40013c00 	.word	0x40013c00
 8005840:	08014328 	.word	0x08014328
 8005844:	40007000 	.word	0x40007000

08005848 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8005848:	b580      	push	{r7, lr}
 800584a:	b0a4      	sub	sp, #144	; 0x90
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8005850:	f04f 33ff 	mov.w	r3, #4294967295
 8005854:	220f      	movs	r2, #15
 8005856:	491b      	ldr	r1, [pc, #108]	; (80058c4 <MRT_StandByMode+0x7c>)
 8005858:	481b      	ldr	r0, [pc, #108]	; (80058c8 <MRT_StandByMode+0x80>)
 800585a:	f004 ff3c 	bl	800a6d6 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800585e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005862:	f001 ffaf 	bl	80077c4 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8005866:	f7ff ff77 	bl	8005758 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	2211      	movs	r2, #17
 8005870:	4916      	ldr	r1, [pc, #88]	; (80058cc <MRT_StandByMode+0x84>)
 8005872:	4815      	ldr	r0, [pc, #84]	; (80058c8 <MRT_StandByMode+0x80>)
 8005874:	f004 ff2f 	bl	800a6d6 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8005878:	f107 0308 	add.w	r3, r7, #8
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4914      	ldr	r1, [pc, #80]	; (80058d0 <MRT_StandByMode+0x88>)
 8005880:	4618      	mov	r0, r3
 8005882:	f009 ffd1 	bl	800f828 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4618      	mov	r0, r3
 800588c:	f7fa fcb0 	bl	80001f0 <strlen>
 8005890:	4603      	mov	r3, r0
 8005892:	b29a      	uxth	r2, r3
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
 800589c:	480a      	ldr	r0, [pc, #40]	; (80058c8 <MRT_StandByMode+0x80>)
 800589e:	f004 ff1a 	bl	800a6d6 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80058a2:	2204      	movs	r2, #4
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	480b      	ldr	r0, [pc, #44]	; (80058d4 <MRT_StandByMode+0x8c>)
 80058a8:	f003 fa12 	bl	8008cd0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 80058b2:	f7fc ff87 	bl	80027c4 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 80058b6:	f001 ffab 	bl	8007810 <HAL_PWR_EnterSTANDBYMode>
}
 80058ba:	bf00      	nop
 80058bc:	3790      	adds	r7, #144	; 0x90
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	08014340 	.word	0x08014340
 80058c8:	2000560c 	.word	0x2000560c
 80058cc:	08014350 	.word	0x08014350
 80058d0:	08014364 	.word	0x08014364
 80058d4:	20005328 	.word	0x20005328

080058d8 <MRT_setAlarmA>:
	  }
}



void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
 80058e2:	460b      	mov	r3, r1
 80058e4:	71bb      	strb	r3, [r7, #6]
 80058e6:	4613      	mov	r3, r2
 80058e8:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = h;
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <MRT_setAlarmA+0x74>)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	7013      	strb	r3, [r2, #0]
	  sAlarm.AlarmTime.Minutes = m;
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <MRT_setAlarmA+0x74>)
 80058f2:	79bb      	ldrb	r3, [r7, #6]
 80058f4:	7053      	strb	r3, [r2, #1]
	  sAlarm.AlarmTime.Seconds = s;
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <MRT_setAlarmA+0x74>)
 80058f8:	797b      	ldrb	r3, [r7, #5]
 80058fa:	7093      	strb	r3, [r2, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80058fc:	4b13      	ldr	r3, [pc, #76]	; (800594c <MRT_setAlarmA+0x74>)
 80058fe:	2200      	movs	r2, #0
 8005900:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <MRT_setAlarmA+0x74>)
 8005904:	2200      	movs	r2, #0
 8005906:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <MRT_setAlarmA+0x74>)
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800590e:	4b0f      	ldr	r3, [pc, #60]	; (800594c <MRT_setAlarmA+0x74>)
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <MRT_setAlarmA+0x74>)
 8005916:	2200      	movs	r2, #0
 8005918:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <MRT_setAlarmA+0x74>)
 800591c:	2200      	movs	r2, #0
 800591e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <MRT_setAlarmA+0x74>)
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <MRT_setAlarmA+0x74>)
 800592a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005930:	2201      	movs	r2, #1
 8005932:	4906      	ldr	r1, [pc, #24]	; (800594c <MRT_setAlarmA+0x74>)
 8005934:	4806      	ldr	r0, [pc, #24]	; (8005950 <MRT_setAlarmA+0x78>)
 8005936:	f002 ffdb 	bl	80088f0 <HAL_RTC_SetAlarm_IT>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MRT_setAlarmA+0x6c>
	  {
	    Error_Handler();
 8005940:	f7fc ff40 	bl	80027c4 <Error_Handler>
	  }
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200004b8 	.word	0x200004b8
 8005950:	20005328 	.word	0x20005328

08005954 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	71fb      	strb	r3, [r7, #7]
 800595e:	460b      	mov	r3, r1
 8005960:	71bb      	strb	r3, [r7, #6]
 8005962:	4613      	mov	r3, r2
 8005964:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = h;
 8005966:	4a19      	ldr	r2, [pc, #100]	; (80059cc <MRT_setRTC+0x78>)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	7013      	strb	r3, [r2, #0]
	  sTime.Minutes = m;
 800596c:	4a17      	ldr	r2, [pc, #92]	; (80059cc <MRT_setRTC+0x78>)
 800596e:	79bb      	ldrb	r3, [r7, #6]
 8005970:	7053      	strb	r3, [r2, #1]
	  sTime.Seconds = s;
 8005972:	4a16      	ldr	r2, [pc, #88]	; (80059cc <MRT_setRTC+0x78>)
 8005974:	797b      	ldrb	r3, [r7, #5]
 8005976:	7093      	strb	r3, [r2, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005978:	4b14      	ldr	r3, [pc, #80]	; (80059cc <MRT_setRTC+0x78>)
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <MRT_setRTC+0x78>)
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005984:	2201      	movs	r2, #1
 8005986:	4911      	ldr	r1, [pc, #68]	; (80059cc <MRT_setRTC+0x78>)
 8005988:	4811      	ldr	r0, [pc, #68]	; (80059d0 <MRT_setRTC+0x7c>)
 800598a:	f002 fe4c 	bl	8008626 <HAL_RTC_SetTime>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MRT_setRTC+0x44>
	  {
	    Error_Handler();
 8005994:	f7fc ff16 	bl	80027c4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <MRT_setRTC+0x80>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <MRT_setRTC+0x80>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <MRT_setRTC+0x80>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <MRT_setRTC+0x80>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80059b0:	2201      	movs	r2, #1
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <MRT_setRTC+0x80>)
 80059b4:	4806      	ldr	r0, [pc, #24]	; (80059d0 <MRT_setRTC+0x7c>)
 80059b6:	f002 fef3 	bl	80087a0 <HAL_RTC_SetDate>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <MRT_setRTC+0x70>
	  {
	    Error_Handler();
 80059c0:	f7fc ff00 	bl	80027c4 <Error_Handler>
	  }
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200004a0 	.word	0x200004a0
 80059d0:	20005328 	.word	0x20005328
 80059d4:	200004b4 	.word	0x200004b4

080059d8 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 80059e2:	2200      	movs	r2, #0
 80059e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059e8:	483f      	ldr	r0, [pc, #252]	; (8005ae8 <Max31855_Read_Temp+0x110>)
 80059ea:	f000 fe39 	bl	8006660 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 80059ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f2:	2204      	movs	r2, #4
 80059f4:	493d      	ldr	r1, [pc, #244]	; (8005aec <Max31855_Read_Temp+0x114>)
 80059f6:	483e      	ldr	r0, [pc, #248]	; (8005af0 <Max31855_Read_Temp+0x118>)
 80059f8:	f003 fc51 	bl	800929e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 80059fc:	2201      	movs	r2, #1
 80059fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a02:	4839      	ldr	r0, [pc, #228]	; (8005ae8 <Max31855_Read_Temp+0x110>)
 8005a04:	f000 fe2c 	bl	8006660 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8005a08:	4b38      	ldr	r3, [pc, #224]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b37      	ldr	r3, [pc, #220]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a10:	789b      	ldrb	r3, [r3, #2]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	431a      	orrs	r2, r3
 8005a16:	4b35      	ldr	r3, [pc, #212]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	4b33      	ldr	r3, [pc, #204]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	4313      	orrs	r3, r2
 8005a26:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <Max31855_Read_Temp+0x11c>)
 8005a34:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8005a36:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	09db      	lsrs	r3, r3, #7
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <Max31855_Read_Temp+0x120>)
 8005a42:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8005a44:	4b29      	ldr	r3, [pc, #164]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a46:	78db      	ldrb	r3, [r3, #3]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	425b      	negs	r3, r3
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <Max31855_Read_Temp+0x124>)
 8005a64:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8005a68:	e039      	b.n	8005ade <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <Max31855_Read_Temp+0x120>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d120      	bne.n	8005ab4 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	019b      	lsls	r3, r3, #6
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005a7a:	7852      	ldrb	r2, [r2, #1]
 8005a7c:	0892      	lsrs	r2, r2, #2
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	4313      	orrs	r3, r2
 8005a82:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a8a:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8005a92:	f083 031f 	eor.w	r3, r3, #31
 8005a96:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	425b      	negs	r3, r3
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aa4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aac:	4b13      	ldr	r3, [pc, #76]	; (8005afc <Max31855_Read_Temp+0x124>)
 8005aae:	edc3 7a00 	vstr	s15, [r3]
}
 8005ab2:	e014      	b.n	8005ade <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	019b      	lsls	r3, r3, #6
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <Max31855_Read_Temp+0x114>)
 8005abc:	7852      	ldrb	r2, [r2, #1]
 8005abe:	0892      	lsrs	r2, r2, #2
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ad0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <Max31855_Read_Temp+0x124>)
 8005ada:	edc3 7a00 	vstr	s15, [r3]
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	20005654 	.word	0x20005654
 8005af0:	200052d0 	.word	0x200052d0
 8005af4:	200004e0 	.word	0x200004e0
 8005af8:	200004e4 	.word	0x200004e4
 8005afc:	20005454 	.word	0x20005454

08005b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <HAL_Init+0x40>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <HAL_Init+0x40>)
 8005b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <HAL_Init+0x40>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <HAL_Init+0x40>)
 8005b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b1c:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <HAL_Init+0x40>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <HAL_Init+0x40>)
 8005b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b28:	2003      	movs	r0, #3
 8005b2a:	f000 fb92 	bl	8006252 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b2e:	2000      	movs	r0, #0
 8005b30:	f7fd f98a 	bl	8002e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b34:	f7fc fe4e 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023c00 	.word	0x40023c00

08005b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_IncTick+0x20>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_IncTick+0x24>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4413      	add	r3, r2
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_IncTick+0x24>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000014 	.word	0x20000014
 8005b68:	20005658 	.word	0x20005658

08005b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <HAL_GetTick+0x14>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20005658 	.word	0x20005658

08005b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b8c:	f7ff ffee 	bl	8005b6c <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d005      	beq.n	8005baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_Delay+0x44>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005baa:	bf00      	nop
 8005bac:	f7ff ffde 	bl	8005b6c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d8f7      	bhi.n	8005bac <HAL_Delay+0x28>
  {
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000014 	.word	0x20000014

08005bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e033      	b.n	8005c4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fc fe1e 	bl	800282c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d118      	bne.n	8005c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005c12:	f023 0302 	bic.w	r3, r3, #2
 8005c16:	f043 0202 	orr.w	r2, r3, #2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f94a 	bl	8005eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
 8005c3a:	e001      	b.n	8005c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e113      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x244>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d925      	bls.n	8005ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68d9      	ldr	r1, [r3, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	3b1e      	subs	r3, #30
 8005c96:	2207      	movs	r2, #7
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68d9      	ldr	r1, [r3, #12]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	4603      	mov	r3, r0
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4403      	add	r3, r0
 8005cbe:	3b1e      	subs	r3, #30
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e022      	b.n	8005d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43da      	mvns	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	400a      	ands	r2, r1
 8005cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4618      	mov	r0, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4403      	add	r3, r0
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d824      	bhi.n	8005d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	3b05      	subs	r3, #5
 8005d2c:	221f      	movs	r2, #31
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43da      	mvns	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	400a      	ands	r2, r1
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4618      	mov	r0, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	3b05      	subs	r3, #5
 8005d56:	fa00 f203 	lsl.w	r2, r0, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34
 8005d62:	e04c      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d824      	bhi.n	8005db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b23      	subs	r3, #35	; 0x23
 8005d7e:	221f      	movs	r2, #31
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43da      	mvns	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	3b23      	subs	r3, #35	; 0x23
 8005da8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
 8005db4:	e023      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3b41      	subs	r3, #65	; 0x41
 8005dc8:	221f      	movs	r2, #31
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43da      	mvns	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4618      	mov	r0, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	3b41      	subs	r3, #65	; 0x41
 8005df2:	fa00 f203 	lsl.w	r2, r0, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_ADC_ConfigChannel+0x250>)
 8005e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_ADC_ConfigChannel+0x254>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10f      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x1d8>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b12      	cmp	r3, #18
 8005e12:	d10b      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_ADC_ConfigChannel+0x254>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d12b      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_ADC_ConfigChannel+0x258>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <HAL_ADC_ConfigChannel+0x1f4>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b11      	cmp	r3, #17
 8005e46:	d122      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <HAL_ADC_ConfigChannel+0x258>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d111      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a11      	ldr	r2, [pc, #68]	; (8005eb4 <HAL_ADC_ConfigChannel+0x260>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	0c9a      	lsrs	r2, r3, #18
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e80:	e002      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f9      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40012300 	.word	0x40012300
 8005ea8:	40012000 	.word	0x40012000
 8005eac:	10000012 	.word	0x10000012
 8005eb0:	20000000 	.word	0x20000000
 8005eb4:	431bde83 	.word	0x431bde83

08005eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <ADC_Init+0x1f0>)
 8005ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	021a      	lsls	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	4a58      	ldr	r2, [pc, #352]	; (80060ac <ADC_Init+0x1f4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6899      	ldr	r1, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	e00f      	b.n	8005fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0202 	bic.w	r2, r2, #2
 8005fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7e1b      	ldrb	r3, [r3, #24]
 8005fd0:	005a      	lsls	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	3b01      	subs	r3, #1
 8006010:	035a      	lsls	r2, r3, #13
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	e007      	b.n	800602c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	3b01      	subs	r3, #1
 8006048:	051a      	lsls	r2, r3, #20
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800606e:	025a      	lsls	r2, r3, #9
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	029a      	lsls	r2, r3, #10
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012300 	.word	0x40012300
 80060ac:	0f000001 	.word	0x0f000001

080060b0 <__NVIC_SetPriorityGrouping>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	60d3      	str	r3, [r2, #12]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <__NVIC_GetPriorityGrouping>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__NVIC_GetPriorityGrouping+0x18>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	f003 0307 	and.w	r3, r3, #7
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_EnableIRQ>:
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db0b      	blt.n	800613e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	f003 021f 	and.w	r2, r3, #31
 800612c:	4907      	ldr	r1, [pc, #28]	; (800614c <__NVIC_EnableIRQ+0x38>)
 800612e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2001      	movs	r0, #1
 8006136:	fa00 f202 	lsl.w	r2, r0, r2
 800613a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	e000e100 	.word	0xe000e100

08006150 <__NVIC_DisableIRQ>:
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800615a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615e:	2b00      	cmp	r3, #0
 8006160:	db12      	blt.n	8006188 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	f003 021f 	and.w	r2, r3, #31
 8006168:	490a      	ldr	r1, [pc, #40]	; (8006194 <__NVIC_DisableIRQ+0x44>)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2001      	movs	r0, #1
 8006172:	fa00 f202 	lsl.w	r2, r0, r2
 8006176:	3320      	adds	r3, #32
 8006178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800617c:	f3bf 8f4f 	dsb	sy
}
 8006180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006182:	f3bf 8f6f 	isb	sy
}
 8006186:	bf00      	nop
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	e000e100 	.word	0xe000e100

08006198 <__NVIC_SetPriority>:
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db0a      	blt.n	80061c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	490c      	ldr	r1, [pc, #48]	; (80061e4 <__NVIC_SetPriority+0x4c>)
 80061b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061c0:	e00a      	b.n	80061d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <__NVIC_SetPriority+0x50>)
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	3b04      	subs	r3, #4
 80061d0:	0112      	lsls	r2, r2, #4
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	440b      	add	r3, r1
 80061d6:	761a      	strb	r2, [r3, #24]
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	e000e100 	.word	0xe000e100
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <NVIC_EncodePriority>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	; 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f1c3 0307 	rsb	r3, r3, #7
 8006206:	2b04      	cmp	r3, #4
 8006208:	bf28      	it	cs
 800620a:	2304      	movcs	r3, #4
 800620c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3304      	adds	r3, #4
 8006212:	2b06      	cmp	r3, #6
 8006214:	d902      	bls.n	800621c <NVIC_EncodePriority+0x30>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3b03      	subs	r3, #3
 800621a:	e000      	b.n	800621e <NVIC_EncodePriority+0x32>
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43da      	mvns	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	401a      	ands	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006234:	f04f 31ff 	mov.w	r1, #4294967295
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	43d9      	mvns	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006244:	4313      	orrs	r3, r2
}
 8006246:	4618      	mov	r0, r3
 8006248:	3724      	adds	r7, #36	; 0x24
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ff28 	bl	80060b0 <__NVIC_SetPriorityGrouping>
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800627a:	f7ff ff3d 	bl	80060f8 <__NVIC_GetPriorityGrouping>
 800627e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	6978      	ldr	r0, [r7, #20]
 8006286:	f7ff ffb1 	bl	80061ec <NVIC_EncodePriority>
 800628a:	4602      	mov	r2, r0
 800628c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ff80 	bl	8006198 <__NVIC_SetPriority>
}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ff30 	bl	8006114 <__NVIC_EnableIRQ>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80062c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ff40 	bl	8006150 <__NVIC_DisableIRQ>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062d8:	b480      	push	{r7}
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e177      	b.n	80065e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062f4:	2201      	movs	r2, #1
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4013      	ands	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	429a      	cmp	r2, r3
 800630e:	f040 8166 	bne.w	80065de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d005      	beq.n	800632a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006326:	2b02      	cmp	r3, #2
 8006328:	d130      	bne.n	800638c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	2203      	movs	r2, #3
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43db      	mvns	r3, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4313      	orrs	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006360:	2201      	movs	r2, #1
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 0201 	and.w	r2, r3, #1
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4313      	orrs	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d017      	beq.n	80063c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	2203      	movs	r2, #3
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4313      	orrs	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d123      	bne.n	800641c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	08da      	lsrs	r2, r3, #3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3208      	adds	r2, #8
 80063dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	220f      	movs	r2, #15
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4313      	orrs	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	08da      	lsrs	r2, r3, #3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3208      	adds	r2, #8
 8006416:	69b9      	ldr	r1, [r7, #24]
 8006418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	2203      	movs	r2, #3
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 0203 	and.w	r2, r3, #3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80c0 	beq.w	80065de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	4b66      	ldr	r3, [pc, #408]	; (80065fc <HAL_GPIO_Init+0x324>)
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	4a65      	ldr	r2, [pc, #404]	; (80065fc <HAL_GPIO_Init+0x324>)
 8006468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800646c:	6453      	str	r3, [r2, #68]	; 0x44
 800646e:	4b63      	ldr	r3, [pc, #396]	; (80065fc <HAL_GPIO_Init+0x324>)
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800647a:	4a61      	ldr	r2, [pc, #388]	; (8006600 <HAL_GPIO_Init+0x328>)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	3302      	adds	r3, #2
 8006482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	220f      	movs	r2, #15
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43db      	mvns	r3, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4013      	ands	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a58      	ldr	r2, [pc, #352]	; (8006604 <HAL_GPIO_Init+0x32c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d037      	beq.n	8006516 <HAL_GPIO_Init+0x23e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a57      	ldr	r2, [pc, #348]	; (8006608 <HAL_GPIO_Init+0x330>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <HAL_GPIO_Init+0x23a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a56      	ldr	r2, [pc, #344]	; (800660c <HAL_GPIO_Init+0x334>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d02b      	beq.n	800650e <HAL_GPIO_Init+0x236>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a55      	ldr	r2, [pc, #340]	; (8006610 <HAL_GPIO_Init+0x338>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d025      	beq.n	800650a <HAL_GPIO_Init+0x232>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a54      	ldr	r2, [pc, #336]	; (8006614 <HAL_GPIO_Init+0x33c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01f      	beq.n	8006506 <HAL_GPIO_Init+0x22e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a53      	ldr	r2, [pc, #332]	; (8006618 <HAL_GPIO_Init+0x340>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d019      	beq.n	8006502 <HAL_GPIO_Init+0x22a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_GPIO_Init+0x344>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_GPIO_Init+0x226>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a51      	ldr	r2, [pc, #324]	; (8006620 <HAL_GPIO_Init+0x348>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00d      	beq.n	80064fa <HAL_GPIO_Init+0x222>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a50      	ldr	r2, [pc, #320]	; (8006624 <HAL_GPIO_Init+0x34c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <HAL_GPIO_Init+0x21e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a4f      	ldr	r2, [pc, #316]	; (8006628 <HAL_GPIO_Init+0x350>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <HAL_GPIO_Init+0x21a>
 80064ee:	2309      	movs	r3, #9
 80064f0:	e012      	b.n	8006518 <HAL_GPIO_Init+0x240>
 80064f2:	230a      	movs	r3, #10
 80064f4:	e010      	b.n	8006518 <HAL_GPIO_Init+0x240>
 80064f6:	2308      	movs	r3, #8
 80064f8:	e00e      	b.n	8006518 <HAL_GPIO_Init+0x240>
 80064fa:	2307      	movs	r3, #7
 80064fc:	e00c      	b.n	8006518 <HAL_GPIO_Init+0x240>
 80064fe:	2306      	movs	r3, #6
 8006500:	e00a      	b.n	8006518 <HAL_GPIO_Init+0x240>
 8006502:	2305      	movs	r3, #5
 8006504:	e008      	b.n	8006518 <HAL_GPIO_Init+0x240>
 8006506:	2304      	movs	r3, #4
 8006508:	e006      	b.n	8006518 <HAL_GPIO_Init+0x240>
 800650a:	2303      	movs	r3, #3
 800650c:	e004      	b.n	8006518 <HAL_GPIO_Init+0x240>
 800650e:	2302      	movs	r3, #2
 8006510:	e002      	b.n	8006518 <HAL_GPIO_Init+0x240>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <HAL_GPIO_Init+0x240>
 8006516:	2300      	movs	r3, #0
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	f002 0203 	and.w	r2, r2, #3
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	4093      	lsls	r3, r2
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006528:	4935      	ldr	r1, [pc, #212]	; (8006600 <HAL_GPIO_Init+0x328>)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	3302      	adds	r3, #2
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006536:	4b3d      	ldr	r3, [pc, #244]	; (800662c <HAL_GPIO_Init+0x354>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800655a:	4a34      	ldr	r2, [pc, #208]	; (800662c <HAL_GPIO_Init+0x354>)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006560:	4b32      	ldr	r3, [pc, #200]	; (800662c <HAL_GPIO_Init+0x354>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	43db      	mvns	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006584:	4a29      	ldr	r2, [pc, #164]	; (800662c <HAL_GPIO_Init+0x354>)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800658a:	4b28      	ldr	r3, [pc, #160]	; (800662c <HAL_GPIO_Init+0x354>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	43db      	mvns	r3, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065ae:	4a1f      	ldr	r2, [pc, #124]	; (800662c <HAL_GPIO_Init+0x354>)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <HAL_GPIO_Init+0x354>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <HAL_GPIO_Init+0x354>)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	f67f ae84 	bls.w	80062f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40023800 	.word	0x40023800
 8006600:	40013800 	.word	0x40013800
 8006604:	40020000 	.word	0x40020000
 8006608:	40020400 	.word	0x40020400
 800660c:	40020800 	.word	0x40020800
 8006610:	40020c00 	.word	0x40020c00
 8006614:	40021000 	.word	0x40021000
 8006618:	40021400 	.word	0x40021400
 800661c:	40021800 	.word	0x40021800
 8006620:	40021c00 	.word	0x40021c00
 8006624:	40022000 	.word	0x40022000
 8006628:	40022400 	.word	0x40022400
 800662c:	40013c00 	.word	0x40013c00

08006630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e001      	b.n	8006652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
 800666c:	4613      	mov	r3, r2
 800666e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006670:	787b      	ldrb	r3, [r7, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006676:	887a      	ldrh	r2, [r7, #2]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800667c:	e003      	b.n	8006686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	041a      	lsls	r2, r3, #16
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	619a      	str	r2, [r3, #24]
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066aa:	4a05      	ldr	r2, [pc, #20]	; (80066c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fd f81c 	bl	80036f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40013c00 	.word	0x40013c00

080066c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e12b      	b.n	800692e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fc f8e2 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006728:	f001 fcd4 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 800672c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4a81      	ldr	r2, [pc, #516]	; (8006938 <HAL_I2C_Init+0x274>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d807      	bhi.n	8006748 <HAL_I2C_Init+0x84>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a80      	ldr	r2, [pc, #512]	; (800693c <HAL_I2C_Init+0x278>)
 800673c:	4293      	cmp	r3, r2
 800673e:	bf94      	ite	ls
 8006740:	2301      	movls	r3, #1
 8006742:	2300      	movhi	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e006      	b.n	8006756 <HAL_I2C_Init+0x92>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a7d      	ldr	r2, [pc, #500]	; (8006940 <HAL_I2C_Init+0x27c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	bf94      	ite	ls
 8006750:	2301      	movls	r3, #1
 8006752:	2300      	movhi	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e0e7      	b.n	800692e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a78      	ldr	r2, [pc, #480]	; (8006944 <HAL_I2C_Init+0x280>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	0c9b      	lsrs	r3, r3, #18
 8006768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	4a6a      	ldr	r2, [pc, #424]	; (8006938 <HAL_I2C_Init+0x274>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d802      	bhi.n	8006798 <HAL_I2C_Init+0xd4>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3301      	adds	r3, #1
 8006796:	e009      	b.n	80067ac <HAL_I2C_Init+0xe8>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	4a69      	ldr	r2, [pc, #420]	; (8006948 <HAL_I2C_Init+0x284>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	3301      	adds	r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	495c      	ldr	r1, [pc, #368]	; (8006938 <HAL_I2C_Init+0x274>)
 80067c8:	428b      	cmp	r3, r1
 80067ca:	d819      	bhi.n	8006800 <HAL_I2C_Init+0x13c>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1e59      	subs	r1, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067da:	1c59      	adds	r1, r3, #1
 80067dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067e0:	400b      	ands	r3, r1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_I2C_Init+0x138>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1e59      	subs	r1, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fa:	e051      	b.n	80068a0 <HAL_I2C_Init+0x1dc>
 80067fc:	2304      	movs	r3, #4
 80067fe:	e04f      	b.n	80068a0 <HAL_I2C_Init+0x1dc>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d111      	bne.n	800682c <HAL_I2C_Init+0x168>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1e58      	subs	r0, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	440b      	add	r3, r1
 8006816:	fbb0 f3f3 	udiv	r3, r0, r3
 800681a:	3301      	adds	r3, #1
 800681c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf0c      	ite	eq
 8006824:	2301      	moveq	r3, #1
 8006826:	2300      	movne	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e012      	b.n	8006852 <HAL_I2C_Init+0x18e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1e58      	subs	r0, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	0099      	lsls	r1, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006842:	3301      	adds	r3, #1
 8006844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_I2C_Init+0x196>
 8006856:	2301      	movs	r3, #1
 8006858:	e022      	b.n	80068a0 <HAL_I2C_Init+0x1dc>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10e      	bne.n	8006880 <HAL_I2C_Init+0x1bc>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1e58      	subs	r0, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	440b      	add	r3, r1
 8006870:	fbb0 f3f3 	udiv	r3, r0, r3
 8006874:	3301      	adds	r3, #1
 8006876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	e00f      	b.n	80068a0 <HAL_I2C_Init+0x1dc>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1e58      	subs	r0, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	0099      	lsls	r1, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	fbb0 f3f3 	udiv	r3, r0, r3
 8006896:	3301      	adds	r3, #1
 8006898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	6809      	ldr	r1, [r1, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6911      	ldr	r1, [r2, #16]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68d2      	ldr	r2, [r2, #12]
 80068da:	4311      	orrs	r1, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	000186a0 	.word	0x000186a0
 800693c:	001e847f 	.word	0x001e847f
 8006940:	003d08ff 	.word	0x003d08ff
 8006944:	431bde83 	.word	0x431bde83
 8006948:	10624dd3 	.word	0x10624dd3

0800694c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4603      	mov	r3, r0
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	460b      	mov	r3, r1
 8006960:	813b      	strh	r3, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006966:	f7ff f901 	bl	8005b6c <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b20      	cmp	r3, #32
 8006976:	f040 80d9 	bne.w	8006b2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2319      	movs	r3, #25
 8006980:	2201      	movs	r2, #1
 8006982:	496d      	ldr	r1, [pc, #436]	; (8006b38 <HAL_I2C_Mem_Write+0x1ec>)
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fcb5 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
 8006992:	e0cc      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_I2C_Mem_Write+0x56>
 800699e:	2302      	movs	r3, #2
 80069a0:	e0c5      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d007      	beq.n	80069c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2221      	movs	r2, #33	; 0x21
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2240      	movs	r2, #64	; 0x40
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a4d      	ldr	r2, [pc, #308]	; (8006b3c <HAL_I2C_Mem_Write+0x1f0>)
 8006a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a0a:	88f8      	ldrh	r0, [r7, #6]
 8006a0c:	893a      	ldrh	r2, [r7, #8]
 8006a0e:	8979      	ldrh	r1, [r7, #10]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4603      	mov	r3, r0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 faec 	bl	8006ff8 <I2C_RequestMemoryWrite>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d052      	beq.n	8006acc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e081      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fd36 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00d      	beq.n	8006a56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d107      	bne.n	8006a52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e06b      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	781a      	ldrb	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d11b      	bne.n	8006acc <HAL_I2C_Mem_Write+0x180>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d017      	beq.n	8006acc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1aa      	bne.n	8006a2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fd22 	bl	8007522 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00d      	beq.n	8006b00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d107      	bne.n	8006afc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e016      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	00100002 	.word	0x00100002
 8006b3c:	ffff0000 	.word	0xffff0000

08006b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08c      	sub	sp, #48	; 0x30
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	4608      	mov	r0, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	817b      	strh	r3, [r7, #10]
 8006b52:	460b      	mov	r3, r1
 8006b54:	813b      	strh	r3, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b5a:	f7ff f807 	bl	8005b6c <HAL_GetTick>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	f040 8208 	bne.w	8006f7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2319      	movs	r3, #25
 8006b74:	2201      	movs	r2, #1
 8006b76:	497b      	ldr	r1, [pc, #492]	; (8006d64 <HAL_I2C_Mem_Read+0x224>)
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fbbb 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
 8006b86:	e1fb      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_I2C_Mem_Read+0x56>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e1f4      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d007      	beq.n	8006bbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2222      	movs	r2, #34	; 0x22
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2240      	movs	r2, #64	; 0x40
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a5b      	ldr	r2, [pc, #364]	; (8006d68 <HAL_I2C_Mem_Read+0x228>)
 8006bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bfe:	88f8      	ldrh	r0, [r7, #6]
 8006c00:	893a      	ldrh	r2, [r7, #8]
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fa88 	bl	8007124 <I2C_RequestMemoryRead>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e1b0      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d113      	bne.n	8006c4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c26:	2300      	movs	r3, #0
 8006c28:	623b      	str	r3, [r7, #32]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e184      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d11b      	bne.n	8006c8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e164      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d11b      	bne.n	8006cce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	e144      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ce4:	e138      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	f200 80f1 	bhi.w	8006ed2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d123      	bne.n	8006d40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fc51 	bl	80075a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e139      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d3e:	e10b      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d14e      	bne.n	8006de6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4906      	ldr	r1, [pc, #24]	; (8006d6c <HAL_I2C_Mem_Read+0x22c>)
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 face 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e10e      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
 8006d62:	bf00      	nop
 8006d64:	00100002 	.word	0x00100002
 8006d68:	ffff0000 	.word	0xffff0000
 8006d6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006de4:	e0b8      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2200      	movs	r2, #0
 8006dee:	4966      	ldr	r1, [pc, #408]	; (8006f88 <HAL_I2C_Mem_Read+0x448>)
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fa7f 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0bf      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2200      	movs	r2, #0
 8006e4a:	494f      	ldr	r1, [pc, #316]	; (8006f88 <HAL_I2C_Mem_Read+0x448>)
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fa51 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e091      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed0:	e042      	b.n	8006f58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fb64 	bl	80075a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e04c      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d118      	bne.n	8006f58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f47f aec2 	bne.w	8006ce6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	00010004 	.word	0x00010004

08006f8c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d124      	bne.n	8006fea <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2228      	movs	r2, #40	; 0x28
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d007      	beq.n	8006fc6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0201 	orr.w	r2, r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fd4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006fe4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e000      	b.n	8006fec <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
  }
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	461a      	mov	r2, r3
 8007006:	4603      	mov	r3, r0
 8007008:	817b      	strh	r3, [r7, #10]
 800700a:	460b      	mov	r3, r1
 800700c:	813b      	strh	r3, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007020:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	2200      	movs	r2, #0
 800702a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f960 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007048:	d103      	bne.n	8007052 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e05f      	b.n	8007116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007056:	897b      	ldrh	r3, [r7, #10]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007064:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	6a3a      	ldr	r2, [r7, #32]
 800706a:	492d      	ldr	r1, [pc, #180]	; (8007120 <I2C_RequestMemoryWrite+0x128>)
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f998 	bl	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e04c      	b.n	8007116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	6a39      	ldr	r1, [r7, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fa02 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d107      	bne.n	80070ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e02b      	b.n	8007116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d105      	bne.n	80070d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070c4:	893b      	ldrh	r3, [r7, #8]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	611a      	str	r2, [r3, #16]
 80070ce:	e021      	b.n	8007114 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e0:	6a39      	ldr	r1, [r7, #32]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f9dc 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d107      	bne.n	8007106 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007104:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e005      	b.n	8007116 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800710a:	893b      	ldrh	r3, [r7, #8]
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	00010002 	.word	0x00010002

08007124 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	461a      	mov	r2, r3
 8007132:	4603      	mov	r3, r0
 8007134:	817b      	strh	r3, [r7, #10]
 8007136:	460b      	mov	r3, r1
 8007138:	813b      	strh	r3, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800714c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	2200      	movs	r2, #0
 8007166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f8c2 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00d      	beq.n	8007192 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007184:	d103      	bne.n	800718e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e0aa      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007192:	897b      	ldrh	r3, [r7, #10]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	6a3a      	ldr	r2, [r7, #32]
 80071a6:	4952      	ldr	r1, [pc, #328]	; (80072f0 <I2C_RequestMemoryRead+0x1cc>)
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f8fa 	bl	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e097      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d0:	6a39      	ldr	r1, [r7, #32]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f964 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d107      	bne.n	80071f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e076      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007200:	893b      	ldrh	r3, [r7, #8]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	611a      	str	r2, [r3, #16]
 800720a:	e021      	b.n	8007250 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800720c:	893b      	ldrh	r3, [r7, #8]
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	b29b      	uxth	r3, r3
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800721a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721c:	6a39      	ldr	r1, [r7, #32]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f93e 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b04      	cmp	r3, #4
 8007230:	d107      	bne.n	8007242 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e050      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007246:	893b      	ldrh	r3, [r7, #8]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	6a39      	ldr	r1, [r7, #32]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f923 	bl	80074a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00d      	beq.n	800727c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	2b04      	cmp	r3, #4
 8007266:	d107      	bne.n	8007278 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007276:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e035      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800728a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	2200      	movs	r2, #0
 8007294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f82b 	bl	80072f4 <I2C_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b2:	d103      	bne.n	80072bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e013      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072c0:	897b      	ldrh	r3, [r7, #10]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	4906      	ldr	r1, [pc, #24]	; (80072f0 <I2C_RequestMemoryRead+0x1cc>)
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f863 	bl	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	00010002 	.word	0x00010002

080072f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007304:	e025      	b.n	8007352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d021      	beq.n	8007352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fe fc2d 	bl	8005b6c <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d116      	bne.n	8007352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f043 0220 	orr.w	r2, r3, #32
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e023      	b.n	800739a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	0c1b      	lsrs	r3, r3, #16
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	d10d      	bne.n	8007378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	43da      	mvns	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	e00c      	b.n	8007392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	43da      	mvns	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	429a      	cmp	r2, r3
 8007396:	d0b6      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073b0:	e051      	b.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c0:	d123      	bne.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0204 	orr.w	r2, r3, #4
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e046      	b.n	8007498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d021      	beq.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007412:	f7fe fbab 	bl	8005b6c <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	429a      	cmp	r2, r3
 8007420:	d302      	bcc.n	8007428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d116      	bne.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f043 0220 	orr.w	r2, r3, #32
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e020      	b.n	8007498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10c      	bne.n	800747a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	43da      	mvns	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	bf14      	ite	ne
 8007472:	2301      	movne	r3, #1
 8007474:	2300      	moveq	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	e00b      	b.n	8007492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	43da      	mvns	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4013      	ands	r3, r2
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf14      	ite	ne
 800748c:	2301      	movne	r3, #1
 800748e:	2300      	moveq	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d18d      	bne.n	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074ac:	e02d      	b.n	800750a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f8ce 	bl	8007650 <I2C_IsAcknowledgeFailed>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e02d      	b.n	800751a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d021      	beq.n	800750a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fe fb51 	bl	8005b6c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d116      	bne.n	800750a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e007      	b.n	800751a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d1ca      	bne.n	80074ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800752e:	e02d      	b.n	800758c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f88d 	bl	8007650 <I2C_IsAcknowledgeFailed>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e02d      	b.n	800759c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d021      	beq.n	800758c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007548:	f7fe fb10 	bl	8005b6c <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	429a      	cmp	r2, r3
 8007556:	d302      	bcc.n	800755e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f043 0220 	orr.w	r2, r3, #32
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e007      	b.n	800759c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b04      	cmp	r3, #4
 8007598:	d1ca      	bne.n	8007530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075b0:	e042      	b.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d119      	bne.n	80075f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0210 	mvn.w	r2, #16
 80075c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e029      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f4:	f7fe faba 	bl	8005b6c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	429a      	cmp	r2, r3
 8007602:	d302      	bcc.n	800760a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d116      	bne.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	f043 0220 	orr.w	r2, r3, #32
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e007      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d1b5      	bne.n	80075b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d11b      	bne.n	80076a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	f043 0204 	orr.w	r2, r3, #4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d129      	bne.n	8007718 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2224      	movs	r2, #36	; 0x24
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0210 	bic.w	r2, r2, #16
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b20      	cmp	r3, #32
 800773e:	d12a      	bne.n	8007796 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2224      	movs	r2, #36	; 0x24
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	f023 030f 	bic.w	r3, r3, #15
 8007766:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	4313      	orrs	r3, r2
 8007770:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	89fa      	ldrh	r2, [r7, #14]
 8007778:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0201 	orr.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80077b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	4904      	ldr	r1, [pc, #16]	; (80077e4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	604b      	str	r3, [r1, #4]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	40007000 	.word	0x40007000

080077e8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80077f0:	4b06      	ldr	r3, [pc, #24]	; (800780c <HAL_PWR_DisableWakeUpPin+0x24>)
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	43db      	mvns	r3, r3
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <HAL_PWR_DisableWakeUpPin+0x24>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	604b      	str	r3, [r1, #4]
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40007000 	.word	0x40007000

08007810 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a07      	ldr	r2, [pc, #28]	; (8007838 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800781a:	f043 0302 	orr.w	r3, r3, #2
 800781e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007820:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	4a05      	ldr	r2, [pc, #20]	; (800783c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007826:	f043 0304 	orr.w	r3, r3, #4
 800782a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800782c:	bf30      	wfi
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40007000 	.word	0x40007000
 800783c:	e000ed00 	.word	0xe000ed00

08007840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e264      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d075      	beq.n	800794a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800785e:	4ba3      	ldr	r3, [pc, #652]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 030c 	and.w	r3, r3, #12
 8007866:	2b04      	cmp	r3, #4
 8007868:	d00c      	beq.n	8007884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800786a:	4ba0      	ldr	r3, [pc, #640]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007872:	2b08      	cmp	r3, #8
 8007874:	d112      	bne.n	800789c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007876:	4b9d      	ldr	r3, [pc, #628]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007882:	d10b      	bne.n	800789c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007884:	4b99      	ldr	r3, [pc, #612]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d05b      	beq.n	8007948 <HAL_RCC_OscConfig+0x108>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d157      	bne.n	8007948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e23f      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a4:	d106      	bne.n	80078b4 <HAL_RCC_OscConfig+0x74>
 80078a6:	4b91      	ldr	r3, [pc, #580]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a90      	ldr	r2, [pc, #576]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e01d      	b.n	80078f0 <HAL_RCC_OscConfig+0xb0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x98>
 80078be:	4b8b      	ldr	r3, [pc, #556]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a8a      	ldr	r2, [pc, #552]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b88      	ldr	r3, [pc, #544]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a87      	ldr	r2, [pc, #540]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	e00b      	b.n	80078f0 <HAL_RCC_OscConfig+0xb0>
 80078d8:	4b84      	ldr	r3, [pc, #528]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a83      	ldr	r2, [pc, #524]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4b81      	ldr	r3, [pc, #516]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a80      	ldr	r2, [pc, #512]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80078ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d013      	beq.n	8007920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f8:	f7fe f938 	bl	8005b6c <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007900:	f7fe f934 	bl	8005b6c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b64      	cmp	r3, #100	; 0x64
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e204      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	4b76      	ldr	r3, [pc, #472]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0xc0>
 800791e:	e014      	b.n	800794a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007920:	f7fe f924 	bl	8005b6c <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007928:	f7fe f920 	bl	8005b6c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b64      	cmp	r3, #100	; 0x64
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e1f0      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793a:	4b6c      	ldr	r3, [pc, #432]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0xe8>
 8007946:	e000      	b.n	800794a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d063      	beq.n	8007a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007956:	4b65      	ldr	r3, [pc, #404]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 030c 	and.w	r3, r3, #12
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007962:	4b62      	ldr	r3, [pc, #392]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800796a:	2b08      	cmp	r3, #8
 800796c:	d11c      	bne.n	80079a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800796e:	4b5f      	ldr	r3, [pc, #380]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d116      	bne.n	80079a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800797a:	4b5c      	ldr	r3, [pc, #368]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <HAL_RCC_OscConfig+0x152>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d001      	beq.n	8007992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e1c4      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007992:	4b56      	ldr	r3, [pc, #344]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	4952      	ldr	r1, [pc, #328]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a6:	e03a      	b.n	8007a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d020      	beq.n	80079f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079b0:	4b4f      	ldr	r3, [pc, #316]	; (8007af0 <HAL_RCC_OscConfig+0x2b0>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b6:	f7fe f8d9 	bl	8005b6c <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079be:	f7fe f8d5 	bl	8005b6c <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e1a5      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d0:	4b46      	ldr	r3, [pc, #280]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079dc:	4b43      	ldr	r3, [pc, #268]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4940      	ldr	r1, [pc, #256]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	e015      	b.n	8007a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079f2:	4b3f      	ldr	r3, [pc, #252]	; (8007af0 <HAL_RCC_OscConfig+0x2b0>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f8:	f7fe f8b8 	bl	8005b6c <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a00:	f7fe f8b4 	bl	8005b6c <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e184      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a12:	4b36      	ldr	r3, [pc, #216]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d030      	beq.n	8007a8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a32:	4b30      	ldr	r3, [pc, #192]	; (8007af4 <HAL_RCC_OscConfig+0x2b4>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a38:	f7fe f898 	bl	8005b6c <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a40:	f7fe f894 	bl	8005b6c <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e164      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a52:	4b26      	ldr	r3, [pc, #152]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f0      	beq.n	8007a40 <HAL_RCC_OscConfig+0x200>
 8007a5e:	e015      	b.n	8007a8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a60:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <HAL_RCC_OscConfig+0x2b4>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a66:	f7fe f881 	bl	8005b6c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a6e:	f7fe f87d 	bl	8005b6c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e14d      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a80:	4b1a      	ldr	r3, [pc, #104]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80a0 	beq.w	8007bda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10f      	bne.n	8007aca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	4a0e      	ldr	r2, [pc, #56]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8007aba:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <HAL_RCC_OscConfig+0x2ac>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	60bb      	str	r3, [r7, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aca:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_RCC_OscConfig+0x2b8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d121      	bne.n	8007b1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ad6:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <HAL_RCC_OscConfig+0x2b8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a07      	ldr	r2, [pc, #28]	; (8007af8 <HAL_RCC_OscConfig+0x2b8>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ae2:	f7fe f843 	bl	8005b6c <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	e011      	b.n	8007b0e <HAL_RCC_OscConfig+0x2ce>
 8007aea:	bf00      	nop
 8007aec:	40023800 	.word	0x40023800
 8007af0:	42470000 	.word	0x42470000
 8007af4:	42470e80 	.word	0x42470e80
 8007af8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007afc:	f7fe f836 	bl	8005b6c <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e106      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b0e:	4b85      	ldr	r3, [pc, #532]	; (8007d24 <HAL_RCC_OscConfig+0x4e4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f0      	beq.n	8007afc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d106      	bne.n	8007b30 <HAL_RCC_OscConfig+0x2f0>
 8007b22:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a80      	ldr	r2, [pc, #512]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2e:	e01c      	b.n	8007b6a <HAL_RCC_OscConfig+0x32a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCC_OscConfig+0x312>
 8007b38:	4b7b      	ldr	r3, [pc, #492]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	4a7a      	ldr	r2, [pc, #488]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b3e:	f043 0304 	orr.w	r3, r3, #4
 8007b42:	6713      	str	r3, [r2, #112]	; 0x70
 8007b44:	4b78      	ldr	r3, [pc, #480]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a77      	ldr	r2, [pc, #476]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b50:	e00b      	b.n	8007b6a <HAL_RCC_OscConfig+0x32a>
 8007b52:	4b75      	ldr	r3, [pc, #468]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a74      	ldr	r2, [pc, #464]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b5e:	4b72      	ldr	r3, [pc, #456]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a71      	ldr	r2, [pc, #452]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b64:	f023 0304 	bic.w	r3, r3, #4
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b72:	f7fd fffb 	bl	8005b6c <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b78:	e00a      	b.n	8007b90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b7a:	f7fd fff7 	bl	8005b6c <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e0c5      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b90:	4b65      	ldr	r3, [pc, #404]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0ee      	beq.n	8007b7a <HAL_RCC_OscConfig+0x33a>
 8007b9c:	e014      	b.n	8007bc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b9e:	f7fd ffe5 	bl	8005b6c <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ba6:	f7fd ffe1 	bl	8005b6c <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e0af      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bbc:	4b5a      	ldr	r3, [pc, #360]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ee      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d105      	bne.n	8007bda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bce:	4b56      	ldr	r3, [pc, #344]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	4a55      	ldr	r2, [pc, #340]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 809b 	beq.w	8007d1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007be4:	4b50      	ldr	r3, [pc, #320]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 030c 	and.w	r3, r3, #12
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d05c      	beq.n	8007caa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d141      	bne.n	8007c7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf8:	4b4c      	ldr	r3, [pc, #304]	; (8007d2c <HAL_RCC_OscConfig+0x4ec>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfe:	f7fd ffb5 	bl	8005b6c <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c06:	f7fd ffb1 	bl	8005b6c <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e081      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c18:	4b43      	ldr	r3, [pc, #268]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f0      	bne.n	8007c06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69da      	ldr	r2, [r3, #28]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	019b      	lsls	r3, r3, #6
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	061b      	lsls	r3, r3, #24
 8007c48:	4937      	ldr	r1, [pc, #220]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <HAL_RCC_OscConfig+0x4ec>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c54:	f7fd ff8a 	bl	8005b6c <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fd ff86 	bl	8005b6c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e056      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c6e:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCC_OscConfig+0x41c>
 8007c7a:	e04e      	b.n	8007d1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <HAL_RCC_OscConfig+0x4ec>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c82:	f7fd ff73 	bl	8005b6c <HAL_GetTick>
 8007c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c88:	e008      	b.n	8007c9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c8a:	f7fd ff6f 	bl	8005b6c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e03f      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c9c:	4b22      	ldr	r3, [pc, #136]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f0      	bne.n	8007c8a <HAL_RCC_OscConfig+0x44a>
 8007ca8:	e037      	b.n	8007d1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e032      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <HAL_RCC_OscConfig+0x4e8>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d028      	beq.n	8007d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d121      	bne.n	8007d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d11a      	bne.n	8007d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d111      	bne.n	8007d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d107      	bne.n	8007d16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d001      	beq.n	8007d1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40007000 	.word	0x40007000
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	42470060 	.word	0x42470060

08007d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0cc      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d44:	4b68      	ldr	r3, [pc, #416]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d90c      	bls.n	8007d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d52:	4b65      	ldr	r3, [pc, #404]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d5a:	4b63      	ldr	r3, [pc, #396]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d001      	beq.n	8007d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0b8      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d020      	beq.n	8007dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d84:	4b59      	ldr	r3, [pc, #356]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4a58      	ldr	r2, [pc, #352]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d9c:	4b53      	ldr	r3, [pc, #332]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	4a52      	ldr	r2, [pc, #328]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da8:	4b50      	ldr	r3, [pc, #320]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	494d      	ldr	r1, [pc, #308]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d044      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dce:	4b47      	ldr	r3, [pc, #284]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d119      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e07f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d003      	beq.n	8007dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d107      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dee:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e06f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dfe:	4b3b      	ldr	r3, [pc, #236]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e067      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e0e:	4b37      	ldr	r3, [pc, #220]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f023 0203 	bic.w	r2, r3, #3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	4934      	ldr	r1, [pc, #208]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e20:	f7fd fea4 	bl	8005b6c <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e26:	e00a      	b.n	8007e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e28:	f7fd fea0 	bl	8005b6c <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e04f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 020c 	and.w	r2, r3, #12
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d1eb      	bne.n	8007e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d20c      	bcs.n	8007e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5e:	4b22      	ldr	r3, [pc, #136]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e66:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d001      	beq.n	8007e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e032      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4916      	ldr	r1, [pc, #88]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	490e      	ldr	r1, [pc, #56]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eb6:	f000 f821 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	091b      	lsrs	r3, r3, #4
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	490a      	ldr	r1, [pc, #40]	; (8007ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ec8:	5ccb      	ldrb	r3, [r1, r3]
 8007eca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fa ffb6 	bl	8002e48 <HAL_InitTick>

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40023c00 	.word	0x40023c00
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	08014540 	.word	0x08014540
 8007ef4:	20000000 	.word	0x20000000
 8007ef8:	20000010 	.word	0x20000010

08007efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f14:	4b67      	ldr	r3, [pc, #412]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 030c 	and.w	r3, r3, #12
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d00d      	beq.n	8007f3c <HAL_RCC_GetSysClockFreq+0x40>
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	f200 80bd 	bhi.w	80080a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_RCC_GetSysClockFreq+0x34>
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d003      	beq.n	8007f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f2e:	e0b7      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f30:	4b61      	ldr	r3, [pc, #388]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f32:	60bb      	str	r3, [r7, #8]
       break;
 8007f34:	e0b7      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f36:	4b60      	ldr	r3, [pc, #384]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f38:	60bb      	str	r3, [r7, #8]
      break;
 8007f3a:	e0b4      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f3c:	4b5d      	ldr	r3, [pc, #372]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f46:	4b5b      	ldr	r3, [pc, #364]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f52:	4b58      	ldr	r3, [pc, #352]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f62:	f04f 0100 	mov.w	r1, #0
 8007f66:	ea02 0800 	and.w	r8, r2, r0
 8007f6a:	ea03 0901 	and.w	r9, r3, r1
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	014b      	lsls	r3, r1, #5
 8007f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f80:	0142      	lsls	r2, r0, #5
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	ebb0 0008 	subs.w	r0, r0, r8
 8007f8a:	eb61 0109 	sbc.w	r1, r1, r9
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	018b      	lsls	r3, r1, #6
 8007f98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f9c:	0182      	lsls	r2, r0, #6
 8007f9e:	1a12      	subs	r2, r2, r0
 8007fa0:	eb63 0301 	sbc.w	r3, r3, r1
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	00d9      	lsls	r1, r3, #3
 8007fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fb2:	00d0      	lsls	r0, r2, #3
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	eb12 0208 	adds.w	r2, r2, r8
 8007fbc:	eb43 0309 	adc.w	r3, r3, r9
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	f04f 0100 	mov.w	r1, #0
 8007fc8:	0299      	lsls	r1, r3, #10
 8007fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007fce:	0290      	lsls	r0, r2, #10
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	f7f8 fe62 	bl	8000ca8 <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4613      	mov	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e04a      	b.n	8008084 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ffe:	f04f 0100 	mov.w	r1, #0
 8008002:	ea02 0400 	and.w	r4, r2, r0
 8008006:	ea03 0501 	and.w	r5, r3, r1
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	014b      	lsls	r3, r1, #5
 8008018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800801c:	0142      	lsls	r2, r0, #5
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	1b00      	subs	r0, r0, r4
 8008024:	eb61 0105 	sbc.w	r1, r1, r5
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	018b      	lsls	r3, r1, #6
 8008032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008036:	0182      	lsls	r2, r0, #6
 8008038:	1a12      	subs	r2, r2, r0
 800803a:	eb63 0301 	sbc.w	r3, r3, r1
 800803e:	f04f 0000 	mov.w	r0, #0
 8008042:	f04f 0100 	mov.w	r1, #0
 8008046:	00d9      	lsls	r1, r3, #3
 8008048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800804c:	00d0      	lsls	r0, r2, #3
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	1912      	adds	r2, r2, r4
 8008054:	eb45 0303 	adc.w	r3, r5, r3
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	0299      	lsls	r1, r3, #10
 8008062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008066:	0290      	lsls	r0, r2, #10
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	461a      	mov	r2, r3
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	f7f8 fe16 	bl	8000ca8 <__aeabi_uldivmod>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4613      	mov	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	3301      	adds	r3, #1
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	60bb      	str	r3, [r7, #8]
      break;
 800809e:	e002      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080a2:	60bb      	str	r3, [r7, #8]
      break;
 80080a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080a6:	68bb      	ldr	r3, [r7, #8]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	00f42400 	.word	0x00f42400

080080bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c0:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80080c2:	681b      	ldr	r3, [r3, #0]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000000 	.word	0x20000000

080080d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080d8:	f7ff fff0 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 80080dc:	4602      	mov	r2, r0
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	0a9b      	lsrs	r3, r3, #10
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	4903      	ldr	r1, [pc, #12]	; (80080f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ea:	5ccb      	ldrb	r3, [r1, r3]
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40023800 	.word	0x40023800
 80080f8:	08014550 	.word	0x08014550

080080fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008100:	f7ff ffdc 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 8008104:	4602      	mov	r2, r0
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	0b5b      	lsrs	r3, r3, #13
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	4903      	ldr	r1, [pc, #12]	; (8008120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008112:	5ccb      	ldrb	r3, [r1, r3]
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40023800 	.word	0x40023800
 8008120:	08014550 	.word	0x08014550

08008124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	220f      	movs	r2, #15
 8008132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0203 	and.w	r2, r3, #3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	08db      	lsrs	r3, r3, #3
 800815e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008166:	4b07      	ldr	r3, [pc, #28]	; (8008184 <HAL_RCC_GetClockConfig+0x60>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	601a      	str	r2, [r3, #0]
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800
 8008184:	40023c00 	.word	0x40023c00

08008188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10b      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d105      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d075      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081bc:	4bad      	ldr	r3, [pc, #692]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081c2:	f7fd fcd3 	bl	8005b6c <HAL_GetTick>
 80081c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081c8:	e008      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081ca:	f7fd fccf 	bl	8005b6c <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e18b      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081dc:	4ba6      	ldr	r3, [pc, #664]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f0      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	019a      	lsls	r2, r3, #6
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	071b      	lsls	r3, r3, #28
 8008200:	499d      	ldr	r1, [pc, #628]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01f      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008214:	4b98      	ldr	r3, [pc, #608]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821a:	0f1b      	lsrs	r3, r3, #28
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	019a      	lsls	r2, r3, #6
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	431a      	orrs	r2, r3
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	071b      	lsls	r3, r3, #28
 8008234:	4990      	ldr	r1, [pc, #576]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800823c:	4b8e      	ldr	r3, [pc, #568]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800823e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008242:	f023 021f 	bic.w	r2, r3, #31
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	3b01      	subs	r3, #1
 800824c:	498a      	ldr	r1, [pc, #552]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	019a      	lsls	r2, r3, #6
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	061b      	lsls	r3, r3, #24
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	071b      	lsls	r3, r3, #28
 8008274:	4980      	ldr	r1, [pc, #512]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800827c:	4b7d      	ldr	r3, [pc, #500]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800827e:	2201      	movs	r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008282:	f7fd fc73 	bl	8005b6c <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008288:	e008      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800828a:	f7fd fc6f 	bl	8005b6c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e12b      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800829c:	4b76      	ldr	r3, [pc, #472]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0f0      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d079      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082c0:	4b6e      	ldr	r3, [pc, #440]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082c6:	f7fd fc51 	bl	8005b6c <HAL_GetTick>
 80082ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082cc:	e008      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80082ce:	f7fd fc4d 	bl	8005b6c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d901      	bls.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e109      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082e0:	4b65      	ldr	r3, [pc, #404]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ec:	d0ef      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d020      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082fa:	4b5f      	ldr	r3, [pc, #380]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	0f1b      	lsrs	r3, r3, #28
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	019a      	lsls	r2, r3, #6
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	431a      	orrs	r2, r3
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	071b      	lsls	r3, r3, #28
 800831a:	4957      	ldr	r1, [pc, #348]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800831c:	4313      	orrs	r3, r2
 800831e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008322:	4b55      	ldr	r3, [pc, #340]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008328:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	3b01      	subs	r3, #1
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	4950      	ldr	r1, [pc, #320]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01e      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008348:	4b4b      	ldr	r3, [pc, #300]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834e:	0e1b      	lsrs	r3, r3, #24
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	019a      	lsls	r2, r3, #6
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	061b      	lsls	r3, r3, #24
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	071b      	lsls	r3, r3, #28
 8008368:	4943      	ldr	r1, [pc, #268]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008370:	4b41      	ldr	r3, [pc, #260]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	493e      	ldr	r1, [pc, #248]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008386:	4b3d      	ldr	r3, [pc, #244]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800838c:	f7fd fbee 	bl	8005b6c <HAL_GetTick>
 8008390:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008394:	f7fd fbea 	bl	8005b6c <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0a6      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083a6:	4b34      	ldr	r3, [pc, #208]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b2:	d1ef      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 808d 	beq.w	80084dc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	4a2b      	ldr	r2, [pc, #172]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d0:	6413      	str	r3, [r2, #64]	; 0x40
 80083d2:	4b29      	ldr	r3, [pc, #164]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083de:	4b28      	ldr	r3, [pc, #160]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a27      	ldr	r2, [pc, #156]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083ea:	f7fd fbbf 	bl	8005b6c <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083f0:	e008      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083f2:	f7fd fbbb 	bl	8005b6c <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e077      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008404:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008410:	4b19      	ldr	r3, [pc, #100]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008418:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d039      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	d032      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008436:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008438:	4b12      	ldr	r3, [pc, #72]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800843a:	2201      	movs	r2, #1
 800843c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800843e:	4b11      	ldr	r3, [pc, #68]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008444:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b01      	cmp	r3, #1
 8008454:	d11e      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008456:	f7fd fb89 	bl	8005b6c <HAL_GetTick>
 800845a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800845c:	e014      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800845e:	f7fd fb85 	bl	8005b6c <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f241 3288 	movw	r2, #5000	; 0x1388
 800846c:	4293      	cmp	r3, r2
 800846e:	d90b      	bls.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e03f      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008474:	42470068 	.word	0x42470068
 8008478:	40023800 	.word	0x40023800
 800847c:	42470070 	.word	0x42470070
 8008480:	40007000 	.word	0x40007000
 8008484:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008488:	4b1c      	ldr	r3, [pc, #112]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800848a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0e4      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084a0:	d10d      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x336>
 80084a2:	4b16      	ldr	r3, [pc, #88]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b6:	4911      	ldr	r1, [pc, #68]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	608b      	str	r3, [r1, #8]
 80084bc:	e005      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	4a0e      	ldr	r2, [pc, #56]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084c8:	6093      	str	r3, [r2, #8]
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d6:	4909      	ldr	r1, [pc, #36]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80084ee:	4b04      	ldr	r3, [pc, #16]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	40023800 	.word	0x40023800
 8008500:	424711e0 	.word	0x424711e0

08008504 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e083      	b.n	800861e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7f5b      	ldrb	r3, [r3, #29]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d105      	bne.n	800852c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fa fa9a 	bl	8002a60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	22ca      	movs	r2, #202	; 0xca
 8008538:	625a      	str	r2, [r3, #36]	; 0x24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2253      	movs	r2, #83	; 0x53
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fb7a 	bl	8008c3c <RTC_EnterInitMode>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	22ff      	movs	r2, #255	; 0xff
 8008554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e05e      	b.n	800861e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800856e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008572:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6899      	ldr	r1, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68d2      	ldr	r2, [r2, #12]
 800859a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6919      	ldr	r1, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	041a      	lsls	r2, r3, #16
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10e      	bne.n	80085ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fb0c 	bl	8008bec <HAL_RTC_WaitForSynchro>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d008      	beq.n	80085ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	22ff      	movs	r2, #255	; 0xff
 80085e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2204      	movs	r2, #4
 80085e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e018      	b.n	800861e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	22ff      	movs	r2, #255	; 0xff
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800861c:	2300      	movs	r3, #0
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008626:	b590      	push	{r4, r7, lr}
 8008628:	b087      	sub	sp, #28
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	7f1b      	ldrb	r3, [r3, #28]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <HAL_RTC_SetTime+0x1c>
 800863e:	2302      	movs	r3, #2
 8008640:	e0aa      	b.n	8008798 <HAL_RTC_SetTime+0x172>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2202      	movs	r2, #2
 800864c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d126      	bne.n	80086a2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2200      	movs	r2, #0
 8008666:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fb11 	bl	8008c94 <RTC_ByteToBcd2>
 8008672:	4603      	mov	r3, r0
 8008674:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fb0a 	bl	8008c94 <RTC_ByteToBcd2>
 8008680:	4603      	mov	r3, r0
 8008682:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008684:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fb02 	bl	8008c94 <RTC_ByteToBcd2>
 8008690:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008692:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	78db      	ldrb	r3, [r3, #3]
 800869a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e018      	b.n	80086d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086c2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80086c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	78db      	ldrb	r3, [r3, #3]
 80086ce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	22ca      	movs	r2, #202	; 0xca
 80086da:	625a      	str	r2, [r3, #36]	; 0x24
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2253      	movs	r2, #83	; 0x53
 80086e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 faa9 	bl	8008c3c <RTC_EnterInitMode>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2204      	movs	r2, #4
 80086fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e047      	b.n	8008798 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008712:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008716:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008726:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6899      	ldr	r1, [r3, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	431a      	orrs	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800874e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d111      	bne.n	8008782 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fa44 	bl	8008bec <HAL_RTC_WaitForSynchro>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2204      	movs	r2, #4
 8008776:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e00a      	b.n	8008798 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	22ff      	movs	r2, #255	; 0xff
 8008788:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008796:	2300      	movs	r3, #0
  }
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	bd90      	pop	{r4, r7, pc}

080087a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	7f1b      	ldrb	r3, [r3, #28]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_RTC_SetDate+0x1c>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e094      	b.n	80088e6 <HAL_RTC_SetDate+0x146>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2202      	movs	r2, #2
 80087c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10e      	bne.n	80087ec <HAL_RTC_SetDate+0x4c>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d008      	beq.n	80087ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	f023 0310 	bic.w	r3, r3, #16
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	330a      	adds	r3, #10
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11c      	bne.n	800882c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	78db      	ldrb	r3, [r3, #3]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fa4c 	bl	8008c94 <RTC_ByteToBcd2>
 80087fc:	4603      	mov	r3, r0
 80087fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fa45 	bl	8008c94 <RTC_ByteToBcd2>
 800880a:	4603      	mov	r3, r0
 800880c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800880e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	789b      	ldrb	r3, [r3, #2]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fa3d 	bl	8008c94 <RTC_ByteToBcd2>
 800881a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800881c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e00e      	b.n	800884a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	78db      	ldrb	r3, [r3, #3]
 8008830:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008838:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800883e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	22ca      	movs	r2, #202	; 0xca
 8008850:	625a      	str	r2, [r3, #36]	; 0x24
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2253      	movs	r2, #83	; 0x53
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f9ee 	bl	8008c3c <RTC_EnterInitMode>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	22ff      	movs	r2, #255	; 0xff
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2204      	movs	r2, #4
 8008872:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e033      	b.n	80088e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800888c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800889c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d111      	bne.n	80088d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f99d 	bl	8008bec <HAL_RTC_WaitForSynchro>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2204      	movs	r2, #4
 80088c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e00a      	b.n	80088e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd90      	pop	{r4, r7, pc}
	...

080088f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088f0:	b590      	push	{r4, r7, lr}
 80088f2:	b089      	sub	sp, #36	; 0x24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	2300      	movs	r3, #0
 8008902:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008904:	4b93      	ldr	r3, [pc, #588]	; (8008b54 <HAL_RTC_SetAlarm_IT+0x264>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a93      	ldr	r2, [pc, #588]	; (8008b58 <HAL_RTC_SetAlarm_IT+0x268>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	0adb      	lsrs	r3, r3, #11
 8008910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008914:	fb02 f303 	mul.w	r3, r2, r3
 8008918:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	7f1b      	ldrb	r3, [r3, #28]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_RTC_SetAlarm_IT+0x36>
 8008922:	2302      	movs	r3, #2
 8008924:	e111      	b.n	8008b4a <HAL_RTC_SetAlarm_IT+0x25a>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2202      	movs	r2, #2
 8008930:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d137      	bne.n	80089a8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f99f 	bl	8008c94 <RTC_ByteToBcd2>
 8008956:	4603      	mov	r3, r0
 8008958:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f998 	bl	8008c94 <RTC_ByteToBcd2>
 8008964:	4603      	mov	r3, r0
 8008966:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008968:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	789b      	ldrb	r3, [r3, #2]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 f990 	bl	8008c94 <RTC_ByteToBcd2>
 8008974:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008976:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	78db      	ldrb	r3, [r3, #3]
 800897e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008980:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f982 	bl	8008c94 <RTC_ByteToBcd2>
 8008990:	4603      	mov	r3, r0
 8008992:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008994:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800899c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e023      	b.n	80089f0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80089c8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80089ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	78db      	ldrb	r3, [r3, #3]
 80089d4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80089e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80089e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80089ec:	4313      	orrs	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	22ca      	movs	r2, #202	; 0xca
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2253      	movs	r2, #83	; 0x53
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a14:	d141      	bne.n	8008a9a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a24:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008a36:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1e5a      	subs	r2, r3, #1
 8008a3c:	617a      	str	r2, [r7, #20]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	22ff      	movs	r2, #255	; 0xff
 8008a48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e077      	b.n	8008b4a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0e7      	beq.n	8008a38 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a86:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	e040      	b.n	8008b1c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008aa8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008aba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	1e5a      	subs	r2, r3, #1
 8008ac0:	617a      	str	r2, [r7, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10b      	bne.n	8008ade <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	22ff      	movs	r2, #255	; 0xff
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e035      	b.n	8008b4a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0e7      	beq.n	8008abc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b0a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b1a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a0e      	ldr	r2, [pc, #56]	; (8008b5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b26:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008b28:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4a0b      	ldr	r2, [pc, #44]	; (8008b5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b32:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	22ff      	movs	r2, #255	; 0xff
 8008b3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd90      	pop	{r4, r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000000 	.word	0x20000000
 8008b58:	10624dd3 	.word	0x10624dd3
 8008b5c:	40013c00 	.word	0x40013c00

08008b60 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d012      	beq.n	8008b9c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fc fd71 	bl	800566c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008b9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d012      	beq.n	8008bd0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00b      	beq.n	8008bd0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f9a1 	bl	8008f00 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008bce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008bd6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	775a      	strb	r2, [r3, #29]
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40013c00 	.word	0x40013c00

08008bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c08:	f7fc ffb0 	bl	8005b6c <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c0e:	e009      	b.n	8008c24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c10:	f7fc ffac 	bl	8005b6c <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c1e:	d901      	bls.n	8008c24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e007      	b.n	8008c34 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0ee      	beq.n	8008c10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d119      	bne.n	8008c8a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c60:	f7fc ff84 	bl	8005b6c <HAL_GetTick>
 8008c64:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c66:	e009      	b.n	8008c7c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c68:	f7fc ff80 	bl	8005b6c <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c76:	d901      	bls.n	8008c7c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e007      	b.n	8008c8c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0ee      	beq.n	8008c68 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008ca2:	e005      	b.n	8008cb0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	3b0a      	subs	r3, #10
 8008cae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b09      	cmp	r3, #9
 8008cb4:	d8f6      	bhi.n	8008ca4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	b2db      	uxtb	r3, r3
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	7f1b      	ldrb	r3, [r3, #28]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e0a6      	b.n	8008e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	22ca      	movs	r2, #202	; 0xca
 8008cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2253      	movs	r2, #83	; 0x53
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d022      	beq.n	8008d58 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008d12:	4b4c      	ldr	r3, [pc, #304]	; (8008e44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a4c      	ldr	r2, [pc, #304]	; (8008e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008d18:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1c:	0adb      	lsrs	r3, r3, #11
 8008d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d22:	fb02 f303 	mul.w	r3, r2, r3
 8008d26:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	1e5a      	subs	r2, r3, #1
 8008d2c:	617a      	str	r2, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e075      	b.n	8008e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e7      	bne.n	8008d28 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d66:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008d68:	4b36      	ldr	r3, [pc, #216]	; (8008e44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a36      	ldr	r2, [pc, #216]	; (8008e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	0adb      	lsrs	r3, r3, #11
 8008d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d78:	fb02 f303 	mul.w	r3, r2, r3
 8008d7c:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	1e5a      	subs	r2, r3, #1
 8008d82:	617a      	str	r2, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	22ff      	movs	r2, #255	; 0xff
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2203      	movs	r2, #3
 8008d94:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e04a      	b.n	8008e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0e7      	beq.n	8008d7e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0207 	bic.w	r2, r2, #7
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6899      	ldr	r1, [r3, #8]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a1c      	ldr	r2, [pc, #112]	; (8008e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008de0:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8008de2:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	4a19      	ldr	r2, [pc, #100]	; (8008e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008dec:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e0e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000000 	.word	0x20000000
 8008e48:	10624dd3 	.word	0x10624dd3
 8008e4c:	40013c00 	.word	0x40013c00

08008e50 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7f1b      	ldrb	r3, [r3, #28]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e047      	b.n	8008ef8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	22ca      	movs	r2, #202	; 0xca
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2253      	movs	r2, #83	; 0x53
 8008e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e92:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ea2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ea4:	f7fc fe62 	bl	8005b6c <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008eaa:	e013      	b.n	8008ed4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eac:	f7fc fe5e 	bl	8005b6c <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eba:	d90b      	bls.n	8008ed4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	22ff      	movs	r2, #255	; 0xff
 8008ec2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e011      	b.n	8008ef8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0e4      	beq.n	8008eac <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	22ff      	movs	r2, #255	; 0xff
 8008ee8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07b      	b.n	800901e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d108      	bne.n	8008f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f36:	d009      	beq.n	8008f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	61da      	str	r2, [r3, #28]
 8008f3e:	e005      	b.n	8008f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f9 fdac 	bl	8002ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd0:	ea42 0103 	orr.w	r1, r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	f003 0104 	and.w	r1, r3, #4
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	f003 0210 	and.w	r2, r3, #16
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800900c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b088      	sub	sp, #32
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_SPI_Transmit+0x22>
 8009044:	2302      	movs	r3, #2
 8009046:	e126      	b.n	8009296 <HAL_SPI_Transmit+0x270>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009050:	f7fc fd8c 	bl	8005b6c <HAL_GetTick>
 8009054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b01      	cmp	r3, #1
 8009064:	d002      	beq.n	800906c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009066:	2302      	movs	r3, #2
 8009068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800906a:	e10b      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_SPI_Transmit+0x52>
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800907c:	e102      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2203      	movs	r2, #3
 8009082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c4:	d10f      	bne.n	80090e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d007      	beq.n	8009104 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910c:	d14b      	bne.n	80091a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_SPI_Transmit+0xf6>
 8009116:	8afb      	ldrh	r3, [r7, #22]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d13e      	bne.n	800919a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009140:	e02b      	b.n	800919a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b02      	cmp	r3, #2
 800914e:	d112      	bne.n	8009176 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	86da      	strh	r2, [r3, #54]	; 0x36
 8009174:	e011      	b.n	800919a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009176:	f7fc fcf9 	bl	8005b6c <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d803      	bhi.n	800918e <HAL_SPI_Transmit+0x168>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Transmit+0x16e>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009198:	e074      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1ce      	bne.n	8009142 <HAL_SPI_Transmit+0x11c>
 80091a4:	e04c      	b.n	8009240 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_SPI_Transmit+0x18e>
 80091ae:	8afb      	ldrh	r3, [r7, #22]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d140      	bne.n	8009236 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	330c      	adds	r3, #12
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091da:	e02c      	b.n	8009236 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d113      	bne.n	8009212 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009210:	e011      	b.n	8009236 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009212:	f7fc fcab 	bl	8005b6c <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d803      	bhi.n	800922a <HAL_SPI_Transmit+0x204>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009228:	d102      	bne.n	8009230 <HAL_SPI_Transmit+0x20a>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009234:	e026      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1cd      	bne.n	80091dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fbcb 	bl	80099e0 <SPI_EndRxTxTransaction>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2220      	movs	r2, #32
 8009254:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800925e:	2300      	movs	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e000      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009294:	7ffb      	ldrb	r3, [r7, #31]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af02      	add	r7, sp, #8
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ba:	d112      	bne.n	80092e2 <HAL_SPI_Receive+0x44>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10e      	bne.n	80092e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2204      	movs	r2, #4
 80092c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f8f1 	bl	80094c0 <HAL_SPI_TransmitReceive>
 80092de:	4603      	mov	r3, r0
 80092e0:	e0ea      	b.n	80094b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_SPI_Receive+0x52>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0e3      	b.n	80094b8 <HAL_SPI_Receive+0x21a>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f8:	f7fc fc38 	bl	8005b6c <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d002      	beq.n	8009310 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800930a:	2302      	movs	r3, #2
 800930c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800930e:	e0ca      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_SPI_Receive+0x7e>
 8009316:	88fb      	ldrh	r3, [r7, #6]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009320:	e0c1      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2204      	movs	r2, #4
 8009326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009368:	d10f      	bne.n	800938a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009394:	2b40      	cmp	r3, #64	; 0x40
 8009396:	d007      	beq.n	80093a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d162      	bne.n	8009476 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093b0:	e02e      	b.n	8009410 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d115      	bne.n	80093ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f103 020c 	add.w	r2, r3, #12
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ea:	e011      	b.n	8009410 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093ec:	f7fc fbbe 	bl	8005b6c <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d803      	bhi.n	8009404 <HAL_SPI_Receive+0x166>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009402:	d102      	bne.n	800940a <HAL_SPI_Receive+0x16c>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d102      	bne.n	8009410 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800940e:	e04a      	b.n	80094a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1cb      	bne.n	80093b2 <HAL_SPI_Receive+0x114>
 800941a:	e031      	b.n	8009480 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b01      	cmp	r3, #1
 8009428:	d113      	bne.n	8009452 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009434:	b292      	uxth	r2, r2
 8009436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	1c9a      	adds	r2, r3, #2
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009450:	e011      	b.n	8009476 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009452:	f7fc fb8b 	bl	8005b6c <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d803      	bhi.n	800946a <HAL_SPI_Receive+0x1cc>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d102      	bne.n	8009470 <HAL_SPI_Receive+0x1d2>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009474:	e017      	b.n	80094a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1cd      	bne.n	800941c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fa45 	bl	8009914 <SPI_EndRxTransaction>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
 80094a2:	e000      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

error :
 80094a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08c      	sub	sp, #48	; 0x30
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80094ce:	2301      	movs	r3, #1
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x26>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e18a      	b.n	80097fc <HAL_SPI_TransmitReceive+0x33c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094ee:	f7fc fb3d 	bl	8005b6c <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800950c:	2b01      	cmp	r3, #1
 800950e:	d00f      	beq.n	8009530 <HAL_SPI_TransmitReceive+0x70>
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009516:	d107      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x68>
 8009520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009524:	2b04      	cmp	r3, #4
 8009526:	d003      	beq.n	8009530 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009528:	2302      	movs	r3, #2
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800952e:	e15b      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <HAL_SPI_TransmitReceive+0x82>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_SPI_TransmitReceive+0x82>
 800953c:	887b      	ldrh	r3, [r7, #2]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009548:	e14e      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b04      	cmp	r3, #4
 8009554:	d003      	beq.n	800955e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2205      	movs	r2, #5
 800955a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	887a      	ldrh	r2, [r7, #2]
 8009574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	887a      	ldrh	r2, [r7, #2]
 8009580:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	887a      	ldrh	r2, [r7, #2]
 8009586:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d007      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ba:	d178      	bne.n	80096ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_SPI_TransmitReceive+0x10a>
 80095c4:	8b7b      	ldrh	r3, [r7, #26]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d166      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	881a      	ldrh	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	1c9a      	adds	r2, r3, #2
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ee:	e053      	b.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d11b      	bne.n	8009636 <HAL_SPI_TransmitReceive+0x176>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d016      	beq.n	8009636 <HAL_SPI_TransmitReceive+0x176>
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d113      	bne.n	8009636 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	881a      	ldrh	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	1c9a      	adds	r2, r3, #2
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009628:	b29b      	uxth	r3, r3
 800962a:	3b01      	subs	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d119      	bne.n	8009678 <HAL_SPI_TransmitReceive+0x1b8>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d014      	beq.n	8009678 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	b292      	uxth	r2, r2
 800965a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	1c9a      	adds	r2, r3, #2
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009674:	2301      	movs	r3, #1
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009678:	f7fc fa78 	bl	8005b6c <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009684:	429a      	cmp	r2, r3
 8009686:	d807      	bhi.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d003      	beq.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009696:	e0a7      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1a6      	bne.n	80095f0 <HAL_SPI_TransmitReceive+0x130>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1a1      	bne.n	80095f0 <HAL_SPI_TransmitReceive+0x130>
 80096ac:	e07c      	b.n	80097a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <HAL_SPI_TransmitReceive+0x1fc>
 80096b6:	8b7b      	ldrh	r3, [r7, #26]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d16b      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e2:	e057      	b.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d11c      	bne.n	800972c <HAL_SPI_TransmitReceive+0x26c>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d017      	beq.n	800972c <HAL_SPI_TransmitReceive+0x26c>
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d114      	bne.n	800972c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	330c      	adds	r3, #12
 800970c:	7812      	ldrb	r2, [r2, #0]
 800970e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b01      	cmp	r3, #1
 8009738:	d119      	bne.n	800976e <HAL_SPI_TransmitReceive+0x2ae>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d014      	beq.n	800976e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800976a:	2301      	movs	r3, #1
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800976e:	f7fc f9fd 	bl	8005b6c <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800977a:	429a      	cmp	r2, r3
 800977c:	d803      	bhi.n	8009786 <HAL_SPI_TransmitReceive+0x2c6>
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d102      	bne.n	800978c <HAL_SPI_TransmitReceive+0x2cc>
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009792:	e029      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009798:	b29b      	uxth	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1a2      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x224>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d19d      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f917 	bl	80099e0 <SPI_EndRxTxTransaction>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80097c4:	e010      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	e000      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80097e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3730      	adds	r7, #48	; 0x30
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009814:	f7fc f9aa 	bl	8005b6c <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4413      	add	r3, r2
 8009822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009824:	f7fc f9a2 	bl	8005b6c <HAL_GetTick>
 8009828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800982a:	4b39      	ldr	r3, [pc, #228]	; (8009910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	015b      	lsls	r3, r3, #5
 8009830:	0d1b      	lsrs	r3, r3, #20
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800983a:	e054      	b.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d050      	beq.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009844:	f7fc f992 	bl	8005b6c <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	429a      	cmp	r2, r3
 8009852:	d902      	bls.n	800985a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d13d      	bne.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009872:	d111      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987c:	d004      	beq.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009886:	d107      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a0:	d10f      	bne.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e017      	b.n	8009906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4013      	ands	r3, r2
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	bf0c      	ite	eq
 80098f6:	2301      	moveq	r3, #1
 80098f8:	2300      	movne	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	429a      	cmp	r2, r3
 8009902:	d19b      	bne.n	800983c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000000 	.word	0x20000000

08009914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009928:	d111      	bne.n	800994e <SPI_EndRxTransaction+0x3a>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009932:	d004      	beq.n	800993e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993c:	d107      	bne.n	800994e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009956:	d12a      	bne.n	80099ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009960:	d012      	beq.n	8009988 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	2180      	movs	r1, #128	; 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ff49 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d02d      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	f043 0220 	orr.w	r2, r3, #32
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e026      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	2101      	movs	r1, #1
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff ff36 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01a      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e013      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2101      	movs	r1, #1
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f7ff ff23 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	f043 0220 	orr.w	r2, r3, #32
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e000      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <SPI_EndRxTxTransaction+0x7c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <SPI_EndRxTxTransaction+0x80>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	0d5b      	lsrs	r3, r3, #21
 80099f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0a:	d112      	bne.n	8009a32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2200      	movs	r2, #0
 8009a14:	2180      	movs	r1, #128	; 0x80
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fef4 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f043 0220 	orr.w	r2, r3, #32
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e00f      	b.n	8009a52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d0f2      	beq.n	8009a32 <SPI_EndRxTxTransaction+0x52>
 8009a4c:	e000      	b.n	8009a50 <SPI_EndRxTxTransaction+0x70>
        break;
 8009a4e:	bf00      	nop
  }

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	165e9f81 	.word	0x165e9f81

08009a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e041      	b.n	8009afa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f839 	bl	8009b02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f000 faea 	bl	800a07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b0a:	bf00      	nop
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
	...

08009b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d001      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e04e      	b.n	8009bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0201 	orr.w	r2, r2, #1
 8009b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a23      	ldr	r2, [pc, #140]	; (8009bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d022      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5a:	d01d      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a1f      	ldr	r2, [pc, #124]	; (8009be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d018      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a1e      	ldr	r2, [pc, #120]	; (8009be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d013      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1c      	ldr	r2, [pc, #112]	; (8009be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d00e      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <HAL_TIM_Base_Start_IT+0xd4>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d009      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a19      	ldr	r2, [pc, #100]	; (8009bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x80>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a18      	ldr	r2, [pc, #96]	; (8009bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d111      	bne.n	8009bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d010      	beq.n	8009bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0201 	orr.w	r2, r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bba:	e007      	b.n	8009bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40000400 	.word	0x40000400
 8009be4:	40000800 	.word	0x40000800
 8009be8:	40000c00 	.word	0x40000c00
 8009bec:	40010400 	.word	0x40010400
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	40001800 	.word	0x40001800

08009bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e041      	b.n	8009c8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f9 f806 	bl	8002c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f000 fa20 	bl	800a07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d122      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d11b      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f06f 0202 	mvn.w	r2, #2
 8009cc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f9b1 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009cde:	e005      	b.n	8009cec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f9a3 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f9b4 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b04      	cmp	r3, #4
 8009cfe:	d122      	bne.n	8009d46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d11b      	bne.n	8009d46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0204 	mvn.w	r2, #4
 8009d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f987 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009d32:	e005      	b.n	8009d40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f979 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f98a 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d122      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b08      	cmp	r3, #8
 8009d60:	d11b      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f06f 0208 	mvn.w	r2, #8
 8009d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f003 0303 	and.w	r3, r3, #3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f95d 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009d86:	e005      	b.n	8009d94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f94f 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f960 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d122      	bne.n	8009dee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0310 	and.w	r3, r3, #16
 8009db2:	2b10      	cmp	r3, #16
 8009db4:	d11b      	bne.n	8009dee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f06f 0210 	mvn.w	r2, #16
 8009dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f933 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009dda:	e005      	b.n	8009de8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f925 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f936 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d10e      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d107      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f06f 0201 	mvn.w	r2, #1
 8009e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7f8 fcc3 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e24:	2b80      	cmp	r3, #128	; 0x80
 8009e26:	d10e      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e32:	2b80      	cmp	r3, #128	; 0x80
 8009e34:	d107      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fbf1 	bl	800a628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e50:	2b40      	cmp	r3, #64	; 0x40
 8009e52:	d10e      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5e:	2b40      	cmp	r3, #64	; 0x40
 8009e60:	d107      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8fb 	bl	800a068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d10e      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d107      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f06f 0220 	mvn.w	r2, #32
 8009e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbbb 	bl	800a614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e0ae      	b.n	800a024 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b0c      	cmp	r3, #12
 8009ed2:	f200 809f 	bhi.w	800a014 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009f11 	.word	0x08009f11
 8009ee0:	0800a015 	.word	0x0800a015
 8009ee4:	0800a015 	.word	0x0800a015
 8009ee8:	0800a015 	.word	0x0800a015
 8009eec:	08009f51 	.word	0x08009f51
 8009ef0:	0800a015 	.word	0x0800a015
 8009ef4:	0800a015 	.word	0x0800a015
 8009ef8:	0800a015 	.word	0x0800a015
 8009efc:	08009f93 	.word	0x08009f93
 8009f00:	0800a015 	.word	0x0800a015
 8009f04:	0800a015 	.word	0x0800a015
 8009f08:	0800a015 	.word	0x0800a015
 8009f0c:	08009fd3 	.word	0x08009fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f950 	bl	800a1bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699a      	ldr	r2, [r3, #24]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0208 	orr.w	r2, r2, #8
 8009f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699a      	ldr	r2, [r3, #24]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0204 	bic.w	r2, r2, #4
 8009f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6999      	ldr	r1, [r3, #24]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	691a      	ldr	r2, [r3, #16]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	619a      	str	r2, [r3, #24]
      break;
 8009f4e:	e064      	b.n	800a01a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f9a0 	bl	800a29c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6999      	ldr	r1, [r3, #24]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	021a      	lsls	r2, r3, #8
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	619a      	str	r2, [r3, #24]
      break;
 8009f90:	e043      	b.n	800a01a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f9f5 	bl	800a388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f042 0208 	orr.w	r2, r2, #8
 8009fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0204 	bic.w	r2, r2, #4
 8009fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69d9      	ldr	r1, [r3, #28]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	61da      	str	r2, [r3, #28]
      break;
 8009fd0:	e023      	b.n	800a01a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fa49 	bl	800a470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69da      	ldr	r2, [r3, #28]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69da      	ldr	r2, [r3, #28]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69d9      	ldr	r1, [r3, #28]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	021a      	lsls	r2, r3, #8
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	61da      	str	r2, [r3, #28]
      break;
 800a012:	e002      	b.n	800a01a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75fb      	strb	r3, [r7, #23]
      break;
 800a018:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a40      	ldr	r2, [pc, #256]	; (800a190 <TIM_Base_SetConfig+0x114>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d013      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09a:	d00f      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a3d      	ldr	r2, [pc, #244]	; (800a194 <TIM_Base_SetConfig+0x118>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a3c      	ldr	r2, [pc, #240]	; (800a198 <TIM_Base_SetConfig+0x11c>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a3b      	ldr	r2, [pc, #236]	; (800a19c <TIM_Base_SetConfig+0x120>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a3a      	ldr	r2, [pc, #232]	; (800a1a0 <TIM_Base_SetConfig+0x124>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d108      	bne.n	800a0ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a2f      	ldr	r2, [pc, #188]	; (800a190 <TIM_Base_SetConfig+0x114>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d02b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0dc:	d027      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a2c      	ldr	r2, [pc, #176]	; (800a194 <TIM_Base_SetConfig+0x118>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d023      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a2b      	ldr	r2, [pc, #172]	; (800a198 <TIM_Base_SetConfig+0x11c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d01f      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <TIM_Base_SetConfig+0x120>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d01b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <TIM_Base_SetConfig+0x124>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d017      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a28      	ldr	r2, [pc, #160]	; (800a1a4 <TIM_Base_SetConfig+0x128>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d013      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a27      	ldr	r2, [pc, #156]	; (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00f      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a26      	ldr	r2, [pc, #152]	; (800a1ac <TIM_Base_SetConfig+0x130>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a25      	ldr	r2, [pc, #148]	; (800a1b0 <TIM_Base_SetConfig+0x134>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d007      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a24      	ldr	r2, [pc, #144]	; (800a1b4 <TIM_Base_SetConfig+0x138>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d003      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a23      	ldr	r2, [pc, #140]	; (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d108      	bne.n	800a140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <TIM_Base_SetConfig+0x114>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d003      	beq.n	800a174 <TIM_Base_SetConfig+0xf8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <TIM_Base_SetConfig+0x124>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d103      	bne.n	800a17c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	615a      	str	r2, [r3, #20]
}
 800a182:	bf00      	nop
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	40010000 	.word	0x40010000
 800a194:	40000400 	.word	0x40000400
 800a198:	40000800 	.word	0x40000800
 800a19c:	40000c00 	.word	0x40000c00
 800a1a0:	40010400 	.word	0x40010400
 800a1a4:	40014000 	.word	0x40014000
 800a1a8:	40014400 	.word	0x40014400
 800a1ac:	40014800 	.word	0x40014800
 800a1b0:	40001800 	.word	0x40001800
 800a1b4:	40001c00 	.word	0x40001c00
 800a1b8:	40002000 	.word	0x40002000

0800a1bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	f023 0201 	bic.w	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f023 0302 	bic.w	r3, r3, #2
 800a204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a20      	ldr	r2, [pc, #128]	; (800a294 <TIM_OC1_SetConfig+0xd8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d003      	beq.n	800a220 <TIM_OC1_SetConfig+0x64>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <TIM_OC1_SetConfig+0xdc>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10c      	bne.n	800a23a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0308 	bic.w	r3, r3, #8
 800a226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4313      	orrs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f023 0304 	bic.w	r3, r3, #4
 800a238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a15      	ldr	r2, [pc, #84]	; (800a294 <TIM_OC1_SetConfig+0xd8>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_OC1_SetConfig+0x8e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a14      	ldr	r2, [pc, #80]	; (800a298 <TIM_OC1_SetConfig+0xdc>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d111      	bne.n	800a26e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	621a      	str	r2, [r3, #32]
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40010000 	.word	0x40010000
 800a298:	40010400 	.word	0x40010400

0800a29c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f023 0210 	bic.w	r2, r3, #16
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f023 0320 	bic.w	r3, r3, #32
 800a2e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a22      	ldr	r2, [pc, #136]	; (800a380 <TIM_OC2_SetConfig+0xe4>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d003      	beq.n	800a304 <TIM_OC2_SetConfig+0x68>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a21      	ldr	r2, [pc, #132]	; (800a384 <TIM_OC2_SetConfig+0xe8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d10d      	bne.n	800a320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a31e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a17      	ldr	r2, [pc, #92]	; (800a380 <TIM_OC2_SetConfig+0xe4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d003      	beq.n	800a330 <TIM_OC2_SetConfig+0x94>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a16      	ldr	r2, [pc, #88]	; (800a384 <TIM_OC2_SetConfig+0xe8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d113      	bne.n	800a358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a33e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	4313      	orrs	r3, r2
 800a356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	40010000 	.word	0x40010000
 800a384:	40010400 	.word	0x40010400

0800a388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0303 	bic.w	r3, r3, #3
 800a3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a21      	ldr	r2, [pc, #132]	; (800a468 <TIM_OC3_SetConfig+0xe0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d003      	beq.n	800a3ee <TIM_OC3_SetConfig+0x66>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a20      	ldr	r2, [pc, #128]	; (800a46c <TIM_OC3_SetConfig+0xe4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d10d      	bne.n	800a40a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a16      	ldr	r2, [pc, #88]	; (800a468 <TIM_OC3_SetConfig+0xe0>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d003      	beq.n	800a41a <TIM_OC3_SetConfig+0x92>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a15      	ldr	r2, [pc, #84]	; (800a46c <TIM_OC3_SetConfig+0xe4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d113      	bne.n	800a442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	621a      	str	r2, [r3, #32]
}
 800a45c:	bf00      	nop
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	40010000 	.word	0x40010000
 800a46c:	40010400 	.word	0x40010400

0800a470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	031b      	lsls	r3, r3, #12
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a12      	ldr	r2, [pc, #72]	; (800a514 <TIM_OC4_SetConfig+0xa4>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_OC4_SetConfig+0x68>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a11      	ldr	r2, [pc, #68]	; (800a518 <TIM_OC4_SetConfig+0xa8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d109      	bne.n	800a4ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	019b      	lsls	r3, r3, #6
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	621a      	str	r2, [r3, #32]
}
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	40010000 	.word	0x40010000
 800a518:	40010400 	.word	0x40010400

0800a51c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a530:	2302      	movs	r3, #2
 800a532:	e05a      	b.n	800a5ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a55a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a21      	ldr	r2, [pc, #132]	; (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d022      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a580:	d01d      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a1d      	ldr	r2, [pc, #116]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d018      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a1b      	ldr	r2, [pc, #108]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d013      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00e      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a18      	ldr	r2, [pc, #96]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d009      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a17      	ldr	r2, [pc, #92]	; (800a60c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d004      	beq.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a15      	ldr	r2, [pc, #84]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d10c      	bne.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40010400 	.word	0x40010400
 800a60c:	40014000 	.word	0x40014000
 800a610:	40001800 	.word	0x40001800

0800a614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e03f      	b.n	800a6ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7f8 fb3c 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2224      	movs	r2, #36	; 0x24
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a67e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9cb 	bl	800aa1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695a      	ldr	r2, [r3, #20]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b08a      	sub	sp, #40	; 0x28
 800a6da:	af02      	add	r7, sp, #8
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b20      	cmp	r3, #32
 800a6f4:	d17c      	bne.n	800a7f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <HAL_UART_Transmit+0x2c>
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e075      	b.n	800a7f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d101      	bne.n	800a714 <HAL_UART_Transmit+0x3e>
 800a710:	2302      	movs	r3, #2
 800a712:	e06e      	b.n	800a7f2 <HAL_UART_Transmit+0x11c>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2221      	movs	r2, #33	; 0x21
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a72a:	f7fb fa1f 	bl	8005b6c <HAL_GetTick>
 800a72e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	88fa      	ldrh	r2, [r7, #6]
 800a734:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a744:	d108      	bne.n	800a758 <HAL_UART_Transmit+0x82>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	61bb      	str	r3, [r7, #24]
 800a756:	e003      	b.n	800a760 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a768:	e02a      	b.n	800a7c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2200      	movs	r2, #0
 800a772:	2180      	movs	r1, #128	; 0x80
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f8e2 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e036      	b.n	800a7f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	3302      	adds	r3, #2
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	e007      	b.n	800a7b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	781a      	ldrb	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1cf      	bne.n	800a76a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2140      	movs	r1, #64	; 0x40
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 f8b2 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e006      	b.n	800a7f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e000      	b.n	800a7f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a7f0:	2302      	movs	r3, #2
  }
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3720      	adds	r7, #32
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b08a      	sub	sp, #40	; 0x28
 800a7fe:	af02      	add	r7, sp, #8
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	603b      	str	r3, [r7, #0]
 800a806:	4613      	mov	r3, r2
 800a808:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b20      	cmp	r3, #32
 800a818:	f040 808c 	bne.w	800a934 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <HAL_UART_Receive+0x2e>
 800a822:	88fb      	ldrh	r3, [r7, #6]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e084      	b.n	800a936 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_UART_Receive+0x40>
 800a836:	2302      	movs	r3, #2
 800a838:	e07d      	b.n	800a936 <HAL_UART_Receive+0x13c>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2222      	movs	r2, #34	; 0x22
 800a84c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a856:	f7fb f989 	bl	8005b6c <HAL_GetTick>
 800a85a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	88fa      	ldrh	r2, [r7, #6]
 800a860:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a870:	d108      	bne.n	800a884 <HAL_UART_Receive+0x8a>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d104      	bne.n	800a884 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	61bb      	str	r3, [r7, #24]
 800a882:	e003      	b.n	800a88c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a894:	e043      	b.n	800a91e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2200      	movs	r2, #0
 800a89e:	2120      	movs	r1, #32
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 f84c 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e042      	b.n	800a936 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10c      	bne.n	800a8d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	e01f      	b.n	800a910 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d8:	d007      	beq.n	800a8ea <HAL_UART_Receive+0xf0>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <HAL_UART_Receive+0xfe>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	701a      	strb	r2, [r3, #0]
 800a8f6:	e008      	b.n	800a90a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a904:	b2da      	uxtb	r2, r3
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	3301      	adds	r3, #1
 800a90e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a922:	b29b      	uxth	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1b6      	bne.n	800a896 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	e000      	b.n	800a936 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a934:	2302      	movs	r3, #2
  }
}
 800a936:	4618      	mov	r0, r3
 800a938:	3720      	adds	r7, #32
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b090      	sub	sp, #64	; 0x40
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	4613      	mov	r3, r2
 800a94c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a94e:	e050      	b.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d04c      	beq.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d007      	beq.n	800a96e <UART_WaitOnFlagUntilTimeout+0x30>
 800a95e:	f7fb f905 	bl	8005b6c <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d241      	bcs.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	330c      	adds	r3, #12
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	330c      	adds	r3, #12
 800a98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a98e:	637a      	str	r2, [r7, #52]	; 0x34
 800a990:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e5      	bne.n	800a96e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3314      	adds	r3, #20
 800a9a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f023 0301 	bic.w	r3, r3, #1
 800a9b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3314      	adds	r3, #20
 800a9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9c2:	623a      	str	r2, [r7, #32]
 800a9c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	69f9      	ldr	r1, [r7, #28]
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e5      	bne.n	800a9a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e00f      	b.n	800aa12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	bf0c      	ite	eq
 800aa02:	2301      	moveq	r3, #1
 800aa04:	2300      	movne	r3, #0
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	461a      	mov	r2, r3
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d09f      	beq.n	800a950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3740      	adds	r7, #64	; 0x40
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	b09f      	sub	sp, #124	; 0x7c
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa32:	68d9      	ldr	r1, [r3, #12]
 800aa34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	ea40 0301 	orr.w	r3, r0, r1
 800aa3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	431a      	orrs	r2, r3
 800aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800aa56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aa60:	f021 010c 	bic.w	r1, r1, #12
 800aa64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa6a:	430b      	orrs	r3, r1
 800aa6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7a:	6999      	ldr	r1, [r3, #24]
 800aa7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	ea40 0301 	orr.w	r3, r0, r1
 800aa84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	4bc5      	ldr	r3, [pc, #788]	; (800ada0 <UART_SetConfig+0x384>)
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d004      	beq.n	800aa9a <UART_SetConfig+0x7e>
 800aa90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	4bc3      	ldr	r3, [pc, #780]	; (800ada4 <UART_SetConfig+0x388>)
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d103      	bne.n	800aaa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa9a:	f7fd fb2f 	bl	80080fc <HAL_RCC_GetPCLK2Freq>
 800aa9e:	6778      	str	r0, [r7, #116]	; 0x74
 800aaa0:	e002      	b.n	800aaa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaa2:	f7fd fb17 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 800aaa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab0:	f040 80b6 	bne.w	800ac20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab6:	461c      	mov	r4, r3
 800aab8:	f04f 0500 	mov.w	r5, #0
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	1891      	adds	r1, r2, r2
 800aac2:	6439      	str	r1, [r7, #64]	; 0x40
 800aac4:	415b      	adcs	r3, r3
 800aac6:	647b      	str	r3, [r7, #68]	; 0x44
 800aac8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aacc:	1912      	adds	r2, r2, r4
 800aace:	eb45 0303 	adc.w	r3, r5, r3
 800aad2:	f04f 0000 	mov.w	r0, #0
 800aad6:	f04f 0100 	mov.w	r1, #0
 800aada:	00d9      	lsls	r1, r3, #3
 800aadc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aae0:	00d0      	lsls	r0, r2, #3
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	1911      	adds	r1, r2, r4
 800aae8:	6639      	str	r1, [r7, #96]	; 0x60
 800aaea:	416b      	adcs	r3, r5
 800aaec:	667b      	str	r3, [r7, #100]	; 0x64
 800aaee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f04f 0300 	mov.w	r3, #0
 800aaf8:	1891      	adds	r1, r2, r2
 800aafa:	63b9      	str	r1, [r7, #56]	; 0x38
 800aafc:	415b      	adcs	r3, r3
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ab08:	f7f6 f8ce 	bl	8000ca8 <__aeabi_uldivmod>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4ba5      	ldr	r3, [pc, #660]	; (800ada8 <UART_SetConfig+0x38c>)
 800ab12:	fba3 2302 	umull	r2, r3, r3, r2
 800ab16:	095b      	lsrs	r3, r3, #5
 800ab18:	011e      	lsls	r6, r3, #4
 800ab1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab1c:	461c      	mov	r4, r3
 800ab1e:	f04f 0500 	mov.w	r5, #0
 800ab22:	4622      	mov	r2, r4
 800ab24:	462b      	mov	r3, r5
 800ab26:	1891      	adds	r1, r2, r2
 800ab28:	6339      	str	r1, [r7, #48]	; 0x30
 800ab2a:	415b      	adcs	r3, r3
 800ab2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ab32:	1912      	adds	r2, r2, r4
 800ab34:	eb45 0303 	adc.w	r3, r5, r3
 800ab38:	f04f 0000 	mov.w	r0, #0
 800ab3c:	f04f 0100 	mov.w	r1, #0
 800ab40:	00d9      	lsls	r1, r3, #3
 800ab42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab46:	00d0      	lsls	r0, r2, #3
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	1911      	adds	r1, r2, r4
 800ab4e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab50:	416b      	adcs	r3, r5
 800ab52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	1891      	adds	r1, r2, r2
 800ab60:	62b9      	str	r1, [r7, #40]	; 0x28
 800ab62:	415b      	adcs	r3, r3
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ab6e:	f7f6 f89b 	bl	8000ca8 <__aeabi_uldivmod>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4b8c      	ldr	r3, [pc, #560]	; (800ada8 <UART_SetConfig+0x38c>)
 800ab78:	fba3 1302 	umull	r1, r3, r3, r2
 800ab7c:	095b      	lsrs	r3, r3, #5
 800ab7e:	2164      	movs	r1, #100	; 0x64
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	3332      	adds	r3, #50	; 0x32
 800ab8a:	4a87      	ldr	r2, [pc, #540]	; (800ada8 <UART_SetConfig+0x38c>)
 800ab8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab90:	095b      	lsrs	r3, r3, #5
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab98:	441e      	add	r6, r3
 800ab9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f04f 0100 	mov.w	r1, #0
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	1894      	adds	r4, r2, r2
 800aba8:	623c      	str	r4, [r7, #32]
 800abaa:	415b      	adcs	r3, r3
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
 800abae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abb2:	1812      	adds	r2, r2, r0
 800abb4:	eb41 0303 	adc.w	r3, r1, r3
 800abb8:	f04f 0400 	mov.w	r4, #0
 800abbc:	f04f 0500 	mov.w	r5, #0
 800abc0:	00dd      	lsls	r5, r3, #3
 800abc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abc6:	00d4      	lsls	r4, r2, #3
 800abc8:	4622      	mov	r2, r4
 800abca:	462b      	mov	r3, r5
 800abcc:	1814      	adds	r4, r2, r0
 800abce:	653c      	str	r4, [r7, #80]	; 0x50
 800abd0:	414b      	adcs	r3, r1
 800abd2:	657b      	str	r3, [r7, #84]	; 0x54
 800abd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	461a      	mov	r2, r3
 800abda:	f04f 0300 	mov.w	r3, #0
 800abde:	1891      	adds	r1, r2, r2
 800abe0:	61b9      	str	r1, [r7, #24]
 800abe2:	415b      	adcs	r3, r3
 800abe4:	61fb      	str	r3, [r7, #28]
 800abe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800abee:	f7f6 f85b 	bl	8000ca8 <__aeabi_uldivmod>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4b6c      	ldr	r3, [pc, #432]	; (800ada8 <UART_SetConfig+0x38c>)
 800abf8:	fba3 1302 	umull	r1, r3, r3, r2
 800abfc:	095b      	lsrs	r3, r3, #5
 800abfe:	2164      	movs	r1, #100	; 0x64
 800ac00:	fb01 f303 	mul.w	r3, r1, r3
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	3332      	adds	r3, #50	; 0x32
 800ac0a:	4a67      	ldr	r2, [pc, #412]	; (800ada8 <UART_SetConfig+0x38c>)
 800ac0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	f003 0207 	and.w	r2, r3, #7
 800ac16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4432      	add	r2, r6
 800ac1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac1e:	e0b9      	b.n	800ad94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac22:	461c      	mov	r4, r3
 800ac24:	f04f 0500 	mov.w	r5, #0
 800ac28:	4622      	mov	r2, r4
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	1891      	adds	r1, r2, r2
 800ac2e:	6139      	str	r1, [r7, #16]
 800ac30:	415b      	adcs	r3, r3
 800ac32:	617b      	str	r3, [r7, #20]
 800ac34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac38:	1912      	adds	r2, r2, r4
 800ac3a:	eb45 0303 	adc.w	r3, r5, r3
 800ac3e:	f04f 0000 	mov.w	r0, #0
 800ac42:	f04f 0100 	mov.w	r1, #0
 800ac46:	00d9      	lsls	r1, r3, #3
 800ac48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac4c:	00d0      	lsls	r0, r2, #3
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	eb12 0804 	adds.w	r8, r2, r4
 800ac56:	eb43 0905 	adc.w	r9, r3, r5
 800ac5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f04f 0100 	mov.w	r1, #0
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	f04f 0300 	mov.w	r3, #0
 800ac6c:	008b      	lsls	r3, r1, #2
 800ac6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac72:	0082      	lsls	r2, r0, #2
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f6 f816 	bl	8000ca8 <__aeabi_uldivmod>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4b49      	ldr	r3, [pc, #292]	; (800ada8 <UART_SetConfig+0x38c>)
 800ac82:	fba3 2302 	umull	r2, r3, r3, r2
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	011e      	lsls	r6, r3, #4
 800ac8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f04f 0100 	mov.w	r1, #0
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	1894      	adds	r4, r2, r2
 800ac98:	60bc      	str	r4, [r7, #8]
 800ac9a:	415b      	adcs	r3, r3
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aca2:	1812      	adds	r2, r2, r0
 800aca4:	eb41 0303 	adc.w	r3, r1, r3
 800aca8:	f04f 0400 	mov.w	r4, #0
 800acac:	f04f 0500 	mov.w	r5, #0
 800acb0:	00dd      	lsls	r5, r3, #3
 800acb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800acb6:	00d4      	lsls	r4, r2, #3
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	1814      	adds	r4, r2, r0
 800acbe:	64bc      	str	r4, [r7, #72]	; 0x48
 800acc0:	414b      	adcs	r3, r1
 800acc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	f04f 0100 	mov.w	r1, #0
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	f04f 0300 	mov.w	r3, #0
 800acd6:	008b      	lsls	r3, r1, #2
 800acd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acdc:	0082      	lsls	r2, r0, #2
 800acde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ace2:	f7f5 ffe1 	bl	8000ca8 <__aeabi_uldivmod>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4b2f      	ldr	r3, [pc, #188]	; (800ada8 <UART_SetConfig+0x38c>)
 800acec:	fba3 1302 	umull	r1, r3, r3, r2
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	2164      	movs	r1, #100	; 0x64
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	3332      	adds	r3, #50	; 0x32
 800acfe:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <UART_SetConfig+0x38c>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad0a:	441e      	add	r6, r3
 800ad0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f04f 0100 	mov.w	r1, #0
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	1894      	adds	r4, r2, r2
 800ad1a:	603c      	str	r4, [r7, #0]
 800ad1c:	415b      	adcs	r3, r3
 800ad1e:	607b      	str	r3, [r7, #4]
 800ad20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad24:	1812      	adds	r2, r2, r0
 800ad26:	eb41 0303 	adc.w	r3, r1, r3
 800ad2a:	f04f 0400 	mov.w	r4, #0
 800ad2e:	f04f 0500 	mov.w	r5, #0
 800ad32:	00dd      	lsls	r5, r3, #3
 800ad34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad38:	00d4      	lsls	r4, r2, #3
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	eb12 0a00 	adds.w	sl, r2, r0
 800ad42:	eb43 0b01 	adc.w	fp, r3, r1
 800ad46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f04f 0100 	mov.w	r1, #0
 800ad50:	f04f 0200 	mov.w	r2, #0
 800ad54:	f04f 0300 	mov.w	r3, #0
 800ad58:	008b      	lsls	r3, r1, #2
 800ad5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad5e:	0082      	lsls	r2, r0, #2
 800ad60:	4650      	mov	r0, sl
 800ad62:	4659      	mov	r1, fp
 800ad64:	f7f5 ffa0 	bl	8000ca8 <__aeabi_uldivmod>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <UART_SetConfig+0x38c>)
 800ad6e:	fba3 1302 	umull	r1, r3, r3, r2
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	2164      	movs	r1, #100	; 0x64
 800ad76:	fb01 f303 	mul.w	r3, r1, r3
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	011b      	lsls	r3, r3, #4
 800ad7e:	3332      	adds	r3, #50	; 0x32
 800ad80:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <UART_SetConfig+0x38c>)
 800ad82:	fba2 2303 	umull	r2, r3, r2, r3
 800ad86:	095b      	lsrs	r3, r3, #5
 800ad88:	f003 020f 	and.w	r2, r3, #15
 800ad8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4432      	add	r2, r6
 800ad92:	609a      	str	r2, [r3, #8]
}
 800ad94:	bf00      	nop
 800ad96:	377c      	adds	r7, #124	; 0x7c
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	bf00      	nop
 800ada0:	40011000 	.word	0x40011000
 800ada4:	40011400 	.word	0x40011400
 800ada8:	51eb851f 	.word	0x51eb851f

0800adac <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	4613      	mov	r3, r2
 800adba:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800adbc:	bf00      	nop
 800adbe:	4b18      	ldr	r3, [pc, #96]	; (800ae20 <sx126x_hal_write+0x74>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a18      	ldr	r2, [pc, #96]	; (800ae24 <sx126x_hal_write+0x78>)
 800adc4:	8812      	ldrh	r2, [r2, #0]
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fb fc31 	bl	8006630 <HAL_GPIO_ReadPin>
 800adce:	4603      	mov	r3, r0
 800add0:	2b01      	cmp	r3, #1
 800add2:	d0f4      	beq.n	800adbe <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800add4:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <sx126x_hal_write+0x7c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a14      	ldr	r2, [pc, #80]	; (800ae2c <sx126x_hal_write+0x80>)
 800adda:	8811      	ldrh	r1, [r2, #0]
 800addc:	2200      	movs	r2, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fb fc3e 	bl	8006660 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800ade4:	88fa      	ldrh	r2, [r7, #6]
 800ade6:	2364      	movs	r3, #100	; 0x64
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7fe f91b 	bl	8009026 <HAL_SPI_Transmit>
 800adf0:	4603      	mov	r3, r0
 800adf2:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800adf4:	8c3a      	ldrh	r2, [r7, #32]
 800adf6:	2364      	movs	r3, #100	; 0x64
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7fe f913 	bl	8009026 <HAL_SPI_Transmit>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800ae04:	4b08      	ldr	r3, [pc, #32]	; (800ae28 <sx126x_hal_write+0x7c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a08      	ldr	r2, [pc, #32]	; (800ae2c <sx126x_hal_write+0x80>)
 800ae0a:	8811      	ldrh	r1, [r2, #0]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fb fc26 	bl	8006660 <HAL_GPIO_WritePin>
    return status;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200004fc 	.word	0x200004fc
 800ae24:	200004f8 	.word	0x200004f8
 800ae28:	200004ec 	.word	0x200004ec
 800ae2c:	200004e8 	.word	0x200004e8

0800ae30 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800ae40:	bf00      	nop
 800ae42:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <sx126x_hal_read+0x8c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a1e      	ldr	r2, [pc, #120]	; (800aec0 <sx126x_hal_read+0x90>)
 800ae48:	8812      	ldrh	r2, [r2, #0]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fb fbef 	bl	8006630 <HAL_GPIO_ReadPin>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d0f4      	beq.n	800ae42 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800ae58:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <sx126x_hal_read+0x94>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a1a      	ldr	r2, [pc, #104]	; (800aec8 <sx126x_hal_read+0x98>)
 800ae5e:	8811      	ldrh	r1, [r2, #0]
 800ae60:	2200      	movs	r2, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fb fbfc 	bl	8006660 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800ae68:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	2364      	movs	r3, #100	; 0x64
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7fe f8d7 	bl	8009026 <HAL_SPI_Transmit>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800ae7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	18d1      	adds	r1, r2, r3
 800ae84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	88fa      	ldrh	r2, [r7, #6]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2264      	movs	r2, #100	; 0x64
 800ae92:	9200      	str	r2, [sp, #0]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7fe fb12 	bl	80094c0 <HAL_SPI_TransmitReceive>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800aea0:	4b08      	ldr	r3, [pc, #32]	; (800aec4 <sx126x_hal_read+0x94>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a08      	ldr	r2, [pc, #32]	; (800aec8 <sx126x_hal_read+0x98>)
 800aea6:	8811      	ldrh	r1, [r2, #0]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fb fbd8 	bl	8006660 <HAL_GPIO_WritePin>
    return status;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200004fc 	.word	0x200004fc
 800aec0:	200004f8 	.word	0x200004f8
 800aec4:	200004ec 	.word	0x200004ec
 800aec8:	200004e8 	.word	0x200004e8

0800aecc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800aed8:	4a05      	ldr	r2, [pc, #20]	; (800aef0 <set_NSS_pin+0x24>)
 800aeda:	887b      	ldrh	r3, [r7, #2]
 800aedc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800aede:	4a05      	ldr	r2, [pc, #20]	; (800aef4 <set_NSS_pin+0x28>)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6013      	str	r3, [r2, #0]
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	200004e8 	.word	0x200004e8
 800aef4:	200004ec 	.word	0x200004ec

0800aef8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800af04:	4a05      	ldr	r2, [pc, #20]	; (800af1c <set_BUSY_pin+0x24>)
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800af0a:	4a05      	ldr	r2, [pc, #20]	; (800af20 <set_BUSY_pin+0x28>)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6013      	str	r3, [r2, #0]
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	200004f8 	.word	0x200004f8
 800af20:	200004fc 	.word	0x200004fc

0800af24 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800af30:	4a05      	ldr	r2, [pc, #20]	; (800af48 <set_NRESET_pin+0x24>)
 800af32:	887b      	ldrh	r3, [r7, #2]
 800af34:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800af36:	4a05      	ldr	r2, [pc, #20]	; (800af4c <set_NRESET_pin+0x28>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6013      	str	r3, [r2, #0]
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	200004f0 	.word	0x200004f0
 800af4c:	200004f4 	.word	0x200004f4

0800af50 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800af5c:	4a05      	ldr	r2, [pc, #20]	; (800af74 <set_DIO1_pin+0x24>)
 800af5e:	887b      	ldrh	r3, [r7, #2]
 800af60:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800af62:	4a05      	ldr	r2, [pc, #20]	; (800af78 <set_DIO1_pin+0x28>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6013      	str	r3, [r2, #0]
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	20000500 	.word	0x20000500
 800af78:	20000504 	.word	0x20000504

0800af7c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800af7c:	b084      	sub	sp, #16
 800af7e:	b580      	push	{r7, lr}
 800af80:	af00      	add	r7, sp, #0
 800af82:	f107 0c08 	add.w	ip, r7, #8
 800af86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800af8a:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <set_hspi+0x2c>)
 800af8c:	4618      	mov	r0, r3
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	2258      	movs	r2, #88	; 0x58
 800af94:	4619      	mov	r1, r3
 800af96:	f003 fba1 	bl	800e6dc <memcpy>
}
 800af9a:	bf00      	nop
 800af9c:	46bd      	mov	sp, r7
 800af9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afa2:	b004      	add	sp, #16
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000508 	.word	0x20000508

0800afac <Tx_setup>:

void Tx_setup(){
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800afb2:	4b66      	ldr	r3, [pc, #408]	; (800b14c <Tx_setup+0x1a0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a66      	ldr	r2, [pc, #408]	; (800b150 <Tx_setup+0x1a4>)
 800afb8:	8811      	ldrh	r1, [r2, #0]
 800afba:	2201      	movs	r2, #1
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fb fb4f 	bl	8006660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800afc2:	4b64      	ldr	r3, [pc, #400]	; (800b154 <Tx_setup+0x1a8>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a64      	ldr	r2, [pc, #400]	; (800b158 <Tx_setup+0x1ac>)
 800afc8:	8811      	ldrh	r1, [r2, #0]
 800afca:	2200      	movs	r2, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fb fb47 	bl	8006660 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800afd2:	2032      	movs	r0, #50	; 0x32
 800afd4:	f7fa fdd6 	bl	8005b84 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800afd8:	4b5e      	ldr	r3, [pc, #376]	; (800b154 <Tx_setup+0x1a8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a5e      	ldr	r2, [pc, #376]	; (800b158 <Tx_setup+0x1ac>)
 800afde:	8811      	ldrh	r1, [r2, #0]
 800afe0:	2201      	movs	r2, #1
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fb fb3c 	bl	8006660 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800afe8:	2100      	movs	r1, #0
 800afea:	485c      	ldr	r0, [pc, #368]	; (800b15c <Tx_setup+0x1b0>)
 800afec:	f000 f8f2 	bl	800b1d4 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800aff0:	4b5b      	ldr	r3, [pc, #364]	; (800b160 <Tx_setup+0x1b4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4859      	ldr	r0, [pc, #356]	; (800b15c <Tx_setup+0x1b0>)
 800aff8:	f000 fa76 	bl	800b4e8 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800affc:	4b59      	ldr	r3, [pc, #356]	; (800b164 <Tx_setup+0x1b8>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	4856      	ldr	r0, [pc, #344]	; (800b15c <Tx_setup+0x1b0>)
 800b004:	f000 faaa 	bl	800b55c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800b008:	4b57      	ldr	r3, [pc, #348]	; (800b168 <Tx_setup+0x1bc>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	4619      	mov	r1, r3
 800b00e:	4853      	ldr	r0, [pc, #332]	; (800b15c <Tx_setup+0x1b0>)
 800b010:	f000 f977 	bl	800b302 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800b014:	2101      	movs	r1, #1
 800b016:	4851      	ldr	r0, [pc, #324]	; (800b15c <Tx_setup+0x1b0>)
 800b018:	f000 fa24 	bl	800b464 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800b01c:	4b53      	ldr	r3, [pc, #332]	; (800b16c <Tx_setup+0x1c0>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2264      	movs	r2, #100	; 0x64
 800b022:	4619      	mov	r1, r3
 800b024:	484d      	ldr	r0, [pc, #308]	; (800b15c <Tx_setup+0x1b0>)
 800b026:	f000 fa37 	bl	800b498 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800b02a:	4b51      	ldr	r3, [pc, #324]	; (800b170 <Tx_setup+0x1c4>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	484a      	ldr	r0, [pc, #296]	; (800b15c <Tx_setup+0x1b0>)
 800b032:	f000 f903 	bl	800b23c <sx126x_cal>
    HAL_Delay(50);
 800b036:	2032      	movs	r0, #50	; 0x32
 800b038:	f7fa fda4 	bl	8005b84 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800b03c:	4b4d      	ldr	r3, [pc, #308]	; (800b174 <Tx_setup+0x1c8>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	4619      	mov	r1, r3
 800b042:	4846      	ldr	r0, [pc, #280]	; (800b15c <Tx_setup+0x1b0>)
 800b044:	f000 f8e0 	bl	800b208 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800b048:	4b4b      	ldr	r3, [pc, #300]	; (800b178 <Tx_setup+0x1cc>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4a4b      	ldr	r2, [pc, #300]	; (800b17c <Tx_setup+0x1d0>)
 800b04e:	7812      	ldrb	r2, [r2, #0]
 800b050:	4619      	mov	r1, r3
 800b052:	4842      	ldr	r0, [pc, #264]	; (800b15c <Tx_setup+0x1b0>)
 800b054:	f000 f90c 	bl	800b270 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800b058:	2004      	movs	r0, #4
 800b05a:	f003 fb2f 	bl	800e6bc <malloc>
 800b05e:	4603      	mov	r3, r0
 800b060:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800b062:	4b47      	ldr	r3, [pc, #284]	; (800b180 <Tx_setup+0x1d4>)
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800b06a:	4b46      	ldr	r3, [pc, #280]	; (800b184 <Tx_setup+0x1d8>)
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800b072:	4b45      	ldr	r3, [pc, #276]	; (800b188 <Tx_setup+0x1dc>)
 800b074:	781a      	ldrb	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800b07a:	4b44      	ldr	r3, [pc, #272]	; (800b18c <Tx_setup+0x1e0>)
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800b082:	68f9      	ldr	r1, [r7, #12]
 800b084:	4835      	ldr	r0, [pc, #212]	; (800b15c <Tx_setup+0x1b0>)
 800b086:	f000 f917 	bl	800b2b8 <sx126x_set_pa_cfg>
    free(params);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f003 fb1e 	bl	800e6cc <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800b090:	4b3f      	ldr	r3, [pc, #252]	; (800b190 <Tx_setup+0x1e4>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	b25b      	sxtb	r3, r3
 800b096:	4a3f      	ldr	r2, [pc, #252]	; (800b194 <Tx_setup+0x1e8>)
 800b098:	7812      	ldrb	r2, [r2, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	482f      	ldr	r0, [pc, #188]	; (800b15c <Tx_setup+0x1b0>)
 800b09e:	f000 fa77 	bl	800b590 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800b0a2:	4b3d      	ldr	r3, [pc, #244]	; (800b198 <Tx_setup+0x1ec>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4a3d      	ldr	r2, [pc, #244]	; (800b19c <Tx_setup+0x1f0>)
 800b0a8:	7812      	ldrb	r2, [r2, #0]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	482b      	ldr	r0, [pc, #172]	; (800b15c <Tx_setup+0x1b0>)
 800b0ae:	f000 fb2d 	bl	800b70c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800b0b2:	2004      	movs	r0, #4
 800b0b4:	f003 fb02 	bl	800e6bc <malloc>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800b0bc:	4b38      	ldr	r3, [pc, #224]	; (800b1a0 <Tx_setup+0x1f4>)
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800b0c4:	4b37      	ldr	r3, [pc, #220]	; (800b1a4 <Tx_setup+0x1f8>)
 800b0c6:	781a      	ldrb	r2, [r3, #0]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800b0cc:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <Tx_setup+0x1fc>)
 800b0ce:	781a      	ldrb	r2, [r3, #0]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800b0d4:	4b35      	ldr	r3, [pc, #212]	; (800b1ac <Tx_setup+0x200>)
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	481f      	ldr	r0, [pc, #124]	; (800b15c <Tx_setup+0x1b0>)
 800b0e0:	f000 fa7a 	bl	800b5d8 <sx126x_set_lora_mod_params>
    free(mod_params);
 800b0e4:	68b8      	ldr	r0, [r7, #8]
 800b0e6:	f003 faf1 	bl	800e6cc <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800b0ea:	2006      	movs	r0, #6
 800b0ec:	f003 fae6 	bl	800e6bc <malloc>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800b0f4:	4b2e      	ldr	r3, [pc, #184]	; (800b1b0 <Tx_setup+0x204>)
 800b0f6:	881a      	ldrh	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800b0fc:	4b2d      	ldr	r3, [pc, #180]	; (800b1b4 <Tx_setup+0x208>)
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800b104:	4b2c      	ldr	r3, [pc, #176]	; (800b1b8 <Tx_setup+0x20c>)
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800b10c:	4b2b      	ldr	r3, [pc, #172]	; (800b1bc <Tx_setup+0x210>)
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800b114:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <Tx_setup+0x214>)
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	480f      	ldr	r0, [pc, #60]	; (800b15c <Tx_setup+0x1b0>)
 800b120:	f000 fa86 	bl	800b630 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f003 fad1 	bl	800e6cc <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800b12a:	4b26      	ldr	r3, [pc, #152]	; (800b1c4 <Tx_setup+0x218>)
 800b12c:	8819      	ldrh	r1, [r3, #0]
 800b12e:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <Tx_setup+0x21c>)
 800b130:	881a      	ldrh	r2, [r3, #0]
 800b132:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <Tx_setup+0x220>)
 800b134:	8818      	ldrh	r0, [r3, #0]
 800b136:	4b26      	ldr	r3, [pc, #152]	; (800b1d0 <Tx_setup+0x224>)
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	4603      	mov	r3, r0
 800b13e:	4807      	ldr	r0, [pc, #28]	; (800b15c <Tx_setup+0x1b0>)
 800b140:	f000 f94c 	bl	800b3dc <sx126x_set_dio_irq_params>

}
 800b144:	bf00      	nop
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	200004f4 	.word	0x200004f4
 800b150:	200004f0 	.word	0x200004f0
 800b154:	200004ec 	.word	0x200004ec
 800b158:	200004e8 	.word	0x200004e8
 800b15c:	20000508 	.word	0x20000508
 800b160:	20000018 	.word	0x20000018
 800b164:	2000001c 	.word	0x2000001c
 800b168:	2000001d 	.word	0x2000001d
 800b16c:	2000001e 	.word	0x2000001e
 800b170:	20000020 	.word	0x20000020
 800b174:	2000001f 	.word	0x2000001f
 800b178:	20000021 	.word	0x20000021
 800b17c:	20000022 	.word	0x20000022
 800b180:	20000023 	.word	0x20000023
 800b184:	20000024 	.word	0x20000024
 800b188:	20000560 	.word	0x20000560
 800b18c:	20000025 	.word	0x20000025
 800b190:	20000026 	.word	0x20000026
 800b194:	20000027 	.word	0x20000027
 800b198:	20000561 	.word	0x20000561
 800b19c:	20000562 	.word	0x20000562
 800b1a0:	20000028 	.word	0x20000028
 800b1a4:	20000029 	.word	0x20000029
 800b1a8:	2000002a 	.word	0x2000002a
 800b1ac:	20000563 	.word	0x20000563
 800b1b0:	2000002c 	.word	0x2000002c
 800b1b4:	20000564 	.word	0x20000564
 800b1b8:	2000002e 	.word	0x2000002e
 800b1bc:	2000002f 	.word	0x2000002f
 800b1c0:	20000565 	.word	0x20000565
 800b1c4:	20000030 	.word	0x20000030
 800b1c8:	20000032 	.word	0x20000032
 800b1cc:	20000566 	.word	0x20000566
 800b1d0:	20000568 	.word	0x20000568

0800b1d4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800b1ec:	f107 010c 	add.w	r1, r7, #12
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fdd7 	bl	800adac <sx126x_hal_write>
 800b1fe:	4603      	mov	r3, r0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800b214:	2300      	movs	r3, #0
 800b216:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800b218:	2396      	movs	r3, #150	; 0x96
 800b21a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800b220:	f107 010c 	add.w	r1, r7, #12
 800b224:	2300      	movs	r3, #0
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	2300      	movs	r3, #0
 800b22a:	2202      	movs	r2, #2
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fdbd 	bl	800adac <sx126x_hal_write>
 800b232:	4603      	mov	r3, r0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800b248:	2300      	movs	r3, #0
 800b24a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800b24c:	2389      	movs	r3, #137	; 0x89
 800b24e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800b254:	f107 010c 	add.w	r1, r7, #12
 800b258:	2300      	movs	r3, #0
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2300      	movs	r3, #0
 800b25e:	2202      	movs	r2, #2
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff fda3 	bl	800adac <sx126x_hal_write>
 800b266:	4603      	mov	r3, r0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af02      	add	r7, sp, #8
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
 800b27c:	4613      	mov	r3, r2
 800b27e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800b280:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <sx126x_cal_img_hex+0x44>)
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	81bb      	strh	r3, [r7, #12]
 800b286:	2300      	movs	r3, #0
 800b288:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800b28a:	2398      	movs	r3, #152	; 0x98
 800b28c:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800b292:	78bb      	ldrb	r3, [r7, #2]
 800b294:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800b296:	f107 010c 	add.w	r1, r7, #12
 800b29a:	2300      	movs	r3, #0
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff fd82 	bl	800adac <sx126x_hal_write>
 800b2a8:	4603      	mov	r3, r0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	0801441c 	.word	0x0801441c

0800b2b8 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800b2ca:	2395      	movs	r3, #149	; 0x95
 800b2cc:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	789b      	ldrb	r3, [r3, #2]
 800b2de:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	78db      	ldrb	r3, [r3, #3]
 800b2e4:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800b2e6:	f107 0108 	add.w	r1, r7, #8
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff fd5a 	bl	800adac <sx126x_hal_write>
 800b2f8:	4603      	mov	r3, r0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b086      	sub	sp, #24
 800b306:	af02      	add	r7, sp, #8
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800b30e:	2300      	movs	r3, #0
 800b310:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800b312:	2393      	movs	r3, #147	; 0x93
 800b314:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800b316:	78fb      	ldrb	r3, [r7, #3]
 800b318:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800b31a:	f107 010c 	add.w	r1, r7, #12
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	2202      	movs	r2, #2
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7ff fd40 	bl	800adac <sx126x_hal_write>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b088      	sub	sp, #32
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	461a      	mov	r2, r3
 800b344:	460b      	mov	r3, r1
 800b346:	817b      	strh	r3, [r7, #10]
 800b348:	4613      	mov	r3, r2
 800b34a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <sx126x_write_register+0x50>)
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	82bb      	strh	r3, [r7, #20]
 800b352:	2300      	movs	r3, #0
 800b354:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800b356:	230d      	movs	r3, #13
 800b358:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800b35a:	897b      	ldrh	r3, [r7, #10]
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	b29b      	uxth	r3, r3
 800b360:	b2db      	uxtb	r3, r3
 800b362:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800b364:	897b      	ldrh	r3, [r7, #10]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800b36a:	7a7b      	ldrb	r3, [r7, #9]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	f107 0114 	add.w	r1, r7, #20
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2203      	movs	r2, #3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff fd17 	bl	800adac <sx126x_hal_write>
 800b37e:	4603      	mov	r3, r0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	0801441c 	.word	0x0801441c

0800b38c <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af02      	add	r7, sp, #8
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	607a      	str	r2, [r7, #4]
 800b396:	461a      	mov	r2, r3
 800b398:	460b      	mov	r3, r1
 800b39a:	817b      	strh	r3, [r7, #10]
 800b39c:	4613      	mov	r3, r2
 800b39e:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800b3a8:	231d      	movs	r3, #29
 800b3aa:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800b3ac:	897b      	ldrh	r3, [r7, #10]
 800b3ae:	0a1b      	lsrs	r3, r3, #8
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800b3b6:	897b      	ldrh	r3, [r7, #10]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800b3bc:	f107 0110 	add.w	r1, r7, #16
 800b3c0:	7a7b      	ldrb	r3, [r7, #9]
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff fd31 	bl	800ae30 <sx126x_hal_read>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	75fb      	strb	r3, [r7, #23]

    return status;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08a      	sub	sp, #40	; 0x28
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	817b      	strh	r3, [r7, #10]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	813b      	strh	r3, [r7, #8]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	f107 0318 	add.w	r3, r7, #24
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800b404:	2308      	movs	r3, #8
 800b406:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800b408:	897b      	ldrh	r3, [r7, #10]
 800b40a:	0a1b      	lsrs	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800b412:	897b      	ldrh	r3, [r7, #10]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800b418:	893b      	ldrh	r3, [r7, #8]
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800b422:	893b      	ldrh	r3, [r7, #8]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800b432:	88fb      	ldrh	r3, [r7, #6]
 800b434:	b2db      	uxtb	r3, r3
 800b436:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800b438:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b43a:	0a1b      	lsrs	r3, r3, #8
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800b442:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b444:	b2db      	uxtb	r3, r3
 800b446:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800b448:	f107 0114 	add.w	r1, r7, #20
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	2209      	movs	r2, #9
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff fca9 	bl	800adac <sx126x_hal_write>
 800b45a:	4603      	mov	r3, r0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af02      	add	r7, sp, #8
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800b470:	2300      	movs	r3, #0
 800b472:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800b474:	239d      	movs	r3, #157	; 0x9d
 800b476:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800b47c:	f107 010c 	add.w	r1, r7, #12
 800b480:	2300      	movs	r3, #0
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	2300      	movs	r3, #0
 800b486:	2202      	movs	r2, #2
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff fc8f 	bl	800adac <sx126x_hal_write>
 800b48e:	4603      	mov	r3, r0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	613b      	str	r3, [r7, #16]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800b4ae:	2397      	movs	r3, #151	; 0x97
 800b4b0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800b4b2:	7afb      	ldrb	r3, [r7, #11]
 800b4b4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	0c1b      	lsrs	r3, r3, #16
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	0a1b      	lsrs	r3, r3, #8
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800b4cc:	f107 0110 	add.w	r1, r7, #16
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7ff fc67 	bl	800adac <sx126x_hal_write>
 800b4de:	4603      	mov	r3, r0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800b4f2:	6838      	ldr	r0, [r7, #0]
 800b4f4:	f000 f92e 	bl	800b754 <sx126x_convert_freq_in_hz_to_pll_step>
 800b4f8:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f805 	bl	800b50c <sx126x_set_rf_freq_in_pll_steps>
 800b502:	4603      	mov	r3, r0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af02      	add	r7, sp, #8
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800b516:	2300      	movs	r3, #0
 800b518:	60bb      	str	r3, [r7, #8]
 800b51a:	2300      	movs	r3, #0
 800b51c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800b51e:	2386      	movs	r3, #134	; 0x86
 800b520:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	0e1b      	lsrs	r3, r3, #24
 800b526:	b2db      	uxtb	r3, r3
 800b528:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	0c1b      	lsrs	r3, r3, #16
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	0a1b      	lsrs	r3, r3, #8
 800b536:	b2db      	uxtb	r3, r3
 800b538:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800b540:	f107 0108 	add.w	r1, r7, #8
 800b544:	2300      	movs	r3, #0
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2300      	movs	r3, #0
 800b54a:	2205      	movs	r2, #5
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fc2d 	bl	800adac <sx126x_hal_write>
 800b552:	4603      	mov	r3, r0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af02      	add	r7, sp, #8
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800b568:	2300      	movs	r3, #0
 800b56a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800b56c:	238a      	movs	r3, #138	; 0x8a
 800b56e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800b574:	f107 010c 	add.w	r1, r7, #12
 800b578:	2300      	movs	r3, #0
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	2300      	movs	r3, #0
 800b57e:	2202      	movs	r2, #2
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff fc13 	bl	800adac <sx126x_hal_write>
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af02      	add	r7, sp, #8
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
 800b59c:	4613      	mov	r3, r2
 800b59e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <sx126x_set_tx_params+0x44>)
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	81bb      	strh	r3, [r7, #12]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800b5aa:	238e      	movs	r3, #142	; 0x8e
 800b5ac:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800b5b2:	78bb      	ldrb	r3, [r7, #2]
 800b5b4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800b5b6:	f107 010c 	add.w	r1, r7, #12
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2203      	movs	r2, #3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff fbf2 	bl	800adac <sx126x_hal_write>
 800b5c8:	4603      	mov	r3, r0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	0801441c 	.word	0x0801441c

0800b5d8 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800b5ee:	238b      	movs	r3, #139	; 0x8b
 800b5f0:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	789b      	ldrb	r3, [r3, #2]
 800b602:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	78db      	ldrb	r3, [r3, #3]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800b610:	f107 0108 	add.w	r1, r7, #8
 800b614:	2300      	movs	r3, #0
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2300      	movs	r3, #0
 800b61a:	2205      	movs	r2, #5
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fbc5 	bl	800adac <sx126x_hal_write>
 800b622:	4603      	mov	r3, r0
 800b624:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af02      	add	r7, sp, #8
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800b63a:	2303      	movs	r3, #3
 800b63c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	2100      	movs	r1, #0
 800b648:	460a      	mov	r2, r1
 800b64a:	801a      	strh	r2, [r3, #0]
 800b64c:	460a      	mov	r2, r1
 800b64e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800b650:	238c      	movs	r3, #140	; 0x8c
 800b652:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	0a1b      	lsrs	r3, r3, #8
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	b2db      	uxtb	r3, r3
 800b666:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	789b      	ldrb	r3, [r3, #2]
 800b66c:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	78db      	ldrb	r3, [r3, #3]
 800b672:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	791b      	ldrb	r3, [r3, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <sx126x_set_lora_pkt_params+0x50>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <sx126x_set_lora_pkt_params+0x52>
 800b680:	2300      	movs	r3, #0
 800b682:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	795b      	ldrb	r3, [r3, #5]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <sx126x_set_lora_pkt_params+0x60>
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <sx126x_set_lora_pkt_params+0x62>
 800b690:	2300      	movs	r3, #0
 800b692:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800b694:	f107 0110 	add.w	r1, r7, #16
 800b698:	2300      	movs	r3, #0
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2300      	movs	r3, #0
 800b69e:	2207      	movs	r2, #7
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fb83 	bl	800adac <sx126x_hal_write>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d127      	bne.n	800b700 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800b6b4:	f107 020f 	add.w	r2, r7, #15
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f240 7136 	movw	r1, #1846	; 0x736
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fe64 	bl	800b38c <sx126x_read_register>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d118      	bne.n	800b700 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	795b      	ldrb	r3, [r3, #5]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	f023 0304 	bic.w	r3, r3, #4
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	73fb      	strb	r3, [r7, #15]
 800b6e0:	e004      	b.n	800b6ec <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	f043 0304 	orr.w	r3, r3, #4
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800b6ec:	f107 020f 	add.w	r2, r7, #15
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f240 7136 	movw	r1, #1846	; 0x736
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff fe1e 	bl	800b338 <sx126x_write_register>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af02      	add	r7, sp, #8
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
 800b718:	4613      	mov	r3, r2
 800b71a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <sx126x_set_buffer_base_address+0x44>)
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	81bb      	strh	r3, [r7, #12]
 800b722:	2300      	movs	r3, #0
 800b724:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800b726:	238f      	movs	r3, #143	; 0x8f
 800b728:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800b72e:	78bb      	ldrb	r3, [r7, #2]
 800b730:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800b732:	f107 010c 	add.w	r1, r7, #12
 800b736:	2300      	movs	r3, #0
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	2300      	movs	r3, #0
 800b73c:	2203      	movs	r2, #3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fb34 	bl	800adac <sx126x_hal_write>
 800b744:	4603      	mov	r3, r0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	0801441c 	.word	0x0801441c

0800b754 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a0f      	ldr	r2, [pc, #60]	; (800b79c <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800b760:	fba2 2303 	umull	r2, r3, r2, r3
 800b764:	0b1b      	lsrs	r3, r3, #12
 800b766:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f643 5209 	movw	r2, #15625	; 0x3d09
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	039b      	lsls	r3, r3, #14
 800b780:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800b784:	3304      	adds	r3, #4
 800b786:	4905      	ldr	r1, [pc, #20]	; (800b79c <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800b788:	fba1 1303 	umull	r1, r3, r1, r3
 800b78c:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800b78e:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800b790:	4618      	mov	r0, r3
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	431bde83 	.word	0x431bde83

0800b7a0 <__NVIC_SetPriority>:
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	6039      	str	r1, [r7, #0]
 800b7aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	db0a      	blt.n	800b7ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	490c      	ldr	r1, [pc, #48]	; (800b7ec <__NVIC_SetPriority+0x4c>)
 800b7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7be:	0112      	lsls	r2, r2, #4
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b7c8:	e00a      	b.n	800b7e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	4908      	ldr	r1, [pc, #32]	; (800b7f0 <__NVIC_SetPriority+0x50>)
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	0112      	lsls	r2, r2, #4
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	440b      	add	r3, r1
 800b7de:	761a      	strb	r2, [r3, #24]
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	e000e100 	.word	0xe000e100
 800b7f0:	e000ed00 	.word	0xe000ed00

0800b7f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <SysTick_Handler+0x1c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7fc:	f001 fdba 	bl	800d374 <xTaskGetSchedulerState>
 800b800:	4603      	mov	r3, r0
 800b802:	2b01      	cmp	r3, #1
 800b804:	d001      	beq.n	800b80a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b806:	f002 fb9f 	bl	800df48 <xPortSysTickHandler>
  }
}
 800b80a:	bf00      	nop
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	e000e010 	.word	0xe000e010

0800b814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b818:	2100      	movs	r1, #0
 800b81a:	f06f 0004 	mvn.w	r0, #4
 800b81e:	f7ff ffbf 	bl	800b7a0 <__NVIC_SetPriority>
#endif
}
 800b822:	bf00      	nop
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b82e:	f3ef 8305 	mrs	r3, IPSR
 800b832:	603b      	str	r3, [r7, #0]
  return(result);
 800b834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b83a:	f06f 0305 	mvn.w	r3, #5
 800b83e:	607b      	str	r3, [r7, #4]
 800b840:	e00c      	b.n	800b85c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b842:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <osKernelInitialize+0x44>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b84a:	4b08      	ldr	r3, [pc, #32]	; (800b86c <osKernelInitialize+0x44>)
 800b84c:	2201      	movs	r2, #1
 800b84e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b850:	2300      	movs	r3, #0
 800b852:	607b      	str	r3, [r7, #4]
 800b854:	e002      	b.n	800b85c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b856:	f04f 33ff 	mov.w	r3, #4294967295
 800b85a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b85c:	687b      	ldr	r3, [r7, #4]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	2000056c 	.word	0x2000056c

0800b870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b876:	f3ef 8305 	mrs	r3, IPSR
 800b87a:	603b      	str	r3, [r7, #0]
  return(result);
 800b87c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b882:	f06f 0305 	mvn.w	r3, #5
 800b886:	607b      	str	r3, [r7, #4]
 800b888:	e010      	b.n	800b8ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b88a:	4b0b      	ldr	r3, [pc, #44]	; (800b8b8 <osKernelStart+0x48>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d109      	bne.n	800b8a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b892:	f7ff ffbf 	bl	800b814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b896:	4b08      	ldr	r3, [pc, #32]	; (800b8b8 <osKernelStart+0x48>)
 800b898:	2202      	movs	r2, #2
 800b89a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b89c:	f001 f8fe 	bl	800ca9c <vTaskStartScheduler>
      stat = osOK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	607b      	str	r3, [r7, #4]
 800b8a4:	e002      	b.n	800b8ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8ac:	687b      	ldr	r3, [r7, #4]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2000056c 	.word	0x2000056c

0800b8bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08e      	sub	sp, #56	; 0x38
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8cc:	f3ef 8305 	mrs	r3, IPSR
 800b8d0:	617b      	str	r3, [r7, #20]
  return(result);
 800b8d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d17e      	bne.n	800b9d6 <osThreadNew+0x11a>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d07b      	beq.n	800b9d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b8de:	2380      	movs	r3, #128	; 0x80
 800b8e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b8e2:	2318      	movs	r3, #24
 800b8e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d045      	beq.n	800b982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <osThreadNew+0x48>
        name = attr->name;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <osThreadNew+0x6e>
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	2b38      	cmp	r3, #56	; 0x38
 800b91c:	d805      	bhi.n	800b92a <osThreadNew+0x6e>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <osThreadNew+0x72>
        return (NULL);
 800b92a:	2300      	movs	r3, #0
 800b92c:	e054      	b.n	800b9d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	089b      	lsrs	r3, r3, #2
 800b93c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00e      	beq.n	800b964 <osThreadNew+0xa8>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	2bbb      	cmp	r3, #187	; 0xbb
 800b94c:	d90a      	bls.n	800b964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b952:	2b00      	cmp	r3, #0
 800b954:	d006      	beq.n	800b964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <osThreadNew+0xa8>
        mem = 1;
 800b95e:	2301      	movs	r3, #1
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	e010      	b.n	800b986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10c      	bne.n	800b986 <osThreadNew+0xca>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d108      	bne.n	800b986 <osThreadNew+0xca>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <osThreadNew+0xca>
          mem = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	e001      	b.n	800b986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d110      	bne.n	800b9ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b994:	9202      	str	r2, [sp, #8]
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	6a3a      	ldr	r2, [r7, #32]
 800b9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fe1c 	bl	800c5e0 <xTaskCreateStatic>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e013      	b.n	800b9d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d110      	bne.n	800b9d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	f107 0310 	add.w	r3, r7, #16
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fe67 	bl	800c69a <xTaskCreate>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d001      	beq.n	800b9d6 <osThreadNew+0x11a>
            hTask = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9d6:	693b      	ldr	r3, [r7, #16]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3728      	adds	r7, #40	; 0x28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800b9e6:	f001 fcb5 	bl	800d354 <xTaskGetCurrentTaskHandle>
 800b9ea:	6078      	str	r0, [r7, #4]

  return (id);
 800b9ec:	687b      	ldr	r3, [r7, #4]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f000 ffa8 	bl	800c950 <vTaskDelete>
#endif
  for (;;);
 800ba00:	e7fe      	b.n	800ba00 <osThreadExit+0xa>

0800ba02 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba0a:	f3ef 8305 	mrs	r3, IPSR
 800ba0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <osDelay+0x1c>
    stat = osErrorISR;
 800ba16:	f06f 0305 	mvn.w	r3, #5
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	e007      	b.n	800ba2e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f001 f803 	bl	800ca34 <vTaskDelay>
    }
  }

  return (stat);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4a07      	ldr	r2, [pc, #28]	; (800ba64 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	4a06      	ldr	r2, [pc, #24]	; (800ba68 <vApplicationGetIdleTaskMemory+0x30>)
 800ba4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2280      	movs	r2, #128	; 0x80
 800ba54:	601a      	str	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000570 	.word	0x20000570
 800ba68:	2000062c 	.word	0x2000062c

0800ba6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a07      	ldr	r2, [pc, #28]	; (800ba98 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	4a06      	ldr	r2, [pc, #24]	; (800ba9c <vApplicationGetTimerTaskMemory+0x30>)
 800ba82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba8a:	601a      	str	r2, [r3, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	2000082c 	.word	0x2000082c
 800ba9c:	200008e8 	.word	0x200008e8

0800baa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0208 	add.w	r2, r3, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f103 0208 	add.w	r2, r3, #8
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f103 0208 	add.w	r2, r3, #8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800baee:	bf00      	nop
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bafa:	b480      	push	{r7}
 800bafc:	b085      	sub	sp, #20
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb58:	d103      	bne.n	800bb62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	e00c      	b.n	800bb7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3308      	adds	r3, #8
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e002      	b.n	800bb70 <vListInsert+0x2e>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d2f6      	bcs.n	800bb6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6892      	ldr	r2, [r2, #8]
 800bbca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6852      	ldr	r2, [r2, #4]
 800bbd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d103      	bne.n	800bbe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10a      	bne.n	800bc32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc32:	f002 f8f7 	bl	800de24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	68f9      	ldr	r1, [r7, #12]
 800bc40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc42:	fb01 f303 	mul.w	r3, r1, r3
 800bc46:	441a      	add	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	3b01      	subs	r3, #1
 800bc64:	68f9      	ldr	r1, [r7, #12]
 800bc66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc68:	fb01 f303 	mul.w	r3, r1, r3
 800bc6c:	441a      	add	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	22ff      	movs	r2, #255	; 0xff
 800bc7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d114      	bne.n	800bcb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d01a      	beq.n	800bcc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3310      	adds	r3, #16
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 f99b 	bl	800cfd0 <xTaskRemoveFromEventList>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d012      	beq.n	800bcc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bca0:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <xQueueGenericReset+0xcc>)
 800bca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca6:	601a      	str	r2, [r3, #0]
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	e009      	b.n	800bcc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3310      	adds	r3, #16
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff fef2 	bl	800baa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3324      	adds	r3, #36	; 0x24
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff feed 	bl	800baa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bcc6:	f002 f8dd 	bl	800de84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcca:	2301      	movs	r3, #1
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	e000ed04 	.word	0xe000ed04

0800bcd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08e      	sub	sp, #56	; 0x38
 800bcdc:	af02      	add	r7, sp, #8
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <xQueueGenericCreateStatic+0x52>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <xQueueGenericCreateStatic+0x56>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <xQueueGenericCreateStatic+0x58>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	623b      	str	r3, [r7, #32]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <xQueueGenericCreateStatic+0x7e>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <xQueueGenericCreateStatic+0x82>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueGenericCreateStatic+0x84>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61fb      	str	r3, [r7, #28]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd76:	2350      	movs	r3, #80	; 0x50
 800bd78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b50      	cmp	r3, #80	; 0x50
 800bd7e:	d00a      	beq.n	800bd96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	61bb      	str	r3, [r7, #24]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00d      	beq.n	800bdbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68b9      	ldr	r1, [r7, #8]
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f805 	bl	800bdc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3730      	adds	r7, #48	; 0x30
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d103      	bne.n	800bde4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	e002      	b.n	800bdea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	69b8      	ldr	r0, [r7, #24]
 800bdfa:	f7ff ff05 	bl	800bc08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be06:	bf00      	nop
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08e      	sub	sp, #56	; 0x38
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be1e:	2300      	movs	r3, #0
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <xQueueGenericSend+0x32>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <xQueueGenericSend+0x40>
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <xQueueGenericSend+0x44>
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <xQueueGenericSend+0x46>
 800be54:	2300      	movs	r3, #0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10a      	bne.n	800be70 <xQueueGenericSend+0x60>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b02      	cmp	r3, #2
 800be74:	d103      	bne.n	800be7e <xQueueGenericSend+0x6e>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d101      	bne.n	800be82 <xQueueGenericSend+0x72>
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <xQueueGenericSend+0x74>
 800be82:	2300      	movs	r3, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10a      	bne.n	800be9e <xQueueGenericSend+0x8e>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	623b      	str	r3, [r7, #32]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be9e:	f001 fa69 	bl	800d374 <xTaskGetSchedulerState>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <xQueueGenericSend+0x9e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <xQueueGenericSend+0xa2>
 800beae:	2301      	movs	r3, #1
 800beb0:	e000      	b.n	800beb4 <xQueueGenericSend+0xa4>
 800beb2:	2300      	movs	r3, #0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <xQueueGenericSend+0xbe>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	61fb      	str	r3, [r7, #28]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bece:	f001 ffa9 	bl	800de24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beda:	429a      	cmp	r2, r3
 800bedc:	d302      	bcc.n	800bee4 <xQueueGenericSend+0xd4>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d129      	bne.n	800bf38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beea:	f000 fa0b 	bl	800c304 <prvCopyDataToQueue>
 800beee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d010      	beq.n	800bf1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	3324      	adds	r3, #36	; 0x24
 800befc:	4618      	mov	r0, r3
 800befe:	f001 f867 	bl	800cfd0 <xTaskRemoveFromEventList>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d013      	beq.n	800bf30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf08:	4b3f      	ldr	r3, [pc, #252]	; (800c008 <xQueueGenericSend+0x1f8>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	e00a      	b.n	800bf30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf20:	4b39      	ldr	r3, [pc, #228]	; (800c008 <xQueueGenericSend+0x1f8>)
 800bf22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf30:	f001 ffa8 	bl	800de84 <vPortExitCritical>
				return pdPASS;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e063      	b.n	800c000 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d103      	bne.n	800bf46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf3e:	f001 ffa1 	bl	800de84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e05c      	b.n	800c000 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf4c:	f107 0314 	add.w	r3, r7, #20
 800bf50:	4618      	mov	r0, r3
 800bf52:	f001 f8a1 	bl	800d098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf56:	2301      	movs	r3, #1
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf5a:	f001 ff93 	bl	800de84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf5e:	f000 fe0d 	bl	800cb7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf62:	f001 ff5f 	bl	800de24 <vPortEnterCritical>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d103      	bne.n	800bf7c <xQueueGenericSend+0x16c>
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf82:	b25b      	sxtb	r3, r3
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf88:	d103      	bne.n	800bf92 <xQueueGenericSend+0x182>
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf92:	f001 ff77 	bl	800de84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf96:	1d3a      	adds	r2, r7, #4
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f001 f890 	bl	800d0c4 <xTaskCheckForTimeOut>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d124      	bne.n	800bff4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfac:	f000 faa2 	bl	800c4f4 <prvIsQueueFull>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d018      	beq.n	800bfe8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	3310      	adds	r3, #16
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 ffb6 	bl	800cf30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc6:	f000 fa2d 	bl	800c424 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfca:	f000 fde5 	bl	800cb98 <xTaskResumeAll>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f47f af7c 	bne.w	800bece <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <xQueueGenericSend+0x1f8>)
 800bfd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	e772      	b.n	800bece <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfea:	f000 fa1b 	bl	800c424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfee:	f000 fdd3 	bl	800cb98 <xTaskResumeAll>
 800bff2:	e76c      	b.n	800bece <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff6:	f000 fa15 	bl	800c424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bffa:	f000 fdcd 	bl	800cb98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bffe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c000:	4618      	mov	r0, r3
 800c002:	3738      	adds	r7, #56	; 0x38
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b090      	sub	sp, #64	; 0x40
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10a      	bne.n	800c03a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <xQueueGenericSendFromISR+0x3c>
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <xQueueGenericSendFromISR+0x40>
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <xQueueGenericSendFromISR+0x42>
 800c04c:	2300      	movs	r3, #0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d103      	bne.n	800c076 <xQueueGenericSendFromISR+0x6a>
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c072:	2b01      	cmp	r3, #1
 800c074:	d101      	bne.n	800c07a <xQueueGenericSendFromISR+0x6e>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <xQueueGenericSendFromISR+0x70>
 800c07a:	2300      	movs	r3, #0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10a      	bne.n	800c096 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	623b      	str	r3, [r7, #32]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c096:	f001 ffa7 	bl	800dfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c09a:	f3ef 8211 	mrs	r2, BASEPRI
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	61fa      	str	r2, [r7, #28]
 800c0b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d302      	bcc.n	800c0c8 <xQueueGenericSendFromISR+0xbc>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d12f      	bne.n	800c128 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	68b9      	ldr	r1, [r7, #8]
 800c0dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0de:	f000 f911 	bl	800c304 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ea:	d112      	bne.n	800c112 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d016      	beq.n	800c122 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	3324      	adds	r3, #36	; 0x24
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 ff69 	bl	800cfd0 <xTaskRemoveFromEventList>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00e      	beq.n	800c122 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00b      	beq.n	800c122 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	e007      	b.n	800c122 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c112:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c116:	3301      	adds	r3, #1
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	b25a      	sxtb	r2, r3
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c122:	2301      	movs	r3, #1
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c126:	e001      	b.n	800c12c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c136:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3740      	adds	r7, #64	; 0x40
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b08c      	sub	sp, #48	; 0x30
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c150:	2300      	movs	r3, #0
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <xQueueReceive+0x30>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	623b      	str	r3, [r7, #32]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <xQueueReceive+0x3e>
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <xQueueReceive+0x42>
 800c182:	2301      	movs	r3, #1
 800c184:	e000      	b.n	800c188 <xQueueReceive+0x44>
 800c186:	2300      	movs	r3, #0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <xQueueReceive+0x5e>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	61fb      	str	r3, [r7, #28]
}
 800c19e:	bf00      	nop
 800c1a0:	e7fe      	b.n	800c1a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1a2:	f001 f8e7 	bl	800d374 <xTaskGetSchedulerState>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <xQueueReceive+0x6e>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <xQueueReceive+0x72>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <xQueueReceive+0x74>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueReceive+0x8e>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61bb      	str	r3, [r7, #24]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1d2:	f001 fe27 	bl	800de24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d01f      	beq.n	800c222 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e6:	f000 f8f7 	bl	800c3d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	1e5a      	subs	r2, r3, #1
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00f      	beq.n	800c21a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	3310      	adds	r3, #16
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fee6 	bl	800cfd0 <xTaskRemoveFromEventList>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c20a:	4b3d      	ldr	r3, [pc, #244]	; (800c300 <xQueueReceive+0x1bc>)
 800c20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c21a:	f001 fe33 	bl	800de84 <vPortExitCritical>
				return pdPASS;
 800c21e:	2301      	movs	r3, #1
 800c220:	e069      	b.n	800c2f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d103      	bne.n	800c230 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c228:	f001 fe2c 	bl	800de84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e062      	b.n	800c2f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c236:	f107 0310 	add.w	r3, r7, #16
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 ff2c 	bl	800d098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c240:	2301      	movs	r3, #1
 800c242:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c244:	f001 fe1e 	bl	800de84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c248:	f000 fc98 	bl	800cb7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c24c:	f001 fdea 	bl	800de24 <vPortEnterCritical>
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c256:	b25b      	sxtb	r3, r3
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d103      	bne.n	800c266 <xQueueReceive+0x122>
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c26c:	b25b      	sxtb	r3, r3
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c272:	d103      	bne.n	800c27c <xQueueReceive+0x138>
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c27c:	f001 fe02 	bl	800de84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c280:	1d3a      	adds	r2, r7, #4
 800c282:	f107 0310 	add.w	r3, r7, #16
 800c286:	4611      	mov	r1, r2
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 ff1b 	bl	800d0c4 <xTaskCheckForTimeOut>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d123      	bne.n	800c2dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c296:	f000 f917 	bl	800c4c8 <prvIsQueueEmpty>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d017      	beq.n	800c2d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	3324      	adds	r3, #36	; 0x24
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fe41 	bl	800cf30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b0:	f000 f8b8 	bl	800c424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2b4:	f000 fc70 	bl	800cb98 <xTaskResumeAll>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d189      	bne.n	800c1d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <xQueueReceive+0x1bc>)
 800c2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	e780      	b.n	800c1d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d2:	f000 f8a7 	bl	800c424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2d6:	f000 fc5f 	bl	800cb98 <xTaskResumeAll>
 800c2da:	e77a      	b.n	800c1d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2de:	f000 f8a1 	bl	800c424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2e2:	f000 fc59 	bl	800cb98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e8:	f000 f8ee 	bl	800c4c8 <prvIsQueueEmpty>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f43f af6f 	beq.w	800c1d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3730      	adds	r7, #48	; 0x30
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c318:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10d      	bne.n	800c33e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d14d      	bne.n	800c3c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 f83e 	bl	800d3b0 <xTaskPriorityDisinherit>
 800c334:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	609a      	str	r2, [r3, #8]
 800c33c:	e043      	b.n	800c3c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d119      	bne.n	800c378 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6858      	ldr	r0, [r3, #4]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34c:	461a      	mov	r2, r3
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	f002 f9c4 	bl	800e6dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35c:	441a      	add	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d32b      	bcc.n	800c3c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	605a      	str	r2, [r3, #4]
 800c376:	e026      	b.n	800c3c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	68d8      	ldr	r0, [r3, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c380:	461a      	mov	r2, r3
 800c382:	68b9      	ldr	r1, [r7, #8]
 800c384:	f002 f9aa 	bl	800e6dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68da      	ldr	r2, [r3, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	425b      	negs	r3, r3
 800c392:	441a      	add	r2, r3
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68da      	ldr	r2, [r3, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d207      	bcs.n	800c3b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ac:	425b      	negs	r3, r3
 800c3ae:	441a      	add	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d105      	bne.n	800c3c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3ce:	697b      	ldr	r3, [r7, #20]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d018      	beq.n	800c41c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68da      	ldr	r2, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f2:	441a      	add	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	429a      	cmp	r2, r3
 800c402:	d303      	bcc.n	800c40c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68d9      	ldr	r1, [r3, #12]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c414:	461a      	mov	r2, r3
 800c416:	6838      	ldr	r0, [r7, #0]
 800c418:	f002 f960 	bl	800e6dc <memcpy>
	}
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c42c:	f001 fcfa 	bl	800de24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c436:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c438:	e011      	b.n	800c45e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d012      	beq.n	800c468 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3324      	adds	r3, #36	; 0x24
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fdc2 	bl	800cfd0 <xTaskRemoveFromEventList>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c452:	f000 fe99 	bl	800d188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	3b01      	subs	r3, #1
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c462:	2b00      	cmp	r3, #0
 800c464:	dce9      	bgt.n	800c43a <prvUnlockQueue+0x16>
 800c466:	e000      	b.n	800c46a <prvUnlockQueue+0x46>
					break;
 800c468:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	22ff      	movs	r2, #255	; 0xff
 800c46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c472:	f001 fd07 	bl	800de84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c476:	f001 fcd5 	bl	800de24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c480:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c482:	e011      	b.n	800c4a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d012      	beq.n	800c4b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3310      	adds	r3, #16
 800c490:	4618      	mov	r0, r3
 800c492:	f000 fd9d 	bl	800cfd0 <xTaskRemoveFromEventList>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c49c:	f000 fe74 	bl	800d188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dce9      	bgt.n	800c484 <prvUnlockQueue+0x60>
 800c4b0:	e000      	b.n	800c4b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	22ff      	movs	r2, #255	; 0xff
 800c4b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4bc:	f001 fce2 	bl	800de84 <vPortExitCritical>
}
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4d0:	f001 fca8 	bl	800de24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d102      	bne.n	800c4e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	60fb      	str	r3, [r7, #12]
 800c4e0:	e001      	b.n	800c4e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4e6:	f001 fccd 	bl	800de84 <vPortExitCritical>

	return xReturn;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4fc:	f001 fc92 	bl	800de24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c508:	429a      	cmp	r2, r3
 800c50a:	d102      	bne.n	800c512 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c50c:	2301      	movs	r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e001      	b.n	800c516 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c516:	f001 fcb5 	bl	800de84 <vPortExitCritical>

	return xReturn;
 800c51a:	68fb      	ldr	r3, [r7, #12]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	e014      	b.n	800c55e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c534:	4a0f      	ldr	r2, [pc, #60]	; (800c574 <vQueueAddToRegistry+0x50>)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10b      	bne.n	800c558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c540:	490c      	ldr	r1, [pc, #48]	; (800c574 <vQueueAddToRegistry+0x50>)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c54a:	4a0a      	ldr	r2, [pc, #40]	; (800c574 <vQueueAddToRegistry+0x50>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	4413      	add	r3, r2
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c556:	e006      	b.n	800c566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3301      	adds	r3, #1
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b07      	cmp	r3, #7
 800c562:	d9e7      	bls.n	800c534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	2000565c 	.word	0x2000565c

0800c578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c588:	f001 fc4c 	bl	800de24 <vPortEnterCritical>
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c592:	b25b      	sxtb	r3, r3
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d103      	bne.n	800c5a2 <vQueueWaitForMessageRestricted+0x2a>
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	d103      	bne.n	800c5b8 <vQueueWaitForMessageRestricted+0x40>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b8:	f001 fc64 	bl	800de84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d106      	bne.n	800c5d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3324      	adds	r3, #36	; 0x24
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fcd3 	bl	800cf78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5d2:	6978      	ldr	r0, [r7, #20]
 800c5d4:	f7ff ff26 	bl	800c424 <prvUnlockQueue>
	}
 800c5d8:	bf00      	nop
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08e      	sub	sp, #56	; 0x38
 800c5e4:	af04      	add	r7, sp, #16
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	623b      	str	r3, [r7, #32]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xTaskCreateStatic+0x46>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	61fb      	str	r3, [r7, #28]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c626:	23bc      	movs	r3, #188	; 0xbc
 800c628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2bbc      	cmp	r3, #188	; 0xbc
 800c62e:	d00a      	beq.n	800c646 <xTaskCreateStatic+0x66>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	61bb      	str	r3, [r7, #24]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d01e      	beq.n	800c68c <xTaskCreateStatic+0xac>
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01b      	beq.n	800c68c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c65c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	2202      	movs	r2, #2
 800c662:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c666:	2300      	movs	r3, #0
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	f107 0314 	add.w	r3, r7, #20
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	68b9      	ldr	r1, [r7, #8]
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f000 f850 	bl	800c724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c686:	f000 f8f3 	bl	800c870 <prvAddNewTaskToReadyList>
 800c68a:	e001      	b.n	800c690 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c690:	697b      	ldr	r3, [r7, #20]
	}
 800c692:	4618      	mov	r0, r3
 800c694:	3728      	adds	r7, #40	; 0x28
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b08c      	sub	sp, #48	; 0x30
 800c69e:	af04      	add	r7, sp, #16
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	603b      	str	r3, [r7, #0]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fcda 	bl	800e068 <pvPortMalloc>
 800c6b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00e      	beq.n	800c6da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6bc:	20bc      	movs	r0, #188	; 0xbc
 800c6be:	f001 fcd3 	bl	800e068 <pvPortMalloc>
 800c6c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c6d0:	e005      	b.n	800c6de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6d2:	6978      	ldr	r0, [r7, #20]
 800c6d4:	f001 fd94 	bl	800e200 <vPortFree>
 800c6d8:	e001      	b.n	800c6de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d017      	beq.n	800c714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6ec:	88fa      	ldrh	r2, [r7, #6]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	68b9      	ldr	r1, [r7, #8]
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 f80e 	bl	800c724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c708:	69f8      	ldr	r0, [r7, #28]
 800c70a:	f000 f8b1 	bl	800c870 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c70e:	2301      	movs	r3, #1
 800c710:	61bb      	str	r3, [r7, #24]
 800c712:	e002      	b.n	800c71a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c714:	f04f 33ff 	mov.w	r3, #4294967295
 800c718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c71a:	69bb      	ldr	r3, [r7, #24]
	}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3720      	adds	r7, #32
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	461a      	mov	r2, r3
 800c73c:	21a5      	movs	r1, #165	; 0xa5
 800c73e:	f001 fff5 	bl	800e72c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c74c:	3b01      	subs	r3, #1
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	f023 0307 	bic.w	r3, r3, #7
 800c75a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	617b      	str	r3, [r7, #20]
}
 800c778:	bf00      	nop
 800c77a:	e7fe      	b.n	800c77a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d01f      	beq.n	800c7c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c782:	2300      	movs	r3, #0
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	e012      	b.n	800c7ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	7819      	ldrb	r1, [r3, #0]
 800c790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4413      	add	r3, r2
 800c796:	3334      	adds	r3, #52	; 0x34
 800c798:	460a      	mov	r2, r1
 800c79a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2b0f      	cmp	r3, #15
 800c7b2:	d9e9      	bls.n	800c788 <prvInitialiseNewTask+0x64>
 800c7b4:	e000      	b.n	800c7b8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c7b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7c0:	e003      	b.n	800c7ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	2b37      	cmp	r3, #55	; 0x37
 800c7ce:	d901      	bls.n	800c7d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7d0:	2337      	movs	r3, #55	; 0x37
 800c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff f978 	bl	800bae0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	3318      	adds	r3, #24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff f973 	bl	800bae0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	3354      	adds	r3, #84	; 0x54
 800c824:	2260      	movs	r2, #96	; 0x60
 800c826:	2100      	movs	r1, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 ff7f 	bl	800e72c <memset>
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	4a0c      	ldr	r2, [pc, #48]	; (800c864 <prvInitialiseNewTask+0x140>)
 800c832:	659a      	str	r2, [r3, #88]	; 0x58
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	4a0c      	ldr	r2, [pc, #48]	; (800c868 <prvInitialiseNewTask+0x144>)
 800c838:	65da      	str	r2, [r3, #92]	; 0x5c
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	4a0b      	ldr	r2, [pc, #44]	; (800c86c <prvInitialiseNewTask+0x148>)
 800c83e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	69b8      	ldr	r0, [r7, #24]
 800c846:	f001 f9c3 	bl	800dbd0 <pxPortInitialiseStack>
 800c84a:	4602      	mov	r2, r0
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c85c:	bf00      	nop
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	080145c8 	.word	0x080145c8
 800c868:	080145e8 	.word	0x080145e8
 800c86c:	080145a8 	.word	0x080145a8

0800c870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c878:	f001 fad4 	bl	800de24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c87c:	4b2d      	ldr	r3, [pc, #180]	; (800c934 <prvAddNewTaskToReadyList+0xc4>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3301      	adds	r3, #1
 800c882:	4a2c      	ldr	r2, [pc, #176]	; (800c934 <prvAddNewTaskToReadyList+0xc4>)
 800c884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c886:	4b2c      	ldr	r3, [pc, #176]	; (800c938 <prvAddNewTaskToReadyList+0xc8>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c88e:	4a2a      	ldr	r2, [pc, #168]	; (800c938 <prvAddNewTaskToReadyList+0xc8>)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c894:	4b27      	ldr	r3, [pc, #156]	; (800c934 <prvAddNewTaskToReadyList+0xc4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d110      	bne.n	800c8be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c89c:	f000 fc98 	bl	800d1d0 <prvInitialiseTaskLists>
 800c8a0:	e00d      	b.n	800c8be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8a2:	4b26      	ldr	r3, [pc, #152]	; (800c93c <prvAddNewTaskToReadyList+0xcc>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8aa:	4b23      	ldr	r3, [pc, #140]	; (800c938 <prvAddNewTaskToReadyList+0xc8>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d802      	bhi.n	800c8be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8b8:	4a1f      	ldr	r2, [pc, #124]	; (800c938 <prvAddNewTaskToReadyList+0xc8>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8be:	4b20      	ldr	r3, [pc, #128]	; (800c940 <prvAddNewTaskToReadyList+0xd0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <prvAddNewTaskToReadyList+0xd0>)
 800c8c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8c8:	4b1d      	ldr	r3, [pc, #116]	; (800c940 <prvAddNewTaskToReadyList+0xd0>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d4:	4b1b      	ldr	r3, [pc, #108]	; (800c944 <prvAddNewTaskToReadyList+0xd4>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d903      	bls.n	800c8e4 <prvAddNewTaskToReadyList+0x74>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	4a18      	ldr	r2, [pc, #96]	; (800c944 <prvAddNewTaskToReadyList+0xd4>)
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4a15      	ldr	r2, [pc, #84]	; (800c948 <prvAddNewTaskToReadyList+0xd8>)
 800c8f2:	441a      	add	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4610      	mov	r0, r2
 800c8fc:	f7ff f8fd 	bl	800bafa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c900:	f001 fac0 	bl	800de84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c904:	4b0d      	ldr	r3, [pc, #52]	; (800c93c <prvAddNewTaskToReadyList+0xcc>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00e      	beq.n	800c92a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c90c:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <prvAddNewTaskToReadyList+0xc8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c916:	429a      	cmp	r2, r3
 800c918:	d207      	bcs.n	800c92a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c91a:	4b0c      	ldr	r3, [pc, #48]	; (800c94c <prvAddNewTaskToReadyList+0xdc>)
 800c91c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c92a:	bf00      	nop
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	200011bc 	.word	0x200011bc
 800c938:	20000ce8 	.word	0x20000ce8
 800c93c:	200011c8 	.word	0x200011c8
 800c940:	200011d8 	.word	0x200011d8
 800c944:	200011c4 	.word	0x200011c4
 800c948:	20000cec 	.word	0x20000cec
 800c94c:	e000ed04 	.word	0xe000ed04

0800c950 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c958:	f001 fa64 	bl	800de24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <vTaskDelete+0x18>
 800c962:	4b2c      	ldr	r3, [pc, #176]	; (800ca14 <vTaskDelete+0xc4>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	e000      	b.n	800c96a <vTaskDelete+0x1a>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3304      	adds	r3, #4
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff f91f 	bl	800bbb4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3318      	adds	r3, #24
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff f916 	bl	800bbb4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c988:	4b23      	ldr	r3, [pc, #140]	; (800ca18 <vTaskDelete+0xc8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	4a22      	ldr	r2, [pc, #136]	; (800ca18 <vTaskDelete+0xc8>)
 800c990:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c992:	4b20      	ldr	r3, [pc, #128]	; (800ca14 <vTaskDelete+0xc4>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d10b      	bne.n	800c9b4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	481e      	ldr	r0, [pc, #120]	; (800ca1c <vTaskDelete+0xcc>)
 800c9a4:	f7ff f8a9 	bl	800bafa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ca20 <vTaskDelete+0xd0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	4a1c      	ldr	r2, [pc, #112]	; (800ca20 <vTaskDelete+0xd0>)
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	e009      	b.n	800c9c8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c9b4:	4b1b      	ldr	r3, [pc, #108]	; (800ca24 <vTaskDelete+0xd4>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ca24 <vTaskDelete+0xd4>)
 800c9bc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f000 fc74 	bl	800d2ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c9c4:	f000 fca6 	bl	800d314 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c9c8:	f001 fa5c 	bl	800de84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c9cc:	4b16      	ldr	r3, [pc, #88]	; (800ca28 <vTaskDelete+0xd8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d01b      	beq.n	800ca0c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800c9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ca14 <vTaskDelete+0xc4>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d116      	bne.n	800ca0c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c9de:	4b13      	ldr	r3, [pc, #76]	; (800ca2c <vTaskDelete+0xdc>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <vTaskDelete+0xac>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	60bb      	str	r3, [r7, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	e7fe      	b.n	800c9fa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800c9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <vTaskDelete+0xe0>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca0c:	bf00      	nop
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20000ce8 	.word	0x20000ce8
 800ca18:	200011d8 	.word	0x200011d8
 800ca1c:	20001190 	.word	0x20001190
 800ca20:	200011a4 	.word	0x200011a4
 800ca24:	200011bc 	.word	0x200011bc
 800ca28:	200011c8 	.word	0x200011c8
 800ca2c:	200011e4 	.word	0x200011e4
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d017      	beq.n	800ca76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <vTaskDelay+0x60>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00a      	beq.n	800ca64 <vTaskDelay+0x30>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	60bb      	str	r3, [r7, #8]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ca64:	f000 f88a 	bl	800cb7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fd0e 	bl	800d48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca70:	f000 f892 	bl	800cb98 <xTaskResumeAll>
 800ca74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d107      	bne.n	800ca8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ca7c:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <vTaskDelay+0x64>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca8c:	bf00      	nop
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200011e4 	.word	0x200011e4
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	; 0x28
 800caa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800caaa:	463a      	mov	r2, r7
 800caac:	1d39      	adds	r1, r7, #4
 800caae:	f107 0308 	add.w	r3, r7, #8
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe ffc0 	bl	800ba38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	9202      	str	r2, [sp, #8]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	2300      	movs	r3, #0
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	460a      	mov	r2, r1
 800caca:	4924      	ldr	r1, [pc, #144]	; (800cb5c <vTaskStartScheduler+0xc0>)
 800cacc:	4824      	ldr	r0, [pc, #144]	; (800cb60 <vTaskStartScheduler+0xc4>)
 800cace:	f7ff fd87 	bl	800c5e0 <xTaskCreateStatic>
 800cad2:	4603      	mov	r3, r0
 800cad4:	4a23      	ldr	r2, [pc, #140]	; (800cb64 <vTaskStartScheduler+0xc8>)
 800cad6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cad8:	4b22      	ldr	r3, [pc, #136]	; (800cb64 <vTaskStartScheduler+0xc8>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cae0:	2301      	movs	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	e001      	b.n	800caea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d102      	bne.n	800caf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caf0:	f000 fd20 	bl	800d534 <xTimerCreateTimerTask>
 800caf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d11b      	bne.n	800cb34 <vTaskStartScheduler+0x98>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	613b      	str	r3, [r7, #16]
}
 800cb0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb10:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <vTaskStartScheduler+0xcc>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3354      	adds	r3, #84	; 0x54
 800cb16:	4a15      	ldr	r2, [pc, #84]	; (800cb6c <vTaskStartScheduler+0xd0>)
 800cb18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb1a:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <vTaskStartScheduler+0xd4>)
 800cb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb22:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <vTaskStartScheduler+0xd8>)
 800cb24:	2201      	movs	r2, #1
 800cb26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb28:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <vTaskStartScheduler+0xdc>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb2e:	f001 f8d7 	bl	800dce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb32:	e00e      	b.n	800cb52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3a:	d10a      	bne.n	800cb52 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	60fb      	str	r3, [r7, #12]
}
 800cb4e:	bf00      	nop
 800cb50:	e7fe      	b.n	800cb50 <vTaskStartScheduler+0xb4>
}
 800cb52:	bf00      	nop
 800cb54:	3718      	adds	r7, #24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	08014420 	.word	0x08014420
 800cb60:	0800d1a1 	.word	0x0800d1a1
 800cb64:	200011e0 	.word	0x200011e0
 800cb68:	20000ce8 	.word	0x20000ce8
 800cb6c:	2000003c 	.word	0x2000003c
 800cb70:	200011dc 	.word	0x200011dc
 800cb74:	200011c8 	.word	0x200011c8
 800cb78:	200011c0 	.word	0x200011c0

0800cb7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cb80:	4b04      	ldr	r3, [pc, #16]	; (800cb94 <vTaskSuspendAll+0x18>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3301      	adds	r3, #1
 800cb86:	4a03      	ldr	r2, [pc, #12]	; (800cb94 <vTaskSuspendAll+0x18>)
 800cb88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb8a:	bf00      	nop
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	200011e4 	.word	0x200011e4

0800cb98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cba6:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <xTaskResumeAll+0x118>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	603b      	str	r3, [r7, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cbc4:	f001 f92e 	bl	800de24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cbc8:	4b39      	ldr	r3, [pc, #228]	; (800ccb0 <xTaskResumeAll+0x118>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	4a38      	ldr	r2, [pc, #224]	; (800ccb0 <xTaskResumeAll+0x118>)
 800cbd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbd2:	4b37      	ldr	r3, [pc, #220]	; (800ccb0 <xTaskResumeAll+0x118>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d162      	bne.n	800cca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbda:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <xTaskResumeAll+0x11c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d05e      	beq.n	800cca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbe2:	e02f      	b.n	800cc44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe4:	4b34      	ldr	r3, [pc, #208]	; (800ccb8 <xTaskResumeAll+0x120>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3318      	adds	r3, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe ffdf 	bl	800bbb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe ffda 	bl	800bbb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc04:	4b2d      	ldr	r3, [pc, #180]	; (800ccbc <xTaskResumeAll+0x124>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d903      	bls.n	800cc14 <xTaskResumeAll+0x7c>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	4a2a      	ldr	r2, [pc, #168]	; (800ccbc <xTaskResumeAll+0x124>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4a27      	ldr	r2, [pc, #156]	; (800ccc0 <xTaskResumeAll+0x128>)
 800cc22:	441a      	add	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3304      	adds	r3, #4
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f7fe ff65 	bl	800bafa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	4b23      	ldr	r3, [pc, #140]	; (800ccc4 <xTaskResumeAll+0x12c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d302      	bcc.n	800cc44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cc3e:	4b22      	ldr	r3, [pc, #136]	; (800ccc8 <xTaskResumeAll+0x130>)
 800cc40:	2201      	movs	r2, #1
 800cc42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <xTaskResumeAll+0x120>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1cb      	bne.n	800cbe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc52:	f000 fb5f 	bl	800d314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc56:	4b1d      	ldr	r3, [pc, #116]	; (800cccc <xTaskResumeAll+0x134>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d010      	beq.n	800cc84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc62:	f000 f847 	bl	800ccf4 <xTaskIncrementTick>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cc6c:	4b16      	ldr	r3, [pc, #88]	; (800ccc8 <xTaskResumeAll+0x130>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1f1      	bne.n	800cc62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cc7e:	4b13      	ldr	r3, [pc, #76]	; (800cccc <xTaskResumeAll+0x134>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc84:	4b10      	ldr	r3, [pc, #64]	; (800ccc8 <xTaskResumeAll+0x130>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d009      	beq.n	800cca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc90:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <xTaskResumeAll+0x138>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cca0:	f001 f8f0 	bl	800de84 <vPortExitCritical>

	return xAlreadyYielded;
 800cca4:	68bb      	ldr	r3, [r7, #8]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	200011e4 	.word	0x200011e4
 800ccb4:	200011bc 	.word	0x200011bc
 800ccb8:	2000117c 	.word	0x2000117c
 800ccbc:	200011c4 	.word	0x200011c4
 800ccc0:	20000cec 	.word	0x20000cec
 800ccc4:	20000ce8 	.word	0x20000ce8
 800ccc8:	200011d0 	.word	0x200011d0
 800cccc:	200011cc 	.word	0x200011cc
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ccda:	4b05      	ldr	r3, [pc, #20]	; (800ccf0 <xTaskGetTickCount+0x1c>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cce0:	687b      	ldr	r3, [r7, #4]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	200011c0 	.word	0x200011c0

0800ccf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccfe:	4b4f      	ldr	r3, [pc, #316]	; (800ce3c <xTaskIncrementTick+0x148>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f040 808f 	bne.w	800ce26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd08:	4b4d      	ldr	r3, [pc, #308]	; (800ce40 <xTaskIncrementTick+0x14c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd10:	4a4b      	ldr	r2, [pc, #300]	; (800ce40 <xTaskIncrementTick+0x14c>)
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d120      	bne.n	800cd5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd1c:	4b49      	ldr	r3, [pc, #292]	; (800ce44 <xTaskIncrementTick+0x150>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <xTaskIncrementTick+0x48>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	603b      	str	r3, [r7, #0]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <xTaskIncrementTick+0x46>
 800cd3c:	4b41      	ldr	r3, [pc, #260]	; (800ce44 <xTaskIncrementTick+0x150>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	4b41      	ldr	r3, [pc, #260]	; (800ce48 <xTaskIncrementTick+0x154>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a3f      	ldr	r2, [pc, #252]	; (800ce44 <xTaskIncrementTick+0x150>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	4a3f      	ldr	r2, [pc, #252]	; (800ce48 <xTaskIncrementTick+0x154>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	4b3e      	ldr	r3, [pc, #248]	; (800ce4c <xTaskIncrementTick+0x158>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a3d      	ldr	r2, [pc, #244]	; (800ce4c <xTaskIncrementTick+0x158>)
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	f000 fadb 	bl	800d314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd5e:	4b3c      	ldr	r3, [pc, #240]	; (800ce50 <xTaskIncrementTick+0x15c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d349      	bcc.n	800cdfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd68:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <xTaskIncrementTick+0x150>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd72:	4b37      	ldr	r3, [pc, #220]	; (800ce50 <xTaskIncrementTick+0x15c>)
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	601a      	str	r2, [r3, #0]
					break;
 800cd7a:	e03f      	b.n	800cdfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd7c:	4b31      	ldr	r3, [pc, #196]	; (800ce44 <xTaskIncrementTick+0x150>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d203      	bcs.n	800cd9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd94:	4a2e      	ldr	r2, [pc, #184]	; (800ce50 <xTaskIncrementTick+0x15c>)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd9a:	e02f      	b.n	800cdfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	3304      	adds	r3, #4
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe ff07 	bl	800bbb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d004      	beq.n	800cdb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	3318      	adds	r3, #24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fefe 	bl	800bbb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbc:	4b25      	ldr	r3, [pc, #148]	; (800ce54 <xTaskIncrementTick+0x160>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d903      	bls.n	800cdcc <xTaskIncrementTick+0xd8>
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc8:	4a22      	ldr	r2, [pc, #136]	; (800ce54 <xTaskIncrementTick+0x160>)
 800cdca:	6013      	str	r3, [r2, #0]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4a1f      	ldr	r2, [pc, #124]	; (800ce58 <xTaskIncrementTick+0x164>)
 800cdda:	441a      	add	r2, r3
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7fe fe89 	bl	800bafa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdec:	4b1b      	ldr	r3, [pc, #108]	; (800ce5c <xTaskIncrementTick+0x168>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d3b8      	bcc.n	800cd68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdfa:	e7b5      	b.n	800cd68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cdfc:	4b17      	ldr	r3, [pc, #92]	; (800ce5c <xTaskIncrementTick+0x168>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce02:	4915      	ldr	r1, [pc, #84]	; (800ce58 <xTaskIncrementTick+0x164>)
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d901      	bls.n	800ce18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ce14:	2301      	movs	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce18:	4b11      	ldr	r3, [pc, #68]	; (800ce60 <xTaskIncrementTick+0x16c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d007      	beq.n	800ce30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	e004      	b.n	800ce30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce26:	4b0f      	ldr	r3, [pc, #60]	; (800ce64 <xTaskIncrementTick+0x170>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	4a0d      	ldr	r2, [pc, #52]	; (800ce64 <xTaskIncrementTick+0x170>)
 800ce2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce30:	697b      	ldr	r3, [r7, #20]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200011e4 	.word	0x200011e4
 800ce40:	200011c0 	.word	0x200011c0
 800ce44:	20001174 	.word	0x20001174
 800ce48:	20001178 	.word	0x20001178
 800ce4c:	200011d4 	.word	0x200011d4
 800ce50:	200011dc 	.word	0x200011dc
 800ce54:	200011c4 	.word	0x200011c4
 800ce58:	20000cec 	.word	0x20000cec
 800ce5c:	20000ce8 	.word	0x20000ce8
 800ce60:	200011d0 	.word	0x200011d0
 800ce64:	200011cc 	.word	0x200011cc

0800ce68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce6e:	4b2a      	ldr	r3, [pc, #168]	; (800cf18 <vTaskSwitchContext+0xb0>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d003      	beq.n	800ce7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce76:	4b29      	ldr	r3, [pc, #164]	; (800cf1c <vTaskSwitchContext+0xb4>)
 800ce78:	2201      	movs	r2, #1
 800ce7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce7c:	e046      	b.n	800cf0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ce7e:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <vTaskSwitchContext+0xb4>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce84:	4b26      	ldr	r3, [pc, #152]	; (800cf20 <vTaskSwitchContext+0xb8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	e010      	b.n	800ceae <vTaskSwitchContext+0x46>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10a      	bne.n	800cea8 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	607b      	str	r3, [r7, #4]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <vTaskSwitchContext+0x3e>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	491d      	ldr	r1, [pc, #116]	; (800cf24 <vTaskSwitchContext+0xbc>)
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	440b      	add	r3, r1
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d0e4      	beq.n	800ce8c <vTaskSwitchContext+0x24>
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <vTaskSwitchContext+0xbc>)
 800cece:	4413      	add	r3, r2
 800ced0:	60bb      	str	r3, [r7, #8]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	605a      	str	r2, [r3, #4]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	685a      	ldr	r2, [r3, #4]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	3308      	adds	r3, #8
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d104      	bne.n	800cef2 <vTaskSwitchContext+0x8a>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	4a0b      	ldr	r2, [pc, #44]	; (800cf28 <vTaskSwitchContext+0xc0>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	4a08      	ldr	r2, [pc, #32]	; (800cf20 <vTaskSwitchContext+0xb8>)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf02:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <vTaskSwitchContext+0xc0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3354      	adds	r3, #84	; 0x54
 800cf08:	4a08      	ldr	r2, [pc, #32]	; (800cf2c <vTaskSwitchContext+0xc4>)
 800cf0a:	6013      	str	r3, [r2, #0]
}
 800cf0c:	bf00      	nop
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	200011e4 	.word	0x200011e4
 800cf1c:	200011d0 	.word	0x200011d0
 800cf20:	200011c4 	.word	0x200011c4
 800cf24:	20000cec 	.word	0x20000cec
 800cf28:	20000ce8 	.word	0x20000ce8
 800cf2c:	2000003c 	.word	0x2000003c

0800cf30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10a      	bne.n	800cf56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	60fb      	str	r3, [r7, #12]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf56:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <vTaskPlaceOnEventList+0x44>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3318      	adds	r3, #24
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7fe fdef 	bl	800bb42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf64:	2101      	movs	r1, #1
 800cf66:	6838      	ldr	r0, [r7, #0]
 800cf68:	f000 fa90 	bl	800d48c <prvAddCurrentTaskToDelayedList>
}
 800cf6c:	bf00      	nop
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000ce8 	.word	0x20000ce8

0800cf78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	617b      	str	r3, [r7, #20]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfa0:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <vTaskPlaceOnEventListRestricted+0x54>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3318      	adds	r3, #24
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7fe fda6 	bl	800bafa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cfba:	6879      	ldr	r1, [r7, #4]
 800cfbc:	68b8      	ldr	r0, [r7, #8]
 800cfbe:	f000 fa65 	bl	800d48c <prvAddCurrentTaskToDelayedList>
	}
 800cfc2:	bf00      	nop
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20000ce8 	.word	0x20000ce8

0800cfd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10a      	bne.n	800cffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	60fb      	str	r3, [r7, #12]
}
 800cff8:	bf00      	nop
 800cffa:	e7fe      	b.n	800cffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	3318      	adds	r3, #24
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fdd7 	bl	800bbb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d006:	4b1e      	ldr	r3, [pc, #120]	; (800d080 <xTaskRemoveFromEventList+0xb0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d11d      	bne.n	800d04a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	3304      	adds	r3, #4
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fdce 	bl	800bbb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01c:	4b19      	ldr	r3, [pc, #100]	; (800d084 <xTaskRemoveFromEventList+0xb4>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <xTaskRemoveFromEventList+0x5c>
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d028:	4a16      	ldr	r2, [pc, #88]	; (800d084 <xTaskRemoveFromEventList+0xb4>)
 800d02a:	6013      	str	r3, [r2, #0]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d030:	4613      	mov	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4a13      	ldr	r2, [pc, #76]	; (800d088 <xTaskRemoveFromEventList+0xb8>)
 800d03a:	441a      	add	r2, r3
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3304      	adds	r3, #4
 800d040:	4619      	mov	r1, r3
 800d042:	4610      	mov	r0, r2
 800d044:	f7fe fd59 	bl	800bafa <vListInsertEnd>
 800d048:	e005      	b.n	800d056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	3318      	adds	r3, #24
 800d04e:	4619      	mov	r1, r3
 800d050:	480e      	ldr	r0, [pc, #56]	; (800d08c <xTaskRemoveFromEventList+0xbc>)
 800d052:	f7fe fd52 	bl	800bafa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05a:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <xTaskRemoveFromEventList+0xc0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	429a      	cmp	r2, r3
 800d062:	d905      	bls.n	800d070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d064:	2301      	movs	r3, #1
 800d066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d068:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <xTaskRemoveFromEventList+0xc4>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	e001      	b.n	800d074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d074:	697b      	ldr	r3, [r7, #20]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200011e4 	.word	0x200011e4
 800d084:	200011c4 	.word	0x200011c4
 800d088:	20000cec 	.word	0x20000cec
 800d08c:	2000117c 	.word	0x2000117c
 800d090:	20000ce8 	.word	0x20000ce8
 800d094:	200011d0 	.word	0x200011d0

0800d098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0a0:	4b06      	ldr	r3, [pc, #24]	; (800d0bc <vTaskInternalSetTimeOutState+0x24>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <vTaskInternalSetTimeOutState+0x28>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	605a      	str	r2, [r3, #4]
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	200011d4 	.word	0x200011d4
 800d0c0:	200011c0 	.word	0x200011c0

0800d0c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10a      	bne.n	800d0ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	613b      	str	r3, [r7, #16]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d106:	f000 fe8d 	bl	800de24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <xTaskCheckForTimeOut+0xbc>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d122:	d102      	bne.n	800d12a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d124:	2300      	movs	r3, #0
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	e023      	b.n	800d172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	4b15      	ldr	r3, [pc, #84]	; (800d184 <xTaskCheckForTimeOut+0xc0>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	429a      	cmp	r2, r3
 800d134:	d007      	beq.n	800d146 <xTaskCheckForTimeOut+0x82>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d302      	bcc.n	800d146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d140:	2301      	movs	r3, #1
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	e015      	b.n	800d172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d20b      	bcs.n	800d168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	1ad2      	subs	r2, r2, r3
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff ff9b 	bl	800d098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d162:	2300      	movs	r3, #0
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	e004      	b.n	800d172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2200      	movs	r2, #0
 800d16c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d16e:	2301      	movs	r3, #1
 800d170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d172:	f000 fe87 	bl	800de84 <vPortExitCritical>

	return xReturn;
 800d176:	69fb      	ldr	r3, [r7, #28]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	200011c0 	.word	0x200011c0
 800d184:	200011d4 	.word	0x200011d4

0800d188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d18c:	4b03      	ldr	r3, [pc, #12]	; (800d19c <vTaskMissedYield+0x14>)
 800d18e:	2201      	movs	r2, #1
 800d190:	601a      	str	r2, [r3, #0]
}
 800d192:	bf00      	nop
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	200011d0 	.word	0x200011d0

0800d1a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d1a8:	f000 f852 	bl	800d250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1ac:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <prvIdleTask+0x28>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d9f9      	bls.n	800d1a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1b4:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <prvIdleTask+0x2c>)
 800d1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1c4:	e7f0      	b.n	800d1a8 <prvIdleTask+0x8>
 800d1c6:	bf00      	nop
 800d1c8:	20000cec 	.word	0x20000cec
 800d1cc:	e000ed04 	.word	0xe000ed04

0800d1d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	e00c      	b.n	800d1f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4a12      	ldr	r2, [pc, #72]	; (800d230 <prvInitialiseTaskLists+0x60>)
 800d1e8:	4413      	add	r3, r2
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fe fc58 	bl	800baa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	607b      	str	r3, [r7, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b37      	cmp	r3, #55	; 0x37
 800d1fa:	d9ef      	bls.n	800d1dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1fc:	480d      	ldr	r0, [pc, #52]	; (800d234 <prvInitialiseTaskLists+0x64>)
 800d1fe:	f7fe fc4f 	bl	800baa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d202:	480d      	ldr	r0, [pc, #52]	; (800d238 <prvInitialiseTaskLists+0x68>)
 800d204:	f7fe fc4c 	bl	800baa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d208:	480c      	ldr	r0, [pc, #48]	; (800d23c <prvInitialiseTaskLists+0x6c>)
 800d20a:	f7fe fc49 	bl	800baa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d20e:	480c      	ldr	r0, [pc, #48]	; (800d240 <prvInitialiseTaskLists+0x70>)
 800d210:	f7fe fc46 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d214:	480b      	ldr	r0, [pc, #44]	; (800d244 <prvInitialiseTaskLists+0x74>)
 800d216:	f7fe fc43 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d21a:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <prvInitialiseTaskLists+0x78>)
 800d21c:	4a05      	ldr	r2, [pc, #20]	; (800d234 <prvInitialiseTaskLists+0x64>)
 800d21e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <prvInitialiseTaskLists+0x7c>)
 800d222:	4a05      	ldr	r2, [pc, #20]	; (800d238 <prvInitialiseTaskLists+0x68>)
 800d224:	601a      	str	r2, [r3, #0]
}
 800d226:	bf00      	nop
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20000cec 	.word	0x20000cec
 800d234:	2000114c 	.word	0x2000114c
 800d238:	20001160 	.word	0x20001160
 800d23c:	2000117c 	.word	0x2000117c
 800d240:	20001190 	.word	0x20001190
 800d244:	200011a8 	.word	0x200011a8
 800d248:	20001174 	.word	0x20001174
 800d24c:	20001178 	.word	0x20001178

0800d250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d256:	e019      	b.n	800d28c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d258:	f000 fde4 	bl	800de24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25c:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <prvCheckTasksWaitingTermination+0x50>)
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3304      	adds	r3, #4
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe fca3 	bl	800bbb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d26e:	4b0d      	ldr	r3, [pc, #52]	; (800d2a4 <prvCheckTasksWaitingTermination+0x54>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3b01      	subs	r3, #1
 800d274:	4a0b      	ldr	r2, [pc, #44]	; (800d2a4 <prvCheckTasksWaitingTermination+0x54>)
 800d276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d278:	4b0b      	ldr	r3, [pc, #44]	; (800d2a8 <prvCheckTasksWaitingTermination+0x58>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	4a0a      	ldr	r2, [pc, #40]	; (800d2a8 <prvCheckTasksWaitingTermination+0x58>)
 800d280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d282:	f000 fdff 	bl	800de84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f810 	bl	800d2ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <prvCheckTasksWaitingTermination+0x58>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e1      	bne.n	800d258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	20001190 	.word	0x20001190
 800d2a4:	200011bc 	.word	0x200011bc
 800d2a8:	200011a4 	.word	0x200011a4

0800d2ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3354      	adds	r3, #84	; 0x54
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f002 f9ff 	bl	800f6bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d108      	bne.n	800d2da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 ff97 	bl	800e200 <vPortFree>
				vPortFree( pxTCB );
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 ff94 	bl	800e200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2d8:	e018      	b.n	800d30c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d103      	bne.n	800d2ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 ff8b 	bl	800e200 <vPortFree>
	}
 800d2ea:	e00f      	b.n	800d30c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d00a      	beq.n	800d30c <prvDeleteTCB+0x60>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60fb      	str	r3, [r7, #12]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <prvDeleteTCB+0x5e>
	}
 800d30c:	bf00      	nop
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d31a:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <prvResetNextTaskUnblockTime+0x38>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d104      	bne.n	800d32e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d324:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <prvResetNextTaskUnblockTime+0x3c>)
 800d326:	f04f 32ff 	mov.w	r2, #4294967295
 800d32a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d32c:	e008      	b.n	800d340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d32e:	4b07      	ldr	r3, [pc, #28]	; (800d34c <prvResetNextTaskUnblockTime+0x38>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	4a04      	ldr	r2, [pc, #16]	; (800d350 <prvResetNextTaskUnblockTime+0x3c>)
 800d33e:	6013      	str	r3, [r2, #0]
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	20001174 	.word	0x20001174
 800d350:	200011dc 	.word	0x200011dc

0800d354 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d35a:	4b05      	ldr	r3, [pc, #20]	; (800d370 <xTaskGetCurrentTaskHandle+0x1c>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d360:	687b      	ldr	r3, [r7, #4]
	}
 800d362:	4618      	mov	r0, r3
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20000ce8 	.word	0x20000ce8

0800d374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d37a:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <xTaskGetSchedulerState+0x34>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d102      	bne.n	800d388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d382:	2301      	movs	r3, #1
 800d384:	607b      	str	r3, [r7, #4]
 800d386:	e008      	b.n	800d39a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d388:	4b08      	ldr	r3, [pc, #32]	; (800d3ac <xTaskGetSchedulerState+0x38>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d102      	bne.n	800d396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d390:	2302      	movs	r3, #2
 800d392:	607b      	str	r3, [r7, #4]
 800d394:	e001      	b.n	800d39a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d396:	2300      	movs	r3, #0
 800d398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d39a:	687b      	ldr	r3, [r7, #4]
	}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	200011c8 	.word	0x200011c8
 800d3ac:	200011e4 	.word	0x200011e4

0800d3b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d056      	beq.n	800d474 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3c6:	4b2e      	ldr	r3, [pc, #184]	; (800d480 <xTaskPriorityDisinherit+0xd0>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d00a      	beq.n	800d3e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	60fb      	str	r3, [r7, #12]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	60bb      	str	r3, [r7, #8]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d408:	1e5a      	subs	r2, r3, #1
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d416:	429a      	cmp	r2, r3
 800d418:	d02c      	beq.n	800d474 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d128      	bne.n	800d474 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	3304      	adds	r3, #4
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fbc4 	bl	800bbb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d444:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <xTaskPriorityDisinherit+0xd4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d903      	bls.n	800d454 <xTaskPriorityDisinherit+0xa4>
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d450:	4a0c      	ldr	r2, [pc, #48]	; (800d484 <xTaskPriorityDisinherit+0xd4>)
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d458:	4613      	mov	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4a09      	ldr	r2, [pc, #36]	; (800d488 <xTaskPriorityDisinherit+0xd8>)
 800d462:	441a      	add	r2, r3
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	3304      	adds	r3, #4
 800d468:	4619      	mov	r1, r3
 800d46a:	4610      	mov	r0, r2
 800d46c:	f7fe fb45 	bl	800bafa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d470:	2301      	movs	r3, #1
 800d472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d474:	697b      	ldr	r3, [r7, #20]
	}
 800d476:	4618      	mov	r0, r3
 800d478:	3718      	adds	r7, #24
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	20000ce8 	.word	0x20000ce8
 800d484:	200011c4 	.word	0x200011c4
 800d488:	20000cec 	.word	0x20000cec

0800d48c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d496:	4b21      	ldr	r3, [pc, #132]	; (800d51c <prvAddCurrentTaskToDelayedList+0x90>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d49c:	4b20      	ldr	r3, [pc, #128]	; (800d520 <prvAddCurrentTaskToDelayedList+0x94>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fb86 	bl	800bbb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ae:	d10a      	bne.n	800d4c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b6:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4819      	ldr	r0, [pc, #100]	; (800d524 <prvAddCurrentTaskToDelayedList+0x98>)
 800d4c0:	f7fe fb1b 	bl	800bafa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4c4:	e026      	b.n	800d514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4ce:	4b14      	ldr	r3, [pc, #80]	; (800d520 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d209      	bcs.n	800d4f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4de:	4b12      	ldr	r3, [pc, #72]	; (800d528 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fe fb29 	bl	800bb42 <vListInsert>
}
 800d4f0:	e010      	b.n	800d514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f2:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fe fb1f 	bl	800bb42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d504:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68ba      	ldr	r2, [r7, #8]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d202      	bcs.n	800d514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d50e:	4a08      	ldr	r2, [pc, #32]	; (800d530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	6013      	str	r3, [r2, #0]
}
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	200011c0 	.word	0x200011c0
 800d520:	20000ce8 	.word	0x20000ce8
 800d524:	200011a8 	.word	0x200011a8
 800d528:	20001178 	.word	0x20001178
 800d52c:	20001174 	.word	0x20001174
 800d530:	200011dc 	.word	0x200011dc

0800d534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	; 0x28
 800d538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d53e:	f000 fb07 	bl	800db50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d542:	4b1c      	ldr	r3, [pc, #112]	; (800d5b4 <xTimerCreateTimerTask+0x80>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d021      	beq.n	800d58e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d552:	1d3a      	adds	r2, r7, #4
 800d554:	f107 0108 	add.w	r1, r7, #8
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fe fa85 	bl	800ba6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	9202      	str	r2, [sp, #8]
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	2302      	movs	r3, #2
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	2300      	movs	r3, #0
 800d572:	460a      	mov	r2, r1
 800d574:	4910      	ldr	r1, [pc, #64]	; (800d5b8 <xTimerCreateTimerTask+0x84>)
 800d576:	4811      	ldr	r0, [pc, #68]	; (800d5bc <xTimerCreateTimerTask+0x88>)
 800d578:	f7ff f832 	bl	800c5e0 <xTaskCreateStatic>
 800d57c:	4603      	mov	r3, r0
 800d57e:	4a10      	ldr	r2, [pc, #64]	; (800d5c0 <xTimerCreateTimerTask+0x8c>)
 800d580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d582:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <xTimerCreateTimerTask+0x8c>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d58a:	2301      	movs	r3, #1
 800d58c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	613b      	str	r3, [r7, #16]
}
 800d5a6:	bf00      	nop
 800d5a8:	e7fe      	b.n	800d5a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d5aa:	697b      	ldr	r3, [r7, #20]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20001218 	.word	0x20001218
 800d5b8:	08014428 	.word	0x08014428
 800d5bc:	0800d6f9 	.word	0x0800d6f9
 800d5c0:	2000121c 	.word	0x2000121c

0800d5c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08a      	sub	sp, #40	; 0x28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
 800d5d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10a      	bne.n	800d5f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	623b      	str	r3, [r7, #32]
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d5f2:	4b1a      	ldr	r3, [pc, #104]	; (800d65c <xTimerGenericCommand+0x98>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d02a      	beq.n	800d650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b05      	cmp	r3, #5
 800d60a:	dc18      	bgt.n	800d63e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d60c:	f7ff feb2 	bl	800d374 <xTaskGetSchedulerState>
 800d610:	4603      	mov	r3, r0
 800d612:	2b02      	cmp	r3, #2
 800d614:	d109      	bne.n	800d62a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d616:	4b11      	ldr	r3, [pc, #68]	; (800d65c <xTimerGenericCommand+0x98>)
 800d618:	6818      	ldr	r0, [r3, #0]
 800d61a:	f107 0110 	add.w	r1, r7, #16
 800d61e:	2300      	movs	r3, #0
 800d620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d622:	f7fe fbf5 	bl	800be10 <xQueueGenericSend>
 800d626:	6278      	str	r0, [r7, #36]	; 0x24
 800d628:	e012      	b.n	800d650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d62a:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <xTimerGenericCommand+0x98>)
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	f107 0110 	add.w	r1, r7, #16
 800d632:	2300      	movs	r3, #0
 800d634:	2200      	movs	r2, #0
 800d636:	f7fe fbeb 	bl	800be10 <xQueueGenericSend>
 800d63a:	6278      	str	r0, [r7, #36]	; 0x24
 800d63c:	e008      	b.n	800d650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d63e:	4b07      	ldr	r3, [pc, #28]	; (800d65c <xTimerGenericCommand+0x98>)
 800d640:	6818      	ldr	r0, [r3, #0]
 800d642:	f107 0110 	add.w	r1, r7, #16
 800d646:	2300      	movs	r3, #0
 800d648:	683a      	ldr	r2, [r7, #0]
 800d64a:	f7fe fcdf 	bl	800c00c <xQueueGenericSendFromISR>
 800d64e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d652:	4618      	mov	r0, r3
 800d654:	3728      	adds	r7, #40	; 0x28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20001218 	.word	0x20001218

0800d660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af02      	add	r7, sp, #8
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d66a:	4b22      	ldr	r3, [pc, #136]	; (800d6f4 <prvProcessExpiredTimer+0x94>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	3304      	adds	r3, #4
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fa9b 	bl	800bbb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d684:	f003 0304 	and.w	r3, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d022      	beq.n	800d6d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	699a      	ldr	r2, [r3, #24]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	18d1      	adds	r1, r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	6978      	ldr	r0, [r7, #20]
 800d69a:	f000 f8d1 	bl	800d840 <prvInsertTimerInActiveList>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d01f      	beq.n	800d6e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	6978      	ldr	r0, [r7, #20]
 800d6b0:	f7ff ff88 	bl	800d5c4 <xTimerGenericCommand>
 800d6b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d113      	bne.n	800d6e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	60fb      	str	r3, [r7, #12]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6d8:	f023 0301 	bic.w	r3, r3, #1
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	6978      	ldr	r0, [r7, #20]
 800d6ea:	4798      	blx	r3
}
 800d6ec:	bf00      	nop
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20001210 	.word	0x20001210

0800d6f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d700:	f107 0308 	add.w	r3, r7, #8
 800d704:	4618      	mov	r0, r3
 800d706:	f000 f857 	bl	800d7b8 <prvGetNextExpireTime>
 800d70a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	4619      	mov	r1, r3
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f803 	bl	800d71c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d716:	f000 f8d5 	bl	800d8c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d71a:	e7f1      	b.n	800d700 <prvTimerTask+0x8>

0800d71c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d726:	f7ff fa29 	bl	800cb7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d72a:	f107 0308 	add.w	r3, r7, #8
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 f866 	bl	800d800 <prvSampleTimeNow>
 800d734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d130      	bne.n	800d79e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10a      	bne.n	800d758 <prvProcessTimerOrBlockTask+0x3c>
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	429a      	cmp	r2, r3
 800d748:	d806      	bhi.n	800d758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d74a:	f7ff fa25 	bl	800cb98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff ff85 	bl	800d660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d756:	e024      	b.n	800d7a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d008      	beq.n	800d770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d75e:	4b13      	ldr	r3, [pc, #76]	; (800d7ac <prvProcessTimerOrBlockTask+0x90>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <prvProcessTimerOrBlockTask+0x50>
 800d768:	2301      	movs	r3, #1
 800d76a:	e000      	b.n	800d76e <prvProcessTimerOrBlockTask+0x52>
 800d76c:	2300      	movs	r3, #0
 800d76e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d770:	4b0f      	ldr	r3, [pc, #60]	; (800d7b0 <prvProcessTimerOrBlockTask+0x94>)
 800d772:	6818      	ldr	r0, [r3, #0]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	4619      	mov	r1, r3
 800d77e:	f7fe fefb 	bl	800c578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d782:	f7ff fa09 	bl	800cb98 <xTaskResumeAll>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10a      	bne.n	800d7a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d78c:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <prvProcessTimerOrBlockTask+0x98>)
 800d78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	f3bf 8f6f 	isb	sy
}
 800d79c:	e001      	b.n	800d7a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d79e:	f7ff f9fb 	bl	800cb98 <xTaskResumeAll>
}
 800d7a2:	bf00      	nop
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20001214 	.word	0x20001214
 800d7b0:	20001218 	.word	0x20001218
 800d7b4:	e000ed04 	.word	0xe000ed04

0800d7b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	; (800d7fc <prvGetNextExpireTime+0x44>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <prvGetNextExpireTime+0x16>
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	e000      	b.n	800d7d0 <prvGetNextExpireTime+0x18>
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d105      	bne.n	800d7e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7dc:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <prvGetNextExpireTime+0x44>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	e001      	b.n	800d7ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20001210 	.word	0x20001210

0800d800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d808:	f7ff fa64 	bl	800ccd4 <xTaskGetTickCount>
 800d80c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d80e:	4b0b      	ldr	r3, [pc, #44]	; (800d83c <prvSampleTimeNow+0x3c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	429a      	cmp	r2, r3
 800d816:	d205      	bcs.n	800d824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d818:	f000 f936 	bl	800da88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	e002      	b.n	800d82a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d82a:	4a04      	ldr	r2, [pc, #16]	; (800d83c <prvSampleTimeNow+0x3c>)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d830:	68fb      	ldr	r3, [r7, #12]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20001220 	.word	0x20001220

0800d840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
 800d84c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	429a      	cmp	r2, r3
 800d864:	d812      	bhi.n	800d88c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	1ad2      	subs	r2, r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	429a      	cmp	r2, r3
 800d872:	d302      	bcc.n	800d87a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d874:	2301      	movs	r3, #1
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e01b      	b.n	800d8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d87a:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <prvInsertTimerInActiveList+0x7c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3304      	adds	r3, #4
 800d882:	4619      	mov	r1, r3
 800d884:	4610      	mov	r0, r2
 800d886:	f7fe f95c 	bl	800bb42 <vListInsert>
 800d88a:	e012      	b.n	800d8b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d206      	bcs.n	800d8a2 <prvInsertTimerInActiveList+0x62>
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d302      	bcc.n	800d8a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d89c:	2301      	movs	r3, #1
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	e007      	b.n	800d8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8a2:	4b07      	ldr	r3, [pc, #28]	; (800d8c0 <prvInsertTimerInActiveList+0x80>)
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f7fe f948 	bl	800bb42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d8b2:	697b      	ldr	r3, [r7, #20]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001214 	.word	0x20001214
 800d8c0:	20001210 	.word	0x20001210

0800d8c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08e      	sub	sp, #56	; 0x38
 800d8c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8ca:	e0ca      	b.n	800da62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	da18      	bge.n	800d904 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d8d2:	1d3b      	adds	r3, r7, #4
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	61fb      	str	r3, [r7, #28]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8fa:	6850      	ldr	r0, [r2, #4]
 800d8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8fe:	6892      	ldr	r2, [r2, #8]
 800d900:	4611      	mov	r1, r2
 800d902:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f2c0 80aa 	blt.w	800da60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	3304      	adds	r3, #4
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fe f949 	bl	800bbb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d922:	463b      	mov	r3, r7
 800d924:	4618      	mov	r0, r3
 800d926:	f7ff ff6b 	bl	800d800 <prvSampleTimeNow>
 800d92a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b09      	cmp	r3, #9
 800d930:	f200 8097 	bhi.w	800da62 <prvProcessReceivedCommands+0x19e>
 800d934:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <prvProcessReceivedCommands+0x78>)
 800d936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93a:	bf00      	nop
 800d93c:	0800d965 	.word	0x0800d965
 800d940:	0800d965 	.word	0x0800d965
 800d944:	0800d965 	.word	0x0800d965
 800d948:	0800d9d9 	.word	0x0800d9d9
 800d94c:	0800d9ed 	.word	0x0800d9ed
 800d950:	0800da37 	.word	0x0800da37
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800d965 	.word	0x0800d965
 800d95c:	0800d9d9 	.word	0x0800d9d9
 800d960:	0800d9ed 	.word	0x0800d9ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d96a:	f043 0301 	orr.w	r3, r3, #1
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	18d1      	adds	r1, r2, r3
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d984:	f7ff ff5c 	bl	800d840 <prvInsertTimerInActiveList>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d069      	beq.n	800da62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	6a1b      	ldr	r3, [r3, #32]
 800d992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d99c:	f003 0304 	and.w	r3, r3, #4
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d05e      	beq.n	800da62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	441a      	add	r2, r3
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b6:	f7ff fe05 	bl	800d5c4 <xTimerGenericCommand>
 800d9ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d14f      	bne.n	800da62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	61bb      	str	r3, [r7, #24]
}
 800d9d4:	bf00      	nop
 800d9d6:	e7fe      	b.n	800d9d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9de:	f023 0301 	bic.w	r3, r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d9ea:	e03a      	b.n	800da62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9f2:	f043 0301 	orr.w	r3, r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10a      	bne.n	800da22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	617b      	str	r3, [r7, #20]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	699a      	ldr	r2, [r3, #24]
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	18d1      	adds	r1, r2, r3
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da30:	f7ff ff06 	bl	800d840 <prvInsertTimerInActiveList>
					break;
 800da34:	e015      	b.n	800da62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d103      	bne.n	800da4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800da44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da46:	f000 fbdb 	bl	800e200 <vPortFree>
 800da4a:	e00a      	b.n	800da62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da52:	f023 0301 	bic.w	r3, r3, #1
 800da56:	b2da      	uxtb	r2, r3
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da5e:	e000      	b.n	800da62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da62:	4b08      	ldr	r3, [pc, #32]	; (800da84 <prvProcessReceivedCommands+0x1c0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	1d39      	adds	r1, r7, #4
 800da68:	2200      	movs	r2, #0
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fb6a 	bl	800c144 <xQueueReceive>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	f47f af2a 	bne.w	800d8cc <prvProcessReceivedCommands+0x8>
	}
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	3730      	adds	r7, #48	; 0x30
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20001218 	.word	0x20001218

0800da88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da8e:	e048      	b.n	800db22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da90:	4b2d      	ldr	r3, [pc, #180]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da9a:	4b2b      	ldr	r3, [pc, #172]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3304      	adds	r3, #4
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe f883 	bl	800bbb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dabc:	f003 0304 	and.w	r3, r3, #4
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d02e      	beq.n	800db22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	699b      	ldr	r3, [r3, #24]
 800dac8:	693a      	ldr	r2, [r7, #16]
 800daca:	4413      	add	r3, r2
 800dacc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d90e      	bls.n	800daf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dae2:	4b19      	ldr	r3, [pc, #100]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3304      	adds	r3, #4
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7fe f828 	bl	800bb42 <vListInsert>
 800daf2:	e016      	b.n	800db22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daf4:	2300      	movs	r3, #0
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2300      	movs	r3, #0
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	2100      	movs	r1, #0
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f7ff fd60 	bl	800d5c4 <xTimerGenericCommand>
 800db04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	603b      	str	r3, [r7, #0]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db22:	4b09      	ldr	r3, [pc, #36]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1b1      	bne.n	800da90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db2c:	4b06      	ldr	r3, [pc, #24]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db32:	4b06      	ldr	r3, [pc, #24]	; (800db4c <prvSwitchTimerLists+0xc4>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a04      	ldr	r2, [pc, #16]	; (800db48 <prvSwitchTimerLists+0xc0>)
 800db38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db3a:	4a04      	ldr	r2, [pc, #16]	; (800db4c <prvSwitchTimerLists+0xc4>)
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	6013      	str	r3, [r2, #0]
}
 800db40:	bf00      	nop
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20001210 	.word	0x20001210
 800db4c:	20001214 	.word	0x20001214

0800db50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db56:	f000 f965 	bl	800de24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db5a:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <prvCheckForValidListAndQueue+0x60>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d120      	bne.n	800dba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db62:	4814      	ldr	r0, [pc, #80]	; (800dbb4 <prvCheckForValidListAndQueue+0x64>)
 800db64:	f7fd ff9c 	bl	800baa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db68:	4813      	ldr	r0, [pc, #76]	; (800dbb8 <prvCheckForValidListAndQueue+0x68>)
 800db6a:	f7fd ff99 	bl	800baa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db6e:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <prvCheckForValidListAndQueue+0x6c>)
 800db70:	4a10      	ldr	r2, [pc, #64]	; (800dbb4 <prvCheckForValidListAndQueue+0x64>)
 800db72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db74:	4b12      	ldr	r3, [pc, #72]	; (800dbc0 <prvCheckForValidListAndQueue+0x70>)
 800db76:	4a10      	ldr	r2, [pc, #64]	; (800dbb8 <prvCheckForValidListAndQueue+0x68>)
 800db78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db7a:	2300      	movs	r3, #0
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	4b11      	ldr	r3, [pc, #68]	; (800dbc4 <prvCheckForValidListAndQueue+0x74>)
 800db80:	4a11      	ldr	r2, [pc, #68]	; (800dbc8 <prvCheckForValidListAndQueue+0x78>)
 800db82:	2110      	movs	r1, #16
 800db84:	200a      	movs	r0, #10
 800db86:	f7fe f8a7 	bl	800bcd8 <xQueueGenericCreateStatic>
 800db8a:	4603      	mov	r3, r0
 800db8c:	4a08      	ldr	r2, [pc, #32]	; (800dbb0 <prvCheckForValidListAndQueue+0x60>)
 800db8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db90:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <prvCheckForValidListAndQueue+0x60>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d005      	beq.n	800dba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db98:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <prvCheckForValidListAndQueue+0x60>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	490b      	ldr	r1, [pc, #44]	; (800dbcc <prvCheckForValidListAndQueue+0x7c>)
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe fcc0 	bl	800c524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dba4:	f000 f96e 	bl	800de84 <vPortExitCritical>
}
 800dba8:	bf00      	nop
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20001218 	.word	0x20001218
 800dbb4:	200011e8 	.word	0x200011e8
 800dbb8:	200011fc 	.word	0x200011fc
 800dbbc:	20001210 	.word	0x20001210
 800dbc0:	20001214 	.word	0x20001214
 800dbc4:	200012c4 	.word	0x200012c4
 800dbc8:	20001224 	.word	0x20001224
 800dbcc:	08014430 	.word	0x08014430

0800dbd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3b04      	subs	r3, #4
 800dbe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dbe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3b04      	subs	r3, #4
 800dbee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	f023 0201 	bic.w	r2, r3, #1
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	3b04      	subs	r3, #4
 800dbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc00:	4a0c      	ldr	r2, [pc, #48]	; (800dc34 <pxPortInitialiseStack+0x64>)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3b14      	subs	r3, #20
 800dc0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	3b04      	subs	r3, #4
 800dc16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f06f 0202 	mvn.w	r2, #2
 800dc1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3b20      	subs	r3, #32
 800dc24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc26:	68fb      	ldr	r3, [r7, #12]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr
 800dc34:	0800dc39 	.word	0x0800dc39

0800dc38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <prvTaskExitError+0x54>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4a:	d00a      	beq.n	800dc62 <prvTaskExitError+0x2a>
	__asm volatile
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	60fb      	str	r3, [r7, #12]
}
 800dc5e:	bf00      	nop
 800dc60:	e7fe      	b.n	800dc60 <prvTaskExitError+0x28>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60bb      	str	r3, [r7, #8]
}
 800dc74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc76:	bf00      	nop
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0fc      	beq.n	800dc78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	20000034 	.word	0x20000034

0800dc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <pxCurrentTCBConst2>)
 800dc92:	6819      	ldr	r1, [r3, #0]
 800dc94:	6808      	ldr	r0, [r1, #0]
 800dc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	f380 8809 	msr	PSP, r0
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f04f 0000 	mov.w	r0, #0
 800dca6:	f380 8811 	msr	BASEPRI, r0
 800dcaa:	4770      	bx	lr
 800dcac:	f3af 8000 	nop.w

0800dcb0 <pxCurrentTCBConst2>:
 800dcb0:	20000ce8 	.word	0x20000ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dcb8:	4808      	ldr	r0, [pc, #32]	; (800dcdc <prvPortStartFirstTask+0x24>)
 800dcba:	6800      	ldr	r0, [r0, #0]
 800dcbc:	6800      	ldr	r0, [r0, #0]
 800dcbe:	f380 8808 	msr	MSP, r0
 800dcc2:	f04f 0000 	mov.w	r0, #0
 800dcc6:	f380 8814 	msr	CONTROL, r0
 800dcca:	b662      	cpsie	i
 800dccc:	b661      	cpsie	f
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	df00      	svc	0
 800dcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcda:	bf00      	nop
 800dcdc:	e000ed08 	.word	0xe000ed08

0800dce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dce6:	4b46      	ldr	r3, [pc, #280]	; (800de00 <xPortStartScheduler+0x120>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a46      	ldr	r2, [pc, #280]	; (800de04 <xPortStartScheduler+0x124>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d10a      	bne.n	800dd06 <xPortStartScheduler+0x26>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	613b      	str	r3, [r7, #16]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd06:	4b3e      	ldr	r3, [pc, #248]	; (800de00 <xPortStartScheduler+0x120>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a3f      	ldr	r2, [pc, #252]	; (800de08 <xPortStartScheduler+0x128>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d10a      	bne.n	800dd26 <xPortStartScheduler+0x46>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	60fb      	str	r3, [r7, #12]
}
 800dd22:	bf00      	nop
 800dd24:	e7fe      	b.n	800dd24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd26:	4b39      	ldr	r3, [pc, #228]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	22ff      	movs	r2, #255	; 0xff
 800dd36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd40:	78fb      	ldrb	r3, [r7, #3]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	4b31      	ldr	r3, [pc, #196]	; (800de10 <xPortStartScheduler+0x130>)
 800dd4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd4e:	4b31      	ldr	r3, [pc, #196]	; (800de14 <xPortStartScheduler+0x134>)
 800dd50:	2207      	movs	r2, #7
 800dd52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd54:	e009      	b.n	800dd6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dd56:	4b2f      	ldr	r3, [pc, #188]	; (800de14 <xPortStartScheduler+0x134>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	4a2d      	ldr	r2, [pc, #180]	; (800de14 <xPortStartScheduler+0x134>)
 800dd5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd60:	78fb      	ldrb	r3, [r7, #3]
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd72:	2b80      	cmp	r3, #128	; 0x80
 800dd74:	d0ef      	beq.n	800dd56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd76:	4b27      	ldr	r3, [pc, #156]	; (800de14 <xPortStartScheduler+0x134>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f1c3 0307 	rsb	r3, r3, #7
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	d00a      	beq.n	800dd98 <xPortStartScheduler+0xb8>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	60bb      	str	r3, [r7, #8]
}
 800dd94:	bf00      	nop
 800dd96:	e7fe      	b.n	800dd96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd98:	4b1e      	ldr	r3, [pc, #120]	; (800de14 <xPortStartScheduler+0x134>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	4a1d      	ldr	r2, [pc, #116]	; (800de14 <xPortStartScheduler+0x134>)
 800dda0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dda2:	4b1c      	ldr	r3, [pc, #112]	; (800de14 <xPortStartScheduler+0x134>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddaa:	4a1a      	ldr	r2, [pc, #104]	; (800de14 <xPortStartScheduler+0x134>)
 800ddac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddb6:	4b18      	ldr	r3, [pc, #96]	; (800de18 <xPortStartScheduler+0x138>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a17      	ldr	r2, [pc, #92]	; (800de18 <xPortStartScheduler+0x138>)
 800ddbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddc2:	4b15      	ldr	r3, [pc, #84]	; (800de18 <xPortStartScheduler+0x138>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a14      	ldr	r2, [pc, #80]	; (800de18 <xPortStartScheduler+0x138>)
 800ddc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ddce:	f000 f8dd 	bl	800df8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ddd2:	4b12      	ldr	r3, [pc, #72]	; (800de1c <xPortStartScheduler+0x13c>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddd8:	f000 f8fc 	bl	800dfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dddc:	4b10      	ldr	r3, [pc, #64]	; (800de20 <xPortStartScheduler+0x140>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a0f      	ldr	r2, [pc, #60]	; (800de20 <xPortStartScheduler+0x140>)
 800dde2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dde6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dde8:	f7ff ff66 	bl	800dcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddec:	f7ff f83c 	bl	800ce68 <vTaskSwitchContext>
	prvTaskExitError();
 800ddf0:	f7ff ff22 	bl	800dc38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	e000ed00 	.word	0xe000ed00
 800de04:	410fc271 	.word	0x410fc271
 800de08:	410fc270 	.word	0x410fc270
 800de0c:	e000e400 	.word	0xe000e400
 800de10:	20001314 	.word	0x20001314
 800de14:	20001318 	.word	0x20001318
 800de18:	e000ed20 	.word	0xe000ed20
 800de1c:	20000034 	.word	0x20000034
 800de20:	e000ef34 	.word	0xe000ef34

0800de24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	607b      	str	r3, [r7, #4]
}
 800de3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de3e:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <vPortEnterCritical+0x58>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3301      	adds	r3, #1
 800de44:	4a0d      	ldr	r2, [pc, #52]	; (800de7c <vPortEnterCritical+0x58>)
 800de46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de48:	4b0c      	ldr	r3, [pc, #48]	; (800de7c <vPortEnterCritical+0x58>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d10f      	bne.n	800de70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de50:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <vPortEnterCritical+0x5c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00a      	beq.n	800de70 <vPortEnterCritical+0x4c>
	__asm volatile
 800de5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5e:	f383 8811 	msr	BASEPRI, r3
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	603b      	str	r3, [r7, #0]
}
 800de6c:	bf00      	nop
 800de6e:	e7fe      	b.n	800de6e <vPortEnterCritical+0x4a>
	}
}
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	20000034 	.word	0x20000034
 800de80:	e000ed04 	.word	0xe000ed04

0800de84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de8a:	4b12      	ldr	r3, [pc, #72]	; (800ded4 <vPortExitCritical+0x50>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <vPortExitCritical+0x24>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	607b      	str	r3, [r7, #4]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <vPortExitCritical+0x50>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	3b01      	subs	r3, #1
 800deae:	4a09      	ldr	r2, [pc, #36]	; (800ded4 <vPortExitCritical+0x50>)
 800deb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800deb2:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <vPortExitCritical+0x50>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d105      	bne.n	800dec6 <vPortExitCritical+0x42>
 800deba:	2300      	movs	r3, #0
 800debc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	f383 8811 	msr	BASEPRI, r3
}
 800dec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dec6:	bf00      	nop
 800dec8:	370c      	adds	r7, #12
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	20000034 	.word	0x20000034
	...

0800dee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dee0:	f3ef 8009 	mrs	r0, PSP
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	4b15      	ldr	r3, [pc, #84]	; (800df40 <pxCurrentTCBConst>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	f01e 0f10 	tst.w	lr, #16
 800def0:	bf08      	it	eq
 800def2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800def6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df04:	f380 8811 	msr	BASEPRI, r0
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f7fe ffaa 	bl	800ce68 <vTaskSwitchContext>
 800df14:	f04f 0000 	mov.w	r0, #0
 800df18:	f380 8811 	msr	BASEPRI, r0
 800df1c:	bc09      	pop	{r0, r3}
 800df1e:	6819      	ldr	r1, [r3, #0]
 800df20:	6808      	ldr	r0, [r1, #0]
 800df22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df26:	f01e 0f10 	tst.w	lr, #16
 800df2a:	bf08      	it	eq
 800df2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df30:	f380 8809 	msr	PSP, r0
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	f3af 8000 	nop.w

0800df40 <pxCurrentTCBConst>:
 800df40:	20000ce8 	.word	0x20000ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop

0800df48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	607b      	str	r3, [r7, #4]
}
 800df60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df62:	f7fe fec7 	bl	800ccf4 <xTaskIncrementTick>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df6c:	4b06      	ldr	r3, [pc, #24]	; (800df88 <xPortSysTickHandler+0x40>)
 800df6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	2300      	movs	r3, #0
 800df76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	f383 8811 	msr	BASEPRI, r3
}
 800df7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df96:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <vPortSetupTimerInterrupt+0x38>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <vPortSetupTimerInterrupt+0x3c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a0a      	ldr	r2, [pc, #40]	; (800dfcc <vPortSetupTimerInterrupt+0x40>)
 800dfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa6:	099b      	lsrs	r3, r3, #6
 800dfa8:	4a09      	ldr	r2, [pc, #36]	; (800dfd0 <vPortSetupTimerInterrupt+0x44>)
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfae:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800dfb0:	2207      	movs	r2, #7
 800dfb2:	601a      	str	r2, [r3, #0]
}
 800dfb4:	bf00      	nop
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	e000e010 	.word	0xe000e010
 800dfc4:	e000e018 	.word	0xe000e018
 800dfc8:	20000000 	.word	0x20000000
 800dfcc:	10624dd3 	.word	0x10624dd3
 800dfd0:	e000e014 	.word	0xe000e014

0800dfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfe4 <vPortEnableVFP+0x10>
 800dfd8:	6801      	ldr	r1, [r0, #0]
 800dfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dfde:	6001      	str	r1, [r0, #0]
 800dfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfe2:	bf00      	nop
 800dfe4:	e000ed88 	.word	0xe000ed88

0800dfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfee:	f3ef 8305 	mrs	r3, IPSR
 800dff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b0f      	cmp	r3, #15
 800dff8:	d914      	bls.n	800e024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dffa:	4a17      	ldr	r2, [pc, #92]	; (800e058 <vPortValidateInterruptPriority+0x70>)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4413      	add	r3, r2
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e004:	4b15      	ldr	r3, [pc, #84]	; (800e05c <vPortValidateInterruptPriority+0x74>)
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	7afa      	ldrb	r2, [r7, #11]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d20a      	bcs.n	800e024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	607b      	str	r3, [r7, #4]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e024:	4b0e      	ldr	r3, [pc, #56]	; (800e060 <vPortValidateInterruptPriority+0x78>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e02c:	4b0d      	ldr	r3, [pc, #52]	; (800e064 <vPortValidateInterruptPriority+0x7c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	d90a      	bls.n	800e04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	603b      	str	r3, [r7, #0]
}
 800e046:	bf00      	nop
 800e048:	e7fe      	b.n	800e048 <vPortValidateInterruptPriority+0x60>
	}
 800e04a:	bf00      	nop
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	e000e3f0 	.word	0xe000e3f0
 800e05c:	20001314 	.word	0x20001314
 800e060:	e000ed0c 	.word	0xe000ed0c
 800e064:	20001318 	.word	0x20001318

0800e068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08a      	sub	sp, #40	; 0x28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e070:	2300      	movs	r3, #0
 800e072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e074:	f7fe fd82 	bl	800cb7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e078:	4b5b      	ldr	r3, [pc, #364]	; (800e1e8 <pvPortMalloc+0x180>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e080:	f000 f920 	bl	800e2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e084:	4b59      	ldr	r3, [pc, #356]	; (800e1ec <pvPortMalloc+0x184>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4013      	ands	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f040 8093 	bne.w	800e1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d01d      	beq.n	800e0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e098:	2208      	movs	r2, #8
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4413      	add	r3, r2
 800e09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d014      	beq.n	800e0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f023 0307 	bic.w	r3, r3, #7
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00a      	beq.n	800e0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	617b      	str	r3, [r7, #20]
}
 800e0d0:	bf00      	nop
 800e0d2:	e7fe      	b.n	800e0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d06e      	beq.n	800e1b8 <pvPortMalloc+0x150>
 800e0da:	4b45      	ldr	r3, [pc, #276]	; (800e1f0 <pvPortMalloc+0x188>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d869      	bhi.n	800e1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0e4:	4b43      	ldr	r3, [pc, #268]	; (800e1f4 <pvPortMalloc+0x18c>)
 800e0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0e8:	4b42      	ldr	r3, [pc, #264]	; (800e1f4 <pvPortMalloc+0x18c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0ee:	e004      	b.n	800e0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	429a      	cmp	r2, r3
 800e102:	d903      	bls.n	800e10c <pvPortMalloc+0xa4>
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f1      	bne.n	800e0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e10c:	4b36      	ldr	r3, [pc, #216]	; (800e1e8 <pvPortMalloc+0x180>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e112:	429a      	cmp	r2, r3
 800e114:	d050      	beq.n	800e1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2208      	movs	r2, #8
 800e11c:	4413      	add	r3, r2
 800e11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	2308      	movs	r3, #8
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	429a      	cmp	r2, r3
 800e136:	d91f      	bls.n	800e178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4413      	add	r3, r2
 800e13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <pvPortMalloc+0xf8>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	613b      	str	r3, [r7, #16]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e172:	69b8      	ldr	r0, [r7, #24]
 800e174:	f000 f908 	bl	800e388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e178:	4b1d      	ldr	r3, [pc, #116]	; (800e1f0 <pvPortMalloc+0x188>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	4a1b      	ldr	r2, [pc, #108]	; (800e1f0 <pvPortMalloc+0x188>)
 800e184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e186:	4b1a      	ldr	r3, [pc, #104]	; (800e1f0 <pvPortMalloc+0x188>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	4b1b      	ldr	r3, [pc, #108]	; (800e1f8 <pvPortMalloc+0x190>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d203      	bcs.n	800e19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e192:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <pvPortMalloc+0x188>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a18      	ldr	r2, [pc, #96]	; (800e1f8 <pvPortMalloc+0x190>)
 800e198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	4b13      	ldr	r3, [pc, #76]	; (800e1ec <pvPortMalloc+0x184>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e1ae:	4b13      	ldr	r3, [pc, #76]	; (800e1fc <pvPortMalloc+0x194>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	4a11      	ldr	r2, [pc, #68]	; (800e1fc <pvPortMalloc+0x194>)
 800e1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1b8:	f7fe fcee 	bl	800cb98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	f003 0307 	and.w	r3, r3, #7
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00a      	beq.n	800e1dc <pvPortMalloc+0x174>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	60fb      	str	r3, [r7, #12]
}
 800e1d8:	bf00      	nop
 800e1da:	e7fe      	b.n	800e1da <pvPortMalloc+0x172>
	return pvReturn;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3728      	adds	r7, #40	; 0x28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20004f24 	.word	0x20004f24
 800e1ec:	20004f38 	.word	0x20004f38
 800e1f0:	20004f28 	.word	0x20004f28
 800e1f4:	20004f1c 	.word	0x20004f1c
 800e1f8:	20004f2c 	.word	0x20004f2c
 800e1fc:	20004f30 	.word	0x20004f30

0800e200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d04d      	beq.n	800e2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e212:	2308      	movs	r3, #8
 800e214:	425b      	negs	r3, r3
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	4413      	add	r3, r2
 800e21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	4b24      	ldr	r3, [pc, #144]	; (800e2b8 <vPortFree+0xb8>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4013      	ands	r3, r2
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10a      	bne.n	800e244 <vPortFree+0x44>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60fb      	str	r3, [r7, #12]
}
 800e240:	bf00      	nop
 800e242:	e7fe      	b.n	800e242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00a      	beq.n	800e262 <vPortFree+0x62>
	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60bb      	str	r3, [r7, #8]
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <vPortFree+0xb8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01e      	beq.n	800e2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d11a      	bne.n	800e2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	4b0e      	ldr	r3, [pc, #56]	; (800e2b8 <vPortFree+0xb8>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	43db      	mvns	r3, r3
 800e282:	401a      	ands	r2, r3
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e288:	f7fe fc78 	bl	800cb7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <vPortFree+0xbc>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4413      	add	r3, r2
 800e296:	4a09      	ldr	r2, [pc, #36]	; (800e2bc <vPortFree+0xbc>)
 800e298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e29a:	6938      	ldr	r0, [r7, #16]
 800e29c:	f000 f874 	bl	800e388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e2a0:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <vPortFree+0xc0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	4a06      	ldr	r2, [pc, #24]	; (800e2c0 <vPortFree+0xc0>)
 800e2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e2aa:	f7fe fc75 	bl	800cb98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ae:	bf00      	nop
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20004f38 	.word	0x20004f38
 800e2bc:	20004f28 	.word	0x20004f28
 800e2c0:	20004f34 	.word	0x20004f34

0800e2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2d0:	4b27      	ldr	r3, [pc, #156]	; (800e370 <prvHeapInit+0xac>)
 800e2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00c      	beq.n	800e2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3307      	adds	r3, #7
 800e2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	4a1f      	ldr	r2, [pc, #124]	; (800e370 <prvHeapInit+0xac>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2fc:	4a1d      	ldr	r2, [pc, #116]	; (800e374 <prvHeapInit+0xb0>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e302:	4b1c      	ldr	r3, [pc, #112]	; (800e374 <prvHeapInit+0xb0>)
 800e304:	2200      	movs	r2, #0
 800e306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	4413      	add	r3, r2
 800e30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e310:	2208      	movs	r2, #8
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	1a9b      	subs	r3, r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4a15      	ldr	r2, [pc, #84]	; (800e378 <prvHeapInit+0xb4>)
 800e324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e326:	4b14      	ldr	r3, [pc, #80]	; (800e378 <prvHeapInit+0xb4>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e32e:	4b12      	ldr	r3, [pc, #72]	; (800e378 <prvHeapInit+0xb4>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e344:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <prvHeapInit+0xb4>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4a0a      	ldr	r2, [pc, #40]	; (800e37c <prvHeapInit+0xb8>)
 800e352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <prvHeapInit+0xbc>)
 800e35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <prvHeapInit+0xc0>)
 800e35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e362:	601a      	str	r2, [r3, #0]
}
 800e364:	bf00      	nop
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	2000131c 	.word	0x2000131c
 800e374:	20004f1c 	.word	0x20004f1c
 800e378:	20004f24 	.word	0x20004f24
 800e37c:	20004f2c 	.word	0x20004f2c
 800e380:	20004f28 	.word	0x20004f28
 800e384:	20004f38 	.word	0x20004f38

0800e388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e390:	4b28      	ldr	r3, [pc, #160]	; (800e434 <prvInsertBlockIntoFreeList+0xac>)
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e002      	b.n	800e39c <prvInsertBlockIntoFreeList+0x14>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d8f7      	bhi.n	800e396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d108      	bne.n	800e3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	685a      	ldr	r2, [r3, #4]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	441a      	add	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d118      	bne.n	800e410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	4b15      	ldr	r3, [pc, #84]	; (800e438 <prvInsertBlockIntoFreeList+0xb0>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d00d      	beq.n	800e406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	441a      	add	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	e008      	b.n	800e418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e406:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <prvInsertBlockIntoFreeList+0xb0>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	e003      	b.n	800e418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d002      	beq.n	800e426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e426:	bf00      	nop
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	20004f1c 	.word	0x20004f1c
 800e438:	20004f24 	.word	0x20004f24

0800e43c <__cxa_pure_virtual>:
 800e43c:	b508      	push	{r3, lr}
 800e43e:	f000 f80d 	bl	800e45c <_ZSt9terminatev>

0800e442 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e442:	b508      	push	{r3, lr}
 800e444:	4780      	blx	r0
 800e446:	f000 f80e 	bl	800e466 <abort>
	...

0800e44c <_ZSt13get_terminatev>:
 800e44c:	4b02      	ldr	r3, [pc, #8]	; (800e458 <_ZSt13get_terminatev+0xc>)
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	f3bf 8f5b 	dmb	ish
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	20000038 	.word	0x20000038

0800e45c <_ZSt9terminatev>:
 800e45c:	b508      	push	{r3, lr}
 800e45e:	f7ff fff5 	bl	800e44c <_ZSt13get_terminatev>
 800e462:	f7ff ffee 	bl	800e442 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e466 <abort>:
 800e466:	b508      	push	{r3, lr}
 800e468:	2006      	movs	r0, #6
 800e46a:	f001 f9c1 	bl	800f7f0 <raise>
 800e46e:	2001      	movs	r0, #1
 800e470:	f7f4 fd92 	bl	8002f98 <_exit>

0800e474 <__errno>:
 800e474:	4b01      	ldr	r3, [pc, #4]	; (800e47c <__errno+0x8>)
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	2000003c 	.word	0x2000003c

0800e480 <std>:
 800e480:	2300      	movs	r3, #0
 800e482:	b510      	push	{r4, lr}
 800e484:	4604      	mov	r4, r0
 800e486:	e9c0 3300 	strd	r3, r3, [r0]
 800e48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e48e:	6083      	str	r3, [r0, #8]
 800e490:	8181      	strh	r1, [r0, #12]
 800e492:	6643      	str	r3, [r0, #100]	; 0x64
 800e494:	81c2      	strh	r2, [r0, #14]
 800e496:	6183      	str	r3, [r0, #24]
 800e498:	4619      	mov	r1, r3
 800e49a:	2208      	movs	r2, #8
 800e49c:	305c      	adds	r0, #92	; 0x5c
 800e49e:	f000 f945 	bl	800e72c <memset>
 800e4a2:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <std+0x38>)
 800e4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4a6:	4b05      	ldr	r3, [pc, #20]	; (800e4bc <std+0x3c>)
 800e4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4aa:	4b05      	ldr	r3, [pc, #20]	; (800e4c0 <std+0x40>)
 800e4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ae:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <std+0x44>)
 800e4b0:	6224      	str	r4, [r4, #32]
 800e4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4b4:	bd10      	pop	{r4, pc}
 800e4b6:	bf00      	nop
 800e4b8:	0800f8c1 	.word	0x0800f8c1
 800e4bc:	0800f8e7 	.word	0x0800f8e7
 800e4c0:	0800f91f 	.word	0x0800f91f
 800e4c4:	0800f943 	.word	0x0800f943

0800e4c8 <_cleanup_r>:
 800e4c8:	4901      	ldr	r1, [pc, #4]	; (800e4d0 <_cleanup_r+0x8>)
 800e4ca:	f000 b8af 	b.w	800e62c <_fwalk_reent>
 800e4ce:	bf00      	nop
 800e4d0:	080117cd 	.word	0x080117cd

0800e4d4 <__sfmoreglue>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	1e4a      	subs	r2, r1, #1
 800e4d8:	2568      	movs	r5, #104	; 0x68
 800e4da:	4355      	muls	r5, r2
 800e4dc:	460e      	mov	r6, r1
 800e4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4e2:	f000 f97b 	bl	800e7dc <_malloc_r>
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	b140      	cbz	r0, 800e4fc <__sfmoreglue+0x28>
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e4f0:	300c      	adds	r0, #12
 800e4f2:	60a0      	str	r0, [r4, #8]
 800e4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4f8:	f000 f918 	bl	800e72c <memset>
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}

0800e500 <__sfp_lock_acquire>:
 800e500:	4801      	ldr	r0, [pc, #4]	; (800e508 <__sfp_lock_acquire+0x8>)
 800e502:	f000 b8d8 	b.w	800e6b6 <__retarget_lock_acquire_recursive>
 800e506:	bf00      	nop
 800e508:	200056a4 	.word	0x200056a4

0800e50c <__sfp_lock_release>:
 800e50c:	4801      	ldr	r0, [pc, #4]	; (800e514 <__sfp_lock_release+0x8>)
 800e50e:	f000 b8d3 	b.w	800e6b8 <__retarget_lock_release_recursive>
 800e512:	bf00      	nop
 800e514:	200056a4 	.word	0x200056a4

0800e518 <__sinit_lock_acquire>:
 800e518:	4801      	ldr	r0, [pc, #4]	; (800e520 <__sinit_lock_acquire+0x8>)
 800e51a:	f000 b8cc 	b.w	800e6b6 <__retarget_lock_acquire_recursive>
 800e51e:	bf00      	nop
 800e520:	2000569f 	.word	0x2000569f

0800e524 <__sinit_lock_release>:
 800e524:	4801      	ldr	r0, [pc, #4]	; (800e52c <__sinit_lock_release+0x8>)
 800e526:	f000 b8c7 	b.w	800e6b8 <__retarget_lock_release_recursive>
 800e52a:	bf00      	nop
 800e52c:	2000569f 	.word	0x2000569f

0800e530 <__sinit>:
 800e530:	b510      	push	{r4, lr}
 800e532:	4604      	mov	r4, r0
 800e534:	f7ff fff0 	bl	800e518 <__sinit_lock_acquire>
 800e538:	69a3      	ldr	r3, [r4, #24]
 800e53a:	b11b      	cbz	r3, 800e544 <__sinit+0x14>
 800e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e540:	f7ff bff0 	b.w	800e524 <__sinit_lock_release>
 800e544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e548:	6523      	str	r3, [r4, #80]	; 0x50
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <__sinit+0x68>)
 800e54c:	4a13      	ldr	r2, [pc, #76]	; (800e59c <__sinit+0x6c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	62a2      	str	r2, [r4, #40]	; 0x28
 800e552:	42a3      	cmp	r3, r4
 800e554:	bf04      	itt	eq
 800e556:	2301      	moveq	r3, #1
 800e558:	61a3      	streq	r3, [r4, #24]
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 f820 	bl	800e5a0 <__sfp>
 800e560:	6060      	str	r0, [r4, #4]
 800e562:	4620      	mov	r0, r4
 800e564:	f000 f81c 	bl	800e5a0 <__sfp>
 800e568:	60a0      	str	r0, [r4, #8]
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f818 	bl	800e5a0 <__sfp>
 800e570:	2200      	movs	r2, #0
 800e572:	60e0      	str	r0, [r4, #12]
 800e574:	2104      	movs	r1, #4
 800e576:	6860      	ldr	r0, [r4, #4]
 800e578:	f7ff ff82 	bl	800e480 <std>
 800e57c:	68a0      	ldr	r0, [r4, #8]
 800e57e:	2201      	movs	r2, #1
 800e580:	2109      	movs	r1, #9
 800e582:	f7ff ff7d 	bl	800e480 <std>
 800e586:	68e0      	ldr	r0, [r4, #12]
 800e588:	2202      	movs	r2, #2
 800e58a:	2112      	movs	r1, #18
 800e58c:	f7ff ff78 	bl	800e480 <std>
 800e590:	2301      	movs	r3, #1
 800e592:	61a3      	str	r3, [r4, #24]
 800e594:	e7d2      	b.n	800e53c <__sinit+0xc>
 800e596:	bf00      	nop
 800e598:	08014608 	.word	0x08014608
 800e59c:	0800e4c9 	.word	0x0800e4c9

0800e5a0 <__sfp>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	f7ff ffac 	bl	800e500 <__sfp_lock_acquire>
 800e5a8:	4b1e      	ldr	r3, [pc, #120]	; (800e624 <__sfp+0x84>)
 800e5aa:	681e      	ldr	r6, [r3, #0]
 800e5ac:	69b3      	ldr	r3, [r6, #24]
 800e5ae:	b913      	cbnz	r3, 800e5b6 <__sfp+0x16>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7ff ffbd 	bl	800e530 <__sinit>
 800e5b6:	3648      	adds	r6, #72	; 0x48
 800e5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	d503      	bpl.n	800e5c8 <__sfp+0x28>
 800e5c0:	6833      	ldr	r3, [r6, #0]
 800e5c2:	b30b      	cbz	r3, 800e608 <__sfp+0x68>
 800e5c4:	6836      	ldr	r6, [r6, #0]
 800e5c6:	e7f7      	b.n	800e5b8 <__sfp+0x18>
 800e5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5cc:	b9d5      	cbnz	r5, 800e604 <__sfp+0x64>
 800e5ce:	4b16      	ldr	r3, [pc, #88]	; (800e628 <__sfp+0x88>)
 800e5d0:	60e3      	str	r3, [r4, #12]
 800e5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5d8:	f000 f86c 	bl	800e6b4 <__retarget_lock_init_recursive>
 800e5dc:	f7ff ff96 	bl	800e50c <__sfp_lock_release>
 800e5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5e8:	6025      	str	r5, [r4, #0]
 800e5ea:	61a5      	str	r5, [r4, #24]
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5f4:	f000 f89a 	bl	800e72c <memset>
 800e5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e600:	4620      	mov	r0, r4
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e604:	3468      	adds	r4, #104	; 0x68
 800e606:	e7d9      	b.n	800e5bc <__sfp+0x1c>
 800e608:	2104      	movs	r1, #4
 800e60a:	4638      	mov	r0, r7
 800e60c:	f7ff ff62 	bl	800e4d4 <__sfmoreglue>
 800e610:	4604      	mov	r4, r0
 800e612:	6030      	str	r0, [r6, #0]
 800e614:	2800      	cmp	r0, #0
 800e616:	d1d5      	bne.n	800e5c4 <__sfp+0x24>
 800e618:	f7ff ff78 	bl	800e50c <__sfp_lock_release>
 800e61c:	230c      	movs	r3, #12
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	e7ee      	b.n	800e600 <__sfp+0x60>
 800e622:	bf00      	nop
 800e624:	08014608 	.word	0x08014608
 800e628:	ffff0001 	.word	0xffff0001

0800e62c <_fwalk_reent>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	4606      	mov	r6, r0
 800e632:	4688      	mov	r8, r1
 800e634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e638:	2700      	movs	r7, #0
 800e63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e63e:	f1b9 0901 	subs.w	r9, r9, #1
 800e642:	d505      	bpl.n	800e650 <_fwalk_reent+0x24>
 800e644:	6824      	ldr	r4, [r4, #0]
 800e646:	2c00      	cmp	r4, #0
 800e648:	d1f7      	bne.n	800e63a <_fwalk_reent+0xe>
 800e64a:	4638      	mov	r0, r7
 800e64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e650:	89ab      	ldrh	r3, [r5, #12]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d907      	bls.n	800e666 <_fwalk_reent+0x3a>
 800e656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e65a:	3301      	adds	r3, #1
 800e65c:	d003      	beq.n	800e666 <_fwalk_reent+0x3a>
 800e65e:	4629      	mov	r1, r5
 800e660:	4630      	mov	r0, r6
 800e662:	47c0      	blx	r8
 800e664:	4307      	orrs	r7, r0
 800e666:	3568      	adds	r5, #104	; 0x68
 800e668:	e7e9      	b.n	800e63e <_fwalk_reent+0x12>
	...

0800e66c <__libc_init_array>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	4d0d      	ldr	r5, [pc, #52]	; (800e6a4 <__libc_init_array+0x38>)
 800e670:	4c0d      	ldr	r4, [pc, #52]	; (800e6a8 <__libc_init_array+0x3c>)
 800e672:	1b64      	subs	r4, r4, r5
 800e674:	10a4      	asrs	r4, r4, #2
 800e676:	2600      	movs	r6, #0
 800e678:	42a6      	cmp	r6, r4
 800e67a:	d109      	bne.n	800e690 <__libc_init_array+0x24>
 800e67c:	4d0b      	ldr	r5, [pc, #44]	; (800e6ac <__libc_init_array+0x40>)
 800e67e:	4c0c      	ldr	r4, [pc, #48]	; (800e6b0 <__libc_init_array+0x44>)
 800e680:	f005 f886 	bl	8013790 <_init>
 800e684:	1b64      	subs	r4, r4, r5
 800e686:	10a4      	asrs	r4, r4, #2
 800e688:	2600      	movs	r6, #0
 800e68a:	42a6      	cmp	r6, r4
 800e68c:	d105      	bne.n	800e69a <__libc_init_array+0x2e>
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	f855 3b04 	ldr.w	r3, [r5], #4
 800e694:	4798      	blx	r3
 800e696:	3601      	adds	r6, #1
 800e698:	e7ee      	b.n	800e678 <__libc_init_array+0xc>
 800e69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69e:	4798      	blx	r3
 800e6a0:	3601      	adds	r6, #1
 800e6a2:	e7f2      	b.n	800e68a <__libc_init_array+0x1e>
 800e6a4:	08014a78 	.word	0x08014a78
 800e6a8:	08014a78 	.word	0x08014a78
 800e6ac:	08014a78 	.word	0x08014a78
 800e6b0:	08014a80 	.word	0x08014a80

0800e6b4 <__retarget_lock_init_recursive>:
 800e6b4:	4770      	bx	lr

0800e6b6 <__retarget_lock_acquire_recursive>:
 800e6b6:	4770      	bx	lr

0800e6b8 <__retarget_lock_release_recursive>:
 800e6b8:	4770      	bx	lr
	...

0800e6bc <malloc>:
 800e6bc:	4b02      	ldr	r3, [pc, #8]	; (800e6c8 <malloc+0xc>)
 800e6be:	4601      	mov	r1, r0
 800e6c0:	6818      	ldr	r0, [r3, #0]
 800e6c2:	f000 b88b 	b.w	800e7dc <_malloc_r>
 800e6c6:	bf00      	nop
 800e6c8:	2000003c 	.word	0x2000003c

0800e6cc <free>:
 800e6cc:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <free+0xc>)
 800e6ce:	4601      	mov	r1, r0
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	f000 b833 	b.w	800e73c <_free_r>
 800e6d6:	bf00      	nop
 800e6d8:	2000003c 	.word	0x2000003c

0800e6dc <memcpy>:
 800e6dc:	440a      	add	r2, r1
 800e6de:	4291      	cmp	r1, r2
 800e6e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6e4:	d100      	bne.n	800e6e8 <memcpy+0xc>
 800e6e6:	4770      	bx	lr
 800e6e8:	b510      	push	{r4, lr}
 800e6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6f2:	4291      	cmp	r1, r2
 800e6f4:	d1f9      	bne.n	800e6ea <memcpy+0xe>
 800e6f6:	bd10      	pop	{r4, pc}

0800e6f8 <memmove>:
 800e6f8:	4288      	cmp	r0, r1
 800e6fa:	b510      	push	{r4, lr}
 800e6fc:	eb01 0402 	add.w	r4, r1, r2
 800e700:	d902      	bls.n	800e708 <memmove+0x10>
 800e702:	4284      	cmp	r4, r0
 800e704:	4623      	mov	r3, r4
 800e706:	d807      	bhi.n	800e718 <memmove+0x20>
 800e708:	1e43      	subs	r3, r0, #1
 800e70a:	42a1      	cmp	r1, r4
 800e70c:	d008      	beq.n	800e720 <memmove+0x28>
 800e70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e716:	e7f8      	b.n	800e70a <memmove+0x12>
 800e718:	4402      	add	r2, r0
 800e71a:	4601      	mov	r1, r0
 800e71c:	428a      	cmp	r2, r1
 800e71e:	d100      	bne.n	800e722 <memmove+0x2a>
 800e720:	bd10      	pop	{r4, pc}
 800e722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e72a:	e7f7      	b.n	800e71c <memmove+0x24>

0800e72c <memset>:
 800e72c:	4402      	add	r2, r0
 800e72e:	4603      	mov	r3, r0
 800e730:	4293      	cmp	r3, r2
 800e732:	d100      	bne.n	800e736 <memset+0xa>
 800e734:	4770      	bx	lr
 800e736:	f803 1b01 	strb.w	r1, [r3], #1
 800e73a:	e7f9      	b.n	800e730 <memset+0x4>

0800e73c <_free_r>:
 800e73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e73e:	2900      	cmp	r1, #0
 800e740:	d048      	beq.n	800e7d4 <_free_r+0x98>
 800e742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e746:	9001      	str	r0, [sp, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f1a1 0404 	sub.w	r4, r1, #4
 800e74e:	bfb8      	it	lt
 800e750:	18e4      	addlt	r4, r4, r3
 800e752:	f003 fc85 	bl	8012060 <__malloc_lock>
 800e756:	4a20      	ldr	r2, [pc, #128]	; (800e7d8 <_free_r+0x9c>)
 800e758:	9801      	ldr	r0, [sp, #4]
 800e75a:	6813      	ldr	r3, [r2, #0]
 800e75c:	4615      	mov	r5, r2
 800e75e:	b933      	cbnz	r3, 800e76e <_free_r+0x32>
 800e760:	6063      	str	r3, [r4, #4]
 800e762:	6014      	str	r4, [r2, #0]
 800e764:	b003      	add	sp, #12
 800e766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e76a:	f003 bc7f 	b.w	801206c <__malloc_unlock>
 800e76e:	42a3      	cmp	r3, r4
 800e770:	d90b      	bls.n	800e78a <_free_r+0x4e>
 800e772:	6821      	ldr	r1, [r4, #0]
 800e774:	1862      	adds	r2, r4, r1
 800e776:	4293      	cmp	r3, r2
 800e778:	bf04      	itt	eq
 800e77a:	681a      	ldreq	r2, [r3, #0]
 800e77c:	685b      	ldreq	r3, [r3, #4]
 800e77e:	6063      	str	r3, [r4, #4]
 800e780:	bf04      	itt	eq
 800e782:	1852      	addeq	r2, r2, r1
 800e784:	6022      	streq	r2, [r4, #0]
 800e786:	602c      	str	r4, [r5, #0]
 800e788:	e7ec      	b.n	800e764 <_free_r+0x28>
 800e78a:	461a      	mov	r2, r3
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	b10b      	cbz	r3, 800e794 <_free_r+0x58>
 800e790:	42a3      	cmp	r3, r4
 800e792:	d9fa      	bls.n	800e78a <_free_r+0x4e>
 800e794:	6811      	ldr	r1, [r2, #0]
 800e796:	1855      	adds	r5, r2, r1
 800e798:	42a5      	cmp	r5, r4
 800e79a:	d10b      	bne.n	800e7b4 <_free_r+0x78>
 800e79c:	6824      	ldr	r4, [r4, #0]
 800e79e:	4421      	add	r1, r4
 800e7a0:	1854      	adds	r4, r2, r1
 800e7a2:	42a3      	cmp	r3, r4
 800e7a4:	6011      	str	r1, [r2, #0]
 800e7a6:	d1dd      	bne.n	800e764 <_free_r+0x28>
 800e7a8:	681c      	ldr	r4, [r3, #0]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	6053      	str	r3, [r2, #4]
 800e7ae:	4421      	add	r1, r4
 800e7b0:	6011      	str	r1, [r2, #0]
 800e7b2:	e7d7      	b.n	800e764 <_free_r+0x28>
 800e7b4:	d902      	bls.n	800e7bc <_free_r+0x80>
 800e7b6:	230c      	movs	r3, #12
 800e7b8:	6003      	str	r3, [r0, #0]
 800e7ba:	e7d3      	b.n	800e764 <_free_r+0x28>
 800e7bc:	6825      	ldr	r5, [r4, #0]
 800e7be:	1961      	adds	r1, r4, r5
 800e7c0:	428b      	cmp	r3, r1
 800e7c2:	bf04      	itt	eq
 800e7c4:	6819      	ldreq	r1, [r3, #0]
 800e7c6:	685b      	ldreq	r3, [r3, #4]
 800e7c8:	6063      	str	r3, [r4, #4]
 800e7ca:	bf04      	itt	eq
 800e7cc:	1949      	addeq	r1, r1, r5
 800e7ce:	6021      	streq	r1, [r4, #0]
 800e7d0:	6054      	str	r4, [r2, #4]
 800e7d2:	e7c7      	b.n	800e764 <_free_r+0x28>
 800e7d4:	b003      	add	sp, #12
 800e7d6:	bd30      	pop	{r4, r5, pc}
 800e7d8:	20004f3c 	.word	0x20004f3c

0800e7dc <_malloc_r>:
 800e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7de:	1ccd      	adds	r5, r1, #3
 800e7e0:	f025 0503 	bic.w	r5, r5, #3
 800e7e4:	3508      	adds	r5, #8
 800e7e6:	2d0c      	cmp	r5, #12
 800e7e8:	bf38      	it	cc
 800e7ea:	250c      	movcc	r5, #12
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	db01      	blt.n	800e7f6 <_malloc_r+0x1a>
 800e7f2:	42a9      	cmp	r1, r5
 800e7f4:	d903      	bls.n	800e7fe <_malloc_r+0x22>
 800e7f6:	230c      	movs	r3, #12
 800e7f8:	6033      	str	r3, [r6, #0]
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7fe:	f003 fc2f 	bl	8012060 <__malloc_lock>
 800e802:	4921      	ldr	r1, [pc, #132]	; (800e888 <_malloc_r+0xac>)
 800e804:	680a      	ldr	r2, [r1, #0]
 800e806:	4614      	mov	r4, r2
 800e808:	b99c      	cbnz	r4, 800e832 <_malloc_r+0x56>
 800e80a:	4f20      	ldr	r7, [pc, #128]	; (800e88c <_malloc_r+0xb0>)
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	b923      	cbnz	r3, 800e81a <_malloc_r+0x3e>
 800e810:	4621      	mov	r1, r4
 800e812:	4630      	mov	r0, r6
 800e814:	f000 ffae 	bl	800f774 <_sbrk_r>
 800e818:	6038      	str	r0, [r7, #0]
 800e81a:	4629      	mov	r1, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 ffa9 	bl	800f774 <_sbrk_r>
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	d123      	bne.n	800e86e <_malloc_r+0x92>
 800e826:	230c      	movs	r3, #12
 800e828:	6033      	str	r3, [r6, #0]
 800e82a:	4630      	mov	r0, r6
 800e82c:	f003 fc1e 	bl	801206c <__malloc_unlock>
 800e830:	e7e3      	b.n	800e7fa <_malloc_r+0x1e>
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	1b5b      	subs	r3, r3, r5
 800e836:	d417      	bmi.n	800e868 <_malloc_r+0x8c>
 800e838:	2b0b      	cmp	r3, #11
 800e83a:	d903      	bls.n	800e844 <_malloc_r+0x68>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	441c      	add	r4, r3
 800e840:	6025      	str	r5, [r4, #0]
 800e842:	e004      	b.n	800e84e <_malloc_r+0x72>
 800e844:	6863      	ldr	r3, [r4, #4]
 800e846:	42a2      	cmp	r2, r4
 800e848:	bf0c      	ite	eq
 800e84a:	600b      	streq	r3, [r1, #0]
 800e84c:	6053      	strne	r3, [r2, #4]
 800e84e:	4630      	mov	r0, r6
 800e850:	f003 fc0c 	bl	801206c <__malloc_unlock>
 800e854:	f104 000b 	add.w	r0, r4, #11
 800e858:	1d23      	adds	r3, r4, #4
 800e85a:	f020 0007 	bic.w	r0, r0, #7
 800e85e:	1ac2      	subs	r2, r0, r3
 800e860:	d0cc      	beq.n	800e7fc <_malloc_r+0x20>
 800e862:	1a1b      	subs	r3, r3, r0
 800e864:	50a3      	str	r3, [r4, r2]
 800e866:	e7c9      	b.n	800e7fc <_malloc_r+0x20>
 800e868:	4622      	mov	r2, r4
 800e86a:	6864      	ldr	r4, [r4, #4]
 800e86c:	e7cc      	b.n	800e808 <_malloc_r+0x2c>
 800e86e:	1cc4      	adds	r4, r0, #3
 800e870:	f024 0403 	bic.w	r4, r4, #3
 800e874:	42a0      	cmp	r0, r4
 800e876:	d0e3      	beq.n	800e840 <_malloc_r+0x64>
 800e878:	1a21      	subs	r1, r4, r0
 800e87a:	4630      	mov	r0, r6
 800e87c:	f000 ff7a 	bl	800f774 <_sbrk_r>
 800e880:	3001      	adds	r0, #1
 800e882:	d1dd      	bne.n	800e840 <_malloc_r+0x64>
 800e884:	e7cf      	b.n	800e826 <_malloc_r+0x4a>
 800e886:	bf00      	nop
 800e888:	20004f3c 	.word	0x20004f3c
 800e88c:	20004f40 	.word	0x20004f40

0800e890 <__cvt>:
 800e890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e894:	ec55 4b10 	vmov	r4, r5, d0
 800e898:	2d00      	cmp	r5, #0
 800e89a:	460e      	mov	r6, r1
 800e89c:	4619      	mov	r1, r3
 800e89e:	462b      	mov	r3, r5
 800e8a0:	bfbb      	ittet	lt
 800e8a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8a6:	461d      	movlt	r5, r3
 800e8a8:	2300      	movge	r3, #0
 800e8aa:	232d      	movlt	r3, #45	; 0x2d
 800e8ac:	700b      	strb	r3, [r1, #0]
 800e8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e8b4:	4691      	mov	r9, r2
 800e8b6:	f023 0820 	bic.w	r8, r3, #32
 800e8ba:	bfbc      	itt	lt
 800e8bc:	4622      	movlt	r2, r4
 800e8be:	4614      	movlt	r4, r2
 800e8c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8c4:	d005      	beq.n	800e8d2 <__cvt+0x42>
 800e8c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e8ca:	d100      	bne.n	800e8ce <__cvt+0x3e>
 800e8cc:	3601      	adds	r6, #1
 800e8ce:	2102      	movs	r1, #2
 800e8d0:	e000      	b.n	800e8d4 <__cvt+0x44>
 800e8d2:	2103      	movs	r1, #3
 800e8d4:	ab03      	add	r3, sp, #12
 800e8d6:	9301      	str	r3, [sp, #4]
 800e8d8:	ab02      	add	r3, sp, #8
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	ec45 4b10 	vmov	d0, r4, r5
 800e8e0:	4653      	mov	r3, sl
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	f002 f900 	bl	8010ae8 <_dtoa_r>
 800e8e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	d102      	bne.n	800e8f6 <__cvt+0x66>
 800e8f0:	f019 0f01 	tst.w	r9, #1
 800e8f4:	d022      	beq.n	800e93c <__cvt+0xac>
 800e8f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8fa:	eb07 0906 	add.w	r9, r7, r6
 800e8fe:	d110      	bne.n	800e922 <__cvt+0x92>
 800e900:	783b      	ldrb	r3, [r7, #0]
 800e902:	2b30      	cmp	r3, #48	; 0x30
 800e904:	d10a      	bne.n	800e91c <__cvt+0x8c>
 800e906:	2200      	movs	r2, #0
 800e908:	2300      	movs	r3, #0
 800e90a:	4620      	mov	r0, r4
 800e90c:	4629      	mov	r1, r5
 800e90e:	f7f2 f8eb 	bl	8000ae8 <__aeabi_dcmpeq>
 800e912:	b918      	cbnz	r0, 800e91c <__cvt+0x8c>
 800e914:	f1c6 0601 	rsb	r6, r6, #1
 800e918:	f8ca 6000 	str.w	r6, [sl]
 800e91c:	f8da 3000 	ldr.w	r3, [sl]
 800e920:	4499      	add	r9, r3
 800e922:	2200      	movs	r2, #0
 800e924:	2300      	movs	r3, #0
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	f7f2 f8dd 	bl	8000ae8 <__aeabi_dcmpeq>
 800e92e:	b108      	cbz	r0, 800e934 <__cvt+0xa4>
 800e930:	f8cd 900c 	str.w	r9, [sp, #12]
 800e934:	2230      	movs	r2, #48	; 0x30
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	454b      	cmp	r3, r9
 800e93a:	d307      	bcc.n	800e94c <__cvt+0xbc>
 800e93c:	9b03      	ldr	r3, [sp, #12]
 800e93e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e940:	1bdb      	subs	r3, r3, r7
 800e942:	4638      	mov	r0, r7
 800e944:	6013      	str	r3, [r2, #0]
 800e946:	b004      	add	sp, #16
 800e948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94c:	1c59      	adds	r1, r3, #1
 800e94e:	9103      	str	r1, [sp, #12]
 800e950:	701a      	strb	r2, [r3, #0]
 800e952:	e7f0      	b.n	800e936 <__cvt+0xa6>

0800e954 <__exponent>:
 800e954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e956:	4603      	mov	r3, r0
 800e958:	2900      	cmp	r1, #0
 800e95a:	bfb8      	it	lt
 800e95c:	4249      	neglt	r1, r1
 800e95e:	f803 2b02 	strb.w	r2, [r3], #2
 800e962:	bfb4      	ite	lt
 800e964:	222d      	movlt	r2, #45	; 0x2d
 800e966:	222b      	movge	r2, #43	; 0x2b
 800e968:	2909      	cmp	r1, #9
 800e96a:	7042      	strb	r2, [r0, #1]
 800e96c:	dd2a      	ble.n	800e9c4 <__exponent+0x70>
 800e96e:	f10d 0407 	add.w	r4, sp, #7
 800e972:	46a4      	mov	ip, r4
 800e974:	270a      	movs	r7, #10
 800e976:	46a6      	mov	lr, r4
 800e978:	460a      	mov	r2, r1
 800e97a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e97e:	fb07 1516 	mls	r5, r7, r6, r1
 800e982:	3530      	adds	r5, #48	; 0x30
 800e984:	2a63      	cmp	r2, #99	; 0x63
 800e986:	f104 34ff 	add.w	r4, r4, #4294967295
 800e98a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e98e:	4631      	mov	r1, r6
 800e990:	dcf1      	bgt.n	800e976 <__exponent+0x22>
 800e992:	3130      	adds	r1, #48	; 0x30
 800e994:	f1ae 0502 	sub.w	r5, lr, #2
 800e998:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e99c:	1c44      	adds	r4, r0, #1
 800e99e:	4629      	mov	r1, r5
 800e9a0:	4561      	cmp	r1, ip
 800e9a2:	d30a      	bcc.n	800e9ba <__exponent+0x66>
 800e9a4:	f10d 0209 	add.w	r2, sp, #9
 800e9a8:	eba2 020e 	sub.w	r2, r2, lr
 800e9ac:	4565      	cmp	r5, ip
 800e9ae:	bf88      	it	hi
 800e9b0:	2200      	movhi	r2, #0
 800e9b2:	4413      	add	r3, r2
 800e9b4:	1a18      	subs	r0, r3, r0
 800e9b6:	b003      	add	sp, #12
 800e9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e9c2:	e7ed      	b.n	800e9a0 <__exponent+0x4c>
 800e9c4:	2330      	movs	r3, #48	; 0x30
 800e9c6:	3130      	adds	r1, #48	; 0x30
 800e9c8:	7083      	strb	r3, [r0, #2]
 800e9ca:	70c1      	strb	r1, [r0, #3]
 800e9cc:	1d03      	adds	r3, r0, #4
 800e9ce:	e7f1      	b.n	800e9b4 <__exponent+0x60>

0800e9d0 <_printf_float>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	ed2d 8b02 	vpush	{d8}
 800e9d8:	b08d      	sub	sp, #52	; 0x34
 800e9da:	460c      	mov	r4, r1
 800e9dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e9e0:	4616      	mov	r6, r2
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	f003 faaf 	bl	8011f48 <_localeconv_r>
 800e9ea:	f8d0 a000 	ldr.w	sl, [r0]
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	f7f1 fbfe 	bl	80001f0 <strlen>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	9305      	str	r3, [sp, #20]
 800e9fc:	f8d8 3000 	ldr.w	r3, [r8]
 800ea00:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea04:	3307      	adds	r3, #7
 800ea06:	f023 0307 	bic.w	r3, r3, #7
 800ea0a:	f103 0208 	add.w	r2, r3, #8
 800ea0e:	f8c8 2000 	str.w	r2, [r8]
 800ea12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea22:	9307      	str	r3, [sp, #28]
 800ea24:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea28:	ee08 0a10 	vmov	s16, r0
 800ea2c:	4b9f      	ldr	r3, [pc, #636]	; (800ecac <_printf_float+0x2dc>)
 800ea2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea32:	f04f 32ff 	mov.w	r2, #4294967295
 800ea36:	f7f2 f889 	bl	8000b4c <__aeabi_dcmpun>
 800ea3a:	bb88      	cbnz	r0, 800eaa0 <_printf_float+0xd0>
 800ea3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea40:	4b9a      	ldr	r3, [pc, #616]	; (800ecac <_printf_float+0x2dc>)
 800ea42:	f04f 32ff 	mov.w	r2, #4294967295
 800ea46:	f7f2 f863 	bl	8000b10 <__aeabi_dcmple>
 800ea4a:	bb48      	cbnz	r0, 800eaa0 <_printf_float+0xd0>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2300      	movs	r3, #0
 800ea50:	4640      	mov	r0, r8
 800ea52:	4649      	mov	r1, r9
 800ea54:	f7f2 f852 	bl	8000afc <__aeabi_dcmplt>
 800ea58:	b110      	cbz	r0, 800ea60 <_printf_float+0x90>
 800ea5a:	232d      	movs	r3, #45	; 0x2d
 800ea5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea60:	4b93      	ldr	r3, [pc, #588]	; (800ecb0 <_printf_float+0x2e0>)
 800ea62:	4894      	ldr	r0, [pc, #592]	; (800ecb4 <_printf_float+0x2e4>)
 800ea64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea68:	bf94      	ite	ls
 800ea6a:	4698      	movls	r8, r3
 800ea6c:	4680      	movhi	r8, r0
 800ea6e:	2303      	movs	r3, #3
 800ea70:	6123      	str	r3, [r4, #16]
 800ea72:	9b05      	ldr	r3, [sp, #20]
 800ea74:	f023 0204 	bic.w	r2, r3, #4
 800ea78:	6022      	str	r2, [r4, #0]
 800ea7a:	f04f 0900 	mov.w	r9, #0
 800ea7e:	9700      	str	r7, [sp, #0]
 800ea80:	4633      	mov	r3, r6
 800ea82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea84:	4621      	mov	r1, r4
 800ea86:	4628      	mov	r0, r5
 800ea88:	f000 f9d8 	bl	800ee3c <_printf_common>
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	f040 8090 	bne.w	800ebb2 <_printf_float+0x1e2>
 800ea92:	f04f 30ff 	mov.w	r0, #4294967295
 800ea96:	b00d      	add	sp, #52	; 0x34
 800ea98:	ecbd 8b02 	vpop	{d8}
 800ea9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa0:	4642      	mov	r2, r8
 800eaa2:	464b      	mov	r3, r9
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	f7f2 f850 	bl	8000b4c <__aeabi_dcmpun>
 800eaac:	b140      	cbz	r0, 800eac0 <_printf_float+0xf0>
 800eaae:	464b      	mov	r3, r9
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	bfbc      	itt	lt
 800eab4:	232d      	movlt	r3, #45	; 0x2d
 800eab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eaba:	487f      	ldr	r0, [pc, #508]	; (800ecb8 <_printf_float+0x2e8>)
 800eabc:	4b7f      	ldr	r3, [pc, #508]	; (800ecbc <_printf_float+0x2ec>)
 800eabe:	e7d1      	b.n	800ea64 <_printf_float+0x94>
 800eac0:	6863      	ldr	r3, [r4, #4]
 800eac2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eac6:	9206      	str	r2, [sp, #24]
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	d13f      	bne.n	800eb4c <_printf_float+0x17c>
 800eacc:	2306      	movs	r3, #6
 800eace:	6063      	str	r3, [r4, #4]
 800ead0:	9b05      	ldr	r3, [sp, #20]
 800ead2:	6861      	ldr	r1, [r4, #4]
 800ead4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ead8:	2300      	movs	r3, #0
 800eada:	9303      	str	r3, [sp, #12]
 800eadc:	ab0a      	add	r3, sp, #40	; 0x28
 800eade:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eae2:	ab09      	add	r3, sp, #36	; 0x24
 800eae4:	ec49 8b10 	vmov	d0, r8, r9
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	6022      	str	r2, [r4, #0]
 800eaec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f7ff fecd 	bl	800e890 <__cvt>
 800eaf6:	9b06      	ldr	r3, [sp, #24]
 800eaf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eafa:	2b47      	cmp	r3, #71	; 0x47
 800eafc:	4680      	mov	r8, r0
 800eafe:	d108      	bne.n	800eb12 <_printf_float+0x142>
 800eb00:	1cc8      	adds	r0, r1, #3
 800eb02:	db02      	blt.n	800eb0a <_printf_float+0x13a>
 800eb04:	6863      	ldr	r3, [r4, #4]
 800eb06:	4299      	cmp	r1, r3
 800eb08:	dd41      	ble.n	800eb8e <_printf_float+0x1be>
 800eb0a:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb0e:	fa5f fb8b 	uxtb.w	fp, fp
 800eb12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb16:	d820      	bhi.n	800eb5a <_printf_float+0x18a>
 800eb18:	3901      	subs	r1, #1
 800eb1a:	465a      	mov	r2, fp
 800eb1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb20:	9109      	str	r1, [sp, #36]	; 0x24
 800eb22:	f7ff ff17 	bl	800e954 <__exponent>
 800eb26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb28:	1813      	adds	r3, r2, r0
 800eb2a:	2a01      	cmp	r2, #1
 800eb2c:	4681      	mov	r9, r0
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	dc02      	bgt.n	800eb38 <_printf_float+0x168>
 800eb32:	6822      	ldr	r2, [r4, #0]
 800eb34:	07d2      	lsls	r2, r2, #31
 800eb36:	d501      	bpl.n	800eb3c <_printf_float+0x16c>
 800eb38:	3301      	adds	r3, #1
 800eb3a:	6123      	str	r3, [r4, #16]
 800eb3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d09c      	beq.n	800ea7e <_printf_float+0xae>
 800eb44:	232d      	movs	r3, #45	; 0x2d
 800eb46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb4a:	e798      	b.n	800ea7e <_printf_float+0xae>
 800eb4c:	9a06      	ldr	r2, [sp, #24]
 800eb4e:	2a47      	cmp	r2, #71	; 0x47
 800eb50:	d1be      	bne.n	800ead0 <_printf_float+0x100>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1bc      	bne.n	800ead0 <_printf_float+0x100>
 800eb56:	2301      	movs	r3, #1
 800eb58:	e7b9      	b.n	800eace <_printf_float+0xfe>
 800eb5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb5e:	d118      	bne.n	800eb92 <_printf_float+0x1c2>
 800eb60:	2900      	cmp	r1, #0
 800eb62:	6863      	ldr	r3, [r4, #4]
 800eb64:	dd0b      	ble.n	800eb7e <_printf_float+0x1ae>
 800eb66:	6121      	str	r1, [r4, #16]
 800eb68:	b913      	cbnz	r3, 800eb70 <_printf_float+0x1a0>
 800eb6a:	6822      	ldr	r2, [r4, #0]
 800eb6c:	07d0      	lsls	r0, r2, #31
 800eb6e:	d502      	bpl.n	800eb76 <_printf_float+0x1a6>
 800eb70:	3301      	adds	r3, #1
 800eb72:	440b      	add	r3, r1
 800eb74:	6123      	str	r3, [r4, #16]
 800eb76:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb78:	f04f 0900 	mov.w	r9, #0
 800eb7c:	e7de      	b.n	800eb3c <_printf_float+0x16c>
 800eb7e:	b913      	cbnz	r3, 800eb86 <_printf_float+0x1b6>
 800eb80:	6822      	ldr	r2, [r4, #0]
 800eb82:	07d2      	lsls	r2, r2, #31
 800eb84:	d501      	bpl.n	800eb8a <_printf_float+0x1ba>
 800eb86:	3302      	adds	r3, #2
 800eb88:	e7f4      	b.n	800eb74 <_printf_float+0x1a4>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e7f2      	b.n	800eb74 <_printf_float+0x1a4>
 800eb8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb94:	4299      	cmp	r1, r3
 800eb96:	db05      	blt.n	800eba4 <_printf_float+0x1d4>
 800eb98:	6823      	ldr	r3, [r4, #0]
 800eb9a:	6121      	str	r1, [r4, #16]
 800eb9c:	07d8      	lsls	r0, r3, #31
 800eb9e:	d5ea      	bpl.n	800eb76 <_printf_float+0x1a6>
 800eba0:	1c4b      	adds	r3, r1, #1
 800eba2:	e7e7      	b.n	800eb74 <_printf_float+0x1a4>
 800eba4:	2900      	cmp	r1, #0
 800eba6:	bfd4      	ite	le
 800eba8:	f1c1 0202 	rsble	r2, r1, #2
 800ebac:	2201      	movgt	r2, #1
 800ebae:	4413      	add	r3, r2
 800ebb0:	e7e0      	b.n	800eb74 <_printf_float+0x1a4>
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	055a      	lsls	r2, r3, #21
 800ebb6:	d407      	bmi.n	800ebc8 <_printf_float+0x1f8>
 800ebb8:	6923      	ldr	r3, [r4, #16]
 800ebba:	4642      	mov	r2, r8
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	d12c      	bne.n	800ec20 <_printf_float+0x250>
 800ebc6:	e764      	b.n	800ea92 <_printf_float+0xc2>
 800ebc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ebcc:	f240 80e0 	bls.w	800ed90 <_printf_float+0x3c0>
 800ebd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f7f1 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d034      	beq.n	800ec4a <_printf_float+0x27a>
 800ebe0:	4a37      	ldr	r2, [pc, #220]	; (800ecc0 <_printf_float+0x2f0>)
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	4631      	mov	r1, r6
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b8      	blx	r7
 800ebea:	3001      	adds	r0, #1
 800ebec:	f43f af51 	beq.w	800ea92 <_printf_float+0xc2>
 800ebf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	db02      	blt.n	800ebfe <_printf_float+0x22e>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	07d8      	lsls	r0, r3, #31
 800ebfc:	d510      	bpl.n	800ec20 <_printf_float+0x250>
 800ebfe:	ee18 3a10 	vmov	r3, s16
 800ec02:	4652      	mov	r2, sl
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	f43f af41 	beq.w	800ea92 <_printf_float+0xc2>
 800ec10:	f04f 0800 	mov.w	r8, #0
 800ec14:	f104 091a 	add.w	r9, r4, #26
 800ec18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	4543      	cmp	r3, r8
 800ec1e:	dc09      	bgt.n	800ec34 <_printf_float+0x264>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	079b      	lsls	r3, r3, #30
 800ec24:	f100 8105 	bmi.w	800ee32 <_printf_float+0x462>
 800ec28:	68e0      	ldr	r0, [r4, #12]
 800ec2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2c:	4298      	cmp	r0, r3
 800ec2e:	bfb8      	it	lt
 800ec30:	4618      	movlt	r0, r3
 800ec32:	e730      	b.n	800ea96 <_printf_float+0xc6>
 800ec34:	2301      	movs	r3, #1
 800ec36:	464a      	mov	r2, r9
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b8      	blx	r7
 800ec3e:	3001      	adds	r0, #1
 800ec40:	f43f af27 	beq.w	800ea92 <_printf_float+0xc2>
 800ec44:	f108 0801 	add.w	r8, r8, #1
 800ec48:	e7e6      	b.n	800ec18 <_printf_float+0x248>
 800ec4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dc39      	bgt.n	800ecc4 <_printf_float+0x2f4>
 800ec50:	4a1b      	ldr	r2, [pc, #108]	; (800ecc0 <_printf_float+0x2f0>)
 800ec52:	2301      	movs	r3, #1
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b8      	blx	r7
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	f43f af19 	beq.w	800ea92 <_printf_float+0xc2>
 800ec60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec64:	4313      	orrs	r3, r2
 800ec66:	d102      	bne.n	800ec6e <_printf_float+0x29e>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	07d9      	lsls	r1, r3, #31
 800ec6c:	d5d8      	bpl.n	800ec20 <_printf_float+0x250>
 800ec6e:	ee18 3a10 	vmov	r3, s16
 800ec72:	4652      	mov	r2, sl
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f af09 	beq.w	800ea92 <_printf_float+0xc2>
 800ec80:	f04f 0900 	mov.w	r9, #0
 800ec84:	f104 0a1a 	add.w	sl, r4, #26
 800ec88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec8a:	425b      	negs	r3, r3
 800ec8c:	454b      	cmp	r3, r9
 800ec8e:	dc01      	bgt.n	800ec94 <_printf_float+0x2c4>
 800ec90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec92:	e792      	b.n	800ebba <_printf_float+0x1ea>
 800ec94:	2301      	movs	r3, #1
 800ec96:	4652      	mov	r2, sl
 800ec98:	4631      	mov	r1, r6
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b8      	blx	r7
 800ec9e:	3001      	adds	r0, #1
 800eca0:	f43f aef7 	beq.w	800ea92 <_printf_float+0xc2>
 800eca4:	f109 0901 	add.w	r9, r9, #1
 800eca8:	e7ee      	b.n	800ec88 <_printf_float+0x2b8>
 800ecaa:	bf00      	nop
 800ecac:	7fefffff 	.word	0x7fefffff
 800ecb0:	0801460c 	.word	0x0801460c
 800ecb4:	08014610 	.word	0x08014610
 800ecb8:	08014618 	.word	0x08014618
 800ecbc:	08014614 	.word	0x08014614
 800ecc0:	08014a59 	.word	0x08014a59
 800ecc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bfa8      	it	ge
 800eccc:	461a      	movge	r2, r3
 800ecce:	2a00      	cmp	r2, #0
 800ecd0:	4691      	mov	r9, r2
 800ecd2:	dc37      	bgt.n	800ed44 <_printf_float+0x374>
 800ecd4:	f04f 0b00 	mov.w	fp, #0
 800ecd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecdc:	f104 021a 	add.w	r2, r4, #26
 800ece0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ece2:	9305      	str	r3, [sp, #20]
 800ece4:	eba3 0309 	sub.w	r3, r3, r9
 800ece8:	455b      	cmp	r3, fp
 800ecea:	dc33      	bgt.n	800ed54 <_printf_float+0x384>
 800ecec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	db3b      	blt.n	800ed6c <_printf_float+0x39c>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	07da      	lsls	r2, r3, #31
 800ecf8:	d438      	bmi.n	800ed6c <_printf_float+0x39c>
 800ecfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecfc:	9b05      	ldr	r3, [sp, #20]
 800ecfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	eba2 0901 	sub.w	r9, r2, r1
 800ed06:	4599      	cmp	r9, r3
 800ed08:	bfa8      	it	ge
 800ed0a:	4699      	movge	r9, r3
 800ed0c:	f1b9 0f00 	cmp.w	r9, #0
 800ed10:	dc35      	bgt.n	800ed7e <_printf_float+0x3ae>
 800ed12:	f04f 0800 	mov.w	r8, #0
 800ed16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed1a:	f104 0a1a 	add.w	sl, r4, #26
 800ed1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed22:	1a9b      	subs	r3, r3, r2
 800ed24:	eba3 0309 	sub.w	r3, r3, r9
 800ed28:	4543      	cmp	r3, r8
 800ed2a:	f77f af79 	ble.w	800ec20 <_printf_float+0x250>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	4652      	mov	r2, sl
 800ed32:	4631      	mov	r1, r6
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b8      	blx	r7
 800ed38:	3001      	adds	r0, #1
 800ed3a:	f43f aeaa 	beq.w	800ea92 <_printf_float+0xc2>
 800ed3e:	f108 0801 	add.w	r8, r8, #1
 800ed42:	e7ec      	b.n	800ed1e <_printf_float+0x34e>
 800ed44:	4613      	mov	r3, r2
 800ed46:	4631      	mov	r1, r6
 800ed48:	4642      	mov	r2, r8
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	47b8      	blx	r7
 800ed4e:	3001      	adds	r0, #1
 800ed50:	d1c0      	bne.n	800ecd4 <_printf_float+0x304>
 800ed52:	e69e      	b.n	800ea92 <_printf_float+0xc2>
 800ed54:	2301      	movs	r3, #1
 800ed56:	4631      	mov	r1, r6
 800ed58:	4628      	mov	r0, r5
 800ed5a:	9205      	str	r2, [sp, #20]
 800ed5c:	47b8      	blx	r7
 800ed5e:	3001      	adds	r0, #1
 800ed60:	f43f ae97 	beq.w	800ea92 <_printf_float+0xc2>
 800ed64:	9a05      	ldr	r2, [sp, #20]
 800ed66:	f10b 0b01 	add.w	fp, fp, #1
 800ed6a:	e7b9      	b.n	800ece0 <_printf_float+0x310>
 800ed6c:	ee18 3a10 	vmov	r3, s16
 800ed70:	4652      	mov	r2, sl
 800ed72:	4631      	mov	r1, r6
 800ed74:	4628      	mov	r0, r5
 800ed76:	47b8      	blx	r7
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d1be      	bne.n	800ecfa <_printf_float+0x32a>
 800ed7c:	e689      	b.n	800ea92 <_printf_float+0xc2>
 800ed7e:	9a05      	ldr	r2, [sp, #20]
 800ed80:	464b      	mov	r3, r9
 800ed82:	4442      	add	r2, r8
 800ed84:	4631      	mov	r1, r6
 800ed86:	4628      	mov	r0, r5
 800ed88:	47b8      	blx	r7
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	d1c1      	bne.n	800ed12 <_printf_float+0x342>
 800ed8e:	e680      	b.n	800ea92 <_printf_float+0xc2>
 800ed90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed92:	2a01      	cmp	r2, #1
 800ed94:	dc01      	bgt.n	800ed9a <_printf_float+0x3ca>
 800ed96:	07db      	lsls	r3, r3, #31
 800ed98:	d538      	bpl.n	800ee0c <_printf_float+0x43c>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	4642      	mov	r2, r8
 800ed9e:	4631      	mov	r1, r6
 800eda0:	4628      	mov	r0, r5
 800eda2:	47b8      	blx	r7
 800eda4:	3001      	adds	r0, #1
 800eda6:	f43f ae74 	beq.w	800ea92 <_printf_float+0xc2>
 800edaa:	ee18 3a10 	vmov	r3, s16
 800edae:	4652      	mov	r2, sl
 800edb0:	4631      	mov	r1, r6
 800edb2:	4628      	mov	r0, r5
 800edb4:	47b8      	blx	r7
 800edb6:	3001      	adds	r0, #1
 800edb8:	f43f ae6b 	beq.w	800ea92 <_printf_float+0xc2>
 800edbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edc0:	2200      	movs	r2, #0
 800edc2:	2300      	movs	r3, #0
 800edc4:	f7f1 fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 800edc8:	b9d8      	cbnz	r0, 800ee02 <_printf_float+0x432>
 800edca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edcc:	f108 0201 	add.w	r2, r8, #1
 800edd0:	3b01      	subs	r3, #1
 800edd2:	4631      	mov	r1, r6
 800edd4:	4628      	mov	r0, r5
 800edd6:	47b8      	blx	r7
 800edd8:	3001      	adds	r0, #1
 800edda:	d10e      	bne.n	800edfa <_printf_float+0x42a>
 800eddc:	e659      	b.n	800ea92 <_printf_float+0xc2>
 800edde:	2301      	movs	r3, #1
 800ede0:	4652      	mov	r2, sl
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	f43f ae52 	beq.w	800ea92 <_printf_float+0xc2>
 800edee:	f108 0801 	add.w	r8, r8, #1
 800edf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edf4:	3b01      	subs	r3, #1
 800edf6:	4543      	cmp	r3, r8
 800edf8:	dcf1      	bgt.n	800edde <_printf_float+0x40e>
 800edfa:	464b      	mov	r3, r9
 800edfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee00:	e6dc      	b.n	800ebbc <_printf_float+0x1ec>
 800ee02:	f04f 0800 	mov.w	r8, #0
 800ee06:	f104 0a1a 	add.w	sl, r4, #26
 800ee0a:	e7f2      	b.n	800edf2 <_printf_float+0x422>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	4642      	mov	r2, r8
 800ee10:	e7df      	b.n	800edd2 <_printf_float+0x402>
 800ee12:	2301      	movs	r3, #1
 800ee14:	464a      	mov	r2, r9
 800ee16:	4631      	mov	r1, r6
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b8      	blx	r7
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f43f ae38 	beq.w	800ea92 <_printf_float+0xc2>
 800ee22:	f108 0801 	add.w	r8, r8, #1
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee2a:	1a5b      	subs	r3, r3, r1
 800ee2c:	4543      	cmp	r3, r8
 800ee2e:	dcf0      	bgt.n	800ee12 <_printf_float+0x442>
 800ee30:	e6fa      	b.n	800ec28 <_printf_float+0x258>
 800ee32:	f04f 0800 	mov.w	r8, #0
 800ee36:	f104 0919 	add.w	r9, r4, #25
 800ee3a:	e7f4      	b.n	800ee26 <_printf_float+0x456>

0800ee3c <_printf_common>:
 800ee3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	4616      	mov	r6, r2
 800ee42:	4699      	mov	r9, r3
 800ee44:	688a      	ldr	r2, [r1, #8]
 800ee46:	690b      	ldr	r3, [r1, #16]
 800ee48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	bfb8      	it	lt
 800ee50:	4613      	movlt	r3, r2
 800ee52:	6033      	str	r3, [r6, #0]
 800ee54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee58:	4607      	mov	r7, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	b10a      	cbz	r2, 800ee62 <_printf_common+0x26>
 800ee5e:	3301      	adds	r3, #1
 800ee60:	6033      	str	r3, [r6, #0]
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	0699      	lsls	r1, r3, #26
 800ee66:	bf42      	ittt	mi
 800ee68:	6833      	ldrmi	r3, [r6, #0]
 800ee6a:	3302      	addmi	r3, #2
 800ee6c:	6033      	strmi	r3, [r6, #0]
 800ee6e:	6825      	ldr	r5, [r4, #0]
 800ee70:	f015 0506 	ands.w	r5, r5, #6
 800ee74:	d106      	bne.n	800ee84 <_printf_common+0x48>
 800ee76:	f104 0a19 	add.w	sl, r4, #25
 800ee7a:	68e3      	ldr	r3, [r4, #12]
 800ee7c:	6832      	ldr	r2, [r6, #0]
 800ee7e:	1a9b      	subs	r3, r3, r2
 800ee80:	42ab      	cmp	r3, r5
 800ee82:	dc26      	bgt.n	800eed2 <_printf_common+0x96>
 800ee84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee88:	1e13      	subs	r3, r2, #0
 800ee8a:	6822      	ldr	r2, [r4, #0]
 800ee8c:	bf18      	it	ne
 800ee8e:	2301      	movne	r3, #1
 800ee90:	0692      	lsls	r2, r2, #26
 800ee92:	d42b      	bmi.n	800eeec <_printf_common+0xb0>
 800ee94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee98:	4649      	mov	r1, r9
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	47c0      	blx	r8
 800ee9e:	3001      	adds	r0, #1
 800eea0:	d01e      	beq.n	800eee0 <_printf_common+0xa4>
 800eea2:	6823      	ldr	r3, [r4, #0]
 800eea4:	68e5      	ldr	r5, [r4, #12]
 800eea6:	6832      	ldr	r2, [r6, #0]
 800eea8:	f003 0306 	and.w	r3, r3, #6
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	bf08      	it	eq
 800eeb0:	1aad      	subeq	r5, r5, r2
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	6922      	ldr	r2, [r4, #16]
 800eeb6:	bf0c      	ite	eq
 800eeb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eebc:	2500      	movne	r5, #0
 800eebe:	4293      	cmp	r3, r2
 800eec0:	bfc4      	itt	gt
 800eec2:	1a9b      	subgt	r3, r3, r2
 800eec4:	18ed      	addgt	r5, r5, r3
 800eec6:	2600      	movs	r6, #0
 800eec8:	341a      	adds	r4, #26
 800eeca:	42b5      	cmp	r5, r6
 800eecc:	d11a      	bne.n	800ef04 <_printf_common+0xc8>
 800eece:	2000      	movs	r0, #0
 800eed0:	e008      	b.n	800eee4 <_printf_common+0xa8>
 800eed2:	2301      	movs	r3, #1
 800eed4:	4652      	mov	r2, sl
 800eed6:	4649      	mov	r1, r9
 800eed8:	4638      	mov	r0, r7
 800eeda:	47c0      	blx	r8
 800eedc:	3001      	adds	r0, #1
 800eede:	d103      	bne.n	800eee8 <_printf_common+0xac>
 800eee0:	f04f 30ff 	mov.w	r0, #4294967295
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee8:	3501      	adds	r5, #1
 800eeea:	e7c6      	b.n	800ee7a <_printf_common+0x3e>
 800eeec:	18e1      	adds	r1, r4, r3
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	2030      	movs	r0, #48	; 0x30
 800eef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eef6:	4422      	add	r2, r4
 800eef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eefc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef00:	3302      	adds	r3, #2
 800ef02:	e7c7      	b.n	800ee94 <_printf_common+0x58>
 800ef04:	2301      	movs	r3, #1
 800ef06:	4622      	mov	r2, r4
 800ef08:	4649      	mov	r1, r9
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	47c0      	blx	r8
 800ef0e:	3001      	adds	r0, #1
 800ef10:	d0e6      	beq.n	800eee0 <_printf_common+0xa4>
 800ef12:	3601      	adds	r6, #1
 800ef14:	e7d9      	b.n	800eeca <_printf_common+0x8e>
	...

0800ef18 <_printf_i>:
 800ef18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	460c      	mov	r4, r1
 800ef1e:	4691      	mov	r9, r2
 800ef20:	7e27      	ldrb	r7, [r4, #24]
 800ef22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef24:	2f78      	cmp	r7, #120	; 0x78
 800ef26:	4680      	mov	r8, r0
 800ef28:	469a      	mov	sl, r3
 800ef2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef2e:	d807      	bhi.n	800ef40 <_printf_i+0x28>
 800ef30:	2f62      	cmp	r7, #98	; 0x62
 800ef32:	d80a      	bhi.n	800ef4a <_printf_i+0x32>
 800ef34:	2f00      	cmp	r7, #0
 800ef36:	f000 80d8 	beq.w	800f0ea <_printf_i+0x1d2>
 800ef3a:	2f58      	cmp	r7, #88	; 0x58
 800ef3c:	f000 80a3 	beq.w	800f086 <_printf_i+0x16e>
 800ef40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef48:	e03a      	b.n	800efc0 <_printf_i+0xa8>
 800ef4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef4e:	2b15      	cmp	r3, #21
 800ef50:	d8f6      	bhi.n	800ef40 <_printf_i+0x28>
 800ef52:	a001      	add	r0, pc, #4	; (adr r0, 800ef58 <_printf_i+0x40>)
 800ef54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef58:	0800efb1 	.word	0x0800efb1
 800ef5c:	0800efc5 	.word	0x0800efc5
 800ef60:	0800ef41 	.word	0x0800ef41
 800ef64:	0800ef41 	.word	0x0800ef41
 800ef68:	0800ef41 	.word	0x0800ef41
 800ef6c:	0800ef41 	.word	0x0800ef41
 800ef70:	0800efc5 	.word	0x0800efc5
 800ef74:	0800ef41 	.word	0x0800ef41
 800ef78:	0800ef41 	.word	0x0800ef41
 800ef7c:	0800ef41 	.word	0x0800ef41
 800ef80:	0800ef41 	.word	0x0800ef41
 800ef84:	0800f0d1 	.word	0x0800f0d1
 800ef88:	0800eff5 	.word	0x0800eff5
 800ef8c:	0800f0b3 	.word	0x0800f0b3
 800ef90:	0800ef41 	.word	0x0800ef41
 800ef94:	0800ef41 	.word	0x0800ef41
 800ef98:	0800f0f3 	.word	0x0800f0f3
 800ef9c:	0800ef41 	.word	0x0800ef41
 800efa0:	0800eff5 	.word	0x0800eff5
 800efa4:	0800ef41 	.word	0x0800ef41
 800efa8:	0800ef41 	.word	0x0800ef41
 800efac:	0800f0bb 	.word	0x0800f0bb
 800efb0:	680b      	ldr	r3, [r1, #0]
 800efb2:	1d1a      	adds	r2, r3, #4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	600a      	str	r2, [r1, #0]
 800efb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efc0:	2301      	movs	r3, #1
 800efc2:	e0a3      	b.n	800f10c <_printf_i+0x1f4>
 800efc4:	6825      	ldr	r5, [r4, #0]
 800efc6:	6808      	ldr	r0, [r1, #0]
 800efc8:	062e      	lsls	r6, r5, #24
 800efca:	f100 0304 	add.w	r3, r0, #4
 800efce:	d50a      	bpl.n	800efe6 <_printf_i+0xce>
 800efd0:	6805      	ldr	r5, [r0, #0]
 800efd2:	600b      	str	r3, [r1, #0]
 800efd4:	2d00      	cmp	r5, #0
 800efd6:	da03      	bge.n	800efe0 <_printf_i+0xc8>
 800efd8:	232d      	movs	r3, #45	; 0x2d
 800efda:	426d      	negs	r5, r5
 800efdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efe0:	485e      	ldr	r0, [pc, #376]	; (800f15c <_printf_i+0x244>)
 800efe2:	230a      	movs	r3, #10
 800efe4:	e019      	b.n	800f01a <_printf_i+0x102>
 800efe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800efea:	6805      	ldr	r5, [r0, #0]
 800efec:	600b      	str	r3, [r1, #0]
 800efee:	bf18      	it	ne
 800eff0:	b22d      	sxthne	r5, r5
 800eff2:	e7ef      	b.n	800efd4 <_printf_i+0xbc>
 800eff4:	680b      	ldr	r3, [r1, #0]
 800eff6:	6825      	ldr	r5, [r4, #0]
 800eff8:	1d18      	adds	r0, r3, #4
 800effa:	6008      	str	r0, [r1, #0]
 800effc:	0628      	lsls	r0, r5, #24
 800effe:	d501      	bpl.n	800f004 <_printf_i+0xec>
 800f000:	681d      	ldr	r5, [r3, #0]
 800f002:	e002      	b.n	800f00a <_printf_i+0xf2>
 800f004:	0669      	lsls	r1, r5, #25
 800f006:	d5fb      	bpl.n	800f000 <_printf_i+0xe8>
 800f008:	881d      	ldrh	r5, [r3, #0]
 800f00a:	4854      	ldr	r0, [pc, #336]	; (800f15c <_printf_i+0x244>)
 800f00c:	2f6f      	cmp	r7, #111	; 0x6f
 800f00e:	bf0c      	ite	eq
 800f010:	2308      	moveq	r3, #8
 800f012:	230a      	movne	r3, #10
 800f014:	2100      	movs	r1, #0
 800f016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f01a:	6866      	ldr	r6, [r4, #4]
 800f01c:	60a6      	str	r6, [r4, #8]
 800f01e:	2e00      	cmp	r6, #0
 800f020:	bfa2      	ittt	ge
 800f022:	6821      	ldrge	r1, [r4, #0]
 800f024:	f021 0104 	bicge.w	r1, r1, #4
 800f028:	6021      	strge	r1, [r4, #0]
 800f02a:	b90d      	cbnz	r5, 800f030 <_printf_i+0x118>
 800f02c:	2e00      	cmp	r6, #0
 800f02e:	d04d      	beq.n	800f0cc <_printf_i+0x1b4>
 800f030:	4616      	mov	r6, r2
 800f032:	fbb5 f1f3 	udiv	r1, r5, r3
 800f036:	fb03 5711 	mls	r7, r3, r1, r5
 800f03a:	5dc7      	ldrb	r7, [r0, r7]
 800f03c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f040:	462f      	mov	r7, r5
 800f042:	42bb      	cmp	r3, r7
 800f044:	460d      	mov	r5, r1
 800f046:	d9f4      	bls.n	800f032 <_printf_i+0x11a>
 800f048:	2b08      	cmp	r3, #8
 800f04a:	d10b      	bne.n	800f064 <_printf_i+0x14c>
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	07df      	lsls	r7, r3, #31
 800f050:	d508      	bpl.n	800f064 <_printf_i+0x14c>
 800f052:	6923      	ldr	r3, [r4, #16]
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	4299      	cmp	r1, r3
 800f058:	bfde      	ittt	le
 800f05a:	2330      	movle	r3, #48	; 0x30
 800f05c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f060:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f064:	1b92      	subs	r2, r2, r6
 800f066:	6122      	str	r2, [r4, #16]
 800f068:	f8cd a000 	str.w	sl, [sp]
 800f06c:	464b      	mov	r3, r9
 800f06e:	aa03      	add	r2, sp, #12
 800f070:	4621      	mov	r1, r4
 800f072:	4640      	mov	r0, r8
 800f074:	f7ff fee2 	bl	800ee3c <_printf_common>
 800f078:	3001      	adds	r0, #1
 800f07a:	d14c      	bne.n	800f116 <_printf_i+0x1fe>
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	b004      	add	sp, #16
 800f082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f086:	4835      	ldr	r0, [pc, #212]	; (800f15c <_printf_i+0x244>)
 800f088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	680e      	ldr	r6, [r1, #0]
 800f090:	061f      	lsls	r7, r3, #24
 800f092:	f856 5b04 	ldr.w	r5, [r6], #4
 800f096:	600e      	str	r6, [r1, #0]
 800f098:	d514      	bpl.n	800f0c4 <_printf_i+0x1ac>
 800f09a:	07d9      	lsls	r1, r3, #31
 800f09c:	bf44      	itt	mi
 800f09e:	f043 0320 	orrmi.w	r3, r3, #32
 800f0a2:	6023      	strmi	r3, [r4, #0]
 800f0a4:	b91d      	cbnz	r5, 800f0ae <_printf_i+0x196>
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	f023 0320 	bic.w	r3, r3, #32
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	2310      	movs	r3, #16
 800f0b0:	e7b0      	b.n	800f014 <_printf_i+0xfc>
 800f0b2:	6823      	ldr	r3, [r4, #0]
 800f0b4:	f043 0320 	orr.w	r3, r3, #32
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	2378      	movs	r3, #120	; 0x78
 800f0bc:	4828      	ldr	r0, [pc, #160]	; (800f160 <_printf_i+0x248>)
 800f0be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0c2:	e7e3      	b.n	800f08c <_printf_i+0x174>
 800f0c4:	065e      	lsls	r6, r3, #25
 800f0c6:	bf48      	it	mi
 800f0c8:	b2ad      	uxthmi	r5, r5
 800f0ca:	e7e6      	b.n	800f09a <_printf_i+0x182>
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	e7bb      	b.n	800f048 <_printf_i+0x130>
 800f0d0:	680b      	ldr	r3, [r1, #0]
 800f0d2:	6826      	ldr	r6, [r4, #0]
 800f0d4:	6960      	ldr	r0, [r4, #20]
 800f0d6:	1d1d      	adds	r5, r3, #4
 800f0d8:	600d      	str	r5, [r1, #0]
 800f0da:	0635      	lsls	r5, r6, #24
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	d501      	bpl.n	800f0e4 <_printf_i+0x1cc>
 800f0e0:	6018      	str	r0, [r3, #0]
 800f0e2:	e002      	b.n	800f0ea <_printf_i+0x1d2>
 800f0e4:	0671      	lsls	r1, r6, #25
 800f0e6:	d5fb      	bpl.n	800f0e0 <_printf_i+0x1c8>
 800f0e8:	8018      	strh	r0, [r3, #0]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	6123      	str	r3, [r4, #16]
 800f0ee:	4616      	mov	r6, r2
 800f0f0:	e7ba      	b.n	800f068 <_printf_i+0x150>
 800f0f2:	680b      	ldr	r3, [r1, #0]
 800f0f4:	1d1a      	adds	r2, r3, #4
 800f0f6:	600a      	str	r2, [r1, #0]
 800f0f8:	681e      	ldr	r6, [r3, #0]
 800f0fa:	6862      	ldr	r2, [r4, #4]
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	4630      	mov	r0, r6
 800f100:	f7f1 f87e 	bl	8000200 <memchr>
 800f104:	b108      	cbz	r0, 800f10a <_printf_i+0x1f2>
 800f106:	1b80      	subs	r0, r0, r6
 800f108:	6060      	str	r0, [r4, #4]
 800f10a:	6863      	ldr	r3, [r4, #4]
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	2300      	movs	r3, #0
 800f110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f114:	e7a8      	b.n	800f068 <_printf_i+0x150>
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	4632      	mov	r2, r6
 800f11a:	4649      	mov	r1, r9
 800f11c:	4640      	mov	r0, r8
 800f11e:	47d0      	blx	sl
 800f120:	3001      	adds	r0, #1
 800f122:	d0ab      	beq.n	800f07c <_printf_i+0x164>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	079b      	lsls	r3, r3, #30
 800f128:	d413      	bmi.n	800f152 <_printf_i+0x23a>
 800f12a:	68e0      	ldr	r0, [r4, #12]
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	4298      	cmp	r0, r3
 800f130:	bfb8      	it	lt
 800f132:	4618      	movlt	r0, r3
 800f134:	e7a4      	b.n	800f080 <_printf_i+0x168>
 800f136:	2301      	movs	r3, #1
 800f138:	4632      	mov	r2, r6
 800f13a:	4649      	mov	r1, r9
 800f13c:	4640      	mov	r0, r8
 800f13e:	47d0      	blx	sl
 800f140:	3001      	adds	r0, #1
 800f142:	d09b      	beq.n	800f07c <_printf_i+0x164>
 800f144:	3501      	adds	r5, #1
 800f146:	68e3      	ldr	r3, [r4, #12]
 800f148:	9903      	ldr	r1, [sp, #12]
 800f14a:	1a5b      	subs	r3, r3, r1
 800f14c:	42ab      	cmp	r3, r5
 800f14e:	dcf2      	bgt.n	800f136 <_printf_i+0x21e>
 800f150:	e7eb      	b.n	800f12a <_printf_i+0x212>
 800f152:	2500      	movs	r5, #0
 800f154:	f104 0619 	add.w	r6, r4, #25
 800f158:	e7f5      	b.n	800f146 <_printf_i+0x22e>
 800f15a:	bf00      	nop
 800f15c:	0801461c 	.word	0x0801461c
 800f160:	0801462d 	.word	0x0801462d

0800f164 <_scanf_float>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	b087      	sub	sp, #28
 800f16a:	4617      	mov	r7, r2
 800f16c:	9303      	str	r3, [sp, #12]
 800f16e:	688b      	ldr	r3, [r1, #8]
 800f170:	1e5a      	subs	r2, r3, #1
 800f172:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f176:	bf83      	ittte	hi
 800f178:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f17c:	195b      	addhi	r3, r3, r5
 800f17e:	9302      	strhi	r3, [sp, #8]
 800f180:	2300      	movls	r3, #0
 800f182:	bf86      	itte	hi
 800f184:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f188:	608b      	strhi	r3, [r1, #8]
 800f18a:	9302      	strls	r3, [sp, #8]
 800f18c:	680b      	ldr	r3, [r1, #0]
 800f18e:	468b      	mov	fp, r1
 800f190:	2500      	movs	r5, #0
 800f192:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f196:	f84b 3b1c 	str.w	r3, [fp], #28
 800f19a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f19e:	4680      	mov	r8, r0
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	465e      	mov	r6, fp
 800f1a4:	46aa      	mov	sl, r5
 800f1a6:	46a9      	mov	r9, r5
 800f1a8:	9501      	str	r5, [sp, #4]
 800f1aa:	68a2      	ldr	r2, [r4, #8]
 800f1ac:	b152      	cbz	r2, 800f1c4 <_scanf_float+0x60>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	2b4e      	cmp	r3, #78	; 0x4e
 800f1b4:	d864      	bhi.n	800f280 <_scanf_float+0x11c>
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d83c      	bhi.n	800f234 <_scanf_float+0xd0>
 800f1ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f1be:	b2c8      	uxtb	r0, r1
 800f1c0:	280e      	cmp	r0, #14
 800f1c2:	d93a      	bls.n	800f23a <_scanf_float+0xd6>
 800f1c4:	f1b9 0f00 	cmp.w	r9, #0
 800f1c8:	d003      	beq.n	800f1d2 <_scanf_float+0x6e>
 800f1ca:	6823      	ldr	r3, [r4, #0]
 800f1cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1d6:	f1ba 0f01 	cmp.w	sl, #1
 800f1da:	f200 8113 	bhi.w	800f404 <_scanf_float+0x2a0>
 800f1de:	455e      	cmp	r6, fp
 800f1e0:	f200 8105 	bhi.w	800f3ee <_scanf_float+0x28a>
 800f1e4:	2501      	movs	r5, #1
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	b007      	add	sp, #28
 800f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f1f2:	2a0d      	cmp	r2, #13
 800f1f4:	d8e6      	bhi.n	800f1c4 <_scanf_float+0x60>
 800f1f6:	a101      	add	r1, pc, #4	; (adr r1, 800f1fc <_scanf_float+0x98>)
 800f1f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1fc:	0800f33b 	.word	0x0800f33b
 800f200:	0800f1c5 	.word	0x0800f1c5
 800f204:	0800f1c5 	.word	0x0800f1c5
 800f208:	0800f1c5 	.word	0x0800f1c5
 800f20c:	0800f39b 	.word	0x0800f39b
 800f210:	0800f373 	.word	0x0800f373
 800f214:	0800f1c5 	.word	0x0800f1c5
 800f218:	0800f1c5 	.word	0x0800f1c5
 800f21c:	0800f349 	.word	0x0800f349
 800f220:	0800f1c5 	.word	0x0800f1c5
 800f224:	0800f1c5 	.word	0x0800f1c5
 800f228:	0800f1c5 	.word	0x0800f1c5
 800f22c:	0800f1c5 	.word	0x0800f1c5
 800f230:	0800f301 	.word	0x0800f301
 800f234:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f238:	e7db      	b.n	800f1f2 <_scanf_float+0x8e>
 800f23a:	290e      	cmp	r1, #14
 800f23c:	d8c2      	bhi.n	800f1c4 <_scanf_float+0x60>
 800f23e:	a001      	add	r0, pc, #4	; (adr r0, 800f244 <_scanf_float+0xe0>)
 800f240:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f244:	0800f2f3 	.word	0x0800f2f3
 800f248:	0800f1c5 	.word	0x0800f1c5
 800f24c:	0800f2f3 	.word	0x0800f2f3
 800f250:	0800f387 	.word	0x0800f387
 800f254:	0800f1c5 	.word	0x0800f1c5
 800f258:	0800f2a1 	.word	0x0800f2a1
 800f25c:	0800f2dd 	.word	0x0800f2dd
 800f260:	0800f2dd 	.word	0x0800f2dd
 800f264:	0800f2dd 	.word	0x0800f2dd
 800f268:	0800f2dd 	.word	0x0800f2dd
 800f26c:	0800f2dd 	.word	0x0800f2dd
 800f270:	0800f2dd 	.word	0x0800f2dd
 800f274:	0800f2dd 	.word	0x0800f2dd
 800f278:	0800f2dd 	.word	0x0800f2dd
 800f27c:	0800f2dd 	.word	0x0800f2dd
 800f280:	2b6e      	cmp	r3, #110	; 0x6e
 800f282:	d809      	bhi.n	800f298 <_scanf_float+0x134>
 800f284:	2b60      	cmp	r3, #96	; 0x60
 800f286:	d8b2      	bhi.n	800f1ee <_scanf_float+0x8a>
 800f288:	2b54      	cmp	r3, #84	; 0x54
 800f28a:	d077      	beq.n	800f37c <_scanf_float+0x218>
 800f28c:	2b59      	cmp	r3, #89	; 0x59
 800f28e:	d199      	bne.n	800f1c4 <_scanf_float+0x60>
 800f290:	2d07      	cmp	r5, #7
 800f292:	d197      	bne.n	800f1c4 <_scanf_float+0x60>
 800f294:	2508      	movs	r5, #8
 800f296:	e029      	b.n	800f2ec <_scanf_float+0x188>
 800f298:	2b74      	cmp	r3, #116	; 0x74
 800f29a:	d06f      	beq.n	800f37c <_scanf_float+0x218>
 800f29c:	2b79      	cmp	r3, #121	; 0x79
 800f29e:	e7f6      	b.n	800f28e <_scanf_float+0x12a>
 800f2a0:	6821      	ldr	r1, [r4, #0]
 800f2a2:	05c8      	lsls	r0, r1, #23
 800f2a4:	d51a      	bpl.n	800f2dc <_scanf_float+0x178>
 800f2a6:	9b02      	ldr	r3, [sp, #8]
 800f2a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f2ac:	6021      	str	r1, [r4, #0]
 800f2ae:	f109 0901 	add.w	r9, r9, #1
 800f2b2:	b11b      	cbz	r3, 800f2bc <_scanf_float+0x158>
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	3201      	adds	r2, #1
 800f2b8:	9302      	str	r3, [sp, #8]
 800f2ba:	60a2      	str	r2, [r4, #8]
 800f2bc:	68a3      	ldr	r3, [r4, #8]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	60a3      	str	r3, [r4, #8]
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	607b      	str	r3, [r7, #4]
 800f2d0:	f340 8084 	ble.w	800f3dc <_scanf_float+0x278>
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	603b      	str	r3, [r7, #0]
 800f2da:	e766      	b.n	800f1aa <_scanf_float+0x46>
 800f2dc:	eb1a 0f05 	cmn.w	sl, r5
 800f2e0:	f47f af70 	bne.w	800f1c4 <_scanf_float+0x60>
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f2ea:	6022      	str	r2, [r4, #0]
 800f2ec:	f806 3b01 	strb.w	r3, [r6], #1
 800f2f0:	e7e4      	b.n	800f2bc <_scanf_float+0x158>
 800f2f2:	6822      	ldr	r2, [r4, #0]
 800f2f4:	0610      	lsls	r0, r2, #24
 800f2f6:	f57f af65 	bpl.w	800f1c4 <_scanf_float+0x60>
 800f2fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f2fe:	e7f4      	b.n	800f2ea <_scanf_float+0x186>
 800f300:	f1ba 0f00 	cmp.w	sl, #0
 800f304:	d10e      	bne.n	800f324 <_scanf_float+0x1c0>
 800f306:	f1b9 0f00 	cmp.w	r9, #0
 800f30a:	d10e      	bne.n	800f32a <_scanf_float+0x1c6>
 800f30c:	6822      	ldr	r2, [r4, #0]
 800f30e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f312:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f316:	d108      	bne.n	800f32a <_scanf_float+0x1c6>
 800f318:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f31c:	6022      	str	r2, [r4, #0]
 800f31e:	f04f 0a01 	mov.w	sl, #1
 800f322:	e7e3      	b.n	800f2ec <_scanf_float+0x188>
 800f324:	f1ba 0f02 	cmp.w	sl, #2
 800f328:	d055      	beq.n	800f3d6 <_scanf_float+0x272>
 800f32a:	2d01      	cmp	r5, #1
 800f32c:	d002      	beq.n	800f334 <_scanf_float+0x1d0>
 800f32e:	2d04      	cmp	r5, #4
 800f330:	f47f af48 	bne.w	800f1c4 <_scanf_float+0x60>
 800f334:	3501      	adds	r5, #1
 800f336:	b2ed      	uxtb	r5, r5
 800f338:	e7d8      	b.n	800f2ec <_scanf_float+0x188>
 800f33a:	f1ba 0f01 	cmp.w	sl, #1
 800f33e:	f47f af41 	bne.w	800f1c4 <_scanf_float+0x60>
 800f342:	f04f 0a02 	mov.w	sl, #2
 800f346:	e7d1      	b.n	800f2ec <_scanf_float+0x188>
 800f348:	b97d      	cbnz	r5, 800f36a <_scanf_float+0x206>
 800f34a:	f1b9 0f00 	cmp.w	r9, #0
 800f34e:	f47f af3c 	bne.w	800f1ca <_scanf_float+0x66>
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f358:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f35c:	f47f af39 	bne.w	800f1d2 <_scanf_float+0x6e>
 800f360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f364:	6022      	str	r2, [r4, #0]
 800f366:	2501      	movs	r5, #1
 800f368:	e7c0      	b.n	800f2ec <_scanf_float+0x188>
 800f36a:	2d03      	cmp	r5, #3
 800f36c:	d0e2      	beq.n	800f334 <_scanf_float+0x1d0>
 800f36e:	2d05      	cmp	r5, #5
 800f370:	e7de      	b.n	800f330 <_scanf_float+0x1cc>
 800f372:	2d02      	cmp	r5, #2
 800f374:	f47f af26 	bne.w	800f1c4 <_scanf_float+0x60>
 800f378:	2503      	movs	r5, #3
 800f37a:	e7b7      	b.n	800f2ec <_scanf_float+0x188>
 800f37c:	2d06      	cmp	r5, #6
 800f37e:	f47f af21 	bne.w	800f1c4 <_scanf_float+0x60>
 800f382:	2507      	movs	r5, #7
 800f384:	e7b2      	b.n	800f2ec <_scanf_float+0x188>
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	0591      	lsls	r1, r2, #22
 800f38a:	f57f af1b 	bpl.w	800f1c4 <_scanf_float+0x60>
 800f38e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f392:	6022      	str	r2, [r4, #0]
 800f394:	f8cd 9004 	str.w	r9, [sp, #4]
 800f398:	e7a8      	b.n	800f2ec <_scanf_float+0x188>
 800f39a:	6822      	ldr	r2, [r4, #0]
 800f39c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f3a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f3a4:	d006      	beq.n	800f3b4 <_scanf_float+0x250>
 800f3a6:	0550      	lsls	r0, r2, #21
 800f3a8:	f57f af0c 	bpl.w	800f1c4 <_scanf_float+0x60>
 800f3ac:	f1b9 0f00 	cmp.w	r9, #0
 800f3b0:	f43f af0f 	beq.w	800f1d2 <_scanf_float+0x6e>
 800f3b4:	0591      	lsls	r1, r2, #22
 800f3b6:	bf58      	it	pl
 800f3b8:	9901      	ldrpl	r1, [sp, #4]
 800f3ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3be:	bf58      	it	pl
 800f3c0:	eba9 0101 	subpl.w	r1, r9, r1
 800f3c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f3c8:	bf58      	it	pl
 800f3ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3ce:	6022      	str	r2, [r4, #0]
 800f3d0:	f04f 0900 	mov.w	r9, #0
 800f3d4:	e78a      	b.n	800f2ec <_scanf_float+0x188>
 800f3d6:	f04f 0a03 	mov.w	sl, #3
 800f3da:	e787      	b.n	800f2ec <_scanf_float+0x188>
 800f3dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	4798      	blx	r3
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f43f aedf 	beq.w	800f1aa <_scanf_float+0x46>
 800f3ec:	e6ea      	b.n	800f1c4 <_scanf_float+0x60>
 800f3ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3f6:	463a      	mov	r2, r7
 800f3f8:	4640      	mov	r0, r8
 800f3fa:	4798      	blx	r3
 800f3fc:	6923      	ldr	r3, [r4, #16]
 800f3fe:	3b01      	subs	r3, #1
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	e6ec      	b.n	800f1de <_scanf_float+0x7a>
 800f404:	1e6b      	subs	r3, r5, #1
 800f406:	2b06      	cmp	r3, #6
 800f408:	d825      	bhi.n	800f456 <_scanf_float+0x2f2>
 800f40a:	2d02      	cmp	r5, #2
 800f40c:	d836      	bhi.n	800f47c <_scanf_float+0x318>
 800f40e:	455e      	cmp	r6, fp
 800f410:	f67f aee8 	bls.w	800f1e4 <_scanf_float+0x80>
 800f414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f418:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f41c:	463a      	mov	r2, r7
 800f41e:	4640      	mov	r0, r8
 800f420:	4798      	blx	r3
 800f422:	6923      	ldr	r3, [r4, #16]
 800f424:	3b01      	subs	r3, #1
 800f426:	6123      	str	r3, [r4, #16]
 800f428:	e7f1      	b.n	800f40e <_scanf_float+0x2aa>
 800f42a:	9802      	ldr	r0, [sp, #8]
 800f42c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f430:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f434:	9002      	str	r0, [sp, #8]
 800f436:	463a      	mov	r2, r7
 800f438:	4640      	mov	r0, r8
 800f43a:	4798      	blx	r3
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	3b01      	subs	r3, #1
 800f440:	6123      	str	r3, [r4, #16]
 800f442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f446:	fa5f fa8a 	uxtb.w	sl, sl
 800f44a:	f1ba 0f02 	cmp.w	sl, #2
 800f44e:	d1ec      	bne.n	800f42a <_scanf_float+0x2c6>
 800f450:	3d03      	subs	r5, #3
 800f452:	b2ed      	uxtb	r5, r5
 800f454:	1b76      	subs	r6, r6, r5
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	05da      	lsls	r2, r3, #23
 800f45a:	d52f      	bpl.n	800f4bc <_scanf_float+0x358>
 800f45c:	055b      	lsls	r3, r3, #21
 800f45e:	d510      	bpl.n	800f482 <_scanf_float+0x31e>
 800f460:	455e      	cmp	r6, fp
 800f462:	f67f aebf 	bls.w	800f1e4 <_scanf_float+0x80>
 800f466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f46e:	463a      	mov	r2, r7
 800f470:	4640      	mov	r0, r8
 800f472:	4798      	blx	r3
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	3b01      	subs	r3, #1
 800f478:	6123      	str	r3, [r4, #16]
 800f47a:	e7f1      	b.n	800f460 <_scanf_float+0x2fc>
 800f47c:	46aa      	mov	sl, r5
 800f47e:	9602      	str	r6, [sp, #8]
 800f480:	e7df      	b.n	800f442 <_scanf_float+0x2de>
 800f482:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f486:	6923      	ldr	r3, [r4, #16]
 800f488:	2965      	cmp	r1, #101	; 0x65
 800f48a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f48e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f492:	6123      	str	r3, [r4, #16]
 800f494:	d00c      	beq.n	800f4b0 <_scanf_float+0x34c>
 800f496:	2945      	cmp	r1, #69	; 0x45
 800f498:	d00a      	beq.n	800f4b0 <_scanf_float+0x34c>
 800f49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f49e:	463a      	mov	r2, r7
 800f4a0:	4640      	mov	r0, r8
 800f4a2:	4798      	blx	r3
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	1eb5      	subs	r5, r6, #2
 800f4ae:	6123      	str	r3, [r4, #16]
 800f4b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4b4:	463a      	mov	r2, r7
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	4798      	blx	r3
 800f4ba:	462e      	mov	r6, r5
 800f4bc:	6825      	ldr	r5, [r4, #0]
 800f4be:	f015 0510 	ands.w	r5, r5, #16
 800f4c2:	d158      	bne.n	800f576 <_scanf_float+0x412>
 800f4c4:	7035      	strb	r5, [r6, #0]
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4d0:	d11c      	bne.n	800f50c <_scanf_float+0x3a8>
 800f4d2:	9b01      	ldr	r3, [sp, #4]
 800f4d4:	454b      	cmp	r3, r9
 800f4d6:	eba3 0209 	sub.w	r2, r3, r9
 800f4da:	d124      	bne.n	800f526 <_scanf_float+0x3c2>
 800f4dc:	2200      	movs	r2, #0
 800f4de:	4659      	mov	r1, fp
 800f4e0:	4640      	mov	r0, r8
 800f4e2:	f001 f86b 	bl	80105bc <_strtod_r>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	6821      	ldr	r1, [r4, #0]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f011 0f02 	tst.w	r1, #2
 800f4f0:	ec57 6b10 	vmov	r6, r7, d0
 800f4f4:	f103 0204 	add.w	r2, r3, #4
 800f4f8:	d020      	beq.n	800f53c <_scanf_float+0x3d8>
 800f4fa:	9903      	ldr	r1, [sp, #12]
 800f4fc:	600a      	str	r2, [r1, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	e9c3 6700 	strd	r6, r7, [r3]
 800f504:	68e3      	ldr	r3, [r4, #12]
 800f506:	3301      	adds	r3, #1
 800f508:	60e3      	str	r3, [r4, #12]
 800f50a:	e66c      	b.n	800f1e6 <_scanf_float+0x82>
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d0e4      	beq.n	800f4dc <_scanf_float+0x378>
 800f512:	9905      	ldr	r1, [sp, #20]
 800f514:	230a      	movs	r3, #10
 800f516:	462a      	mov	r2, r5
 800f518:	3101      	adds	r1, #1
 800f51a:	4640      	mov	r0, r8
 800f51c:	f001 f8d8 	bl	80106d0 <_strtol_r>
 800f520:	9b04      	ldr	r3, [sp, #16]
 800f522:	9e05      	ldr	r6, [sp, #20]
 800f524:	1ac2      	subs	r2, r0, r3
 800f526:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f52a:	429e      	cmp	r6, r3
 800f52c:	bf28      	it	cs
 800f52e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f532:	4912      	ldr	r1, [pc, #72]	; (800f57c <_scanf_float+0x418>)
 800f534:	4630      	mov	r0, r6
 800f536:	f000 f977 	bl	800f828 <siprintf>
 800f53a:	e7cf      	b.n	800f4dc <_scanf_float+0x378>
 800f53c:	f011 0f04 	tst.w	r1, #4
 800f540:	9903      	ldr	r1, [sp, #12]
 800f542:	600a      	str	r2, [r1, #0]
 800f544:	d1db      	bne.n	800f4fe <_scanf_float+0x39a>
 800f546:	f8d3 8000 	ldr.w	r8, [r3]
 800f54a:	ee10 2a10 	vmov	r2, s0
 800f54e:	ee10 0a10 	vmov	r0, s0
 800f552:	463b      	mov	r3, r7
 800f554:	4639      	mov	r1, r7
 800f556:	f7f1 faf9 	bl	8000b4c <__aeabi_dcmpun>
 800f55a:	b128      	cbz	r0, 800f568 <_scanf_float+0x404>
 800f55c:	4808      	ldr	r0, [pc, #32]	; (800f580 <_scanf_float+0x41c>)
 800f55e:	f000 f919 	bl	800f794 <nanf>
 800f562:	ed88 0a00 	vstr	s0, [r8]
 800f566:	e7cd      	b.n	800f504 <_scanf_float+0x3a0>
 800f568:	4630      	mov	r0, r6
 800f56a:	4639      	mov	r1, r7
 800f56c:	f7f1 fb4c 	bl	8000c08 <__aeabi_d2f>
 800f570:	f8c8 0000 	str.w	r0, [r8]
 800f574:	e7c6      	b.n	800f504 <_scanf_float+0x3a0>
 800f576:	2500      	movs	r5, #0
 800f578:	e635      	b.n	800f1e6 <_scanf_float+0x82>
 800f57a:	bf00      	nop
 800f57c:	0801463e 	.word	0x0801463e
 800f580:	080146d3 	.word	0x080146d3

0800f584 <iprintf>:
 800f584:	b40f      	push	{r0, r1, r2, r3}
 800f586:	4b0a      	ldr	r3, [pc, #40]	; (800f5b0 <iprintf+0x2c>)
 800f588:	b513      	push	{r0, r1, r4, lr}
 800f58a:	681c      	ldr	r4, [r3, #0]
 800f58c:	b124      	cbz	r4, 800f598 <iprintf+0x14>
 800f58e:	69a3      	ldr	r3, [r4, #24]
 800f590:	b913      	cbnz	r3, 800f598 <iprintf+0x14>
 800f592:	4620      	mov	r0, r4
 800f594:	f7fe ffcc 	bl	800e530 <__sinit>
 800f598:	ab05      	add	r3, sp, #20
 800f59a:	9a04      	ldr	r2, [sp, #16]
 800f59c:	68a1      	ldr	r1, [r4, #8]
 800f59e:	9301      	str	r3, [sp, #4]
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f003 fdb1 	bl	8013108 <_vfiprintf_r>
 800f5a6:	b002      	add	sp, #8
 800f5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ac:	b004      	add	sp, #16
 800f5ae:	4770      	bx	lr
 800f5b0:	2000003c 	.word	0x2000003c

0800f5b4 <_puts_r>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	460e      	mov	r6, r1
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	b118      	cbz	r0, 800f5c4 <_puts_r+0x10>
 800f5bc:	6983      	ldr	r3, [r0, #24]
 800f5be:	b90b      	cbnz	r3, 800f5c4 <_puts_r+0x10>
 800f5c0:	f7fe ffb6 	bl	800e530 <__sinit>
 800f5c4:	69ab      	ldr	r3, [r5, #24]
 800f5c6:	68ac      	ldr	r4, [r5, #8]
 800f5c8:	b913      	cbnz	r3, 800f5d0 <_puts_r+0x1c>
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f7fe ffb0 	bl	800e530 <__sinit>
 800f5d0:	4b2c      	ldr	r3, [pc, #176]	; (800f684 <_puts_r+0xd0>)
 800f5d2:	429c      	cmp	r4, r3
 800f5d4:	d120      	bne.n	800f618 <_puts_r+0x64>
 800f5d6:	686c      	ldr	r4, [r5, #4]
 800f5d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5da:	07db      	lsls	r3, r3, #31
 800f5dc:	d405      	bmi.n	800f5ea <_puts_r+0x36>
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d402      	bmi.n	800f5ea <_puts_r+0x36>
 800f5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5e6:	f7ff f866 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	0719      	lsls	r1, r3, #28
 800f5ee:	d51d      	bpl.n	800f62c <_puts_r+0x78>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	b1db      	cbz	r3, 800f62c <_puts_r+0x78>
 800f5f4:	3e01      	subs	r6, #1
 800f5f6:	68a3      	ldr	r3, [r4, #8]
 800f5f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	60a3      	str	r3, [r4, #8]
 800f600:	bb39      	cbnz	r1, 800f652 <_puts_r+0x9e>
 800f602:	2b00      	cmp	r3, #0
 800f604:	da38      	bge.n	800f678 <_puts_r+0xc4>
 800f606:	4622      	mov	r2, r4
 800f608:	210a      	movs	r1, #10
 800f60a:	4628      	mov	r0, r5
 800f60c:	f001 f8e0 	bl	80107d0 <__swbuf_r>
 800f610:	3001      	adds	r0, #1
 800f612:	d011      	beq.n	800f638 <_puts_r+0x84>
 800f614:	250a      	movs	r5, #10
 800f616:	e011      	b.n	800f63c <_puts_r+0x88>
 800f618:	4b1b      	ldr	r3, [pc, #108]	; (800f688 <_puts_r+0xd4>)
 800f61a:	429c      	cmp	r4, r3
 800f61c:	d101      	bne.n	800f622 <_puts_r+0x6e>
 800f61e:	68ac      	ldr	r4, [r5, #8]
 800f620:	e7da      	b.n	800f5d8 <_puts_r+0x24>
 800f622:	4b1a      	ldr	r3, [pc, #104]	; (800f68c <_puts_r+0xd8>)
 800f624:	429c      	cmp	r4, r3
 800f626:	bf08      	it	eq
 800f628:	68ec      	ldreq	r4, [r5, #12]
 800f62a:	e7d5      	b.n	800f5d8 <_puts_r+0x24>
 800f62c:	4621      	mov	r1, r4
 800f62e:	4628      	mov	r0, r5
 800f630:	f001 f932 	bl	8010898 <__swsetup_r>
 800f634:	2800      	cmp	r0, #0
 800f636:	d0dd      	beq.n	800f5f4 <_puts_r+0x40>
 800f638:	f04f 35ff 	mov.w	r5, #4294967295
 800f63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f63e:	07da      	lsls	r2, r3, #31
 800f640:	d405      	bmi.n	800f64e <_puts_r+0x9a>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	059b      	lsls	r3, r3, #22
 800f646:	d402      	bmi.n	800f64e <_puts_r+0x9a>
 800f648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f64a:	f7ff f835 	bl	800e6b8 <__retarget_lock_release_recursive>
 800f64e:	4628      	mov	r0, r5
 800f650:	bd70      	pop	{r4, r5, r6, pc}
 800f652:	2b00      	cmp	r3, #0
 800f654:	da04      	bge.n	800f660 <_puts_r+0xac>
 800f656:	69a2      	ldr	r2, [r4, #24]
 800f658:	429a      	cmp	r2, r3
 800f65a:	dc06      	bgt.n	800f66a <_puts_r+0xb6>
 800f65c:	290a      	cmp	r1, #10
 800f65e:	d004      	beq.n	800f66a <_puts_r+0xb6>
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	1c5a      	adds	r2, r3, #1
 800f664:	6022      	str	r2, [r4, #0]
 800f666:	7019      	strb	r1, [r3, #0]
 800f668:	e7c5      	b.n	800f5f6 <_puts_r+0x42>
 800f66a:	4622      	mov	r2, r4
 800f66c:	4628      	mov	r0, r5
 800f66e:	f001 f8af 	bl	80107d0 <__swbuf_r>
 800f672:	3001      	adds	r0, #1
 800f674:	d1bf      	bne.n	800f5f6 <_puts_r+0x42>
 800f676:	e7df      	b.n	800f638 <_puts_r+0x84>
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	250a      	movs	r5, #10
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	6022      	str	r2, [r4, #0]
 800f680:	701d      	strb	r5, [r3, #0]
 800f682:	e7db      	b.n	800f63c <_puts_r+0x88>
 800f684:	080145c8 	.word	0x080145c8
 800f688:	080145e8 	.word	0x080145e8
 800f68c:	080145a8 	.word	0x080145a8

0800f690 <puts>:
 800f690:	4b02      	ldr	r3, [pc, #8]	; (800f69c <puts+0xc>)
 800f692:	4601      	mov	r1, r0
 800f694:	6818      	ldr	r0, [r3, #0]
 800f696:	f7ff bf8d 	b.w	800f5b4 <_puts_r>
 800f69a:	bf00      	nop
 800f69c:	2000003c 	.word	0x2000003c

0800f6a0 <cleanup_glue>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	6809      	ldr	r1, [r1, #0]
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	b109      	cbz	r1, 800f6ae <cleanup_glue+0xe>
 800f6aa:	f7ff fff9 	bl	800f6a0 <cleanup_glue>
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b6:	f7ff b841 	b.w	800e73c <_free_r>
	...

0800f6bc <_reclaim_reent>:
 800f6bc:	4b2c      	ldr	r3, [pc, #176]	; (800f770 <_reclaim_reent+0xb4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4283      	cmp	r3, r0
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	d051      	beq.n	800f76c <_reclaim_reent+0xb0>
 800f6c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f6ca:	b143      	cbz	r3, 800f6de <_reclaim_reent+0x22>
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d14a      	bne.n	800f768 <_reclaim_reent+0xac>
 800f6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6d4:	6819      	ldr	r1, [r3, #0]
 800f6d6:	b111      	cbz	r1, 800f6de <_reclaim_reent+0x22>
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f7ff f82f 	bl	800e73c <_free_r>
 800f6de:	6961      	ldr	r1, [r4, #20]
 800f6e0:	b111      	cbz	r1, 800f6e8 <_reclaim_reent+0x2c>
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff f82a 	bl	800e73c <_free_r>
 800f6e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f6ea:	b111      	cbz	r1, 800f6f2 <_reclaim_reent+0x36>
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f7ff f825 	bl	800e73c <_free_r>
 800f6f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f6f4:	b111      	cbz	r1, 800f6fc <_reclaim_reent+0x40>
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f7ff f820 	bl	800e73c <_free_r>
 800f6fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f6fe:	b111      	cbz	r1, 800f706 <_reclaim_reent+0x4a>
 800f700:	4620      	mov	r0, r4
 800f702:	f7ff f81b 	bl	800e73c <_free_r>
 800f706:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f708:	b111      	cbz	r1, 800f710 <_reclaim_reent+0x54>
 800f70a:	4620      	mov	r0, r4
 800f70c:	f7ff f816 	bl	800e73c <_free_r>
 800f710:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f712:	b111      	cbz	r1, 800f71a <_reclaim_reent+0x5e>
 800f714:	4620      	mov	r0, r4
 800f716:	f7ff f811 	bl	800e73c <_free_r>
 800f71a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f71c:	b111      	cbz	r1, 800f724 <_reclaim_reent+0x68>
 800f71e:	4620      	mov	r0, r4
 800f720:	f7ff f80c 	bl	800e73c <_free_r>
 800f724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f726:	b111      	cbz	r1, 800f72e <_reclaim_reent+0x72>
 800f728:	4620      	mov	r0, r4
 800f72a:	f7ff f807 	bl	800e73c <_free_r>
 800f72e:	69a3      	ldr	r3, [r4, #24]
 800f730:	b1e3      	cbz	r3, 800f76c <_reclaim_reent+0xb0>
 800f732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f734:	4620      	mov	r0, r4
 800f736:	4798      	blx	r3
 800f738:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f73a:	b1b9      	cbz	r1, 800f76c <_reclaim_reent+0xb0>
 800f73c:	4620      	mov	r0, r4
 800f73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f742:	f7ff bfad 	b.w	800f6a0 <cleanup_glue>
 800f746:	5949      	ldr	r1, [r1, r5]
 800f748:	b941      	cbnz	r1, 800f75c <_reclaim_reent+0xa0>
 800f74a:	3504      	adds	r5, #4
 800f74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f74e:	2d80      	cmp	r5, #128	; 0x80
 800f750:	68d9      	ldr	r1, [r3, #12]
 800f752:	d1f8      	bne.n	800f746 <_reclaim_reent+0x8a>
 800f754:	4620      	mov	r0, r4
 800f756:	f7fe fff1 	bl	800e73c <_free_r>
 800f75a:	e7ba      	b.n	800f6d2 <_reclaim_reent+0x16>
 800f75c:	680e      	ldr	r6, [r1, #0]
 800f75e:	4620      	mov	r0, r4
 800f760:	f7fe ffec 	bl	800e73c <_free_r>
 800f764:	4631      	mov	r1, r6
 800f766:	e7ef      	b.n	800f748 <_reclaim_reent+0x8c>
 800f768:	2500      	movs	r5, #0
 800f76a:	e7ef      	b.n	800f74c <_reclaim_reent+0x90>
 800f76c:	bd70      	pop	{r4, r5, r6, pc}
 800f76e:	bf00      	nop
 800f770:	2000003c 	.word	0x2000003c

0800f774 <_sbrk_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d06      	ldr	r5, [pc, #24]	; (800f790 <_sbrk_r+0x1c>)
 800f778:	2300      	movs	r3, #0
 800f77a:	4604      	mov	r4, r0
 800f77c:	4608      	mov	r0, r1
 800f77e:	602b      	str	r3, [r5, #0]
 800f780:	f7f3 fc82 	bl	8003088 <_sbrk>
 800f784:	1c43      	adds	r3, r0, #1
 800f786:	d102      	bne.n	800f78e <_sbrk_r+0x1a>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	b103      	cbz	r3, 800f78e <_sbrk_r+0x1a>
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	200056a8 	.word	0x200056a8

0800f794 <nanf>:
 800f794:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f79c <nanf+0x8>
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop
 800f79c:	7fc00000 	.word	0x7fc00000

0800f7a0 <_raise_r>:
 800f7a0:	291f      	cmp	r1, #31
 800f7a2:	b538      	push	{r3, r4, r5, lr}
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	d904      	bls.n	800f7b4 <_raise_r+0x14>
 800f7aa:	2316      	movs	r3, #22
 800f7ac:	6003      	str	r3, [r0, #0]
 800f7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7b6:	b112      	cbz	r2, 800f7be <_raise_r+0x1e>
 800f7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7bc:	b94b      	cbnz	r3, 800f7d2 <_raise_r+0x32>
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f000 f830 	bl	800f824 <_getpid_r>
 800f7c4:	462a      	mov	r2, r5
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ce:	f000 b817 	b.w	800f800 <_kill_r>
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d00a      	beq.n	800f7ec <_raise_r+0x4c>
 800f7d6:	1c59      	adds	r1, r3, #1
 800f7d8:	d103      	bne.n	800f7e2 <_raise_r+0x42>
 800f7da:	2316      	movs	r3, #22
 800f7dc:	6003      	str	r3, [r0, #0]
 800f7de:	2001      	movs	r0, #1
 800f7e0:	e7e7      	b.n	800f7b2 <_raise_r+0x12>
 800f7e2:	2400      	movs	r4, #0
 800f7e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	4798      	blx	r3
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	e7e0      	b.n	800f7b2 <_raise_r+0x12>

0800f7f0 <raise>:
 800f7f0:	4b02      	ldr	r3, [pc, #8]	; (800f7fc <raise+0xc>)
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	f7ff bfd3 	b.w	800f7a0 <_raise_r>
 800f7fa:	bf00      	nop
 800f7fc:	2000003c 	.word	0x2000003c

0800f800 <_kill_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d07      	ldr	r5, [pc, #28]	; (800f820 <_kill_r+0x20>)
 800f804:	2300      	movs	r3, #0
 800f806:	4604      	mov	r4, r0
 800f808:	4608      	mov	r0, r1
 800f80a:	4611      	mov	r1, r2
 800f80c:	602b      	str	r3, [r5, #0]
 800f80e:	f7f3 fbb3 	bl	8002f78 <_kill>
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	d102      	bne.n	800f81c <_kill_r+0x1c>
 800f816:	682b      	ldr	r3, [r5, #0]
 800f818:	b103      	cbz	r3, 800f81c <_kill_r+0x1c>
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	bd38      	pop	{r3, r4, r5, pc}
 800f81e:	bf00      	nop
 800f820:	200056a8 	.word	0x200056a8

0800f824 <_getpid_r>:
 800f824:	f7f3 bba0 	b.w	8002f68 <_getpid>

0800f828 <siprintf>:
 800f828:	b40e      	push	{r1, r2, r3}
 800f82a:	b500      	push	{lr}
 800f82c:	b09c      	sub	sp, #112	; 0x70
 800f82e:	ab1d      	add	r3, sp, #116	; 0x74
 800f830:	9002      	str	r0, [sp, #8]
 800f832:	9006      	str	r0, [sp, #24]
 800f834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f838:	4809      	ldr	r0, [pc, #36]	; (800f860 <siprintf+0x38>)
 800f83a:	9107      	str	r1, [sp, #28]
 800f83c:	9104      	str	r1, [sp, #16]
 800f83e:	4909      	ldr	r1, [pc, #36]	; (800f864 <siprintf+0x3c>)
 800f840:	f853 2b04 	ldr.w	r2, [r3], #4
 800f844:	9105      	str	r1, [sp, #20]
 800f846:	6800      	ldr	r0, [r0, #0]
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	a902      	add	r1, sp, #8
 800f84c:	f003 f960 	bl	8012b10 <_svfiprintf_r>
 800f850:	9b02      	ldr	r3, [sp, #8]
 800f852:	2200      	movs	r2, #0
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	b01c      	add	sp, #112	; 0x70
 800f858:	f85d eb04 	ldr.w	lr, [sp], #4
 800f85c:	b003      	add	sp, #12
 800f85e:	4770      	bx	lr
 800f860:	2000003c 	.word	0x2000003c
 800f864:	ffff0208 	.word	0xffff0208

0800f868 <siscanf>:
 800f868:	b40e      	push	{r1, r2, r3}
 800f86a:	b510      	push	{r4, lr}
 800f86c:	b09f      	sub	sp, #124	; 0x7c
 800f86e:	ac21      	add	r4, sp, #132	; 0x84
 800f870:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f874:	f854 2b04 	ldr.w	r2, [r4], #4
 800f878:	9201      	str	r2, [sp, #4]
 800f87a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f87e:	9004      	str	r0, [sp, #16]
 800f880:	9008      	str	r0, [sp, #32]
 800f882:	f7f0 fcb5 	bl	80001f0 <strlen>
 800f886:	4b0c      	ldr	r3, [pc, #48]	; (800f8b8 <siscanf+0x50>)
 800f888:	9005      	str	r0, [sp, #20]
 800f88a:	9009      	str	r0, [sp, #36]	; 0x24
 800f88c:	930d      	str	r3, [sp, #52]	; 0x34
 800f88e:	480b      	ldr	r0, [pc, #44]	; (800f8bc <siscanf+0x54>)
 800f890:	9a01      	ldr	r2, [sp, #4]
 800f892:	6800      	ldr	r0, [r0, #0]
 800f894:	9403      	str	r4, [sp, #12]
 800f896:	2300      	movs	r3, #0
 800f898:	9311      	str	r3, [sp, #68]	; 0x44
 800f89a:	9316      	str	r3, [sp, #88]	; 0x58
 800f89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f8a4:	a904      	add	r1, sp, #16
 800f8a6:	4623      	mov	r3, r4
 800f8a8:	f003 fa8c 	bl	8012dc4 <__ssvfiscanf_r>
 800f8ac:	b01f      	add	sp, #124	; 0x7c
 800f8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8b2:	b003      	add	sp, #12
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	0800f8e3 	.word	0x0800f8e3
 800f8bc:	2000003c 	.word	0x2000003c

0800f8c0 <__sread>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c8:	f003 fe9a 	bl	8013600 <_read_r>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	bfab      	itete	ge
 800f8d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d4:	181b      	addge	r3, r3, r0
 800f8d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8da:	bfac      	ite	ge
 800f8dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8de:	81a3      	strhlt	r3, [r4, #12]
 800f8e0:	bd10      	pop	{r4, pc}

0800f8e2 <__seofread>:
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	4770      	bx	lr

0800f8e6 <__swrite>:
 800f8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	461f      	mov	r7, r3
 800f8ec:	898b      	ldrh	r3, [r1, #12]
 800f8ee:	05db      	lsls	r3, r3, #23
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	d505      	bpl.n	800f904 <__swrite+0x1e>
 800f8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	2200      	movs	r2, #0
 800f900:	f002 fb26 	bl	8011f50 <_lseek_r>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	4628      	mov	r0, r5
 800f916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91a:	f000 bfab 	b.w	8010874 <_write_r>

0800f91e <__sseek>:
 800f91e:	b510      	push	{r4, lr}
 800f920:	460c      	mov	r4, r1
 800f922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f926:	f002 fb13 	bl	8011f50 <_lseek_r>
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	bf15      	itete	ne
 800f930:	6560      	strne	r0, [r4, #84]	; 0x54
 800f932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f93a:	81a3      	strheq	r3, [r4, #12]
 800f93c:	bf18      	it	ne
 800f93e:	81a3      	strhne	r3, [r4, #12]
 800f940:	bd10      	pop	{r4, pc}

0800f942 <__sclose>:
 800f942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f946:	f001 b833 	b.w	80109b0 <_close_r>

0800f94a <strncmp>:
 800f94a:	b510      	push	{r4, lr}
 800f94c:	b16a      	cbz	r2, 800f96a <strncmp+0x20>
 800f94e:	3901      	subs	r1, #1
 800f950:	1884      	adds	r4, r0, r2
 800f952:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f956:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d103      	bne.n	800f966 <strncmp+0x1c>
 800f95e:	42a0      	cmp	r0, r4
 800f960:	d001      	beq.n	800f966 <strncmp+0x1c>
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1f5      	bne.n	800f952 <strncmp+0x8>
 800f966:	1a98      	subs	r0, r3, r2
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	4610      	mov	r0, r2
 800f96c:	e7fc      	b.n	800f968 <strncmp+0x1e>

0800f96e <sulp>:
 800f96e:	b570      	push	{r4, r5, r6, lr}
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	ec45 4b10 	vmov	d0, r4, r5
 800f978:	4616      	mov	r6, r2
 800f97a:	f002 fee9 	bl	8012750 <__ulp>
 800f97e:	ec51 0b10 	vmov	r0, r1, d0
 800f982:	b17e      	cbz	r6, 800f9a4 <sulp+0x36>
 800f984:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f988:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	dd09      	ble.n	800f9a4 <sulp+0x36>
 800f990:	051b      	lsls	r3, r3, #20
 800f992:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f996:	2400      	movs	r4, #0
 800f998:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f99c:	4622      	mov	r2, r4
 800f99e:	462b      	mov	r3, r5
 800f9a0:	f7f0 fe3a 	bl	8000618 <__aeabi_dmul>
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9a8 <_strtod_l>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	b0a3      	sub	sp, #140	; 0x8c
 800f9ae:	461f      	mov	r7, r3
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	931e      	str	r3, [sp, #120]	; 0x78
 800f9b4:	4ba4      	ldr	r3, [pc, #656]	; (800fc48 <_strtod_l+0x2a0>)
 800f9b6:	9219      	str	r2, [sp, #100]	; 0x64
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	9307      	str	r3, [sp, #28]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	4688      	mov	r8, r1
 800f9c2:	f7f0 fc15 	bl	80001f0 <strlen>
 800f9c6:	f04f 0a00 	mov.w	sl, #0
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	f04f 0b00 	mov.w	fp, #0
 800f9d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f9d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	2a2b      	cmp	r2, #43	; 0x2b
 800f9da:	d04c      	beq.n	800fa76 <_strtod_l+0xce>
 800f9dc:	d839      	bhi.n	800fa52 <_strtod_l+0xaa>
 800f9de:	2a0d      	cmp	r2, #13
 800f9e0:	d832      	bhi.n	800fa48 <_strtod_l+0xa0>
 800f9e2:	2a08      	cmp	r2, #8
 800f9e4:	d832      	bhi.n	800fa4c <_strtod_l+0xa4>
 800f9e6:	2a00      	cmp	r2, #0
 800f9e8:	d03c      	beq.n	800fa64 <_strtod_l+0xbc>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	930e      	str	r3, [sp, #56]	; 0x38
 800f9ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f9f0:	7833      	ldrb	r3, [r6, #0]
 800f9f2:	2b30      	cmp	r3, #48	; 0x30
 800f9f4:	f040 80b4 	bne.w	800fb60 <_strtod_l+0x1b8>
 800f9f8:	7873      	ldrb	r3, [r6, #1]
 800f9fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f9fe:	2b58      	cmp	r3, #88	; 0x58
 800fa00:	d16c      	bne.n	800fadc <_strtod_l+0x134>
 800fa02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	ab1e      	add	r3, sp, #120	; 0x78
 800fa08:	9702      	str	r7, [sp, #8]
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	4a8f      	ldr	r2, [pc, #572]	; (800fc4c <_strtod_l+0x2a4>)
 800fa0e:	ab1f      	add	r3, sp, #124	; 0x7c
 800fa10:	a91d      	add	r1, sp, #116	; 0x74
 800fa12:	4620      	mov	r0, r4
 800fa14:	f001 ff90 	bl	8011938 <__gethex>
 800fa18:	f010 0707 	ands.w	r7, r0, #7
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	d005      	beq.n	800fa2c <_strtod_l+0x84>
 800fa20:	2f06      	cmp	r7, #6
 800fa22:	d12a      	bne.n	800fa7a <_strtod_l+0xd2>
 800fa24:	3601      	adds	r6, #1
 800fa26:	2300      	movs	r3, #0
 800fa28:	961d      	str	r6, [sp, #116]	; 0x74
 800fa2a:	930e      	str	r3, [sp, #56]	; 0x38
 800fa2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f040 8596 	bne.w	8010560 <_strtod_l+0xbb8>
 800fa34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa36:	b1db      	cbz	r3, 800fa70 <_strtod_l+0xc8>
 800fa38:	4652      	mov	r2, sl
 800fa3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa3e:	ec43 2b10 	vmov	d0, r2, r3
 800fa42:	b023      	add	sp, #140	; 0x8c
 800fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	2a20      	cmp	r2, #32
 800fa4a:	d1ce      	bne.n	800f9ea <_strtod_l+0x42>
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	931d      	str	r3, [sp, #116]	; 0x74
 800fa50:	e7c0      	b.n	800f9d4 <_strtod_l+0x2c>
 800fa52:	2a2d      	cmp	r2, #45	; 0x2d
 800fa54:	d1c9      	bne.n	800f9ea <_strtod_l+0x42>
 800fa56:	2201      	movs	r2, #1
 800fa58:	920e      	str	r2, [sp, #56]	; 0x38
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	921d      	str	r2, [sp, #116]	; 0x74
 800fa5e:	785b      	ldrb	r3, [r3, #1]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1c4      	bne.n	800f9ee <_strtod_l+0x46>
 800fa64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f040 8576 	bne.w	801055c <_strtod_l+0xbb4>
 800fa70:	4652      	mov	r2, sl
 800fa72:	465b      	mov	r3, fp
 800fa74:	e7e3      	b.n	800fa3e <_strtod_l+0x96>
 800fa76:	2200      	movs	r2, #0
 800fa78:	e7ee      	b.n	800fa58 <_strtod_l+0xb0>
 800fa7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fa7c:	b13a      	cbz	r2, 800fa8e <_strtod_l+0xe6>
 800fa7e:	2135      	movs	r1, #53	; 0x35
 800fa80:	a820      	add	r0, sp, #128	; 0x80
 800fa82:	f002 ff70 	bl	8012966 <__copybits>
 800fa86:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f002 fb35 	bl	80120f8 <_Bfree>
 800fa8e:	3f01      	subs	r7, #1
 800fa90:	2f05      	cmp	r7, #5
 800fa92:	d807      	bhi.n	800faa4 <_strtod_l+0xfc>
 800fa94:	e8df f007 	tbb	[pc, r7]
 800fa98:	1d180b0e 	.word	0x1d180b0e
 800fa9c:	030e      	.short	0x030e
 800fa9e:	f04f 0b00 	mov.w	fp, #0
 800faa2:	46da      	mov	sl, fp
 800faa4:	0728      	lsls	r0, r5, #28
 800faa6:	d5c1      	bpl.n	800fa2c <_strtod_l+0x84>
 800faa8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800faac:	e7be      	b.n	800fa2c <_strtod_l+0x84>
 800faae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fab2:	e7f7      	b.n	800faa4 <_strtod_l+0xfc>
 800fab4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fab8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800faba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fabe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fac2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fac6:	e7ed      	b.n	800faa4 <_strtod_l+0xfc>
 800fac8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fc50 <_strtod_l+0x2a8>
 800facc:	f04f 0a00 	mov.w	sl, #0
 800fad0:	e7e8      	b.n	800faa4 <_strtod_l+0xfc>
 800fad2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fad6:	f04f 3aff 	mov.w	sl, #4294967295
 800fada:	e7e3      	b.n	800faa4 <_strtod_l+0xfc>
 800fadc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	921d      	str	r2, [sp, #116]	; 0x74
 800fae2:	785b      	ldrb	r3, [r3, #1]
 800fae4:	2b30      	cmp	r3, #48	; 0x30
 800fae6:	d0f9      	beq.n	800fadc <_strtod_l+0x134>
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d09f      	beq.n	800fa2c <_strtod_l+0x84>
 800faec:	2301      	movs	r3, #1
 800faee:	f04f 0900 	mov.w	r9, #0
 800faf2:	9304      	str	r3, [sp, #16]
 800faf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800faf6:	930a      	str	r3, [sp, #40]	; 0x28
 800faf8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fafc:	464f      	mov	r7, r9
 800fafe:	220a      	movs	r2, #10
 800fb00:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fb02:	7806      	ldrb	r6, [r0, #0]
 800fb04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb08:	b2d9      	uxtb	r1, r3
 800fb0a:	2909      	cmp	r1, #9
 800fb0c:	d92a      	bls.n	800fb64 <_strtod_l+0x1bc>
 800fb0e:	9907      	ldr	r1, [sp, #28]
 800fb10:	462a      	mov	r2, r5
 800fb12:	f7ff ff1a 	bl	800f94a <strncmp>
 800fb16:	b398      	cbz	r0, 800fb80 <_strtod_l+0x1d8>
 800fb18:	2000      	movs	r0, #0
 800fb1a:	4633      	mov	r3, r6
 800fb1c:	463d      	mov	r5, r7
 800fb1e:	9007      	str	r0, [sp, #28]
 800fb20:	4602      	mov	r2, r0
 800fb22:	2b65      	cmp	r3, #101	; 0x65
 800fb24:	d001      	beq.n	800fb2a <_strtod_l+0x182>
 800fb26:	2b45      	cmp	r3, #69	; 0x45
 800fb28:	d118      	bne.n	800fb5c <_strtod_l+0x1b4>
 800fb2a:	b91d      	cbnz	r5, 800fb34 <_strtod_l+0x18c>
 800fb2c:	9b04      	ldr	r3, [sp, #16]
 800fb2e:	4303      	orrs	r3, r0
 800fb30:	d098      	beq.n	800fa64 <_strtod_l+0xbc>
 800fb32:	2500      	movs	r5, #0
 800fb34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fb38:	f108 0301 	add.w	r3, r8, #1
 800fb3c:	931d      	str	r3, [sp, #116]	; 0x74
 800fb3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fb42:	2b2b      	cmp	r3, #43	; 0x2b
 800fb44:	d075      	beq.n	800fc32 <_strtod_l+0x28a>
 800fb46:	2b2d      	cmp	r3, #45	; 0x2d
 800fb48:	d07b      	beq.n	800fc42 <_strtod_l+0x29a>
 800fb4a:	f04f 0c00 	mov.w	ip, #0
 800fb4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fb52:	2909      	cmp	r1, #9
 800fb54:	f240 8082 	bls.w	800fc5c <_strtod_l+0x2b4>
 800fb58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fb5c:	2600      	movs	r6, #0
 800fb5e:	e09d      	b.n	800fc9c <_strtod_l+0x2f4>
 800fb60:	2300      	movs	r3, #0
 800fb62:	e7c4      	b.n	800faee <_strtod_l+0x146>
 800fb64:	2f08      	cmp	r7, #8
 800fb66:	bfd8      	it	le
 800fb68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fb6a:	f100 0001 	add.w	r0, r0, #1
 800fb6e:	bfda      	itte	le
 800fb70:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb74:	9309      	strle	r3, [sp, #36]	; 0x24
 800fb76:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fb7a:	3701      	adds	r7, #1
 800fb7c:	901d      	str	r0, [sp, #116]	; 0x74
 800fb7e:	e7bf      	b.n	800fb00 <_strtod_l+0x158>
 800fb80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb82:	195a      	adds	r2, r3, r5
 800fb84:	921d      	str	r2, [sp, #116]	; 0x74
 800fb86:	5d5b      	ldrb	r3, [r3, r5]
 800fb88:	2f00      	cmp	r7, #0
 800fb8a:	d037      	beq.n	800fbfc <_strtod_l+0x254>
 800fb8c:	9007      	str	r0, [sp, #28]
 800fb8e:	463d      	mov	r5, r7
 800fb90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fb94:	2a09      	cmp	r2, #9
 800fb96:	d912      	bls.n	800fbbe <_strtod_l+0x216>
 800fb98:	2201      	movs	r2, #1
 800fb9a:	e7c2      	b.n	800fb22 <_strtod_l+0x17a>
 800fb9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	921d      	str	r2, [sp, #116]	; 0x74
 800fba2:	785b      	ldrb	r3, [r3, #1]
 800fba4:	3001      	adds	r0, #1
 800fba6:	2b30      	cmp	r3, #48	; 0x30
 800fba8:	d0f8      	beq.n	800fb9c <_strtod_l+0x1f4>
 800fbaa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fbae:	2a08      	cmp	r2, #8
 800fbb0:	f200 84db 	bhi.w	801056a <_strtod_l+0xbc2>
 800fbb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fbb6:	9007      	str	r0, [sp, #28]
 800fbb8:	2000      	movs	r0, #0
 800fbba:	920a      	str	r2, [sp, #40]	; 0x28
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	3b30      	subs	r3, #48	; 0x30
 800fbc0:	f100 0201 	add.w	r2, r0, #1
 800fbc4:	d014      	beq.n	800fbf0 <_strtod_l+0x248>
 800fbc6:	9907      	ldr	r1, [sp, #28]
 800fbc8:	4411      	add	r1, r2
 800fbca:	9107      	str	r1, [sp, #28]
 800fbcc:	462a      	mov	r2, r5
 800fbce:	eb00 0e05 	add.w	lr, r0, r5
 800fbd2:	210a      	movs	r1, #10
 800fbd4:	4572      	cmp	r2, lr
 800fbd6:	d113      	bne.n	800fc00 <_strtod_l+0x258>
 800fbd8:	182a      	adds	r2, r5, r0
 800fbda:	2a08      	cmp	r2, #8
 800fbdc:	f105 0501 	add.w	r5, r5, #1
 800fbe0:	4405      	add	r5, r0
 800fbe2:	dc1c      	bgt.n	800fc1e <_strtod_l+0x276>
 800fbe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	fb02 3301 	mla	r3, r2, r1, r3
 800fbec:	9309      	str	r3, [sp, #36]	; 0x24
 800fbee:	2200      	movs	r2, #0
 800fbf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbf2:	1c59      	adds	r1, r3, #1
 800fbf4:	911d      	str	r1, [sp, #116]	; 0x74
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	e7c9      	b.n	800fb90 <_strtod_l+0x1e8>
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	e7d2      	b.n	800fba6 <_strtod_l+0x1fe>
 800fc00:	2a08      	cmp	r2, #8
 800fc02:	dc04      	bgt.n	800fc0e <_strtod_l+0x266>
 800fc04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc06:	434e      	muls	r6, r1
 800fc08:	9609      	str	r6, [sp, #36]	; 0x24
 800fc0a:	3201      	adds	r2, #1
 800fc0c:	e7e2      	b.n	800fbd4 <_strtod_l+0x22c>
 800fc0e:	f102 0c01 	add.w	ip, r2, #1
 800fc12:	f1bc 0f10 	cmp.w	ip, #16
 800fc16:	bfd8      	it	le
 800fc18:	fb01 f909 	mulle.w	r9, r1, r9
 800fc1c:	e7f5      	b.n	800fc0a <_strtod_l+0x262>
 800fc1e:	2d10      	cmp	r5, #16
 800fc20:	bfdc      	itt	le
 800fc22:	220a      	movle	r2, #10
 800fc24:	fb02 3909 	mlale	r9, r2, r9, r3
 800fc28:	e7e1      	b.n	800fbee <_strtod_l+0x246>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9307      	str	r3, [sp, #28]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	e77c      	b.n	800fb2c <_strtod_l+0x184>
 800fc32:	f04f 0c00 	mov.w	ip, #0
 800fc36:	f108 0302 	add.w	r3, r8, #2
 800fc3a:	931d      	str	r3, [sp, #116]	; 0x74
 800fc3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fc40:	e785      	b.n	800fb4e <_strtod_l+0x1a6>
 800fc42:	f04f 0c01 	mov.w	ip, #1
 800fc46:	e7f6      	b.n	800fc36 <_strtod_l+0x28e>
 800fc48:	080148d4 	.word	0x080148d4
 800fc4c:	08014644 	.word	0x08014644
 800fc50:	7ff00000 	.word	0x7ff00000
 800fc54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc56:	1c59      	adds	r1, r3, #1
 800fc58:	911d      	str	r1, [sp, #116]	; 0x74
 800fc5a:	785b      	ldrb	r3, [r3, #1]
 800fc5c:	2b30      	cmp	r3, #48	; 0x30
 800fc5e:	d0f9      	beq.n	800fc54 <_strtod_l+0x2ac>
 800fc60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fc64:	2908      	cmp	r1, #8
 800fc66:	f63f af79 	bhi.w	800fb5c <_strtod_l+0x1b4>
 800fc6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fc6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc70:	9308      	str	r3, [sp, #32]
 800fc72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc74:	1c59      	adds	r1, r3, #1
 800fc76:	911d      	str	r1, [sp, #116]	; 0x74
 800fc78:	785b      	ldrb	r3, [r3, #1]
 800fc7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fc7e:	2e09      	cmp	r6, #9
 800fc80:	d937      	bls.n	800fcf2 <_strtod_l+0x34a>
 800fc82:	9e08      	ldr	r6, [sp, #32]
 800fc84:	1b89      	subs	r1, r1, r6
 800fc86:	2908      	cmp	r1, #8
 800fc88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fc8c:	dc02      	bgt.n	800fc94 <_strtod_l+0x2ec>
 800fc8e:	4576      	cmp	r6, lr
 800fc90:	bfa8      	it	ge
 800fc92:	4676      	movge	r6, lr
 800fc94:	f1bc 0f00 	cmp.w	ip, #0
 800fc98:	d000      	beq.n	800fc9c <_strtod_l+0x2f4>
 800fc9a:	4276      	negs	r6, r6
 800fc9c:	2d00      	cmp	r5, #0
 800fc9e:	d14f      	bne.n	800fd40 <_strtod_l+0x398>
 800fca0:	9904      	ldr	r1, [sp, #16]
 800fca2:	4301      	orrs	r1, r0
 800fca4:	f47f aec2 	bne.w	800fa2c <_strtod_l+0x84>
 800fca8:	2a00      	cmp	r2, #0
 800fcaa:	f47f aedb 	bne.w	800fa64 <_strtod_l+0xbc>
 800fcae:	2b69      	cmp	r3, #105	; 0x69
 800fcb0:	d027      	beq.n	800fd02 <_strtod_l+0x35a>
 800fcb2:	dc24      	bgt.n	800fcfe <_strtod_l+0x356>
 800fcb4:	2b49      	cmp	r3, #73	; 0x49
 800fcb6:	d024      	beq.n	800fd02 <_strtod_l+0x35a>
 800fcb8:	2b4e      	cmp	r3, #78	; 0x4e
 800fcba:	f47f aed3 	bne.w	800fa64 <_strtod_l+0xbc>
 800fcbe:	499e      	ldr	r1, [pc, #632]	; (800ff38 <_strtod_l+0x590>)
 800fcc0:	a81d      	add	r0, sp, #116	; 0x74
 800fcc2:	f002 f891 	bl	8011de8 <__match>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f43f aecc 	beq.w	800fa64 <_strtod_l+0xbc>
 800fccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b28      	cmp	r3, #40	; 0x28
 800fcd2:	d12d      	bne.n	800fd30 <_strtod_l+0x388>
 800fcd4:	4999      	ldr	r1, [pc, #612]	; (800ff3c <_strtod_l+0x594>)
 800fcd6:	aa20      	add	r2, sp, #128	; 0x80
 800fcd8:	a81d      	add	r0, sp, #116	; 0x74
 800fcda:	f002 f899 	bl	8011e10 <__hexnan>
 800fcde:	2805      	cmp	r0, #5
 800fce0:	d126      	bne.n	800fd30 <_strtod_l+0x388>
 800fce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fce4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fce8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fcec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fcf0:	e69c      	b.n	800fa2c <_strtod_l+0x84>
 800fcf2:	210a      	movs	r1, #10
 800fcf4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fcf8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fcfc:	e7b9      	b.n	800fc72 <_strtod_l+0x2ca>
 800fcfe:	2b6e      	cmp	r3, #110	; 0x6e
 800fd00:	e7db      	b.n	800fcba <_strtod_l+0x312>
 800fd02:	498f      	ldr	r1, [pc, #572]	; (800ff40 <_strtod_l+0x598>)
 800fd04:	a81d      	add	r0, sp, #116	; 0x74
 800fd06:	f002 f86f 	bl	8011de8 <__match>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	f43f aeaa 	beq.w	800fa64 <_strtod_l+0xbc>
 800fd10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd12:	498c      	ldr	r1, [pc, #560]	; (800ff44 <_strtod_l+0x59c>)
 800fd14:	3b01      	subs	r3, #1
 800fd16:	a81d      	add	r0, sp, #116	; 0x74
 800fd18:	931d      	str	r3, [sp, #116]	; 0x74
 800fd1a:	f002 f865 	bl	8011de8 <__match>
 800fd1e:	b910      	cbnz	r0, 800fd26 <_strtod_l+0x37e>
 800fd20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd22:	3301      	adds	r3, #1
 800fd24:	931d      	str	r3, [sp, #116]	; 0x74
 800fd26:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ff54 <_strtod_l+0x5ac>
 800fd2a:	f04f 0a00 	mov.w	sl, #0
 800fd2e:	e67d      	b.n	800fa2c <_strtod_l+0x84>
 800fd30:	4885      	ldr	r0, [pc, #532]	; (800ff48 <_strtod_l+0x5a0>)
 800fd32:	f003 fc79 	bl	8013628 <nan>
 800fd36:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fd3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd3e:	e675      	b.n	800fa2c <_strtod_l+0x84>
 800fd40:	9b07      	ldr	r3, [sp, #28]
 800fd42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd44:	1af3      	subs	r3, r6, r3
 800fd46:	2f00      	cmp	r7, #0
 800fd48:	bf08      	it	eq
 800fd4a:	462f      	moveq	r7, r5
 800fd4c:	2d10      	cmp	r5, #16
 800fd4e:	9308      	str	r3, [sp, #32]
 800fd50:	46a8      	mov	r8, r5
 800fd52:	bfa8      	it	ge
 800fd54:	f04f 0810 	movge.w	r8, #16
 800fd58:	f7f0 fbe4 	bl	8000524 <__aeabi_ui2d>
 800fd5c:	2d09      	cmp	r5, #9
 800fd5e:	4682      	mov	sl, r0
 800fd60:	468b      	mov	fp, r1
 800fd62:	dd13      	ble.n	800fd8c <_strtod_l+0x3e4>
 800fd64:	4b79      	ldr	r3, [pc, #484]	; (800ff4c <_strtod_l+0x5a4>)
 800fd66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd6e:	f7f0 fc53 	bl	8000618 <__aeabi_dmul>
 800fd72:	4682      	mov	sl, r0
 800fd74:	4648      	mov	r0, r9
 800fd76:	468b      	mov	fp, r1
 800fd78:	f7f0 fbd4 	bl	8000524 <__aeabi_ui2d>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4650      	mov	r0, sl
 800fd82:	4659      	mov	r1, fp
 800fd84:	f7f0 fa92 	bl	80002ac <__adddf3>
 800fd88:	4682      	mov	sl, r0
 800fd8a:	468b      	mov	fp, r1
 800fd8c:	2d0f      	cmp	r5, #15
 800fd8e:	dc38      	bgt.n	800fe02 <_strtod_l+0x45a>
 800fd90:	9b08      	ldr	r3, [sp, #32]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f43f ae4a 	beq.w	800fa2c <_strtod_l+0x84>
 800fd98:	dd24      	ble.n	800fde4 <_strtod_l+0x43c>
 800fd9a:	2b16      	cmp	r3, #22
 800fd9c:	dc0b      	bgt.n	800fdb6 <_strtod_l+0x40e>
 800fd9e:	4d6b      	ldr	r5, [pc, #428]	; (800ff4c <_strtod_l+0x5a4>)
 800fda0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fda4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fda8:	4652      	mov	r2, sl
 800fdaa:	465b      	mov	r3, fp
 800fdac:	f7f0 fc34 	bl	8000618 <__aeabi_dmul>
 800fdb0:	4682      	mov	sl, r0
 800fdb2:	468b      	mov	fp, r1
 800fdb4:	e63a      	b.n	800fa2c <_strtod_l+0x84>
 800fdb6:	9a08      	ldr	r2, [sp, #32]
 800fdb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	db20      	blt.n	800fe02 <_strtod_l+0x45a>
 800fdc0:	4c62      	ldr	r4, [pc, #392]	; (800ff4c <_strtod_l+0x5a4>)
 800fdc2:	f1c5 050f 	rsb	r5, r5, #15
 800fdc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fdca:	4652      	mov	r2, sl
 800fdcc:	465b      	mov	r3, fp
 800fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd2:	f7f0 fc21 	bl	8000618 <__aeabi_dmul>
 800fdd6:	9b08      	ldr	r3, [sp, #32]
 800fdd8:	1b5d      	subs	r5, r3, r5
 800fdda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fdde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fde2:	e7e3      	b.n	800fdac <_strtod_l+0x404>
 800fde4:	9b08      	ldr	r3, [sp, #32]
 800fde6:	3316      	adds	r3, #22
 800fde8:	db0b      	blt.n	800fe02 <_strtod_l+0x45a>
 800fdea:	9b07      	ldr	r3, [sp, #28]
 800fdec:	4a57      	ldr	r2, [pc, #348]	; (800ff4c <_strtod_l+0x5a4>)
 800fdee:	1b9e      	subs	r6, r3, r6
 800fdf0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fdf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	4659      	mov	r1, fp
 800fdfc:	f7f0 fd36 	bl	800086c <__aeabi_ddiv>
 800fe00:	e7d6      	b.n	800fdb0 <_strtod_l+0x408>
 800fe02:	9b08      	ldr	r3, [sp, #32]
 800fe04:	eba5 0808 	sub.w	r8, r5, r8
 800fe08:	4498      	add	r8, r3
 800fe0a:	f1b8 0f00 	cmp.w	r8, #0
 800fe0e:	dd71      	ble.n	800fef4 <_strtod_l+0x54c>
 800fe10:	f018 030f 	ands.w	r3, r8, #15
 800fe14:	d00a      	beq.n	800fe2c <_strtod_l+0x484>
 800fe16:	494d      	ldr	r1, [pc, #308]	; (800ff4c <_strtod_l+0x5a4>)
 800fe18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	465b      	mov	r3, fp
 800fe20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe24:	f7f0 fbf8 	bl	8000618 <__aeabi_dmul>
 800fe28:	4682      	mov	sl, r0
 800fe2a:	468b      	mov	fp, r1
 800fe2c:	f038 080f 	bics.w	r8, r8, #15
 800fe30:	d04d      	beq.n	800fece <_strtod_l+0x526>
 800fe32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe36:	dd22      	ble.n	800fe7e <_strtod_l+0x4d6>
 800fe38:	2500      	movs	r5, #0
 800fe3a:	462e      	mov	r6, r5
 800fe3c:	9509      	str	r5, [sp, #36]	; 0x24
 800fe3e:	9507      	str	r5, [sp, #28]
 800fe40:	2322      	movs	r3, #34	; 0x22
 800fe42:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ff54 <_strtod_l+0x5ac>
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	f04f 0a00 	mov.w	sl, #0
 800fe4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f43f adec 	beq.w	800fa2c <_strtod_l+0x84>
 800fe54:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fe56:	4620      	mov	r0, r4
 800fe58:	f002 f94e 	bl	80120f8 <_Bfree>
 800fe5c:	9907      	ldr	r1, [sp, #28]
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f002 f94a 	bl	80120f8 <_Bfree>
 800fe64:	4631      	mov	r1, r6
 800fe66:	4620      	mov	r0, r4
 800fe68:	f002 f946 	bl	80120f8 <_Bfree>
 800fe6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f002 f942 	bl	80120f8 <_Bfree>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4620      	mov	r0, r4
 800fe78:	f002 f93e 	bl	80120f8 <_Bfree>
 800fe7c:	e5d6      	b.n	800fa2c <_strtod_l+0x84>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe84:	4650      	mov	r0, sl
 800fe86:	4659      	mov	r1, fp
 800fe88:	4699      	mov	r9, r3
 800fe8a:	f1b8 0f01 	cmp.w	r8, #1
 800fe8e:	dc21      	bgt.n	800fed4 <_strtod_l+0x52c>
 800fe90:	b10b      	cbz	r3, 800fe96 <_strtod_l+0x4ee>
 800fe92:	4682      	mov	sl, r0
 800fe94:	468b      	mov	fp, r1
 800fe96:	4b2e      	ldr	r3, [pc, #184]	; (800ff50 <_strtod_l+0x5a8>)
 800fe98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fe9c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fea0:	4652      	mov	r2, sl
 800fea2:	465b      	mov	r3, fp
 800fea4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fea8:	f7f0 fbb6 	bl	8000618 <__aeabi_dmul>
 800feac:	4b29      	ldr	r3, [pc, #164]	; (800ff54 <_strtod_l+0x5ac>)
 800feae:	460a      	mov	r2, r1
 800feb0:	400b      	ands	r3, r1
 800feb2:	4929      	ldr	r1, [pc, #164]	; (800ff58 <_strtod_l+0x5b0>)
 800feb4:	428b      	cmp	r3, r1
 800feb6:	4682      	mov	sl, r0
 800feb8:	d8be      	bhi.n	800fe38 <_strtod_l+0x490>
 800feba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800febe:	428b      	cmp	r3, r1
 800fec0:	bf86      	itte	hi
 800fec2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ff5c <_strtod_l+0x5b4>
 800fec6:	f04f 3aff 	movhi.w	sl, #4294967295
 800feca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fece:	2300      	movs	r3, #0
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	e081      	b.n	800ffd8 <_strtod_l+0x630>
 800fed4:	f018 0f01 	tst.w	r8, #1
 800fed8:	d007      	beq.n	800feea <_strtod_l+0x542>
 800feda:	4b1d      	ldr	r3, [pc, #116]	; (800ff50 <_strtod_l+0x5a8>)
 800fedc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	f7f0 fb98 	bl	8000618 <__aeabi_dmul>
 800fee8:	2301      	movs	r3, #1
 800feea:	f109 0901 	add.w	r9, r9, #1
 800feee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fef2:	e7ca      	b.n	800fe8a <_strtod_l+0x4e2>
 800fef4:	d0eb      	beq.n	800fece <_strtod_l+0x526>
 800fef6:	f1c8 0800 	rsb	r8, r8, #0
 800fefa:	f018 020f 	ands.w	r2, r8, #15
 800fefe:	d00a      	beq.n	800ff16 <_strtod_l+0x56e>
 800ff00:	4b12      	ldr	r3, [pc, #72]	; (800ff4c <_strtod_l+0x5a4>)
 800ff02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff06:	4650      	mov	r0, sl
 800ff08:	4659      	mov	r1, fp
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	f7f0 fcad 	bl	800086c <__aeabi_ddiv>
 800ff12:	4682      	mov	sl, r0
 800ff14:	468b      	mov	fp, r1
 800ff16:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff1a:	d0d8      	beq.n	800fece <_strtod_l+0x526>
 800ff1c:	f1b8 0f1f 	cmp.w	r8, #31
 800ff20:	dd1e      	ble.n	800ff60 <_strtod_l+0x5b8>
 800ff22:	2500      	movs	r5, #0
 800ff24:	462e      	mov	r6, r5
 800ff26:	9509      	str	r5, [sp, #36]	; 0x24
 800ff28:	9507      	str	r5, [sp, #28]
 800ff2a:	2322      	movs	r3, #34	; 0x22
 800ff2c:	f04f 0a00 	mov.w	sl, #0
 800ff30:	f04f 0b00 	mov.w	fp, #0
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	e789      	b.n	800fe4c <_strtod_l+0x4a4>
 800ff38:	08014619 	.word	0x08014619
 800ff3c:	08014658 	.word	0x08014658
 800ff40:	08014611 	.word	0x08014611
 800ff44:	080147d8 	.word	0x080147d8
 800ff48:	080146d3 	.word	0x080146d3
 800ff4c:	08014970 	.word	0x08014970
 800ff50:	08014948 	.word	0x08014948
 800ff54:	7ff00000 	.word	0x7ff00000
 800ff58:	7ca00000 	.word	0x7ca00000
 800ff5c:	7fefffff 	.word	0x7fefffff
 800ff60:	f018 0310 	ands.w	r3, r8, #16
 800ff64:	bf18      	it	ne
 800ff66:	236a      	movne	r3, #106	; 0x6a
 800ff68:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010320 <_strtod_l+0x978>
 800ff6c:	9304      	str	r3, [sp, #16]
 800ff6e:	4650      	mov	r0, sl
 800ff70:	4659      	mov	r1, fp
 800ff72:	2300      	movs	r3, #0
 800ff74:	f018 0f01 	tst.w	r8, #1
 800ff78:	d004      	beq.n	800ff84 <_strtod_l+0x5dc>
 800ff7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff7e:	f7f0 fb4b 	bl	8000618 <__aeabi_dmul>
 800ff82:	2301      	movs	r3, #1
 800ff84:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ff88:	f109 0908 	add.w	r9, r9, #8
 800ff8c:	d1f2      	bne.n	800ff74 <_strtod_l+0x5cc>
 800ff8e:	b10b      	cbz	r3, 800ff94 <_strtod_l+0x5ec>
 800ff90:	4682      	mov	sl, r0
 800ff92:	468b      	mov	fp, r1
 800ff94:	9b04      	ldr	r3, [sp, #16]
 800ff96:	b1bb      	cbz	r3, 800ffc8 <_strtod_l+0x620>
 800ff98:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ff9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	4659      	mov	r1, fp
 800ffa4:	dd10      	ble.n	800ffc8 <_strtod_l+0x620>
 800ffa6:	2b1f      	cmp	r3, #31
 800ffa8:	f340 8128 	ble.w	80101fc <_strtod_l+0x854>
 800ffac:	2b34      	cmp	r3, #52	; 0x34
 800ffae:	bfde      	ittt	le
 800ffb0:	3b20      	suble	r3, #32
 800ffb2:	f04f 32ff 	movle.w	r2, #4294967295
 800ffb6:	fa02 f303 	lslle.w	r3, r2, r3
 800ffba:	f04f 0a00 	mov.w	sl, #0
 800ffbe:	bfcc      	ite	gt
 800ffc0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ffc4:	ea03 0b01 	andle.w	fp, r3, r1
 800ffc8:	2200      	movs	r2, #0
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4650      	mov	r0, sl
 800ffce:	4659      	mov	r1, fp
 800ffd0:	f7f0 fd8a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d1a4      	bne.n	800ff22 <_strtod_l+0x57a>
 800ffd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ffde:	462b      	mov	r3, r5
 800ffe0:	463a      	mov	r2, r7
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f002 f8f4 	bl	80121d0 <__s2b>
 800ffe8:	9009      	str	r0, [sp, #36]	; 0x24
 800ffea:	2800      	cmp	r0, #0
 800ffec:	f43f af24 	beq.w	800fe38 <_strtod_l+0x490>
 800fff0:	9b07      	ldr	r3, [sp, #28]
 800fff2:	1b9e      	subs	r6, r3, r6
 800fff4:	9b08      	ldr	r3, [sp, #32]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	bfb4      	ite	lt
 800fffa:	4633      	movlt	r3, r6
 800fffc:	2300      	movge	r3, #0
 800fffe:	9310      	str	r3, [sp, #64]	; 0x40
 8010000:	9b08      	ldr	r3, [sp, #32]
 8010002:	2500      	movs	r5, #0
 8010004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010008:	9318      	str	r3, [sp, #96]	; 0x60
 801000a:	462e      	mov	r6, r5
 801000c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801000e:	4620      	mov	r0, r4
 8010010:	6859      	ldr	r1, [r3, #4]
 8010012:	f002 f831 	bl	8012078 <_Balloc>
 8010016:	9007      	str	r0, [sp, #28]
 8010018:	2800      	cmp	r0, #0
 801001a:	f43f af11 	beq.w	800fe40 <_strtod_l+0x498>
 801001e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010020:	691a      	ldr	r2, [r3, #16]
 8010022:	3202      	adds	r2, #2
 8010024:	f103 010c 	add.w	r1, r3, #12
 8010028:	0092      	lsls	r2, r2, #2
 801002a:	300c      	adds	r0, #12
 801002c:	f7fe fb56 	bl	800e6dc <memcpy>
 8010030:	ec4b ab10 	vmov	d0, sl, fp
 8010034:	aa20      	add	r2, sp, #128	; 0x80
 8010036:	a91f      	add	r1, sp, #124	; 0x7c
 8010038:	4620      	mov	r0, r4
 801003a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801003e:	f002 fc03 	bl	8012848 <__d2b>
 8010042:	901e      	str	r0, [sp, #120]	; 0x78
 8010044:	2800      	cmp	r0, #0
 8010046:	f43f aefb 	beq.w	800fe40 <_strtod_l+0x498>
 801004a:	2101      	movs	r1, #1
 801004c:	4620      	mov	r0, r4
 801004e:	f002 f959 	bl	8012304 <__i2b>
 8010052:	4606      	mov	r6, r0
 8010054:	2800      	cmp	r0, #0
 8010056:	f43f aef3 	beq.w	800fe40 <_strtod_l+0x498>
 801005a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801005c:	9904      	ldr	r1, [sp, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfab      	itete	ge
 8010062:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010064:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010066:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010068:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801006c:	bfac      	ite	ge
 801006e:	eb03 0902 	addge.w	r9, r3, r2
 8010072:	1ad7      	sublt	r7, r2, r3
 8010074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010076:	eba3 0801 	sub.w	r8, r3, r1
 801007a:	4490      	add	r8, r2
 801007c:	4ba3      	ldr	r3, [pc, #652]	; (801030c <_strtod_l+0x964>)
 801007e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010082:	4598      	cmp	r8, r3
 8010084:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010088:	f280 80cc 	bge.w	8010224 <_strtod_l+0x87c>
 801008c:	eba3 0308 	sub.w	r3, r3, r8
 8010090:	2b1f      	cmp	r3, #31
 8010092:	eba2 0203 	sub.w	r2, r2, r3
 8010096:	f04f 0101 	mov.w	r1, #1
 801009a:	f300 80b6 	bgt.w	801020a <_strtod_l+0x862>
 801009e:	fa01 f303 	lsl.w	r3, r1, r3
 80100a2:	9311      	str	r3, [sp, #68]	; 0x44
 80100a4:	2300      	movs	r3, #0
 80100a6:	930c      	str	r3, [sp, #48]	; 0x30
 80100a8:	eb09 0802 	add.w	r8, r9, r2
 80100ac:	9b04      	ldr	r3, [sp, #16]
 80100ae:	45c1      	cmp	r9, r8
 80100b0:	4417      	add	r7, r2
 80100b2:	441f      	add	r7, r3
 80100b4:	464b      	mov	r3, r9
 80100b6:	bfa8      	it	ge
 80100b8:	4643      	movge	r3, r8
 80100ba:	42bb      	cmp	r3, r7
 80100bc:	bfa8      	it	ge
 80100be:	463b      	movge	r3, r7
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	bfc2      	ittt	gt
 80100c4:	eba8 0803 	subgt.w	r8, r8, r3
 80100c8:	1aff      	subgt	r7, r7, r3
 80100ca:	eba9 0903 	subgt.w	r9, r9, r3
 80100ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	dd17      	ble.n	8010104 <_strtod_l+0x75c>
 80100d4:	4631      	mov	r1, r6
 80100d6:	461a      	mov	r2, r3
 80100d8:	4620      	mov	r0, r4
 80100da:	f002 f9cf 	bl	801247c <__pow5mult>
 80100de:	4606      	mov	r6, r0
 80100e0:	2800      	cmp	r0, #0
 80100e2:	f43f aead 	beq.w	800fe40 <_strtod_l+0x498>
 80100e6:	4601      	mov	r1, r0
 80100e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80100ea:	4620      	mov	r0, r4
 80100ec:	f002 f920 	bl	8012330 <__multiply>
 80100f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80100f2:	2800      	cmp	r0, #0
 80100f4:	f43f aea4 	beq.w	800fe40 <_strtod_l+0x498>
 80100f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80100fa:	4620      	mov	r0, r4
 80100fc:	f001 fffc 	bl	80120f8 <_Bfree>
 8010100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010102:	931e      	str	r3, [sp, #120]	; 0x78
 8010104:	f1b8 0f00 	cmp.w	r8, #0
 8010108:	f300 8091 	bgt.w	801022e <_strtod_l+0x886>
 801010c:	9b08      	ldr	r3, [sp, #32]
 801010e:	2b00      	cmp	r3, #0
 8010110:	dd08      	ble.n	8010124 <_strtod_l+0x77c>
 8010112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010114:	9907      	ldr	r1, [sp, #28]
 8010116:	4620      	mov	r0, r4
 8010118:	f002 f9b0 	bl	801247c <__pow5mult>
 801011c:	9007      	str	r0, [sp, #28]
 801011e:	2800      	cmp	r0, #0
 8010120:	f43f ae8e 	beq.w	800fe40 <_strtod_l+0x498>
 8010124:	2f00      	cmp	r7, #0
 8010126:	dd08      	ble.n	801013a <_strtod_l+0x792>
 8010128:	9907      	ldr	r1, [sp, #28]
 801012a:	463a      	mov	r2, r7
 801012c:	4620      	mov	r0, r4
 801012e:	f002 f9ff 	bl	8012530 <__lshift>
 8010132:	9007      	str	r0, [sp, #28]
 8010134:	2800      	cmp	r0, #0
 8010136:	f43f ae83 	beq.w	800fe40 <_strtod_l+0x498>
 801013a:	f1b9 0f00 	cmp.w	r9, #0
 801013e:	dd08      	ble.n	8010152 <_strtod_l+0x7aa>
 8010140:	4631      	mov	r1, r6
 8010142:	464a      	mov	r2, r9
 8010144:	4620      	mov	r0, r4
 8010146:	f002 f9f3 	bl	8012530 <__lshift>
 801014a:	4606      	mov	r6, r0
 801014c:	2800      	cmp	r0, #0
 801014e:	f43f ae77 	beq.w	800fe40 <_strtod_l+0x498>
 8010152:	9a07      	ldr	r2, [sp, #28]
 8010154:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010156:	4620      	mov	r0, r4
 8010158:	f002 fa72 	bl	8012640 <__mdiff>
 801015c:	4605      	mov	r5, r0
 801015e:	2800      	cmp	r0, #0
 8010160:	f43f ae6e 	beq.w	800fe40 <_strtod_l+0x498>
 8010164:	68c3      	ldr	r3, [r0, #12]
 8010166:	930f      	str	r3, [sp, #60]	; 0x3c
 8010168:	2300      	movs	r3, #0
 801016a:	60c3      	str	r3, [r0, #12]
 801016c:	4631      	mov	r1, r6
 801016e:	f002 fa4b 	bl	8012608 <__mcmp>
 8010172:	2800      	cmp	r0, #0
 8010174:	da65      	bge.n	8010242 <_strtod_l+0x89a>
 8010176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010178:	ea53 030a 	orrs.w	r3, r3, sl
 801017c:	f040 8087 	bne.w	801028e <_strtod_l+0x8e6>
 8010180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010184:	2b00      	cmp	r3, #0
 8010186:	f040 8082 	bne.w	801028e <_strtod_l+0x8e6>
 801018a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801018e:	0d1b      	lsrs	r3, r3, #20
 8010190:	051b      	lsls	r3, r3, #20
 8010192:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010196:	d97a      	bls.n	801028e <_strtod_l+0x8e6>
 8010198:	696b      	ldr	r3, [r5, #20]
 801019a:	b913      	cbnz	r3, 80101a2 <_strtod_l+0x7fa>
 801019c:	692b      	ldr	r3, [r5, #16]
 801019e:	2b01      	cmp	r3, #1
 80101a0:	dd75      	ble.n	801028e <_strtod_l+0x8e6>
 80101a2:	4629      	mov	r1, r5
 80101a4:	2201      	movs	r2, #1
 80101a6:	4620      	mov	r0, r4
 80101a8:	f002 f9c2 	bl	8012530 <__lshift>
 80101ac:	4631      	mov	r1, r6
 80101ae:	4605      	mov	r5, r0
 80101b0:	f002 fa2a 	bl	8012608 <__mcmp>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	dd6a      	ble.n	801028e <_strtod_l+0x8e6>
 80101b8:	9904      	ldr	r1, [sp, #16]
 80101ba:	4a55      	ldr	r2, [pc, #340]	; (8010310 <_strtod_l+0x968>)
 80101bc:	465b      	mov	r3, fp
 80101be:	2900      	cmp	r1, #0
 80101c0:	f000 8085 	beq.w	80102ce <_strtod_l+0x926>
 80101c4:	ea02 010b 	and.w	r1, r2, fp
 80101c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80101cc:	dc7f      	bgt.n	80102ce <_strtod_l+0x926>
 80101ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80101d2:	f77f aeaa 	ble.w	800ff2a <_strtod_l+0x582>
 80101d6:	4a4f      	ldr	r2, [pc, #316]	; (8010314 <_strtod_l+0x96c>)
 80101d8:	2300      	movs	r3, #0
 80101da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80101de:	4650      	mov	r0, sl
 80101e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80101e4:	4659      	mov	r1, fp
 80101e6:	f7f0 fa17 	bl	8000618 <__aeabi_dmul>
 80101ea:	460b      	mov	r3, r1
 80101ec:	4303      	orrs	r3, r0
 80101ee:	bf08      	it	eq
 80101f0:	2322      	moveq	r3, #34	; 0x22
 80101f2:	4682      	mov	sl, r0
 80101f4:	468b      	mov	fp, r1
 80101f6:	bf08      	it	eq
 80101f8:	6023      	streq	r3, [r4, #0]
 80101fa:	e62b      	b.n	800fe54 <_strtod_l+0x4ac>
 80101fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010200:	fa02 f303 	lsl.w	r3, r2, r3
 8010204:	ea03 0a0a 	and.w	sl, r3, sl
 8010208:	e6de      	b.n	800ffc8 <_strtod_l+0x620>
 801020a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801020e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801021a:	fa01 f308 	lsl.w	r3, r1, r8
 801021e:	930c      	str	r3, [sp, #48]	; 0x30
 8010220:	9111      	str	r1, [sp, #68]	; 0x44
 8010222:	e741      	b.n	80100a8 <_strtod_l+0x700>
 8010224:	2300      	movs	r3, #0
 8010226:	930c      	str	r3, [sp, #48]	; 0x30
 8010228:	2301      	movs	r3, #1
 801022a:	9311      	str	r3, [sp, #68]	; 0x44
 801022c:	e73c      	b.n	80100a8 <_strtod_l+0x700>
 801022e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010230:	4642      	mov	r2, r8
 8010232:	4620      	mov	r0, r4
 8010234:	f002 f97c 	bl	8012530 <__lshift>
 8010238:	901e      	str	r0, [sp, #120]	; 0x78
 801023a:	2800      	cmp	r0, #0
 801023c:	f47f af66 	bne.w	801010c <_strtod_l+0x764>
 8010240:	e5fe      	b.n	800fe40 <_strtod_l+0x498>
 8010242:	465f      	mov	r7, fp
 8010244:	d16e      	bne.n	8010324 <_strtod_l+0x97c>
 8010246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801024c:	b342      	cbz	r2, 80102a0 <_strtod_l+0x8f8>
 801024e:	4a32      	ldr	r2, [pc, #200]	; (8010318 <_strtod_l+0x970>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d128      	bne.n	80102a6 <_strtod_l+0x8fe>
 8010254:	9b04      	ldr	r3, [sp, #16]
 8010256:	4650      	mov	r0, sl
 8010258:	b1eb      	cbz	r3, 8010296 <_strtod_l+0x8ee>
 801025a:	4a2d      	ldr	r2, [pc, #180]	; (8010310 <_strtod_l+0x968>)
 801025c:	403a      	ands	r2, r7
 801025e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010262:	f04f 31ff 	mov.w	r1, #4294967295
 8010266:	d819      	bhi.n	801029c <_strtod_l+0x8f4>
 8010268:	0d12      	lsrs	r2, r2, #20
 801026a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801026e:	fa01 f303 	lsl.w	r3, r1, r3
 8010272:	4298      	cmp	r0, r3
 8010274:	d117      	bne.n	80102a6 <_strtod_l+0x8fe>
 8010276:	4b29      	ldr	r3, [pc, #164]	; (801031c <_strtod_l+0x974>)
 8010278:	429f      	cmp	r7, r3
 801027a:	d102      	bne.n	8010282 <_strtod_l+0x8da>
 801027c:	3001      	adds	r0, #1
 801027e:	f43f addf 	beq.w	800fe40 <_strtod_l+0x498>
 8010282:	4b23      	ldr	r3, [pc, #140]	; (8010310 <_strtod_l+0x968>)
 8010284:	403b      	ands	r3, r7
 8010286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801028a:	f04f 0a00 	mov.w	sl, #0
 801028e:	9b04      	ldr	r3, [sp, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1a0      	bne.n	80101d6 <_strtod_l+0x82e>
 8010294:	e5de      	b.n	800fe54 <_strtod_l+0x4ac>
 8010296:	f04f 33ff 	mov.w	r3, #4294967295
 801029a:	e7ea      	b.n	8010272 <_strtod_l+0x8ca>
 801029c:	460b      	mov	r3, r1
 801029e:	e7e8      	b.n	8010272 <_strtod_l+0x8ca>
 80102a0:	ea53 030a 	orrs.w	r3, r3, sl
 80102a4:	d088      	beq.n	80101b8 <_strtod_l+0x810>
 80102a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102a8:	b1db      	cbz	r3, 80102e2 <_strtod_l+0x93a>
 80102aa:	423b      	tst	r3, r7
 80102ac:	d0ef      	beq.n	801028e <_strtod_l+0x8e6>
 80102ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102b0:	9a04      	ldr	r2, [sp, #16]
 80102b2:	4650      	mov	r0, sl
 80102b4:	4659      	mov	r1, fp
 80102b6:	b1c3      	cbz	r3, 80102ea <_strtod_l+0x942>
 80102b8:	f7ff fb59 	bl	800f96e <sulp>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102c4:	f7ef fff2 	bl	80002ac <__adddf3>
 80102c8:	4682      	mov	sl, r0
 80102ca:	468b      	mov	fp, r1
 80102cc:	e7df      	b.n	801028e <_strtod_l+0x8e6>
 80102ce:	4013      	ands	r3, r2
 80102d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80102d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80102d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80102dc:	f04f 3aff 	mov.w	sl, #4294967295
 80102e0:	e7d5      	b.n	801028e <_strtod_l+0x8e6>
 80102e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102e4:	ea13 0f0a 	tst.w	r3, sl
 80102e8:	e7e0      	b.n	80102ac <_strtod_l+0x904>
 80102ea:	f7ff fb40 	bl	800f96e <sulp>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102f6:	f7ef ffd7 	bl	80002a8 <__aeabi_dsub>
 80102fa:	2200      	movs	r2, #0
 80102fc:	2300      	movs	r3, #0
 80102fe:	4682      	mov	sl, r0
 8010300:	468b      	mov	fp, r1
 8010302:	f7f0 fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010306:	2800      	cmp	r0, #0
 8010308:	d0c1      	beq.n	801028e <_strtod_l+0x8e6>
 801030a:	e60e      	b.n	800ff2a <_strtod_l+0x582>
 801030c:	fffffc02 	.word	0xfffffc02
 8010310:	7ff00000 	.word	0x7ff00000
 8010314:	39500000 	.word	0x39500000
 8010318:	000fffff 	.word	0x000fffff
 801031c:	7fefffff 	.word	0x7fefffff
 8010320:	08014670 	.word	0x08014670
 8010324:	4631      	mov	r1, r6
 8010326:	4628      	mov	r0, r5
 8010328:	f002 faea 	bl	8012900 <__ratio>
 801032c:	ec59 8b10 	vmov	r8, r9, d0
 8010330:	ee10 0a10 	vmov	r0, s0
 8010334:	2200      	movs	r2, #0
 8010336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801033a:	4649      	mov	r1, r9
 801033c:	f7f0 fbe8 	bl	8000b10 <__aeabi_dcmple>
 8010340:	2800      	cmp	r0, #0
 8010342:	d07c      	beq.n	801043e <_strtod_l+0xa96>
 8010344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010346:	2b00      	cmp	r3, #0
 8010348:	d04c      	beq.n	80103e4 <_strtod_l+0xa3c>
 801034a:	4b95      	ldr	r3, [pc, #596]	; (80105a0 <_strtod_l+0xbf8>)
 801034c:	2200      	movs	r2, #0
 801034e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80105a0 <_strtod_l+0xbf8>
 8010356:	f04f 0800 	mov.w	r8, #0
 801035a:	4b92      	ldr	r3, [pc, #584]	; (80105a4 <_strtod_l+0xbfc>)
 801035c:	403b      	ands	r3, r7
 801035e:	9311      	str	r3, [sp, #68]	; 0x44
 8010360:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010362:	4b91      	ldr	r3, [pc, #580]	; (80105a8 <_strtod_l+0xc00>)
 8010364:	429a      	cmp	r2, r3
 8010366:	f040 80b2 	bne.w	80104ce <_strtod_l+0xb26>
 801036a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801036e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010372:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010376:	ec4b ab10 	vmov	d0, sl, fp
 801037a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801037e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010382:	f002 f9e5 	bl	8012750 <__ulp>
 8010386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801038a:	ec53 2b10 	vmov	r2, r3, d0
 801038e:	f7f0 f943 	bl	8000618 <__aeabi_dmul>
 8010392:	4652      	mov	r2, sl
 8010394:	465b      	mov	r3, fp
 8010396:	f7ef ff89 	bl	80002ac <__adddf3>
 801039a:	460b      	mov	r3, r1
 801039c:	4981      	ldr	r1, [pc, #516]	; (80105a4 <_strtod_l+0xbfc>)
 801039e:	4a83      	ldr	r2, [pc, #524]	; (80105ac <_strtod_l+0xc04>)
 80103a0:	4019      	ands	r1, r3
 80103a2:	4291      	cmp	r1, r2
 80103a4:	4682      	mov	sl, r0
 80103a6:	d95e      	bls.n	8010466 <_strtod_l+0xabe>
 80103a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d103      	bne.n	80103ba <_strtod_l+0xa12>
 80103b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103b4:	3301      	adds	r3, #1
 80103b6:	f43f ad43 	beq.w	800fe40 <_strtod_l+0x498>
 80103ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80105b8 <_strtod_l+0xc10>
 80103be:	f04f 3aff 	mov.w	sl, #4294967295
 80103c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103c4:	4620      	mov	r0, r4
 80103c6:	f001 fe97 	bl	80120f8 <_Bfree>
 80103ca:	9907      	ldr	r1, [sp, #28]
 80103cc:	4620      	mov	r0, r4
 80103ce:	f001 fe93 	bl	80120f8 <_Bfree>
 80103d2:	4631      	mov	r1, r6
 80103d4:	4620      	mov	r0, r4
 80103d6:	f001 fe8f 	bl	80120f8 <_Bfree>
 80103da:	4629      	mov	r1, r5
 80103dc:	4620      	mov	r0, r4
 80103de:	f001 fe8b 	bl	80120f8 <_Bfree>
 80103e2:	e613      	b.n	801000c <_strtod_l+0x664>
 80103e4:	f1ba 0f00 	cmp.w	sl, #0
 80103e8:	d11b      	bne.n	8010422 <_strtod_l+0xa7a>
 80103ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103ee:	b9f3      	cbnz	r3, 801042e <_strtod_l+0xa86>
 80103f0:	4b6b      	ldr	r3, [pc, #428]	; (80105a0 <_strtod_l+0xbf8>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 fb80 	bl	8000afc <__aeabi_dcmplt>
 80103fc:	b9d0      	cbnz	r0, 8010434 <_strtod_l+0xa8c>
 80103fe:	4640      	mov	r0, r8
 8010400:	4649      	mov	r1, r9
 8010402:	4b6b      	ldr	r3, [pc, #428]	; (80105b0 <_strtod_l+0xc08>)
 8010404:	2200      	movs	r2, #0
 8010406:	f7f0 f907 	bl	8000618 <__aeabi_dmul>
 801040a:	4680      	mov	r8, r0
 801040c:	4689      	mov	r9, r1
 801040e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010412:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010416:	931b      	str	r3, [sp, #108]	; 0x6c
 8010418:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801041c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010420:	e79b      	b.n	801035a <_strtod_l+0x9b2>
 8010422:	f1ba 0f01 	cmp.w	sl, #1
 8010426:	d102      	bne.n	801042e <_strtod_l+0xa86>
 8010428:	2f00      	cmp	r7, #0
 801042a:	f43f ad7e 	beq.w	800ff2a <_strtod_l+0x582>
 801042e:	4b61      	ldr	r3, [pc, #388]	; (80105b4 <_strtod_l+0xc0c>)
 8010430:	2200      	movs	r2, #0
 8010432:	e78c      	b.n	801034e <_strtod_l+0x9a6>
 8010434:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80105b0 <_strtod_l+0xc08>
 8010438:	f04f 0800 	mov.w	r8, #0
 801043c:	e7e7      	b.n	801040e <_strtod_l+0xa66>
 801043e:	4b5c      	ldr	r3, [pc, #368]	; (80105b0 <_strtod_l+0xc08>)
 8010440:	4640      	mov	r0, r8
 8010442:	4649      	mov	r1, r9
 8010444:	2200      	movs	r2, #0
 8010446:	f7f0 f8e7 	bl	8000618 <__aeabi_dmul>
 801044a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801044c:	4680      	mov	r8, r0
 801044e:	4689      	mov	r9, r1
 8010450:	b933      	cbnz	r3, 8010460 <_strtod_l+0xab8>
 8010452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010456:	9012      	str	r0, [sp, #72]	; 0x48
 8010458:	9313      	str	r3, [sp, #76]	; 0x4c
 801045a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801045e:	e7dd      	b.n	801041c <_strtod_l+0xa74>
 8010460:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010464:	e7f9      	b.n	801045a <_strtod_l+0xab2>
 8010466:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801046a:	9b04      	ldr	r3, [sp, #16]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1a8      	bne.n	80103c2 <_strtod_l+0xa1a>
 8010470:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010476:	0d1b      	lsrs	r3, r3, #20
 8010478:	051b      	lsls	r3, r3, #20
 801047a:	429a      	cmp	r2, r3
 801047c:	d1a1      	bne.n	80103c2 <_strtod_l+0xa1a>
 801047e:	4640      	mov	r0, r8
 8010480:	4649      	mov	r1, r9
 8010482:	f7f0 fc29 	bl	8000cd8 <__aeabi_d2lz>
 8010486:	f7f0 f899 	bl	80005bc <__aeabi_l2d>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7ef ff09 	bl	80002a8 <__aeabi_dsub>
 8010496:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801049c:	ea43 030a 	orr.w	r3, r3, sl
 80104a0:	4313      	orrs	r3, r2
 80104a2:	4680      	mov	r8, r0
 80104a4:	4689      	mov	r9, r1
 80104a6:	d053      	beq.n	8010550 <_strtod_l+0xba8>
 80104a8:	a335      	add	r3, pc, #212	; (adr r3, 8010580 <_strtod_l+0xbd8>)
 80104aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ae:	f7f0 fb25 	bl	8000afc <__aeabi_dcmplt>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f47f acce 	bne.w	800fe54 <_strtod_l+0x4ac>
 80104b8:	a333      	add	r3, pc, #204	; (adr r3, 8010588 <_strtod_l+0xbe0>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	4640      	mov	r0, r8
 80104c0:	4649      	mov	r1, r9
 80104c2:	f7f0 fb39 	bl	8000b38 <__aeabi_dcmpgt>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	f43f af7b 	beq.w	80103c2 <_strtod_l+0xa1a>
 80104cc:	e4c2      	b.n	800fe54 <_strtod_l+0x4ac>
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	b333      	cbz	r3, 8010520 <_strtod_l+0xb78>
 80104d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104d8:	d822      	bhi.n	8010520 <_strtod_l+0xb78>
 80104da:	a32d      	add	r3, pc, #180	; (adr r3, 8010590 <_strtod_l+0xbe8>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	4640      	mov	r0, r8
 80104e2:	4649      	mov	r1, r9
 80104e4:	f7f0 fb14 	bl	8000b10 <__aeabi_dcmple>
 80104e8:	b1a0      	cbz	r0, 8010514 <_strtod_l+0xb6c>
 80104ea:	4649      	mov	r1, r9
 80104ec:	4640      	mov	r0, r8
 80104ee:	f7f0 fb6b 	bl	8000bc8 <__aeabi_d2uiz>
 80104f2:	2801      	cmp	r0, #1
 80104f4:	bf38      	it	cc
 80104f6:	2001      	movcc	r0, #1
 80104f8:	f7f0 f814 	bl	8000524 <__aeabi_ui2d>
 80104fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104fe:	4680      	mov	r8, r0
 8010500:	4689      	mov	r9, r1
 8010502:	bb13      	cbnz	r3, 801054a <_strtod_l+0xba2>
 8010504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010508:	9014      	str	r0, [sp, #80]	; 0x50
 801050a:	9315      	str	r3, [sp, #84]	; 0x54
 801050c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010510:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010516:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010518:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801051c:	1a9b      	subs	r3, r3, r2
 801051e:	930d      	str	r3, [sp, #52]	; 0x34
 8010520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010524:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801052c:	f002 f910 	bl	8012750 <__ulp>
 8010530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010534:	ec53 2b10 	vmov	r2, r3, d0
 8010538:	f7f0 f86e 	bl	8000618 <__aeabi_dmul>
 801053c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010540:	f7ef feb4 	bl	80002ac <__adddf3>
 8010544:	4682      	mov	sl, r0
 8010546:	468b      	mov	fp, r1
 8010548:	e78f      	b.n	801046a <_strtod_l+0xac2>
 801054a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801054e:	e7dd      	b.n	801050c <_strtod_l+0xb64>
 8010550:	a311      	add	r3, pc, #68	; (adr r3, 8010598 <_strtod_l+0xbf0>)
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f7f0 fad1 	bl	8000afc <__aeabi_dcmplt>
 801055a:	e7b4      	b.n	80104c6 <_strtod_l+0xb1e>
 801055c:	2300      	movs	r3, #0
 801055e:	930e      	str	r3, [sp, #56]	; 0x38
 8010560:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010564:	6013      	str	r3, [r2, #0]
 8010566:	f7ff ba65 	b.w	800fa34 <_strtod_l+0x8c>
 801056a:	2b65      	cmp	r3, #101	; 0x65
 801056c:	f43f ab5d 	beq.w	800fc2a <_strtod_l+0x282>
 8010570:	2b45      	cmp	r3, #69	; 0x45
 8010572:	f43f ab5a 	beq.w	800fc2a <_strtod_l+0x282>
 8010576:	2201      	movs	r2, #1
 8010578:	f7ff bb92 	b.w	800fca0 <_strtod_l+0x2f8>
 801057c:	f3af 8000 	nop.w
 8010580:	94a03595 	.word	0x94a03595
 8010584:	3fdfffff 	.word	0x3fdfffff
 8010588:	35afe535 	.word	0x35afe535
 801058c:	3fe00000 	.word	0x3fe00000
 8010590:	ffc00000 	.word	0xffc00000
 8010594:	41dfffff 	.word	0x41dfffff
 8010598:	94a03595 	.word	0x94a03595
 801059c:	3fcfffff 	.word	0x3fcfffff
 80105a0:	3ff00000 	.word	0x3ff00000
 80105a4:	7ff00000 	.word	0x7ff00000
 80105a8:	7fe00000 	.word	0x7fe00000
 80105ac:	7c9fffff 	.word	0x7c9fffff
 80105b0:	3fe00000 	.word	0x3fe00000
 80105b4:	bff00000 	.word	0xbff00000
 80105b8:	7fefffff 	.word	0x7fefffff

080105bc <_strtod_r>:
 80105bc:	4b01      	ldr	r3, [pc, #4]	; (80105c4 <_strtod_r+0x8>)
 80105be:	f7ff b9f3 	b.w	800f9a8 <_strtod_l>
 80105c2:	bf00      	nop
 80105c4:	200000a4 	.word	0x200000a4

080105c8 <_strtol_l.isra.0>:
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ce:	d001      	beq.n	80105d4 <_strtol_l.isra.0+0xc>
 80105d0:	2b24      	cmp	r3, #36	; 0x24
 80105d2:	d906      	bls.n	80105e2 <_strtol_l.isra.0+0x1a>
 80105d4:	f7fd ff4e 	bl	800e474 <__errno>
 80105d8:	2316      	movs	r3, #22
 80105da:	6003      	str	r3, [r0, #0]
 80105dc:	2000      	movs	r0, #0
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	4f3a      	ldr	r7, [pc, #232]	; (80106cc <_strtol_l.isra.0+0x104>)
 80105e4:	468e      	mov	lr, r1
 80105e6:	4676      	mov	r6, lr
 80105e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80105ec:	5de5      	ldrb	r5, [r4, r7]
 80105ee:	f015 0508 	ands.w	r5, r5, #8
 80105f2:	d1f8      	bne.n	80105e6 <_strtol_l.isra.0+0x1e>
 80105f4:	2c2d      	cmp	r4, #45	; 0x2d
 80105f6:	d134      	bne.n	8010662 <_strtol_l.isra.0+0x9a>
 80105f8:	f89e 4000 	ldrb.w	r4, [lr]
 80105fc:	f04f 0801 	mov.w	r8, #1
 8010600:	f106 0e02 	add.w	lr, r6, #2
 8010604:	2b00      	cmp	r3, #0
 8010606:	d05c      	beq.n	80106c2 <_strtol_l.isra.0+0xfa>
 8010608:	2b10      	cmp	r3, #16
 801060a:	d10c      	bne.n	8010626 <_strtol_l.isra.0+0x5e>
 801060c:	2c30      	cmp	r4, #48	; 0x30
 801060e:	d10a      	bne.n	8010626 <_strtol_l.isra.0+0x5e>
 8010610:	f89e 4000 	ldrb.w	r4, [lr]
 8010614:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010618:	2c58      	cmp	r4, #88	; 0x58
 801061a:	d14d      	bne.n	80106b8 <_strtol_l.isra.0+0xf0>
 801061c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010620:	2310      	movs	r3, #16
 8010622:	f10e 0e02 	add.w	lr, lr, #2
 8010626:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801062a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801062e:	2600      	movs	r6, #0
 8010630:	fbbc f9f3 	udiv	r9, ip, r3
 8010634:	4635      	mov	r5, r6
 8010636:	fb03 ca19 	mls	sl, r3, r9, ip
 801063a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801063e:	2f09      	cmp	r7, #9
 8010640:	d818      	bhi.n	8010674 <_strtol_l.isra.0+0xac>
 8010642:	463c      	mov	r4, r7
 8010644:	42a3      	cmp	r3, r4
 8010646:	dd24      	ble.n	8010692 <_strtol_l.isra.0+0xca>
 8010648:	2e00      	cmp	r6, #0
 801064a:	db1f      	blt.n	801068c <_strtol_l.isra.0+0xc4>
 801064c:	45a9      	cmp	r9, r5
 801064e:	d31d      	bcc.n	801068c <_strtol_l.isra.0+0xc4>
 8010650:	d101      	bne.n	8010656 <_strtol_l.isra.0+0x8e>
 8010652:	45a2      	cmp	sl, r4
 8010654:	db1a      	blt.n	801068c <_strtol_l.isra.0+0xc4>
 8010656:	fb05 4503 	mla	r5, r5, r3, r4
 801065a:	2601      	movs	r6, #1
 801065c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010660:	e7eb      	b.n	801063a <_strtol_l.isra.0+0x72>
 8010662:	2c2b      	cmp	r4, #43	; 0x2b
 8010664:	bf08      	it	eq
 8010666:	f89e 4000 	ldrbeq.w	r4, [lr]
 801066a:	46a8      	mov	r8, r5
 801066c:	bf08      	it	eq
 801066e:	f106 0e02 	addeq.w	lr, r6, #2
 8010672:	e7c7      	b.n	8010604 <_strtol_l.isra.0+0x3c>
 8010674:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010678:	2f19      	cmp	r7, #25
 801067a:	d801      	bhi.n	8010680 <_strtol_l.isra.0+0xb8>
 801067c:	3c37      	subs	r4, #55	; 0x37
 801067e:	e7e1      	b.n	8010644 <_strtol_l.isra.0+0x7c>
 8010680:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010684:	2f19      	cmp	r7, #25
 8010686:	d804      	bhi.n	8010692 <_strtol_l.isra.0+0xca>
 8010688:	3c57      	subs	r4, #87	; 0x57
 801068a:	e7db      	b.n	8010644 <_strtol_l.isra.0+0x7c>
 801068c:	f04f 36ff 	mov.w	r6, #4294967295
 8010690:	e7e4      	b.n	801065c <_strtol_l.isra.0+0x94>
 8010692:	2e00      	cmp	r6, #0
 8010694:	da05      	bge.n	80106a2 <_strtol_l.isra.0+0xda>
 8010696:	2322      	movs	r3, #34	; 0x22
 8010698:	6003      	str	r3, [r0, #0]
 801069a:	4665      	mov	r5, ip
 801069c:	b942      	cbnz	r2, 80106b0 <_strtol_l.isra.0+0xe8>
 801069e:	4628      	mov	r0, r5
 80106a0:	e79d      	b.n	80105de <_strtol_l.isra.0+0x16>
 80106a2:	f1b8 0f00 	cmp.w	r8, #0
 80106a6:	d000      	beq.n	80106aa <_strtol_l.isra.0+0xe2>
 80106a8:	426d      	negs	r5, r5
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	d0f7      	beq.n	801069e <_strtol_l.isra.0+0xd6>
 80106ae:	b10e      	cbz	r6, 80106b4 <_strtol_l.isra.0+0xec>
 80106b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80106b4:	6011      	str	r1, [r2, #0]
 80106b6:	e7f2      	b.n	801069e <_strtol_l.isra.0+0xd6>
 80106b8:	2430      	movs	r4, #48	; 0x30
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1b3      	bne.n	8010626 <_strtol_l.isra.0+0x5e>
 80106be:	2308      	movs	r3, #8
 80106c0:	e7b1      	b.n	8010626 <_strtol_l.isra.0+0x5e>
 80106c2:	2c30      	cmp	r4, #48	; 0x30
 80106c4:	d0a4      	beq.n	8010610 <_strtol_l.isra.0+0x48>
 80106c6:	230a      	movs	r3, #10
 80106c8:	e7ad      	b.n	8010626 <_strtol_l.isra.0+0x5e>
 80106ca:	bf00      	nop
 80106cc:	080146d5 	.word	0x080146d5

080106d0 <_strtol_r>:
 80106d0:	f7ff bf7a 	b.w	80105c8 <_strtol_l.isra.0>

080106d4 <_strtoul_l.isra.0>:
 80106d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106d8:	4e3b      	ldr	r6, [pc, #236]	; (80107c8 <_strtoul_l.isra.0+0xf4>)
 80106da:	4686      	mov	lr, r0
 80106dc:	468c      	mov	ip, r1
 80106de:	4660      	mov	r0, ip
 80106e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80106e4:	5da5      	ldrb	r5, [r4, r6]
 80106e6:	f015 0508 	ands.w	r5, r5, #8
 80106ea:	d1f8      	bne.n	80106de <_strtoul_l.isra.0+0xa>
 80106ec:	2c2d      	cmp	r4, #45	; 0x2d
 80106ee:	d134      	bne.n	801075a <_strtoul_l.isra.0+0x86>
 80106f0:	f89c 4000 	ldrb.w	r4, [ip]
 80106f4:	f04f 0801 	mov.w	r8, #1
 80106f8:	f100 0c02 	add.w	ip, r0, #2
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d05e      	beq.n	80107be <_strtoul_l.isra.0+0xea>
 8010700:	2b10      	cmp	r3, #16
 8010702:	d10c      	bne.n	801071e <_strtoul_l.isra.0+0x4a>
 8010704:	2c30      	cmp	r4, #48	; 0x30
 8010706:	d10a      	bne.n	801071e <_strtoul_l.isra.0+0x4a>
 8010708:	f89c 0000 	ldrb.w	r0, [ip]
 801070c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010710:	2858      	cmp	r0, #88	; 0x58
 8010712:	d14f      	bne.n	80107b4 <_strtoul_l.isra.0+0xe0>
 8010714:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010718:	2310      	movs	r3, #16
 801071a:	f10c 0c02 	add.w	ip, ip, #2
 801071e:	f04f 37ff 	mov.w	r7, #4294967295
 8010722:	2500      	movs	r5, #0
 8010724:	fbb7 f7f3 	udiv	r7, r7, r3
 8010728:	fb03 f907 	mul.w	r9, r3, r7
 801072c:	ea6f 0909 	mvn.w	r9, r9
 8010730:	4628      	mov	r0, r5
 8010732:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8010736:	2e09      	cmp	r6, #9
 8010738:	d818      	bhi.n	801076c <_strtoul_l.isra.0+0x98>
 801073a:	4634      	mov	r4, r6
 801073c:	42a3      	cmp	r3, r4
 801073e:	dd24      	ble.n	801078a <_strtoul_l.isra.0+0xb6>
 8010740:	2d00      	cmp	r5, #0
 8010742:	db1f      	blt.n	8010784 <_strtoul_l.isra.0+0xb0>
 8010744:	4287      	cmp	r7, r0
 8010746:	d31d      	bcc.n	8010784 <_strtoul_l.isra.0+0xb0>
 8010748:	d101      	bne.n	801074e <_strtoul_l.isra.0+0x7a>
 801074a:	45a1      	cmp	r9, r4
 801074c:	db1a      	blt.n	8010784 <_strtoul_l.isra.0+0xb0>
 801074e:	fb00 4003 	mla	r0, r0, r3, r4
 8010752:	2501      	movs	r5, #1
 8010754:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010758:	e7eb      	b.n	8010732 <_strtoul_l.isra.0+0x5e>
 801075a:	2c2b      	cmp	r4, #43	; 0x2b
 801075c:	bf08      	it	eq
 801075e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010762:	46a8      	mov	r8, r5
 8010764:	bf08      	it	eq
 8010766:	f100 0c02 	addeq.w	ip, r0, #2
 801076a:	e7c7      	b.n	80106fc <_strtoul_l.isra.0+0x28>
 801076c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8010770:	2e19      	cmp	r6, #25
 8010772:	d801      	bhi.n	8010778 <_strtoul_l.isra.0+0xa4>
 8010774:	3c37      	subs	r4, #55	; 0x37
 8010776:	e7e1      	b.n	801073c <_strtoul_l.isra.0+0x68>
 8010778:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801077c:	2e19      	cmp	r6, #25
 801077e:	d804      	bhi.n	801078a <_strtoul_l.isra.0+0xb6>
 8010780:	3c57      	subs	r4, #87	; 0x57
 8010782:	e7db      	b.n	801073c <_strtoul_l.isra.0+0x68>
 8010784:	f04f 35ff 	mov.w	r5, #4294967295
 8010788:	e7e4      	b.n	8010754 <_strtoul_l.isra.0+0x80>
 801078a:	2d00      	cmp	r5, #0
 801078c:	da07      	bge.n	801079e <_strtoul_l.isra.0+0xca>
 801078e:	2322      	movs	r3, #34	; 0x22
 8010790:	f8ce 3000 	str.w	r3, [lr]
 8010794:	f04f 30ff 	mov.w	r0, #4294967295
 8010798:	b942      	cbnz	r2, 80107ac <_strtoul_l.isra.0+0xd8>
 801079a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801079e:	f1b8 0f00 	cmp.w	r8, #0
 80107a2:	d000      	beq.n	80107a6 <_strtoul_l.isra.0+0xd2>
 80107a4:	4240      	negs	r0, r0
 80107a6:	2a00      	cmp	r2, #0
 80107a8:	d0f7      	beq.n	801079a <_strtoul_l.isra.0+0xc6>
 80107aa:	b10d      	cbz	r5, 80107b0 <_strtoul_l.isra.0+0xdc>
 80107ac:	f10c 31ff 	add.w	r1, ip, #4294967295
 80107b0:	6011      	str	r1, [r2, #0]
 80107b2:	e7f2      	b.n	801079a <_strtoul_l.isra.0+0xc6>
 80107b4:	2430      	movs	r4, #48	; 0x30
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1b1      	bne.n	801071e <_strtoul_l.isra.0+0x4a>
 80107ba:	2308      	movs	r3, #8
 80107bc:	e7af      	b.n	801071e <_strtoul_l.isra.0+0x4a>
 80107be:	2c30      	cmp	r4, #48	; 0x30
 80107c0:	d0a2      	beq.n	8010708 <_strtoul_l.isra.0+0x34>
 80107c2:	230a      	movs	r3, #10
 80107c4:	e7ab      	b.n	801071e <_strtoul_l.isra.0+0x4a>
 80107c6:	bf00      	nop
 80107c8:	080146d5 	.word	0x080146d5

080107cc <_strtoul_r>:
 80107cc:	f7ff bf82 	b.w	80106d4 <_strtoul_l.isra.0>

080107d0 <__swbuf_r>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	460e      	mov	r6, r1
 80107d4:	4614      	mov	r4, r2
 80107d6:	4605      	mov	r5, r0
 80107d8:	b118      	cbz	r0, 80107e2 <__swbuf_r+0x12>
 80107da:	6983      	ldr	r3, [r0, #24]
 80107dc:	b90b      	cbnz	r3, 80107e2 <__swbuf_r+0x12>
 80107de:	f7fd fea7 	bl	800e530 <__sinit>
 80107e2:	4b21      	ldr	r3, [pc, #132]	; (8010868 <__swbuf_r+0x98>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d12b      	bne.n	8010840 <__swbuf_r+0x70>
 80107e8:	686c      	ldr	r4, [r5, #4]
 80107ea:	69a3      	ldr	r3, [r4, #24]
 80107ec:	60a3      	str	r3, [r4, #8]
 80107ee:	89a3      	ldrh	r3, [r4, #12]
 80107f0:	071a      	lsls	r2, r3, #28
 80107f2:	d52f      	bpl.n	8010854 <__swbuf_r+0x84>
 80107f4:	6923      	ldr	r3, [r4, #16]
 80107f6:	b36b      	cbz	r3, 8010854 <__swbuf_r+0x84>
 80107f8:	6923      	ldr	r3, [r4, #16]
 80107fa:	6820      	ldr	r0, [r4, #0]
 80107fc:	1ac0      	subs	r0, r0, r3
 80107fe:	6963      	ldr	r3, [r4, #20]
 8010800:	b2f6      	uxtb	r6, r6
 8010802:	4283      	cmp	r3, r0
 8010804:	4637      	mov	r7, r6
 8010806:	dc04      	bgt.n	8010812 <__swbuf_r+0x42>
 8010808:	4621      	mov	r1, r4
 801080a:	4628      	mov	r0, r5
 801080c:	f000 ffde 	bl	80117cc <_fflush_r>
 8010810:	bb30      	cbnz	r0, 8010860 <__swbuf_r+0x90>
 8010812:	68a3      	ldr	r3, [r4, #8]
 8010814:	3b01      	subs	r3, #1
 8010816:	60a3      	str	r3, [r4, #8]
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	6022      	str	r2, [r4, #0]
 801081e:	701e      	strb	r6, [r3, #0]
 8010820:	6963      	ldr	r3, [r4, #20]
 8010822:	3001      	adds	r0, #1
 8010824:	4283      	cmp	r3, r0
 8010826:	d004      	beq.n	8010832 <__swbuf_r+0x62>
 8010828:	89a3      	ldrh	r3, [r4, #12]
 801082a:	07db      	lsls	r3, r3, #31
 801082c:	d506      	bpl.n	801083c <__swbuf_r+0x6c>
 801082e:	2e0a      	cmp	r6, #10
 8010830:	d104      	bne.n	801083c <__swbuf_r+0x6c>
 8010832:	4621      	mov	r1, r4
 8010834:	4628      	mov	r0, r5
 8010836:	f000 ffc9 	bl	80117cc <_fflush_r>
 801083a:	b988      	cbnz	r0, 8010860 <__swbuf_r+0x90>
 801083c:	4638      	mov	r0, r7
 801083e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010840:	4b0a      	ldr	r3, [pc, #40]	; (801086c <__swbuf_r+0x9c>)
 8010842:	429c      	cmp	r4, r3
 8010844:	d101      	bne.n	801084a <__swbuf_r+0x7a>
 8010846:	68ac      	ldr	r4, [r5, #8]
 8010848:	e7cf      	b.n	80107ea <__swbuf_r+0x1a>
 801084a:	4b09      	ldr	r3, [pc, #36]	; (8010870 <__swbuf_r+0xa0>)
 801084c:	429c      	cmp	r4, r3
 801084e:	bf08      	it	eq
 8010850:	68ec      	ldreq	r4, [r5, #12]
 8010852:	e7ca      	b.n	80107ea <__swbuf_r+0x1a>
 8010854:	4621      	mov	r1, r4
 8010856:	4628      	mov	r0, r5
 8010858:	f000 f81e 	bl	8010898 <__swsetup_r>
 801085c:	2800      	cmp	r0, #0
 801085e:	d0cb      	beq.n	80107f8 <__swbuf_r+0x28>
 8010860:	f04f 37ff 	mov.w	r7, #4294967295
 8010864:	e7ea      	b.n	801083c <__swbuf_r+0x6c>
 8010866:	bf00      	nop
 8010868:	080145c8 	.word	0x080145c8
 801086c:	080145e8 	.word	0x080145e8
 8010870:	080145a8 	.word	0x080145a8

08010874 <_write_r>:
 8010874:	b538      	push	{r3, r4, r5, lr}
 8010876:	4d07      	ldr	r5, [pc, #28]	; (8010894 <_write_r+0x20>)
 8010878:	4604      	mov	r4, r0
 801087a:	4608      	mov	r0, r1
 801087c:	4611      	mov	r1, r2
 801087e:	2200      	movs	r2, #0
 8010880:	602a      	str	r2, [r5, #0]
 8010882:	461a      	mov	r2, r3
 8010884:	f7f2 fbaf 	bl	8002fe6 <_write>
 8010888:	1c43      	adds	r3, r0, #1
 801088a:	d102      	bne.n	8010892 <_write_r+0x1e>
 801088c:	682b      	ldr	r3, [r5, #0]
 801088e:	b103      	cbz	r3, 8010892 <_write_r+0x1e>
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	bd38      	pop	{r3, r4, r5, pc}
 8010894:	200056a8 	.word	0x200056a8

08010898 <__swsetup_r>:
 8010898:	4b32      	ldr	r3, [pc, #200]	; (8010964 <__swsetup_r+0xcc>)
 801089a:	b570      	push	{r4, r5, r6, lr}
 801089c:	681d      	ldr	r5, [r3, #0]
 801089e:	4606      	mov	r6, r0
 80108a0:	460c      	mov	r4, r1
 80108a2:	b125      	cbz	r5, 80108ae <__swsetup_r+0x16>
 80108a4:	69ab      	ldr	r3, [r5, #24]
 80108a6:	b913      	cbnz	r3, 80108ae <__swsetup_r+0x16>
 80108a8:	4628      	mov	r0, r5
 80108aa:	f7fd fe41 	bl	800e530 <__sinit>
 80108ae:	4b2e      	ldr	r3, [pc, #184]	; (8010968 <__swsetup_r+0xd0>)
 80108b0:	429c      	cmp	r4, r3
 80108b2:	d10f      	bne.n	80108d4 <__swsetup_r+0x3c>
 80108b4:	686c      	ldr	r4, [r5, #4]
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108bc:	0719      	lsls	r1, r3, #28
 80108be:	d42c      	bmi.n	801091a <__swsetup_r+0x82>
 80108c0:	06dd      	lsls	r5, r3, #27
 80108c2:	d411      	bmi.n	80108e8 <__swsetup_r+0x50>
 80108c4:	2309      	movs	r3, #9
 80108c6:	6033      	str	r3, [r6, #0]
 80108c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108cc:	81a3      	strh	r3, [r4, #12]
 80108ce:	f04f 30ff 	mov.w	r0, #4294967295
 80108d2:	e03e      	b.n	8010952 <__swsetup_r+0xba>
 80108d4:	4b25      	ldr	r3, [pc, #148]	; (801096c <__swsetup_r+0xd4>)
 80108d6:	429c      	cmp	r4, r3
 80108d8:	d101      	bne.n	80108de <__swsetup_r+0x46>
 80108da:	68ac      	ldr	r4, [r5, #8]
 80108dc:	e7eb      	b.n	80108b6 <__swsetup_r+0x1e>
 80108de:	4b24      	ldr	r3, [pc, #144]	; (8010970 <__swsetup_r+0xd8>)
 80108e0:	429c      	cmp	r4, r3
 80108e2:	bf08      	it	eq
 80108e4:	68ec      	ldreq	r4, [r5, #12]
 80108e6:	e7e6      	b.n	80108b6 <__swsetup_r+0x1e>
 80108e8:	0758      	lsls	r0, r3, #29
 80108ea:	d512      	bpl.n	8010912 <__swsetup_r+0x7a>
 80108ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108ee:	b141      	cbz	r1, 8010902 <__swsetup_r+0x6a>
 80108f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108f4:	4299      	cmp	r1, r3
 80108f6:	d002      	beq.n	80108fe <__swsetup_r+0x66>
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7fd ff1f 	bl	800e73c <_free_r>
 80108fe:	2300      	movs	r3, #0
 8010900:	6363      	str	r3, [r4, #52]	; 0x34
 8010902:	89a3      	ldrh	r3, [r4, #12]
 8010904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010908:	81a3      	strh	r3, [r4, #12]
 801090a:	2300      	movs	r3, #0
 801090c:	6063      	str	r3, [r4, #4]
 801090e:	6923      	ldr	r3, [r4, #16]
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	f043 0308 	orr.w	r3, r3, #8
 8010918:	81a3      	strh	r3, [r4, #12]
 801091a:	6923      	ldr	r3, [r4, #16]
 801091c:	b94b      	cbnz	r3, 8010932 <__swsetup_r+0x9a>
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010928:	d003      	beq.n	8010932 <__swsetup_r+0x9a>
 801092a:	4621      	mov	r1, r4
 801092c:	4630      	mov	r0, r6
 801092e:	f001 fb45 	bl	8011fbc <__smakebuf_r>
 8010932:	89a0      	ldrh	r0, [r4, #12]
 8010934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010938:	f010 0301 	ands.w	r3, r0, #1
 801093c:	d00a      	beq.n	8010954 <__swsetup_r+0xbc>
 801093e:	2300      	movs	r3, #0
 8010940:	60a3      	str	r3, [r4, #8]
 8010942:	6963      	ldr	r3, [r4, #20]
 8010944:	425b      	negs	r3, r3
 8010946:	61a3      	str	r3, [r4, #24]
 8010948:	6923      	ldr	r3, [r4, #16]
 801094a:	b943      	cbnz	r3, 801095e <__swsetup_r+0xc6>
 801094c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010950:	d1ba      	bne.n	80108c8 <__swsetup_r+0x30>
 8010952:	bd70      	pop	{r4, r5, r6, pc}
 8010954:	0781      	lsls	r1, r0, #30
 8010956:	bf58      	it	pl
 8010958:	6963      	ldrpl	r3, [r4, #20]
 801095a:	60a3      	str	r3, [r4, #8]
 801095c:	e7f4      	b.n	8010948 <__swsetup_r+0xb0>
 801095e:	2000      	movs	r0, #0
 8010960:	e7f7      	b.n	8010952 <__swsetup_r+0xba>
 8010962:	bf00      	nop
 8010964:	2000003c 	.word	0x2000003c
 8010968:	080145c8 	.word	0x080145c8
 801096c:	080145e8 	.word	0x080145e8
 8010970:	080145a8 	.word	0x080145a8

08010974 <__assert_func>:
 8010974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010976:	4614      	mov	r4, r2
 8010978:	461a      	mov	r2, r3
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <__assert_func+0x2c>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4605      	mov	r5, r0
 8010980:	68d8      	ldr	r0, [r3, #12]
 8010982:	b14c      	cbz	r4, 8010998 <__assert_func+0x24>
 8010984:	4b07      	ldr	r3, [pc, #28]	; (80109a4 <__assert_func+0x30>)
 8010986:	9100      	str	r1, [sp, #0]
 8010988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801098c:	4906      	ldr	r1, [pc, #24]	; (80109a8 <__assert_func+0x34>)
 801098e:	462b      	mov	r3, r5
 8010990:	f000 ff58 	bl	8011844 <fiprintf>
 8010994:	f7fd fd67 	bl	800e466 <abort>
 8010998:	4b04      	ldr	r3, [pc, #16]	; (80109ac <__assert_func+0x38>)
 801099a:	461c      	mov	r4, r3
 801099c:	e7f3      	b.n	8010986 <__assert_func+0x12>
 801099e:	bf00      	nop
 80109a0:	2000003c 	.word	0x2000003c
 80109a4:	08014698 	.word	0x08014698
 80109a8:	080146a5 	.word	0x080146a5
 80109ac:	080146d3 	.word	0x080146d3

080109b0 <_close_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	4d06      	ldr	r5, [pc, #24]	; (80109cc <_close_r+0x1c>)
 80109b4:	2300      	movs	r3, #0
 80109b6:	4604      	mov	r4, r0
 80109b8:	4608      	mov	r0, r1
 80109ba:	602b      	str	r3, [r5, #0]
 80109bc:	f7f2 fb2f 	bl	800301e <_close>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d102      	bne.n	80109ca <_close_r+0x1a>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	b103      	cbz	r3, 80109ca <_close_r+0x1a>
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	200056a8 	.word	0x200056a8

080109d0 <quorem>:
 80109d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	6903      	ldr	r3, [r0, #16]
 80109d6:	690c      	ldr	r4, [r1, #16]
 80109d8:	42a3      	cmp	r3, r4
 80109da:	4607      	mov	r7, r0
 80109dc:	f2c0 8081 	blt.w	8010ae2 <quorem+0x112>
 80109e0:	3c01      	subs	r4, #1
 80109e2:	f101 0814 	add.w	r8, r1, #20
 80109e6:	f100 0514 	add.w	r5, r0, #20
 80109ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109f8:	3301      	adds	r3, #1
 80109fa:	429a      	cmp	r2, r3
 80109fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a08:	d331      	bcc.n	8010a6e <quorem+0x9e>
 8010a0a:	f04f 0e00 	mov.w	lr, #0
 8010a0e:	4640      	mov	r0, r8
 8010a10:	46ac      	mov	ip, r5
 8010a12:	46f2      	mov	sl, lr
 8010a14:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a18:	b293      	uxth	r3, r2
 8010a1a:	fb06 e303 	mla	r3, r6, r3, lr
 8010a1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	ebaa 0303 	sub.w	r3, sl, r3
 8010a28:	0c12      	lsrs	r2, r2, #16
 8010a2a:	f8dc a000 	ldr.w	sl, [ip]
 8010a2e:	fb06 e202 	mla	r2, r6, r2, lr
 8010a32:	fa13 f38a 	uxtah	r3, r3, sl
 8010a36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a3a:	fa1f fa82 	uxth.w	sl, r2
 8010a3e:	f8dc 2000 	ldr.w	r2, [ip]
 8010a42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010a46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a50:	4581      	cmp	r9, r0
 8010a52:	f84c 3b04 	str.w	r3, [ip], #4
 8010a56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a5a:	d2db      	bcs.n	8010a14 <quorem+0x44>
 8010a5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a60:	b92b      	cbnz	r3, 8010a6e <quorem+0x9e>
 8010a62:	9b01      	ldr	r3, [sp, #4]
 8010a64:	3b04      	subs	r3, #4
 8010a66:	429d      	cmp	r5, r3
 8010a68:	461a      	mov	r2, r3
 8010a6a:	d32e      	bcc.n	8010aca <quorem+0xfa>
 8010a6c:	613c      	str	r4, [r7, #16]
 8010a6e:	4638      	mov	r0, r7
 8010a70:	f001 fdca 	bl	8012608 <__mcmp>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	db24      	blt.n	8010ac2 <quorem+0xf2>
 8010a78:	3601      	adds	r6, #1
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f04f 0c00 	mov.w	ip, #0
 8010a80:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a84:	f8d0 e000 	ldr.w	lr, [r0]
 8010a88:	b293      	uxth	r3, r2
 8010a8a:	ebac 0303 	sub.w	r3, ip, r3
 8010a8e:	0c12      	lsrs	r2, r2, #16
 8010a90:	fa13 f38e 	uxtah	r3, r3, lr
 8010a94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010aa2:	45c1      	cmp	r9, r8
 8010aa4:	f840 3b04 	str.w	r3, [r0], #4
 8010aa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010aac:	d2e8      	bcs.n	8010a80 <quorem+0xb0>
 8010aae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ab6:	b922      	cbnz	r2, 8010ac2 <quorem+0xf2>
 8010ab8:	3b04      	subs	r3, #4
 8010aba:	429d      	cmp	r5, r3
 8010abc:	461a      	mov	r2, r3
 8010abe:	d30a      	bcc.n	8010ad6 <quorem+0x106>
 8010ac0:	613c      	str	r4, [r7, #16]
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	b003      	add	sp, #12
 8010ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aca:	6812      	ldr	r2, [r2, #0]
 8010acc:	3b04      	subs	r3, #4
 8010ace:	2a00      	cmp	r2, #0
 8010ad0:	d1cc      	bne.n	8010a6c <quorem+0x9c>
 8010ad2:	3c01      	subs	r4, #1
 8010ad4:	e7c7      	b.n	8010a66 <quorem+0x96>
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	3b04      	subs	r3, #4
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d1f0      	bne.n	8010ac0 <quorem+0xf0>
 8010ade:	3c01      	subs	r4, #1
 8010ae0:	e7eb      	b.n	8010aba <quorem+0xea>
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	e7ee      	b.n	8010ac4 <quorem+0xf4>
	...

08010ae8 <_dtoa_r>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	ed2d 8b02 	vpush	{d8}
 8010af0:	ec57 6b10 	vmov	r6, r7, d0
 8010af4:	b095      	sub	sp, #84	; 0x54
 8010af6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010af8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010afc:	9105      	str	r1, [sp, #20]
 8010afe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010b02:	4604      	mov	r4, r0
 8010b04:	9209      	str	r2, [sp, #36]	; 0x24
 8010b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b08:	b975      	cbnz	r5, 8010b28 <_dtoa_r+0x40>
 8010b0a:	2010      	movs	r0, #16
 8010b0c:	f7fd fdd6 	bl	800e6bc <malloc>
 8010b10:	4602      	mov	r2, r0
 8010b12:	6260      	str	r0, [r4, #36]	; 0x24
 8010b14:	b920      	cbnz	r0, 8010b20 <_dtoa_r+0x38>
 8010b16:	4bb2      	ldr	r3, [pc, #712]	; (8010de0 <_dtoa_r+0x2f8>)
 8010b18:	21ea      	movs	r1, #234	; 0xea
 8010b1a:	48b2      	ldr	r0, [pc, #712]	; (8010de4 <_dtoa_r+0x2fc>)
 8010b1c:	f7ff ff2a 	bl	8010974 <__assert_func>
 8010b20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b24:	6005      	str	r5, [r0, #0]
 8010b26:	60c5      	str	r5, [r0, #12]
 8010b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b2a:	6819      	ldr	r1, [r3, #0]
 8010b2c:	b151      	cbz	r1, 8010b44 <_dtoa_r+0x5c>
 8010b2e:	685a      	ldr	r2, [r3, #4]
 8010b30:	604a      	str	r2, [r1, #4]
 8010b32:	2301      	movs	r3, #1
 8010b34:	4093      	lsls	r3, r2
 8010b36:	608b      	str	r3, [r1, #8]
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f001 fadd 	bl	80120f8 <_Bfree>
 8010b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b40:	2200      	movs	r2, #0
 8010b42:	601a      	str	r2, [r3, #0]
 8010b44:	1e3b      	subs	r3, r7, #0
 8010b46:	bfb9      	ittee	lt
 8010b48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010b4c:	9303      	strlt	r3, [sp, #12]
 8010b4e:	2300      	movge	r3, #0
 8010b50:	f8c8 3000 	strge.w	r3, [r8]
 8010b54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010b58:	4ba3      	ldr	r3, [pc, #652]	; (8010de8 <_dtoa_r+0x300>)
 8010b5a:	bfbc      	itt	lt
 8010b5c:	2201      	movlt	r2, #1
 8010b5e:	f8c8 2000 	strlt.w	r2, [r8]
 8010b62:	ea33 0309 	bics.w	r3, r3, r9
 8010b66:	d11b      	bne.n	8010ba0 <_dtoa_r+0xb8>
 8010b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b6e:	6013      	str	r3, [r2, #0]
 8010b70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b74:	4333      	orrs	r3, r6
 8010b76:	f000 857a 	beq.w	801166e <_dtoa_r+0xb86>
 8010b7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b7c:	b963      	cbnz	r3, 8010b98 <_dtoa_r+0xb0>
 8010b7e:	4b9b      	ldr	r3, [pc, #620]	; (8010dec <_dtoa_r+0x304>)
 8010b80:	e024      	b.n	8010bcc <_dtoa_r+0xe4>
 8010b82:	4b9b      	ldr	r3, [pc, #620]	; (8010df0 <_dtoa_r+0x308>)
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	3308      	adds	r3, #8
 8010b88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	9800      	ldr	r0, [sp, #0]
 8010b8e:	b015      	add	sp, #84	; 0x54
 8010b90:	ecbd 8b02 	vpop	{d8}
 8010b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b98:	4b94      	ldr	r3, [pc, #592]	; (8010dec <_dtoa_r+0x304>)
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	3303      	adds	r3, #3
 8010b9e:	e7f3      	b.n	8010b88 <_dtoa_r+0xa0>
 8010ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	ec51 0b17 	vmov	r0, r1, d7
 8010baa:	2300      	movs	r3, #0
 8010bac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010bb0:	f7ef ff9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bb4:	4680      	mov	r8, r0
 8010bb6:	b158      	cbz	r0, 8010bd0 <_dtoa_r+0xe8>
 8010bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010bba:	2301      	movs	r3, #1
 8010bbc:	6013      	str	r3, [r2, #0]
 8010bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f000 8551 	beq.w	8011668 <_dtoa_r+0xb80>
 8010bc6:	488b      	ldr	r0, [pc, #556]	; (8010df4 <_dtoa_r+0x30c>)
 8010bc8:	6018      	str	r0, [r3, #0]
 8010bca:	1e43      	subs	r3, r0, #1
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	e7dd      	b.n	8010b8c <_dtoa_r+0xa4>
 8010bd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010bd4:	aa12      	add	r2, sp, #72	; 0x48
 8010bd6:	a913      	add	r1, sp, #76	; 0x4c
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f001 fe35 	bl	8012848 <__d2b>
 8010bde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010be2:	4683      	mov	fp, r0
 8010be4:	2d00      	cmp	r5, #0
 8010be6:	d07c      	beq.n	8010ce2 <_dtoa_r+0x1fa>
 8010be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bf2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010bf6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010bfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010bfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c02:	4b7d      	ldr	r3, [pc, #500]	; (8010df8 <_dtoa_r+0x310>)
 8010c04:	2200      	movs	r2, #0
 8010c06:	4630      	mov	r0, r6
 8010c08:	4639      	mov	r1, r7
 8010c0a:	f7ef fb4d 	bl	80002a8 <__aeabi_dsub>
 8010c0e:	a36e      	add	r3, pc, #440	; (adr r3, 8010dc8 <_dtoa_r+0x2e0>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f7ef fd00 	bl	8000618 <__aeabi_dmul>
 8010c18:	a36d      	add	r3, pc, #436	; (adr r3, 8010dd0 <_dtoa_r+0x2e8>)
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	f7ef fb45 	bl	80002ac <__adddf3>
 8010c22:	4606      	mov	r6, r0
 8010c24:	4628      	mov	r0, r5
 8010c26:	460f      	mov	r7, r1
 8010c28:	f7ef fc8c 	bl	8000544 <__aeabi_i2d>
 8010c2c:	a36a      	add	r3, pc, #424	; (adr r3, 8010dd8 <_dtoa_r+0x2f0>)
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	f7ef fcf1 	bl	8000618 <__aeabi_dmul>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	4639      	mov	r1, r7
 8010c3e:	f7ef fb35 	bl	80002ac <__adddf3>
 8010c42:	4606      	mov	r6, r0
 8010c44:	460f      	mov	r7, r1
 8010c46:	f7ef ff97 	bl	8000b78 <__aeabi_d2iz>
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	4682      	mov	sl, r0
 8010c4e:	2300      	movs	r3, #0
 8010c50:	4630      	mov	r0, r6
 8010c52:	4639      	mov	r1, r7
 8010c54:	f7ef ff52 	bl	8000afc <__aeabi_dcmplt>
 8010c58:	b148      	cbz	r0, 8010c6e <_dtoa_r+0x186>
 8010c5a:	4650      	mov	r0, sl
 8010c5c:	f7ef fc72 	bl	8000544 <__aeabi_i2d>
 8010c60:	4632      	mov	r2, r6
 8010c62:	463b      	mov	r3, r7
 8010c64:	f7ef ff40 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c68:	b908      	cbnz	r0, 8010c6e <_dtoa_r+0x186>
 8010c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c6e:	f1ba 0f16 	cmp.w	sl, #22
 8010c72:	d854      	bhi.n	8010d1e <_dtoa_r+0x236>
 8010c74:	4b61      	ldr	r3, [pc, #388]	; (8010dfc <_dtoa_r+0x314>)
 8010c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c82:	f7ef ff3b 	bl	8000afc <__aeabi_dcmplt>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d04b      	beq.n	8010d22 <_dtoa_r+0x23a>
 8010c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c8e:	2300      	movs	r3, #0
 8010c90:	930e      	str	r3, [sp, #56]	; 0x38
 8010c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c94:	1b5d      	subs	r5, r3, r5
 8010c96:	1e6b      	subs	r3, r5, #1
 8010c98:	9304      	str	r3, [sp, #16]
 8010c9a:	bf43      	ittte	mi
 8010c9c:	2300      	movmi	r3, #0
 8010c9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010ca2:	9304      	strmi	r3, [sp, #16]
 8010ca4:	f04f 0800 	movpl.w	r8, #0
 8010ca8:	f1ba 0f00 	cmp.w	sl, #0
 8010cac:	db3b      	blt.n	8010d26 <_dtoa_r+0x23e>
 8010cae:	9b04      	ldr	r3, [sp, #16]
 8010cb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010cb4:	4453      	add	r3, sl
 8010cb6:	9304      	str	r3, [sp, #16]
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9306      	str	r3, [sp, #24]
 8010cbc:	9b05      	ldr	r3, [sp, #20]
 8010cbe:	2b09      	cmp	r3, #9
 8010cc0:	d869      	bhi.n	8010d96 <_dtoa_r+0x2ae>
 8010cc2:	2b05      	cmp	r3, #5
 8010cc4:	bfc4      	itt	gt
 8010cc6:	3b04      	subgt	r3, #4
 8010cc8:	9305      	strgt	r3, [sp, #20]
 8010cca:	9b05      	ldr	r3, [sp, #20]
 8010ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8010cd0:	bfcc      	ite	gt
 8010cd2:	2500      	movgt	r5, #0
 8010cd4:	2501      	movle	r5, #1
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d869      	bhi.n	8010dae <_dtoa_r+0x2c6>
 8010cda:	e8df f003 	tbb	[pc, r3]
 8010cde:	4e2c      	.short	0x4e2c
 8010ce0:	5a4c      	.short	0x5a4c
 8010ce2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010ce6:	441d      	add	r5, r3
 8010ce8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010cec:	2b20      	cmp	r3, #32
 8010cee:	bfc1      	itttt	gt
 8010cf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010cf4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010cf8:	fa09 f303 	lslgt.w	r3, r9, r3
 8010cfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d00:	bfda      	itte	le
 8010d02:	f1c3 0320 	rsble	r3, r3, #32
 8010d06:	fa06 f003 	lslle.w	r0, r6, r3
 8010d0a:	4318      	orrgt	r0, r3
 8010d0c:	f7ef fc0a 	bl	8000524 <__aeabi_ui2d>
 8010d10:	2301      	movs	r3, #1
 8010d12:	4606      	mov	r6, r0
 8010d14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d18:	3d01      	subs	r5, #1
 8010d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8010d1c:	e771      	b.n	8010c02 <_dtoa_r+0x11a>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e7b6      	b.n	8010c90 <_dtoa_r+0x1a8>
 8010d22:	900e      	str	r0, [sp, #56]	; 0x38
 8010d24:	e7b5      	b.n	8010c92 <_dtoa_r+0x1aa>
 8010d26:	f1ca 0300 	rsb	r3, sl, #0
 8010d2a:	9306      	str	r3, [sp, #24]
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	eba8 080a 	sub.w	r8, r8, sl
 8010d32:	930d      	str	r3, [sp, #52]	; 0x34
 8010d34:	e7c2      	b.n	8010cbc <_dtoa_r+0x1d4>
 8010d36:	2300      	movs	r3, #0
 8010d38:	9308      	str	r3, [sp, #32]
 8010d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dc39      	bgt.n	8010db4 <_dtoa_r+0x2cc>
 8010d40:	f04f 0901 	mov.w	r9, #1
 8010d44:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d48:	464b      	mov	r3, r9
 8010d4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d50:	2200      	movs	r2, #0
 8010d52:	6042      	str	r2, [r0, #4]
 8010d54:	2204      	movs	r2, #4
 8010d56:	f102 0614 	add.w	r6, r2, #20
 8010d5a:	429e      	cmp	r6, r3
 8010d5c:	6841      	ldr	r1, [r0, #4]
 8010d5e:	d92f      	bls.n	8010dc0 <_dtoa_r+0x2d8>
 8010d60:	4620      	mov	r0, r4
 8010d62:	f001 f989 	bl	8012078 <_Balloc>
 8010d66:	9000      	str	r0, [sp, #0]
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d14b      	bne.n	8010e04 <_dtoa_r+0x31c>
 8010d6c:	4b24      	ldr	r3, [pc, #144]	; (8010e00 <_dtoa_r+0x318>)
 8010d6e:	4602      	mov	r2, r0
 8010d70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d74:	e6d1      	b.n	8010b1a <_dtoa_r+0x32>
 8010d76:	2301      	movs	r3, #1
 8010d78:	e7de      	b.n	8010d38 <_dtoa_r+0x250>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9308      	str	r3, [sp, #32]
 8010d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d80:	eb0a 0903 	add.w	r9, sl, r3
 8010d84:	f109 0301 	add.w	r3, r9, #1
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	9301      	str	r3, [sp, #4]
 8010d8c:	bfb8      	it	lt
 8010d8e:	2301      	movlt	r3, #1
 8010d90:	e7dd      	b.n	8010d4e <_dtoa_r+0x266>
 8010d92:	2301      	movs	r3, #1
 8010d94:	e7f2      	b.n	8010d7c <_dtoa_r+0x294>
 8010d96:	2501      	movs	r5, #1
 8010d98:	2300      	movs	r3, #0
 8010d9a:	9305      	str	r3, [sp, #20]
 8010d9c:	9508      	str	r5, [sp, #32]
 8010d9e:	f04f 39ff 	mov.w	r9, #4294967295
 8010da2:	2200      	movs	r2, #0
 8010da4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010da8:	2312      	movs	r3, #18
 8010daa:	9209      	str	r2, [sp, #36]	; 0x24
 8010dac:	e7cf      	b.n	8010d4e <_dtoa_r+0x266>
 8010dae:	2301      	movs	r3, #1
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	e7f4      	b.n	8010d9e <_dtoa_r+0x2b6>
 8010db4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010db8:	f8cd 9004 	str.w	r9, [sp, #4]
 8010dbc:	464b      	mov	r3, r9
 8010dbe:	e7c6      	b.n	8010d4e <_dtoa_r+0x266>
 8010dc0:	3101      	adds	r1, #1
 8010dc2:	6041      	str	r1, [r0, #4]
 8010dc4:	0052      	lsls	r2, r2, #1
 8010dc6:	e7c6      	b.n	8010d56 <_dtoa_r+0x26e>
 8010dc8:	636f4361 	.word	0x636f4361
 8010dcc:	3fd287a7 	.word	0x3fd287a7
 8010dd0:	8b60c8b3 	.word	0x8b60c8b3
 8010dd4:	3fc68a28 	.word	0x3fc68a28
 8010dd8:	509f79fb 	.word	0x509f79fb
 8010ddc:	3fd34413 	.word	0x3fd34413
 8010de0:	080147e2 	.word	0x080147e2
 8010de4:	080147f9 	.word	0x080147f9
 8010de8:	7ff00000 	.word	0x7ff00000
 8010dec:	080147de 	.word	0x080147de
 8010df0:	080147d5 	.word	0x080147d5
 8010df4:	08014a5a 	.word	0x08014a5a
 8010df8:	3ff80000 	.word	0x3ff80000
 8010dfc:	08014970 	.word	0x08014970
 8010e00:	08014858 	.word	0x08014858
 8010e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e06:	9a00      	ldr	r2, [sp, #0]
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	9b01      	ldr	r3, [sp, #4]
 8010e0c:	2b0e      	cmp	r3, #14
 8010e0e:	f200 80ad 	bhi.w	8010f6c <_dtoa_r+0x484>
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	f000 80aa 	beq.w	8010f6c <_dtoa_r+0x484>
 8010e18:	f1ba 0f00 	cmp.w	sl, #0
 8010e1c:	dd36      	ble.n	8010e8c <_dtoa_r+0x3a4>
 8010e1e:	4ac3      	ldr	r2, [pc, #780]	; (801112c <_dtoa_r+0x644>)
 8010e20:	f00a 030f 	and.w	r3, sl, #15
 8010e24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e28:	ed93 7b00 	vldr	d7, [r3]
 8010e2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010e30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010e34:	eeb0 8a47 	vmov.f32	s16, s14
 8010e38:	eef0 8a67 	vmov.f32	s17, s15
 8010e3c:	d016      	beq.n	8010e6c <_dtoa_r+0x384>
 8010e3e:	4bbc      	ldr	r3, [pc, #752]	; (8011130 <_dtoa_r+0x648>)
 8010e40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e48:	f7ef fd10 	bl	800086c <__aeabi_ddiv>
 8010e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e50:	f007 070f 	and.w	r7, r7, #15
 8010e54:	2503      	movs	r5, #3
 8010e56:	4eb6      	ldr	r6, [pc, #728]	; (8011130 <_dtoa_r+0x648>)
 8010e58:	b957      	cbnz	r7, 8010e70 <_dtoa_r+0x388>
 8010e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e5e:	ec53 2b18 	vmov	r2, r3, d8
 8010e62:	f7ef fd03 	bl	800086c <__aeabi_ddiv>
 8010e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e6a:	e029      	b.n	8010ec0 <_dtoa_r+0x3d8>
 8010e6c:	2502      	movs	r5, #2
 8010e6e:	e7f2      	b.n	8010e56 <_dtoa_r+0x36e>
 8010e70:	07f9      	lsls	r1, r7, #31
 8010e72:	d508      	bpl.n	8010e86 <_dtoa_r+0x39e>
 8010e74:	ec51 0b18 	vmov	r0, r1, d8
 8010e78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e7c:	f7ef fbcc 	bl	8000618 <__aeabi_dmul>
 8010e80:	ec41 0b18 	vmov	d8, r0, r1
 8010e84:	3501      	adds	r5, #1
 8010e86:	107f      	asrs	r7, r7, #1
 8010e88:	3608      	adds	r6, #8
 8010e8a:	e7e5      	b.n	8010e58 <_dtoa_r+0x370>
 8010e8c:	f000 80a6 	beq.w	8010fdc <_dtoa_r+0x4f4>
 8010e90:	f1ca 0600 	rsb	r6, sl, #0
 8010e94:	4ba5      	ldr	r3, [pc, #660]	; (801112c <_dtoa_r+0x644>)
 8010e96:	4fa6      	ldr	r7, [pc, #664]	; (8011130 <_dtoa_r+0x648>)
 8010e98:	f006 020f 	and.w	r2, r6, #15
 8010e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ea8:	f7ef fbb6 	bl	8000618 <__aeabi_dmul>
 8010eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eb0:	1136      	asrs	r6, r6, #4
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	2502      	movs	r5, #2
 8010eb6:	2e00      	cmp	r6, #0
 8010eb8:	f040 8085 	bne.w	8010fc6 <_dtoa_r+0x4de>
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d1d2      	bne.n	8010e66 <_dtoa_r+0x37e>
 8010ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f000 808c 	beq.w	8010fe0 <_dtoa_r+0x4f8>
 8010ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ecc:	4b99      	ldr	r3, [pc, #612]	; (8011134 <_dtoa_r+0x64c>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	f7ef fe12 	bl	8000afc <__aeabi_dcmplt>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	f000 8081 	beq.w	8010fe0 <_dtoa_r+0x4f8>
 8010ede:	9b01      	ldr	r3, [sp, #4]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d07d      	beq.n	8010fe0 <_dtoa_r+0x4f8>
 8010ee4:	f1b9 0f00 	cmp.w	r9, #0
 8010ee8:	dd3c      	ble.n	8010f64 <_dtoa_r+0x47c>
 8010eea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010eee:	9307      	str	r3, [sp, #28]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	4b91      	ldr	r3, [pc, #580]	; (8011138 <_dtoa_r+0x650>)
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	4639      	mov	r1, r7
 8010ef8:	f7ef fb8e 	bl	8000618 <__aeabi_dmul>
 8010efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f00:	3501      	adds	r5, #1
 8010f02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010f06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7ef fb1a 	bl	8000544 <__aeabi_i2d>
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	f7ef fb80 	bl	8000618 <__aeabi_dmul>
 8010f18:	4b88      	ldr	r3, [pc, #544]	; (801113c <_dtoa_r+0x654>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f7ef f9c6 	bl	80002ac <__adddf3>
 8010f20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f28:	9303      	str	r3, [sp, #12]
 8010f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d15c      	bne.n	8010fea <_dtoa_r+0x502>
 8010f30:	4b83      	ldr	r3, [pc, #524]	; (8011140 <_dtoa_r+0x658>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	f7ef f9b6 	bl	80002a8 <__aeabi_dsub>
 8010f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f40:	4606      	mov	r6, r0
 8010f42:	460f      	mov	r7, r1
 8010f44:	f7ef fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	f040 8296 	bne.w	801147a <_dtoa_r+0x992>
 8010f4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010f52:	4630      	mov	r0, r6
 8010f54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f58:	4639      	mov	r1, r7
 8010f5a:	f7ef fdcf 	bl	8000afc <__aeabi_dcmplt>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	f040 8288 	bne.w	8011474 <_dtoa_r+0x98c>
 8010f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f2c0 8158 	blt.w	8011224 <_dtoa_r+0x73c>
 8010f74:	f1ba 0f0e 	cmp.w	sl, #14
 8010f78:	f300 8154 	bgt.w	8011224 <_dtoa_r+0x73c>
 8010f7c:	4b6b      	ldr	r3, [pc, #428]	; (801112c <_dtoa_r+0x644>)
 8010f7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f280 80e3 	bge.w	8011154 <_dtoa_r+0x66c>
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f300 80df 	bgt.w	8011154 <_dtoa_r+0x66c>
 8010f96:	f040 826d 	bne.w	8011474 <_dtoa_r+0x98c>
 8010f9a:	4b69      	ldr	r3, [pc, #420]	; (8011140 <_dtoa_r+0x658>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	4640      	mov	r0, r8
 8010fa0:	4649      	mov	r1, r9
 8010fa2:	f7ef fb39 	bl	8000618 <__aeabi_dmul>
 8010fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010faa:	f7ef fdbb 	bl	8000b24 <__aeabi_dcmpge>
 8010fae:	9e01      	ldr	r6, [sp, #4]
 8010fb0:	4637      	mov	r7, r6
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	f040 8243 	bne.w	801143e <_dtoa_r+0x956>
 8010fb8:	9d00      	ldr	r5, [sp, #0]
 8010fba:	2331      	movs	r3, #49	; 0x31
 8010fbc:	f805 3b01 	strb.w	r3, [r5], #1
 8010fc0:	f10a 0a01 	add.w	sl, sl, #1
 8010fc4:	e23f      	b.n	8011446 <_dtoa_r+0x95e>
 8010fc6:	07f2      	lsls	r2, r6, #31
 8010fc8:	d505      	bpl.n	8010fd6 <_dtoa_r+0x4ee>
 8010fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fce:	f7ef fb23 	bl	8000618 <__aeabi_dmul>
 8010fd2:	3501      	adds	r5, #1
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	1076      	asrs	r6, r6, #1
 8010fd8:	3708      	adds	r7, #8
 8010fda:	e76c      	b.n	8010eb6 <_dtoa_r+0x3ce>
 8010fdc:	2502      	movs	r5, #2
 8010fde:	e76f      	b.n	8010ec0 <_dtoa_r+0x3d8>
 8010fe0:	9b01      	ldr	r3, [sp, #4]
 8010fe2:	f8cd a01c 	str.w	sl, [sp, #28]
 8010fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fe8:	e78d      	b.n	8010f06 <_dtoa_r+0x41e>
 8010fea:	9900      	ldr	r1, [sp, #0]
 8010fec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ff0:	4b4e      	ldr	r3, [pc, #312]	; (801112c <_dtoa_r+0x644>)
 8010ff2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ff6:	4401      	add	r1, r0
 8010ff8:	9102      	str	r1, [sp, #8]
 8010ffa:	9908      	ldr	r1, [sp, #32]
 8010ffc:	eeb0 8a47 	vmov.f32	s16, s14
 8011000:	eef0 8a67 	vmov.f32	s17, s15
 8011004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011008:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801100c:	2900      	cmp	r1, #0
 801100e:	d045      	beq.n	801109c <_dtoa_r+0x5b4>
 8011010:	494c      	ldr	r1, [pc, #304]	; (8011144 <_dtoa_r+0x65c>)
 8011012:	2000      	movs	r0, #0
 8011014:	f7ef fc2a 	bl	800086c <__aeabi_ddiv>
 8011018:	ec53 2b18 	vmov	r2, r3, d8
 801101c:	f7ef f944 	bl	80002a8 <__aeabi_dsub>
 8011020:	9d00      	ldr	r5, [sp, #0]
 8011022:	ec41 0b18 	vmov	d8, r0, r1
 8011026:	4639      	mov	r1, r7
 8011028:	4630      	mov	r0, r6
 801102a:	f7ef fda5 	bl	8000b78 <__aeabi_d2iz>
 801102e:	900c      	str	r0, [sp, #48]	; 0x30
 8011030:	f7ef fa88 	bl	8000544 <__aeabi_i2d>
 8011034:	4602      	mov	r2, r0
 8011036:	460b      	mov	r3, r1
 8011038:	4630      	mov	r0, r6
 801103a:	4639      	mov	r1, r7
 801103c:	f7ef f934 	bl	80002a8 <__aeabi_dsub>
 8011040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011042:	3330      	adds	r3, #48	; 0x30
 8011044:	f805 3b01 	strb.w	r3, [r5], #1
 8011048:	ec53 2b18 	vmov	r2, r3, d8
 801104c:	4606      	mov	r6, r0
 801104e:	460f      	mov	r7, r1
 8011050:	f7ef fd54 	bl	8000afc <__aeabi_dcmplt>
 8011054:	2800      	cmp	r0, #0
 8011056:	d165      	bne.n	8011124 <_dtoa_r+0x63c>
 8011058:	4632      	mov	r2, r6
 801105a:	463b      	mov	r3, r7
 801105c:	4935      	ldr	r1, [pc, #212]	; (8011134 <_dtoa_r+0x64c>)
 801105e:	2000      	movs	r0, #0
 8011060:	f7ef f922 	bl	80002a8 <__aeabi_dsub>
 8011064:	ec53 2b18 	vmov	r2, r3, d8
 8011068:	f7ef fd48 	bl	8000afc <__aeabi_dcmplt>
 801106c:	2800      	cmp	r0, #0
 801106e:	f040 80b9 	bne.w	80111e4 <_dtoa_r+0x6fc>
 8011072:	9b02      	ldr	r3, [sp, #8]
 8011074:	429d      	cmp	r5, r3
 8011076:	f43f af75 	beq.w	8010f64 <_dtoa_r+0x47c>
 801107a:	4b2f      	ldr	r3, [pc, #188]	; (8011138 <_dtoa_r+0x650>)
 801107c:	ec51 0b18 	vmov	r0, r1, d8
 8011080:	2200      	movs	r2, #0
 8011082:	f7ef fac9 	bl	8000618 <__aeabi_dmul>
 8011086:	4b2c      	ldr	r3, [pc, #176]	; (8011138 <_dtoa_r+0x650>)
 8011088:	ec41 0b18 	vmov	d8, r0, r1
 801108c:	2200      	movs	r2, #0
 801108e:	4630      	mov	r0, r6
 8011090:	4639      	mov	r1, r7
 8011092:	f7ef fac1 	bl	8000618 <__aeabi_dmul>
 8011096:	4606      	mov	r6, r0
 8011098:	460f      	mov	r7, r1
 801109a:	e7c4      	b.n	8011026 <_dtoa_r+0x53e>
 801109c:	ec51 0b17 	vmov	r0, r1, d7
 80110a0:	f7ef faba 	bl	8000618 <__aeabi_dmul>
 80110a4:	9b02      	ldr	r3, [sp, #8]
 80110a6:	9d00      	ldr	r5, [sp, #0]
 80110a8:	930c      	str	r3, [sp, #48]	; 0x30
 80110aa:	ec41 0b18 	vmov	d8, r0, r1
 80110ae:	4639      	mov	r1, r7
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7ef fd61 	bl	8000b78 <__aeabi_d2iz>
 80110b6:	9011      	str	r0, [sp, #68]	; 0x44
 80110b8:	f7ef fa44 	bl	8000544 <__aeabi_i2d>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f7ef f8f0 	bl	80002a8 <__aeabi_dsub>
 80110c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110ca:	3330      	adds	r3, #48	; 0x30
 80110cc:	f805 3b01 	strb.w	r3, [r5], #1
 80110d0:	9b02      	ldr	r3, [sp, #8]
 80110d2:	429d      	cmp	r5, r3
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	f04f 0200 	mov.w	r2, #0
 80110dc:	d134      	bne.n	8011148 <_dtoa_r+0x660>
 80110de:	4b19      	ldr	r3, [pc, #100]	; (8011144 <_dtoa_r+0x65c>)
 80110e0:	ec51 0b18 	vmov	r0, r1, d8
 80110e4:	f7ef f8e2 	bl	80002ac <__adddf3>
 80110e8:	4602      	mov	r2, r0
 80110ea:	460b      	mov	r3, r1
 80110ec:	4630      	mov	r0, r6
 80110ee:	4639      	mov	r1, r7
 80110f0:	f7ef fd22 	bl	8000b38 <__aeabi_dcmpgt>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d175      	bne.n	80111e4 <_dtoa_r+0x6fc>
 80110f8:	ec53 2b18 	vmov	r2, r3, d8
 80110fc:	4911      	ldr	r1, [pc, #68]	; (8011144 <_dtoa_r+0x65c>)
 80110fe:	2000      	movs	r0, #0
 8011100:	f7ef f8d2 	bl	80002a8 <__aeabi_dsub>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	4630      	mov	r0, r6
 801110a:	4639      	mov	r1, r7
 801110c:	f7ef fcf6 	bl	8000afc <__aeabi_dcmplt>
 8011110:	2800      	cmp	r0, #0
 8011112:	f43f af27 	beq.w	8010f64 <_dtoa_r+0x47c>
 8011116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011118:	1e6b      	subs	r3, r5, #1
 801111a:	930c      	str	r3, [sp, #48]	; 0x30
 801111c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011120:	2b30      	cmp	r3, #48	; 0x30
 8011122:	d0f8      	beq.n	8011116 <_dtoa_r+0x62e>
 8011124:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011128:	e04a      	b.n	80111c0 <_dtoa_r+0x6d8>
 801112a:	bf00      	nop
 801112c:	08014970 	.word	0x08014970
 8011130:	08014948 	.word	0x08014948
 8011134:	3ff00000 	.word	0x3ff00000
 8011138:	40240000 	.word	0x40240000
 801113c:	401c0000 	.word	0x401c0000
 8011140:	40140000 	.word	0x40140000
 8011144:	3fe00000 	.word	0x3fe00000
 8011148:	4baf      	ldr	r3, [pc, #700]	; (8011408 <_dtoa_r+0x920>)
 801114a:	f7ef fa65 	bl	8000618 <__aeabi_dmul>
 801114e:	4606      	mov	r6, r0
 8011150:	460f      	mov	r7, r1
 8011152:	e7ac      	b.n	80110ae <_dtoa_r+0x5c6>
 8011154:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011158:	9d00      	ldr	r5, [sp, #0]
 801115a:	4642      	mov	r2, r8
 801115c:	464b      	mov	r3, r9
 801115e:	4630      	mov	r0, r6
 8011160:	4639      	mov	r1, r7
 8011162:	f7ef fb83 	bl	800086c <__aeabi_ddiv>
 8011166:	f7ef fd07 	bl	8000b78 <__aeabi_d2iz>
 801116a:	9002      	str	r0, [sp, #8]
 801116c:	f7ef f9ea 	bl	8000544 <__aeabi_i2d>
 8011170:	4642      	mov	r2, r8
 8011172:	464b      	mov	r3, r9
 8011174:	f7ef fa50 	bl	8000618 <__aeabi_dmul>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4630      	mov	r0, r6
 801117e:	4639      	mov	r1, r7
 8011180:	f7ef f892 	bl	80002a8 <__aeabi_dsub>
 8011184:	9e02      	ldr	r6, [sp, #8]
 8011186:	9f01      	ldr	r7, [sp, #4]
 8011188:	3630      	adds	r6, #48	; 0x30
 801118a:	f805 6b01 	strb.w	r6, [r5], #1
 801118e:	9e00      	ldr	r6, [sp, #0]
 8011190:	1bae      	subs	r6, r5, r6
 8011192:	42b7      	cmp	r7, r6
 8011194:	4602      	mov	r2, r0
 8011196:	460b      	mov	r3, r1
 8011198:	d137      	bne.n	801120a <_dtoa_r+0x722>
 801119a:	f7ef f887 	bl	80002ac <__adddf3>
 801119e:	4642      	mov	r2, r8
 80111a0:	464b      	mov	r3, r9
 80111a2:	4606      	mov	r6, r0
 80111a4:	460f      	mov	r7, r1
 80111a6:	f7ef fcc7 	bl	8000b38 <__aeabi_dcmpgt>
 80111aa:	b9c8      	cbnz	r0, 80111e0 <_dtoa_r+0x6f8>
 80111ac:	4642      	mov	r2, r8
 80111ae:	464b      	mov	r3, r9
 80111b0:	4630      	mov	r0, r6
 80111b2:	4639      	mov	r1, r7
 80111b4:	f7ef fc98 	bl	8000ae8 <__aeabi_dcmpeq>
 80111b8:	b110      	cbz	r0, 80111c0 <_dtoa_r+0x6d8>
 80111ba:	9b02      	ldr	r3, [sp, #8]
 80111bc:	07d9      	lsls	r1, r3, #31
 80111be:	d40f      	bmi.n	80111e0 <_dtoa_r+0x6f8>
 80111c0:	4620      	mov	r0, r4
 80111c2:	4659      	mov	r1, fp
 80111c4:	f000 ff98 	bl	80120f8 <_Bfree>
 80111c8:	2300      	movs	r3, #0
 80111ca:	702b      	strb	r3, [r5, #0]
 80111cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111ce:	f10a 0001 	add.w	r0, sl, #1
 80111d2:	6018      	str	r0, [r3, #0]
 80111d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f43f acd8 	beq.w	8010b8c <_dtoa_r+0xa4>
 80111dc:	601d      	str	r5, [r3, #0]
 80111de:	e4d5      	b.n	8010b8c <_dtoa_r+0xa4>
 80111e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80111e4:	462b      	mov	r3, r5
 80111e6:	461d      	mov	r5, r3
 80111e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111ec:	2a39      	cmp	r2, #57	; 0x39
 80111ee:	d108      	bne.n	8011202 <_dtoa_r+0x71a>
 80111f0:	9a00      	ldr	r2, [sp, #0]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d1f7      	bne.n	80111e6 <_dtoa_r+0x6fe>
 80111f6:	9a07      	ldr	r2, [sp, #28]
 80111f8:	9900      	ldr	r1, [sp, #0]
 80111fa:	3201      	adds	r2, #1
 80111fc:	9207      	str	r2, [sp, #28]
 80111fe:	2230      	movs	r2, #48	; 0x30
 8011200:	700a      	strb	r2, [r1, #0]
 8011202:	781a      	ldrb	r2, [r3, #0]
 8011204:	3201      	adds	r2, #1
 8011206:	701a      	strb	r2, [r3, #0]
 8011208:	e78c      	b.n	8011124 <_dtoa_r+0x63c>
 801120a:	4b7f      	ldr	r3, [pc, #508]	; (8011408 <_dtoa_r+0x920>)
 801120c:	2200      	movs	r2, #0
 801120e:	f7ef fa03 	bl	8000618 <__aeabi_dmul>
 8011212:	2200      	movs	r2, #0
 8011214:	2300      	movs	r3, #0
 8011216:	4606      	mov	r6, r0
 8011218:	460f      	mov	r7, r1
 801121a:	f7ef fc65 	bl	8000ae8 <__aeabi_dcmpeq>
 801121e:	2800      	cmp	r0, #0
 8011220:	d09b      	beq.n	801115a <_dtoa_r+0x672>
 8011222:	e7cd      	b.n	80111c0 <_dtoa_r+0x6d8>
 8011224:	9a08      	ldr	r2, [sp, #32]
 8011226:	2a00      	cmp	r2, #0
 8011228:	f000 80c4 	beq.w	80113b4 <_dtoa_r+0x8cc>
 801122c:	9a05      	ldr	r2, [sp, #20]
 801122e:	2a01      	cmp	r2, #1
 8011230:	f300 80a8 	bgt.w	8011384 <_dtoa_r+0x89c>
 8011234:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011236:	2a00      	cmp	r2, #0
 8011238:	f000 80a0 	beq.w	801137c <_dtoa_r+0x894>
 801123c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011240:	9e06      	ldr	r6, [sp, #24]
 8011242:	4645      	mov	r5, r8
 8011244:	9a04      	ldr	r2, [sp, #16]
 8011246:	2101      	movs	r1, #1
 8011248:	441a      	add	r2, r3
 801124a:	4620      	mov	r0, r4
 801124c:	4498      	add	r8, r3
 801124e:	9204      	str	r2, [sp, #16]
 8011250:	f001 f858 	bl	8012304 <__i2b>
 8011254:	4607      	mov	r7, r0
 8011256:	2d00      	cmp	r5, #0
 8011258:	dd0b      	ble.n	8011272 <_dtoa_r+0x78a>
 801125a:	9b04      	ldr	r3, [sp, #16]
 801125c:	2b00      	cmp	r3, #0
 801125e:	dd08      	ble.n	8011272 <_dtoa_r+0x78a>
 8011260:	42ab      	cmp	r3, r5
 8011262:	9a04      	ldr	r2, [sp, #16]
 8011264:	bfa8      	it	ge
 8011266:	462b      	movge	r3, r5
 8011268:	eba8 0803 	sub.w	r8, r8, r3
 801126c:	1aed      	subs	r5, r5, r3
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	9b06      	ldr	r3, [sp, #24]
 8011274:	b1fb      	cbz	r3, 80112b6 <_dtoa_r+0x7ce>
 8011276:	9b08      	ldr	r3, [sp, #32]
 8011278:	2b00      	cmp	r3, #0
 801127a:	f000 809f 	beq.w	80113bc <_dtoa_r+0x8d4>
 801127e:	2e00      	cmp	r6, #0
 8011280:	dd11      	ble.n	80112a6 <_dtoa_r+0x7be>
 8011282:	4639      	mov	r1, r7
 8011284:	4632      	mov	r2, r6
 8011286:	4620      	mov	r0, r4
 8011288:	f001 f8f8 	bl	801247c <__pow5mult>
 801128c:	465a      	mov	r2, fp
 801128e:	4601      	mov	r1, r0
 8011290:	4607      	mov	r7, r0
 8011292:	4620      	mov	r0, r4
 8011294:	f001 f84c 	bl	8012330 <__multiply>
 8011298:	4659      	mov	r1, fp
 801129a:	9007      	str	r0, [sp, #28]
 801129c:	4620      	mov	r0, r4
 801129e:	f000 ff2b 	bl	80120f8 <_Bfree>
 80112a2:	9b07      	ldr	r3, [sp, #28]
 80112a4:	469b      	mov	fp, r3
 80112a6:	9b06      	ldr	r3, [sp, #24]
 80112a8:	1b9a      	subs	r2, r3, r6
 80112aa:	d004      	beq.n	80112b6 <_dtoa_r+0x7ce>
 80112ac:	4659      	mov	r1, fp
 80112ae:	4620      	mov	r0, r4
 80112b0:	f001 f8e4 	bl	801247c <__pow5mult>
 80112b4:	4683      	mov	fp, r0
 80112b6:	2101      	movs	r1, #1
 80112b8:	4620      	mov	r0, r4
 80112ba:	f001 f823 	bl	8012304 <__i2b>
 80112be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	4606      	mov	r6, r0
 80112c4:	dd7c      	ble.n	80113c0 <_dtoa_r+0x8d8>
 80112c6:	461a      	mov	r2, r3
 80112c8:	4601      	mov	r1, r0
 80112ca:	4620      	mov	r0, r4
 80112cc:	f001 f8d6 	bl	801247c <__pow5mult>
 80112d0:	9b05      	ldr	r3, [sp, #20]
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	4606      	mov	r6, r0
 80112d6:	dd76      	ble.n	80113c6 <_dtoa_r+0x8de>
 80112d8:	2300      	movs	r3, #0
 80112da:	9306      	str	r3, [sp, #24]
 80112dc:	6933      	ldr	r3, [r6, #16]
 80112de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112e2:	6918      	ldr	r0, [r3, #16]
 80112e4:	f000 ffbe 	bl	8012264 <__hi0bits>
 80112e8:	f1c0 0020 	rsb	r0, r0, #32
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	4418      	add	r0, r3
 80112f0:	f010 001f 	ands.w	r0, r0, #31
 80112f4:	f000 8086 	beq.w	8011404 <_dtoa_r+0x91c>
 80112f8:	f1c0 0320 	rsb	r3, r0, #32
 80112fc:	2b04      	cmp	r3, #4
 80112fe:	dd7f      	ble.n	8011400 <_dtoa_r+0x918>
 8011300:	f1c0 001c 	rsb	r0, r0, #28
 8011304:	9b04      	ldr	r3, [sp, #16]
 8011306:	4403      	add	r3, r0
 8011308:	4480      	add	r8, r0
 801130a:	4405      	add	r5, r0
 801130c:	9304      	str	r3, [sp, #16]
 801130e:	f1b8 0f00 	cmp.w	r8, #0
 8011312:	dd05      	ble.n	8011320 <_dtoa_r+0x838>
 8011314:	4659      	mov	r1, fp
 8011316:	4642      	mov	r2, r8
 8011318:	4620      	mov	r0, r4
 801131a:	f001 f909 	bl	8012530 <__lshift>
 801131e:	4683      	mov	fp, r0
 8011320:	9b04      	ldr	r3, [sp, #16]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dd05      	ble.n	8011332 <_dtoa_r+0x84a>
 8011326:	4631      	mov	r1, r6
 8011328:	461a      	mov	r2, r3
 801132a:	4620      	mov	r0, r4
 801132c:	f001 f900 	bl	8012530 <__lshift>
 8011330:	4606      	mov	r6, r0
 8011332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011334:	2b00      	cmp	r3, #0
 8011336:	d069      	beq.n	801140c <_dtoa_r+0x924>
 8011338:	4631      	mov	r1, r6
 801133a:	4658      	mov	r0, fp
 801133c:	f001 f964 	bl	8012608 <__mcmp>
 8011340:	2800      	cmp	r0, #0
 8011342:	da63      	bge.n	801140c <_dtoa_r+0x924>
 8011344:	2300      	movs	r3, #0
 8011346:	4659      	mov	r1, fp
 8011348:	220a      	movs	r2, #10
 801134a:	4620      	mov	r0, r4
 801134c:	f000 fef6 	bl	801213c <__multadd>
 8011350:	9b08      	ldr	r3, [sp, #32]
 8011352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011356:	4683      	mov	fp, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	f000 818f 	beq.w	801167c <_dtoa_r+0xb94>
 801135e:	4639      	mov	r1, r7
 8011360:	2300      	movs	r3, #0
 8011362:	220a      	movs	r2, #10
 8011364:	4620      	mov	r0, r4
 8011366:	f000 fee9 	bl	801213c <__multadd>
 801136a:	f1b9 0f00 	cmp.w	r9, #0
 801136e:	4607      	mov	r7, r0
 8011370:	f300 808e 	bgt.w	8011490 <_dtoa_r+0x9a8>
 8011374:	9b05      	ldr	r3, [sp, #20]
 8011376:	2b02      	cmp	r3, #2
 8011378:	dc50      	bgt.n	801141c <_dtoa_r+0x934>
 801137a:	e089      	b.n	8011490 <_dtoa_r+0x9a8>
 801137c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801137e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011382:	e75d      	b.n	8011240 <_dtoa_r+0x758>
 8011384:	9b01      	ldr	r3, [sp, #4]
 8011386:	1e5e      	subs	r6, r3, #1
 8011388:	9b06      	ldr	r3, [sp, #24]
 801138a:	42b3      	cmp	r3, r6
 801138c:	bfbf      	itttt	lt
 801138e:	9b06      	ldrlt	r3, [sp, #24]
 8011390:	9606      	strlt	r6, [sp, #24]
 8011392:	1af2      	sublt	r2, r6, r3
 8011394:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011396:	bfb6      	itet	lt
 8011398:	189b      	addlt	r3, r3, r2
 801139a:	1b9e      	subge	r6, r3, r6
 801139c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801139e:	9b01      	ldr	r3, [sp, #4]
 80113a0:	bfb8      	it	lt
 80113a2:	2600      	movlt	r6, #0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	bfb5      	itete	lt
 80113a8:	eba8 0503 	sublt.w	r5, r8, r3
 80113ac:	9b01      	ldrge	r3, [sp, #4]
 80113ae:	2300      	movlt	r3, #0
 80113b0:	4645      	movge	r5, r8
 80113b2:	e747      	b.n	8011244 <_dtoa_r+0x75c>
 80113b4:	9e06      	ldr	r6, [sp, #24]
 80113b6:	9f08      	ldr	r7, [sp, #32]
 80113b8:	4645      	mov	r5, r8
 80113ba:	e74c      	b.n	8011256 <_dtoa_r+0x76e>
 80113bc:	9a06      	ldr	r2, [sp, #24]
 80113be:	e775      	b.n	80112ac <_dtoa_r+0x7c4>
 80113c0:	9b05      	ldr	r3, [sp, #20]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	dc18      	bgt.n	80113f8 <_dtoa_r+0x910>
 80113c6:	9b02      	ldr	r3, [sp, #8]
 80113c8:	b9b3      	cbnz	r3, 80113f8 <_dtoa_r+0x910>
 80113ca:	9b03      	ldr	r3, [sp, #12]
 80113cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113d0:	b9a3      	cbnz	r3, 80113fc <_dtoa_r+0x914>
 80113d2:	9b03      	ldr	r3, [sp, #12]
 80113d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113d8:	0d1b      	lsrs	r3, r3, #20
 80113da:	051b      	lsls	r3, r3, #20
 80113dc:	b12b      	cbz	r3, 80113ea <_dtoa_r+0x902>
 80113de:	9b04      	ldr	r3, [sp, #16]
 80113e0:	3301      	adds	r3, #1
 80113e2:	9304      	str	r3, [sp, #16]
 80113e4:	f108 0801 	add.w	r8, r8, #1
 80113e8:	2301      	movs	r3, #1
 80113ea:	9306      	str	r3, [sp, #24]
 80113ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f47f af74 	bne.w	80112dc <_dtoa_r+0x7f4>
 80113f4:	2001      	movs	r0, #1
 80113f6:	e779      	b.n	80112ec <_dtoa_r+0x804>
 80113f8:	2300      	movs	r3, #0
 80113fa:	e7f6      	b.n	80113ea <_dtoa_r+0x902>
 80113fc:	9b02      	ldr	r3, [sp, #8]
 80113fe:	e7f4      	b.n	80113ea <_dtoa_r+0x902>
 8011400:	d085      	beq.n	801130e <_dtoa_r+0x826>
 8011402:	4618      	mov	r0, r3
 8011404:	301c      	adds	r0, #28
 8011406:	e77d      	b.n	8011304 <_dtoa_r+0x81c>
 8011408:	40240000 	.word	0x40240000
 801140c:	9b01      	ldr	r3, [sp, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	dc38      	bgt.n	8011484 <_dtoa_r+0x99c>
 8011412:	9b05      	ldr	r3, [sp, #20]
 8011414:	2b02      	cmp	r3, #2
 8011416:	dd35      	ble.n	8011484 <_dtoa_r+0x99c>
 8011418:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801141c:	f1b9 0f00 	cmp.w	r9, #0
 8011420:	d10d      	bne.n	801143e <_dtoa_r+0x956>
 8011422:	4631      	mov	r1, r6
 8011424:	464b      	mov	r3, r9
 8011426:	2205      	movs	r2, #5
 8011428:	4620      	mov	r0, r4
 801142a:	f000 fe87 	bl	801213c <__multadd>
 801142e:	4601      	mov	r1, r0
 8011430:	4606      	mov	r6, r0
 8011432:	4658      	mov	r0, fp
 8011434:	f001 f8e8 	bl	8012608 <__mcmp>
 8011438:	2800      	cmp	r0, #0
 801143a:	f73f adbd 	bgt.w	8010fb8 <_dtoa_r+0x4d0>
 801143e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011440:	9d00      	ldr	r5, [sp, #0]
 8011442:	ea6f 0a03 	mvn.w	sl, r3
 8011446:	f04f 0800 	mov.w	r8, #0
 801144a:	4631      	mov	r1, r6
 801144c:	4620      	mov	r0, r4
 801144e:	f000 fe53 	bl	80120f8 <_Bfree>
 8011452:	2f00      	cmp	r7, #0
 8011454:	f43f aeb4 	beq.w	80111c0 <_dtoa_r+0x6d8>
 8011458:	f1b8 0f00 	cmp.w	r8, #0
 801145c:	d005      	beq.n	801146a <_dtoa_r+0x982>
 801145e:	45b8      	cmp	r8, r7
 8011460:	d003      	beq.n	801146a <_dtoa_r+0x982>
 8011462:	4641      	mov	r1, r8
 8011464:	4620      	mov	r0, r4
 8011466:	f000 fe47 	bl	80120f8 <_Bfree>
 801146a:	4639      	mov	r1, r7
 801146c:	4620      	mov	r0, r4
 801146e:	f000 fe43 	bl	80120f8 <_Bfree>
 8011472:	e6a5      	b.n	80111c0 <_dtoa_r+0x6d8>
 8011474:	2600      	movs	r6, #0
 8011476:	4637      	mov	r7, r6
 8011478:	e7e1      	b.n	801143e <_dtoa_r+0x956>
 801147a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801147c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011480:	4637      	mov	r7, r6
 8011482:	e599      	b.n	8010fb8 <_dtoa_r+0x4d0>
 8011484:	9b08      	ldr	r3, [sp, #32]
 8011486:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80fd 	beq.w	801168a <_dtoa_r+0xba2>
 8011490:	2d00      	cmp	r5, #0
 8011492:	dd05      	ble.n	80114a0 <_dtoa_r+0x9b8>
 8011494:	4639      	mov	r1, r7
 8011496:	462a      	mov	r2, r5
 8011498:	4620      	mov	r0, r4
 801149a:	f001 f849 	bl	8012530 <__lshift>
 801149e:	4607      	mov	r7, r0
 80114a0:	9b06      	ldr	r3, [sp, #24]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d05c      	beq.n	8011560 <_dtoa_r+0xa78>
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	4620      	mov	r0, r4
 80114aa:	f000 fde5 	bl	8012078 <_Balloc>
 80114ae:	4605      	mov	r5, r0
 80114b0:	b928      	cbnz	r0, 80114be <_dtoa_r+0x9d6>
 80114b2:	4b80      	ldr	r3, [pc, #512]	; (80116b4 <_dtoa_r+0xbcc>)
 80114b4:	4602      	mov	r2, r0
 80114b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114ba:	f7ff bb2e 	b.w	8010b1a <_dtoa_r+0x32>
 80114be:	693a      	ldr	r2, [r7, #16]
 80114c0:	3202      	adds	r2, #2
 80114c2:	0092      	lsls	r2, r2, #2
 80114c4:	f107 010c 	add.w	r1, r7, #12
 80114c8:	300c      	adds	r0, #12
 80114ca:	f7fd f907 	bl	800e6dc <memcpy>
 80114ce:	2201      	movs	r2, #1
 80114d0:	4629      	mov	r1, r5
 80114d2:	4620      	mov	r0, r4
 80114d4:	f001 f82c 	bl	8012530 <__lshift>
 80114d8:	9b00      	ldr	r3, [sp, #0]
 80114da:	3301      	adds	r3, #1
 80114dc:	9301      	str	r3, [sp, #4]
 80114de:	9b00      	ldr	r3, [sp, #0]
 80114e0:	444b      	add	r3, r9
 80114e2:	9307      	str	r3, [sp, #28]
 80114e4:	9b02      	ldr	r3, [sp, #8]
 80114e6:	f003 0301 	and.w	r3, r3, #1
 80114ea:	46b8      	mov	r8, r7
 80114ec:	9306      	str	r3, [sp, #24]
 80114ee:	4607      	mov	r7, r0
 80114f0:	9b01      	ldr	r3, [sp, #4]
 80114f2:	4631      	mov	r1, r6
 80114f4:	3b01      	subs	r3, #1
 80114f6:	4658      	mov	r0, fp
 80114f8:	9302      	str	r3, [sp, #8]
 80114fa:	f7ff fa69 	bl	80109d0 <quorem>
 80114fe:	4603      	mov	r3, r0
 8011500:	3330      	adds	r3, #48	; 0x30
 8011502:	9004      	str	r0, [sp, #16]
 8011504:	4641      	mov	r1, r8
 8011506:	4658      	mov	r0, fp
 8011508:	9308      	str	r3, [sp, #32]
 801150a:	f001 f87d 	bl	8012608 <__mcmp>
 801150e:	463a      	mov	r2, r7
 8011510:	4681      	mov	r9, r0
 8011512:	4631      	mov	r1, r6
 8011514:	4620      	mov	r0, r4
 8011516:	f001 f893 	bl	8012640 <__mdiff>
 801151a:	68c2      	ldr	r2, [r0, #12]
 801151c:	9b08      	ldr	r3, [sp, #32]
 801151e:	4605      	mov	r5, r0
 8011520:	bb02      	cbnz	r2, 8011564 <_dtoa_r+0xa7c>
 8011522:	4601      	mov	r1, r0
 8011524:	4658      	mov	r0, fp
 8011526:	f001 f86f 	bl	8012608 <__mcmp>
 801152a:	9b08      	ldr	r3, [sp, #32]
 801152c:	4602      	mov	r2, r0
 801152e:	4629      	mov	r1, r5
 8011530:	4620      	mov	r0, r4
 8011532:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011536:	f000 fddf 	bl	80120f8 <_Bfree>
 801153a:	9b05      	ldr	r3, [sp, #20]
 801153c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801153e:	9d01      	ldr	r5, [sp, #4]
 8011540:	ea43 0102 	orr.w	r1, r3, r2
 8011544:	9b06      	ldr	r3, [sp, #24]
 8011546:	430b      	orrs	r3, r1
 8011548:	9b08      	ldr	r3, [sp, #32]
 801154a:	d10d      	bne.n	8011568 <_dtoa_r+0xa80>
 801154c:	2b39      	cmp	r3, #57	; 0x39
 801154e:	d029      	beq.n	80115a4 <_dtoa_r+0xabc>
 8011550:	f1b9 0f00 	cmp.w	r9, #0
 8011554:	dd01      	ble.n	801155a <_dtoa_r+0xa72>
 8011556:	9b04      	ldr	r3, [sp, #16]
 8011558:	3331      	adds	r3, #49	; 0x31
 801155a:	9a02      	ldr	r2, [sp, #8]
 801155c:	7013      	strb	r3, [r2, #0]
 801155e:	e774      	b.n	801144a <_dtoa_r+0x962>
 8011560:	4638      	mov	r0, r7
 8011562:	e7b9      	b.n	80114d8 <_dtoa_r+0x9f0>
 8011564:	2201      	movs	r2, #1
 8011566:	e7e2      	b.n	801152e <_dtoa_r+0xa46>
 8011568:	f1b9 0f00 	cmp.w	r9, #0
 801156c:	db06      	blt.n	801157c <_dtoa_r+0xa94>
 801156e:	9905      	ldr	r1, [sp, #20]
 8011570:	ea41 0909 	orr.w	r9, r1, r9
 8011574:	9906      	ldr	r1, [sp, #24]
 8011576:	ea59 0101 	orrs.w	r1, r9, r1
 801157a:	d120      	bne.n	80115be <_dtoa_r+0xad6>
 801157c:	2a00      	cmp	r2, #0
 801157e:	ddec      	ble.n	801155a <_dtoa_r+0xa72>
 8011580:	4659      	mov	r1, fp
 8011582:	2201      	movs	r2, #1
 8011584:	4620      	mov	r0, r4
 8011586:	9301      	str	r3, [sp, #4]
 8011588:	f000 ffd2 	bl	8012530 <__lshift>
 801158c:	4631      	mov	r1, r6
 801158e:	4683      	mov	fp, r0
 8011590:	f001 f83a 	bl	8012608 <__mcmp>
 8011594:	2800      	cmp	r0, #0
 8011596:	9b01      	ldr	r3, [sp, #4]
 8011598:	dc02      	bgt.n	80115a0 <_dtoa_r+0xab8>
 801159a:	d1de      	bne.n	801155a <_dtoa_r+0xa72>
 801159c:	07da      	lsls	r2, r3, #31
 801159e:	d5dc      	bpl.n	801155a <_dtoa_r+0xa72>
 80115a0:	2b39      	cmp	r3, #57	; 0x39
 80115a2:	d1d8      	bne.n	8011556 <_dtoa_r+0xa6e>
 80115a4:	9a02      	ldr	r2, [sp, #8]
 80115a6:	2339      	movs	r3, #57	; 0x39
 80115a8:	7013      	strb	r3, [r2, #0]
 80115aa:	462b      	mov	r3, r5
 80115ac:	461d      	mov	r5, r3
 80115ae:	3b01      	subs	r3, #1
 80115b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115b4:	2a39      	cmp	r2, #57	; 0x39
 80115b6:	d050      	beq.n	801165a <_dtoa_r+0xb72>
 80115b8:	3201      	adds	r2, #1
 80115ba:	701a      	strb	r2, [r3, #0]
 80115bc:	e745      	b.n	801144a <_dtoa_r+0x962>
 80115be:	2a00      	cmp	r2, #0
 80115c0:	dd03      	ble.n	80115ca <_dtoa_r+0xae2>
 80115c2:	2b39      	cmp	r3, #57	; 0x39
 80115c4:	d0ee      	beq.n	80115a4 <_dtoa_r+0xabc>
 80115c6:	3301      	adds	r3, #1
 80115c8:	e7c7      	b.n	801155a <_dtoa_r+0xa72>
 80115ca:	9a01      	ldr	r2, [sp, #4]
 80115cc:	9907      	ldr	r1, [sp, #28]
 80115ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80115d2:	428a      	cmp	r2, r1
 80115d4:	d02a      	beq.n	801162c <_dtoa_r+0xb44>
 80115d6:	4659      	mov	r1, fp
 80115d8:	2300      	movs	r3, #0
 80115da:	220a      	movs	r2, #10
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 fdad 	bl	801213c <__multadd>
 80115e2:	45b8      	cmp	r8, r7
 80115e4:	4683      	mov	fp, r0
 80115e6:	f04f 0300 	mov.w	r3, #0
 80115ea:	f04f 020a 	mov.w	r2, #10
 80115ee:	4641      	mov	r1, r8
 80115f0:	4620      	mov	r0, r4
 80115f2:	d107      	bne.n	8011604 <_dtoa_r+0xb1c>
 80115f4:	f000 fda2 	bl	801213c <__multadd>
 80115f8:	4680      	mov	r8, r0
 80115fa:	4607      	mov	r7, r0
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	3301      	adds	r3, #1
 8011600:	9301      	str	r3, [sp, #4]
 8011602:	e775      	b.n	80114f0 <_dtoa_r+0xa08>
 8011604:	f000 fd9a 	bl	801213c <__multadd>
 8011608:	4639      	mov	r1, r7
 801160a:	4680      	mov	r8, r0
 801160c:	2300      	movs	r3, #0
 801160e:	220a      	movs	r2, #10
 8011610:	4620      	mov	r0, r4
 8011612:	f000 fd93 	bl	801213c <__multadd>
 8011616:	4607      	mov	r7, r0
 8011618:	e7f0      	b.n	80115fc <_dtoa_r+0xb14>
 801161a:	f1b9 0f00 	cmp.w	r9, #0
 801161e:	9a00      	ldr	r2, [sp, #0]
 8011620:	bfcc      	ite	gt
 8011622:	464d      	movgt	r5, r9
 8011624:	2501      	movle	r5, #1
 8011626:	4415      	add	r5, r2
 8011628:	f04f 0800 	mov.w	r8, #0
 801162c:	4659      	mov	r1, fp
 801162e:	2201      	movs	r2, #1
 8011630:	4620      	mov	r0, r4
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	f000 ff7c 	bl	8012530 <__lshift>
 8011638:	4631      	mov	r1, r6
 801163a:	4683      	mov	fp, r0
 801163c:	f000 ffe4 	bl	8012608 <__mcmp>
 8011640:	2800      	cmp	r0, #0
 8011642:	dcb2      	bgt.n	80115aa <_dtoa_r+0xac2>
 8011644:	d102      	bne.n	801164c <_dtoa_r+0xb64>
 8011646:	9b01      	ldr	r3, [sp, #4]
 8011648:	07db      	lsls	r3, r3, #31
 801164a:	d4ae      	bmi.n	80115aa <_dtoa_r+0xac2>
 801164c:	462b      	mov	r3, r5
 801164e:	461d      	mov	r5, r3
 8011650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011654:	2a30      	cmp	r2, #48	; 0x30
 8011656:	d0fa      	beq.n	801164e <_dtoa_r+0xb66>
 8011658:	e6f7      	b.n	801144a <_dtoa_r+0x962>
 801165a:	9a00      	ldr	r2, [sp, #0]
 801165c:	429a      	cmp	r2, r3
 801165e:	d1a5      	bne.n	80115ac <_dtoa_r+0xac4>
 8011660:	f10a 0a01 	add.w	sl, sl, #1
 8011664:	2331      	movs	r3, #49	; 0x31
 8011666:	e779      	b.n	801155c <_dtoa_r+0xa74>
 8011668:	4b13      	ldr	r3, [pc, #76]	; (80116b8 <_dtoa_r+0xbd0>)
 801166a:	f7ff baaf 	b.w	8010bcc <_dtoa_r+0xe4>
 801166e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011670:	2b00      	cmp	r3, #0
 8011672:	f47f aa86 	bne.w	8010b82 <_dtoa_r+0x9a>
 8011676:	4b11      	ldr	r3, [pc, #68]	; (80116bc <_dtoa_r+0xbd4>)
 8011678:	f7ff baa8 	b.w	8010bcc <_dtoa_r+0xe4>
 801167c:	f1b9 0f00 	cmp.w	r9, #0
 8011680:	dc03      	bgt.n	801168a <_dtoa_r+0xba2>
 8011682:	9b05      	ldr	r3, [sp, #20]
 8011684:	2b02      	cmp	r3, #2
 8011686:	f73f aec9 	bgt.w	801141c <_dtoa_r+0x934>
 801168a:	9d00      	ldr	r5, [sp, #0]
 801168c:	4631      	mov	r1, r6
 801168e:	4658      	mov	r0, fp
 8011690:	f7ff f99e 	bl	80109d0 <quorem>
 8011694:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011698:	f805 3b01 	strb.w	r3, [r5], #1
 801169c:	9a00      	ldr	r2, [sp, #0]
 801169e:	1aaa      	subs	r2, r5, r2
 80116a0:	4591      	cmp	r9, r2
 80116a2:	ddba      	ble.n	801161a <_dtoa_r+0xb32>
 80116a4:	4659      	mov	r1, fp
 80116a6:	2300      	movs	r3, #0
 80116a8:	220a      	movs	r2, #10
 80116aa:	4620      	mov	r0, r4
 80116ac:	f000 fd46 	bl	801213c <__multadd>
 80116b0:	4683      	mov	fp, r0
 80116b2:	e7eb      	b.n	801168c <_dtoa_r+0xba4>
 80116b4:	08014858 	.word	0x08014858
 80116b8:	08014a59 	.word	0x08014a59
 80116bc:	080147d5 	.word	0x080147d5

080116c0 <__sflush_r>:
 80116c0:	898a      	ldrh	r2, [r1, #12]
 80116c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c6:	4605      	mov	r5, r0
 80116c8:	0710      	lsls	r0, r2, #28
 80116ca:	460c      	mov	r4, r1
 80116cc:	d458      	bmi.n	8011780 <__sflush_r+0xc0>
 80116ce:	684b      	ldr	r3, [r1, #4]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dc05      	bgt.n	80116e0 <__sflush_r+0x20>
 80116d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dc02      	bgt.n	80116e0 <__sflush_r+0x20>
 80116da:	2000      	movs	r0, #0
 80116dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116e2:	2e00      	cmp	r6, #0
 80116e4:	d0f9      	beq.n	80116da <__sflush_r+0x1a>
 80116e6:	2300      	movs	r3, #0
 80116e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116ec:	682f      	ldr	r7, [r5, #0]
 80116ee:	602b      	str	r3, [r5, #0]
 80116f0:	d032      	beq.n	8011758 <__sflush_r+0x98>
 80116f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116f4:	89a3      	ldrh	r3, [r4, #12]
 80116f6:	075a      	lsls	r2, r3, #29
 80116f8:	d505      	bpl.n	8011706 <__sflush_r+0x46>
 80116fa:	6863      	ldr	r3, [r4, #4]
 80116fc:	1ac0      	subs	r0, r0, r3
 80116fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011700:	b10b      	cbz	r3, 8011706 <__sflush_r+0x46>
 8011702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011704:	1ac0      	subs	r0, r0, r3
 8011706:	2300      	movs	r3, #0
 8011708:	4602      	mov	r2, r0
 801170a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801170c:	6a21      	ldr	r1, [r4, #32]
 801170e:	4628      	mov	r0, r5
 8011710:	47b0      	blx	r6
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	d106      	bne.n	8011726 <__sflush_r+0x66>
 8011718:	6829      	ldr	r1, [r5, #0]
 801171a:	291d      	cmp	r1, #29
 801171c:	d82c      	bhi.n	8011778 <__sflush_r+0xb8>
 801171e:	4a2a      	ldr	r2, [pc, #168]	; (80117c8 <__sflush_r+0x108>)
 8011720:	40ca      	lsrs	r2, r1
 8011722:	07d6      	lsls	r6, r2, #31
 8011724:	d528      	bpl.n	8011778 <__sflush_r+0xb8>
 8011726:	2200      	movs	r2, #0
 8011728:	6062      	str	r2, [r4, #4]
 801172a:	04d9      	lsls	r1, r3, #19
 801172c:	6922      	ldr	r2, [r4, #16]
 801172e:	6022      	str	r2, [r4, #0]
 8011730:	d504      	bpl.n	801173c <__sflush_r+0x7c>
 8011732:	1c42      	adds	r2, r0, #1
 8011734:	d101      	bne.n	801173a <__sflush_r+0x7a>
 8011736:	682b      	ldr	r3, [r5, #0]
 8011738:	b903      	cbnz	r3, 801173c <__sflush_r+0x7c>
 801173a:	6560      	str	r0, [r4, #84]	; 0x54
 801173c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801173e:	602f      	str	r7, [r5, #0]
 8011740:	2900      	cmp	r1, #0
 8011742:	d0ca      	beq.n	80116da <__sflush_r+0x1a>
 8011744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011748:	4299      	cmp	r1, r3
 801174a:	d002      	beq.n	8011752 <__sflush_r+0x92>
 801174c:	4628      	mov	r0, r5
 801174e:	f7fc fff5 	bl	800e73c <_free_r>
 8011752:	2000      	movs	r0, #0
 8011754:	6360      	str	r0, [r4, #52]	; 0x34
 8011756:	e7c1      	b.n	80116dc <__sflush_r+0x1c>
 8011758:	6a21      	ldr	r1, [r4, #32]
 801175a:	2301      	movs	r3, #1
 801175c:	4628      	mov	r0, r5
 801175e:	47b0      	blx	r6
 8011760:	1c41      	adds	r1, r0, #1
 8011762:	d1c7      	bne.n	80116f4 <__sflush_r+0x34>
 8011764:	682b      	ldr	r3, [r5, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d0c4      	beq.n	80116f4 <__sflush_r+0x34>
 801176a:	2b1d      	cmp	r3, #29
 801176c:	d001      	beq.n	8011772 <__sflush_r+0xb2>
 801176e:	2b16      	cmp	r3, #22
 8011770:	d101      	bne.n	8011776 <__sflush_r+0xb6>
 8011772:	602f      	str	r7, [r5, #0]
 8011774:	e7b1      	b.n	80116da <__sflush_r+0x1a>
 8011776:	89a3      	ldrh	r3, [r4, #12]
 8011778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177c:	81a3      	strh	r3, [r4, #12]
 801177e:	e7ad      	b.n	80116dc <__sflush_r+0x1c>
 8011780:	690f      	ldr	r7, [r1, #16]
 8011782:	2f00      	cmp	r7, #0
 8011784:	d0a9      	beq.n	80116da <__sflush_r+0x1a>
 8011786:	0793      	lsls	r3, r2, #30
 8011788:	680e      	ldr	r6, [r1, #0]
 801178a:	bf08      	it	eq
 801178c:	694b      	ldreq	r3, [r1, #20]
 801178e:	600f      	str	r7, [r1, #0]
 8011790:	bf18      	it	ne
 8011792:	2300      	movne	r3, #0
 8011794:	eba6 0807 	sub.w	r8, r6, r7
 8011798:	608b      	str	r3, [r1, #8]
 801179a:	f1b8 0f00 	cmp.w	r8, #0
 801179e:	dd9c      	ble.n	80116da <__sflush_r+0x1a>
 80117a0:	6a21      	ldr	r1, [r4, #32]
 80117a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117a4:	4643      	mov	r3, r8
 80117a6:	463a      	mov	r2, r7
 80117a8:	4628      	mov	r0, r5
 80117aa:	47b0      	blx	r6
 80117ac:	2800      	cmp	r0, #0
 80117ae:	dc06      	bgt.n	80117be <__sflush_r+0xfe>
 80117b0:	89a3      	ldrh	r3, [r4, #12]
 80117b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b6:	81a3      	strh	r3, [r4, #12]
 80117b8:	f04f 30ff 	mov.w	r0, #4294967295
 80117bc:	e78e      	b.n	80116dc <__sflush_r+0x1c>
 80117be:	4407      	add	r7, r0
 80117c0:	eba8 0800 	sub.w	r8, r8, r0
 80117c4:	e7e9      	b.n	801179a <__sflush_r+0xda>
 80117c6:	bf00      	nop
 80117c8:	20400001 	.word	0x20400001

080117cc <_fflush_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	690b      	ldr	r3, [r1, #16]
 80117d0:	4605      	mov	r5, r0
 80117d2:	460c      	mov	r4, r1
 80117d4:	b913      	cbnz	r3, 80117dc <_fflush_r+0x10>
 80117d6:	2500      	movs	r5, #0
 80117d8:	4628      	mov	r0, r5
 80117da:	bd38      	pop	{r3, r4, r5, pc}
 80117dc:	b118      	cbz	r0, 80117e6 <_fflush_r+0x1a>
 80117de:	6983      	ldr	r3, [r0, #24]
 80117e0:	b90b      	cbnz	r3, 80117e6 <_fflush_r+0x1a>
 80117e2:	f7fc fea5 	bl	800e530 <__sinit>
 80117e6:	4b14      	ldr	r3, [pc, #80]	; (8011838 <_fflush_r+0x6c>)
 80117e8:	429c      	cmp	r4, r3
 80117ea:	d11b      	bne.n	8011824 <_fflush_r+0x58>
 80117ec:	686c      	ldr	r4, [r5, #4]
 80117ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d0ef      	beq.n	80117d6 <_fflush_r+0xa>
 80117f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117f8:	07d0      	lsls	r0, r2, #31
 80117fa:	d404      	bmi.n	8011806 <_fflush_r+0x3a>
 80117fc:	0599      	lsls	r1, r3, #22
 80117fe:	d402      	bmi.n	8011806 <_fflush_r+0x3a>
 8011800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011802:	f7fc ff58 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 8011806:	4628      	mov	r0, r5
 8011808:	4621      	mov	r1, r4
 801180a:	f7ff ff59 	bl	80116c0 <__sflush_r>
 801180e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011810:	07da      	lsls	r2, r3, #31
 8011812:	4605      	mov	r5, r0
 8011814:	d4e0      	bmi.n	80117d8 <_fflush_r+0xc>
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	059b      	lsls	r3, r3, #22
 801181a:	d4dd      	bmi.n	80117d8 <_fflush_r+0xc>
 801181c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801181e:	f7fc ff4b 	bl	800e6b8 <__retarget_lock_release_recursive>
 8011822:	e7d9      	b.n	80117d8 <_fflush_r+0xc>
 8011824:	4b05      	ldr	r3, [pc, #20]	; (801183c <_fflush_r+0x70>)
 8011826:	429c      	cmp	r4, r3
 8011828:	d101      	bne.n	801182e <_fflush_r+0x62>
 801182a:	68ac      	ldr	r4, [r5, #8]
 801182c:	e7df      	b.n	80117ee <_fflush_r+0x22>
 801182e:	4b04      	ldr	r3, [pc, #16]	; (8011840 <_fflush_r+0x74>)
 8011830:	429c      	cmp	r4, r3
 8011832:	bf08      	it	eq
 8011834:	68ec      	ldreq	r4, [r5, #12]
 8011836:	e7da      	b.n	80117ee <_fflush_r+0x22>
 8011838:	080145c8 	.word	0x080145c8
 801183c:	080145e8 	.word	0x080145e8
 8011840:	080145a8 	.word	0x080145a8

08011844 <fiprintf>:
 8011844:	b40e      	push	{r1, r2, r3}
 8011846:	b503      	push	{r0, r1, lr}
 8011848:	4601      	mov	r1, r0
 801184a:	ab03      	add	r3, sp, #12
 801184c:	4805      	ldr	r0, [pc, #20]	; (8011864 <fiprintf+0x20>)
 801184e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011852:	6800      	ldr	r0, [r0, #0]
 8011854:	9301      	str	r3, [sp, #4]
 8011856:	f001 fc57 	bl	8013108 <_vfiprintf_r>
 801185a:	b002      	add	sp, #8
 801185c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011860:	b003      	add	sp, #12
 8011862:	4770      	bx	lr
 8011864:	2000003c 	.word	0x2000003c

08011868 <rshift>:
 8011868:	6903      	ldr	r3, [r0, #16]
 801186a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801186e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011872:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011876:	f100 0414 	add.w	r4, r0, #20
 801187a:	dd45      	ble.n	8011908 <rshift+0xa0>
 801187c:	f011 011f 	ands.w	r1, r1, #31
 8011880:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011884:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011888:	d10c      	bne.n	80118a4 <rshift+0x3c>
 801188a:	f100 0710 	add.w	r7, r0, #16
 801188e:	4629      	mov	r1, r5
 8011890:	42b1      	cmp	r1, r6
 8011892:	d334      	bcc.n	80118fe <rshift+0x96>
 8011894:	1a9b      	subs	r3, r3, r2
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	1eea      	subs	r2, r5, #3
 801189a:	4296      	cmp	r6, r2
 801189c:	bf38      	it	cc
 801189e:	2300      	movcc	r3, #0
 80118a0:	4423      	add	r3, r4
 80118a2:	e015      	b.n	80118d0 <rshift+0x68>
 80118a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80118a8:	f1c1 0820 	rsb	r8, r1, #32
 80118ac:	40cf      	lsrs	r7, r1
 80118ae:	f105 0e04 	add.w	lr, r5, #4
 80118b2:	46a1      	mov	r9, r4
 80118b4:	4576      	cmp	r6, lr
 80118b6:	46f4      	mov	ip, lr
 80118b8:	d815      	bhi.n	80118e6 <rshift+0x7e>
 80118ba:	1a9b      	subs	r3, r3, r2
 80118bc:	009a      	lsls	r2, r3, #2
 80118be:	3a04      	subs	r2, #4
 80118c0:	3501      	adds	r5, #1
 80118c2:	42ae      	cmp	r6, r5
 80118c4:	bf38      	it	cc
 80118c6:	2200      	movcc	r2, #0
 80118c8:	18a3      	adds	r3, r4, r2
 80118ca:	50a7      	str	r7, [r4, r2]
 80118cc:	b107      	cbz	r7, 80118d0 <rshift+0x68>
 80118ce:	3304      	adds	r3, #4
 80118d0:	1b1a      	subs	r2, r3, r4
 80118d2:	42a3      	cmp	r3, r4
 80118d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80118d8:	bf08      	it	eq
 80118da:	2300      	moveq	r3, #0
 80118dc:	6102      	str	r2, [r0, #16]
 80118de:	bf08      	it	eq
 80118e0:	6143      	streq	r3, [r0, #20]
 80118e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e6:	f8dc c000 	ldr.w	ip, [ip]
 80118ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80118ee:	ea4c 0707 	orr.w	r7, ip, r7
 80118f2:	f849 7b04 	str.w	r7, [r9], #4
 80118f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118fa:	40cf      	lsrs	r7, r1
 80118fc:	e7da      	b.n	80118b4 <rshift+0x4c>
 80118fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8011902:	f847 cf04 	str.w	ip, [r7, #4]!
 8011906:	e7c3      	b.n	8011890 <rshift+0x28>
 8011908:	4623      	mov	r3, r4
 801190a:	e7e1      	b.n	80118d0 <rshift+0x68>

0801190c <__hexdig_fun>:
 801190c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011910:	2b09      	cmp	r3, #9
 8011912:	d802      	bhi.n	801191a <__hexdig_fun+0xe>
 8011914:	3820      	subs	r0, #32
 8011916:	b2c0      	uxtb	r0, r0
 8011918:	4770      	bx	lr
 801191a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801191e:	2b05      	cmp	r3, #5
 8011920:	d801      	bhi.n	8011926 <__hexdig_fun+0x1a>
 8011922:	3847      	subs	r0, #71	; 0x47
 8011924:	e7f7      	b.n	8011916 <__hexdig_fun+0xa>
 8011926:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801192a:	2b05      	cmp	r3, #5
 801192c:	d801      	bhi.n	8011932 <__hexdig_fun+0x26>
 801192e:	3827      	subs	r0, #39	; 0x27
 8011930:	e7f1      	b.n	8011916 <__hexdig_fun+0xa>
 8011932:	2000      	movs	r0, #0
 8011934:	4770      	bx	lr
	...

08011938 <__gethex>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	ed2d 8b02 	vpush	{d8}
 8011940:	b089      	sub	sp, #36	; 0x24
 8011942:	ee08 0a10 	vmov	s16, r0
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	4bbc      	ldr	r3, [pc, #752]	; (8011c3c <__gethex+0x304>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	468b      	mov	fp, r1
 8011952:	4690      	mov	r8, r2
 8011954:	f7ee fc4c 	bl	80001f0 <strlen>
 8011958:	9b01      	ldr	r3, [sp, #4]
 801195a:	f8db 2000 	ldr.w	r2, [fp]
 801195e:	4403      	add	r3, r0
 8011960:	4682      	mov	sl, r0
 8011962:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	1c93      	adds	r3, r2, #2
 801196a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801196e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011972:	32fe      	adds	r2, #254	; 0xfe
 8011974:	18d1      	adds	r1, r2, r3
 8011976:	461f      	mov	r7, r3
 8011978:	f813 0b01 	ldrb.w	r0, [r3], #1
 801197c:	9100      	str	r1, [sp, #0]
 801197e:	2830      	cmp	r0, #48	; 0x30
 8011980:	d0f8      	beq.n	8011974 <__gethex+0x3c>
 8011982:	f7ff ffc3 	bl	801190c <__hexdig_fun>
 8011986:	4604      	mov	r4, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	d13a      	bne.n	8011a02 <__gethex+0xca>
 801198c:	9901      	ldr	r1, [sp, #4]
 801198e:	4652      	mov	r2, sl
 8011990:	4638      	mov	r0, r7
 8011992:	f7fd ffda 	bl	800f94a <strncmp>
 8011996:	4605      	mov	r5, r0
 8011998:	2800      	cmp	r0, #0
 801199a:	d168      	bne.n	8011a6e <__gethex+0x136>
 801199c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80119a0:	eb07 060a 	add.w	r6, r7, sl
 80119a4:	f7ff ffb2 	bl	801190c <__hexdig_fun>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d062      	beq.n	8011a72 <__gethex+0x13a>
 80119ac:	4633      	mov	r3, r6
 80119ae:	7818      	ldrb	r0, [r3, #0]
 80119b0:	2830      	cmp	r0, #48	; 0x30
 80119b2:	461f      	mov	r7, r3
 80119b4:	f103 0301 	add.w	r3, r3, #1
 80119b8:	d0f9      	beq.n	80119ae <__gethex+0x76>
 80119ba:	f7ff ffa7 	bl	801190c <__hexdig_fun>
 80119be:	2301      	movs	r3, #1
 80119c0:	fab0 f480 	clz	r4, r0
 80119c4:	0964      	lsrs	r4, r4, #5
 80119c6:	4635      	mov	r5, r6
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	463a      	mov	r2, r7
 80119cc:	4616      	mov	r6, r2
 80119ce:	3201      	adds	r2, #1
 80119d0:	7830      	ldrb	r0, [r6, #0]
 80119d2:	f7ff ff9b 	bl	801190c <__hexdig_fun>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d1f8      	bne.n	80119cc <__gethex+0x94>
 80119da:	9901      	ldr	r1, [sp, #4]
 80119dc:	4652      	mov	r2, sl
 80119de:	4630      	mov	r0, r6
 80119e0:	f7fd ffb3 	bl	800f94a <strncmp>
 80119e4:	b980      	cbnz	r0, 8011a08 <__gethex+0xd0>
 80119e6:	b94d      	cbnz	r5, 80119fc <__gethex+0xc4>
 80119e8:	eb06 050a 	add.w	r5, r6, sl
 80119ec:	462a      	mov	r2, r5
 80119ee:	4616      	mov	r6, r2
 80119f0:	3201      	adds	r2, #1
 80119f2:	7830      	ldrb	r0, [r6, #0]
 80119f4:	f7ff ff8a 	bl	801190c <__hexdig_fun>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d1f8      	bne.n	80119ee <__gethex+0xb6>
 80119fc:	1bad      	subs	r5, r5, r6
 80119fe:	00ad      	lsls	r5, r5, #2
 8011a00:	e004      	b.n	8011a0c <__gethex+0xd4>
 8011a02:	2400      	movs	r4, #0
 8011a04:	4625      	mov	r5, r4
 8011a06:	e7e0      	b.n	80119ca <__gethex+0x92>
 8011a08:	2d00      	cmp	r5, #0
 8011a0a:	d1f7      	bne.n	80119fc <__gethex+0xc4>
 8011a0c:	7833      	ldrb	r3, [r6, #0]
 8011a0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a12:	2b50      	cmp	r3, #80	; 0x50
 8011a14:	d13b      	bne.n	8011a8e <__gethex+0x156>
 8011a16:	7873      	ldrb	r3, [r6, #1]
 8011a18:	2b2b      	cmp	r3, #43	; 0x2b
 8011a1a:	d02c      	beq.n	8011a76 <__gethex+0x13e>
 8011a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8011a1e:	d02e      	beq.n	8011a7e <__gethex+0x146>
 8011a20:	1c71      	adds	r1, r6, #1
 8011a22:	f04f 0900 	mov.w	r9, #0
 8011a26:	7808      	ldrb	r0, [r1, #0]
 8011a28:	f7ff ff70 	bl	801190c <__hexdig_fun>
 8011a2c:	1e43      	subs	r3, r0, #1
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b18      	cmp	r3, #24
 8011a32:	d82c      	bhi.n	8011a8e <__gethex+0x156>
 8011a34:	f1a0 0210 	sub.w	r2, r0, #16
 8011a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a3c:	f7ff ff66 	bl	801190c <__hexdig_fun>
 8011a40:	1e43      	subs	r3, r0, #1
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	2b18      	cmp	r3, #24
 8011a46:	d91d      	bls.n	8011a84 <__gethex+0x14c>
 8011a48:	f1b9 0f00 	cmp.w	r9, #0
 8011a4c:	d000      	beq.n	8011a50 <__gethex+0x118>
 8011a4e:	4252      	negs	r2, r2
 8011a50:	4415      	add	r5, r2
 8011a52:	f8cb 1000 	str.w	r1, [fp]
 8011a56:	b1e4      	cbz	r4, 8011a92 <__gethex+0x15a>
 8011a58:	9b00      	ldr	r3, [sp, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bf14      	ite	ne
 8011a5e:	2700      	movne	r7, #0
 8011a60:	2706      	moveq	r7, #6
 8011a62:	4638      	mov	r0, r7
 8011a64:	b009      	add	sp, #36	; 0x24
 8011a66:	ecbd 8b02 	vpop	{d8}
 8011a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6e:	463e      	mov	r6, r7
 8011a70:	4625      	mov	r5, r4
 8011a72:	2401      	movs	r4, #1
 8011a74:	e7ca      	b.n	8011a0c <__gethex+0xd4>
 8011a76:	f04f 0900 	mov.w	r9, #0
 8011a7a:	1cb1      	adds	r1, r6, #2
 8011a7c:	e7d3      	b.n	8011a26 <__gethex+0xee>
 8011a7e:	f04f 0901 	mov.w	r9, #1
 8011a82:	e7fa      	b.n	8011a7a <__gethex+0x142>
 8011a84:	230a      	movs	r3, #10
 8011a86:	fb03 0202 	mla	r2, r3, r2, r0
 8011a8a:	3a10      	subs	r2, #16
 8011a8c:	e7d4      	b.n	8011a38 <__gethex+0x100>
 8011a8e:	4631      	mov	r1, r6
 8011a90:	e7df      	b.n	8011a52 <__gethex+0x11a>
 8011a92:	1bf3      	subs	r3, r6, r7
 8011a94:	3b01      	subs	r3, #1
 8011a96:	4621      	mov	r1, r4
 8011a98:	2b07      	cmp	r3, #7
 8011a9a:	dc0b      	bgt.n	8011ab4 <__gethex+0x17c>
 8011a9c:	ee18 0a10 	vmov	r0, s16
 8011aa0:	f000 faea 	bl	8012078 <_Balloc>
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	b940      	cbnz	r0, 8011aba <__gethex+0x182>
 8011aa8:	4b65      	ldr	r3, [pc, #404]	; (8011c40 <__gethex+0x308>)
 8011aaa:	4602      	mov	r2, r0
 8011aac:	21de      	movs	r1, #222	; 0xde
 8011aae:	4865      	ldr	r0, [pc, #404]	; (8011c44 <__gethex+0x30c>)
 8011ab0:	f7fe ff60 	bl	8010974 <__assert_func>
 8011ab4:	3101      	adds	r1, #1
 8011ab6:	105b      	asrs	r3, r3, #1
 8011ab8:	e7ee      	b.n	8011a98 <__gethex+0x160>
 8011aba:	f100 0914 	add.w	r9, r0, #20
 8011abe:	f04f 0b00 	mov.w	fp, #0
 8011ac2:	f1ca 0301 	rsb	r3, sl, #1
 8011ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011aca:	f8cd b000 	str.w	fp, [sp]
 8011ace:	9306      	str	r3, [sp, #24]
 8011ad0:	42b7      	cmp	r7, r6
 8011ad2:	d340      	bcc.n	8011b56 <__gethex+0x21e>
 8011ad4:	9802      	ldr	r0, [sp, #8]
 8011ad6:	9b00      	ldr	r3, [sp, #0]
 8011ad8:	f840 3b04 	str.w	r3, [r0], #4
 8011adc:	eba0 0009 	sub.w	r0, r0, r9
 8011ae0:	1080      	asrs	r0, r0, #2
 8011ae2:	0146      	lsls	r6, r0, #5
 8011ae4:	6120      	str	r0, [r4, #16]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f000 fbbc 	bl	8012264 <__hi0bits>
 8011aec:	1a30      	subs	r0, r6, r0
 8011aee:	f8d8 6000 	ldr.w	r6, [r8]
 8011af2:	42b0      	cmp	r0, r6
 8011af4:	dd63      	ble.n	8011bbe <__gethex+0x286>
 8011af6:	1b87      	subs	r7, r0, r6
 8011af8:	4639      	mov	r1, r7
 8011afa:	4620      	mov	r0, r4
 8011afc:	f000 ff56 	bl	80129ac <__any_on>
 8011b00:	4682      	mov	sl, r0
 8011b02:	b1a8      	cbz	r0, 8011b30 <__gethex+0x1f8>
 8011b04:	1e7b      	subs	r3, r7, #1
 8011b06:	1159      	asrs	r1, r3, #5
 8011b08:	f003 021f 	and.w	r2, r3, #31
 8011b0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011b10:	f04f 0a01 	mov.w	sl, #1
 8011b14:	fa0a f202 	lsl.w	r2, sl, r2
 8011b18:	420a      	tst	r2, r1
 8011b1a:	d009      	beq.n	8011b30 <__gethex+0x1f8>
 8011b1c:	4553      	cmp	r3, sl
 8011b1e:	dd05      	ble.n	8011b2c <__gethex+0x1f4>
 8011b20:	1eb9      	subs	r1, r7, #2
 8011b22:	4620      	mov	r0, r4
 8011b24:	f000 ff42 	bl	80129ac <__any_on>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d145      	bne.n	8011bb8 <__gethex+0x280>
 8011b2c:	f04f 0a02 	mov.w	sl, #2
 8011b30:	4639      	mov	r1, r7
 8011b32:	4620      	mov	r0, r4
 8011b34:	f7ff fe98 	bl	8011868 <rshift>
 8011b38:	443d      	add	r5, r7
 8011b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b3e:	42ab      	cmp	r3, r5
 8011b40:	da4c      	bge.n	8011bdc <__gethex+0x2a4>
 8011b42:	ee18 0a10 	vmov	r0, s16
 8011b46:	4621      	mov	r1, r4
 8011b48:	f000 fad6 	bl	80120f8 <_Bfree>
 8011b4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b4e:	2300      	movs	r3, #0
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	27a3      	movs	r7, #163	; 0xa3
 8011b54:	e785      	b.n	8011a62 <__gethex+0x12a>
 8011b56:	1e73      	subs	r3, r6, #1
 8011b58:	9a05      	ldr	r2, [sp, #20]
 8011b5a:	9303      	str	r3, [sp, #12]
 8011b5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d019      	beq.n	8011b98 <__gethex+0x260>
 8011b64:	f1bb 0f20 	cmp.w	fp, #32
 8011b68:	d107      	bne.n	8011b7a <__gethex+0x242>
 8011b6a:	9b02      	ldr	r3, [sp, #8]
 8011b6c:	9a00      	ldr	r2, [sp, #0]
 8011b6e:	f843 2b04 	str.w	r2, [r3], #4
 8011b72:	9302      	str	r3, [sp, #8]
 8011b74:	2300      	movs	r3, #0
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	469b      	mov	fp, r3
 8011b7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011b7e:	f7ff fec5 	bl	801190c <__hexdig_fun>
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	f000 000f 	and.w	r0, r0, #15
 8011b88:	fa00 f00b 	lsl.w	r0, r0, fp
 8011b8c:	4303      	orrs	r3, r0
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	f10b 0b04 	add.w	fp, fp, #4
 8011b94:	9b03      	ldr	r3, [sp, #12]
 8011b96:	e00d      	b.n	8011bb4 <__gethex+0x27c>
 8011b98:	9b03      	ldr	r3, [sp, #12]
 8011b9a:	9a06      	ldr	r2, [sp, #24]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	42bb      	cmp	r3, r7
 8011ba0:	d3e0      	bcc.n	8011b64 <__gethex+0x22c>
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	9901      	ldr	r1, [sp, #4]
 8011ba6:	9307      	str	r3, [sp, #28]
 8011ba8:	4652      	mov	r2, sl
 8011baa:	f7fd fece 	bl	800f94a <strncmp>
 8011bae:	9b07      	ldr	r3, [sp, #28]
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d1d7      	bne.n	8011b64 <__gethex+0x22c>
 8011bb4:	461e      	mov	r6, r3
 8011bb6:	e78b      	b.n	8011ad0 <__gethex+0x198>
 8011bb8:	f04f 0a03 	mov.w	sl, #3
 8011bbc:	e7b8      	b.n	8011b30 <__gethex+0x1f8>
 8011bbe:	da0a      	bge.n	8011bd6 <__gethex+0x29e>
 8011bc0:	1a37      	subs	r7, r6, r0
 8011bc2:	4621      	mov	r1, r4
 8011bc4:	ee18 0a10 	vmov	r0, s16
 8011bc8:	463a      	mov	r2, r7
 8011bca:	f000 fcb1 	bl	8012530 <__lshift>
 8011bce:	1bed      	subs	r5, r5, r7
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	f100 0914 	add.w	r9, r0, #20
 8011bd6:	f04f 0a00 	mov.w	sl, #0
 8011bda:	e7ae      	b.n	8011b3a <__gethex+0x202>
 8011bdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011be0:	42a8      	cmp	r0, r5
 8011be2:	dd72      	ble.n	8011cca <__gethex+0x392>
 8011be4:	1b45      	subs	r5, r0, r5
 8011be6:	42ae      	cmp	r6, r5
 8011be8:	dc36      	bgt.n	8011c58 <__gethex+0x320>
 8011bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d02a      	beq.n	8011c48 <__gethex+0x310>
 8011bf2:	2b03      	cmp	r3, #3
 8011bf4:	d02c      	beq.n	8011c50 <__gethex+0x318>
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d115      	bne.n	8011c26 <__gethex+0x2ee>
 8011bfa:	42ae      	cmp	r6, r5
 8011bfc:	d113      	bne.n	8011c26 <__gethex+0x2ee>
 8011bfe:	2e01      	cmp	r6, #1
 8011c00:	d10b      	bne.n	8011c1a <__gethex+0x2e2>
 8011c02:	9a04      	ldr	r2, [sp, #16]
 8011c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	6123      	str	r3, [r4, #16]
 8011c0e:	f8c9 3000 	str.w	r3, [r9]
 8011c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c14:	2762      	movs	r7, #98	; 0x62
 8011c16:	601c      	str	r4, [r3, #0]
 8011c18:	e723      	b.n	8011a62 <__gethex+0x12a>
 8011c1a:	1e71      	subs	r1, r6, #1
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f000 fec5 	bl	80129ac <__any_on>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d1ed      	bne.n	8011c02 <__gethex+0x2ca>
 8011c26:	ee18 0a10 	vmov	r0, s16
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	f000 fa64 	bl	80120f8 <_Bfree>
 8011c30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c32:	2300      	movs	r3, #0
 8011c34:	6013      	str	r3, [r2, #0]
 8011c36:	2750      	movs	r7, #80	; 0x50
 8011c38:	e713      	b.n	8011a62 <__gethex+0x12a>
 8011c3a:	bf00      	nop
 8011c3c:	080148d4 	.word	0x080148d4
 8011c40:	08014858 	.word	0x08014858
 8011c44:	08014869 	.word	0x08014869
 8011c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1eb      	bne.n	8011c26 <__gethex+0x2ee>
 8011c4e:	e7d8      	b.n	8011c02 <__gethex+0x2ca>
 8011c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1d5      	bne.n	8011c02 <__gethex+0x2ca>
 8011c56:	e7e6      	b.n	8011c26 <__gethex+0x2ee>
 8011c58:	1e6f      	subs	r7, r5, #1
 8011c5a:	f1ba 0f00 	cmp.w	sl, #0
 8011c5e:	d131      	bne.n	8011cc4 <__gethex+0x38c>
 8011c60:	b127      	cbz	r7, 8011c6c <__gethex+0x334>
 8011c62:	4639      	mov	r1, r7
 8011c64:	4620      	mov	r0, r4
 8011c66:	f000 fea1 	bl	80129ac <__any_on>
 8011c6a:	4682      	mov	sl, r0
 8011c6c:	117b      	asrs	r3, r7, #5
 8011c6e:	2101      	movs	r1, #1
 8011c70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011c74:	f007 071f 	and.w	r7, r7, #31
 8011c78:	fa01 f707 	lsl.w	r7, r1, r7
 8011c7c:	421f      	tst	r7, r3
 8011c7e:	4629      	mov	r1, r5
 8011c80:	4620      	mov	r0, r4
 8011c82:	bf18      	it	ne
 8011c84:	f04a 0a02 	orrne.w	sl, sl, #2
 8011c88:	1b76      	subs	r6, r6, r5
 8011c8a:	f7ff fded 	bl	8011868 <rshift>
 8011c8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c92:	2702      	movs	r7, #2
 8011c94:	f1ba 0f00 	cmp.w	sl, #0
 8011c98:	d048      	beq.n	8011d2c <__gethex+0x3f4>
 8011c9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c9e:	2b02      	cmp	r3, #2
 8011ca0:	d015      	beq.n	8011cce <__gethex+0x396>
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d017      	beq.n	8011cd6 <__gethex+0x39e>
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d109      	bne.n	8011cbe <__gethex+0x386>
 8011caa:	f01a 0f02 	tst.w	sl, #2
 8011cae:	d006      	beq.n	8011cbe <__gethex+0x386>
 8011cb0:	f8d9 0000 	ldr.w	r0, [r9]
 8011cb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8011cb8:	f01a 0f01 	tst.w	sl, #1
 8011cbc:	d10e      	bne.n	8011cdc <__gethex+0x3a4>
 8011cbe:	f047 0710 	orr.w	r7, r7, #16
 8011cc2:	e033      	b.n	8011d2c <__gethex+0x3f4>
 8011cc4:	f04f 0a01 	mov.w	sl, #1
 8011cc8:	e7d0      	b.n	8011c6c <__gethex+0x334>
 8011cca:	2701      	movs	r7, #1
 8011ccc:	e7e2      	b.n	8011c94 <__gethex+0x35c>
 8011cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cd0:	f1c3 0301 	rsb	r3, r3, #1
 8011cd4:	9315      	str	r3, [sp, #84]	; 0x54
 8011cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d0f0      	beq.n	8011cbe <__gethex+0x386>
 8011cdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ce0:	f104 0314 	add.w	r3, r4, #20
 8011ce4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ce8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011cec:	f04f 0c00 	mov.w	ip, #0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011cfa:	d01c      	beq.n	8011d36 <__gethex+0x3fe>
 8011cfc:	3201      	adds	r2, #1
 8011cfe:	6002      	str	r2, [r0, #0]
 8011d00:	2f02      	cmp	r7, #2
 8011d02:	f104 0314 	add.w	r3, r4, #20
 8011d06:	d13f      	bne.n	8011d88 <__gethex+0x450>
 8011d08:	f8d8 2000 	ldr.w	r2, [r8]
 8011d0c:	3a01      	subs	r2, #1
 8011d0e:	42b2      	cmp	r2, r6
 8011d10:	d10a      	bne.n	8011d28 <__gethex+0x3f0>
 8011d12:	1171      	asrs	r1, r6, #5
 8011d14:	2201      	movs	r2, #1
 8011d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d1a:	f006 061f 	and.w	r6, r6, #31
 8011d1e:	fa02 f606 	lsl.w	r6, r2, r6
 8011d22:	421e      	tst	r6, r3
 8011d24:	bf18      	it	ne
 8011d26:	4617      	movne	r7, r2
 8011d28:	f047 0720 	orr.w	r7, r7, #32
 8011d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d2e:	601c      	str	r4, [r3, #0]
 8011d30:	9b04      	ldr	r3, [sp, #16]
 8011d32:	601d      	str	r5, [r3, #0]
 8011d34:	e695      	b.n	8011a62 <__gethex+0x12a>
 8011d36:	4299      	cmp	r1, r3
 8011d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d3c:	d8d8      	bhi.n	8011cf0 <__gethex+0x3b8>
 8011d3e:	68a3      	ldr	r3, [r4, #8]
 8011d40:	459b      	cmp	fp, r3
 8011d42:	db19      	blt.n	8011d78 <__gethex+0x440>
 8011d44:	6861      	ldr	r1, [r4, #4]
 8011d46:	ee18 0a10 	vmov	r0, s16
 8011d4a:	3101      	adds	r1, #1
 8011d4c:	f000 f994 	bl	8012078 <_Balloc>
 8011d50:	4681      	mov	r9, r0
 8011d52:	b918      	cbnz	r0, 8011d5c <__gethex+0x424>
 8011d54:	4b1a      	ldr	r3, [pc, #104]	; (8011dc0 <__gethex+0x488>)
 8011d56:	4602      	mov	r2, r0
 8011d58:	2184      	movs	r1, #132	; 0x84
 8011d5a:	e6a8      	b.n	8011aae <__gethex+0x176>
 8011d5c:	6922      	ldr	r2, [r4, #16]
 8011d5e:	3202      	adds	r2, #2
 8011d60:	f104 010c 	add.w	r1, r4, #12
 8011d64:	0092      	lsls	r2, r2, #2
 8011d66:	300c      	adds	r0, #12
 8011d68:	f7fc fcb8 	bl	800e6dc <memcpy>
 8011d6c:	4621      	mov	r1, r4
 8011d6e:	ee18 0a10 	vmov	r0, s16
 8011d72:	f000 f9c1 	bl	80120f8 <_Bfree>
 8011d76:	464c      	mov	r4, r9
 8011d78:	6923      	ldr	r3, [r4, #16]
 8011d7a:	1c5a      	adds	r2, r3, #1
 8011d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d80:	6122      	str	r2, [r4, #16]
 8011d82:	2201      	movs	r2, #1
 8011d84:	615a      	str	r2, [r3, #20]
 8011d86:	e7bb      	b.n	8011d00 <__gethex+0x3c8>
 8011d88:	6922      	ldr	r2, [r4, #16]
 8011d8a:	455a      	cmp	r2, fp
 8011d8c:	dd0b      	ble.n	8011da6 <__gethex+0x46e>
 8011d8e:	2101      	movs	r1, #1
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7ff fd69 	bl	8011868 <rshift>
 8011d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d9a:	3501      	adds	r5, #1
 8011d9c:	42ab      	cmp	r3, r5
 8011d9e:	f6ff aed0 	blt.w	8011b42 <__gethex+0x20a>
 8011da2:	2701      	movs	r7, #1
 8011da4:	e7c0      	b.n	8011d28 <__gethex+0x3f0>
 8011da6:	f016 061f 	ands.w	r6, r6, #31
 8011daa:	d0fa      	beq.n	8011da2 <__gethex+0x46a>
 8011dac:	449a      	add	sl, r3
 8011dae:	f1c6 0620 	rsb	r6, r6, #32
 8011db2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011db6:	f000 fa55 	bl	8012264 <__hi0bits>
 8011dba:	42b0      	cmp	r0, r6
 8011dbc:	dbe7      	blt.n	8011d8e <__gethex+0x456>
 8011dbe:	e7f0      	b.n	8011da2 <__gethex+0x46a>
 8011dc0:	08014858 	.word	0x08014858

08011dc4 <L_shift>:
 8011dc4:	f1c2 0208 	rsb	r2, r2, #8
 8011dc8:	0092      	lsls	r2, r2, #2
 8011dca:	b570      	push	{r4, r5, r6, lr}
 8011dcc:	f1c2 0620 	rsb	r6, r2, #32
 8011dd0:	6843      	ldr	r3, [r0, #4]
 8011dd2:	6804      	ldr	r4, [r0, #0]
 8011dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8011dd8:	432c      	orrs	r4, r5
 8011dda:	40d3      	lsrs	r3, r2
 8011ddc:	6004      	str	r4, [r0, #0]
 8011dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8011de2:	4288      	cmp	r0, r1
 8011de4:	d3f4      	bcc.n	8011dd0 <L_shift+0xc>
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <__match>:
 8011de8:	b530      	push	{r4, r5, lr}
 8011dea:	6803      	ldr	r3, [r0, #0]
 8011dec:	3301      	adds	r3, #1
 8011dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011df2:	b914      	cbnz	r4, 8011dfa <__match+0x12>
 8011df4:	6003      	str	r3, [r0, #0]
 8011df6:	2001      	movs	r0, #1
 8011df8:	bd30      	pop	{r4, r5, pc}
 8011dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011e02:	2d19      	cmp	r5, #25
 8011e04:	bf98      	it	ls
 8011e06:	3220      	addls	r2, #32
 8011e08:	42a2      	cmp	r2, r4
 8011e0a:	d0f0      	beq.n	8011dee <__match+0x6>
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	e7f3      	b.n	8011df8 <__match+0x10>

08011e10 <__hexnan>:
 8011e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	680b      	ldr	r3, [r1, #0]
 8011e16:	6801      	ldr	r1, [r0, #0]
 8011e18:	115e      	asrs	r6, r3, #5
 8011e1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e1e:	f013 031f 	ands.w	r3, r3, #31
 8011e22:	b087      	sub	sp, #28
 8011e24:	bf18      	it	ne
 8011e26:	3604      	addne	r6, #4
 8011e28:	2500      	movs	r5, #0
 8011e2a:	1f37      	subs	r7, r6, #4
 8011e2c:	4682      	mov	sl, r0
 8011e2e:	4690      	mov	r8, r2
 8011e30:	9301      	str	r3, [sp, #4]
 8011e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e36:	46b9      	mov	r9, r7
 8011e38:	463c      	mov	r4, r7
 8011e3a:	9502      	str	r5, [sp, #8]
 8011e3c:	46ab      	mov	fp, r5
 8011e3e:	784a      	ldrb	r2, [r1, #1]
 8011e40:	1c4b      	adds	r3, r1, #1
 8011e42:	9303      	str	r3, [sp, #12]
 8011e44:	b342      	cbz	r2, 8011e98 <__hexnan+0x88>
 8011e46:	4610      	mov	r0, r2
 8011e48:	9105      	str	r1, [sp, #20]
 8011e4a:	9204      	str	r2, [sp, #16]
 8011e4c:	f7ff fd5e 	bl	801190c <__hexdig_fun>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d14f      	bne.n	8011ef4 <__hexnan+0xe4>
 8011e54:	9a04      	ldr	r2, [sp, #16]
 8011e56:	9905      	ldr	r1, [sp, #20]
 8011e58:	2a20      	cmp	r2, #32
 8011e5a:	d818      	bhi.n	8011e8e <__hexnan+0x7e>
 8011e5c:	9b02      	ldr	r3, [sp, #8]
 8011e5e:	459b      	cmp	fp, r3
 8011e60:	dd13      	ble.n	8011e8a <__hexnan+0x7a>
 8011e62:	454c      	cmp	r4, r9
 8011e64:	d206      	bcs.n	8011e74 <__hexnan+0x64>
 8011e66:	2d07      	cmp	r5, #7
 8011e68:	dc04      	bgt.n	8011e74 <__hexnan+0x64>
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	4649      	mov	r1, r9
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f7ff ffa8 	bl	8011dc4 <L_shift>
 8011e74:	4544      	cmp	r4, r8
 8011e76:	d950      	bls.n	8011f1a <__hexnan+0x10a>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8011e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e82:	f8cd b008 	str.w	fp, [sp, #8]
 8011e86:	464c      	mov	r4, r9
 8011e88:	461d      	mov	r5, r3
 8011e8a:	9903      	ldr	r1, [sp, #12]
 8011e8c:	e7d7      	b.n	8011e3e <__hexnan+0x2e>
 8011e8e:	2a29      	cmp	r2, #41	; 0x29
 8011e90:	d156      	bne.n	8011f40 <__hexnan+0x130>
 8011e92:	3102      	adds	r1, #2
 8011e94:	f8ca 1000 	str.w	r1, [sl]
 8011e98:	f1bb 0f00 	cmp.w	fp, #0
 8011e9c:	d050      	beq.n	8011f40 <__hexnan+0x130>
 8011e9e:	454c      	cmp	r4, r9
 8011ea0:	d206      	bcs.n	8011eb0 <__hexnan+0xa0>
 8011ea2:	2d07      	cmp	r5, #7
 8011ea4:	dc04      	bgt.n	8011eb0 <__hexnan+0xa0>
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff ff8a 	bl	8011dc4 <L_shift>
 8011eb0:	4544      	cmp	r4, r8
 8011eb2:	d934      	bls.n	8011f1e <__hexnan+0x10e>
 8011eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8011eb8:	4623      	mov	r3, r4
 8011eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8011ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ec2:	429f      	cmp	r7, r3
 8011ec4:	d2f9      	bcs.n	8011eba <__hexnan+0xaa>
 8011ec6:	1b3b      	subs	r3, r7, r4
 8011ec8:	f023 0303 	bic.w	r3, r3, #3
 8011ecc:	3304      	adds	r3, #4
 8011ece:	3401      	adds	r4, #1
 8011ed0:	3e03      	subs	r6, #3
 8011ed2:	42b4      	cmp	r4, r6
 8011ed4:	bf88      	it	hi
 8011ed6:	2304      	movhi	r3, #4
 8011ed8:	4443      	add	r3, r8
 8011eda:	2200      	movs	r2, #0
 8011edc:	f843 2b04 	str.w	r2, [r3], #4
 8011ee0:	429f      	cmp	r7, r3
 8011ee2:	d2fb      	bcs.n	8011edc <__hexnan+0xcc>
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	b91b      	cbnz	r3, 8011ef0 <__hexnan+0xe0>
 8011ee8:	4547      	cmp	r7, r8
 8011eea:	d127      	bne.n	8011f3c <__hexnan+0x12c>
 8011eec:	2301      	movs	r3, #1
 8011eee:	603b      	str	r3, [r7, #0]
 8011ef0:	2005      	movs	r0, #5
 8011ef2:	e026      	b.n	8011f42 <__hexnan+0x132>
 8011ef4:	3501      	adds	r5, #1
 8011ef6:	2d08      	cmp	r5, #8
 8011ef8:	f10b 0b01 	add.w	fp, fp, #1
 8011efc:	dd06      	ble.n	8011f0c <__hexnan+0xfc>
 8011efe:	4544      	cmp	r4, r8
 8011f00:	d9c3      	bls.n	8011e8a <__hexnan+0x7a>
 8011f02:	2300      	movs	r3, #0
 8011f04:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f08:	2501      	movs	r5, #1
 8011f0a:	3c04      	subs	r4, #4
 8011f0c:	6822      	ldr	r2, [r4, #0]
 8011f0e:	f000 000f 	and.w	r0, r0, #15
 8011f12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011f16:	6022      	str	r2, [r4, #0]
 8011f18:	e7b7      	b.n	8011e8a <__hexnan+0x7a>
 8011f1a:	2508      	movs	r5, #8
 8011f1c:	e7b5      	b.n	8011e8a <__hexnan+0x7a>
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d0df      	beq.n	8011ee4 <__hexnan+0xd4>
 8011f24:	f04f 32ff 	mov.w	r2, #4294967295
 8011f28:	f1c3 0320 	rsb	r3, r3, #32
 8011f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f34:	401a      	ands	r2, r3
 8011f36:	f846 2c04 	str.w	r2, [r6, #-4]
 8011f3a:	e7d3      	b.n	8011ee4 <__hexnan+0xd4>
 8011f3c:	3f04      	subs	r7, #4
 8011f3e:	e7d1      	b.n	8011ee4 <__hexnan+0xd4>
 8011f40:	2004      	movs	r0, #4
 8011f42:	b007      	add	sp, #28
 8011f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f48 <_localeconv_r>:
 8011f48:	4800      	ldr	r0, [pc, #0]	; (8011f4c <_localeconv_r+0x4>)
 8011f4a:	4770      	bx	lr
 8011f4c:	20000194 	.word	0x20000194

08011f50 <_lseek_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	4d07      	ldr	r5, [pc, #28]	; (8011f70 <_lseek_r+0x20>)
 8011f54:	4604      	mov	r4, r0
 8011f56:	4608      	mov	r0, r1
 8011f58:	4611      	mov	r1, r2
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	602a      	str	r2, [r5, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	f7f1 f884 	bl	800306c <_lseek>
 8011f64:	1c43      	adds	r3, r0, #1
 8011f66:	d102      	bne.n	8011f6e <_lseek_r+0x1e>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	b103      	cbz	r3, 8011f6e <_lseek_r+0x1e>
 8011f6c:	6023      	str	r3, [r4, #0]
 8011f6e:	bd38      	pop	{r3, r4, r5, pc}
 8011f70:	200056a8 	.word	0x200056a8

08011f74 <__swhatbuf_r>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	460e      	mov	r6, r1
 8011f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	b096      	sub	sp, #88	; 0x58
 8011f80:	4614      	mov	r4, r2
 8011f82:	461d      	mov	r5, r3
 8011f84:	da07      	bge.n	8011f96 <__swhatbuf_r+0x22>
 8011f86:	2300      	movs	r3, #0
 8011f88:	602b      	str	r3, [r5, #0]
 8011f8a:	89b3      	ldrh	r3, [r6, #12]
 8011f8c:	061a      	lsls	r2, r3, #24
 8011f8e:	d410      	bmi.n	8011fb2 <__swhatbuf_r+0x3e>
 8011f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f94:	e00e      	b.n	8011fb4 <__swhatbuf_r+0x40>
 8011f96:	466a      	mov	r2, sp
 8011f98:	f001 fbd0 	bl	801373c <_fstat_r>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	dbf2      	blt.n	8011f86 <__swhatbuf_r+0x12>
 8011fa0:	9a01      	ldr	r2, [sp, #4]
 8011fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011faa:	425a      	negs	r2, r3
 8011fac:	415a      	adcs	r2, r3
 8011fae:	602a      	str	r2, [r5, #0]
 8011fb0:	e7ee      	b.n	8011f90 <__swhatbuf_r+0x1c>
 8011fb2:	2340      	movs	r3, #64	; 0x40
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	6023      	str	r3, [r4, #0]
 8011fb8:	b016      	add	sp, #88	; 0x58
 8011fba:	bd70      	pop	{r4, r5, r6, pc}

08011fbc <__smakebuf_r>:
 8011fbc:	898b      	ldrh	r3, [r1, #12]
 8011fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fc0:	079d      	lsls	r5, r3, #30
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	d507      	bpl.n	8011fd8 <__smakebuf_r+0x1c>
 8011fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	6123      	str	r3, [r4, #16]
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	6163      	str	r3, [r4, #20]
 8011fd4:	b002      	add	sp, #8
 8011fd6:	bd70      	pop	{r4, r5, r6, pc}
 8011fd8:	ab01      	add	r3, sp, #4
 8011fda:	466a      	mov	r2, sp
 8011fdc:	f7ff ffca 	bl	8011f74 <__swhatbuf_r>
 8011fe0:	9900      	ldr	r1, [sp, #0]
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f7fc fbf9 	bl	800e7dc <_malloc_r>
 8011fea:	b948      	cbnz	r0, 8012000 <__smakebuf_r+0x44>
 8011fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff0:	059a      	lsls	r2, r3, #22
 8011ff2:	d4ef      	bmi.n	8011fd4 <__smakebuf_r+0x18>
 8011ff4:	f023 0303 	bic.w	r3, r3, #3
 8011ff8:	f043 0302 	orr.w	r3, r3, #2
 8011ffc:	81a3      	strh	r3, [r4, #12]
 8011ffe:	e7e3      	b.n	8011fc8 <__smakebuf_r+0xc>
 8012000:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <__smakebuf_r+0x7c>)
 8012002:	62b3      	str	r3, [r6, #40]	; 0x28
 8012004:	89a3      	ldrh	r3, [r4, #12]
 8012006:	6020      	str	r0, [r4, #0]
 8012008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	9b00      	ldr	r3, [sp, #0]
 8012010:	6163      	str	r3, [r4, #20]
 8012012:	9b01      	ldr	r3, [sp, #4]
 8012014:	6120      	str	r0, [r4, #16]
 8012016:	b15b      	cbz	r3, 8012030 <__smakebuf_r+0x74>
 8012018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801201c:	4630      	mov	r0, r6
 801201e:	f001 fb9f 	bl	8013760 <_isatty_r>
 8012022:	b128      	cbz	r0, 8012030 <__smakebuf_r+0x74>
 8012024:	89a3      	ldrh	r3, [r4, #12]
 8012026:	f023 0303 	bic.w	r3, r3, #3
 801202a:	f043 0301 	orr.w	r3, r3, #1
 801202e:	81a3      	strh	r3, [r4, #12]
 8012030:	89a0      	ldrh	r0, [r4, #12]
 8012032:	4305      	orrs	r5, r0
 8012034:	81a5      	strh	r5, [r4, #12]
 8012036:	e7cd      	b.n	8011fd4 <__smakebuf_r+0x18>
 8012038:	0800e4c9 	.word	0x0800e4c9

0801203c <__ascii_mbtowc>:
 801203c:	b082      	sub	sp, #8
 801203e:	b901      	cbnz	r1, 8012042 <__ascii_mbtowc+0x6>
 8012040:	a901      	add	r1, sp, #4
 8012042:	b142      	cbz	r2, 8012056 <__ascii_mbtowc+0x1a>
 8012044:	b14b      	cbz	r3, 801205a <__ascii_mbtowc+0x1e>
 8012046:	7813      	ldrb	r3, [r2, #0]
 8012048:	600b      	str	r3, [r1, #0]
 801204a:	7812      	ldrb	r2, [r2, #0]
 801204c:	1e10      	subs	r0, r2, #0
 801204e:	bf18      	it	ne
 8012050:	2001      	movne	r0, #1
 8012052:	b002      	add	sp, #8
 8012054:	4770      	bx	lr
 8012056:	4610      	mov	r0, r2
 8012058:	e7fb      	b.n	8012052 <__ascii_mbtowc+0x16>
 801205a:	f06f 0001 	mvn.w	r0, #1
 801205e:	e7f8      	b.n	8012052 <__ascii_mbtowc+0x16>

08012060 <__malloc_lock>:
 8012060:	4801      	ldr	r0, [pc, #4]	; (8012068 <__malloc_lock+0x8>)
 8012062:	f7fc bb28 	b.w	800e6b6 <__retarget_lock_acquire_recursive>
 8012066:	bf00      	nop
 8012068:	200056a0 	.word	0x200056a0

0801206c <__malloc_unlock>:
 801206c:	4801      	ldr	r0, [pc, #4]	; (8012074 <__malloc_unlock+0x8>)
 801206e:	f7fc bb23 	b.w	800e6b8 <__retarget_lock_release_recursive>
 8012072:	bf00      	nop
 8012074:	200056a0 	.word	0x200056a0

08012078 <_Balloc>:
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801207c:	4604      	mov	r4, r0
 801207e:	460d      	mov	r5, r1
 8012080:	b976      	cbnz	r6, 80120a0 <_Balloc+0x28>
 8012082:	2010      	movs	r0, #16
 8012084:	f7fc fb1a 	bl	800e6bc <malloc>
 8012088:	4602      	mov	r2, r0
 801208a:	6260      	str	r0, [r4, #36]	; 0x24
 801208c:	b920      	cbnz	r0, 8012098 <_Balloc+0x20>
 801208e:	4b18      	ldr	r3, [pc, #96]	; (80120f0 <_Balloc+0x78>)
 8012090:	4818      	ldr	r0, [pc, #96]	; (80120f4 <_Balloc+0x7c>)
 8012092:	2166      	movs	r1, #102	; 0x66
 8012094:	f7fe fc6e 	bl	8010974 <__assert_func>
 8012098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801209c:	6006      	str	r6, [r0, #0]
 801209e:	60c6      	str	r6, [r0, #12]
 80120a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80120a2:	68f3      	ldr	r3, [r6, #12]
 80120a4:	b183      	cbz	r3, 80120c8 <_Balloc+0x50>
 80120a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120ae:	b9b8      	cbnz	r0, 80120e0 <_Balloc+0x68>
 80120b0:	2101      	movs	r1, #1
 80120b2:	fa01 f605 	lsl.w	r6, r1, r5
 80120b6:	1d72      	adds	r2, r6, #5
 80120b8:	0092      	lsls	r2, r2, #2
 80120ba:	4620      	mov	r0, r4
 80120bc:	f000 fc97 	bl	80129ee <_calloc_r>
 80120c0:	b160      	cbz	r0, 80120dc <_Balloc+0x64>
 80120c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120c6:	e00e      	b.n	80120e6 <_Balloc+0x6e>
 80120c8:	2221      	movs	r2, #33	; 0x21
 80120ca:	2104      	movs	r1, #4
 80120cc:	4620      	mov	r0, r4
 80120ce:	f000 fc8e 	bl	80129ee <_calloc_r>
 80120d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120d4:	60f0      	str	r0, [r6, #12]
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1e4      	bne.n	80120a6 <_Balloc+0x2e>
 80120dc:	2000      	movs	r0, #0
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	6802      	ldr	r2, [r0, #0]
 80120e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120e6:	2300      	movs	r3, #0
 80120e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120ec:	e7f7      	b.n	80120de <_Balloc+0x66>
 80120ee:	bf00      	nop
 80120f0:	080147e2 	.word	0x080147e2
 80120f4:	080148e8 	.word	0x080148e8

080120f8 <_Bfree>:
 80120f8:	b570      	push	{r4, r5, r6, lr}
 80120fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120fc:	4605      	mov	r5, r0
 80120fe:	460c      	mov	r4, r1
 8012100:	b976      	cbnz	r6, 8012120 <_Bfree+0x28>
 8012102:	2010      	movs	r0, #16
 8012104:	f7fc fada 	bl	800e6bc <malloc>
 8012108:	4602      	mov	r2, r0
 801210a:	6268      	str	r0, [r5, #36]	; 0x24
 801210c:	b920      	cbnz	r0, 8012118 <_Bfree+0x20>
 801210e:	4b09      	ldr	r3, [pc, #36]	; (8012134 <_Bfree+0x3c>)
 8012110:	4809      	ldr	r0, [pc, #36]	; (8012138 <_Bfree+0x40>)
 8012112:	218a      	movs	r1, #138	; 0x8a
 8012114:	f7fe fc2e 	bl	8010974 <__assert_func>
 8012118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801211c:	6006      	str	r6, [r0, #0]
 801211e:	60c6      	str	r6, [r0, #12]
 8012120:	b13c      	cbz	r4, 8012132 <_Bfree+0x3a>
 8012122:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012124:	6862      	ldr	r2, [r4, #4]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801212c:	6021      	str	r1, [r4, #0]
 801212e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	080147e2 	.word	0x080147e2
 8012138:	080148e8 	.word	0x080148e8

0801213c <__multadd>:
 801213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012140:	690e      	ldr	r6, [r1, #16]
 8012142:	4607      	mov	r7, r0
 8012144:	4698      	mov	r8, r3
 8012146:	460c      	mov	r4, r1
 8012148:	f101 0014 	add.w	r0, r1, #20
 801214c:	2300      	movs	r3, #0
 801214e:	6805      	ldr	r5, [r0, #0]
 8012150:	b2a9      	uxth	r1, r5
 8012152:	fb02 8101 	mla	r1, r2, r1, r8
 8012156:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801215a:	0c2d      	lsrs	r5, r5, #16
 801215c:	fb02 c505 	mla	r5, r2, r5, ip
 8012160:	b289      	uxth	r1, r1
 8012162:	3301      	adds	r3, #1
 8012164:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012168:	429e      	cmp	r6, r3
 801216a:	f840 1b04 	str.w	r1, [r0], #4
 801216e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012172:	dcec      	bgt.n	801214e <__multadd+0x12>
 8012174:	f1b8 0f00 	cmp.w	r8, #0
 8012178:	d022      	beq.n	80121c0 <__multadd+0x84>
 801217a:	68a3      	ldr	r3, [r4, #8]
 801217c:	42b3      	cmp	r3, r6
 801217e:	dc19      	bgt.n	80121b4 <__multadd+0x78>
 8012180:	6861      	ldr	r1, [r4, #4]
 8012182:	4638      	mov	r0, r7
 8012184:	3101      	adds	r1, #1
 8012186:	f7ff ff77 	bl	8012078 <_Balloc>
 801218a:	4605      	mov	r5, r0
 801218c:	b928      	cbnz	r0, 801219a <__multadd+0x5e>
 801218e:	4602      	mov	r2, r0
 8012190:	4b0d      	ldr	r3, [pc, #52]	; (80121c8 <__multadd+0x8c>)
 8012192:	480e      	ldr	r0, [pc, #56]	; (80121cc <__multadd+0x90>)
 8012194:	21b5      	movs	r1, #181	; 0xb5
 8012196:	f7fe fbed 	bl	8010974 <__assert_func>
 801219a:	6922      	ldr	r2, [r4, #16]
 801219c:	3202      	adds	r2, #2
 801219e:	f104 010c 	add.w	r1, r4, #12
 80121a2:	0092      	lsls	r2, r2, #2
 80121a4:	300c      	adds	r0, #12
 80121a6:	f7fc fa99 	bl	800e6dc <memcpy>
 80121aa:	4621      	mov	r1, r4
 80121ac:	4638      	mov	r0, r7
 80121ae:	f7ff ffa3 	bl	80120f8 <_Bfree>
 80121b2:	462c      	mov	r4, r5
 80121b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80121b8:	3601      	adds	r6, #1
 80121ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80121be:	6126      	str	r6, [r4, #16]
 80121c0:	4620      	mov	r0, r4
 80121c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c6:	bf00      	nop
 80121c8:	08014858 	.word	0x08014858
 80121cc:	080148e8 	.word	0x080148e8

080121d0 <__s2b>:
 80121d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121d4:	460c      	mov	r4, r1
 80121d6:	4615      	mov	r5, r2
 80121d8:	461f      	mov	r7, r3
 80121da:	2209      	movs	r2, #9
 80121dc:	3308      	adds	r3, #8
 80121de:	4606      	mov	r6, r0
 80121e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80121e4:	2100      	movs	r1, #0
 80121e6:	2201      	movs	r2, #1
 80121e8:	429a      	cmp	r2, r3
 80121ea:	db09      	blt.n	8012200 <__s2b+0x30>
 80121ec:	4630      	mov	r0, r6
 80121ee:	f7ff ff43 	bl	8012078 <_Balloc>
 80121f2:	b940      	cbnz	r0, 8012206 <__s2b+0x36>
 80121f4:	4602      	mov	r2, r0
 80121f6:	4b19      	ldr	r3, [pc, #100]	; (801225c <__s2b+0x8c>)
 80121f8:	4819      	ldr	r0, [pc, #100]	; (8012260 <__s2b+0x90>)
 80121fa:	21ce      	movs	r1, #206	; 0xce
 80121fc:	f7fe fbba 	bl	8010974 <__assert_func>
 8012200:	0052      	lsls	r2, r2, #1
 8012202:	3101      	adds	r1, #1
 8012204:	e7f0      	b.n	80121e8 <__s2b+0x18>
 8012206:	9b08      	ldr	r3, [sp, #32]
 8012208:	6143      	str	r3, [r0, #20]
 801220a:	2d09      	cmp	r5, #9
 801220c:	f04f 0301 	mov.w	r3, #1
 8012210:	6103      	str	r3, [r0, #16]
 8012212:	dd16      	ble.n	8012242 <__s2b+0x72>
 8012214:	f104 0909 	add.w	r9, r4, #9
 8012218:	46c8      	mov	r8, r9
 801221a:	442c      	add	r4, r5
 801221c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012220:	4601      	mov	r1, r0
 8012222:	3b30      	subs	r3, #48	; 0x30
 8012224:	220a      	movs	r2, #10
 8012226:	4630      	mov	r0, r6
 8012228:	f7ff ff88 	bl	801213c <__multadd>
 801222c:	45a0      	cmp	r8, r4
 801222e:	d1f5      	bne.n	801221c <__s2b+0x4c>
 8012230:	f1a5 0408 	sub.w	r4, r5, #8
 8012234:	444c      	add	r4, r9
 8012236:	1b2d      	subs	r5, r5, r4
 8012238:	1963      	adds	r3, r4, r5
 801223a:	42bb      	cmp	r3, r7
 801223c:	db04      	blt.n	8012248 <__s2b+0x78>
 801223e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012242:	340a      	adds	r4, #10
 8012244:	2509      	movs	r5, #9
 8012246:	e7f6      	b.n	8012236 <__s2b+0x66>
 8012248:	f814 3b01 	ldrb.w	r3, [r4], #1
 801224c:	4601      	mov	r1, r0
 801224e:	3b30      	subs	r3, #48	; 0x30
 8012250:	220a      	movs	r2, #10
 8012252:	4630      	mov	r0, r6
 8012254:	f7ff ff72 	bl	801213c <__multadd>
 8012258:	e7ee      	b.n	8012238 <__s2b+0x68>
 801225a:	bf00      	nop
 801225c:	08014858 	.word	0x08014858
 8012260:	080148e8 	.word	0x080148e8

08012264 <__hi0bits>:
 8012264:	0c03      	lsrs	r3, r0, #16
 8012266:	041b      	lsls	r3, r3, #16
 8012268:	b9d3      	cbnz	r3, 80122a0 <__hi0bits+0x3c>
 801226a:	0400      	lsls	r0, r0, #16
 801226c:	2310      	movs	r3, #16
 801226e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012272:	bf04      	itt	eq
 8012274:	0200      	lsleq	r0, r0, #8
 8012276:	3308      	addeq	r3, #8
 8012278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801227c:	bf04      	itt	eq
 801227e:	0100      	lsleq	r0, r0, #4
 8012280:	3304      	addeq	r3, #4
 8012282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012286:	bf04      	itt	eq
 8012288:	0080      	lsleq	r0, r0, #2
 801228a:	3302      	addeq	r3, #2
 801228c:	2800      	cmp	r0, #0
 801228e:	db05      	blt.n	801229c <__hi0bits+0x38>
 8012290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012294:	f103 0301 	add.w	r3, r3, #1
 8012298:	bf08      	it	eq
 801229a:	2320      	moveq	r3, #32
 801229c:	4618      	mov	r0, r3
 801229e:	4770      	bx	lr
 80122a0:	2300      	movs	r3, #0
 80122a2:	e7e4      	b.n	801226e <__hi0bits+0xa>

080122a4 <__lo0bits>:
 80122a4:	6803      	ldr	r3, [r0, #0]
 80122a6:	f013 0207 	ands.w	r2, r3, #7
 80122aa:	4601      	mov	r1, r0
 80122ac:	d00b      	beq.n	80122c6 <__lo0bits+0x22>
 80122ae:	07da      	lsls	r2, r3, #31
 80122b0:	d424      	bmi.n	80122fc <__lo0bits+0x58>
 80122b2:	0798      	lsls	r0, r3, #30
 80122b4:	bf49      	itett	mi
 80122b6:	085b      	lsrmi	r3, r3, #1
 80122b8:	089b      	lsrpl	r3, r3, #2
 80122ba:	2001      	movmi	r0, #1
 80122bc:	600b      	strmi	r3, [r1, #0]
 80122be:	bf5c      	itt	pl
 80122c0:	600b      	strpl	r3, [r1, #0]
 80122c2:	2002      	movpl	r0, #2
 80122c4:	4770      	bx	lr
 80122c6:	b298      	uxth	r0, r3
 80122c8:	b9b0      	cbnz	r0, 80122f8 <__lo0bits+0x54>
 80122ca:	0c1b      	lsrs	r3, r3, #16
 80122cc:	2010      	movs	r0, #16
 80122ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80122d2:	bf04      	itt	eq
 80122d4:	0a1b      	lsreq	r3, r3, #8
 80122d6:	3008      	addeq	r0, #8
 80122d8:	071a      	lsls	r2, r3, #28
 80122da:	bf04      	itt	eq
 80122dc:	091b      	lsreq	r3, r3, #4
 80122de:	3004      	addeq	r0, #4
 80122e0:	079a      	lsls	r2, r3, #30
 80122e2:	bf04      	itt	eq
 80122e4:	089b      	lsreq	r3, r3, #2
 80122e6:	3002      	addeq	r0, #2
 80122e8:	07da      	lsls	r2, r3, #31
 80122ea:	d403      	bmi.n	80122f4 <__lo0bits+0x50>
 80122ec:	085b      	lsrs	r3, r3, #1
 80122ee:	f100 0001 	add.w	r0, r0, #1
 80122f2:	d005      	beq.n	8012300 <__lo0bits+0x5c>
 80122f4:	600b      	str	r3, [r1, #0]
 80122f6:	4770      	bx	lr
 80122f8:	4610      	mov	r0, r2
 80122fa:	e7e8      	b.n	80122ce <__lo0bits+0x2a>
 80122fc:	2000      	movs	r0, #0
 80122fe:	4770      	bx	lr
 8012300:	2020      	movs	r0, #32
 8012302:	4770      	bx	lr

08012304 <__i2b>:
 8012304:	b510      	push	{r4, lr}
 8012306:	460c      	mov	r4, r1
 8012308:	2101      	movs	r1, #1
 801230a:	f7ff feb5 	bl	8012078 <_Balloc>
 801230e:	4602      	mov	r2, r0
 8012310:	b928      	cbnz	r0, 801231e <__i2b+0x1a>
 8012312:	4b05      	ldr	r3, [pc, #20]	; (8012328 <__i2b+0x24>)
 8012314:	4805      	ldr	r0, [pc, #20]	; (801232c <__i2b+0x28>)
 8012316:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801231a:	f7fe fb2b 	bl	8010974 <__assert_func>
 801231e:	2301      	movs	r3, #1
 8012320:	6144      	str	r4, [r0, #20]
 8012322:	6103      	str	r3, [r0, #16]
 8012324:	bd10      	pop	{r4, pc}
 8012326:	bf00      	nop
 8012328:	08014858 	.word	0x08014858
 801232c:	080148e8 	.word	0x080148e8

08012330 <__multiply>:
 8012330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	4614      	mov	r4, r2
 8012336:	690a      	ldr	r2, [r1, #16]
 8012338:	6923      	ldr	r3, [r4, #16]
 801233a:	429a      	cmp	r2, r3
 801233c:	bfb8      	it	lt
 801233e:	460b      	movlt	r3, r1
 8012340:	460d      	mov	r5, r1
 8012342:	bfbc      	itt	lt
 8012344:	4625      	movlt	r5, r4
 8012346:	461c      	movlt	r4, r3
 8012348:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801234c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012350:	68ab      	ldr	r3, [r5, #8]
 8012352:	6869      	ldr	r1, [r5, #4]
 8012354:	eb0a 0709 	add.w	r7, sl, r9
 8012358:	42bb      	cmp	r3, r7
 801235a:	b085      	sub	sp, #20
 801235c:	bfb8      	it	lt
 801235e:	3101      	addlt	r1, #1
 8012360:	f7ff fe8a 	bl	8012078 <_Balloc>
 8012364:	b930      	cbnz	r0, 8012374 <__multiply+0x44>
 8012366:	4602      	mov	r2, r0
 8012368:	4b42      	ldr	r3, [pc, #264]	; (8012474 <__multiply+0x144>)
 801236a:	4843      	ldr	r0, [pc, #268]	; (8012478 <__multiply+0x148>)
 801236c:	f240 115d 	movw	r1, #349	; 0x15d
 8012370:	f7fe fb00 	bl	8010974 <__assert_func>
 8012374:	f100 0614 	add.w	r6, r0, #20
 8012378:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801237c:	4633      	mov	r3, r6
 801237e:	2200      	movs	r2, #0
 8012380:	4543      	cmp	r3, r8
 8012382:	d31e      	bcc.n	80123c2 <__multiply+0x92>
 8012384:	f105 0c14 	add.w	ip, r5, #20
 8012388:	f104 0314 	add.w	r3, r4, #20
 801238c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012390:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012394:	9202      	str	r2, [sp, #8]
 8012396:	ebac 0205 	sub.w	r2, ip, r5
 801239a:	3a15      	subs	r2, #21
 801239c:	f022 0203 	bic.w	r2, r2, #3
 80123a0:	3204      	adds	r2, #4
 80123a2:	f105 0115 	add.w	r1, r5, #21
 80123a6:	458c      	cmp	ip, r1
 80123a8:	bf38      	it	cc
 80123aa:	2204      	movcc	r2, #4
 80123ac:	9201      	str	r2, [sp, #4]
 80123ae:	9a02      	ldr	r2, [sp, #8]
 80123b0:	9303      	str	r3, [sp, #12]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d808      	bhi.n	80123c8 <__multiply+0x98>
 80123b6:	2f00      	cmp	r7, #0
 80123b8:	dc55      	bgt.n	8012466 <__multiply+0x136>
 80123ba:	6107      	str	r7, [r0, #16]
 80123bc:	b005      	add	sp, #20
 80123be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c2:	f843 2b04 	str.w	r2, [r3], #4
 80123c6:	e7db      	b.n	8012380 <__multiply+0x50>
 80123c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80123cc:	f1ba 0f00 	cmp.w	sl, #0
 80123d0:	d020      	beq.n	8012414 <__multiply+0xe4>
 80123d2:	f105 0e14 	add.w	lr, r5, #20
 80123d6:	46b1      	mov	r9, r6
 80123d8:	2200      	movs	r2, #0
 80123da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80123de:	f8d9 b000 	ldr.w	fp, [r9]
 80123e2:	b2a1      	uxth	r1, r4
 80123e4:	fa1f fb8b 	uxth.w	fp, fp
 80123e8:	fb0a b101 	mla	r1, sl, r1, fp
 80123ec:	4411      	add	r1, r2
 80123ee:	f8d9 2000 	ldr.w	r2, [r9]
 80123f2:	0c24      	lsrs	r4, r4, #16
 80123f4:	0c12      	lsrs	r2, r2, #16
 80123f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80123fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80123fe:	b289      	uxth	r1, r1
 8012400:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012404:	45f4      	cmp	ip, lr
 8012406:	f849 1b04 	str.w	r1, [r9], #4
 801240a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801240e:	d8e4      	bhi.n	80123da <__multiply+0xaa>
 8012410:	9901      	ldr	r1, [sp, #4]
 8012412:	5072      	str	r2, [r6, r1]
 8012414:	9a03      	ldr	r2, [sp, #12]
 8012416:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801241a:	3304      	adds	r3, #4
 801241c:	f1b9 0f00 	cmp.w	r9, #0
 8012420:	d01f      	beq.n	8012462 <__multiply+0x132>
 8012422:	6834      	ldr	r4, [r6, #0]
 8012424:	f105 0114 	add.w	r1, r5, #20
 8012428:	46b6      	mov	lr, r6
 801242a:	f04f 0a00 	mov.w	sl, #0
 801242e:	880a      	ldrh	r2, [r1, #0]
 8012430:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012434:	fb09 b202 	mla	r2, r9, r2, fp
 8012438:	4492      	add	sl, r2
 801243a:	b2a4      	uxth	r4, r4
 801243c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012440:	f84e 4b04 	str.w	r4, [lr], #4
 8012444:	f851 4b04 	ldr.w	r4, [r1], #4
 8012448:	f8be 2000 	ldrh.w	r2, [lr]
 801244c:	0c24      	lsrs	r4, r4, #16
 801244e:	fb09 2404 	mla	r4, r9, r4, r2
 8012452:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012456:	458c      	cmp	ip, r1
 8012458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801245c:	d8e7      	bhi.n	801242e <__multiply+0xfe>
 801245e:	9a01      	ldr	r2, [sp, #4]
 8012460:	50b4      	str	r4, [r6, r2]
 8012462:	3604      	adds	r6, #4
 8012464:	e7a3      	b.n	80123ae <__multiply+0x7e>
 8012466:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1a5      	bne.n	80123ba <__multiply+0x8a>
 801246e:	3f01      	subs	r7, #1
 8012470:	e7a1      	b.n	80123b6 <__multiply+0x86>
 8012472:	bf00      	nop
 8012474:	08014858 	.word	0x08014858
 8012478:	080148e8 	.word	0x080148e8

0801247c <__pow5mult>:
 801247c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012480:	4615      	mov	r5, r2
 8012482:	f012 0203 	ands.w	r2, r2, #3
 8012486:	4606      	mov	r6, r0
 8012488:	460f      	mov	r7, r1
 801248a:	d007      	beq.n	801249c <__pow5mult+0x20>
 801248c:	4c25      	ldr	r4, [pc, #148]	; (8012524 <__pow5mult+0xa8>)
 801248e:	3a01      	subs	r2, #1
 8012490:	2300      	movs	r3, #0
 8012492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012496:	f7ff fe51 	bl	801213c <__multadd>
 801249a:	4607      	mov	r7, r0
 801249c:	10ad      	asrs	r5, r5, #2
 801249e:	d03d      	beq.n	801251c <__pow5mult+0xa0>
 80124a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124a2:	b97c      	cbnz	r4, 80124c4 <__pow5mult+0x48>
 80124a4:	2010      	movs	r0, #16
 80124a6:	f7fc f909 	bl	800e6bc <malloc>
 80124aa:	4602      	mov	r2, r0
 80124ac:	6270      	str	r0, [r6, #36]	; 0x24
 80124ae:	b928      	cbnz	r0, 80124bc <__pow5mult+0x40>
 80124b0:	4b1d      	ldr	r3, [pc, #116]	; (8012528 <__pow5mult+0xac>)
 80124b2:	481e      	ldr	r0, [pc, #120]	; (801252c <__pow5mult+0xb0>)
 80124b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124b8:	f7fe fa5c 	bl	8010974 <__assert_func>
 80124bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124c0:	6004      	str	r4, [r0, #0]
 80124c2:	60c4      	str	r4, [r0, #12]
 80124c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124cc:	b94c      	cbnz	r4, 80124e2 <__pow5mult+0x66>
 80124ce:	f240 2171 	movw	r1, #625	; 0x271
 80124d2:	4630      	mov	r0, r6
 80124d4:	f7ff ff16 	bl	8012304 <__i2b>
 80124d8:	2300      	movs	r3, #0
 80124da:	f8c8 0008 	str.w	r0, [r8, #8]
 80124de:	4604      	mov	r4, r0
 80124e0:	6003      	str	r3, [r0, #0]
 80124e2:	f04f 0900 	mov.w	r9, #0
 80124e6:	07eb      	lsls	r3, r5, #31
 80124e8:	d50a      	bpl.n	8012500 <__pow5mult+0x84>
 80124ea:	4639      	mov	r1, r7
 80124ec:	4622      	mov	r2, r4
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ff ff1e 	bl	8012330 <__multiply>
 80124f4:	4639      	mov	r1, r7
 80124f6:	4680      	mov	r8, r0
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7ff fdfd 	bl	80120f8 <_Bfree>
 80124fe:	4647      	mov	r7, r8
 8012500:	106d      	asrs	r5, r5, #1
 8012502:	d00b      	beq.n	801251c <__pow5mult+0xa0>
 8012504:	6820      	ldr	r0, [r4, #0]
 8012506:	b938      	cbnz	r0, 8012518 <__pow5mult+0x9c>
 8012508:	4622      	mov	r2, r4
 801250a:	4621      	mov	r1, r4
 801250c:	4630      	mov	r0, r6
 801250e:	f7ff ff0f 	bl	8012330 <__multiply>
 8012512:	6020      	str	r0, [r4, #0]
 8012514:	f8c0 9000 	str.w	r9, [r0]
 8012518:	4604      	mov	r4, r0
 801251a:	e7e4      	b.n	80124e6 <__pow5mult+0x6a>
 801251c:	4638      	mov	r0, r7
 801251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012522:	bf00      	nop
 8012524:	08014a38 	.word	0x08014a38
 8012528:	080147e2 	.word	0x080147e2
 801252c:	080148e8 	.word	0x080148e8

08012530 <__lshift>:
 8012530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012534:	460c      	mov	r4, r1
 8012536:	6849      	ldr	r1, [r1, #4]
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	4607      	mov	r7, r0
 8012542:	4691      	mov	r9, r2
 8012544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012548:	f108 0601 	add.w	r6, r8, #1
 801254c:	42b3      	cmp	r3, r6
 801254e:	db0b      	blt.n	8012568 <__lshift+0x38>
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff fd91 	bl	8012078 <_Balloc>
 8012556:	4605      	mov	r5, r0
 8012558:	b948      	cbnz	r0, 801256e <__lshift+0x3e>
 801255a:	4602      	mov	r2, r0
 801255c:	4b28      	ldr	r3, [pc, #160]	; (8012600 <__lshift+0xd0>)
 801255e:	4829      	ldr	r0, [pc, #164]	; (8012604 <__lshift+0xd4>)
 8012560:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012564:	f7fe fa06 	bl	8010974 <__assert_func>
 8012568:	3101      	adds	r1, #1
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	e7ee      	b.n	801254c <__lshift+0x1c>
 801256e:	2300      	movs	r3, #0
 8012570:	f100 0114 	add.w	r1, r0, #20
 8012574:	f100 0210 	add.w	r2, r0, #16
 8012578:	4618      	mov	r0, r3
 801257a:	4553      	cmp	r3, sl
 801257c:	db33      	blt.n	80125e6 <__lshift+0xb6>
 801257e:	6920      	ldr	r0, [r4, #16]
 8012580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012584:	f104 0314 	add.w	r3, r4, #20
 8012588:	f019 091f 	ands.w	r9, r9, #31
 801258c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012594:	d02b      	beq.n	80125ee <__lshift+0xbe>
 8012596:	f1c9 0e20 	rsb	lr, r9, #32
 801259a:	468a      	mov	sl, r1
 801259c:	2200      	movs	r2, #0
 801259e:	6818      	ldr	r0, [r3, #0]
 80125a0:	fa00 f009 	lsl.w	r0, r0, r9
 80125a4:	4302      	orrs	r2, r0
 80125a6:	f84a 2b04 	str.w	r2, [sl], #4
 80125aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ae:	459c      	cmp	ip, r3
 80125b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80125b4:	d8f3      	bhi.n	801259e <__lshift+0x6e>
 80125b6:	ebac 0304 	sub.w	r3, ip, r4
 80125ba:	3b15      	subs	r3, #21
 80125bc:	f023 0303 	bic.w	r3, r3, #3
 80125c0:	3304      	adds	r3, #4
 80125c2:	f104 0015 	add.w	r0, r4, #21
 80125c6:	4584      	cmp	ip, r0
 80125c8:	bf38      	it	cc
 80125ca:	2304      	movcc	r3, #4
 80125cc:	50ca      	str	r2, [r1, r3]
 80125ce:	b10a      	cbz	r2, 80125d4 <__lshift+0xa4>
 80125d0:	f108 0602 	add.w	r6, r8, #2
 80125d4:	3e01      	subs	r6, #1
 80125d6:	4638      	mov	r0, r7
 80125d8:	612e      	str	r6, [r5, #16]
 80125da:	4621      	mov	r1, r4
 80125dc:	f7ff fd8c 	bl	80120f8 <_Bfree>
 80125e0:	4628      	mov	r0, r5
 80125e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80125ea:	3301      	adds	r3, #1
 80125ec:	e7c5      	b.n	801257a <__lshift+0x4a>
 80125ee:	3904      	subs	r1, #4
 80125f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f8:	459c      	cmp	ip, r3
 80125fa:	d8f9      	bhi.n	80125f0 <__lshift+0xc0>
 80125fc:	e7ea      	b.n	80125d4 <__lshift+0xa4>
 80125fe:	bf00      	nop
 8012600:	08014858 	.word	0x08014858
 8012604:	080148e8 	.word	0x080148e8

08012608 <__mcmp>:
 8012608:	b530      	push	{r4, r5, lr}
 801260a:	6902      	ldr	r2, [r0, #16]
 801260c:	690c      	ldr	r4, [r1, #16]
 801260e:	1b12      	subs	r2, r2, r4
 8012610:	d10e      	bne.n	8012630 <__mcmp+0x28>
 8012612:	f100 0314 	add.w	r3, r0, #20
 8012616:	3114      	adds	r1, #20
 8012618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801261c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012628:	42a5      	cmp	r5, r4
 801262a:	d003      	beq.n	8012634 <__mcmp+0x2c>
 801262c:	d305      	bcc.n	801263a <__mcmp+0x32>
 801262e:	2201      	movs	r2, #1
 8012630:	4610      	mov	r0, r2
 8012632:	bd30      	pop	{r4, r5, pc}
 8012634:	4283      	cmp	r3, r0
 8012636:	d3f3      	bcc.n	8012620 <__mcmp+0x18>
 8012638:	e7fa      	b.n	8012630 <__mcmp+0x28>
 801263a:	f04f 32ff 	mov.w	r2, #4294967295
 801263e:	e7f7      	b.n	8012630 <__mcmp+0x28>

08012640 <__mdiff>:
 8012640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	460c      	mov	r4, r1
 8012646:	4606      	mov	r6, r0
 8012648:	4611      	mov	r1, r2
 801264a:	4620      	mov	r0, r4
 801264c:	4617      	mov	r7, r2
 801264e:	f7ff ffdb 	bl	8012608 <__mcmp>
 8012652:	1e05      	subs	r5, r0, #0
 8012654:	d110      	bne.n	8012678 <__mdiff+0x38>
 8012656:	4629      	mov	r1, r5
 8012658:	4630      	mov	r0, r6
 801265a:	f7ff fd0d 	bl	8012078 <_Balloc>
 801265e:	b930      	cbnz	r0, 801266e <__mdiff+0x2e>
 8012660:	4b39      	ldr	r3, [pc, #228]	; (8012748 <__mdiff+0x108>)
 8012662:	4602      	mov	r2, r0
 8012664:	f240 2132 	movw	r1, #562	; 0x232
 8012668:	4838      	ldr	r0, [pc, #224]	; (801274c <__mdiff+0x10c>)
 801266a:	f7fe f983 	bl	8010974 <__assert_func>
 801266e:	2301      	movs	r3, #1
 8012670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012678:	bfa4      	itt	ge
 801267a:	463b      	movge	r3, r7
 801267c:	4627      	movge	r7, r4
 801267e:	4630      	mov	r0, r6
 8012680:	6879      	ldr	r1, [r7, #4]
 8012682:	bfa6      	itte	ge
 8012684:	461c      	movge	r4, r3
 8012686:	2500      	movge	r5, #0
 8012688:	2501      	movlt	r5, #1
 801268a:	f7ff fcf5 	bl	8012078 <_Balloc>
 801268e:	b920      	cbnz	r0, 801269a <__mdiff+0x5a>
 8012690:	4b2d      	ldr	r3, [pc, #180]	; (8012748 <__mdiff+0x108>)
 8012692:	4602      	mov	r2, r0
 8012694:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012698:	e7e6      	b.n	8012668 <__mdiff+0x28>
 801269a:	693e      	ldr	r6, [r7, #16]
 801269c:	60c5      	str	r5, [r0, #12]
 801269e:	6925      	ldr	r5, [r4, #16]
 80126a0:	f107 0114 	add.w	r1, r7, #20
 80126a4:	f104 0914 	add.w	r9, r4, #20
 80126a8:	f100 0e14 	add.w	lr, r0, #20
 80126ac:	f107 0210 	add.w	r2, r7, #16
 80126b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80126b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80126b8:	46f2      	mov	sl, lr
 80126ba:	2700      	movs	r7, #0
 80126bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80126c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126c4:	fa1f f883 	uxth.w	r8, r3
 80126c8:	fa17 f78b 	uxtah	r7, r7, fp
 80126cc:	0c1b      	lsrs	r3, r3, #16
 80126ce:	eba7 0808 	sub.w	r8, r7, r8
 80126d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126da:	fa1f f888 	uxth.w	r8, r8
 80126de:	141f      	asrs	r7, r3, #16
 80126e0:	454d      	cmp	r5, r9
 80126e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126e6:	f84a 3b04 	str.w	r3, [sl], #4
 80126ea:	d8e7      	bhi.n	80126bc <__mdiff+0x7c>
 80126ec:	1b2b      	subs	r3, r5, r4
 80126ee:	3b15      	subs	r3, #21
 80126f0:	f023 0303 	bic.w	r3, r3, #3
 80126f4:	3304      	adds	r3, #4
 80126f6:	3415      	adds	r4, #21
 80126f8:	42a5      	cmp	r5, r4
 80126fa:	bf38      	it	cc
 80126fc:	2304      	movcc	r3, #4
 80126fe:	4419      	add	r1, r3
 8012700:	4473      	add	r3, lr
 8012702:	469e      	mov	lr, r3
 8012704:	460d      	mov	r5, r1
 8012706:	4565      	cmp	r5, ip
 8012708:	d30e      	bcc.n	8012728 <__mdiff+0xe8>
 801270a:	f10c 0203 	add.w	r2, ip, #3
 801270e:	1a52      	subs	r2, r2, r1
 8012710:	f022 0203 	bic.w	r2, r2, #3
 8012714:	3903      	subs	r1, #3
 8012716:	458c      	cmp	ip, r1
 8012718:	bf38      	it	cc
 801271a:	2200      	movcc	r2, #0
 801271c:	441a      	add	r2, r3
 801271e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012722:	b17b      	cbz	r3, 8012744 <__mdiff+0x104>
 8012724:	6106      	str	r6, [r0, #16]
 8012726:	e7a5      	b.n	8012674 <__mdiff+0x34>
 8012728:	f855 8b04 	ldr.w	r8, [r5], #4
 801272c:	fa17 f488 	uxtah	r4, r7, r8
 8012730:	1422      	asrs	r2, r4, #16
 8012732:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012736:	b2a4      	uxth	r4, r4
 8012738:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801273c:	f84e 4b04 	str.w	r4, [lr], #4
 8012740:	1417      	asrs	r7, r2, #16
 8012742:	e7e0      	b.n	8012706 <__mdiff+0xc6>
 8012744:	3e01      	subs	r6, #1
 8012746:	e7ea      	b.n	801271e <__mdiff+0xde>
 8012748:	08014858 	.word	0x08014858
 801274c:	080148e8 	.word	0x080148e8

08012750 <__ulp>:
 8012750:	b082      	sub	sp, #8
 8012752:	ed8d 0b00 	vstr	d0, [sp]
 8012756:	9b01      	ldr	r3, [sp, #4]
 8012758:	4912      	ldr	r1, [pc, #72]	; (80127a4 <__ulp+0x54>)
 801275a:	4019      	ands	r1, r3
 801275c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012760:	2900      	cmp	r1, #0
 8012762:	dd05      	ble.n	8012770 <__ulp+0x20>
 8012764:	2200      	movs	r2, #0
 8012766:	460b      	mov	r3, r1
 8012768:	ec43 2b10 	vmov	d0, r2, r3
 801276c:	b002      	add	sp, #8
 801276e:	4770      	bx	lr
 8012770:	4249      	negs	r1, r1
 8012772:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012776:	ea4f 5021 	mov.w	r0, r1, asr #20
 801277a:	f04f 0200 	mov.w	r2, #0
 801277e:	f04f 0300 	mov.w	r3, #0
 8012782:	da04      	bge.n	801278e <__ulp+0x3e>
 8012784:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012788:	fa41 f300 	asr.w	r3, r1, r0
 801278c:	e7ec      	b.n	8012768 <__ulp+0x18>
 801278e:	f1a0 0114 	sub.w	r1, r0, #20
 8012792:	291e      	cmp	r1, #30
 8012794:	bfda      	itte	le
 8012796:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801279a:	fa20 f101 	lsrle.w	r1, r0, r1
 801279e:	2101      	movgt	r1, #1
 80127a0:	460a      	mov	r2, r1
 80127a2:	e7e1      	b.n	8012768 <__ulp+0x18>
 80127a4:	7ff00000 	.word	0x7ff00000

080127a8 <__b2d>:
 80127a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127aa:	6905      	ldr	r5, [r0, #16]
 80127ac:	f100 0714 	add.w	r7, r0, #20
 80127b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80127b4:	1f2e      	subs	r6, r5, #4
 80127b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80127ba:	4620      	mov	r0, r4
 80127bc:	f7ff fd52 	bl	8012264 <__hi0bits>
 80127c0:	f1c0 0320 	rsb	r3, r0, #32
 80127c4:	280a      	cmp	r0, #10
 80127c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012844 <__b2d+0x9c>
 80127ca:	600b      	str	r3, [r1, #0]
 80127cc:	dc14      	bgt.n	80127f8 <__b2d+0x50>
 80127ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80127d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80127d6:	42b7      	cmp	r7, r6
 80127d8:	ea41 030c 	orr.w	r3, r1, ip
 80127dc:	bf34      	ite	cc
 80127de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127e2:	2100      	movcs	r1, #0
 80127e4:	3015      	adds	r0, #21
 80127e6:	fa04 f000 	lsl.w	r0, r4, r0
 80127ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80127ee:	ea40 0201 	orr.w	r2, r0, r1
 80127f2:	ec43 2b10 	vmov	d0, r2, r3
 80127f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f8:	42b7      	cmp	r7, r6
 80127fa:	bf3a      	itte	cc
 80127fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012800:	f1a5 0608 	subcc.w	r6, r5, #8
 8012804:	2100      	movcs	r1, #0
 8012806:	380b      	subs	r0, #11
 8012808:	d017      	beq.n	801283a <__b2d+0x92>
 801280a:	f1c0 0c20 	rsb	ip, r0, #32
 801280e:	fa04 f500 	lsl.w	r5, r4, r0
 8012812:	42be      	cmp	r6, r7
 8012814:	fa21 f40c 	lsr.w	r4, r1, ip
 8012818:	ea45 0504 	orr.w	r5, r5, r4
 801281c:	bf8c      	ite	hi
 801281e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012822:	2400      	movls	r4, #0
 8012824:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012828:	fa01 f000 	lsl.w	r0, r1, r0
 801282c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012830:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012834:	ea40 0204 	orr.w	r2, r0, r4
 8012838:	e7db      	b.n	80127f2 <__b2d+0x4a>
 801283a:	ea44 030c 	orr.w	r3, r4, ip
 801283e:	460a      	mov	r2, r1
 8012840:	e7d7      	b.n	80127f2 <__b2d+0x4a>
 8012842:	bf00      	nop
 8012844:	3ff00000 	.word	0x3ff00000

08012848 <__d2b>:
 8012848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801284c:	4689      	mov	r9, r1
 801284e:	2101      	movs	r1, #1
 8012850:	ec57 6b10 	vmov	r6, r7, d0
 8012854:	4690      	mov	r8, r2
 8012856:	f7ff fc0f 	bl	8012078 <_Balloc>
 801285a:	4604      	mov	r4, r0
 801285c:	b930      	cbnz	r0, 801286c <__d2b+0x24>
 801285e:	4602      	mov	r2, r0
 8012860:	4b25      	ldr	r3, [pc, #148]	; (80128f8 <__d2b+0xb0>)
 8012862:	4826      	ldr	r0, [pc, #152]	; (80128fc <__d2b+0xb4>)
 8012864:	f240 310a 	movw	r1, #778	; 0x30a
 8012868:	f7fe f884 	bl	8010974 <__assert_func>
 801286c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012874:	bb35      	cbnz	r5, 80128c4 <__d2b+0x7c>
 8012876:	2e00      	cmp	r6, #0
 8012878:	9301      	str	r3, [sp, #4]
 801287a:	d028      	beq.n	80128ce <__d2b+0x86>
 801287c:	4668      	mov	r0, sp
 801287e:	9600      	str	r6, [sp, #0]
 8012880:	f7ff fd10 	bl	80122a4 <__lo0bits>
 8012884:	9900      	ldr	r1, [sp, #0]
 8012886:	b300      	cbz	r0, 80128ca <__d2b+0x82>
 8012888:	9a01      	ldr	r2, [sp, #4]
 801288a:	f1c0 0320 	rsb	r3, r0, #32
 801288e:	fa02 f303 	lsl.w	r3, r2, r3
 8012892:	430b      	orrs	r3, r1
 8012894:	40c2      	lsrs	r2, r0
 8012896:	6163      	str	r3, [r4, #20]
 8012898:	9201      	str	r2, [sp, #4]
 801289a:	9b01      	ldr	r3, [sp, #4]
 801289c:	61a3      	str	r3, [r4, #24]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	bf14      	ite	ne
 80128a2:	2202      	movne	r2, #2
 80128a4:	2201      	moveq	r2, #1
 80128a6:	6122      	str	r2, [r4, #16]
 80128a8:	b1d5      	cbz	r5, 80128e0 <__d2b+0x98>
 80128aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128ae:	4405      	add	r5, r0
 80128b0:	f8c9 5000 	str.w	r5, [r9]
 80128b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128b8:	f8c8 0000 	str.w	r0, [r8]
 80128bc:	4620      	mov	r0, r4
 80128be:	b003      	add	sp, #12
 80128c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128c8:	e7d5      	b.n	8012876 <__d2b+0x2e>
 80128ca:	6161      	str	r1, [r4, #20]
 80128cc:	e7e5      	b.n	801289a <__d2b+0x52>
 80128ce:	a801      	add	r0, sp, #4
 80128d0:	f7ff fce8 	bl	80122a4 <__lo0bits>
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	2201      	movs	r2, #1
 80128da:	6122      	str	r2, [r4, #16]
 80128dc:	3020      	adds	r0, #32
 80128de:	e7e3      	b.n	80128a8 <__d2b+0x60>
 80128e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128e8:	f8c9 0000 	str.w	r0, [r9]
 80128ec:	6918      	ldr	r0, [r3, #16]
 80128ee:	f7ff fcb9 	bl	8012264 <__hi0bits>
 80128f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128f6:	e7df      	b.n	80128b8 <__d2b+0x70>
 80128f8:	08014858 	.word	0x08014858
 80128fc:	080148e8 	.word	0x080148e8

08012900 <__ratio>:
 8012900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012904:	4688      	mov	r8, r1
 8012906:	4669      	mov	r1, sp
 8012908:	4681      	mov	r9, r0
 801290a:	f7ff ff4d 	bl	80127a8 <__b2d>
 801290e:	a901      	add	r1, sp, #4
 8012910:	4640      	mov	r0, r8
 8012912:	ec55 4b10 	vmov	r4, r5, d0
 8012916:	f7ff ff47 	bl	80127a8 <__b2d>
 801291a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801291e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012922:	eba3 0c02 	sub.w	ip, r3, r2
 8012926:	e9dd 3200 	ldrd	r3, r2, [sp]
 801292a:	1a9b      	subs	r3, r3, r2
 801292c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012930:	ec51 0b10 	vmov	r0, r1, d0
 8012934:	2b00      	cmp	r3, #0
 8012936:	bfd6      	itet	le
 8012938:	460a      	movle	r2, r1
 801293a:	462a      	movgt	r2, r5
 801293c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012940:	468b      	mov	fp, r1
 8012942:	462f      	mov	r7, r5
 8012944:	bfd4      	ite	le
 8012946:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801294a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801294e:	4620      	mov	r0, r4
 8012950:	ee10 2a10 	vmov	r2, s0
 8012954:	465b      	mov	r3, fp
 8012956:	4639      	mov	r1, r7
 8012958:	f7ed ff88 	bl	800086c <__aeabi_ddiv>
 801295c:	ec41 0b10 	vmov	d0, r0, r1
 8012960:	b003      	add	sp, #12
 8012962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012966 <__copybits>:
 8012966:	3901      	subs	r1, #1
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	1149      	asrs	r1, r1, #5
 801296c:	6914      	ldr	r4, [r2, #16]
 801296e:	3101      	adds	r1, #1
 8012970:	f102 0314 	add.w	r3, r2, #20
 8012974:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012978:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801297c:	1f05      	subs	r5, r0, #4
 801297e:	42a3      	cmp	r3, r4
 8012980:	d30c      	bcc.n	801299c <__copybits+0x36>
 8012982:	1aa3      	subs	r3, r4, r2
 8012984:	3b11      	subs	r3, #17
 8012986:	f023 0303 	bic.w	r3, r3, #3
 801298a:	3211      	adds	r2, #17
 801298c:	42a2      	cmp	r2, r4
 801298e:	bf88      	it	hi
 8012990:	2300      	movhi	r3, #0
 8012992:	4418      	add	r0, r3
 8012994:	2300      	movs	r3, #0
 8012996:	4288      	cmp	r0, r1
 8012998:	d305      	bcc.n	80129a6 <__copybits+0x40>
 801299a:	bd70      	pop	{r4, r5, r6, pc}
 801299c:	f853 6b04 	ldr.w	r6, [r3], #4
 80129a0:	f845 6f04 	str.w	r6, [r5, #4]!
 80129a4:	e7eb      	b.n	801297e <__copybits+0x18>
 80129a6:	f840 3b04 	str.w	r3, [r0], #4
 80129aa:	e7f4      	b.n	8012996 <__copybits+0x30>

080129ac <__any_on>:
 80129ac:	f100 0214 	add.w	r2, r0, #20
 80129b0:	6900      	ldr	r0, [r0, #16]
 80129b2:	114b      	asrs	r3, r1, #5
 80129b4:	4298      	cmp	r0, r3
 80129b6:	b510      	push	{r4, lr}
 80129b8:	db11      	blt.n	80129de <__any_on+0x32>
 80129ba:	dd0a      	ble.n	80129d2 <__any_on+0x26>
 80129bc:	f011 011f 	ands.w	r1, r1, #31
 80129c0:	d007      	beq.n	80129d2 <__any_on+0x26>
 80129c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129c6:	fa24 f001 	lsr.w	r0, r4, r1
 80129ca:	fa00 f101 	lsl.w	r1, r0, r1
 80129ce:	428c      	cmp	r4, r1
 80129d0:	d10b      	bne.n	80129ea <__any_on+0x3e>
 80129d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d803      	bhi.n	80129e2 <__any_on+0x36>
 80129da:	2000      	movs	r0, #0
 80129dc:	bd10      	pop	{r4, pc}
 80129de:	4603      	mov	r3, r0
 80129e0:	e7f7      	b.n	80129d2 <__any_on+0x26>
 80129e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129e6:	2900      	cmp	r1, #0
 80129e8:	d0f5      	beq.n	80129d6 <__any_on+0x2a>
 80129ea:	2001      	movs	r0, #1
 80129ec:	e7f6      	b.n	80129dc <__any_on+0x30>

080129ee <_calloc_r>:
 80129ee:	b513      	push	{r0, r1, r4, lr}
 80129f0:	434a      	muls	r2, r1
 80129f2:	4611      	mov	r1, r2
 80129f4:	9201      	str	r2, [sp, #4]
 80129f6:	f7fb fef1 	bl	800e7dc <_malloc_r>
 80129fa:	4604      	mov	r4, r0
 80129fc:	b118      	cbz	r0, 8012a06 <_calloc_r+0x18>
 80129fe:	9a01      	ldr	r2, [sp, #4]
 8012a00:	2100      	movs	r1, #0
 8012a02:	f7fb fe93 	bl	800e72c <memset>
 8012a06:	4620      	mov	r0, r4
 8012a08:	b002      	add	sp, #8
 8012a0a:	bd10      	pop	{r4, pc}

08012a0c <_realloc_r>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	4607      	mov	r7, r0
 8012a10:	4614      	mov	r4, r2
 8012a12:	460e      	mov	r6, r1
 8012a14:	b921      	cbnz	r1, 8012a20 <_realloc_r+0x14>
 8012a16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	f7fb bede 	b.w	800e7dc <_malloc_r>
 8012a20:	b922      	cbnz	r2, 8012a2c <_realloc_r+0x20>
 8012a22:	f7fb fe8b 	bl	800e73c <_free_r>
 8012a26:	4625      	mov	r5, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2c:	f000 fea8 	bl	8013780 <_malloc_usable_size_r>
 8012a30:	42a0      	cmp	r0, r4
 8012a32:	d20f      	bcs.n	8012a54 <_realloc_r+0x48>
 8012a34:	4621      	mov	r1, r4
 8012a36:	4638      	mov	r0, r7
 8012a38:	f7fb fed0 	bl	800e7dc <_malloc_r>
 8012a3c:	4605      	mov	r5, r0
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d0f2      	beq.n	8012a28 <_realloc_r+0x1c>
 8012a42:	4631      	mov	r1, r6
 8012a44:	4622      	mov	r2, r4
 8012a46:	f7fb fe49 	bl	800e6dc <memcpy>
 8012a4a:	4631      	mov	r1, r6
 8012a4c:	4638      	mov	r0, r7
 8012a4e:	f7fb fe75 	bl	800e73c <_free_r>
 8012a52:	e7e9      	b.n	8012a28 <_realloc_r+0x1c>
 8012a54:	4635      	mov	r5, r6
 8012a56:	e7e7      	b.n	8012a28 <_realloc_r+0x1c>

08012a58 <__ssputs_r>:
 8012a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a5c:	688e      	ldr	r6, [r1, #8]
 8012a5e:	429e      	cmp	r6, r3
 8012a60:	4682      	mov	sl, r0
 8012a62:	460c      	mov	r4, r1
 8012a64:	4690      	mov	r8, r2
 8012a66:	461f      	mov	r7, r3
 8012a68:	d838      	bhi.n	8012adc <__ssputs_r+0x84>
 8012a6a:	898a      	ldrh	r2, [r1, #12]
 8012a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a70:	d032      	beq.n	8012ad8 <__ssputs_r+0x80>
 8012a72:	6825      	ldr	r5, [r4, #0]
 8012a74:	6909      	ldr	r1, [r1, #16]
 8012a76:	eba5 0901 	sub.w	r9, r5, r1
 8012a7a:	6965      	ldr	r5, [r4, #20]
 8012a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a84:	3301      	adds	r3, #1
 8012a86:	444b      	add	r3, r9
 8012a88:	106d      	asrs	r5, r5, #1
 8012a8a:	429d      	cmp	r5, r3
 8012a8c:	bf38      	it	cc
 8012a8e:	461d      	movcc	r5, r3
 8012a90:	0553      	lsls	r3, r2, #21
 8012a92:	d531      	bpl.n	8012af8 <__ssputs_r+0xa0>
 8012a94:	4629      	mov	r1, r5
 8012a96:	f7fb fea1 	bl	800e7dc <_malloc_r>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	b950      	cbnz	r0, 8012ab4 <__ssputs_r+0x5c>
 8012a9e:	230c      	movs	r3, #12
 8012aa0:	f8ca 3000 	str.w	r3, [sl]
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab4:	6921      	ldr	r1, [r4, #16]
 8012ab6:	464a      	mov	r2, r9
 8012ab8:	f7fb fe10 	bl	800e6dc <memcpy>
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	6126      	str	r6, [r4, #16]
 8012aca:	6165      	str	r5, [r4, #20]
 8012acc:	444e      	add	r6, r9
 8012ace:	eba5 0509 	sub.w	r5, r5, r9
 8012ad2:	6026      	str	r6, [r4, #0]
 8012ad4:	60a5      	str	r5, [r4, #8]
 8012ad6:	463e      	mov	r6, r7
 8012ad8:	42be      	cmp	r6, r7
 8012ada:	d900      	bls.n	8012ade <__ssputs_r+0x86>
 8012adc:	463e      	mov	r6, r7
 8012ade:	4632      	mov	r2, r6
 8012ae0:	6820      	ldr	r0, [r4, #0]
 8012ae2:	4641      	mov	r1, r8
 8012ae4:	f7fb fe08 	bl	800e6f8 <memmove>
 8012ae8:	68a3      	ldr	r3, [r4, #8]
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	1b9b      	subs	r3, r3, r6
 8012aee:	4432      	add	r2, r6
 8012af0:	60a3      	str	r3, [r4, #8]
 8012af2:	6022      	str	r2, [r4, #0]
 8012af4:	2000      	movs	r0, #0
 8012af6:	e7db      	b.n	8012ab0 <__ssputs_r+0x58>
 8012af8:	462a      	mov	r2, r5
 8012afa:	f7ff ff87 	bl	8012a0c <_realloc_r>
 8012afe:	4606      	mov	r6, r0
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d1e1      	bne.n	8012ac8 <__ssputs_r+0x70>
 8012b04:	6921      	ldr	r1, [r4, #16]
 8012b06:	4650      	mov	r0, sl
 8012b08:	f7fb fe18 	bl	800e73c <_free_r>
 8012b0c:	e7c7      	b.n	8012a9e <__ssputs_r+0x46>
	...

08012b10 <_svfiprintf_r>:
 8012b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b14:	4698      	mov	r8, r3
 8012b16:	898b      	ldrh	r3, [r1, #12]
 8012b18:	061b      	lsls	r3, r3, #24
 8012b1a:	b09d      	sub	sp, #116	; 0x74
 8012b1c:	4607      	mov	r7, r0
 8012b1e:	460d      	mov	r5, r1
 8012b20:	4614      	mov	r4, r2
 8012b22:	d50e      	bpl.n	8012b42 <_svfiprintf_r+0x32>
 8012b24:	690b      	ldr	r3, [r1, #16]
 8012b26:	b963      	cbnz	r3, 8012b42 <_svfiprintf_r+0x32>
 8012b28:	2140      	movs	r1, #64	; 0x40
 8012b2a:	f7fb fe57 	bl	800e7dc <_malloc_r>
 8012b2e:	6028      	str	r0, [r5, #0]
 8012b30:	6128      	str	r0, [r5, #16]
 8012b32:	b920      	cbnz	r0, 8012b3e <_svfiprintf_r+0x2e>
 8012b34:	230c      	movs	r3, #12
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	f04f 30ff 	mov.w	r0, #4294967295
 8012b3c:	e0d1      	b.n	8012ce2 <_svfiprintf_r+0x1d2>
 8012b3e:	2340      	movs	r3, #64	; 0x40
 8012b40:	616b      	str	r3, [r5, #20]
 8012b42:	2300      	movs	r3, #0
 8012b44:	9309      	str	r3, [sp, #36]	; 0x24
 8012b46:	2320      	movs	r3, #32
 8012b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b50:	2330      	movs	r3, #48	; 0x30
 8012b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012cfc <_svfiprintf_r+0x1ec>
 8012b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b5a:	f04f 0901 	mov.w	r9, #1
 8012b5e:	4623      	mov	r3, r4
 8012b60:	469a      	mov	sl, r3
 8012b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b66:	b10a      	cbz	r2, 8012b6c <_svfiprintf_r+0x5c>
 8012b68:	2a25      	cmp	r2, #37	; 0x25
 8012b6a:	d1f9      	bne.n	8012b60 <_svfiprintf_r+0x50>
 8012b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8012b70:	d00b      	beq.n	8012b8a <_svfiprintf_r+0x7a>
 8012b72:	465b      	mov	r3, fp
 8012b74:	4622      	mov	r2, r4
 8012b76:	4629      	mov	r1, r5
 8012b78:	4638      	mov	r0, r7
 8012b7a:	f7ff ff6d 	bl	8012a58 <__ssputs_r>
 8012b7e:	3001      	adds	r0, #1
 8012b80:	f000 80aa 	beq.w	8012cd8 <_svfiprintf_r+0x1c8>
 8012b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b86:	445a      	add	r2, fp
 8012b88:	9209      	str	r2, [sp, #36]	; 0x24
 8012b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f000 80a2 	beq.w	8012cd8 <_svfiprintf_r+0x1c8>
 8012b94:	2300      	movs	r3, #0
 8012b96:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b9e:	f10a 0a01 	add.w	sl, sl, #1
 8012ba2:	9304      	str	r3, [sp, #16]
 8012ba4:	9307      	str	r3, [sp, #28]
 8012ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012baa:	931a      	str	r3, [sp, #104]	; 0x68
 8012bac:	4654      	mov	r4, sl
 8012bae:	2205      	movs	r2, #5
 8012bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb4:	4851      	ldr	r0, [pc, #324]	; (8012cfc <_svfiprintf_r+0x1ec>)
 8012bb6:	f7ed fb23 	bl	8000200 <memchr>
 8012bba:	9a04      	ldr	r2, [sp, #16]
 8012bbc:	b9d8      	cbnz	r0, 8012bf6 <_svfiprintf_r+0xe6>
 8012bbe:	06d0      	lsls	r0, r2, #27
 8012bc0:	bf44      	itt	mi
 8012bc2:	2320      	movmi	r3, #32
 8012bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bc8:	0711      	lsls	r1, r2, #28
 8012bca:	bf44      	itt	mi
 8012bcc:	232b      	movmi	r3, #43	; 0x2b
 8012bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8012bd8:	d015      	beq.n	8012c06 <_svfiprintf_r+0xf6>
 8012bda:	9a07      	ldr	r2, [sp, #28]
 8012bdc:	4654      	mov	r4, sl
 8012bde:	2000      	movs	r0, #0
 8012be0:	f04f 0c0a 	mov.w	ip, #10
 8012be4:	4621      	mov	r1, r4
 8012be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bea:	3b30      	subs	r3, #48	; 0x30
 8012bec:	2b09      	cmp	r3, #9
 8012bee:	d94e      	bls.n	8012c8e <_svfiprintf_r+0x17e>
 8012bf0:	b1b0      	cbz	r0, 8012c20 <_svfiprintf_r+0x110>
 8012bf2:	9207      	str	r2, [sp, #28]
 8012bf4:	e014      	b.n	8012c20 <_svfiprintf_r+0x110>
 8012bf6:	eba0 0308 	sub.w	r3, r0, r8
 8012bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	9304      	str	r3, [sp, #16]
 8012c02:	46a2      	mov	sl, r4
 8012c04:	e7d2      	b.n	8012bac <_svfiprintf_r+0x9c>
 8012c06:	9b03      	ldr	r3, [sp, #12]
 8012c08:	1d19      	adds	r1, r3, #4
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	9103      	str	r1, [sp, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	bfbb      	ittet	lt
 8012c12:	425b      	neglt	r3, r3
 8012c14:	f042 0202 	orrlt.w	r2, r2, #2
 8012c18:	9307      	strge	r3, [sp, #28]
 8012c1a:	9307      	strlt	r3, [sp, #28]
 8012c1c:	bfb8      	it	lt
 8012c1e:	9204      	strlt	r2, [sp, #16]
 8012c20:	7823      	ldrb	r3, [r4, #0]
 8012c22:	2b2e      	cmp	r3, #46	; 0x2e
 8012c24:	d10c      	bne.n	8012c40 <_svfiprintf_r+0x130>
 8012c26:	7863      	ldrb	r3, [r4, #1]
 8012c28:	2b2a      	cmp	r3, #42	; 0x2a
 8012c2a:	d135      	bne.n	8012c98 <_svfiprintf_r+0x188>
 8012c2c:	9b03      	ldr	r3, [sp, #12]
 8012c2e:	1d1a      	adds	r2, r3, #4
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	9203      	str	r2, [sp, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	bfb8      	it	lt
 8012c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c3c:	3402      	adds	r4, #2
 8012c3e:	9305      	str	r3, [sp, #20]
 8012c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d0c <_svfiprintf_r+0x1fc>
 8012c44:	7821      	ldrb	r1, [r4, #0]
 8012c46:	2203      	movs	r2, #3
 8012c48:	4650      	mov	r0, sl
 8012c4a:	f7ed fad9 	bl	8000200 <memchr>
 8012c4e:	b140      	cbz	r0, 8012c62 <_svfiprintf_r+0x152>
 8012c50:	2340      	movs	r3, #64	; 0x40
 8012c52:	eba0 000a 	sub.w	r0, r0, sl
 8012c56:	fa03 f000 	lsl.w	r0, r3, r0
 8012c5a:	9b04      	ldr	r3, [sp, #16]
 8012c5c:	4303      	orrs	r3, r0
 8012c5e:	3401      	adds	r4, #1
 8012c60:	9304      	str	r3, [sp, #16]
 8012c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c66:	4826      	ldr	r0, [pc, #152]	; (8012d00 <_svfiprintf_r+0x1f0>)
 8012c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c6c:	2206      	movs	r2, #6
 8012c6e:	f7ed fac7 	bl	8000200 <memchr>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d038      	beq.n	8012ce8 <_svfiprintf_r+0x1d8>
 8012c76:	4b23      	ldr	r3, [pc, #140]	; (8012d04 <_svfiprintf_r+0x1f4>)
 8012c78:	bb1b      	cbnz	r3, 8012cc2 <_svfiprintf_r+0x1b2>
 8012c7a:	9b03      	ldr	r3, [sp, #12]
 8012c7c:	3307      	adds	r3, #7
 8012c7e:	f023 0307 	bic.w	r3, r3, #7
 8012c82:	3308      	adds	r3, #8
 8012c84:	9303      	str	r3, [sp, #12]
 8012c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c88:	4433      	add	r3, r6
 8012c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8c:	e767      	b.n	8012b5e <_svfiprintf_r+0x4e>
 8012c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c92:	460c      	mov	r4, r1
 8012c94:	2001      	movs	r0, #1
 8012c96:	e7a5      	b.n	8012be4 <_svfiprintf_r+0xd4>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	3401      	adds	r4, #1
 8012c9c:	9305      	str	r3, [sp, #20]
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	f04f 0c0a 	mov.w	ip, #10
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012caa:	3a30      	subs	r2, #48	; 0x30
 8012cac:	2a09      	cmp	r2, #9
 8012cae:	d903      	bls.n	8012cb8 <_svfiprintf_r+0x1a8>
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d0c5      	beq.n	8012c40 <_svfiprintf_r+0x130>
 8012cb4:	9105      	str	r1, [sp, #20]
 8012cb6:	e7c3      	b.n	8012c40 <_svfiprintf_r+0x130>
 8012cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cbc:	4604      	mov	r4, r0
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e7f0      	b.n	8012ca4 <_svfiprintf_r+0x194>
 8012cc2:	ab03      	add	r3, sp, #12
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	462a      	mov	r2, r5
 8012cc8:	4b0f      	ldr	r3, [pc, #60]	; (8012d08 <_svfiprintf_r+0x1f8>)
 8012cca:	a904      	add	r1, sp, #16
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f7fb fe7f 	bl	800e9d0 <_printf_float>
 8012cd2:	1c42      	adds	r2, r0, #1
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	d1d6      	bne.n	8012c86 <_svfiprintf_r+0x176>
 8012cd8:	89ab      	ldrh	r3, [r5, #12]
 8012cda:	065b      	lsls	r3, r3, #25
 8012cdc:	f53f af2c 	bmi.w	8012b38 <_svfiprintf_r+0x28>
 8012ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ce2:	b01d      	add	sp, #116	; 0x74
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	ab03      	add	r3, sp, #12
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	462a      	mov	r2, r5
 8012cee:	4b06      	ldr	r3, [pc, #24]	; (8012d08 <_svfiprintf_r+0x1f8>)
 8012cf0:	a904      	add	r1, sp, #16
 8012cf2:	4638      	mov	r0, r7
 8012cf4:	f7fc f910 	bl	800ef18 <_printf_i>
 8012cf8:	e7eb      	b.n	8012cd2 <_svfiprintf_r+0x1c2>
 8012cfa:	bf00      	nop
 8012cfc:	08014a44 	.word	0x08014a44
 8012d00:	08014a4e 	.word	0x08014a4e
 8012d04:	0800e9d1 	.word	0x0800e9d1
 8012d08:	08012a59 	.word	0x08012a59
 8012d0c:	08014a4a 	.word	0x08014a4a

08012d10 <_sungetc_r>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	1c4b      	adds	r3, r1, #1
 8012d14:	4614      	mov	r4, r2
 8012d16:	d103      	bne.n	8012d20 <_sungetc_r+0x10>
 8012d18:	f04f 35ff 	mov.w	r5, #4294967295
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	bd38      	pop	{r3, r4, r5, pc}
 8012d20:	8993      	ldrh	r3, [r2, #12]
 8012d22:	f023 0320 	bic.w	r3, r3, #32
 8012d26:	8193      	strh	r3, [r2, #12]
 8012d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d2a:	6852      	ldr	r2, [r2, #4]
 8012d2c:	b2cd      	uxtb	r5, r1
 8012d2e:	b18b      	cbz	r3, 8012d54 <_sungetc_r+0x44>
 8012d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012d32:	4293      	cmp	r3, r2
 8012d34:	dd08      	ble.n	8012d48 <_sungetc_r+0x38>
 8012d36:	6823      	ldr	r3, [r4, #0]
 8012d38:	1e5a      	subs	r2, r3, #1
 8012d3a:	6022      	str	r2, [r4, #0]
 8012d3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012d40:	6863      	ldr	r3, [r4, #4]
 8012d42:	3301      	adds	r3, #1
 8012d44:	6063      	str	r3, [r4, #4]
 8012d46:	e7e9      	b.n	8012d1c <_sungetc_r+0xc>
 8012d48:	4621      	mov	r1, r4
 8012d4a:	f000 fcaf 	bl	80136ac <__submore>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d0f1      	beq.n	8012d36 <_sungetc_r+0x26>
 8012d52:	e7e1      	b.n	8012d18 <_sungetc_r+0x8>
 8012d54:	6921      	ldr	r1, [r4, #16]
 8012d56:	6823      	ldr	r3, [r4, #0]
 8012d58:	b151      	cbz	r1, 8012d70 <_sungetc_r+0x60>
 8012d5a:	4299      	cmp	r1, r3
 8012d5c:	d208      	bcs.n	8012d70 <_sungetc_r+0x60>
 8012d5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012d62:	42a9      	cmp	r1, r5
 8012d64:	d104      	bne.n	8012d70 <_sungetc_r+0x60>
 8012d66:	3b01      	subs	r3, #1
 8012d68:	3201      	adds	r2, #1
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	6062      	str	r2, [r4, #4]
 8012d6e:	e7d5      	b.n	8012d1c <_sungetc_r+0xc>
 8012d70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d78:	6363      	str	r3, [r4, #52]	; 0x34
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8012d7e:	4623      	mov	r3, r4
 8012d80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012d84:	6023      	str	r3, [r4, #0]
 8012d86:	2301      	movs	r3, #1
 8012d88:	e7dc      	b.n	8012d44 <_sungetc_r+0x34>

08012d8a <__ssrefill_r>:
 8012d8a:	b510      	push	{r4, lr}
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012d90:	b169      	cbz	r1, 8012dae <__ssrefill_r+0x24>
 8012d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d96:	4299      	cmp	r1, r3
 8012d98:	d001      	beq.n	8012d9e <__ssrefill_r+0x14>
 8012d9a:	f7fb fccf 	bl	800e73c <_free_r>
 8012d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012da0:	6063      	str	r3, [r4, #4]
 8012da2:	2000      	movs	r0, #0
 8012da4:	6360      	str	r0, [r4, #52]	; 0x34
 8012da6:	b113      	cbz	r3, 8012dae <__ssrefill_r+0x24>
 8012da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	bd10      	pop	{r4, pc}
 8012dae:	6923      	ldr	r3, [r4, #16]
 8012db0:	6023      	str	r3, [r4, #0]
 8012db2:	2300      	movs	r3, #0
 8012db4:	6063      	str	r3, [r4, #4]
 8012db6:	89a3      	ldrh	r3, [r4, #12]
 8012db8:	f043 0320 	orr.w	r3, r3, #32
 8012dbc:	81a3      	strh	r3, [r4, #12]
 8012dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc2:	e7f3      	b.n	8012dac <__ssrefill_r+0x22>

08012dc4 <__ssvfiscanf_r>:
 8012dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc8:	460c      	mov	r4, r1
 8012dca:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012dce:	2100      	movs	r1, #0
 8012dd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012dd4:	49b2      	ldr	r1, [pc, #712]	; (80130a0 <__ssvfiscanf_r+0x2dc>)
 8012dd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8012dd8:	f10d 0804 	add.w	r8, sp, #4
 8012ddc:	49b1      	ldr	r1, [pc, #708]	; (80130a4 <__ssvfiscanf_r+0x2e0>)
 8012dde:	4fb2      	ldr	r7, [pc, #712]	; (80130a8 <__ssvfiscanf_r+0x2e4>)
 8012de0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80130ac <__ssvfiscanf_r+0x2e8>
 8012de4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012de8:	4606      	mov	r6, r0
 8012dea:	91a1      	str	r1, [sp, #644]	; 0x284
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	f892 a000 	ldrb.w	sl, [r2]
 8012df2:	f1ba 0f00 	cmp.w	sl, #0
 8012df6:	f000 8151 	beq.w	801309c <__ssvfiscanf_r+0x2d8>
 8012dfa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8012dfe:	f013 0308 	ands.w	r3, r3, #8
 8012e02:	f102 0501 	add.w	r5, r2, #1
 8012e06:	d019      	beq.n	8012e3c <__ssvfiscanf_r+0x78>
 8012e08:	6863      	ldr	r3, [r4, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	dd0f      	ble.n	8012e2e <__ssvfiscanf_r+0x6a>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	781a      	ldrb	r2, [r3, #0]
 8012e12:	5cba      	ldrb	r2, [r7, r2]
 8012e14:	0712      	lsls	r2, r2, #28
 8012e16:	d401      	bmi.n	8012e1c <__ssvfiscanf_r+0x58>
 8012e18:	462a      	mov	r2, r5
 8012e1a:	e7e8      	b.n	8012dee <__ssvfiscanf_r+0x2a>
 8012e1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012e1e:	3201      	adds	r2, #1
 8012e20:	9245      	str	r2, [sp, #276]	; 0x114
 8012e22:	6862      	ldr	r2, [r4, #4]
 8012e24:	3301      	adds	r3, #1
 8012e26:	3a01      	subs	r2, #1
 8012e28:	6062      	str	r2, [r4, #4]
 8012e2a:	6023      	str	r3, [r4, #0]
 8012e2c:	e7ec      	b.n	8012e08 <__ssvfiscanf_r+0x44>
 8012e2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012e30:	4621      	mov	r1, r4
 8012e32:	4630      	mov	r0, r6
 8012e34:	4798      	blx	r3
 8012e36:	2800      	cmp	r0, #0
 8012e38:	d0e9      	beq.n	8012e0e <__ssvfiscanf_r+0x4a>
 8012e3a:	e7ed      	b.n	8012e18 <__ssvfiscanf_r+0x54>
 8012e3c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012e40:	f040 8083 	bne.w	8012f4a <__ssvfiscanf_r+0x186>
 8012e44:	9341      	str	r3, [sp, #260]	; 0x104
 8012e46:	9343      	str	r3, [sp, #268]	; 0x10c
 8012e48:	7853      	ldrb	r3, [r2, #1]
 8012e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8012e4c:	bf02      	ittt	eq
 8012e4e:	2310      	moveq	r3, #16
 8012e50:	1c95      	addeq	r5, r2, #2
 8012e52:	9341      	streq	r3, [sp, #260]	; 0x104
 8012e54:	220a      	movs	r2, #10
 8012e56:	46ab      	mov	fp, r5
 8012e58:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012e5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012e60:	2b09      	cmp	r3, #9
 8012e62:	d91d      	bls.n	8012ea0 <__ssvfiscanf_r+0xdc>
 8012e64:	4891      	ldr	r0, [pc, #580]	; (80130ac <__ssvfiscanf_r+0x2e8>)
 8012e66:	2203      	movs	r2, #3
 8012e68:	f7ed f9ca 	bl	8000200 <memchr>
 8012e6c:	b140      	cbz	r0, 8012e80 <__ssvfiscanf_r+0xbc>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	eba0 0009 	sub.w	r0, r0, r9
 8012e74:	fa03 f000 	lsl.w	r0, r3, r0
 8012e78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012e7a:	4318      	orrs	r0, r3
 8012e7c:	9041      	str	r0, [sp, #260]	; 0x104
 8012e7e:	465d      	mov	r5, fp
 8012e80:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012e84:	2b78      	cmp	r3, #120	; 0x78
 8012e86:	d806      	bhi.n	8012e96 <__ssvfiscanf_r+0xd2>
 8012e88:	2b57      	cmp	r3, #87	; 0x57
 8012e8a:	d810      	bhi.n	8012eae <__ssvfiscanf_r+0xea>
 8012e8c:	2b25      	cmp	r3, #37	; 0x25
 8012e8e:	d05c      	beq.n	8012f4a <__ssvfiscanf_r+0x186>
 8012e90:	d856      	bhi.n	8012f40 <__ssvfiscanf_r+0x17c>
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d074      	beq.n	8012f80 <__ssvfiscanf_r+0x1bc>
 8012e96:	2303      	movs	r3, #3
 8012e98:	9347      	str	r3, [sp, #284]	; 0x11c
 8012e9a:	230a      	movs	r3, #10
 8012e9c:	9342      	str	r3, [sp, #264]	; 0x108
 8012e9e:	e081      	b.n	8012fa4 <__ssvfiscanf_r+0x1e0>
 8012ea0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012ea2:	fb02 1303 	mla	r3, r2, r3, r1
 8012ea6:	3b30      	subs	r3, #48	; 0x30
 8012ea8:	9343      	str	r3, [sp, #268]	; 0x10c
 8012eaa:	465d      	mov	r5, fp
 8012eac:	e7d3      	b.n	8012e56 <__ssvfiscanf_r+0x92>
 8012eae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012eb2:	2a20      	cmp	r2, #32
 8012eb4:	d8ef      	bhi.n	8012e96 <__ssvfiscanf_r+0xd2>
 8012eb6:	a101      	add	r1, pc, #4	; (adr r1, 8012ebc <__ssvfiscanf_r+0xf8>)
 8012eb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012ebc:	08012f8f 	.word	0x08012f8f
 8012ec0:	08012e97 	.word	0x08012e97
 8012ec4:	08012e97 	.word	0x08012e97
 8012ec8:	08012fed 	.word	0x08012fed
 8012ecc:	08012e97 	.word	0x08012e97
 8012ed0:	08012e97 	.word	0x08012e97
 8012ed4:	08012e97 	.word	0x08012e97
 8012ed8:	08012e97 	.word	0x08012e97
 8012edc:	08012e97 	.word	0x08012e97
 8012ee0:	08012e97 	.word	0x08012e97
 8012ee4:	08012e97 	.word	0x08012e97
 8012ee8:	08013003 	.word	0x08013003
 8012eec:	08012fd9 	.word	0x08012fd9
 8012ef0:	08012f47 	.word	0x08012f47
 8012ef4:	08012f47 	.word	0x08012f47
 8012ef8:	08012f47 	.word	0x08012f47
 8012efc:	08012e97 	.word	0x08012e97
 8012f00:	08012fdd 	.word	0x08012fdd
 8012f04:	08012e97 	.word	0x08012e97
 8012f08:	08012e97 	.word	0x08012e97
 8012f0c:	08012e97 	.word	0x08012e97
 8012f10:	08012e97 	.word	0x08012e97
 8012f14:	08013013 	.word	0x08013013
 8012f18:	08012fe5 	.word	0x08012fe5
 8012f1c:	08012f87 	.word	0x08012f87
 8012f20:	08012e97 	.word	0x08012e97
 8012f24:	08012e97 	.word	0x08012e97
 8012f28:	0801300f 	.word	0x0801300f
 8012f2c:	08012e97 	.word	0x08012e97
 8012f30:	08012fd9 	.word	0x08012fd9
 8012f34:	08012e97 	.word	0x08012e97
 8012f38:	08012e97 	.word	0x08012e97
 8012f3c:	08012f8f 	.word	0x08012f8f
 8012f40:	3b45      	subs	r3, #69	; 0x45
 8012f42:	2b02      	cmp	r3, #2
 8012f44:	d8a7      	bhi.n	8012e96 <__ssvfiscanf_r+0xd2>
 8012f46:	2305      	movs	r3, #5
 8012f48:	e02b      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 8012f4a:	6863      	ldr	r3, [r4, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	dd0d      	ble.n	8012f6c <__ssvfiscanf_r+0x1a8>
 8012f50:	6823      	ldr	r3, [r4, #0]
 8012f52:	781a      	ldrb	r2, [r3, #0]
 8012f54:	4552      	cmp	r2, sl
 8012f56:	f040 80a1 	bne.w	801309c <__ssvfiscanf_r+0x2d8>
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	6862      	ldr	r2, [r4, #4]
 8012f5e:	6023      	str	r3, [r4, #0]
 8012f60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012f62:	3a01      	subs	r2, #1
 8012f64:	3301      	adds	r3, #1
 8012f66:	6062      	str	r2, [r4, #4]
 8012f68:	9345      	str	r3, [sp, #276]	; 0x114
 8012f6a:	e755      	b.n	8012e18 <__ssvfiscanf_r+0x54>
 8012f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f6e:	4621      	mov	r1, r4
 8012f70:	4630      	mov	r0, r6
 8012f72:	4798      	blx	r3
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d0eb      	beq.n	8012f50 <__ssvfiscanf_r+0x18c>
 8012f78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	f040 8084 	bne.w	8013088 <__ssvfiscanf_r+0x2c4>
 8012f80:	f04f 30ff 	mov.w	r0, #4294967295
 8012f84:	e086      	b.n	8013094 <__ssvfiscanf_r+0x2d0>
 8012f86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012f88:	f042 0220 	orr.w	r2, r2, #32
 8012f8c:	9241      	str	r2, [sp, #260]	; 0x104
 8012f8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f94:	9241      	str	r2, [sp, #260]	; 0x104
 8012f96:	2210      	movs	r2, #16
 8012f98:	2b6f      	cmp	r3, #111	; 0x6f
 8012f9a:	9242      	str	r2, [sp, #264]	; 0x108
 8012f9c:	bf34      	ite	cc
 8012f9e:	2303      	movcc	r3, #3
 8012fa0:	2304      	movcs	r3, #4
 8012fa2:	9347      	str	r3, [sp, #284]	; 0x11c
 8012fa4:	6863      	ldr	r3, [r4, #4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	dd41      	ble.n	801302e <__ssvfiscanf_r+0x26a>
 8012faa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012fac:	0659      	lsls	r1, r3, #25
 8012fae:	d404      	bmi.n	8012fba <__ssvfiscanf_r+0x1f6>
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	781a      	ldrb	r2, [r3, #0]
 8012fb4:	5cba      	ldrb	r2, [r7, r2]
 8012fb6:	0712      	lsls	r2, r2, #28
 8012fb8:	d440      	bmi.n	801303c <__ssvfiscanf_r+0x278>
 8012fba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	dc4f      	bgt.n	8013060 <__ssvfiscanf_r+0x29c>
 8012fc0:	466b      	mov	r3, sp
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	a941      	add	r1, sp, #260	; 0x104
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	f000 f9ce 	bl	8013368 <_scanf_chars>
 8012fcc:	2801      	cmp	r0, #1
 8012fce:	d065      	beq.n	801309c <__ssvfiscanf_r+0x2d8>
 8012fd0:	2802      	cmp	r0, #2
 8012fd2:	f47f af21 	bne.w	8012e18 <__ssvfiscanf_r+0x54>
 8012fd6:	e7cf      	b.n	8012f78 <__ssvfiscanf_r+0x1b4>
 8012fd8:	220a      	movs	r2, #10
 8012fda:	e7dd      	b.n	8012f98 <__ssvfiscanf_r+0x1d4>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	9342      	str	r3, [sp, #264]	; 0x108
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	e7de      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 8012fe4:	2308      	movs	r3, #8
 8012fe6:	9342      	str	r3, [sp, #264]	; 0x108
 8012fe8:	2304      	movs	r3, #4
 8012fea:	e7da      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 8012fec:	4629      	mov	r1, r5
 8012fee:	4640      	mov	r0, r8
 8012ff0:	f000 fb22 	bl	8013638 <__sccl>
 8012ff4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ffa:	9341      	str	r3, [sp, #260]	; 0x104
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	2301      	movs	r3, #1
 8013000:	e7cf      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 8013002:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013008:	9341      	str	r3, [sp, #260]	; 0x104
 801300a:	2300      	movs	r3, #0
 801300c:	e7c9      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 801300e:	2302      	movs	r3, #2
 8013010:	e7c7      	b.n	8012fa2 <__ssvfiscanf_r+0x1de>
 8013012:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013014:	06c3      	lsls	r3, r0, #27
 8013016:	f53f aeff 	bmi.w	8012e18 <__ssvfiscanf_r+0x54>
 801301a:	9b00      	ldr	r3, [sp, #0]
 801301c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801301e:	1d19      	adds	r1, r3, #4
 8013020:	9100      	str	r1, [sp, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	07c0      	lsls	r0, r0, #31
 8013026:	bf4c      	ite	mi
 8013028:	801a      	strhmi	r2, [r3, #0]
 801302a:	601a      	strpl	r2, [r3, #0]
 801302c:	e6f4      	b.n	8012e18 <__ssvfiscanf_r+0x54>
 801302e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013030:	4621      	mov	r1, r4
 8013032:	4630      	mov	r0, r6
 8013034:	4798      	blx	r3
 8013036:	2800      	cmp	r0, #0
 8013038:	d0b7      	beq.n	8012faa <__ssvfiscanf_r+0x1e6>
 801303a:	e79d      	b.n	8012f78 <__ssvfiscanf_r+0x1b4>
 801303c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801303e:	3201      	adds	r2, #1
 8013040:	9245      	str	r2, [sp, #276]	; 0x114
 8013042:	6862      	ldr	r2, [r4, #4]
 8013044:	3a01      	subs	r2, #1
 8013046:	2a00      	cmp	r2, #0
 8013048:	6062      	str	r2, [r4, #4]
 801304a:	dd02      	ble.n	8013052 <__ssvfiscanf_r+0x28e>
 801304c:	3301      	adds	r3, #1
 801304e:	6023      	str	r3, [r4, #0]
 8013050:	e7ae      	b.n	8012fb0 <__ssvfiscanf_r+0x1ec>
 8013052:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013054:	4621      	mov	r1, r4
 8013056:	4630      	mov	r0, r6
 8013058:	4798      	blx	r3
 801305a:	2800      	cmp	r0, #0
 801305c:	d0a8      	beq.n	8012fb0 <__ssvfiscanf_r+0x1ec>
 801305e:	e78b      	b.n	8012f78 <__ssvfiscanf_r+0x1b4>
 8013060:	2b04      	cmp	r3, #4
 8013062:	dc06      	bgt.n	8013072 <__ssvfiscanf_r+0x2ae>
 8013064:	466b      	mov	r3, sp
 8013066:	4622      	mov	r2, r4
 8013068:	a941      	add	r1, sp, #260	; 0x104
 801306a:	4630      	mov	r0, r6
 801306c:	f000 f9d4 	bl	8013418 <_scanf_i>
 8013070:	e7ac      	b.n	8012fcc <__ssvfiscanf_r+0x208>
 8013072:	4b0f      	ldr	r3, [pc, #60]	; (80130b0 <__ssvfiscanf_r+0x2ec>)
 8013074:	2b00      	cmp	r3, #0
 8013076:	f43f aecf 	beq.w	8012e18 <__ssvfiscanf_r+0x54>
 801307a:	466b      	mov	r3, sp
 801307c:	4622      	mov	r2, r4
 801307e:	a941      	add	r1, sp, #260	; 0x104
 8013080:	4630      	mov	r0, r6
 8013082:	f7fc f86f 	bl	800f164 <_scanf_float>
 8013086:	e7a1      	b.n	8012fcc <__ssvfiscanf_r+0x208>
 8013088:	89a3      	ldrh	r3, [r4, #12]
 801308a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801308e:	bf18      	it	ne
 8013090:	f04f 30ff 	movne.w	r0, #4294967295
 8013094:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801309e:	e7f9      	b.n	8013094 <__ssvfiscanf_r+0x2d0>
 80130a0:	08012d11 	.word	0x08012d11
 80130a4:	08012d8b 	.word	0x08012d8b
 80130a8:	080146d5 	.word	0x080146d5
 80130ac:	08014a4a 	.word	0x08014a4a
 80130b0:	0800f165 	.word	0x0800f165

080130b4 <__sfputc_r>:
 80130b4:	6893      	ldr	r3, [r2, #8]
 80130b6:	3b01      	subs	r3, #1
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	b410      	push	{r4}
 80130bc:	6093      	str	r3, [r2, #8]
 80130be:	da08      	bge.n	80130d2 <__sfputc_r+0x1e>
 80130c0:	6994      	ldr	r4, [r2, #24]
 80130c2:	42a3      	cmp	r3, r4
 80130c4:	db01      	blt.n	80130ca <__sfputc_r+0x16>
 80130c6:	290a      	cmp	r1, #10
 80130c8:	d103      	bne.n	80130d2 <__sfputc_r+0x1e>
 80130ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ce:	f7fd bb7f 	b.w	80107d0 <__swbuf_r>
 80130d2:	6813      	ldr	r3, [r2, #0]
 80130d4:	1c58      	adds	r0, r3, #1
 80130d6:	6010      	str	r0, [r2, #0]
 80130d8:	7019      	strb	r1, [r3, #0]
 80130da:	4608      	mov	r0, r1
 80130dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130e0:	4770      	bx	lr

080130e2 <__sfputs_r>:
 80130e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e4:	4606      	mov	r6, r0
 80130e6:	460f      	mov	r7, r1
 80130e8:	4614      	mov	r4, r2
 80130ea:	18d5      	adds	r5, r2, r3
 80130ec:	42ac      	cmp	r4, r5
 80130ee:	d101      	bne.n	80130f4 <__sfputs_r+0x12>
 80130f0:	2000      	movs	r0, #0
 80130f2:	e007      	b.n	8013104 <__sfputs_r+0x22>
 80130f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130f8:	463a      	mov	r2, r7
 80130fa:	4630      	mov	r0, r6
 80130fc:	f7ff ffda 	bl	80130b4 <__sfputc_r>
 8013100:	1c43      	adds	r3, r0, #1
 8013102:	d1f3      	bne.n	80130ec <__sfputs_r+0xa>
 8013104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013108 <_vfiprintf_r>:
 8013108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310c:	460d      	mov	r5, r1
 801310e:	b09d      	sub	sp, #116	; 0x74
 8013110:	4614      	mov	r4, r2
 8013112:	4698      	mov	r8, r3
 8013114:	4606      	mov	r6, r0
 8013116:	b118      	cbz	r0, 8013120 <_vfiprintf_r+0x18>
 8013118:	6983      	ldr	r3, [r0, #24]
 801311a:	b90b      	cbnz	r3, 8013120 <_vfiprintf_r+0x18>
 801311c:	f7fb fa08 	bl	800e530 <__sinit>
 8013120:	4b89      	ldr	r3, [pc, #548]	; (8013348 <_vfiprintf_r+0x240>)
 8013122:	429d      	cmp	r5, r3
 8013124:	d11b      	bne.n	801315e <_vfiprintf_r+0x56>
 8013126:	6875      	ldr	r5, [r6, #4]
 8013128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801312a:	07d9      	lsls	r1, r3, #31
 801312c:	d405      	bmi.n	801313a <_vfiprintf_r+0x32>
 801312e:	89ab      	ldrh	r3, [r5, #12]
 8013130:	059a      	lsls	r2, r3, #22
 8013132:	d402      	bmi.n	801313a <_vfiprintf_r+0x32>
 8013134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013136:	f7fb fabe 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 801313a:	89ab      	ldrh	r3, [r5, #12]
 801313c:	071b      	lsls	r3, r3, #28
 801313e:	d501      	bpl.n	8013144 <_vfiprintf_r+0x3c>
 8013140:	692b      	ldr	r3, [r5, #16]
 8013142:	b9eb      	cbnz	r3, 8013180 <_vfiprintf_r+0x78>
 8013144:	4629      	mov	r1, r5
 8013146:	4630      	mov	r0, r6
 8013148:	f7fd fba6 	bl	8010898 <__swsetup_r>
 801314c:	b1c0      	cbz	r0, 8013180 <_vfiprintf_r+0x78>
 801314e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013150:	07dc      	lsls	r4, r3, #31
 8013152:	d50e      	bpl.n	8013172 <_vfiprintf_r+0x6a>
 8013154:	f04f 30ff 	mov.w	r0, #4294967295
 8013158:	b01d      	add	sp, #116	; 0x74
 801315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315e:	4b7b      	ldr	r3, [pc, #492]	; (801334c <_vfiprintf_r+0x244>)
 8013160:	429d      	cmp	r5, r3
 8013162:	d101      	bne.n	8013168 <_vfiprintf_r+0x60>
 8013164:	68b5      	ldr	r5, [r6, #8]
 8013166:	e7df      	b.n	8013128 <_vfiprintf_r+0x20>
 8013168:	4b79      	ldr	r3, [pc, #484]	; (8013350 <_vfiprintf_r+0x248>)
 801316a:	429d      	cmp	r5, r3
 801316c:	bf08      	it	eq
 801316e:	68f5      	ldreq	r5, [r6, #12]
 8013170:	e7da      	b.n	8013128 <_vfiprintf_r+0x20>
 8013172:	89ab      	ldrh	r3, [r5, #12]
 8013174:	0598      	lsls	r0, r3, #22
 8013176:	d4ed      	bmi.n	8013154 <_vfiprintf_r+0x4c>
 8013178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801317a:	f7fb fa9d 	bl	800e6b8 <__retarget_lock_release_recursive>
 801317e:	e7e9      	b.n	8013154 <_vfiprintf_r+0x4c>
 8013180:	2300      	movs	r3, #0
 8013182:	9309      	str	r3, [sp, #36]	; 0x24
 8013184:	2320      	movs	r3, #32
 8013186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801318a:	f8cd 800c 	str.w	r8, [sp, #12]
 801318e:	2330      	movs	r3, #48	; 0x30
 8013190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013354 <_vfiprintf_r+0x24c>
 8013194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013198:	f04f 0901 	mov.w	r9, #1
 801319c:	4623      	mov	r3, r4
 801319e:	469a      	mov	sl, r3
 80131a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131a4:	b10a      	cbz	r2, 80131aa <_vfiprintf_r+0xa2>
 80131a6:	2a25      	cmp	r2, #37	; 0x25
 80131a8:	d1f9      	bne.n	801319e <_vfiprintf_r+0x96>
 80131aa:	ebba 0b04 	subs.w	fp, sl, r4
 80131ae:	d00b      	beq.n	80131c8 <_vfiprintf_r+0xc0>
 80131b0:	465b      	mov	r3, fp
 80131b2:	4622      	mov	r2, r4
 80131b4:	4629      	mov	r1, r5
 80131b6:	4630      	mov	r0, r6
 80131b8:	f7ff ff93 	bl	80130e2 <__sfputs_r>
 80131bc:	3001      	adds	r0, #1
 80131be:	f000 80aa 	beq.w	8013316 <_vfiprintf_r+0x20e>
 80131c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131c4:	445a      	add	r2, fp
 80131c6:	9209      	str	r2, [sp, #36]	; 0x24
 80131c8:	f89a 3000 	ldrb.w	r3, [sl]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f000 80a2 	beq.w	8013316 <_vfiprintf_r+0x20e>
 80131d2:	2300      	movs	r3, #0
 80131d4:	f04f 32ff 	mov.w	r2, #4294967295
 80131d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131dc:	f10a 0a01 	add.w	sl, sl, #1
 80131e0:	9304      	str	r3, [sp, #16]
 80131e2:	9307      	str	r3, [sp, #28]
 80131e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131e8:	931a      	str	r3, [sp, #104]	; 0x68
 80131ea:	4654      	mov	r4, sl
 80131ec:	2205      	movs	r2, #5
 80131ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f2:	4858      	ldr	r0, [pc, #352]	; (8013354 <_vfiprintf_r+0x24c>)
 80131f4:	f7ed f804 	bl	8000200 <memchr>
 80131f8:	9a04      	ldr	r2, [sp, #16]
 80131fa:	b9d8      	cbnz	r0, 8013234 <_vfiprintf_r+0x12c>
 80131fc:	06d1      	lsls	r1, r2, #27
 80131fe:	bf44      	itt	mi
 8013200:	2320      	movmi	r3, #32
 8013202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013206:	0713      	lsls	r3, r2, #28
 8013208:	bf44      	itt	mi
 801320a:	232b      	movmi	r3, #43	; 0x2b
 801320c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013210:	f89a 3000 	ldrb.w	r3, [sl]
 8013214:	2b2a      	cmp	r3, #42	; 0x2a
 8013216:	d015      	beq.n	8013244 <_vfiprintf_r+0x13c>
 8013218:	9a07      	ldr	r2, [sp, #28]
 801321a:	4654      	mov	r4, sl
 801321c:	2000      	movs	r0, #0
 801321e:	f04f 0c0a 	mov.w	ip, #10
 8013222:	4621      	mov	r1, r4
 8013224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013228:	3b30      	subs	r3, #48	; 0x30
 801322a:	2b09      	cmp	r3, #9
 801322c:	d94e      	bls.n	80132cc <_vfiprintf_r+0x1c4>
 801322e:	b1b0      	cbz	r0, 801325e <_vfiprintf_r+0x156>
 8013230:	9207      	str	r2, [sp, #28]
 8013232:	e014      	b.n	801325e <_vfiprintf_r+0x156>
 8013234:	eba0 0308 	sub.w	r3, r0, r8
 8013238:	fa09 f303 	lsl.w	r3, r9, r3
 801323c:	4313      	orrs	r3, r2
 801323e:	9304      	str	r3, [sp, #16]
 8013240:	46a2      	mov	sl, r4
 8013242:	e7d2      	b.n	80131ea <_vfiprintf_r+0xe2>
 8013244:	9b03      	ldr	r3, [sp, #12]
 8013246:	1d19      	adds	r1, r3, #4
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	9103      	str	r1, [sp, #12]
 801324c:	2b00      	cmp	r3, #0
 801324e:	bfbb      	ittet	lt
 8013250:	425b      	neglt	r3, r3
 8013252:	f042 0202 	orrlt.w	r2, r2, #2
 8013256:	9307      	strge	r3, [sp, #28]
 8013258:	9307      	strlt	r3, [sp, #28]
 801325a:	bfb8      	it	lt
 801325c:	9204      	strlt	r2, [sp, #16]
 801325e:	7823      	ldrb	r3, [r4, #0]
 8013260:	2b2e      	cmp	r3, #46	; 0x2e
 8013262:	d10c      	bne.n	801327e <_vfiprintf_r+0x176>
 8013264:	7863      	ldrb	r3, [r4, #1]
 8013266:	2b2a      	cmp	r3, #42	; 0x2a
 8013268:	d135      	bne.n	80132d6 <_vfiprintf_r+0x1ce>
 801326a:	9b03      	ldr	r3, [sp, #12]
 801326c:	1d1a      	adds	r2, r3, #4
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	9203      	str	r2, [sp, #12]
 8013272:	2b00      	cmp	r3, #0
 8013274:	bfb8      	it	lt
 8013276:	f04f 33ff 	movlt.w	r3, #4294967295
 801327a:	3402      	adds	r4, #2
 801327c:	9305      	str	r3, [sp, #20]
 801327e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013364 <_vfiprintf_r+0x25c>
 8013282:	7821      	ldrb	r1, [r4, #0]
 8013284:	2203      	movs	r2, #3
 8013286:	4650      	mov	r0, sl
 8013288:	f7ec ffba 	bl	8000200 <memchr>
 801328c:	b140      	cbz	r0, 80132a0 <_vfiprintf_r+0x198>
 801328e:	2340      	movs	r3, #64	; 0x40
 8013290:	eba0 000a 	sub.w	r0, r0, sl
 8013294:	fa03 f000 	lsl.w	r0, r3, r0
 8013298:	9b04      	ldr	r3, [sp, #16]
 801329a:	4303      	orrs	r3, r0
 801329c:	3401      	adds	r4, #1
 801329e:	9304      	str	r3, [sp, #16]
 80132a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a4:	482c      	ldr	r0, [pc, #176]	; (8013358 <_vfiprintf_r+0x250>)
 80132a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132aa:	2206      	movs	r2, #6
 80132ac:	f7ec ffa8 	bl	8000200 <memchr>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d03f      	beq.n	8013334 <_vfiprintf_r+0x22c>
 80132b4:	4b29      	ldr	r3, [pc, #164]	; (801335c <_vfiprintf_r+0x254>)
 80132b6:	bb1b      	cbnz	r3, 8013300 <_vfiprintf_r+0x1f8>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	3307      	adds	r3, #7
 80132bc:	f023 0307 	bic.w	r3, r3, #7
 80132c0:	3308      	adds	r3, #8
 80132c2:	9303      	str	r3, [sp, #12]
 80132c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c6:	443b      	add	r3, r7
 80132c8:	9309      	str	r3, [sp, #36]	; 0x24
 80132ca:	e767      	b.n	801319c <_vfiprintf_r+0x94>
 80132cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80132d0:	460c      	mov	r4, r1
 80132d2:	2001      	movs	r0, #1
 80132d4:	e7a5      	b.n	8013222 <_vfiprintf_r+0x11a>
 80132d6:	2300      	movs	r3, #0
 80132d8:	3401      	adds	r4, #1
 80132da:	9305      	str	r3, [sp, #20]
 80132dc:	4619      	mov	r1, r3
 80132de:	f04f 0c0a 	mov.w	ip, #10
 80132e2:	4620      	mov	r0, r4
 80132e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132e8:	3a30      	subs	r2, #48	; 0x30
 80132ea:	2a09      	cmp	r2, #9
 80132ec:	d903      	bls.n	80132f6 <_vfiprintf_r+0x1ee>
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0c5      	beq.n	801327e <_vfiprintf_r+0x176>
 80132f2:	9105      	str	r1, [sp, #20]
 80132f4:	e7c3      	b.n	801327e <_vfiprintf_r+0x176>
 80132f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132fa:	4604      	mov	r4, r0
 80132fc:	2301      	movs	r3, #1
 80132fe:	e7f0      	b.n	80132e2 <_vfiprintf_r+0x1da>
 8013300:	ab03      	add	r3, sp, #12
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	462a      	mov	r2, r5
 8013306:	4b16      	ldr	r3, [pc, #88]	; (8013360 <_vfiprintf_r+0x258>)
 8013308:	a904      	add	r1, sp, #16
 801330a:	4630      	mov	r0, r6
 801330c:	f7fb fb60 	bl	800e9d0 <_printf_float>
 8013310:	4607      	mov	r7, r0
 8013312:	1c78      	adds	r0, r7, #1
 8013314:	d1d6      	bne.n	80132c4 <_vfiprintf_r+0x1bc>
 8013316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013318:	07d9      	lsls	r1, r3, #31
 801331a:	d405      	bmi.n	8013328 <_vfiprintf_r+0x220>
 801331c:	89ab      	ldrh	r3, [r5, #12]
 801331e:	059a      	lsls	r2, r3, #22
 8013320:	d402      	bmi.n	8013328 <_vfiprintf_r+0x220>
 8013322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013324:	f7fb f9c8 	bl	800e6b8 <__retarget_lock_release_recursive>
 8013328:	89ab      	ldrh	r3, [r5, #12]
 801332a:	065b      	lsls	r3, r3, #25
 801332c:	f53f af12 	bmi.w	8013154 <_vfiprintf_r+0x4c>
 8013330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013332:	e711      	b.n	8013158 <_vfiprintf_r+0x50>
 8013334:	ab03      	add	r3, sp, #12
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	462a      	mov	r2, r5
 801333a:	4b09      	ldr	r3, [pc, #36]	; (8013360 <_vfiprintf_r+0x258>)
 801333c:	a904      	add	r1, sp, #16
 801333e:	4630      	mov	r0, r6
 8013340:	f7fb fdea 	bl	800ef18 <_printf_i>
 8013344:	e7e4      	b.n	8013310 <_vfiprintf_r+0x208>
 8013346:	bf00      	nop
 8013348:	080145c8 	.word	0x080145c8
 801334c:	080145e8 	.word	0x080145e8
 8013350:	080145a8 	.word	0x080145a8
 8013354:	08014a44 	.word	0x08014a44
 8013358:	08014a4e 	.word	0x08014a4e
 801335c:	0800e9d1 	.word	0x0800e9d1
 8013360:	080130e3 	.word	0x080130e3
 8013364:	08014a4a 	.word	0x08014a4a

08013368 <_scanf_chars>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	4615      	mov	r5, r2
 801336e:	688a      	ldr	r2, [r1, #8]
 8013370:	4680      	mov	r8, r0
 8013372:	460c      	mov	r4, r1
 8013374:	b932      	cbnz	r2, 8013384 <_scanf_chars+0x1c>
 8013376:	698a      	ldr	r2, [r1, #24]
 8013378:	2a00      	cmp	r2, #0
 801337a:	bf0c      	ite	eq
 801337c:	2201      	moveq	r2, #1
 801337e:	f04f 32ff 	movne.w	r2, #4294967295
 8013382:	608a      	str	r2, [r1, #8]
 8013384:	6822      	ldr	r2, [r4, #0]
 8013386:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8013414 <_scanf_chars+0xac>
 801338a:	06d1      	lsls	r1, r2, #27
 801338c:	bf5f      	itttt	pl
 801338e:	681a      	ldrpl	r2, [r3, #0]
 8013390:	1d11      	addpl	r1, r2, #4
 8013392:	6019      	strpl	r1, [r3, #0]
 8013394:	6816      	ldrpl	r6, [r2, #0]
 8013396:	2700      	movs	r7, #0
 8013398:	69a0      	ldr	r0, [r4, #24]
 801339a:	b188      	cbz	r0, 80133c0 <_scanf_chars+0x58>
 801339c:	2801      	cmp	r0, #1
 801339e:	d107      	bne.n	80133b0 <_scanf_chars+0x48>
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	781a      	ldrb	r2, [r3, #0]
 80133a4:	6963      	ldr	r3, [r4, #20]
 80133a6:	5c9b      	ldrb	r3, [r3, r2]
 80133a8:	b953      	cbnz	r3, 80133c0 <_scanf_chars+0x58>
 80133aa:	bb27      	cbnz	r7, 80133f6 <_scanf_chars+0x8e>
 80133ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133b0:	2802      	cmp	r0, #2
 80133b2:	d120      	bne.n	80133f6 <_scanf_chars+0x8e>
 80133b4:	682b      	ldr	r3, [r5, #0]
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80133bc:	071b      	lsls	r3, r3, #28
 80133be:	d41a      	bmi.n	80133f6 <_scanf_chars+0x8e>
 80133c0:	6823      	ldr	r3, [r4, #0]
 80133c2:	06da      	lsls	r2, r3, #27
 80133c4:	bf5e      	ittt	pl
 80133c6:	682b      	ldrpl	r3, [r5, #0]
 80133c8:	781b      	ldrbpl	r3, [r3, #0]
 80133ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80133ce:	682a      	ldr	r2, [r5, #0]
 80133d0:	686b      	ldr	r3, [r5, #4]
 80133d2:	3201      	adds	r2, #1
 80133d4:	602a      	str	r2, [r5, #0]
 80133d6:	68a2      	ldr	r2, [r4, #8]
 80133d8:	3b01      	subs	r3, #1
 80133da:	3a01      	subs	r2, #1
 80133dc:	606b      	str	r3, [r5, #4]
 80133de:	3701      	adds	r7, #1
 80133e0:	60a2      	str	r2, [r4, #8]
 80133e2:	b142      	cbz	r2, 80133f6 <_scanf_chars+0x8e>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	dcd7      	bgt.n	8013398 <_scanf_chars+0x30>
 80133e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80133ec:	4629      	mov	r1, r5
 80133ee:	4640      	mov	r0, r8
 80133f0:	4798      	blx	r3
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d0d0      	beq.n	8013398 <_scanf_chars+0x30>
 80133f6:	6823      	ldr	r3, [r4, #0]
 80133f8:	f013 0310 	ands.w	r3, r3, #16
 80133fc:	d105      	bne.n	801340a <_scanf_chars+0xa2>
 80133fe:	68e2      	ldr	r2, [r4, #12]
 8013400:	3201      	adds	r2, #1
 8013402:	60e2      	str	r2, [r4, #12]
 8013404:	69a2      	ldr	r2, [r4, #24]
 8013406:	b102      	cbz	r2, 801340a <_scanf_chars+0xa2>
 8013408:	7033      	strb	r3, [r6, #0]
 801340a:	6923      	ldr	r3, [r4, #16]
 801340c:	441f      	add	r7, r3
 801340e:	6127      	str	r7, [r4, #16]
 8013410:	2000      	movs	r0, #0
 8013412:	e7cb      	b.n	80133ac <_scanf_chars+0x44>
 8013414:	080146d5 	.word	0x080146d5

08013418 <_scanf_i>:
 8013418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801341c:	4698      	mov	r8, r3
 801341e:	4b74      	ldr	r3, [pc, #464]	; (80135f0 <_scanf_i+0x1d8>)
 8013420:	460c      	mov	r4, r1
 8013422:	4682      	mov	sl, r0
 8013424:	4616      	mov	r6, r2
 8013426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801342a:	b087      	sub	sp, #28
 801342c:	ab03      	add	r3, sp, #12
 801342e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013432:	4b70      	ldr	r3, [pc, #448]	; (80135f4 <_scanf_i+0x1dc>)
 8013434:	69a1      	ldr	r1, [r4, #24]
 8013436:	4a70      	ldr	r2, [pc, #448]	; (80135f8 <_scanf_i+0x1e0>)
 8013438:	2903      	cmp	r1, #3
 801343a:	bf18      	it	ne
 801343c:	461a      	movne	r2, r3
 801343e:	68a3      	ldr	r3, [r4, #8]
 8013440:	9201      	str	r2, [sp, #4]
 8013442:	1e5a      	subs	r2, r3, #1
 8013444:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013448:	bf88      	it	hi
 801344a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801344e:	4627      	mov	r7, r4
 8013450:	bf82      	ittt	hi
 8013452:	eb03 0905 	addhi.w	r9, r3, r5
 8013456:	f240 135d 	movwhi	r3, #349	; 0x15d
 801345a:	60a3      	strhi	r3, [r4, #8]
 801345c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013460:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013464:	bf98      	it	ls
 8013466:	f04f 0900 	movls.w	r9, #0
 801346a:	6023      	str	r3, [r4, #0]
 801346c:	463d      	mov	r5, r7
 801346e:	f04f 0b00 	mov.w	fp, #0
 8013472:	6831      	ldr	r1, [r6, #0]
 8013474:	ab03      	add	r3, sp, #12
 8013476:	7809      	ldrb	r1, [r1, #0]
 8013478:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801347c:	2202      	movs	r2, #2
 801347e:	f7ec febf 	bl	8000200 <memchr>
 8013482:	b328      	cbz	r0, 80134d0 <_scanf_i+0xb8>
 8013484:	f1bb 0f01 	cmp.w	fp, #1
 8013488:	d159      	bne.n	801353e <_scanf_i+0x126>
 801348a:	6862      	ldr	r2, [r4, #4]
 801348c:	b92a      	cbnz	r2, 801349a <_scanf_i+0x82>
 801348e:	6822      	ldr	r2, [r4, #0]
 8013490:	2308      	movs	r3, #8
 8013492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013496:	6063      	str	r3, [r4, #4]
 8013498:	6022      	str	r2, [r4, #0]
 801349a:	6822      	ldr	r2, [r4, #0]
 801349c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80134a0:	6022      	str	r2, [r4, #0]
 80134a2:	68a2      	ldr	r2, [r4, #8]
 80134a4:	1e51      	subs	r1, r2, #1
 80134a6:	60a1      	str	r1, [r4, #8]
 80134a8:	b192      	cbz	r2, 80134d0 <_scanf_i+0xb8>
 80134aa:	6832      	ldr	r2, [r6, #0]
 80134ac:	1c51      	adds	r1, r2, #1
 80134ae:	6031      	str	r1, [r6, #0]
 80134b0:	7812      	ldrb	r2, [r2, #0]
 80134b2:	f805 2b01 	strb.w	r2, [r5], #1
 80134b6:	6872      	ldr	r2, [r6, #4]
 80134b8:	3a01      	subs	r2, #1
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	6072      	str	r2, [r6, #4]
 80134be:	dc07      	bgt.n	80134d0 <_scanf_i+0xb8>
 80134c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80134c4:	4631      	mov	r1, r6
 80134c6:	4650      	mov	r0, sl
 80134c8:	4790      	blx	r2
 80134ca:	2800      	cmp	r0, #0
 80134cc:	f040 8085 	bne.w	80135da <_scanf_i+0x1c2>
 80134d0:	f10b 0b01 	add.w	fp, fp, #1
 80134d4:	f1bb 0f03 	cmp.w	fp, #3
 80134d8:	d1cb      	bne.n	8013472 <_scanf_i+0x5a>
 80134da:	6863      	ldr	r3, [r4, #4]
 80134dc:	b90b      	cbnz	r3, 80134e2 <_scanf_i+0xca>
 80134de:	230a      	movs	r3, #10
 80134e0:	6063      	str	r3, [r4, #4]
 80134e2:	6863      	ldr	r3, [r4, #4]
 80134e4:	4945      	ldr	r1, [pc, #276]	; (80135fc <_scanf_i+0x1e4>)
 80134e6:	6960      	ldr	r0, [r4, #20]
 80134e8:	1ac9      	subs	r1, r1, r3
 80134ea:	f000 f8a5 	bl	8013638 <__sccl>
 80134ee:	f04f 0b00 	mov.w	fp, #0
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	6822      	ldr	r2, [r4, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d03d      	beq.n	8013576 <_scanf_i+0x15e>
 80134fa:	6831      	ldr	r1, [r6, #0]
 80134fc:	6960      	ldr	r0, [r4, #20]
 80134fe:	f891 c000 	ldrb.w	ip, [r1]
 8013502:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013506:	2800      	cmp	r0, #0
 8013508:	d035      	beq.n	8013576 <_scanf_i+0x15e>
 801350a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801350e:	d124      	bne.n	801355a <_scanf_i+0x142>
 8013510:	0510      	lsls	r0, r2, #20
 8013512:	d522      	bpl.n	801355a <_scanf_i+0x142>
 8013514:	f10b 0b01 	add.w	fp, fp, #1
 8013518:	f1b9 0f00 	cmp.w	r9, #0
 801351c:	d003      	beq.n	8013526 <_scanf_i+0x10e>
 801351e:	3301      	adds	r3, #1
 8013520:	f109 39ff 	add.w	r9, r9, #4294967295
 8013524:	60a3      	str	r3, [r4, #8]
 8013526:	6873      	ldr	r3, [r6, #4]
 8013528:	3b01      	subs	r3, #1
 801352a:	2b00      	cmp	r3, #0
 801352c:	6073      	str	r3, [r6, #4]
 801352e:	dd1b      	ble.n	8013568 <_scanf_i+0x150>
 8013530:	6833      	ldr	r3, [r6, #0]
 8013532:	3301      	adds	r3, #1
 8013534:	6033      	str	r3, [r6, #0]
 8013536:	68a3      	ldr	r3, [r4, #8]
 8013538:	3b01      	subs	r3, #1
 801353a:	60a3      	str	r3, [r4, #8]
 801353c:	e7d9      	b.n	80134f2 <_scanf_i+0xda>
 801353e:	f1bb 0f02 	cmp.w	fp, #2
 8013542:	d1ae      	bne.n	80134a2 <_scanf_i+0x8a>
 8013544:	6822      	ldr	r2, [r4, #0]
 8013546:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801354a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801354e:	d1bf      	bne.n	80134d0 <_scanf_i+0xb8>
 8013550:	2310      	movs	r3, #16
 8013552:	6063      	str	r3, [r4, #4]
 8013554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013558:	e7a2      	b.n	80134a0 <_scanf_i+0x88>
 801355a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801355e:	6022      	str	r2, [r4, #0]
 8013560:	780b      	ldrb	r3, [r1, #0]
 8013562:	f805 3b01 	strb.w	r3, [r5], #1
 8013566:	e7de      	b.n	8013526 <_scanf_i+0x10e>
 8013568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801356c:	4631      	mov	r1, r6
 801356e:	4650      	mov	r0, sl
 8013570:	4798      	blx	r3
 8013572:	2800      	cmp	r0, #0
 8013574:	d0df      	beq.n	8013536 <_scanf_i+0x11e>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	05d9      	lsls	r1, r3, #23
 801357a:	d50d      	bpl.n	8013598 <_scanf_i+0x180>
 801357c:	42bd      	cmp	r5, r7
 801357e:	d909      	bls.n	8013594 <_scanf_i+0x17c>
 8013580:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013588:	4632      	mov	r2, r6
 801358a:	4650      	mov	r0, sl
 801358c:	4798      	blx	r3
 801358e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013592:	464d      	mov	r5, r9
 8013594:	42bd      	cmp	r5, r7
 8013596:	d028      	beq.n	80135ea <_scanf_i+0x1d2>
 8013598:	6822      	ldr	r2, [r4, #0]
 801359a:	f012 0210 	ands.w	r2, r2, #16
 801359e:	d113      	bne.n	80135c8 <_scanf_i+0x1b0>
 80135a0:	702a      	strb	r2, [r5, #0]
 80135a2:	6863      	ldr	r3, [r4, #4]
 80135a4:	9e01      	ldr	r6, [sp, #4]
 80135a6:	4639      	mov	r1, r7
 80135a8:	4650      	mov	r0, sl
 80135aa:	47b0      	blx	r6
 80135ac:	f8d8 3000 	ldr.w	r3, [r8]
 80135b0:	6821      	ldr	r1, [r4, #0]
 80135b2:	1d1a      	adds	r2, r3, #4
 80135b4:	f8c8 2000 	str.w	r2, [r8]
 80135b8:	f011 0f20 	tst.w	r1, #32
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	d00f      	beq.n	80135e0 <_scanf_i+0x1c8>
 80135c0:	6018      	str	r0, [r3, #0]
 80135c2:	68e3      	ldr	r3, [r4, #12]
 80135c4:	3301      	adds	r3, #1
 80135c6:	60e3      	str	r3, [r4, #12]
 80135c8:	1bed      	subs	r5, r5, r7
 80135ca:	44ab      	add	fp, r5
 80135cc:	6925      	ldr	r5, [r4, #16]
 80135ce:	445d      	add	r5, fp
 80135d0:	6125      	str	r5, [r4, #16]
 80135d2:	2000      	movs	r0, #0
 80135d4:	b007      	add	sp, #28
 80135d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135da:	f04f 0b00 	mov.w	fp, #0
 80135de:	e7ca      	b.n	8013576 <_scanf_i+0x15e>
 80135e0:	07ca      	lsls	r2, r1, #31
 80135e2:	bf4c      	ite	mi
 80135e4:	8018      	strhmi	r0, [r3, #0]
 80135e6:	6018      	strpl	r0, [r3, #0]
 80135e8:	e7eb      	b.n	80135c2 <_scanf_i+0x1aa>
 80135ea:	2001      	movs	r0, #1
 80135ec:	e7f2      	b.n	80135d4 <_scanf_i+0x1bc>
 80135ee:	bf00      	nop
 80135f0:	08014438 	.word	0x08014438
 80135f4:	080107cd 	.word	0x080107cd
 80135f8:	080106d1 	.word	0x080106d1
 80135fc:	08014a6e 	.word	0x08014a6e

08013600 <_read_r>:
 8013600:	b538      	push	{r3, r4, r5, lr}
 8013602:	4d07      	ldr	r5, [pc, #28]	; (8013620 <_read_r+0x20>)
 8013604:	4604      	mov	r4, r0
 8013606:	4608      	mov	r0, r1
 8013608:	4611      	mov	r1, r2
 801360a:	2200      	movs	r2, #0
 801360c:	602a      	str	r2, [r5, #0]
 801360e:	461a      	mov	r2, r3
 8013610:	f7ef fccc 	bl	8002fac <_read>
 8013614:	1c43      	adds	r3, r0, #1
 8013616:	d102      	bne.n	801361e <_read_r+0x1e>
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	b103      	cbz	r3, 801361e <_read_r+0x1e>
 801361c:	6023      	str	r3, [r4, #0]
 801361e:	bd38      	pop	{r3, r4, r5, pc}
 8013620:	200056a8 	.word	0x200056a8
 8013624:	00000000 	.word	0x00000000

08013628 <nan>:
 8013628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013630 <nan+0x8>
 801362c:	4770      	bx	lr
 801362e:	bf00      	nop
 8013630:	00000000 	.word	0x00000000
 8013634:	7ff80000 	.word	0x7ff80000

08013638 <__sccl>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	780b      	ldrb	r3, [r1, #0]
 801363c:	4604      	mov	r4, r0
 801363e:	2b5e      	cmp	r3, #94	; 0x5e
 8013640:	bf0b      	itete	eq
 8013642:	784b      	ldrbeq	r3, [r1, #1]
 8013644:	1c48      	addne	r0, r1, #1
 8013646:	1c88      	addeq	r0, r1, #2
 8013648:	2200      	movne	r2, #0
 801364a:	bf08      	it	eq
 801364c:	2201      	moveq	r2, #1
 801364e:	1e61      	subs	r1, r4, #1
 8013650:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013654:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013658:	42a9      	cmp	r1, r5
 801365a:	d1fb      	bne.n	8013654 <__sccl+0x1c>
 801365c:	b90b      	cbnz	r3, 8013662 <__sccl+0x2a>
 801365e:	3801      	subs	r0, #1
 8013660:	bd70      	pop	{r4, r5, r6, pc}
 8013662:	f082 0101 	eor.w	r1, r2, #1
 8013666:	54e1      	strb	r1, [r4, r3]
 8013668:	1c42      	adds	r2, r0, #1
 801366a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801366e:	2d2d      	cmp	r5, #45	; 0x2d
 8013670:	f102 36ff 	add.w	r6, r2, #4294967295
 8013674:	4610      	mov	r0, r2
 8013676:	d006      	beq.n	8013686 <__sccl+0x4e>
 8013678:	2d5d      	cmp	r5, #93	; 0x5d
 801367a:	d0f1      	beq.n	8013660 <__sccl+0x28>
 801367c:	b90d      	cbnz	r5, 8013682 <__sccl+0x4a>
 801367e:	4630      	mov	r0, r6
 8013680:	e7ee      	b.n	8013660 <__sccl+0x28>
 8013682:	462b      	mov	r3, r5
 8013684:	e7ef      	b.n	8013666 <__sccl+0x2e>
 8013686:	7816      	ldrb	r6, [r2, #0]
 8013688:	2e5d      	cmp	r6, #93	; 0x5d
 801368a:	d0fa      	beq.n	8013682 <__sccl+0x4a>
 801368c:	42b3      	cmp	r3, r6
 801368e:	dcf8      	bgt.n	8013682 <__sccl+0x4a>
 8013690:	4618      	mov	r0, r3
 8013692:	3001      	adds	r0, #1
 8013694:	4286      	cmp	r6, r0
 8013696:	5421      	strb	r1, [r4, r0]
 8013698:	dcfb      	bgt.n	8013692 <__sccl+0x5a>
 801369a:	43d8      	mvns	r0, r3
 801369c:	4430      	add	r0, r6
 801369e:	1c5d      	adds	r5, r3, #1
 80136a0:	42b3      	cmp	r3, r6
 80136a2:	bfa8      	it	ge
 80136a4:	2000      	movge	r0, #0
 80136a6:	182b      	adds	r3, r5, r0
 80136a8:	3202      	adds	r2, #2
 80136aa:	e7de      	b.n	801366a <__sccl+0x32>

080136ac <__submore>:
 80136ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b0:	460c      	mov	r4, r1
 80136b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80136b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136b8:	4299      	cmp	r1, r3
 80136ba:	d11d      	bne.n	80136f8 <__submore+0x4c>
 80136bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80136c0:	f7fb f88c 	bl	800e7dc <_malloc_r>
 80136c4:	b918      	cbnz	r0, 80136ce <__submore+0x22>
 80136c6:	f04f 30ff 	mov.w	r0, #4294967295
 80136ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80136d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80136d8:	6360      	str	r0, [r4, #52]	; 0x34
 80136da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80136de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80136e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80136e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80136ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80136ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80136f2:	6020      	str	r0, [r4, #0]
 80136f4:	2000      	movs	r0, #0
 80136f6:	e7e8      	b.n	80136ca <__submore+0x1e>
 80136f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80136fa:	0077      	lsls	r7, r6, #1
 80136fc:	463a      	mov	r2, r7
 80136fe:	f7ff f985 	bl	8012a0c <_realloc_r>
 8013702:	4605      	mov	r5, r0
 8013704:	2800      	cmp	r0, #0
 8013706:	d0de      	beq.n	80136c6 <__submore+0x1a>
 8013708:	eb00 0806 	add.w	r8, r0, r6
 801370c:	4601      	mov	r1, r0
 801370e:	4632      	mov	r2, r6
 8013710:	4640      	mov	r0, r8
 8013712:	f7fa ffe3 	bl	800e6dc <memcpy>
 8013716:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801371a:	f8c4 8000 	str.w	r8, [r4]
 801371e:	e7e9      	b.n	80136f4 <__submore+0x48>

08013720 <__ascii_wctomb>:
 8013720:	b149      	cbz	r1, 8013736 <__ascii_wctomb+0x16>
 8013722:	2aff      	cmp	r2, #255	; 0xff
 8013724:	bf85      	ittet	hi
 8013726:	238a      	movhi	r3, #138	; 0x8a
 8013728:	6003      	strhi	r3, [r0, #0]
 801372a:	700a      	strbls	r2, [r1, #0]
 801372c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013730:	bf98      	it	ls
 8013732:	2001      	movls	r0, #1
 8013734:	4770      	bx	lr
 8013736:	4608      	mov	r0, r1
 8013738:	4770      	bx	lr
	...

0801373c <_fstat_r>:
 801373c:	b538      	push	{r3, r4, r5, lr}
 801373e:	4d07      	ldr	r5, [pc, #28]	; (801375c <_fstat_r+0x20>)
 8013740:	2300      	movs	r3, #0
 8013742:	4604      	mov	r4, r0
 8013744:	4608      	mov	r0, r1
 8013746:	4611      	mov	r1, r2
 8013748:	602b      	str	r3, [r5, #0]
 801374a:	f7ef fc74 	bl	8003036 <_fstat>
 801374e:	1c43      	adds	r3, r0, #1
 8013750:	d102      	bne.n	8013758 <_fstat_r+0x1c>
 8013752:	682b      	ldr	r3, [r5, #0]
 8013754:	b103      	cbz	r3, 8013758 <_fstat_r+0x1c>
 8013756:	6023      	str	r3, [r4, #0]
 8013758:	bd38      	pop	{r3, r4, r5, pc}
 801375a:	bf00      	nop
 801375c:	200056a8 	.word	0x200056a8

08013760 <_isatty_r>:
 8013760:	b538      	push	{r3, r4, r5, lr}
 8013762:	4d06      	ldr	r5, [pc, #24]	; (801377c <_isatty_r+0x1c>)
 8013764:	2300      	movs	r3, #0
 8013766:	4604      	mov	r4, r0
 8013768:	4608      	mov	r0, r1
 801376a:	602b      	str	r3, [r5, #0]
 801376c:	f7ef fc73 	bl	8003056 <_isatty>
 8013770:	1c43      	adds	r3, r0, #1
 8013772:	d102      	bne.n	801377a <_isatty_r+0x1a>
 8013774:	682b      	ldr	r3, [r5, #0]
 8013776:	b103      	cbz	r3, 801377a <_isatty_r+0x1a>
 8013778:	6023      	str	r3, [r4, #0]
 801377a:	bd38      	pop	{r3, r4, r5, pc}
 801377c:	200056a8 	.word	0x200056a8

08013780 <_malloc_usable_size_r>:
 8013780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013784:	1f18      	subs	r0, r3, #4
 8013786:	2b00      	cmp	r3, #0
 8013788:	bfbc      	itt	lt
 801378a:	580b      	ldrlt	r3, [r1, r0]
 801378c:	18c0      	addlt	r0, r0, r3
 801378e:	4770      	bx	lr

08013790 <_init>:
 8013790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013792:	bf00      	nop
 8013794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013796:	bc08      	pop	{r3}
 8013798:	469e      	mov	lr, r3
 801379a:	4770      	bx	lr

0801379c <_fini>:
 801379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379e:	bf00      	nop
 80137a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137a2:	bc08      	pop	{r3}
 80137a4:	469e      	mov	lr, r3
 80137a6:	4770      	bx	lr
