
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08015f80  08015f80  00025f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016988  08016988  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08016988  08016988  00026988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016990  08016990  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016990  08016990  00026990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016998  08016998  00026998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0801699c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003035c  2**0
                  CONTENTS
 10 .bss          00006b1c  2000035c  2000035c  0003035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006e78  20006e78  0003035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c70a  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007803  00000000  00000000  0007ca96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031b0  00000000  00000000  000842a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ef0  00000000  00000000  00087450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bd9a  00000000  00000000  0008a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003323c  00000000  00000000  000960da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105b22  00000000  00000000  000c9316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cee38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ece4  00000000  00000000  001cee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015f68 	.word	0x08015f68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000360 	.word	0x20000360
 80001ec:	08015f68 	.word	0x08015f68

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b0a3      	sub	sp, #140	; 0x8c
 8001010:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f003 fa45 	bl	80044a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f943 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 fcd9 	bl	80019d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101e:	f000 f9c1 	bl	80013a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001022:	f000 fa11 	bl	8001448 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001026:	f000 fa4f 	bl	80014c8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800102a:	f000 fa8d 	bl	8001548 <MX_I2C3_Init>
  MX_SPI2_Init();
 800102e:	f000 fb57 	bl	80016e0 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001032:	f000 fb8b 	bl	800174c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001036:	f000 fbbf 	bl	80017b8 <MX_SPI5_Init>
  MX_TIM2_Init();
 800103a:	f000 fbf3 	bl	8001824 <MX_TIM2_Init>
  MX_UART8_Init();
 800103e:	f000 fc49 	bl	80018d4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001042:	f000 fc71 	bl	8001928 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001046:	f000 fc99 	bl	800197c <MX_USART6_UART_Init>
  MX_RTC_Init();
 800104a:	f000 fabd 	bl	80015c8 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	4873      	ldr	r0, [pc, #460]	; (8001220 <main+0x214>)
 8001054:	f003 ffbc 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2104      	movs	r1, #4
 800105c:	4870      	ldr	r0, [pc, #448]	; (8001220 <main+0x214>)
 800105e:	f003 ffb7 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2108      	movs	r1, #8
 8001066:	486e      	ldr	r0, [pc, #440]	; (8001220 <main+0x214>)
 8001068:	f003 ffb2 	bl	8004fd0 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	486c      	ldr	r0, [pc, #432]	; (8001224 <main+0x218>)
 8001074:	f003 ffac 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107e:	4869      	ldr	r0, [pc, #420]	; (8001224 <main+0x218>)
 8001080:	f003 ffa6 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	4866      	ldr	r0, [pc, #408]	; (8001224 <main+0x218>)
 800108c:	f003 ffa0 	bl	8004fd0 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	4863      	ldr	r0, [pc, #396]	; (8001224 <main+0x218>)
 8001096:	f003 ff9b 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4861      	ldr	r0, [pc, #388]	; (8001228 <main+0x21c>)
 80010a2:	f003 ff95 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	485e      	ldr	r0, [pc, #376]	; (8001228 <main+0x21c>)
 80010ae:	f003 ff8f 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
  */

  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	485c      	ldr	r0, [pc, #368]	; (800122c <main+0x220>)
 80010ba:	f003 ff89 	bl	8004fd0 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4857      	ldr	r0, [pc, #348]	; (8001224 <main+0x218>)
 80010c6:	f003 ff83 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80010ca:	2200      	movs	r2, #0
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	4858      	ldr	r0, [pc, #352]	; (8001230 <main+0x224>)
 80010d0:	f003 ff7e 	bl	8004fd0 <HAL_GPIO_WritePin>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 80010d4:	4e57      	ldr	r6, [pc, #348]	; (8001234 <main+0x228>)
 80010d6:	4a58      	ldr	r2, [pc, #352]	; (8001238 <main+0x22c>)
 80010d8:	ab0c      	add	r3, sp, #48	; 0x30
 80010da:	4611      	mov	r1, r2
 80010dc:	2254      	movs	r2, #84	; 0x54
 80010de:	4618      	mov	r0, r3
 80010e0:	f00f ff76 	bl	8010fd0 <memcpy>
 80010e4:	466d      	mov	r5, sp
 80010e6:	f106 0410 	add.w	r4, r6, #16
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010fe:	f001 fea1 	bl	8002e44 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 8001102:	4e4c      	ldr	r6, [pc, #304]	; (8001234 <main+0x228>)
 8001104:	4a4d      	ldr	r2, [pc, #308]	; (800123c <main+0x230>)
 8001106:	ab0c      	add	r3, sp, #48	; 0x30
 8001108:	4611      	mov	r1, r2
 800110a:	2254      	movs	r2, #84	; 0x54
 800110c:	4618      	mov	r0, r3
 800110e:	f00f ff5f 	bl	8010fd0 <memcpy>
 8001112:	466d      	mov	r5, sp
 8001114:	f106 0410 	add.w	r4, r6, #16
 8001118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001124:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001128:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800112c:	f001 fe8a 	bl	8002e44 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 8001130:	4e40      	ldr	r6, [pc, #256]	; (8001234 <main+0x228>)
 8001132:	4a43      	ldr	r2, [pc, #268]	; (8001240 <main+0x234>)
 8001134:	ab0c      	add	r3, sp, #48	; 0x30
 8001136:	4611      	mov	r1, r2
 8001138:	2254      	movs	r2, #84	; 0x54
 800113a:	4618      	mov	r0, r3
 800113c:	f00f ff48 	bl	8010fd0 <memcpy>
 8001140:	466d      	mov	r5, sp
 8001142:	f106 0410 	add.w	r4, r6, #16
 8001146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001152:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001156:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800115a:	f001 fe73 	bl	8002e44 <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
   MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 800115e:	4935      	ldr	r1, [pc, #212]	; (8001234 <main+0x228>)
 8001160:	4837      	ldr	r0, [pc, #220]	; (8001240 <main+0x234>)
 8001162:	f002 ff49 	bl	8003ff8 <MRT_LSM6DSR_Setup>
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 8001166:	4933      	ldr	r1, [pc, #204]	; (8001234 <main+0x228>)
 8001168:	4836      	ldr	r0, [pc, #216]	; (8001244 <main+0x238>)
 800116a:	f001 fe45 	bl	8002df8 <GPS_init>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 800116e:	4e31      	ldr	r6, [pc, #196]	; (8001234 <main+0x228>)
 8001170:	230a      	movs	r3, #10
 8001172:	930c      	str	r3, [sp, #48]	; 0x30
 8001174:	466d      	mov	r5, sp
 8001176:	f106 0410 	add.w	r4, r6, #16
 800117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001186:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800118a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800118e:	f003 f8a7 	bl	80042e0 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	2213      	movs	r2, #19
 8001198:	492b      	ldr	r1, [pc, #172]	; (8001248 <main+0x23c>)
 800119a:	4826      	ldr	r0, [pc, #152]	; (8001234 <main+0x228>)
 800119c:	f008 fb15 	bl	80097ca <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011a0:	f00b ff50 	bl	800d044 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 80011a4:	4829      	ldr	r0, [pc, #164]	; (800124c <main+0x240>)
 80011a6:	f00c f89d 	bl	800d2e4 <osMutexNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <main+0x244>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 80011b0:	4828      	ldr	r0, [pc, #160]	; (8001254 <main+0x248>)
 80011b2:	f00c f897 	bl	800d2e4 <osMutexNew>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <main+0x24c>)
 80011ba:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 80011bc:	4827      	ldr	r0, [pc, #156]	; (800125c <main+0x250>)
 80011be:	f00c f891 	bl	800d2e4 <osMutexNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <main+0x254>)
 80011c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <main+0x258>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4826      	ldr	r0, [pc, #152]	; (8001268 <main+0x25c>)
 80011ce:	f00b ffa3 	bl	800d118 <osThreadNew>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a25      	ldr	r2, [pc, #148]	; (800126c <main+0x260>)
 80011d6:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80011d8:	4a25      	ldr	r2, [pc, #148]	; (8001270 <main+0x264>)
 80011da:	2100      	movs	r1, #0
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <main+0x268>)
 80011de:	f00b ff9b 	bl	800d118 <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a24      	ldr	r2, [pc, #144]	; (8001278 <main+0x26c>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <main+0x270>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <main+0x274>)
 80011ee:	f00b ff93 	bl	800d118 <osThreadNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <main+0x278>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80011f8:	4a23      	ldr	r2, [pc, #140]	; (8001288 <main+0x27c>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4823      	ldr	r0, [pc, #140]	; (800128c <main+0x280>)
 80011fe:	f00b ff8b 	bl	800d118 <osThreadNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <main+0x284>)
 8001206:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <main+0x288>)
 800120a:	2100      	movs	r1, #0
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <main+0x28c>)
 800120e:	f00b ff83 	bl	800d118 <osThreadNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <main+0x290>)
 8001216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001218:	f00b ff48 	bl	800d0ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121c:	e7fe      	b.n	800121c <main+0x210>
 800121e:	bf00      	nop
 8001220:	40020800 	.word	0x40020800
 8001224:	40021800 	.word	0x40021800
 8001228:	40021400 	.word	0x40021400
 800122c:	40021000 	.word	0x40021000
 8001230:	40020c00 	.word	0x40020c00
 8001234:	20005310 	.word	0x20005310
 8001238:	20005124 	.word	0x20005124
 800123c:	20005178 	.word	0x20005178
 8001240:	20004fb8 	.word	0x20004fb8
 8001244:	20005350 	.word	0x20005350
 8001248:	08015fdc 	.word	0x08015fdc
 800124c:	0801642c 	.word	0x0801642c
 8001250:	20005218 	.word	0x20005218
 8001254:	0801643c 	.word	0x0801643c
 8001258:	20005404 	.word	0x20005404
 800125c:	0801644c 	.word	0x0801644c
 8001260:	20005294 	.word	0x20005294
 8001264:	08016378 	.word	0x08016378
 8001268:	08001ce1 	.word	0x08001ce1
 800126c:	200051cc 	.word	0x200051cc
 8001270:	0801639c 	.word	0x0801639c
 8001274:	08001cf1 	.word	0x08001cf1
 8001278:	20005304 	.word	0x20005304
 800127c:	080163c0 	.word	0x080163c0
 8001280:	08001cfd 	.word	0x08001cfd
 8001284:	2000530c 	.word	0x2000530c
 8001288:	080163e4 	.word	0x080163e4
 800128c:	08001d09 	.word	0x08001d09
 8001290:	200053d4 	.word	0x200053d4
 8001294:	08016408 	.word	0x08016408
 8001298:	08001f71 	.word	0x08001f71
 800129c:	200053e0 	.word	0x200053e0

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0a0      	sub	sp, #128	; 0x80
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00f feb6 	bl	8011020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00f fea7 	bl	8011020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <SystemClock_Config+0xfc>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <SystemClock_Config+0xfc>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <SystemClock_Config+0xfc>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <SystemClock_Config+0x100>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <SystemClock_Config+0x100>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <SystemClock_Config+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800130e:	2309      	movs	r3, #9
 8001310:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001324:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001326:	2308      	movs	r3, #8
 8001328:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800132a:	2348      	movs	r3, #72	; 0x48
 800132c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001332:	2303      	movs	r3, #3
 8001334:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800133a:	4618      	mov	r0, r3
 800133c:	f006 f998 	bl	8007670 <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001346:	f000 fe2b 	bl	8001fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800134e:	2301      	movs	r3, #1
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fbf2 	bl	8007b50 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001372:	f000 fe15 	bl	8001fa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001376:	2320      	movs	r3, #32
 8001378:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fe0f 	bl	8007fa8 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001390:	f000 fe06 	bl	8001fa0 <Error_Handler>
  }
}
 8001394:	bf00      	nop
 8001396:	3780      	adds	r7, #128	; 0x80
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_ADC1_Init+0x98>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <MX_ADC1_Init+0x9c>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ADC1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_ADC1_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_ADC1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_ADC1_Init+0x98>)
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <MX_ADC1_Init+0xa0>)
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_ADC1_Init+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_ADC1_Init+0x98>)
 80013fe:	2201      	movs	r2, #1
 8001400:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_ADC1_Init+0x98>)
 8001404:	f003 f8b2 	bl	800456c <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 fdc7 	bl	8001fa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001412:	2306      	movs	r3, #6
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_ADC1_Init+0x98>)
 8001424:	f003 f8e6 	bl	80045f4 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800142e:	f000 fdb7 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200051d0 	.word	0x200051d0
 8001440:	40012000 	.word	0x40012000
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_I2C1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_I2C1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_I2C1_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <MX_I2C1_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_I2C1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_I2C1_Init+0x74>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_I2C1_Init+0x74>)
 8001486:	f003 fdbd 	bl	8005004 <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fd86 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_I2C1_Init+0x74>)
 8001498:	f004 fed7 	bl	800624a <HAL_I2CEx_ConfigAnalogFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80014a2:	f000 fd7d 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_I2C1_Init+0x74>)
 80014aa:	f004 ff0a 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fd74 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005124 	.word	0x20005124
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_I2C2_Init+0x74>)
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <MX_I2C2_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_I2C2_Init+0x74>)
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MX_I2C2_Init+0x7c>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_I2C2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_I2C2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_I2C2_Init+0x74>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_I2C2_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C2_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_I2C2_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C2_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_I2C2_Init+0x74>)
 8001506:	f003 fd7d 	bl	8005004 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fd46 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <MX_I2C2_Init+0x74>)
 8001518:	f004 fe97 	bl	800624a <HAL_I2CEx_ConfigAnalogFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001522:	f000 fd3d 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C2_Init+0x74>)
 800152a:	f004 feca 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 fd34 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20005178 	.word	0x20005178
 8001540:	40005800 	.word	0x40005800
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_I2C3_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_I2C3_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_I2C3_Init+0x74>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <MX_I2C3_Init+0x7c>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_I2C3_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_I2C3_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_I2C3_Init+0x74>)
 8001566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_I2C3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_I2C3_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C3_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_I2C3_Init+0x74>)
 8001586:	f003 fd3d 	bl	8005004 <HAL_I2C_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001590:	f000 fd06 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_I2C3_Init+0x74>)
 8001598:	f004 fe57 	bl	800624a <HAL_I2CEx_ConfigAnalogFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80015a2:	f000 fcfd 	bl	8001fa0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_I2C3_Init+0x74>)
 80015aa:	f004 fe8a 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80015b4:	f000 fcf4 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20004fb8 	.word	0x20004fb8
 80015c0:	40005c00 	.word	0x40005c00
 80015c4:	000186a0 	.word	0x000186a0

080015c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b090      	sub	sp, #64	; 0x40
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2228      	movs	r2, #40	; 0x28
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00f fd19 	bl	8011020 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <MX_RTC_Init+0x110>)
 80015f0:	4a3a      	ldr	r2, [pc, #232]	; (80016dc <MX_RTC_Init+0x114>)
 80015f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <MX_RTC_Init+0x110>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <MX_RTC_Init+0x110>)
 80015fc:	227f      	movs	r2, #127	; 0x7f
 80015fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <MX_RTC_Init+0x110>)
 8001602:	22ff      	movs	r2, #255	; 0xff
 8001604:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <MX_RTC_Init+0x110>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <MX_RTC_Init+0x110>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <MX_RTC_Init+0x110>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001618:	482f      	ldr	r0, [pc, #188]	; (80016d8 <MX_RTC_Init+0x110>)
 800161a:	f006 fe83 	bl	8008324 <HAL_RTC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001624:	f000 fcbc 	bl	8001fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	4823      	ldr	r0, [pc, #140]	; (80016d8 <MX_RTC_Init+0x110>)
 800164c:	f006 fefb 	bl	8008446 <HAL_RTC_SetTime>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001656:	f000 fca3 	bl	8001fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	2201      	movs	r2, #1
 8001678:	4619      	mov	r1, r3
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <MX_RTC_Init+0x110>)
 800167c:	f006 ffa0 	bl	80085c0 <HAL_RTC_SetDate>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001686:	f000 fc8b 	bl	8001fa0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800168a:	2300      	movs	r3, #0
 800168c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800168e:	2300      	movs	r3, #0
 8001690:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001692:	2300      	movs	r3, #0
 8001694:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	2201      	movs	r2, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_RTC_Init+0x110>)
 80016c2:	f007 f825 	bl	8008710 <HAL_RTC_SetAlarm_IT>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80016cc:	f000 fc68 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3740      	adds	r7, #64	; 0x40
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20005274 	.word	0x20005274
 80016dc:	40002800 	.word	0x40002800

080016e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_SPI2_Init+0x64>)
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <MX_SPI2_Init+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_SPI2_Init+0x64>)
 80016ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_SPI2_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_SPI2_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_SPI2_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_SPI2_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_SPI2_Init+0x64>)
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_SPI2_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_SPI2_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_SPI2_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_SPI2_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_SPI2_Init+0x64>)
 800172c:	220a      	movs	r2, #10
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_SPI2_Init+0x64>)
 8001732:	f007 fa3f 	bl	8008bb4 <HAL_SPI_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800173c:	f000 fc30 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000500c 	.word	0x2000500c
 8001748:	40003800 	.word	0x40003800

0800174c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <MX_SPI4_Init+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800175c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI4_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI4_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI4_Init+0x64>)
 8001798:	220a      	movs	r2, #10
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_SPI4_Init+0x64>)
 800179e:	f007 fa09 	bl	8008bb4 <HAL_SPI_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80017a8:	f000 fbfa 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000521c 	.word	0x2000521c
 80017b4:	40013400 	.word	0x40013400

080017b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI5_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <MX_SPI5_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI5_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI5_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI5_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI5_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI5_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI5_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI5_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_SPI5_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI5_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_SPI5_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI5_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_SPI5_Init+0x64>)
 800180a:	f007 f9d3 	bl	8008bb4 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001814:	f000 fbc4 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20005078 	.word	0x20005078
 8001820:	40015000 	.word	0x40015000

08001824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_TIM2_Init+0xac>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_TIM2_Init+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM2_Init+0xac>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_TIM2_Init+0xac>)
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_TIM2_Init+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM2_Init+0xac>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM2_Init+0xac>)
 8001870:	f007 fa5d 	bl	8008d2e <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800187a:	f000 fb91 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	4619      	mov	r1, r3
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <MX_TIM2_Init+0xac>)
 800188e:	f007 febf 	bl	8009610 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001898:	f000 fb82 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	; 0x60
 800189e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2208      	movs	r2, #8
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM2_Init+0xac>)
 80018b4:	f007 fb6e 	bl	8008f94 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018be:	f000 fb6f 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM2_Init+0xac>)
 80018c4:	f000 fda8 	bl	8002418 <HAL_TIM_MspPostInit>

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20005394 	.word	0x20005394

080018d4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_UART8_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_UART8_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_UART8_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_UART8_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_UART8_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_UART8_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_UART8_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_UART8_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_UART8_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_UART8_Init+0x4c>)
 800190c:	f007 ff10 	bl	8009730 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 fb43 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20005310 	.word	0x20005310
 8001924:	40007c00 	.word	0x40007c00

08001928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <MX_USART3_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001960:	f007 fee6 	bl	8009730 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f000 fb19 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200050d0 	.word	0x200050d0
 8001978:	40004800 	.word	0x40004800

0800197c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_USART6_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 8001988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800198c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART6_UART_Init+0x4c>)
 80019b4:	f007 febc 	bl	8009730 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f000 faef 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20005350 	.word	0x20005350
 80019cc:	40011400 	.word	0x40011400

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	; 0x38
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	4bb4      	ldr	r3, [pc, #720]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4ab3      	ldr	r2, [pc, #716]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4bb1      	ldr	r3, [pc, #708]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	4bad      	ldr	r3, [pc, #692]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4aac      	ldr	r2, [pc, #688]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4baa      	ldr	r3, [pc, #680]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	4ba6      	ldr	r3, [pc, #664]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4aa5      	ldr	r2, [pc, #660]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4ba3      	ldr	r3, [pc, #652]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a9e      	ldr	r2, [pc, #632]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b98      	ldr	r3, [pc, #608]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a97      	ldr	r2, [pc, #604]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b91      	ldr	r3, [pc, #580]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a90      	ldr	r2, [pc, #576]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a89      	ldr	r2, [pc, #548]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a82      	ldr	r2, [pc, #520]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <MX_GPIO_Init+0x2ec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f248 4184 	movw	r1, #33924	; 0x8484
 8001acc:	487c      	ldr	r0, [pc, #496]	; (8001cc0 <MX_GPIO_Init+0x2f0>)
 8001ace:	f003 fa7f 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001ad8:	487a      	ldr	r0, [pc, #488]	; (8001cc4 <MX_GPIO_Init+0x2f4>)
 8001ada:	f003 fa79 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001ae4:	4878      	ldr	r0, [pc, #480]	; (8001cc8 <MX_GPIO_Init+0x2f8>)
 8001ae6:	f003 fa73 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2108      	movs	r1, #8
 8001aee:	4877      	ldr	r0, [pc, #476]	; (8001ccc <MX_GPIO_Init+0x2fc>)
 8001af0:	f003 fa6e 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001af4:	2200      	movs	r2, #0
 8001af6:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8001afa:	4875      	ldr	r0, [pc, #468]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001afc:	f003 fa68 	bl	8004fd0 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b06:	4873      	ldr	r0, [pc, #460]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001b08:	f003 fa62 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001b12:	4871      	ldr	r0, [pc, #452]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001b14:	f003 fa5c 	bl	8004fd0 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001b18:	f248 4384 	movw	r3, #33924	; 0x8484
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4863      	ldr	r0, [pc, #396]	; (8001cc0 <MX_GPIO_Init+0x2f0>)
 8001b32:	f003 f8a1 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001b36:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	485d      	ldr	r0, [pc, #372]	; (8001cc4 <MX_GPIO_Init+0x2f4>)
 8001b50:	f003 f892 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b58:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4858      	ldr	r0, [pc, #352]	; (8001cc8 <MX_GPIO_Init+0x2f8>)
 8001b68:	f003 f886 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001b6c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4850      	ldr	r0, [pc, #320]	; (8001cc8 <MX_GPIO_Init+0x2f8>)
 8001b86:	f003 f877 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	484a      	ldr	r0, [pc, #296]	; (8001ccc <MX_GPIO_Init+0x2fc>)
 8001ba2:	f003 f869 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001ba6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <MX_GPIO_Init+0x2f8>)
 8001bbc:	f003 f85c 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4840      	ldr	r0, [pc, #256]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001bd4:	f003 f850 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4835      	ldr	r0, [pc, #212]	; (8001cc4 <MX_GPIO_Init+0x2f4>)
 8001bee:	f003 f843 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001bf2:	f242 4301 	movw	r3, #9217	; 0x2401
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4832      	ldr	r0, [pc, #200]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001c08:	f003 f836 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001c0c:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	482a      	ldr	r0, [pc, #168]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001c26:	f003 f827 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001c2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4820      	ldr	r0, [pc, #128]	; (8001cc0 <MX_GPIO_Init+0x2f0>)
 8001c40:	f003 f81a 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481d      	ldr	r0, [pc, #116]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001c5e:	f003 f80b 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001c62:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001c7c:	f002 fffc 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001c96:	f002 ffef 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001c9a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001cb0:	f002 ffe2 	bl	8004c78 <HAL_GPIO_Init>

}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	; 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	10110000 	.word	0x10110000

08001ce0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001ce8:	f00e fb38 	bl	801035c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	osThreadExit();
 8001cec:	f00b fac5 	bl	800d27a <osThreadExit>

08001cf0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b090      	sub	sp, #64	; 0x40
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8001cf8:	f00b fabf 	bl	800d27a <osThreadExit>

08001cfc <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 8001d04:	f00b fab9 	bl	800d27a <osThreadExit>

08001d08 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d0c:	b094      	sub	sp, #80	; 0x50
 8001d0e:	af04      	add	r7, sp, #16
 8001d10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8001d12:	f00b faa7 	bl	800d264 <osThreadGetId>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a82      	ldr	r2, [pc, #520]	; (8001f24 <StartSensors3+0x21c>)
 8001d1a:	60d3      	str	r3, [r2, #12]
	//char* buffer = (char*) pvPortMalloc(TX_BUF_DIM);
	char buffer[TX_BUF_DIM];


	//Mutex
	while( (_SENSORS = xSemaphoreCreateMutex()) == NULL) osDelay(10);
 8001d1c:	e002      	b.n	8001d24 <StartSensors3+0x1c>
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f00b fab2 	bl	800d288 <osDelay>
 8001d24:	2001      	movs	r0, #1
 8001d26:	f00b fdbc 	bl	800d8a2 <xQueueCreateMutex>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <StartSensors3+0x220>)
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <StartSensors3+0x220>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f2      	beq.n	8001d1e <StartSensors3+0x16>

  for(;;)
  {
	  while( xSemaphoreTake( _SENSORS, 0 ) == pdTRUE ) osDelay(10);
 8001d38:	e002      	b.n	8001d40 <StartSensors3+0x38>
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	f00b faa4 	bl	800d288 <osDelay>
 8001d40:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <StartSensors3+0x220>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00c f854 	bl	800ddf4 <xQueueSemaphoreTake>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d0f3      	beq.n	8001d3a <StartSensors3+0x32>

	  //GPS
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 8001d52:	2264      	movs	r2, #100	; 0x64
 8001d54:	2100      	movs	r1, #0
 8001d56:	4875      	ldr	r0, [pc, #468]	; (8001f2c <StartSensors3+0x224>)
 8001d58:	f00f f962 	bl	8011020 <memset>
	  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nGPS Poll\r\n",16,HAL_MAX_DELAY);
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	2210      	movs	r2, #16
 8001d62:	4973      	ldr	r1, [pc, #460]	; (8001f30 <StartSensors3+0x228>)
 8001d64:	4873      	ldr	r0, [pc, #460]	; (8001f34 <StartSensors3+0x22c>)
 8001d66:	f007 fd30 	bl	80097ca <HAL_UART_Transmit>
	  GPS_Poll(&latitude, &longitude, &time);
 8001d6a:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <StartSensors3+0x230>)
 8001d6c:	4973      	ldr	r1, [pc, #460]	; (8001f3c <StartSensors3+0x234>)
 8001d6e:	4874      	ldr	r0, [pc, #464]	; (8001f40 <StartSensors3+0x238>)
 8001d70:	f000 fdd6 	bl	8002920 <GPS_Poll>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",latitude, longitude, time);
 8001d74:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <StartSensors3+0x238>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbf5 	bl	8000568 <__aeabi_f2d>
 8001d7e:	4680      	mov	r8, r0
 8001d80:	4689      	mov	r9, r1
 8001d82:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <StartSensors3+0x234>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbee 	bl	8000568 <__aeabi_f2d>
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	460d      	mov	r5, r1
 8001d90:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <StartSensors3+0x230>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbe7 	bl	8000568 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001da2:	e9cd 4500 	strd	r4, r5, [sp]
 8001da6:	4642      	mov	r2, r8
 8001da8:	464b      	mov	r3, r9
 8001daa:	4966      	ldr	r1, [pc, #408]	; (8001f44 <StartSensors3+0x23c>)
 8001dac:	485f      	ldr	r0, [pc, #380]	; (8001f2c <StartSensors3+0x224>)
 8001dae:	f010 f927 	bl	8012000 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 8001db2:	485e      	ldr	r0, [pc, #376]	; (8001f2c <StartSensors3+0x224>)
 8001db4:	f7fe fa1c 	bl	80001f0 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	495a      	ldr	r1, [pc, #360]	; (8001f2c <StartSensors3+0x224>)
 8001dc2:	485c      	ldr	r0, [pc, #368]	; (8001f34 <StartSensors3+0x22c>)
 8001dc4:	f007 fd01 	bl	80097ca <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dcc:	f002 fbaa 	bl	8004524 <HAL_Delay>
  	  HAL_UART_Transmit(&DEBUG_USART,"\r\nDone\r\n\r\n",10,HAL_MAX_DELAY);
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	495c      	ldr	r1, [pc, #368]	; (8001f48 <StartSensors3+0x240>)
 8001dd8:	4856      	ldr	r0, [pc, #344]	; (8001f34 <StartSensors3+0x22c>)
 8001dda:	f007 fcf6 	bl	80097ca <HAL_UART_Transmit>


  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2232      	movs	r2, #50	; 0x32
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00f f91a 	bl	8011020 <memset>
  	  MRT_LSM6DSR_getAcceleration(data_raw_acceleration,acceleration_mg);
 8001dec:	4957      	ldr	r1, [pc, #348]	; (8001f4c <StartSensors3+0x244>)
 8001dee:	4858      	ldr	r0, [pc, #352]	; (8001f50 <StartSensors3+0x248>)
 8001df0:	f002 f9ae 	bl	8004150 <MRT_LSM6DSR_getAcceleration>
  	  sprintf((char *)buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <StartSensors3+0x244>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbb5 	bl	8000568 <__aeabi_f2d>
 8001dfe:	4680      	mov	r8, r0
 8001e00:	4689      	mov	r9, r1
 8001e02:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <StartSensors3+0x244>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbae 	bl	8000568 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <StartSensors3+0x244>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fba7 	bl	8000568 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	f107 000c 	add.w	r0, r7, #12
 8001e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e26:	e9cd 4500 	strd	r4, r5, [sp]
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	4949      	ldr	r1, [pc, #292]	; (8001f54 <StartSensors3+0x24c>)
 8001e30:	f010 f8e6 	bl	8012000 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f9d9 	bl	80001f0 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f107 010c 	add.w	r1, r7, #12
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	483a      	ldr	r0, [pc, #232]	; (8001f34 <StartSensors3+0x22c>)
 8001e4c:	f007 fcbd 	bl	80097ca <HAL_UART_Transmit>

  	  memset(buffer, 0, TX_BUF_DIM);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2232      	movs	r2, #50	; 0x32
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00f f8e1 	bl	8011020 <memset>
  	  MRT_LSM6DSR_getAngularRate(data_raw_angular_rate,angular_rate_mdps);
 8001e5e:	493e      	ldr	r1, [pc, #248]	; (8001f58 <StartSensors3+0x250>)
 8001e60:	483e      	ldr	r0, [pc, #248]	; (8001f5c <StartSensors3+0x254>)
 8001e62:	f002 f9e1 	bl	8004228 <MRT_LSM6DSR_getAngularRate>
  	  sprintf((char *)buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <StartSensors3+0x250>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb7c 	bl	8000568 <__aeabi_f2d>
 8001e70:	4680      	mov	r8, r0
 8001e72:	4689      	mov	r9, r1
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <StartSensors3+0x250>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb75 	bl	8000568 <__aeabi_f2d>
 8001e7e:	4604      	mov	r4, r0
 8001e80:	460d      	mov	r5, r1
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <StartSensors3+0x250>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb6e 	bl	8000568 <__aeabi_f2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	f107 000c 	add.w	r0, r7, #12
 8001e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e98:	e9cd 4500 	strd	r4, r5, [sp]
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	492f      	ldr	r1, [pc, #188]	; (8001f60 <StartSensors3+0x258>)
 8001ea2:	f010 f8ad 	bl	8012000 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f9a0 	bl	80001f0 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f107 010c 	add.w	r1, r7, #12
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	481d      	ldr	r0, [pc, #116]	; (8001f34 <StartSensors3+0x22c>)
 8001ebe:	f007 fc84 	bl	80097ca <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2232      	movs	r2, #50	; 0x32
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00f f8a8 	bl	8011020 <memset>
	  MRT_LSM6DSR_getTemperature(data_raw_temperature,temperature_degC);
 8001ed0:	4924      	ldr	r1, [pc, #144]	; (8001f64 <StartSensors3+0x25c>)
 8001ed2:	4825      	ldr	r0, [pc, #148]	; (8001f68 <StartSensors3+0x260>)
 8001ed4:	f002 f980 	bl	80041d8 <MRT_LSM6DSR_getTemperature>
	  sprintf((char *)buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC[0] );
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <StartSensors3+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb43 	bl	8000568 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f107 000c 	add.w	r0, r7, #12
 8001eea:	4920      	ldr	r1, [pc, #128]	; (8001f6c <StartSensors3+0x264>)
 8001eec:	f010 f888 	bl	8012000 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f97b 	bl	80001f0 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f107 010c 	add.w	r1, r7, #12
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	480b      	ldr	r0, [pc, #44]	; (8001f34 <StartSensors3+0x22c>)
 8001f08:	f007 fc5f 	bl	80097ca <HAL_UART_Transmit>


	  //Thermocouple (don't have it)


	  xSemaphoreGive( _SENSORS );
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <StartSensors3+0x220>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	2300      	movs	r3, #0
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	f00b fcf7 	bl	800d908 <xQueueGenericSend>
    osDelay(1);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f00b f9b4 	bl	800d288 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 0 ) == pdTRUE ) osDelay(10);
 8001f20:	e70e      	b.n	8001d40 <StartSensors3+0x38>
 8001f22:	bf00      	nop
 8001f24:	20005110 	.word	0x20005110
 8001f28:	20004fb4 	.word	0x20004fb4
 8001f2c:	2000529c 	.word	0x2000529c
 8001f30:	08015ff0 	.word	0x08015ff0
 8001f34:	20005310 	.word	0x20005310
 8001f38:	20005300 	.word	0x20005300
 8001f3c:	20005298 	.word	0x20005298
 8001f40:	20005390 	.word	0x20005390
 8001f44:	08016000 	.word	0x08016000
 8001f48:	08016028 	.word	0x08016028
 8001f4c:	20000380 	.word	0x20000380
 8001f50:	20000378 	.word	0x20000378
 8001f54:	08016034 	.word	0x08016034
 8001f58:	20000394 	.word	0x20000394
 8001f5c:	2000038c 	.word	0x2000038c
 8001f60:	0801605c 	.word	0x0801605c
 8001f64:	200003a4 	.word	0x200003a4
 8001f68:	200003a0 	.word	0x200003a0
 8001f6c:	08016084 	.word	0x08016084

08001f70 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8001f78:	f00b f97f 	bl	800d27a <osThreadExit>

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8e:	f002 faa9 	bl	80044e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_ADC_MspInit+0x7c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d127      	bne.n	8002072 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_ADC_MspInit+0x80>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_ADC_MspInit+0x80>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_ADC_MspInit+0x80>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_ADC_MspInit+0x80>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_ADC_MspInit+0x80>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_ADC_MspInit+0x80>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800205a:	2340      	movs	r3, #64	; 0x40
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_ADC_MspInit+0x84>)
 800206e:	f002 fe03 	bl	8004c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40012000 	.word	0x40012000
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5c      	ldr	r2, [pc, #368]	; (8002218 <HAL_I2C_MspInit+0x190>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12d      	bne.n	8002106 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a5a      	ldr	r2, [pc, #360]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b58      	ldr	r3, [pc, #352]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020cc:	2312      	movs	r3, #18
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d8:	2304      	movs	r3, #4
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	484f      	ldr	r0, [pc, #316]	; (8002220 <HAL_I2C_MspInit+0x198>)
 80020e4:	f002 fdc8 	bl	8004c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_I2C_MspInit+0x194>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002104:	e083      	b.n	800220e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a46      	ldr	r2, [pc, #280]	; (8002224 <HAL_I2C_MspInit+0x19c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12d      	bne.n	800216c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a40      	ldr	r2, [pc, #256]	; (800221c <HAL_I2C_MspInit+0x194>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800212c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002132:	2312      	movs	r3, #18
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002136:	2301      	movs	r3, #1
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800213e:	2304      	movs	r3, #4
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4835      	ldr	r0, [pc, #212]	; (8002220 <HAL_I2C_MspInit+0x198>)
 800214a:	f002 fd95 	bl	8004c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
}
 800216a:	e050      	b.n	800220e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <HAL_I2C_MspInit+0x1a0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d14b      	bne.n	800220e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_I2C_MspInit+0x194>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_I2C_MspInit+0x194>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_I2C_MspInit+0x194>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b4:	2312      	movs	r3, #18
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c0:	2304      	movs	r3, #4
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4818      	ldr	r0, [pc, #96]	; (800222c <HAL_I2C_MspInit+0x1a4>)
 80021cc:	f002 fd54 	bl	8004c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d6:	2312      	movs	r3, #18
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021da:	2301      	movs	r3, #1
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021e2:	2304      	movs	r3, #4
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4810      	ldr	r0, [pc, #64]	; (8002230 <HAL_I2C_MspInit+0x1a8>)
 80021ee:	f002 fd43 	bl	8004c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_I2C_MspInit+0x194>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_I2C_MspInit+0x194>)
 80021fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_I2C_MspInit+0x194>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
}
 800220e:	bf00      	nop
 8002210:	3738      	adds	r7, #56	; 0x38
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40005400 	.word	0x40005400
 800221c:	40023800 	.word	0x40023800
 8002220:	40020400 	.word	0x40020400
 8002224:	40005800 	.word	0x40005800
 8002228:	40005c00 	.word	0x40005c00
 800222c:	40020800 	.word	0x40020800
 8002230:	40020000 	.word	0x40020000

08002234 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_RTC_MspInit+0x30>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10a      	bne.n	800225c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RTC_MspInit+0x34>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2029      	movs	r0, #41	; 0x29
 8002252:	f002 fcd9 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002256:	2029      	movs	r0, #41	; 0x29
 8002258:	f002 fcf2 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40002800 	.word	0x40002800
 8002268:	42470e3c 	.word	0x42470e3c

0800226c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a4c      	ldr	r2, [pc, #304]	; (80023bc <HAL_SPI_MspInit+0x150>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12d      	bne.n	80022ea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a43      	ldr	r2, [pc, #268]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d8:	2305      	movs	r3, #5
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	4619      	mov	r1, r3
 80022e2:	4838      	ldr	r0, [pc, #224]	; (80023c4 <HAL_SPI_MspInit+0x158>)
 80022e4:	f002 fcc8 	bl	8004c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80022e8:	e064      	b.n	80023b4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a36      	ldr	r2, [pc, #216]	; (80023c8 <HAL_SPI_MspInit+0x15c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d12d      	bne.n	8002350 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 80022fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002302:	6453      	str	r3, [r2, #68]	; 0x44
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800232c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800233e:	2305      	movs	r3, #5
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4820      	ldr	r0, [pc, #128]	; (80023cc <HAL_SPI_MspInit+0x160>)
 800234a:	f002 fc95 	bl	8004c78 <HAL_GPIO_Init>
}
 800234e:	e031      	b.n	80023b4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_SPI_MspInit+0x164>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12c      	bne.n	80023b4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002380:	f043 0320 	orr.w	r3, r3, #32
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_SPI_MspInit+0x154>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002392:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023a4:	2305      	movs	r3, #5
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4809      	ldr	r0, [pc, #36]	; (80023d4 <HAL_SPI_MspInit+0x168>)
 80023b0:	f002 fc62 	bl	8004c78 <HAL_GPIO_Init>
}
 80023b4:	bf00      	nop
 80023b6:	3738      	adds	r7, #56	; 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40013400 	.word	0x40013400
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40015000 	.word	0x40015000
 80023d4:	40021400 	.word	0x40021400

080023d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d10d      	bne.n	8002406 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d11d      	bne.n	8002476 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_TIM_MspPostInit+0x68>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_TIM_MspPostInit+0x68>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_TIM_MspPostInit+0x68>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002456:	2304      	movs	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4619      	mov	r1, r3
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <HAL_TIM_MspPostInit+0x6c>)
 8002472:	f002 fc01 	bl	8004c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12c      	bne.n	8002504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a42      	ldr	r2, [pc, #264]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024d0:	f043 0310 	orr.w	r3, r3, #16
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80024e2:	2303      	movs	r3, #3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80024f2:	2308      	movs	r3, #8
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4837      	ldr	r0, [pc, #220]	; (80025dc <HAL_UART_MspInit+0x154>)
 80024fe:	f002 fbbb 	bl	8004c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002502:	e063      	b.n	80025cc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_UART_MspInit+0x158>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12d      	bne.n	800256a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_UART_MspInit+0x150>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002546:	f44f 7340 	mov.w	r3, #768	; 0x300
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002558:	2307      	movs	r3, #7
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	4820      	ldr	r0, [pc, #128]	; (80025e4 <HAL_UART_MspInit+0x15c>)
 8002564:	f002 fb88 	bl	8004c78 <HAL_GPIO_Init>
}
 8002568:	e030      	b.n	80025cc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_UART_MspInit+0x160>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d12b      	bne.n	80025cc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_UART_MspInit+0x150>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <HAL_UART_MspInit+0x150>)
 800257e:	f043 0320 	orr.w	r3, r3, #32
 8002582:	6453      	str	r3, [r2, #68]	; 0x44
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_UART_MspInit+0x150>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <HAL_UART_MspInit+0x150>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_UART_MspInit+0x150>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80025ac:	23c0      	movs	r3, #192	; 0xc0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025bc:	2308      	movs	r3, #8
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4809      	ldr	r0, [pc, #36]	; (80025ec <HAL_UART_MspInit+0x164>)
 80025c8:	f002 fb56 	bl	8004c78 <HAL_GPIO_Init>
}
 80025cc:	bf00      	nop
 80025ce:	3738      	adds	r7, #56	; 0x38
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40007c00 	.word	0x40007c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40004800 	.word	0x40004800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40020800 	.word	0x40020800

080025f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002600:	2200      	movs	r2, #0
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	2036      	movs	r0, #54	; 0x36
 8002606:	f002 faff 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800260a:	2036      	movs	r0, #54	; 0x36
 800260c:	f002 fb18 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_InitTick+0xa4>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_InitTick+0xa4>)
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	6413      	str	r3, [r2, #64]	; 0x40
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_InitTick+0xa4>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800262c:	f107 0210 	add.w	r2, r7, #16
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f005 fc84 	bl	8007f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800263c:	f005 fc5a 	bl	8007ef4 <HAL_RCC_GetPCLK1Freq>
 8002640:	4603      	mov	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_InitTick+0xa8>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	3b01      	subs	r3, #1
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_InitTick+0xac>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_InitTick+0xb0>)
 8002658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_InitTick+0xac>)
 800265c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002660:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_InitTick+0xac>)
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_InitTick+0xac>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_InitTick+0xac>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <HAL_InitTick+0xac>)
 8002676:	f006 fb01 	bl	8008c7c <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002680:	4806      	ldr	r0, [pc, #24]	; (800269c <HAL_InitTick+0xac>)
 8002682:	f006 fb30 	bl	8008ce6 <HAL_TIM_Base_Start_IT>
 8002686:	4603      	mov	r3, r0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3730      	adds	r7, #48	; 0x30
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	431bde83 	.word	0x431bde83
 800269c:	20005408 	.word	0x20005408
 80026a0:	40001000 	.word	0x40001000

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0x4>

080026be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <UsageFault_Handler+0x4>

080026ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <RTC_Alarm_IRQHandler+0x10>)
 80026de:	f006 f94f 	bl	8008980 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20005274 	.word	0x20005274

080026ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <TIM6_DAC_IRQHandler+0x10>)
 80026f2:	f006 fb47 	bl	8008d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20005408 	.word	0x20005408

08002700 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <OTG_FS_IRQHandler+0x10>)
 8002706:	f003 ff6b 	bl	80065e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20006a60 	.word	0x20006a60

08002714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_kill>:

int _kill(int pid, int sig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800272e:	f00e fb1b 	bl	8010d68 <__errno>
 8002732:	4603      	mov	r3, r0
 8002734:	2216      	movs	r2, #22
 8002736:	601a      	str	r2, [r3, #0]
	return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_exit>:

void _exit (int status)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffe7 	bl	8002724 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002756:	e7fe      	b.n	8002756 <_exit+0x12>

08002758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e00a      	b.n	8002780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800276a:	f3af 8000 	nop.w
 800276e:	4601      	mov	r1, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	b2ca      	uxtb	r2, r1
 8002778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	dbf0      	blt.n	800276a <_read+0x12>
	}

return len;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e009      	b.n	80027b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	60ba      	str	r2, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbf1      	blt.n	80027a4 <_write+0x12>
	}
	return len;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_close>:

int _close(int file)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027f2:	605a      	str	r2, [r3, #4]
	return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_isatty>:

int _isatty(int file)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return 1;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
	return 0;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f00e fa80 	bl	8010d68 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20030000 	.word	0x20030000
 8002894:	00000400 	.word	0x00000400
 8002898:	200003a8 	.word	0x200003a8
 800289c:	20006e78 	.word	0x20006e78

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <SystemInit+0x28>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <SystemInit+0x28>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SystemInit+0x28>)
 80028b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ba:	609a      	str	r2, [r3, #8]
#endif
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028d2:	e003      	b.n	80028dc <LoopCopyDataInit>

080028d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028da:	3104      	adds	r1, #4

080028dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028e4:	d3f6      	bcc.n	80028d4 <CopyDataInit>
  ldr  r2, =_sbss
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028e8:	e002      	b.n	80028f0 <LoopFillZerobss>

080028ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028ec:	f842 3b04 	str.w	r3, [r2], #4

080028f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028f4:	d3f9      	bcc.n	80028ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028f6:	f7ff ffd3 	bl	80028a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fa:	f00e fb31 	bl	8010f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fe:	f7fe fb85 	bl	800100c <main>
  bx  lr    
 8002902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002904:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002908:	0801699c 	.word	0x0801699c
  ldr  r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002910:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 8002914:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 8002918:	20006e78 	.word	0x20006e78

0800291c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800291c:	e7fe      	b.n	800291c <ADC_IRQHandler>
	...

08002920 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 800292c:	2364      	movs	r3, #100	; 0x64
 800292e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8002938:	e07a      	b.n	8002a30 <GPS_Poll+0x110>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <GPS_Poll+0x128>)
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	2364      	movs	r3, #100	; 0x64
 8002940:	2201      	movs	r2, #1
 8002942:	4942      	ldr	r1, [pc, #264]	; (8002a4c <GPS_Poll+0x12c>)
 8002944:	f006 ffda 	bl	80098fc <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8002948:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <GPS_Poll+0x12c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d00f      	beq.n	8002970 <GPS_Poll+0x50>
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <GPS_Poll+0x130>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b63      	cmp	r3, #99	; 0x63
 8002956:	d80b      	bhi.n	8002970 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <GPS_Poll+0x130>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	b2d1      	uxtb	r1, r2
 8002960:	4a3b      	ldr	r2, [pc, #236]	; (8002a50 <GPS_Poll+0x130>)
 8002962:	7011      	strb	r1, [r2, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <GPS_Poll+0x12c>)
 8002968:	7819      	ldrb	r1, [r3, #0]
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <GPS_Poll+0x134>)
 800296c:	5499      	strb	r1, [r3, r2]
 800296e:	e028      	b.n	80029c2 <GPS_Poll+0xa2>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8002970:	4838      	ldr	r0, [pc, #224]	; (8002a54 <GPS_Poll+0x134>)
 8002972:	f000 f875 	bl	8002a60 <GPS_validate>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01a      	beq.n	80029b2 <GPS_Poll+0x92>
				if(GPS_parse((char*) rx_buffer)){
 800297c:	4835      	ldr	r0, [pc, #212]	; (8002a54 <GPS_Poll+0x134>)
 800297e:	f000 f8d1 	bl	8002b24 <GPS_parse>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d014      	beq.n	80029b2 <GPS_Poll+0x92>
					*latitude = GPS.dec_latitude;
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <GPS_Poll+0x138>)
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <GPS_Poll+0x138>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time - INIT_TIME;//TODO correction of
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <GPS_Poll+0x138>)
 800299a:	ed93 7a05 	vldr	s14, [r3, #20]
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <GPS_Poll+0x13c>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edc3 7a00 	vstr	s15, [r3]
					done = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <GPS_Poll+0x130>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80029b8:	2264      	movs	r2, #100	; 0x64
 80029ba:	2100      	movs	r1, #0
 80029bc:	4825      	ldr	r0, [pc, #148]	; (8002a54 <GPS_Poll+0x134>)
 80029be:	f00e fb2f 	bl	8011020 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <GPS_Poll+0x128>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <GPS_Poll+0x128>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <GPS_Poll+0x128>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <GPS_Poll+0x128>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <GPS_Poll+0x128>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <GPS_Poll+0x128>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <GPS_Poll+0x128>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <GPS_Poll+0x128>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8002a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8002a30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d203      	bcs.n	8002a40 <GPS_Poll+0x120>
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f43f af7d 	beq.w	800293a <GPS_Poll+0x1a>
	}
}
 8002a40:	bf00      	nop
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20005070 	.word	0x20005070
 8002a4c:	200003ac 	.word	0x200003ac
 8002a50:	200003ad 	.word	0x200003ad
 8002a54:	200054a0 	.word	0x200054a0
 8002a58:	20005448 	.word	0x20005448
 8002a5c:	200053d8 	.word	0x200053d8

08002a60 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b24      	cmp	r3, #36	; 0x24
 8002a7a:	d103      	bne.n	8002a84 <GPS_validate+0x24>
        i++;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002a82:	e00c      	b.n	8002a9e <GPS_validate+0x3e>
        return 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e047      	b.n	8002b18 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4053      	eors	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        i++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <GPS_validate+0x5c>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab4:	d002      	beq.n	8002abc <GPS_validate+0x5c>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b4a      	cmp	r3, #74	; 0x4a
 8002aba:	dde5      	ble.n	8002a88 <GPS_validate+0x28>
    }

    if(i >= 75){
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b4a      	cmp	r3, #74	; 0x4a
 8002ac0:	dd01      	ble.n	8002ac6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e028      	b.n	8002b18 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad0:	d119      	bne.n	8002b06 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	490a      	ldr	r1, [pc, #40]	; (8002b20 <GPS_validate+0xc0>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00f fa82 	bl	8012000 <siprintf>
    return((checkcalcstr[0] == check[0])
 8002afc:	7a3a      	ldrb	r2, [r7, #8]
 8002afe:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d108      	bne.n	8002b16 <GPS_validate+0xb6>
 8002b04:	e001      	b.n	8002b0a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8002b06:	2300      	movs	r3, #0
 8002b08:	e006      	b.n	8002b18 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002b0a:	7a7a      	ldrb	r2, [r7, #9]
 8002b0c:	7b7b      	ldrb	r3, [r7, #13]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d101      	bne.n	8002b16 <GPS_validate+0xb6>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <GPS_validate+0xb8>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	080160a0 	.word	0x080160a0

08002b24 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af08      	add	r7, sp, #32
 8002b2a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	496d      	ldr	r1, [pc, #436]	; (8002ce4 <GPS_parse+0x1c0>)
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f00f faf6 	bl	8012122 <strncmp>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d139      	bne.n	8002bb0 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <GPS_parse+0x1c4>)
 8002b3e:	9307      	str	r3, [sp, #28]
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <GPS_parse+0x1c8>)
 8002b42:	9306      	str	r3, [sp, #24]
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <GPS_parse+0x1cc>)
 8002b46:	9305      	str	r3, [sp, #20]
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <GPS_parse+0x1d0>)
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <GPS_parse+0x1d4>)
 8002b4e:	9303      	str	r3, [sp, #12]
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <GPS_parse+0x1d8>)
 8002b52:	9302      	str	r3, [sp, #8]
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <GPS_parse+0x1dc>)
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <GPS_parse+0x1e0>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <GPS_parse+0x1e4>)
 8002b5e:	4a6b      	ldr	r2, [pc, #428]	; (8002d0c <GPS_parse+0x1e8>)
 8002b60:	496b      	ldr	r1, [pc, #428]	; (8002d10 <GPS_parse+0x1ec>)
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f00f fa6c 	bl	8012040 <siscanf>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f340 80b5 	ble.w	8002cda <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <GPS_parse+0x1f0>)
 8002b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <GPS_parse+0x1f0>)
 8002b78:	7e1b      	ldrb	r3, [r3, #24]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b80:	f000 f8ec 	bl	8002d5c <GPS_nmea_to_dec>
 8002b84:	eef0 7a40 	vmov.f32	s15, s0
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <GPS_parse+0x1f0>)
 8002b8a:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <GPS_parse+0x1f0>)
 8002b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b94:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <GPS_parse+0x1f0>)
 8002b96:	7e5b      	ldrb	r3, [r3, #25]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9e:	f000 f8dd 	bl	8002d5c <GPS_nmea_to_dec>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <GPS_parse+0x1f0>)
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e095      	b.n	8002cdc <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	4959      	ldr	r1, [pc, #356]	; (8002d18 <GPS_parse+0x1f4>)
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f00f fab4 	bl	8012122 <strncmp>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d134      	bne.n	8002c2a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8002bc0:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <GPS_parse+0x1f8>)
 8002bc2:	9305      	str	r3, [sp, #20]
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <GPS_parse+0x1fc>)
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <GPS_parse+0x200>)
 8002bca:	9303      	str	r3, [sp, #12]
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <GPS_parse+0x1d8>)
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <GPS_parse+0x1dc>)
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <GPS_parse+0x1e0>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <GPS_parse+0x1e4>)
 8002bda:	4a4c      	ldr	r2, [pc, #304]	; (8002d0c <GPS_parse+0x1e8>)
 8002bdc:	4952      	ldr	r1, [pc, #328]	; (8002d28 <GPS_parse+0x204>)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f00f fa2e 	bl	8012040 <siscanf>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dd77      	ble.n	8002cda <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002bea:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <GPS_parse+0x1f0>)
 8002bec:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bf0:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <GPS_parse+0x1f0>)
 8002bf2:	7e1b      	ldrb	r3, [r3, #24]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfa:	f000 f8af 	bl	8002d5c <GPS_nmea_to_dec>
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <GPS_parse+0x1f0>)
 8002c04:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <GPS_parse+0x1f0>)
 8002c0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <GPS_parse+0x1f0>)
 8002c10:	7e5b      	ldrb	r3, [r3, #25]
 8002c12:	4618      	mov	r0, r3
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f000 f8a0 	bl	8002d5c <GPS_nmea_to_dec>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <GPS_parse+0x1f0>)
 8002c22:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e058      	b.n	8002cdc <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8002c2a:	2206      	movs	r2, #6
 8002c2c:	493f      	ldr	r1, [pc, #252]	; (8002d2c <GPS_parse+0x208>)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f00f fa77 	bl	8012122 <strncmp>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d130      	bne.n	8002c9c <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <GPS_parse+0x20c>)
 8002c3c:	9303      	str	r3, [sp, #12]
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <GPS_parse+0x1e8>)
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <GPS_parse+0x1d8>)
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <GPS_parse+0x1dc>)
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <GPS_parse+0x1e0>)
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <GPS_parse+0x1e4>)
 8002c4e:	4939      	ldr	r1, [pc, #228]	; (8002d34 <GPS_parse+0x210>)
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f00f f9f5 	bl	8012040 <siscanf>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd3e      	ble.n	8002cda <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <GPS_parse+0x1f0>)
 8002c5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <GPS_parse+0x1f0>)
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
 8002c66:	4618      	mov	r0, r3
 8002c68:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6c:	f000 f876 	bl	8002d5c <GPS_nmea_to_dec>
 8002c70:	eef0 7a40 	vmov.f32	s15, s0
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <GPS_parse+0x1f0>)
 8002c76:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <GPS_parse+0x1f0>)
 8002c7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <GPS_parse+0x1f0>)
 8002c82:	7e5b      	ldrb	r3, [r3, #25]
 8002c84:	4618      	mov	r0, r3
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	f000 f867 	bl	8002d5c <GPS_nmea_to_dec>
 8002c8e:	eef0 7a40 	vmov.f32	s15, s0
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <GPS_parse+0x1f0>)
 8002c94:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e01f      	b.n	8002cdc <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8002c9c:	2206      	movs	r2, #6
 8002c9e:	4926      	ldr	r1, [pc, #152]	; (8002d38 <GPS_parse+0x214>)
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f00f fa3e 	bl	8012122 <strncmp>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <GPS_parse+0x218>)
 8002cae:	9305      	str	r3, [sp, #20]
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <GPS_parse+0x21c>)
 8002cb2:	9304      	str	r3, [sp, #16]
 8002cb4:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <GPS_parse+0x220>)
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <GPS_parse+0x200>)
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <GPS_parse+0x224>)
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <GPS_parse+0x228>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <GPS_parse+0x22c>)
 8002cc6:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <GPS_parse+0x230>)
 8002cc8:	4923      	ldr	r1, [pc, #140]	; (8002d58 <GPS_parse+0x234>)
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f00f f9b8 	bl	8012040 <siscanf>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dd01      	ble.n	8002cda <GPS_parse+0x1b6>
            return 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <GPS_parse+0x1b8>
    }
    return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	080160a8 	.word	0x080160a8
 8002ce8:	20005474 	.word	0x20005474
 8002cec:	20005470 	.word	0x20005470
 8002cf0:	2000546c 	.word	0x2000546c
 8002cf4:	20005468 	.word	0x20005468
 8002cf8:	20005464 	.word	0x20005464
 8002cfc:	20005461 	.word	0x20005461
 8002d00:	20005454 	.word	0x20005454
 8002d04:	20005460 	.word	0x20005460
 8002d08:	20005458 	.word	0x20005458
 8002d0c:	2000545c 	.word	0x2000545c
 8002d10:	080160b0 	.word	0x080160b0
 8002d14:	20005448 	.word	0x20005448
 8002d18:	080160d8 	.word	0x080160d8
 8002d1c:	20005480 	.word	0x20005480
 8002d20:	2000547c 	.word	0x2000547c
 8002d24:	20005478 	.word	0x20005478
 8002d28:	080160e0 	.word	0x080160e0
 8002d2c:	08016100 	.word	0x08016100
 8002d30:	20005484 	.word	0x20005484
 8002d34:	08016108 	.word	0x08016108
 8002d38:	08016124 	.word	0x08016124
 8002d3c:	2000549c 	.word	0x2000549c
 8002d40:	20005498 	.word	0x20005498
 8002d44:	20005495 	.word	0x20005495
 8002d48:	20005494 	.word	0x20005494
 8002d4c:	20005490 	.word	0x20005490
 8002d50:	2000548c 	.word	0x2000548c
 8002d54:	20005488 	.word	0x20005488
 8002d58:	0801612c 	.word	0x0801612c

08002d5c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d66:	4603      	mov	r3, r0
 8002d68:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002d6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d6e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002df0 <GPS_nmea_to_dec+0x94>
 8002d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7a:	ee17 3a90 	vmov	r3, s15
 8002d7e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2264      	movs	r2, #100	; 0x64
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d90:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d98:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8002d9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002da0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002df4 <GPS_nmea_to_dec+0x98>
 8002da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	2b53      	cmp	r3, #83	; 0x53
 8002dc6:	d002      	beq.n	8002dce <GPS_nmea_to_dec+0x72>
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b57      	cmp	r3, #87	; 0x57
 8002dcc:	d105      	bne.n	8002dda <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8002dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd2:	eef1 7a67 	vneg.f32	s15, s15
 8002dd6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	ee07 3a90 	vmov	s15, r3
}
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	42c80000 	.word	0x42c80000
 8002df4:	42700000 	.word	0x42700000

08002df8 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <GPS_init+0x38>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <GPS_init+0x3c>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <GPS_init+0x3c>)
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	2210      	movs	r2, #16
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <GPS_init+0x40>)
 8002e1a:	f006 fcd6 	bl	80097ca <HAL_UART_Transmit>

	INIT_TIME = GPS.utc_time;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <GPS_init+0x44>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <GPS_init+0x48>)
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20005070 	.word	0x20005070
 8002e34:	20005504 	.word	0x20005504
 8002e38:	0801614c 	.word	0x0801614c
 8002e3c:	20005448 	.word	0x20005448
 8002e40:	200053d8 	.word	0x200053d8

08002e44 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8002e44:	b084      	sub	sp, #16
 8002e46:	b5b0      	push	{r4, r5, r7, lr}
 8002e48:	b092      	sub	sp, #72	; 0x48
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
 8002e68:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <checkForI2CDevices+0x108>)
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <checkForI2CDevices+0x10c>)
 8002e70:	f107 040c 	add.w	r4, r7, #12
 8002e74:	461d      	mov	r5, r3
 8002e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e7e:	c403      	stmia	r4!, {r0, r1}
 8002e80:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <checkForI2CDevices+0x110>)
 8002e84:	463b      	mov	r3, r7
 8002e86:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e88:	c303      	stmia	r3!, {r0, r1}
 8002e8a:	801a      	strh	r2, [r3, #0]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	0c12      	lsrs	r2, r2, #16
 8002e90:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f001 fb42 	bl	8004524 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8002ea0:	f107 010c 	add.w	r1, r7, #12
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	221a      	movs	r2, #26
 8002eaa:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002eae:	f006 fc8c 	bl	80097ca <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002eb8:	e035      	b.n	8002f26 <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8002eba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002ec8:	2305      	movs	r3, #5
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f002 fcfe 	bl	80058cc <HAL_I2C_IsDeviceReady>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8002ed6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8002ede:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002eec:	f006 fc6d 	bl	80097ca <HAL_UART_Transmit>
 8002ef0:	e014      	b.n	8002f1c <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8002ef2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d110      	bne.n	8002f1c <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8002efa:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f02:	4915      	ldr	r1, [pc, #84]	; (8002f58 <checkForI2CDevices+0x114>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00f f87b 	bl	8012000 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8002f0a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	2219      	movs	r2, #25
 8002f14:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002f18:	f006 fc57 	bl	80097ca <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f20:	3301      	adds	r3, #1
 8002f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f26:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	dac5      	bge.n	8002eba <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8002f2e:	4639      	mov	r1, r7
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	220b      	movs	r2, #11
 8002f36:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002f3a:	f006 fc46 	bl	80097ca <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8002f3e:	bf00      	nop
 8002f40:	3748      	adds	r7, #72	; 0x48
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002f48:	b004      	add	sp, #16
 8002f4a:	4770      	bx	lr
 8002f4c:	00202d20 	.word	0x00202d20
 8002f50:	08016168 	.word	0x08016168
 8002f54:	08016184 	.word	0x08016184
 8002f58:	08016160 	.word	0x08016160

08002f5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	4790      	blx	r2
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4413      	add	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8002f9c:	e7e6      	b.n	8002f6c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8002f9e:	697b      	ldr	r3, [r7, #20]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <_ZN5PrintC1Ev+0x24>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	0801647c 	.word	0x0801647c

08002fd0 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffe4 	bl	8002fa8 <_ZN5PrintC1Ev>
 8002fe0:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_ZN6StreamC1Ev+0x28>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	080164ac 	.word	0x080164ac

08002ffc <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ffe1 	bl	8002fd0 <_ZN6StreamC1Ev>
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3390      	adds	r3, #144	; 0x90
 800301e:	2220      	movs	r2, #32
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f00d fffc 	bl	8011020 <memset>
  rxBufferIndex = 0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	0801648c 	.word	0x0801648c

0800306c <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01d      	beq.n	80030be <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003088:	2b1f      	cmp	r3, #31
 800308a:	d901      	bls.n	8003090 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800308c:	2300      	movs	r3, #0
 800308e:	e028      	b.n	80030e2 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003096:	4619      	mov	r1, r3
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	440b      	add	r3, r1
 800309e:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80030bc:	e010      	b.n	80030e0 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f984 	bl	80033cc <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80030c4:	1cfb      	adds	r3, r7, #3
 80030c6:	2201      	movs	r2, #1
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8b7 	bl	800323e <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f949 	bl	8003368 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	333c      	adds	r3, #60	; 0x3c
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fd24 	bl	8005b28 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80030e0:	2301      	movs	r3, #1
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d21e      	bcs.n	800314a <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	440a      	add	r2, r1
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	4611      	mov	r1, r2
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e7ed      	b.n	8003104 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f94f 	bl	80033cc <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	461a      	mov	r2, r3
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f882 	bl	800323e <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f914 	bl	8003368 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	333c      	adds	r3, #60	; 0x3c
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fcef 	bl	8005b28 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800314a:	687b      	ldr	r3, [r7, #4]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	1ad3      	subs	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003190:	b2da      	uxtb	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	429a      	cmp	r2, r3
 800319c:	bf34      	ite	cc
 800319e:	2301      	movcc	r3, #1
 80031a0:	2300      	movcs	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80031ba:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  int value = -1;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf34      	ite	cc
 80031fe:	2301      	movcc	r3, #1
 8003200:	2300      	movcs	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800321a:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800321c:	68fb      	ldr	r3, [r7, #12]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800323e:	b480      	push	{r7}
 8003240:	b089      	sub	sp, #36	; 0x24
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	dd41      	ble.n	80032de <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800325a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800325e:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3b01      	subs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ed      	bne.n	8003260 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e068      	b.n	800335c <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	60ba      	str	r2, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	611a      	str	r2, [r3, #16]
        length--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
        size++;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	3301      	adds	r3, #1
 80032a2:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d104      	bne.n	80032bc <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0c8      	beq.n	8003254 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	60ba      	str	r2, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	611a      	str	r2, [r3, #16]
            length--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	607b      	str	r3, [r7, #4]
            size++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3301      	adds	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80032dc:	e7ba      	b.n	8003254 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80032de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b01      	subs	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ec      	bne.n	80032e4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e025      	b.n	800335c <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003318:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800331a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3b01      	subs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ed      	bne.n	8003320 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e008      	b.n	800335c <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 800335a:	69bb      	ldr	r3, [r7, #24]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3724      	adds	r7, #36	; 0x24
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d106      	bne.n	8003388 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800337a:	2049      	movs	r0, #73	; 0x49
 800337c:	f001 fc60 	bl	8004c40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003380:	2048      	movs	r0, #72	; 0x48
 8003382:	f001 fc5d 	bl	8004c40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003386:	e016      	b.n	80033b6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d106      	bne.n	80033a0 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003392:	2022      	movs	r0, #34	; 0x22
 8003394:	f001 fc54 	bl	8004c40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003398:	2021      	movs	r0, #33	; 0x21
 800339a:	f001 fc51 	bl	8004c40 <HAL_NVIC_EnableIRQ>
}
 800339e:	e00a      	b.n	80033b6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d105      	bne.n	80033b6 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80033aa:	2020      	movs	r0, #32
 80033ac:	f001 fc48 	bl	8004c40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033b0:	201f      	movs	r0, #31
 80033b2:	f001 fc45 	bl	8004c40 <HAL_NVIC_EnableIRQ>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40005c00 	.word	0x40005c00
 80033c4:	40005800 	.word	0x40005800
 80033c8:	40005400 	.word	0x40005400

080033cc <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <_ZN7TwoWire16disableInterruptEv+0x58>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d106      	bne.n	80033ec <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80033de:	2049      	movs	r0, #73	; 0x49
 80033e0:	f001 fc3c 	bl	8004c5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80033e4:	2048      	movs	r0, #72	; 0x48
 80033e6:	f001 fc39 	bl	8004c5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80033ea:	e016      	b.n	800341a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d106      	bne.n	8003404 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80033f6:	2022      	movs	r0, #34	; 0x22
 80033f8:	f001 fc30 	bl	8004c5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80033fc:	2021      	movs	r0, #33	; 0x21
 80033fe:	f001 fc2d 	bl	8004c5c <HAL_NVIC_DisableIRQ>
}
 8003402:	e00a      	b.n	800341a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <_ZN7TwoWire16disableInterruptEv+0x60>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d105      	bne.n	800341a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800340e:	2020      	movs	r0, #32
 8003410:	f001 fc24 	bl	8004c5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003414:	201f      	movs	r0, #31
 8003416:	f001 fc21 	bl	8004c5c <HAL_NVIC_DisableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40005c00 	.word	0x40005c00
 8003428:	40005800 	.word	0x40005800
 800342c:	40005400 	.word	0x40005400

08003430 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d110      	bne.n	8003462 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003446:	4293      	cmp	r3, r2
 8003448:	d10b      	bne.n	8003462 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800344c:	4808      	ldr	r0, [pc, #32]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800344e:	f7ff fdd5 	bl	8002ffc <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003456:	f7ff fdd1 	bl	8002ffc <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800345a:	4908      	ldr	r1, [pc, #32]	; (800347c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800345c:	4808      	ldr	r0, [pc, #32]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800345e:	f7ff fdcd 	bl	8002ffc <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40005400 	.word	0x40005400
 8003470:	200003b0 	.word	0x200003b0
 8003474:	40005800 	.word	0x40005800
 8003478:	20000468 	.word	0x20000468
 800347c:	40005c00 	.word	0x40005c00
 8003480:	20000520 	.word	0x20000520

08003484 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
 8003488:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800348c:	2001      	movs	r0, #1
 800348e:	f7ff ffcf 	bl	8003430 <_Z41__static_initialization_and_destruction_0ii>
 8003492:	bd80      	pop	{r7, pc}

08003494 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	460b      	mov	r3, r1
 80034a2:	72fb      	strb	r3, [r7, #11]
 80034a4:	4613      	mov	r3, r2
 80034a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685c      	ldr	r4, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6898      	ldr	r0, [r3, #8]
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	7af9      	ldrb	r1, [r7, #11]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	47a0      	blx	r4
 80034b8:	6178      	str	r0, [r7, #20]

  return ret;
 80034ba:	697b      	ldr	r3, [r7, #20]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}

080034c4 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	461a      	mov	r2, r3
 80034d0:	460b      	mov	r3, r1
 80034d2:	72fb      	strb	r3, [r7, #11]
 80034d4:	4613      	mov	r3, r2
 80034d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681c      	ldr	r4, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6898      	ldr	r0, [r3, #8]
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	7af9      	ldrb	r1, [r7, #11]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	47a0      	blx	r4
 80034e8:	6178      	str	r0, [r7, #20]

  return ret;
 80034ea:	697b      	ldr	r3, [r7, #20]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80034fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800350a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003520 <lsm6dsr_from_fs2g_to_mg+0x2c>
 800350e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003512:	eeb0 0a67 	vmov.f32	s0, s15
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	3d79db23 	.word	0x3d79db23

08003524 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800352e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003550 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 800353e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003542:	eeb0 0a67 	vmov.f32	s0, s15
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	428c0000 	.word	0x428c0000

08003554 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800355e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800356a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003588 <lsm6dsr_from_lsb_to_celsius+0x34>
 800356e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003572:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003576:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800357a:	eeb0 0a67 	vmov.f32	s0, s15
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	43800000 	.word	0x43800000

0800358c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003598:	f107 0208 	add.w	r2, r7, #8
 800359c:	2301      	movs	r3, #1
 800359e:	2110      	movs	r1, #16
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff77 	bl	8003494 <lsm6dsr_read_reg>
 80035a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	7a3b      	ldrb	r3, [r7, #8]
 80035b8:	f362 0383 	bfi	r3, r2, #2, #2
 80035bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80035be:	f107 0208 	add.w	r2, r7, #8
 80035c2:	2301      	movs	r3, #1
 80035c4:	2110      	movs	r1, #16
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff7c 	bl	80034c4 <lsm6dsr_write_reg>
 80035cc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fc54 	bl	8003e9c <lsm6dsr_fsm_enable_get>
 80035f4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 80c4 	bne.w	8003786 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80035fe:	7b3b      	ldrb	r3, [r7, #12]
 8003600:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003606:	7b3b      	ldrb	r3, [r7, #12]
 8003608:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800360c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800360e:	4313      	orrs	r3, r2
 8003610:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003612:	7b3b      	ldrb	r3, [r7, #12]
 8003614:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003618:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800361a:	4313      	orrs	r3, r2
 800361c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800361e:	7b3b      	ldrb	r3, [r7, #12]
 8003620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003624:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003626:	4313      	orrs	r3, r2
 8003628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800362a:	7b3b      	ldrb	r3, [r7, #12]
 800362c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003630:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003632:	4313      	orrs	r3, r2
 8003634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003636:	7b3b      	ldrb	r3, [r7, #12]
 8003638:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800363c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800363e:	4313      	orrs	r3, r2
 8003640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003642:	7b3b      	ldrb	r3, [r7, #12]
 8003644:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003648:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800364a:	4313      	orrs	r3, r2
 800364c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800364e:	7b3b      	ldrb	r3, [r7, #12]
 8003650:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003656:	4313      	orrs	r3, r2
 8003658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800365a:	7b7b      	ldrb	r3, [r7, #13]
 800365c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003660:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003662:	4313      	orrs	r3, r2
 8003664:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800366c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800366e:	4313      	orrs	r3, r2
 8003670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003672:	7b7b      	ldrb	r3, [r7, #13]
 8003674:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003678:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800367a:	4313      	orrs	r3, r2
 800367c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800367e:	7b7b      	ldrb	r3, [r7, #13]
 8003680:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003686:	4313      	orrs	r3, r2
 8003688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800368a:	7b7b      	ldrb	r3, [r7, #13]
 800368c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003690:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003692:	4313      	orrs	r3, r2
 8003694:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003696:	7b7b      	ldrb	r3, [r7, #13]
 8003698:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800369c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800369e:	4313      	orrs	r3, r2
 80036a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80036a2:	7b7b      	ldrb	r3, [r7, #13]
 80036a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80036a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80036ae:	7b7b      	ldrb	r3, [r7, #13]
 80036b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80036b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d163      	bne.n	8003786 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80036be:	f107 030b 	add.w	r3, r7, #11
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fc15 	bl	8003ef4 <lsm6dsr_fsm_data_rate_get>
 80036ca:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d159      	bne.n	8003786 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d853      	bhi.n	8003780 <lsm6dsr_xl_data_rate_set+0x1a8>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <lsm6dsr_xl_data_rate_set+0x108>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003703 	.word	0x08003703
 80036e8:	08003721 	.word	0x08003721
 80036ec:	0800374b 	.word	0x0800374b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80036fa:	e045      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003700:	e042      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003708:	2302      	movs	r3, #2
 800370a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800370c:	e03c      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d102      	bne.n	800371a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003714:	2302      	movs	r3, #2
 8003716:	75fb      	strb	r3, [r7, #23]
            break;
 8003718:	e036      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	75fb      	strb	r3, [r7, #23]
            break;
 800371e:	e033      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003726:	2303      	movs	r3, #3
 8003728:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800372a:	e02d      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003732:	2303      	movs	r3, #3
 8003734:	75fb      	strb	r3, [r7, #23]
            break;
 8003736:	e027      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d102      	bne.n	8003744 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800373e:	2303      	movs	r3, #3
 8003740:	75fb      	strb	r3, [r7, #23]
            break;
 8003742:	e021      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	75fb      	strb	r3, [r7, #23]
            break;
 8003748:	e01e      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003750:	2304      	movs	r3, #4
 8003752:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003754:	e018      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d102      	bne.n	8003762 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800375c:	2304      	movs	r3, #4
 800375e:	75fb      	strb	r3, [r7, #23]
            break;
 8003760:	e012      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d102      	bne.n	800376e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003768:	2304      	movs	r3, #4
 800376a:	75fb      	strb	r3, [r7, #23]
            break;
 800376c:	e00c      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d102      	bne.n	800377a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003774:	2304      	movs	r3, #4
 8003776:	75fb      	strb	r3, [r7, #23]
            break;
 8003778:	e006      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	75fb      	strb	r3, [r7, #23]
            break;
 800377e:	e003      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	75fb      	strb	r3, [r7, #23]
            break;
 8003784:	e000      	b.n	8003788 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8003786:	bf00      	nop
    }
  }

  if (ret == 0)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2110      	movs	r1, #16
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe7c 	bl	8003494 <lsm6dsr_read_reg>
 800379c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	7a3b      	ldrb	r3, [r7, #8]
 80037ae:	f362 1307 	bfi	r3, r2, #4, #4
 80037b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80037b4:	f107 0208 	add.w	r2, r7, #8
 80037b8:	2301      	movs	r3, #1
 80037ba:	2110      	movs	r1, #16
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe81 	bl	80034c4 <lsm6dsr_write_reg>
 80037c2:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80037dc:	f107 0208 	add.w	r2, r7, #8
 80037e0:	2301      	movs	r3, #1
 80037e2:	2111      	movs	r1, #17
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fe55 	bl	8003494 <lsm6dsr_read_reg>
 80037ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	7a3b      	ldrb	r3, [r7, #8]
 80037fc:	f362 0303 	bfi	r3, r2, #0, #4
 8003800:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003802:	f107 0208 	add.w	r2, r7, #8
 8003806:	2301      	movs	r3, #1
 8003808:	2111      	movs	r1, #17
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe5a 	bl	80034c4 <lsm6dsr_write_reg>
 8003810:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fb32 	bl	8003e9c <lsm6dsr_fsm_enable_get>
 8003838:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 80c4 	bne.w	80039ca <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003842:	7b3b      	ldrb	r3, [r7, #12]
 8003844:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003848:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800384a:	7b3b      	ldrb	r3, [r7, #12]
 800384c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003850:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003852:	4313      	orrs	r3, r2
 8003854:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003856:	7b3b      	ldrb	r3, [r7, #12]
 8003858:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800385c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800385e:	4313      	orrs	r3, r2
 8003860:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003862:	7b3b      	ldrb	r3, [r7, #12]
 8003864:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003868:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800386a:	4313      	orrs	r3, r2
 800386c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800386e:	7b3b      	ldrb	r3, [r7, #12]
 8003870:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003874:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003876:	4313      	orrs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800387a:	7b3b      	ldrb	r3, [r7, #12]
 800387c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003880:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003882:	4313      	orrs	r3, r2
 8003884:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003886:	7b3b      	ldrb	r3, [r7, #12]
 8003888:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800388c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800388e:	4313      	orrs	r3, r2
 8003890:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003892:	7b3b      	ldrb	r3, [r7, #12]
 8003894:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003898:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800389a:	4313      	orrs	r3, r2
 800389c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80038aa:	7b7b      	ldrb	r3, [r7, #13]
 80038ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80038b6:	7b7b      	ldrb	r3, [r7, #13]
 80038b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80038bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
 80038c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80038c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80038ce:	7b7b      	ldrb	r3, [r7, #13]
 80038d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80038da:	7b7b      	ldrb	r3, [r7, #13]
 80038dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80038e6:	7b7b      	ldrb	r3, [r7, #13]
 80038e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80038f2:	7b7b      	ldrb	r3, [r7, #13]
 80038f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d163      	bne.n	80039ca <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8003902:	f107 030b 	add.w	r3, r7, #11
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 faf3 	bl	8003ef4 <lsm6dsr_fsm_data_rate_get>
 800390e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d159      	bne.n	80039ca <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d853      	bhi.n	80039c4 <lsm6dsr_gy_data_rate_set+0x1a8>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <lsm6dsr_gy_data_rate_set+0x108>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003935 	.word	0x08003935
 8003928:	08003947 	.word	0x08003947
 800392c:	08003965 	.word	0x08003965
 8003930:	0800398f 	.word	0x0800398f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800393e:	e045      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	75fb      	strb	r3, [r7, #23]
            break;
 8003944:	e042      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800394c:	2302      	movs	r3, #2
 800394e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003950:	e03c      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8003958:	2302      	movs	r3, #2
 800395a:	75fb      	strb	r3, [r7, #23]
            break;
 800395c:	e036      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	75fb      	strb	r3, [r7, #23]
            break;
 8003962:	e033      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800396a:	2303      	movs	r3, #3
 800396c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800396e:	e02d      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8003976:	2303      	movs	r3, #3
 8003978:	75fb      	strb	r3, [r7, #23]
            break;
 800397a:	e027      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d102      	bne.n	8003988 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8003982:	2303      	movs	r3, #3
 8003984:	75fb      	strb	r3, [r7, #23]
            break;
 8003986:	e021      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	75fb      	strb	r3, [r7, #23]
            break;
 800398c:	e01e      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003994:	2304      	movs	r3, #4
 8003996:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003998:	e018      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d102      	bne.n	80039a6 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80039a0:	2304      	movs	r3, #4
 80039a2:	75fb      	strb	r3, [r7, #23]
            break;
 80039a4:	e012      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d102      	bne.n	80039b2 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80039ac:	2304      	movs	r3, #4
 80039ae:	75fb      	strb	r3, [r7, #23]
            break;
 80039b0:	e00c      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d102      	bne.n	80039be <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80039b8:	2304      	movs	r3, #4
 80039ba:	75fb      	strb	r3, [r7, #23]
            break;
 80039bc:	e006      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	75fb      	strb	r3, [r7, #23]
            break;
 80039c2:	e003      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	75fb      	strb	r3, [r7, #23]
            break;
 80039c8:	e000      	b.n	80039cc <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80039ca:	bf00      	nop
    }
  }

  if (ret == 0)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80039d2:	f107 0208 	add.w	r2, r7, #8
 80039d6:	2301      	movs	r3, #1
 80039d8:	2111      	movs	r1, #17
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fd5a 	bl	8003494 <lsm6dsr_read_reg>
 80039e0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10f      	bne.n	8003a08 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	7a3b      	ldrb	r3, [r7, #8]
 80039f2:	f362 1307 	bfi	r3, r2, #4, #4
 80039f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80039f8:	f107 0208 	add.w	r2, r7, #8
 80039fc:	2301      	movs	r3, #1
 80039fe:	2111      	movs	r1, #17
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fd5f 	bl	80034c4 <lsm6dsr_write_reg>
 8003a06:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8003a08:	693b      	ldr	r3, [r7, #16]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003a20:	f107 0208 	add.w	r2, r7, #8
 8003a24:	2301      	movs	r3, #1
 8003a26:	2112      	movs	r1, #18
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fd33 	bl	8003494 <lsm6dsr_read_reg>
 8003a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	7a3b      	ldrb	r3, [r7, #8]
 8003a40:	f362 1386 	bfi	r3, r2, #6, #1
 8003a44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003a46:	f107 0208 	add.w	r2, r7, #8
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	2112      	movs	r1, #18
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fd38 	bl	80034c4 <lsm6dsr_write_reg>
 8003a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8003a6a:	f107 0208 	add.w	r2, r7, #8
 8003a6e:	2301      	movs	r3, #1
 8003a70:	211e      	movs	r1, #30
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fd0e 	bl	8003494 <lsm6dsr_read_reg>
 8003a78:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8003a7a:	7a3b      	ldrb	r3, [r7, #8]
 8003a7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	701a      	strb	r2, [r3, #0]

  return ret;
 8003a88:	68fb      	ldr	r3, [r7, #12]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8003a9c:	f107 0208 	add.w	r2, r7, #8
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	211e      	movs	r1, #30
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fcf5 	bl	8003494 <lsm6dsr_read_reg>
 8003aaa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8003aac:	7a3b      	ldrb	r3, [r7, #8]
 8003aae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]

  return ret;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8003ace:	f107 0208 	add.w	r2, r7, #8
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	211e      	movs	r1, #30
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fcdc 	bl	8003494 <lsm6dsr_read_reg>
 8003adc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8003ade:	7a3b      	ldrb	r3, [r7, #8]
 8003ae0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	701a      	strb	r2, [r3, #0]

  return ret;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8003b00:	f107 0208 	add.w	r2, r7, #8
 8003b04:	2302      	movs	r3, #2
 8003b06:	2120      	movs	r1, #32
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fcc3 	bl	8003494 <lsm6dsr_read_reg>
 8003b0e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8003b10:	7a7b      	ldrb	r3, [r7, #9]
 8003b12:	b21a      	sxth	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	7a3b      	ldrb	r3, [r7, #8]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	801a      	strh	r2, [r3, #0]

  return ret;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8003b46:	f107 020c 	add.w	r2, r7, #12
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	2122      	movs	r1, #34	; 0x22
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fca0 	bl	8003494 <lsm6dsr_read_reg>
 8003b54:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	7b3b      	ldrb	r3, [r7, #12]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b21a      	sxth	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	b212      	sxth	r2, r2
 8003b80:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	3302      	adds	r3, #2
 8003b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	b212      	sxth	r2, r2
 8003b9e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003ba0:	7c7a      	ldrb	r2, [r7, #17]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	b212      	sxth	r2, r2
 8003ba8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	7c3b      	ldrb	r3, [r7, #16]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	b212      	sxth	r2, r2
 8003bc6:	801a      	strh	r2, [r3, #0]

  return ret;
 8003bc8:	697b      	ldr	r3, [r7, #20]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8003bdc:	f107 020c 	add.w	r2, r7, #12
 8003be0:	2306      	movs	r3, #6
 8003be2:	2128      	movs	r1, #40	; 0x28
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fc55 	bl	8003494 <lsm6dsr_read_reg>
 8003bea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	7b3b      	ldrb	r3, [r7, #12]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	3302      	adds	r3, #2
 8003c14:	b212      	sxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	3302      	adds	r3, #2
 8003c32:	b212      	sxth	r2, r2
 8003c34:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c36:	7c7a      	ldrb	r2, [r7, #17]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	b212      	sxth	r2, r2
 8003c3e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3304      	adds	r3, #4
 8003c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	7c3b      	ldrb	r3, [r7, #16]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	b212      	sxth	r2, r2
 8003c5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c5e:	697b      	ldr	r3, [r7, #20]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8003c74:	f107 0208 	add.w	r2, r7, #8
 8003c78:	2301      	movs	r3, #1
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fc09 	bl	8003494 <lsm6dsr_read_reg>
 8003c82:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	7a3b      	ldrb	r3, [r7, #8]
 8003c94:	f362 1387 	bfi	r3, r2, #6, #2
 8003c98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8003c9a:	f107 0208 	add.w	r2, r7, #8
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fc0e 	bl	80034c4 <lsm6dsr_write_reg>
 8003ca8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fbe5 	bl	8003494 <lsm6dsr_read_reg>
 8003cca:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003ce2:	f107 0208 	add.w	r2, r7, #8
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	2112      	movs	r1, #18
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fbd2 	bl	8003494 <lsm6dsr_read_reg>
 8003cf0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	7a3b      	ldrb	r3, [r7, #8]
 8003d02:	f362 0300 	bfi	r3, r2, #0, #1
 8003d06:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003d08:	f107 0208 	add.w	r2, r7, #8
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	2112      	movs	r1, #18
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fbd7 	bl	80034c4 <lsm6dsr_write_reg>
 8003d16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003d2c:	f107 0208 	add.w	r2, r7, #8
 8003d30:	2301      	movs	r3, #1
 8003d32:	2112      	movs	r1, #18
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fbad 	bl	8003494 <lsm6dsr_read_reg>
 8003d3a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8003d3c:	7a3b      	ldrb	r3, [r7, #8]
 8003d3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	701a      	strb	r2, [r3, #0]

  return ret;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003d60:	f107 0208 	add.w	r2, r7, #8
 8003d64:	2301      	movs	r3, #1
 8003d66:	2110      	movs	r1, #16
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fb93 	bl	8003494 <lsm6dsr_read_reg>
 8003d6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	7a3b      	ldrb	r3, [r7, #8]
 8003d80:	f362 0341 	bfi	r3, r2, #1, #1
 8003d84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003d86:	f107 0208 	add.w	r2, r7, #8
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	2110      	movs	r1, #16
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fb98 	bl	80034c4 <lsm6dsr_write_reg>
 8003d94:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8003dac:	f107 0208 	add.w	r2, r7, #8
 8003db0:	2301      	movs	r3, #1
 8003db2:	2117      	movs	r1, #23
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fb6d 	bl	8003494 <lsm6dsr_read_reg>
 8003dba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d121      	bne.n	8003e06 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	7a3b      	ldrb	r3, [r7, #8]
 8003dce:	f362 0382 	bfi	r3, r2, #2, #1
 8003dd2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	7a3b      	ldrb	r3, [r7, #8]
 8003de0:	f362 1304 	bfi	r3, r2, #4, #1
 8003de4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	7a3b      	ldrb	r3, [r7, #8]
 8003df0:	f362 1347 	bfi	r3, r2, #5, #3
 8003df4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8003df6:	f107 0208 	add.w	r2, r7, #8
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	2117      	movs	r1, #23
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fb60 	bl	80034c4 <lsm6dsr_write_reg>
 8003e04:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003e1c:	f107 0210 	add.w	r2, r7, #16
 8003e20:	2301      	movs	r3, #1
 8003e22:	2118      	movs	r1, #24
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fb35 	bl	8003494 <lsm6dsr_read_reg>
 8003e2a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d111      	bne.n	8003e56 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	09db      	lsrs	r3, r3, #7
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	7c3b      	ldrb	r3, [r7, #16]
 8003e40:	f362 0341 	bfi	r3, r2, #1, #1
 8003e44:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8003e46:	f107 0210 	add.w	r2, r7, #16
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	2118      	movs	r1, #24
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fb38 	bl	80034c4 <lsm6dsr_write_reg>
 8003e54:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8003e5c:	f107 020c 	add.w	r2, r7, #12
 8003e60:	2301      	movs	r3, #1
 8003e62:	2162      	movs	r1, #98	; 0x62
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fb15 	bl	8003494 <lsm6dsr_read_reg>
 8003e6a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	7b3b      	ldrb	r3, [r7, #12]
 8003e7c:	f362 03c4 	bfi	r3, r2, #3, #2
 8003e80:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8003e82:	f107 020c 	add.w	r2, r7, #12
 8003e86:	2301      	movs	r3, #1
 8003e88:	2162      	movs	r1, #98	; 0x62
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fb1a 	bl	80034c4 <lsm6dsr_write_reg>
 8003e90:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fedd 	bl	8003c68 <lsm6dsr_mem_bank_set>
 8003eae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8003eb6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8003eb8:	2301      	movs	r3, #1
 8003eba:	2146      	movs	r1, #70	; 0x46
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fae9 	bl	8003494 <lsm6dsr_read_reg>
 8003ec2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2147      	movs	r1, #71	; 0x47
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fade 	bl	8003494 <lsm6dsr_read_reg>
 8003ed8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fec0 	bl	8003c68 <lsm6dsr_mem_bank_set>
 8003ee8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003efe:	2102      	movs	r1, #2
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff feb1 	bl	8003c68 <lsm6dsr_mem_bank_set>
 8003f06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8003f0e:	f107 0208 	add.w	r2, r7, #8
 8003f12:	2301      	movs	r3, #1
 8003f14:	215f      	movs	r1, #95	; 0x5f
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fabc 	bl	8003494 <lsm6dsr_read_reg>
 8003f1c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fe9e 	bl	8003c68 <lsm6dsr_mem_bank_set>
 8003f2c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8003f2e:	7a3b      	ldrb	r3, [r7, #8]
 8003f30:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d81a      	bhi.n	8003f70 <lsm6dsr_fsm_data_rate_get+0x7c>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f59 	.word	0x08003f59
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f69 	.word	0x08003f69
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
      break;
 8003f56:	e00f      	b.n	8003f78 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
      break;
 8003f5e:	e00b      	b.n	8003f78 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
      break;
 8003f66:	e007      	b.n	8003f78 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	701a      	strb	r2, [r3, #0]
      break;
 8003f6e:	e003      	b.n	8003f78 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
      break;
 8003f76:	bf00      	nop
  }

  return ret;
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af04      	add	r7, sp, #16
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	460b      	mov	r3, r1
 8003f92:	72fb      	strb	r3, [r7, #11]
 8003f94:	4613      	mov	r3, r2
 8003f96:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003f98:	7afb      	ldrb	r3, [r7, #11]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa0:	9302      	str	r3, [sp, #8]
 8003fa2:	893b      	ldrh	r3, [r7, #8]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2301      	movs	r3, #1
 8003fac:	21d5      	movs	r1, #213	; 0xd5
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f001 f96c 	bl	800528c <HAL_I2C_Mem_Write>
  return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af04      	add	r7, sp, #16
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	460b      	mov	r3, r1
 8003fcc:	72fb      	strb	r3, [r7, #11]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	21d5      	movs	r1, #213	; 0xd5
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f001 fa49 	bl	8005480 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <MRT_LSM6DSR_Setup>:




void MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	  Guart = uart;
 8004002:	4a46      	ldr	r2, [pc, #280]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8004008:	4b44      	ldr	r3, [pc, #272]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	2216      	movs	r2, #22
 8004012:	4943      	ldr	r1, [pc, #268]	; (8004120 <MRT_LSM6DSR_Setup+0x128>)
 8004014:	f005 fbd9 	bl	80097ca <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  dev_ctx.write_reg = write;
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <MRT_LSM6DSR_Setup+0x130>)
 800401c:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = read;
 800401e:	4b41      	ldr	r3, [pc, #260]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 8004020:	4a42      	ldr	r2, [pc, #264]	; (800412c <MRT_LSM6DSR_Setup+0x134>)
 8004022:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = SENSOR_BUS;
 8004024:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6093      	str	r3, [r2, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800402a:	200a      	movs	r0, #10
 800402c:	f000 fa7a 	bl	8004524 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 8004030:	493f      	ldr	r1, [pc, #252]	; (8004130 <MRT_LSM6DSR_Setup+0x138>)
 8004032:	483c      	ldr	r0, [pc, #240]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 8004034:	f7ff fe3e 	bl	8003cb4 <lsm6dsr_device_id_get>

	  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8004038:	4b38      	ldr	r3, [pc, #224]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	2215      	movs	r2, #21
 8004042:	493c      	ldr	r1, [pc, #240]	; (8004134 <MRT_LSM6DSR_Setup+0x13c>)
 8004044:	f005 fbc1 	bl	80097ca <HAL_UART_Transmit>


	  if (whoamI != LSM6DSR_ID){
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <MRT_LSM6DSR_Setup+0x138>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b6a      	cmp	r3, #106	; 0x6a
 800404e:	d020      	beq.n	8004092 <MRT_LSM6DSR_Setup+0x9a>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 10, HAL_MAX_DELAY);
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	220a      	movs	r2, #10
 800405a:	4937      	ldr	r1, [pc, #220]	; (8004138 <MRT_LSM6DSR_Setup+0x140>)
 800405c:	f005 fbb5 	bl	80097ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 8004060:	4b2e      	ldr	r3, [pc, #184]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	2210      	movs	r2, #16
 800406a:	4934      	ldr	r1, [pc, #208]	; (800413c <MRT_LSM6DSR_Setup+0x144>)
 800406c:	f005 fbad 	bl	80097ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,&whoamI, 2, HAL_MAX_DELAY);
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	2202      	movs	r2, #2
 800407a:	492d      	ldr	r1, [pc, #180]	; (8004130 <MRT_LSM6DSR_Setup+0x138>)
 800407c:	f005 fba5 	bl	80097ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 26, HAL_MAX_DELAY);
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	221a      	movs	r2, #26
 800408a:	492d      	ldr	r1, [pc, #180]	; (8004140 <MRT_LSM6DSR_Setup+0x148>)
 800408c:	f005 fb9d 	bl	80097ca <HAL_UART_Transmit>
		  while(1);
 8004090:	e7fe      	b.n	8004090 <MRT_LSM6DSR_Setup+0x98>
	  }


	  	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	2206      	movs	r2, #6
 800409c:	4929      	ldr	r1, [pc, #164]	; (8004144 <MRT_LSM6DSR_Setup+0x14c>)
 800409e:	f005 fb94 	bl	80097ca <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80040a2:	2101      	movs	r1, #1
 80040a4:	481f      	ldr	r0, [pc, #124]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040a6:	f7ff fe16 	bl	8003cd6 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 80040aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ae:	f000 fa39 	bl	8004524 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&dev_ctx, &rst);
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <MRT_LSM6DSR_Setup+0x150>)
 80040b4:	481b      	ldr	r0, [pc, #108]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040b6:	f7ff fe34 	bl	8003d22 <lsm6dsr_reset_get>
	  } while (rst);
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <MRT_LSM6DSR_Setup+0x150>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f7      	bne.n	80040b2 <MRT_LSM6DSR_Setup+0xba>
	    */



	      /* Disable I3C interface */
	      lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	4817      	ldr	r0, [pc, #92]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040c6:	f7ff fea3 	bl	8003e10 <lsm6dsr_i3c_disable_set>
	      /* Enable Block Data Update */
	      lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80040ca:	2101      	movs	r1, #1
 80040cc:	4815      	ldr	r0, [pc, #84]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040ce:	f7ff fca1 	bl	8003a14 <lsm6dsr_block_data_update_set>
	      /* Set Output Data Rate */
	      lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 80040d2:	2101      	movs	r1, #1
 80040d4:	4813      	ldr	r0, [pc, #76]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040d6:	f7ff fa7f 	bl	80035d8 <lsm6dsr_xl_data_rate_set>
	      lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 80040da:	2101      	movs	r1, #1
 80040dc:	4811      	ldr	r0, [pc, #68]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040de:	f7ff fb9d 	bl	800381c <lsm6dsr_gy_data_rate_set>
	      /* Set full scale */
	      lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_2g);
 80040e2:	2100      	movs	r1, #0
 80040e4:	480f      	ldr	r0, [pc, #60]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040e6:	f7ff fa51 	bl	800358c <lsm6dsr_xl_full_scale_set>
	      lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 80040ea:	210c      	movs	r1, #12
 80040ec:	480d      	ldr	r0, [pc, #52]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040ee:	f7ff fb6f 	bl	80037d0 <lsm6dsr_gy_full_scale_set>
	      /* Configure filtering chain(No aux interface)
	       * Accelerometer - LPF1 + LPF2 path
	       */
	      lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
 80040f2:	2104      	movs	r1, #4
 80040f4:	480b      	ldr	r0, [pc, #44]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040f6:	f7ff fe53 	bl	8003da0 <lsm6dsr_xl_hp_path_on_out_set>
	      lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80040fa:	2101      	movs	r1, #1
 80040fc:	4809      	ldr	r0, [pc, #36]	; (8004124 <MRT_LSM6DSR_Setup+0x12c>)
 80040fe:	f7ff fe29 	bl	8003d54 <lsm6dsr_xl_filter_lp2_set>
		  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <MRT_LSM6DSR_Setup+0x124>)
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	2219      	movs	r2, #25
 800410c:	490f      	ldr	r1, [pc, #60]	; (800414c <MRT_LSM6DSR_Setup+0x154>)
 800410e:	f005 fb5c 	bl	80097ca <HAL_UART_Transmit>
	}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20005308 	.word	0x20005308
 8004120:	08016190 	.word	0x08016190
 8004124:	20005064 	.word	0x20005064
 8004128:	08003f85 	.word	0x08003f85
 800412c:	08003fbf 	.word	0x08003fbf
 8004130:	200005d8 	.word	0x200005d8
 8004134:	080161a8 	.word	0x080161a8
 8004138:	080161c0 	.word	0x080161c0
 800413c:	080161cc 	.word	0x080161cc
 8004140:	080161e0 	.word	0x080161e0
 8004144:	080161f8 	.word	0x080161f8
 8004148:	200005dc 	.word	0x200005dc
 800414c:	08016200 	.word	0x08016200

08004150 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(int16_t data_raw_acceleration[3],float acceleration_mg[3]){
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&dev_ctx, &reg);
 800415a:	f107 030f 	add.w	r3, r7, #15
 800415e:	4619      	mov	r1, r3
 8004160:	481c      	ldr	r0, [pc, #112]	; (80041d4 <MRT_LSM6DSR_getAcceleration+0x84>)
 8004162:	f7ff fc7d 	bl	8003a60 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02e      	beq.n	80041ca <MRT_LSM6DSR_getAcceleration+0x7a>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800416c:	2206      	movs	r2, #6
 800416e:	2100      	movs	r1, #0
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f00c ff55 	bl	8011020 <memset>
        lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4816      	ldr	r0, [pc, #88]	; (80041d4 <MRT_LSM6DSR_getAcceleration+0x84>)
 800417a:	f7ff fd2a 	bl	8003bd2 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff f9b5 	bl	80034f4 <lsm6dsr_from_fs2g_to_mg>
 800418a:	eef0 7a40 	vmov.f32	s15, s0
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
                               data_raw_acceleration[1]);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3302      	adds	r3, #2
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 8004198:	f9b3 2000 	ldrsh.w	r2, [r3]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	1d1c      	adds	r4, r3, #4
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff f9a7 	bl	80034f4 <lsm6dsr_from_fs2g_to_mg>
 80041a6:	eef0 7a40 	vmov.f32	s15, s0
 80041aa:	edc4 7a00 	vstr	s15, [r4]
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
                               data_raw_acceleration[2]);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 80041b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f103 0408 	add.w	r4, r3, #8
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff f999 	bl	80034f4 <lsm6dsr_from_fs2g_to_mg>
 80041c2:	eef0 7a40 	vmov.f32	s15, s0
 80041c6:	edc4 7a00 	vstr	s15, [r4]
      }
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd90      	pop	{r4, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20005064 	.word	0x20005064

080041d8 <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(int16_t data_raw_temperature[1],float temperature_degC[1]){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&dev_ctx, &reg);
 80041e2:	f107 030f 	add.w	r3, r7, #15
 80041e6:	4619      	mov	r1, r3
 80041e8:	480e      	ldr	r0, [pc, #56]	; (8004224 <MRT_LSM6DSR_getTemperature+0x4c>)
 80041ea:	f7ff fc6b 	bl	8003ac4 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <MRT_LSM6DSR_getTemperature+0x44>
		//Read temperature data
		memset(data_raw_temperature, 0x00, sizeof(int16_t));
 80041f4:	2202      	movs	r2, #2
 80041f6:	2100      	movs	r1, #0
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f00c ff11 	bl	8011020 <memset>
		lsm6dsr_temperature_raw_get(&dev_ctx, data_raw_temperature);
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4808      	ldr	r0, [pc, #32]	; (8004224 <MRT_LSM6DSR_getTemperature+0x4c>)
 8004202:	f7ff fc78 	bl	8003af6 <lsm6dsr_temperature_raw_get>
		temperature_degC[0] = lsm6dsr_from_lsb_to_celsius(data_raw_temperature[0]);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f9a1 	bl	8003554 <lsm6dsr_from_lsb_to_celsius>
 8004212:	eef0 7a40 	vmov.f32	s15, s0
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	edc3 7a00 	vstr	s15, [r3]

	}
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20005064 	.word	0x20005064

08004228 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(int16_t data_raw_angular_rate[3],float angular_rate_mdps[3]){
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&dev_ctx, &reg);
 8004232:	f107 030f 	add.w	r3, r7, #15
 8004236:	4619      	mov	r1, r3
 8004238:	481c      	ldr	r0, [pc, #112]	; (80042ac <MRT_LSM6DSR_getAngularRate+0x84>)
 800423a:	f7ff fc2a 	bl	8003a92 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02e      	beq.n	80042a2 <MRT_LSM6DSR_getAngularRate+0x7a>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004244:	2206      	movs	r2, #6
 8004246:	2100      	movs	r1, #0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f00c fee9 	bl	8011020 <memset>
		lsm6dsr_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4816      	ldr	r0, [pc, #88]	; (80042ac <MRT_LSM6DSR_getAngularRate+0x84>)
 8004252:	f7ff fc73 	bl	8003b3c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff f961 	bl	8003524 <lsm6dsr_from_fs2000dps_to_mdps>
 8004262:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3302      	adds	r3, #2
 8004270:	f9b3 2000 	ldrsh.w	r2, [r3]
		angular_rate_mdps[1] =
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff f953 	bl	8003524 <lsm6dsr_from_fs2000dps_to_mdps>
 800427e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8004282:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	f9b3 2000 	ldrsh.w	r2, [r3]
		angular_rate_mdps[2] =
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004294:	4610      	mov	r0, r2
 8004296:	f7ff f945 	bl	8003524 <lsm6dsr_from_fs2000dps_to_mdps>
 800429a:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800429e:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20005064 	.word	0x20005064

080042b0 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	2208      	movs	r2, #8
 80042be:	4905      	ldr	r1, [pc, #20]	; (80042d4 <HAL_RTC_AlarmAEventCallback+0x24>)
 80042c0:	4805      	ldr	r0, [pc, #20]	; (80042d8 <HAL_RTC_AlarmAEventCallback+0x28>)
 80042c2:	f005 fa82 	bl	80097ca <HAL_UART_Transmit>
	flagA = 1;
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RTC_AlarmAEventCallback+0x2c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	08016218 	.word	0x08016218
 80042d8:	20005508 	.word	0x20005508
 80042dc:	200005e0 	.word	0x200005e0

080042e0 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 80042e0:	b084      	sub	sp, #16
 80042e2:	b5b0      	push	{r4, r5, r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	f107 0418 	add.w	r4, r7, #24
 80042ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	2211      	movs	r2, #17
 80042f6:	4911      	ldr	r1, [pc, #68]	; (800433c <MRT_SetupRTOS+0x5c>)
 80042f8:	4811      	ldr	r0, [pc, #68]	; (8004340 <MRT_SetupRTOS+0x60>)
 80042fa:	f005 fa66 	bl	80097ca <HAL_UART_Transmit>
	rtos.huart = uart;
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <MRT_SetupRTOS+0x60>)
 8004300:	461d      	mov	r5, r3
 8004302:	f107 0418 	add.w	r4, r7, #24
 8004306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800430a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800430e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004312:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004316:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	rtos.sleepTime = sleepT;
 800431a:	4a09      	ldr	r2, [pc, #36]	; (8004340 <MRT_SetupRTOS+0x60>)
 800431c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004320:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
	bool wakingUp = MRT_WUProcedure();
 8004324:	f000 f80e 	bl	8004344 <MRT_WUProcedure>
 8004328:	4603      	mov	r3, r0
 800432a:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 800432c:	79fb      	ldrb	r3, [r7, #7]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004338:	b004      	add	sp, #16
 800433a:	4770      	bx	lr
 800433c:	08016230 	.word	0x08016230
 8004340:	20005508 	.word	0x20005508

08004344 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 800434a:	2300      	movs	r3, #0
 800434c:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <MRT_WUProcedure+0x5c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d11b      	bne.n	8004392 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 800435a:	2301      	movs	r3, #1
 800435c:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <MRT_WUProcedure+0x5c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <MRT_WUProcedure+0x5c>)
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <MRT_WUProcedure+0x60>)
 800436c:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800436e:	6838      	ldr	r0, [r7, #0]
 8004370:	f7fb ff3e 	bl	80001f0 <strlen>
 8004374:	4603      	mov	r3, r0
 8004376:	b29a      	uxth	r2, r3
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	480a      	ldr	r0, [pc, #40]	; (80043a8 <MRT_WUProcedure+0x64>)
 8004380:	f005 fa23 	bl	80097ca <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004384:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004388:	f003 f95e 	bl	8007648 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <MRT_WUProcedure+0x68>)
 800438e:	f004 fbaf 	bl	8008af0 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8004392:	f000 f80d 	bl	80043b0 <MRT_ClearFlags>

	return wakingUp;
 8004396:	79fb      	ldrb	r3, [r7, #7]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40007000 	.word	0x40007000
 80043a4:	08016244 	.word	0x08016244
 80043a8:	20005508 	.word	0x20005508
 80043ac:	20005274 	.word	0x20005274

080043b0 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295
 80043b8:	2214      	movs	r2, #20
 80043ba:	4932      	ldr	r1, [pc, #200]	; (8004484 <MRT_ClearFlags+0xd4>)
 80043bc:	4832      	ldr	r0, [pc, #200]	; (8004488 <MRT_ClearFlags+0xd8>)
 80043be:	f005 fa04 	bl	80097ca <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80043c2:	4b32      	ldr	r3, [pc, #200]	; (800448c <MRT_ClearFlags+0xdc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	22ca      	movs	r2, #202	; 0xca
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <MRT_ClearFlags+0xdc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2253      	movs	r2, #83	; 0x53
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80043d2:	e00f      	b.n	80043f4 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	2217      	movs	r2, #23
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <MRT_ClearFlags+0xe0>)
 80043dc:	482a      	ldr	r0, [pc, #168]	; (8004488 <MRT_ClearFlags+0xd8>)
 80043de:	f005 f9f4 	bl	80097ca <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80043e2:	4b2a      	ldr	r3, [pc, #168]	; (800448c <MRT_ClearFlags+0xdc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <MRT_ClearFlags+0xdc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80043f2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <MRT_ClearFlags+0xdc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e8      	bne.n	80043d4 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <MRT_ClearFlags+0xdc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800440a:	4b22      	ldr	r3, [pc, #136]	; (8004494 <MRT_ClearFlags+0xe4>)
 800440c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004410:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <MRT_ClearFlags+0xdc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	22ca      	movs	r2, #202	; 0xca
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <MRT_ClearFlags+0xdc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2253      	movs	r2, #83	; 0x53
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004422:	e00f      	b.n	8004444 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
 8004428:	2217      	movs	r2, #23
 800442a:	491b      	ldr	r1, [pc, #108]	; (8004498 <MRT_ClearFlags+0xe8>)
 800442c:	4816      	ldr	r0, [pc, #88]	; (8004488 <MRT_ClearFlags+0xd8>)
 800442e:	f005 f9cc 	bl	80097ca <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <MRT_ClearFlags+0xdc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <MRT_ClearFlags+0xdc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004442:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <MRT_ClearFlags+0xdc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e8      	bne.n	8004424 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <MRT_ClearFlags+0xdc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <MRT_ClearFlags+0xe4>)
 800445c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004460:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MRT_ClearFlags+0xec>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0d      	ldr	r2, [pc, #52]	; (800449c <MRT_ClearFlags+0xec>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <MRT_ClearFlags+0xdc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <MRT_ClearFlags+0xdc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800447e:	60da      	str	r2, [r3, #12]
}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08016264 	.word	0x08016264
 8004488:	20005508 	.word	0x20005508
 800448c:	20005274 	.word	0x20005274
 8004490:	0801627c 	.word	0x0801627c
 8004494:	40013c00 	.word	0x40013c00
 8004498:	08016294 	.word	0x08016294
 800449c:	40007000 	.word	0x40007000

080044a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <HAL_Init+0x40>)
 80044aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_Init+0x40>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_Init+0x40>)
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_Init+0x40>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <HAL_Init+0x40>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c8:	2003      	movs	r0, #3
 80044ca:	f000 fb92 	bl	8004bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fe f88e 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d4:	f7fd fd6c 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00

080044e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_IncTick+0x20>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_IncTick+0x24>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <HAL_IncTick+0x24>)
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000008 	.word	0x20000008
 8004508:	2000554c 	.word	0x2000554c

0800450c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return uwTick;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_GetTick+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	2000554c 	.word	0x2000554c

08004524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800452c:	f7ff ffee 	bl	800450c <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d005      	beq.n	800454a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_Delay+0x44>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800454a:	bf00      	nop
 800454c:	f7ff ffde 	bl	800450c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	429a      	cmp	r2, r3
 800455a:	d8f7      	bhi.n	800454c <HAL_Delay+0x28>
  {
  }
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000008 	.word	0x20000008

0800456c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e033      	b.n	80045ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fd38 	bl	8002000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045b2:	f023 0302 	bic.w	r3, r3, #2
 80045b6:	f043 0202 	orr.w	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f94a 	bl	8004858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
 80045da:	e001      	b.n	80045e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x1c>
 800460c:	2302      	movs	r3, #2
 800460e:	e113      	b.n	8004838 <HAL_ADC_ConfigChannel+0x244>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b09      	cmp	r3, #9
 800461e:	d925      	bls.n	800466c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68d9      	ldr	r1, [r3, #12]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	3b1e      	subs	r3, #30
 8004636:	2207      	movs	r2, #7
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43da      	mvns	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	400a      	ands	r2, r1
 8004644:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68d9      	ldr	r1, [r3, #12]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	4618      	mov	r0, r3
 8004658:	4603      	mov	r3, r0
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4403      	add	r3, r0
 800465e:	3b1e      	subs	r3, #30
 8004660:	409a      	lsls	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	e022      	b.n	80046b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	2207      	movs	r2, #7
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43da      	mvns	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	400a      	ands	r2, r1
 800468e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4618      	mov	r0, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4403      	add	r3, r0
 80046a8:	409a      	lsls	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d824      	bhi.n	8004704 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	3b05      	subs	r3, #5
 80046cc:	221f      	movs	r2, #31
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	400a      	ands	r2, r1
 80046da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4618      	mov	r0, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	3b05      	subs	r3, #5
 80046f6:	fa00 f203 	lsl.w	r2, r0, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	635a      	str	r2, [r3, #52]	; 0x34
 8004702:	e04c      	b.n	800479e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d824      	bhi.n	8004756 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	3b23      	subs	r3, #35	; 0x23
 800471e:	221f      	movs	r2, #31
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43da      	mvns	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	400a      	ands	r2, r1
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	4618      	mov	r0, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b23      	subs	r3, #35	; 0x23
 8004748:	fa00 f203 	lsl.w	r2, r0, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
 8004754:	e023      	b.n	800479e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	3b41      	subs	r3, #65	; 0x41
 8004768:	221f      	movs	r2, #31
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	400a      	ands	r2, r1
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	4618      	mov	r0, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	3b41      	subs	r3, #65	; 0x41
 8004792:	fa00 f203 	lsl.w	r2, r0, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800479e:	4b29      	ldr	r3, [pc, #164]	; (8004844 <HAL_ADC_ConfigChannel+0x250>)
 80047a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a28      	ldr	r2, [pc, #160]	; (8004848 <HAL_ADC_ConfigChannel+0x254>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10f      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x1d8>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b12      	cmp	r3, #18
 80047b2:	d10b      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_ADC_ConfigChannel+0x254>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d12b      	bne.n	800482e <HAL_ADC_ConfigChannel+0x23a>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_ADC_ConfigChannel+0x258>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <HAL_ADC_ConfigChannel+0x1f4>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b11      	cmp	r3, #17
 80047e6:	d122      	bne.n	800482e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_ADC_ConfigChannel+0x258>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <HAL_ADC_ConfigChannel+0x25c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_ADC_ConfigChannel+0x260>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9a      	lsrs	r2, r3, #18
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004820:	e002      	b.n	8004828 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3b01      	subs	r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f9      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40012300 	.word	0x40012300
 8004848:	40012000 	.word	0x40012000
 800484c:	10000012 	.word	0x10000012
 8004850:	20000000 	.word	0x20000000
 8004854:	431bde83 	.word	0x431bde83

08004858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004860:	4b79      	ldr	r3, [pc, #484]	; (8004a48 <ADC_Init+0x1f0>)
 8004862:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	4a58      	ldr	r2, [pc, #352]	; (8004a4c <ADC_Init+0x1f4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	e00f      	b.n	8004956 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004954:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0202 	bic.w	r2, r2, #2
 8004964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	7e1b      	ldrb	r3, [r3, #24]
 8004970:	005a      	lsls	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01b      	beq.n	80049bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004992:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	3b01      	subs	r3, #1
 80049b0:	035a      	lsls	r2, r3, #13
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e007      	b.n	80049cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	051a      	lsls	r2, r3, #20
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6899      	ldr	r1, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a0e:	025a      	lsls	r2, r3, #9
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	029a      	lsls	r2, r3, #10
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40012300 	.word	0x40012300
 8004a4c:	0f000001 	.word	0x0f000001

08004a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	60d3      	str	r3, [r2, #12]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 0307 	and.w	r3, r3, #7
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	db0b      	blt.n	8004ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4907      	ldr	r1, [pc, #28]	; (8004aec <__NVIC_EnableIRQ+0x38>)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8004ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db12      	blt.n	8004b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	490a      	ldr	r1, [pc, #40]	; (8004b34 <__NVIC_DisableIRQ+0x44>)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2001      	movs	r0, #1
 8004b12:	fa00 f202 	lsl.w	r2, r0, r2
 8004b16:	3320      	adds	r3, #32
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b1c:	f3bf 8f4f 	dsb	sy
}
 8004b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b22:	f3bf 8f6f 	isb	sy
}
 8004b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	; (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	; (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff28 	bl	8004a50 <__NVIC_SetPriorityGrouping>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c1a:	f7ff ff3d 	bl	8004a98 <__NVIC_GetPriorityGrouping>
 8004c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7ff ffb1 	bl	8004b8c <NVIC_EncodePriority>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ff80 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff30 	bl	8004ab4 <__NVIC_EnableIRQ>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff40 	bl	8004af0 <__NVIC_DisableIRQ>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	; 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e177      	b.n	8004f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c94:	2201      	movs	r2, #1
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	f040 8166 	bne.w	8004f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_GPIO_Init+0x5a>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d007      	beq.n	8004cd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cc6:	2b11      	cmp	r3, #17
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b12      	cmp	r3, #18
 8004cd0:	d130      	bne.n	8004d34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d08:	2201      	movs	r2, #1
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 0201 	and.w	r2, r3, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	2203      	movs	r2, #3
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d003      	beq.n	8004d74 <HAL_GPIO_Init+0xfc>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b12      	cmp	r3, #18
 8004d72:	d123      	bne.n	8004dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	08da      	lsrs	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3208      	adds	r2, #8
 8004d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	220f      	movs	r2, #15
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	08da      	lsrs	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3208      	adds	r2, #8
 8004db6:	69b9      	ldr	r1, [r7, #24]
 8004db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0203 	and.w	r2, r3, #3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80c0 	beq.w	8004f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <HAL_GPIO_Init+0x324>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4a65      	ldr	r2, [pc, #404]	; (8004f9c <HAL_GPIO_Init+0x324>)
 8004e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0e:	4b63      	ldr	r3, [pc, #396]	; (8004f9c <HAL_GPIO_Init+0x324>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e1a:	4a61      	ldr	r2, [pc, #388]	; (8004fa0 <HAL_GPIO_Init+0x328>)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	3302      	adds	r3, #2
 8004e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	220f      	movs	r2, #15
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a58      	ldr	r2, [pc, #352]	; (8004fa4 <HAL_GPIO_Init+0x32c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d037      	beq.n	8004eb6 <HAL_GPIO_Init+0x23e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a57      	ldr	r2, [pc, #348]	; (8004fa8 <HAL_GPIO_Init+0x330>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_GPIO_Init+0x23a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a56      	ldr	r2, [pc, #344]	; (8004fac <HAL_GPIO_Init+0x334>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02b      	beq.n	8004eae <HAL_GPIO_Init+0x236>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a55      	ldr	r2, [pc, #340]	; (8004fb0 <HAL_GPIO_Init+0x338>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d025      	beq.n	8004eaa <HAL_GPIO_Init+0x232>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a54      	ldr	r2, [pc, #336]	; (8004fb4 <HAL_GPIO_Init+0x33c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01f      	beq.n	8004ea6 <HAL_GPIO_Init+0x22e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a53      	ldr	r2, [pc, #332]	; (8004fb8 <HAL_GPIO_Init+0x340>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d019      	beq.n	8004ea2 <HAL_GPIO_Init+0x22a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_GPIO_Init+0x344>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_GPIO_Init+0x226>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a51      	ldr	r2, [pc, #324]	; (8004fc0 <HAL_GPIO_Init+0x348>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00d      	beq.n	8004e9a <HAL_GPIO_Init+0x222>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a50      	ldr	r2, [pc, #320]	; (8004fc4 <HAL_GPIO_Init+0x34c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <HAL_GPIO_Init+0x21e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a4f      	ldr	r2, [pc, #316]	; (8004fc8 <HAL_GPIO_Init+0x350>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_GPIO_Init+0x21a>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	e012      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004e92:	230a      	movs	r3, #10
 8004e94:	e010      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004e96:	2308      	movs	r3, #8
 8004e98:	e00e      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004e9a:	2307      	movs	r3, #7
 8004e9c:	e00c      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	e00a      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	e008      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	e006      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e004      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e002      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_GPIO_Init+0x240>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	f002 0203 	and.w	r2, r2, #3
 8004ebe:	0092      	lsls	r2, r2, #2
 8004ec0:	4093      	lsls	r3, r2
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ec8:	4935      	ldr	r1, [pc, #212]	; (8004fa0 <HAL_GPIO_Init+0x328>)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	3302      	adds	r3, #2
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004efa:	4a34      	ldr	r2, [pc, #208]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f00:	4b32      	ldr	r3, [pc, #200]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <HAL_GPIO_Init+0x354>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	f67f ae84 	bls.w	8004c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40013800 	.word	0x40013800
 8004fa4:	40020000 	.word	0x40020000
 8004fa8:	40020400 	.word	0x40020400
 8004fac:	40020800 	.word	0x40020800
 8004fb0:	40020c00 	.word	0x40020c00
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40021400 	.word	0x40021400
 8004fbc:	40021800 	.word	0x40021800
 8004fc0:	40021c00 	.word	0x40021c00
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40022400 	.word	0x40022400
 8004fcc:	40013c00 	.word	0x40013c00

08004fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fec:	e003      	b.n	8004ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	041a      	lsls	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	619a      	str	r2, [r3, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e12b      	b.n	800526e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd f82c 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005068:	f002 ff44 	bl	8007ef4 <HAL_RCC_GetPCLK1Freq>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4a81      	ldr	r2, [pc, #516]	; (8005278 <HAL_I2C_Init+0x274>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d807      	bhi.n	8005088 <HAL_I2C_Init+0x84>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a80      	ldr	r2, [pc, #512]	; (800527c <HAL_I2C_Init+0x278>)
 800507c:	4293      	cmp	r3, r2
 800507e:	bf94      	ite	ls
 8005080:	2301      	movls	r3, #1
 8005082:	2300      	movhi	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e006      	b.n	8005096 <HAL_I2C_Init+0x92>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a7d      	ldr	r2, [pc, #500]	; (8005280 <HAL_I2C_Init+0x27c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	bf94      	ite	ls
 8005090:	2301      	movls	r3, #1
 8005092:	2300      	movhi	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0e7      	b.n	800526e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a78      	ldr	r2, [pc, #480]	; (8005284 <HAL_I2C_Init+0x280>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0c9b      	lsrs	r3, r3, #18
 80050a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a6a      	ldr	r2, [pc, #424]	; (8005278 <HAL_I2C_Init+0x274>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d802      	bhi.n	80050d8 <HAL_I2C_Init+0xd4>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	3301      	adds	r3, #1
 80050d6:	e009      	b.n	80050ec <HAL_I2C_Init+0xe8>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	4a69      	ldr	r2, [pc, #420]	; (8005288 <HAL_I2C_Init+0x284>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	3301      	adds	r3, #1
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	495c      	ldr	r1, [pc, #368]	; (8005278 <HAL_I2C_Init+0x274>)
 8005108:	428b      	cmp	r3, r1
 800510a:	d819      	bhi.n	8005140 <HAL_I2C_Init+0x13c>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1e59      	subs	r1, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	fbb1 f3f3 	udiv	r3, r1, r3
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005120:	400b      	ands	r3, r1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_I2C_Init+0x138>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1e59      	subs	r1, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	fbb1 f3f3 	udiv	r3, r1, r3
 8005134:	3301      	adds	r3, #1
 8005136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513a:	e051      	b.n	80051e0 <HAL_I2C_Init+0x1dc>
 800513c:	2304      	movs	r3, #4
 800513e:	e04f      	b.n	80051e0 <HAL_I2C_Init+0x1dc>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d111      	bne.n	800516c <HAL_I2C_Init+0x168>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1e58      	subs	r0, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	440b      	add	r3, r1
 8005156:	fbb0 f3f3 	udiv	r3, r0, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e012      	b.n	8005192 <HAL_I2C_Init+0x18e>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1e58      	subs	r0, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	0099      	lsls	r1, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005182:	3301      	adds	r3, #1
 8005184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_I2C_Init+0x196>
 8005196:	2301      	movs	r3, #1
 8005198:	e022      	b.n	80051e0 <HAL_I2C_Init+0x1dc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10e      	bne.n	80051c0 <HAL_I2C_Init+0x1bc>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1e58      	subs	r0, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	440b      	add	r3, r1
 80051b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b4:	3301      	adds	r3, #1
 80051b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051be:	e00f      	b.n	80051e0 <HAL_I2C_Init+0x1dc>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1e58      	subs	r0, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6859      	ldr	r1, [r3, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	0099      	lsls	r1, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	6809      	ldr	r1, [r1, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800520e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6911      	ldr	r1, [r2, #16]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68d2      	ldr	r2, [r2, #12]
 800521a:	4311      	orrs	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	430b      	orrs	r3, r1
 8005222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	000186a0 	.word	0x000186a0
 800527c:	001e847f 	.word	0x001e847f
 8005280:	003d08ff 	.word	0x003d08ff
 8005284:	431bde83 	.word	0x431bde83
 8005288:	10624dd3 	.word	0x10624dd3

0800528c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	4608      	mov	r0, r1
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	4603      	mov	r3, r0
 800529c:	817b      	strh	r3, [r7, #10]
 800529e:	460b      	mov	r3, r1
 80052a0:	813b      	strh	r3, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052a6:	f7ff f931 	bl	800450c <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	f040 80d9 	bne.w	800546c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2319      	movs	r3, #25
 80052c0:	2201      	movs	r2, #1
 80052c2:	496d      	ldr	r1, [pc, #436]	; (8005478 <HAL_I2C_Mem_Write+0x1ec>)
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fde3 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0cc      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_I2C_Mem_Write+0x56>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0c5      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d007      	beq.n	8005308 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005316:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2221      	movs	r2, #33	; 0x21
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a4d      	ldr	r2, [pc, #308]	; (800547c <HAL_I2C_Mem_Write+0x1f0>)
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800534a:	88f8      	ldrh	r0, [r7, #6]
 800534c:	893a      	ldrh	r2, [r7, #8]
 800534e:	8979      	ldrh	r1, [r7, #10]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fc1a 	bl	8005b94 <I2C_RequestMemoryWrite>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d052      	beq.n	800540c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e081      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fe64 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b04      	cmp	r3, #4
 8005380:	d107      	bne.n	8005392 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e06b      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11b      	bne.n	800540c <HAL_I2C_Mem_Write+0x180>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d017      	beq.n	800540c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1aa      	bne.n	800536a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fe50 	bl	80060be <I2C_WaitOnBTFFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b04      	cmp	r3, #4
 800542a:	d107      	bne.n	800543c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e016      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	00100002 	.word	0x00100002
 800547c:	ffff0000 	.word	0xffff0000

08005480 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	461a      	mov	r2, r3
 800548e:	4603      	mov	r3, r0
 8005490:	817b      	strh	r3, [r7, #10]
 8005492:	460b      	mov	r3, r1
 8005494:	813b      	strh	r3, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800549a:	f7ff f837 	bl	800450c <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	f040 8208 	bne.w	80058be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2319      	movs	r3, #25
 80054b4:	2201      	movs	r2, #1
 80054b6:	497b      	ldr	r1, [pc, #492]	; (80056a4 <HAL_I2C_Mem_Read+0x224>)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fce9 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e1fb      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_I2C_Mem_Read+0x56>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e1f4      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d007      	beq.n	80054fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2222      	movs	r2, #34	; 0x22
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800552c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a5b      	ldr	r2, [pc, #364]	; (80056a8 <HAL_I2C_Mem_Read+0x228>)
 800553c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800553e:	88f8      	ldrh	r0, [r7, #6]
 8005540:	893a      	ldrh	r2, [r7, #8]
 8005542:	8979      	ldrh	r1, [r7, #10]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	4603      	mov	r3, r0
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fbb6 	bl	8005cc0 <I2C_RequestMemoryRead>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e1b0      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d113      	bne.n	800558e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e184      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	2b01      	cmp	r3, #1
 8005594:	d11b      	bne.n	80055ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e164      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d11b      	bne.n	800560e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	e144      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005624:	e138      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	2b03      	cmp	r3, #3
 800562c:	f200 80f1 	bhi.w	8005812 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	2b01      	cmp	r3, #1
 8005636:	d123      	bne.n	8005680 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fd7f 	bl	8006140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e139      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800567e:	e10b      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	2b02      	cmp	r3, #2
 8005686:	d14e      	bne.n	8005726 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2200      	movs	r2, #0
 8005690:	4906      	ldr	r1, [pc, #24]	; (80056ac <HAL_I2C_Mem_Read+0x22c>)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fbfc 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e10e      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
 80056a2:	bf00      	nop
 80056a4:	00100002 	.word	0x00100002
 80056a8:	ffff0000 	.word	0xffff0000
 80056ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005724:	e0b8      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2200      	movs	r2, #0
 800572e:	4966      	ldr	r1, [pc, #408]	; (80058c8 <HAL_I2C_Mem_Read+0x448>)
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fbad 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0bf      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	2200      	movs	r2, #0
 800578a:	494f      	ldr	r1, [pc, #316]	; (80058c8 <HAL_I2C_Mem_Read+0x448>)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fb7f 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e091      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005810:	e042      	b.n	8005898 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fc92 	bl	8006140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e04c      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d118      	bne.n	8005898 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f aec2 	bne.w	8005626 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e000      	b.n	80058c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	00010004 	.word	0x00010004

080058cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	460b      	mov	r3, r1
 80058da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80058dc:	f7fe fe16 	bl	800450c <HAL_GetTick>
 80058e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80058e2:	2301      	movs	r3, #1
 80058e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	f040 8111 	bne.w	8005b16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	2319      	movs	r3, #25
 80058fa:	2201      	movs	r2, #1
 80058fc:	4988      	ldr	r1, [pc, #544]	; (8005b20 <HAL_I2C_IsDeviceReady+0x254>)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fac6 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
 800590c:	e104      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_I2C_IsDeviceReady+0x50>
 8005918:	2302      	movs	r3, #2
 800591a:	e0fd      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d007      	beq.n	8005942 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0201 	orr.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2224      	movs	r2, #36	; 0x24
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a70      	ldr	r2, [pc, #448]	; (8005b24 <HAL_I2C_IsDeviceReady+0x258>)
 8005964:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005974:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fa84 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599c:	d103      	bne.n	80059a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0b6      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059aa:	897b      	ldrh	r3, [r7, #10]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059ba:	f7fe fda7 	bl	800450c <HAL_GetTick>
 80059be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059ee:	e025      	b.n	8005a3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059f0:	f7fe fd8c 	bl	800450c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <HAL_I2C_IsDeviceReady+0x13a>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22a0      	movs	r2, #160	; 0xa0
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2ba0      	cmp	r3, #160	; 0xa0
 8005a46:	d005      	beq.n	8005a54 <HAL_I2C_IsDeviceReady+0x188>
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <HAL_I2C_IsDeviceReady+0x188>
 8005a4e:	7dbb      	ldrb	r3, [r7, #22]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0cd      	beq.n	80059f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d129      	bne.n	8005abe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2319      	movs	r3, #25
 8005a96:	2201      	movs	r2, #1
 8005a98:	4921      	ldr	r1, [pc, #132]	; (8005b20 <HAL_I2C_IsDeviceReady+0x254>)
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f9f8 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e036      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e02c      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005acc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2319      	movs	r3, #25
 8005ade:	2201      	movs	r2, #1
 8005ae0:	490f      	ldr	r1, [pc, #60]	; (8005b20 <HAL_I2C_IsDeviceReady+0x254>)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f9d4 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e012      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	f4ff af32 	bcc.w	8005966 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
  }
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	00100002 	.word	0x00100002
 8005b24:	ffff0000 	.word	0xffff0000

08005b28 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d124      	bne.n	8005b86 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2228      	movs	r2, #40	; 0x28
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d007      	beq.n	8005b62 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b70:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005b80:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e000      	b.n	8005b88 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
  }
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	817b      	strh	r3, [r7, #10]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	813b      	strh	r3, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f960 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be4:	d103      	bne.n	8005bee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e05f      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	6a3a      	ldr	r2, [r7, #32]
 8005c06:	492d      	ldr	r1, [pc, #180]	; (8005cbc <I2C_RequestMemoryWrite+0x128>)
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f998 	bl	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e04c      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c30:	6a39      	ldr	r1, [r7, #32]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fa02 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d107      	bne.n	8005c56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e02b      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d105      	bne.n	8005c6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]
 8005c6a:	e021      	b.n	8005cb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7c:	6a39      	ldr	r1, [r7, #32]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f9dc 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d107      	bne.n	8005ca2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e005      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	00010002 	.word	0x00010002

08005cc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	813b      	strh	r3, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8c2 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d103      	bne.n	8005d2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0aa      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	4952      	ldr	r1, [pc, #328]	; (8005e8c <I2C_RequestMemoryRead+0x1cc>)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f8fa 	bl	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e097      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f964 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e076      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e021      	b.n	8005dec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f93e 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d107      	bne.n	8005dde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e050      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	6a39      	ldr	r1, [r7, #32]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f923 	bl	800603c <I2C_WaitOnTXEFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d107      	bne.n	8005e14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e035      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f82b 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00d      	beq.n	8005e5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4e:	d103      	bne.n	8005e58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e013      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	4906      	ldr	r1, [pc, #24]	; (8005e8c <I2C_RequestMemoryRead+0x1cc>)
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f863 	bl	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	00010002 	.word	0x00010002

08005e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea0:	e025      	b.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d021      	beq.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fe fb2f 	bl	800450c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d116      	bne.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e023      	b.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10d      	bne.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	43da      	mvns	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	e00c      	b.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0b6      	beq.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4c:	e051      	b.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5c:	d123      	bne.n	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e046      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d021      	beq.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fe faad 	bl	800450c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e020      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d10c      	bne.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	43da      	mvns	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4013      	ands	r3, r2
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e00b      	b.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	43da      	mvns	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4013      	ands	r3, r2
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d18d      	bne.n	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006048:	e02d      	b.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f8ce 	bl	80061ec <I2C_IsAcknowledgeFailed>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e02d      	b.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d021      	beq.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fe fa53 	bl	800450c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d116      	bne.n	80060a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e007      	b.n	80060b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d1ca      	bne.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060ca:	e02d      	b.n	8006128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f88d 	bl	80061ec <I2C_IsAcknowledgeFailed>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e02d      	b.n	8006138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d021      	beq.n	8006128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e4:	f7fe fa12 	bl	800450c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d116      	bne.n	8006128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e007      	b.n	8006138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b04      	cmp	r3, #4
 8006134:	d1ca      	bne.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800614c:	e042      	b.n	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b10      	cmp	r3, #16
 800615a:	d119      	bne.n	8006190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0210 	mvn.w	r2, #16
 8006164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e029      	b.n	80061e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006190:	f7fe f9bc 	bl	800450c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d116      	bne.n	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e007      	b.n	80061e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d1b5      	bne.n	800614e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d11b      	bne.n	800623c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800620c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b20      	cmp	r3, #32
 800625e:	d129      	bne.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0210 	bic.w	r2, r2, #16
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d12a      	bne.n	8006332 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0201 	bic.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80062fc:	89fb      	ldrh	r3, [r7, #14]
 80062fe:	f023 030f 	bic.w	r3, r3, #15
 8006302:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	89fb      	ldrh	r3, [r7, #14]
 800630a:	4313      	orrs	r3, r2
 800630c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	89fa      	ldrh	r2, [r7, #14]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	e000      	b.n	8006334 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006332:	2302      	movs	r3, #2
  }
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b08f      	sub	sp, #60	; 0x3c
 8006344:	af0a      	add	r7, sp, #40	; 0x28
 8006346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e10f      	b.n	8006572 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f00a f9d5 	bl	801071c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2203      	movs	r2, #3
 8006376:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f004 f854 	bl	800a43e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	687e      	ldr	r6, [r7, #4]
 800639e:	466d      	mov	r5, sp
 80063a0:	f106 0410 	add.w	r4, r6, #16
 80063a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80063b4:	1d33      	adds	r3, r6, #4
 80063b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b8:	6838      	ldr	r0, [r7, #0]
 80063ba:	f003 ff2b 	bl	800a214 <USB_CoreInit>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0d0      	b.n	8006572 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 f842 	bl	800a460 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	e04a      	b.n	8006478 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	333d      	adds	r3, #61	; 0x3d
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	333c      	adds	r3, #60	; 0x3c
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800640a:	7bfa      	ldrb	r2, [r7, #15]
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	b298      	uxth	r0, r3
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3342      	adds	r3, #66	; 0x42
 800641e:	4602      	mov	r2, r0
 8006420:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	333f      	adds	r3, #63	; 0x3f
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3344      	adds	r3, #68	; 0x44
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800644a:	7bfa      	ldrb	r2, [r7, #15]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	3348      	adds	r3, #72	; 0x48
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800645e:	7bfa      	ldrb	r2, [r7, #15]
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	3350      	adds	r3, #80	; 0x50
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	3301      	adds	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d3af      	bcc.n	80063e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	e044      	b.n	8006512 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006488:	7bfa      	ldrb	r2, [r7, #15]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	1a9b      	subs	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064b4:	7bfa      	ldrb	r2, [r7, #15]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064e0:	7bfa      	ldrb	r2, [r7, #15]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	3301      	adds	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	7bfa      	ldrb	r2, [r7, #15]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d3b5      	bcc.n	8006488 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	687e      	ldr	r6, [r7, #4]
 8006524:	466d      	mov	r5, sp
 8006526:	f106 0410 	add.w	r4, r6, #16
 800652a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800652e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006536:	e885 0003 	stmia.w	r5, {r0, r1}
 800653a:	1d33      	adds	r3, r6, #4
 800653c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f003 ffb8 	bl	800a4b4 <USB_DevInit>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e00d      	b.n	8006572 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f005 f800 	bl	800b570 <USB_DevDisconnect>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800657a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_PCD_Start+0x1c>
 8006592:	2302      	movs	r3, #2
 8006594:	e020      	b.n	80065d8 <HAL_PCD_Start+0x5e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d109      	bne.n	80065ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d005      	beq.n	80065ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f003 ff2c 	bl	800a41c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f004 ffb0 	bl	800b52e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b08d      	sub	sp, #52	; 0x34
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f005 f86e 	bl	800b6d8 <USB_GetMode>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 839d 	bne.w	8006d3e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f004 ffd2 	bl	800b5b2 <USB_ReadInterrupts>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8393 	beq.w	8006d3c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f004 ffc9 	bl	800b5b2 <USB_ReadInterrupts>
 8006620:	4603      	mov	r3, r0
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d107      	bne.n	800663a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695a      	ldr	r2, [r3, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f002 0202 	and.w	r2, r2, #2
 8006638:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f004 ffb7 	bl	800b5b2 <USB_ReadInterrupts>
 8006644:	4603      	mov	r3, r0
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b10      	cmp	r3, #16
 800664c:	d161      	bne.n	8006712 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0210 	bic.w	r2, r2, #16
 800665c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f003 020f 	and.w	r2, r3, #15
 800666a:	4613      	mov	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	3304      	adds	r3, #4
 800667c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	0c5b      	lsrs	r3, r3, #17
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	2b02      	cmp	r3, #2
 8006688:	d124      	bne.n	80066d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d035      	beq.n	8006702 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	6a38      	ldr	r0, [r7, #32]
 80066aa:	f004 fe1d 	bl	800b2e8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ba:	441a      	add	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066cc:	441a      	add	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	619a      	str	r2, [r3, #24]
 80066d2:	e016      	b.n	8006702 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	0c5b      	lsrs	r3, r3, #17
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	2b06      	cmp	r3, #6
 80066de:	d110      	bne.n	8006702 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066e6:	2208      	movs	r2, #8
 80066e8:	4619      	mov	r1, r3
 80066ea:	6a38      	ldr	r0, [r7, #32]
 80066ec:	f004 fdfc 	bl	800b2e8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066fc:	441a      	add	r2, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0210 	orr.w	r2, r2, #16
 8006710:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f004 ff4b 	bl	800b5b2 <USB_ReadInterrupts>
 800671c:	4603      	mov	r3, r0
 800671e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006722:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006726:	d16e      	bne.n	8006806 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f004 ff51 	bl	800b5d8 <USB_ReadDevAllOutEpInterrupt>
 8006736:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006738:	e062      	b.n	8006800 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d057      	beq.n	80067f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f004 ff76 	bl	800b640 <USB_ReadDevOutEPInterrupt>
 8006754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	461a      	mov	r2, r3
 800676e:	2301      	movs	r3, #1
 8006770:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fdb1 	bl	80072dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2308      	movs	r3, #8
 8006794:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 feab 	bl	80074f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	461a      	mov	r2, r3
 80067b6:	2310      	movs	r3, #16
 80067b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2320      	movs	r3, #32
 80067d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	461a      	mov	r2, r3
 80067ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	3301      	adds	r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d199      	bne.n	800673a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f004 fed1 	bl	800b5b2 <USB_ReadInterrupts>
 8006810:	4603      	mov	r3, r0
 8006812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800681a:	f040 80c0 	bne.w	800699e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f004 fef2 	bl	800b60c <USB_ReadDevAllInEpInterrupt>
 8006828:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800682e:	e0b2      	b.n	8006996 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80a7 	beq.w	800698a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f004 ff18 	bl	800b67c <USB_ReadDevInEPInterrupt>
 800684c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d057      	beq.n	8006908 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	2201      	movs	r2, #1
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	43db      	mvns	r3, r3
 8006872:	69f9      	ldr	r1, [r7, #28]
 8006874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006878:	4013      	ands	r3, r2
 800687a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	2301      	movs	r3, #1
 800688c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d132      	bne.n	80068fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3348      	adds	r3, #72	; 0x48
 80068a6:	6819      	ldr	r1, [r3, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4403      	add	r3, r0
 80068b6:	3344      	adds	r3, #68	; 0x44
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4419      	add	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4403      	add	r3, r0
 80068ca:	3348      	adds	r3, #72	; 0x48
 80068cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d113      	bne.n	80068fc <HAL_PCD_IRQHandler+0x31c>
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3350      	adds	r3, #80	; 0x50
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d108      	bne.n	80068fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068f4:	461a      	mov	r2, r3
 80068f6:	2101      	movs	r1, #1
 80068f8:	f004 ff20 	bl	800b73c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f009 ff99 	bl	801083a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	461a      	mov	r2, r3
 8006920:	2308      	movs	r3, #8
 8006922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	461a      	mov	r2, r3
 800693c:	2310      	movs	r3, #16
 800693e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	461a      	mov	r2, r3
 8006958:	2340      	movs	r3, #64	; 0x40
 800695a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	461a      	mov	r2, r3
 8006974:	2302      	movs	r3, #2
 8006976:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc1b 	bl	80071c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	3301      	adds	r3, #1
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	f47f af49 	bne.w	8006830 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f004 fe05 	bl	800b5b2 <USB_ReadInterrupts>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b2:	d122      	bne.n	80069fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d108      	bne.n	80069e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80069da:	2100      	movs	r1, #0
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fe27 	bl	8007630 <HAL_PCDEx_LPM_Callback>
 80069e2:	e002      	b.n	80069ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f009 ff9f 	bl	8010928 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80069f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f004 fdd7 	bl	800b5b2 <USB_ReadInterrupts>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0e:	d112      	bne.n	8006a36 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d102      	bne.n	8006a26 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f009 ff5b 	bl	80108dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a34:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f004 fdb9 	bl	800b5b2 <USB_ReadInterrupts>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4a:	f040 80c7 	bne.w	8006bdc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2110      	movs	r1, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f003 fe87 	bl	800a77c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a72:	e056      	b.n	8006b22 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	461a      	mov	r2, r3
 8006a82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aa6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ac6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ada:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006afa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	3301      	adds	r3, #1
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3a3      	bcc.n	8006a74 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006b3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d016      	beq.n	8006b76 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b58:	f043 030b 	orr.w	r3, r3, #11
 8006b5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6e:	f043 030b 	orr.w	r3, r3, #11
 8006b72:	6453      	str	r3, [r2, #68]	; 0x44
 8006b74:	e015      	b.n	8006ba2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b88:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006b8c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9c:	f043 030b 	orr.w	r3, r3, #11
 8006ba0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bb4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f004 fdb8 	bl	800b73c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f004 fce6 	bl	800b5b2 <USB_ReadInterrupts>
 8006be6:	4603      	mov	r3, r0
 8006be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf0:	d124      	bne.n	8006c3c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f004 fd7c 	bl	800b6f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f003 fe1c 	bl	800a83e <USB_GetDevSpeed>
 8006c06:	4603      	mov	r3, r0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681c      	ldr	r4, [r3, #0]
 8006c12:	f001 f963 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8006c16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4620      	mov	r0, r4
 8006c22:	f003 fb59 	bl	800a2d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f009 fe2f 	bl	801088a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f004 fcb6 	bl	800b5b2 <USB_ReadInterrupts>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10a      	bne.n	8006c66 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f009 fe0c 	bl	801086e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f002 0208 	and.w	r2, r2, #8
 8006c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f004 fca1 	bl	800b5b2 <USB_ReadInterrupts>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7a:	d10f      	bne.n	8006c9c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f009 fe6e 	bl	8010968 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f004 fc86 	bl	800b5b2 <USB_ReadInterrupts>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb0:	d10f      	bne.n	8006cd2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f009 fe41 	bl	8010944 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f004 fc6b 	bl	800b5b2 <USB_ReadInterrupts>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d10a      	bne.n	8006cfe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f009 fe4f 	bl	801098c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f004 fc55 	bl	800b5b2 <USB_ReadInterrupts>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d115      	bne.n	8006d3e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f009 fe3f 	bl	80109a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
 8006d3a:	e000      	b.n	8006d3e <HAL_PCD_IRQHandler+0x75e>
      return;
 8006d3c:	bf00      	nop
    }
  }
}
 8006d3e:	3734      	adds	r7, #52	; 0x34
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd90      	pop	{r4, r7, pc}

08006d44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_PCD_SetAddress+0x1a>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e013      	b.n	8006d86 <HAL_PCD_SetAddress+0x42>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f004 fbb3 	bl	800b4e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	70fb      	strb	r3, [r7, #3]
 8006da0:	460b      	mov	r3, r1
 8006da2:	803b      	strh	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	da0f      	bge.n	8006dd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	3338      	adds	r3, #56	; 0x38
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	705a      	strb	r2, [r3, #1]
 8006dd2:	e00f      	b.n	8006df4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	3304      	adds	r3, #4
 8006dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e00:	883a      	ldrh	r2, [r7, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	78ba      	ldrb	r2, [r7, #2]
 8006e0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e1e:	78bb      	ldrb	r3, [r7, #2]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d102      	bne.n	8006e2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_PCD_EP_Open+0xaa>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e00e      	b.n	8006e56 <HAL_PCD_EP_Open+0xc8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f003 fd1e 	bl	800a888 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da0f      	bge.n	8006e92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	3338      	adds	r3, #56	; 0x38
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	4413      	add	r3, r2
 8006e86:	3304      	adds	r3, #4
 8006e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	705a      	strb	r2, [r3, #1]
 8006e90:	e00f      	b.n	8006eb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	4613      	mov	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_PCD_EP_Close+0x6e>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e00e      	b.n	8006eea <HAL_PCD_EP_Close+0x8c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68f9      	ldr	r1, [r7, #12]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f003 fd5c 	bl	800a998 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	460b      	mov	r3, r1
 8006f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	4613      	mov	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	3304      	adds	r3, #4
 8006f1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d102      	bne.n	8006f4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	f004 f837 	bl	800afd8 <USB_EP0StartXfer>
 8006f6a:	e008      	b.n	8006f7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	f003 fde9 	bl	800ab50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	f003 020f 	and.w	r2, r3, #15
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006faa:	681b      	ldr	r3, [r3, #0]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	4613      	mov	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	3338      	adds	r3, #56	; 0x38
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	3304      	adds	r3, #4
 8006fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	f003 ffd5 	bl	800afd8 <USB_EP0StartXfer>
 800702e:	e008      	b.n	8007042 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	f003 fd87 	bl	800ab50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 020f 	and.w	r2, r3, #15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d901      	bls.n	800706a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e050      	b.n	800710c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800706a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800706e:	2b00      	cmp	r3, #0
 8007070:	da0f      	bge.n	8007092 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	4613      	mov	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	1a9b      	subs	r3, r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	3338      	adds	r3, #56	; 0x38
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4413      	add	r3, r2
 8007086:	3304      	adds	r3, #4
 8007088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	705a      	strb	r2, [r3, #1]
 8007090:	e00d      	b.n	80070ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_PCD_EP_SetStall+0x82>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e01e      	b.n	800710c <HAL_PCD_EP_SetStall+0xc0>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	4618      	mov	r0, r3
 80070de:	f004 f92c 	bl	800b33a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	b2d9      	uxtb	r1, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070fc:	461a      	mov	r2, r3
 80070fe:	f004 fb1d 	bl	800b73c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	429a      	cmp	r2, r3
 800712c:	d901      	bls.n	8007132 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e042      	b.n	80071b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007136:	2b00      	cmp	r3, #0
 8007138:	da0f      	bge.n	800715a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 020f 	and.w	r2, r3, #15
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	3338      	adds	r3, #56	; 0x38
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	3304      	adds	r3, #4
 8007150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	705a      	strb	r2, [r3, #1]
 8007158:	e00f      	b.n	800717a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	3304      	adds	r3, #4
 8007172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_PCD_EP_ClrStall+0x86>
 8007196:	2302      	movs	r3, #2
 8007198:	e00e      	b.n	80071b8 <HAL_PCD_EP_ClrStall+0xa4>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f004 f934 	bl	800b416 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	3338      	adds	r3, #56	; 0x38
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	3304      	adds	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d901      	bls.n	80071f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e06c      	b.n	80072d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	695a      	ldr	r2, [r3, #20]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	429a      	cmp	r2, r3
 800720c:	d902      	bls.n	8007214 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	3303      	adds	r3, #3
 8007218:	089b      	lsrs	r3, r3, #2
 800721a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800721c:	e02b      	b.n	8007276 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	695a      	ldr	r2, [r3, #20]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	429a      	cmp	r2, r3
 8007232:	d902      	bls.n	800723a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3303      	adds	r3, #3
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007252:	b2db      	uxtb	r3, r3
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4603      	mov	r3, r0
 8007258:	6978      	ldr	r0, [r7, #20]
 800725a:	f004 f810 	bl	800b27e <USB_WritePacket>

    ep->xfer_buff  += len;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	b29b      	uxth	r3, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d809      	bhi.n	80072a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007294:	429a      	cmp	r2, r3
 8007296:	d203      	bcs.n	80072a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1be      	bne.n	800721e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d811      	bhi.n	80072d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	2201      	movs	r2, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	6939      	ldr	r1, [r7, #16]
 80072c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072cc:	4013      	ands	r3, r2
 80072ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	333c      	adds	r3, #60	; 0x3c
 80072f4:	3304      	adds	r3, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b01      	cmp	r3, #1
 8007310:	f040 80a0 	bne.w	8007454 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d015      	beq.n	800734a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a72      	ldr	r2, [pc, #456]	; (80074ec <PCD_EP_OutXfrComplete_int+0x210>)
 8007322:	4293      	cmp	r3, r2
 8007324:	f240 80dd 	bls.w	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80d7 	beq.w	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	461a      	mov	r2, r3
 8007342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007346:	6093      	str	r3, [r2, #8]
 8007348:	e0cb      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	461a      	mov	r2, r3
 8007362:	2320      	movs	r3, #32
 8007364:	6093      	str	r3, [r2, #8]
 8007366:	e0bc      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 80b7 	bne.w	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a5d      	ldr	r2, [pc, #372]	; (80074ec <PCD_EP_OutXfrComplete_int+0x210>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d90f      	bls.n	800739c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	461a      	mov	r2, r3
 8007394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007398:	6093      	str	r3, [r2, #8]
 800739a:	e0a2      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	0159      	lsls	r1, r3, #5
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80073c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4403      	add	r3, r0
 80073d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80073d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073ea:	6819      	ldr	r1, [r3, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4403      	add	r3, r0
 80073fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4419      	add	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4403      	add	r3, r0
 8007410:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007414:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d114      	bne.n	8007446 <PCD_EP_OutXfrComplete_int+0x16a>
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800743e:	461a      	mov	r2, r3
 8007440:	2101      	movs	r1, #1
 8007442:	f004 f97b 	bl	800b73c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f009 f9d9 	bl	8010804 <HAL_PCD_DataOutStageCallback>
 8007452:	e046      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d124      	bne.n	80074a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	461a      	mov	r2, r3
 8007474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007478:	6093      	str	r3, [r2, #8]
 800747a:	e032      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007492:	461a      	mov	r2, r3
 8007494:	2320      	movs	r3, #32
 8007496:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f009 f9b0 	bl	8010804 <HAL_PCD_DataOutStageCallback>
 80074a4:	e01d      	b.n	80074e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d114      	bne.n	80074d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d108      	bne.n	80074d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074ce:	461a      	mov	r2, r3
 80074d0:	2100      	movs	r1, #0
 80074d2:	f004 f933 	bl	800b73c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f009 f991 	bl	8010804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	4f54300a 	.word	0x4f54300a
 80074f0:	4f54310a 	.word	0x4f54310a

080074f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	333c      	adds	r3, #60	; 0x3c
 800750c:	3304      	adds	r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <PCD_EP_OutSetupPacket_int+0x88>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d90e      	bls.n	8007548 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f009 f949 	bl	80107e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <PCD_EP_OutSetupPacket_int+0x88>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d90c      	bls.n	8007570 <PCD_EP_OutSetupPacket_int+0x7c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d108      	bne.n	8007570 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007568:	461a      	mov	r2, r3
 800756a:	2101      	movs	r1, #1
 800756c:	f004 f8e6 	bl	800b73c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	4f54300a 	.word	0x4f54300a

08007580 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
 800758c:	4613      	mov	r3, r2
 800758e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800759e:	883b      	ldrh	r3, [r7, #0]
 80075a0:	0419      	lsls	r1, r3, #16
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
 80075ac:	e028      	b.n	8007600 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]
 80075c0:	e00d      	b.n	80075de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	3340      	adds	r3, #64	; 0x40
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	3301      	adds	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	7bfa      	ldrb	r2, [r7, #15]
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3ec      	bcc.n	80075c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075e8:	883b      	ldrh	r3, [r7, #0]
 80075ea:	0418      	lsls	r0, r3, #16
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4302      	orrs	r2, r0
 80075f8:	3340      	adds	r3, #64	; 0x40
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	887a      	ldrh	r2, [r7, #2]
 8007620:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_PWR_DisableWakeUpPin+0x24>)
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	43db      	mvns	r3, r3
 8007658:	4904      	ldr	r1, [pc, #16]	; (800766c <HAL_PWR_DisableWakeUpPin+0x24>)
 800765a:	4013      	ands	r3, r2
 800765c:	604b      	str	r3, [r1, #4]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40007000 	.word	0x40007000

08007670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e25b      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d075      	beq.n	800777a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800768e:	4ba3      	ldr	r3, [pc, #652]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b04      	cmp	r3, #4
 8007698:	d00c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800769a:	4ba0      	ldr	r3, [pc, #640]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d112      	bne.n	80076cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076a6:	4b9d      	ldr	r3, [pc, #628]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b2:	d10b      	bne.n	80076cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	4b99      	ldr	r3, [pc, #612]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d05b      	beq.n	8007778 <HAL_RCC_OscConfig+0x108>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d157      	bne.n	8007778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e236      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d106      	bne.n	80076e4 <HAL_RCC_OscConfig+0x74>
 80076d6:	4b91      	ldr	r3, [pc, #580]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a90      	ldr	r2, [pc, #576]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e01d      	b.n	8007720 <HAL_RCC_OscConfig+0xb0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ec:	d10c      	bne.n	8007708 <HAL_RCC_OscConfig+0x98>
 80076ee:	4b8b      	ldr	r3, [pc, #556]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a8a      	ldr	r2, [pc, #552]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a87      	ldr	r2, [pc, #540]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e00b      	b.n	8007720 <HAL_RCC_OscConfig+0xb0>
 8007708:	4b84      	ldr	r3, [pc, #528]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a83      	ldr	r2, [pc, #524]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800770e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b81      	ldr	r3, [pc, #516]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a80      	ldr	r2, [pc, #512]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800771a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800771e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d013      	beq.n	8007750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fc fef0 	bl	800450c <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007730:	f7fc feec 	bl	800450c <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	; 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e1fb      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007742:	4b76      	ldr	r3, [pc, #472]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0xc0>
 800774e:	e014      	b.n	800777a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fc fedc 	bl	800450c <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007758:	f7fc fed8 	bl	800450c <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	; 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e1e7      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	4b6c      	ldr	r3, [pc, #432]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0xe8>
 8007776:	e000      	b.n	800777a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d063      	beq.n	800784e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007786:	4b65      	ldr	r3, [pc, #404]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007792:	4b62      	ldr	r3, [pc, #392]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800779a:	2b08      	cmp	r3, #8
 800779c:	d11c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800779e:	4b5f      	ldr	r3, [pc, #380]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d116      	bne.n	80077d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	4b5c      	ldr	r3, [pc, #368]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_RCC_OscConfig+0x152>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d001      	beq.n	80077c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1bb      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c2:	4b56      	ldr	r3, [pc, #344]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4952      	ldr	r1, [pc, #328]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d6:	e03a      	b.n	800784e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077e0:	4b4f      	ldr	r3, [pc, #316]	; (8007920 <HAL_RCC_OscConfig+0x2b0>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e6:	f7fc fe91 	bl	800450c <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fc fe8d 	bl	800450c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e19c      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007800:	4b46      	ldr	r3, [pc, #280]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b43      	ldr	r3, [pc, #268]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4940      	ldr	r1, [pc, #256]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 800781c:	4313      	orrs	r3, r2
 800781e:	600b      	str	r3, [r1, #0]
 8007820:	e015      	b.n	800784e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007822:	4b3f      	ldr	r3, [pc, #252]	; (8007920 <HAL_RCC_OscConfig+0x2b0>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fc fe70 	bl	800450c <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007830:	f7fc fe6c 	bl	800450c <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e17b      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007842:	4b36      	ldr	r3, [pc, #216]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d030      	beq.n	80078bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007862:	4b30      	ldr	r3, [pc, #192]	; (8007924 <HAL_RCC_OscConfig+0x2b4>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007868:	f7fc fe50 	bl	800450c <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007870:	f7fc fe4c 	bl	800450c <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e15b      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 8007884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x200>
 800788e:	e015      	b.n	80078bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007890:	4b24      	ldr	r3, [pc, #144]	; (8007924 <HAL_RCC_OscConfig+0x2b4>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007896:	f7fc fe39 	bl	800450c <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800789e:	f7fc fe35 	bl	800450c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e144      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b0:	4b1a      	ldr	r3, [pc, #104]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80078b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f0      	bne.n	800789e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80a0 	beq.w	8007a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10f      	bne.n	80078fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	4a0e      	ldr	r2, [pc, #56]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80078e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f2:	60bb      	str	r3, [r7, #8]
 80078f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <HAL_RCC_OscConfig+0x2b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d121      	bne.n	800794a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <HAL_RCC_OscConfig+0x2b8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a07      	ldr	r2, [pc, #28]	; (8007928 <HAL_RCC_OscConfig+0x2b8>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007912:	f7fc fdfb 	bl	800450c <HAL_GetTick>
 8007916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007918:	e011      	b.n	800793e <HAL_RCC_OscConfig+0x2ce>
 800791a:	bf00      	nop
 800791c:	40023800 	.word	0x40023800
 8007920:	42470000 	.word	0x42470000
 8007924:	42470e80 	.word	0x42470e80
 8007928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792c:	f7fc fdee 	bl	800450c <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e0fd      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793e:	4b81      	ldr	r3, [pc, #516]	; (8007b44 <HAL_RCC_OscConfig+0x4d4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d106      	bne.n	8007960 <HAL_RCC_OscConfig+0x2f0>
 8007952:	4b7d      	ldr	r3, [pc, #500]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a7c      	ldr	r2, [pc, #496]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
 800795e:	e01c      	b.n	800799a <HAL_RCC_OscConfig+0x32a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b05      	cmp	r3, #5
 8007966:	d10c      	bne.n	8007982 <HAL_RCC_OscConfig+0x312>
 8007968:	4b77      	ldr	r3, [pc, #476]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a76      	ldr	r2, [pc, #472]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 800796e:	f043 0304 	orr.w	r3, r3, #4
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	4b74      	ldr	r3, [pc, #464]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	4a73      	ldr	r2, [pc, #460]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	6713      	str	r3, [r2, #112]	; 0x70
 8007980:	e00b      	b.n	800799a <HAL_RCC_OscConfig+0x32a>
 8007982:	4b71      	ldr	r3, [pc, #452]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a70      	ldr	r2, [pc, #448]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
 800798e:	4b6e      	ldr	r3, [pc, #440]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	4a6d      	ldr	r2, [pc, #436]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007994:	f023 0304 	bic.w	r3, r3, #4
 8007998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d015      	beq.n	80079ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a2:	f7fc fdb3 	bl	800450c <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a8:	e00a      	b.n	80079c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fc fdaf 	bl	800450c <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e0bc      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c0:	4b61      	ldr	r3, [pc, #388]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0ee      	beq.n	80079aa <HAL_RCC_OscConfig+0x33a>
 80079cc:	e014      	b.n	80079f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ce:	f7fc fd9d 	bl	800450c <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d4:	e00a      	b.n	80079ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079d6:	f7fc fd99 	bl	800450c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e0a6      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ec:	4b56      	ldr	r3, [pc, #344]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 80079ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1ee      	bne.n	80079d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d105      	bne.n	8007a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079fe:	4b52      	ldr	r3, [pc, #328]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	4a51      	ldr	r2, [pc, #324]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8092 	beq.w	8007b38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a14:	4b4c      	ldr	r3, [pc, #304]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 030c 	and.w	r3, r3, #12
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d05c      	beq.n	8007ada <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d141      	bne.n	8007aac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a28:	4b48      	ldr	r3, [pc, #288]	; (8007b4c <HAL_RCC_OscConfig+0x4dc>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2e:	f7fc fd6d 	bl	800450c <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a36:	f7fc fd69 	bl	800450c <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e078      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a48:	4b3f      	ldr	r3, [pc, #252]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f0      	bne.n	8007a36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	019b      	lsls	r3, r3, #6
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	4933      	ldr	r1, [pc, #204]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a7e:	4b33      	ldr	r3, [pc, #204]	; (8007b4c <HAL_RCC_OscConfig+0x4dc>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a84:	f7fc fd42 	bl	800450c <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7fc fd3e 	bl	800450c <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e04d      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a9e:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCC_OscConfig+0x41c>
 8007aaa:	e045      	b.n	8007b38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aac:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <HAL_RCC_OscConfig+0x4dc>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab2:	f7fc fd2b 	bl	800450c <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aba:	f7fc fd27 	bl	800450c <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e036      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f0      	bne.n	8007aba <HAL_RCC_OscConfig+0x44a>
 8007ad8:	e02e      	b.n	8007b38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e029      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ae6:	4b18      	ldr	r3, [pc, #96]	; (8007b48 <HAL_RCC_OscConfig+0x4d8>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d11c      	bne.n	8007b34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d115      	bne.n	8007b34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b0e:	4013      	ands	r3, r2
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d10d      	bne.n	8007b34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d106      	bne.n	8007b34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d001      	beq.n	8007b38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40007000 	.word	0x40007000
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	42470060 	.word	0x42470060

08007b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0cc      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b64:	4b68      	ldr	r3, [pc, #416]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d90c      	bls.n	8007b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b72:	4b65      	ldr	r3, [pc, #404]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b63      	ldr	r3, [pc, #396]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0b8      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4a58      	ldr	r2, [pc, #352]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bbc:	4b53      	ldr	r3, [pc, #332]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4a52      	ldr	r2, [pc, #328]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc8:	4b50      	ldr	r3, [pc, #320]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	494d      	ldr	r1, [pc, #308]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d044      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bee:	4b47      	ldr	r3, [pc, #284]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d119      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e07f      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d003      	beq.n	8007c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c0e:	4b3f      	ldr	r3, [pc, #252]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e06f      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1e:	4b3b      	ldr	r3, [pc, #236]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e067      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c2e:	4b37      	ldr	r3, [pc, #220]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 0203 	bic.w	r2, r3, #3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4934      	ldr	r1, [pc, #208]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c40:	f7fc fc64 	bl	800450c <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c46:	e00a      	b.n	8007c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c48:	f7fc fc60 	bl	800450c <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e04f      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5e:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 020c 	and.w	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d1eb      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d20c      	bcs.n	8007c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7e:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c86:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <HAL_RCC_ClockConfig+0x1b8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d001      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e032      	b.n	8007cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4916      	ldr	r1, [pc, #88]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	490e      	ldr	r1, [pc, #56]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cd6:	f000 f821 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	490a      	ldr	r1, [pc, #40]	; (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007ce8:	5ccb      	ldrb	r3, [r1, r3]
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cf2:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fa fc7a 	bl	80025f0 <HAL_InitTick>

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40023c00 	.word	0x40023c00
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	0801645c 	.word	0x0801645c
 8007d14:	20000000 	.word	0x20000000
 8007d18:	20000004 	.word	0x20000004

08007d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d34:	4b67      	ldr	r3, [pc, #412]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d00d      	beq.n	8007d5c <HAL_RCC_GetSysClockFreq+0x40>
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	f200 80bd 	bhi.w	8007ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x34>
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d003      	beq.n	8007d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d4e:	e0b7      	b.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d50:	4b61      	ldr	r3, [pc, #388]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d52:	60bb      	str	r3, [r7, #8]
       break;
 8007d54:	e0b7      	b.n	8007ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d56:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d58:	60bb      	str	r3, [r7, #8]
      break;
 8007d5a:	e0b4      	b.n	8007ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d5c:	4b5d      	ldr	r3, [pc, #372]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d66:	4b5b      	ldr	r3, [pc, #364]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04d      	beq.n	8007e0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d72:	4b58      	ldr	r3, [pc, #352]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	ea02 0800 	and.w	r8, r2, r0
 8007d8a:	ea03 0901 	and.w	r9, r3, r1
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	014b      	lsls	r3, r1, #5
 8007d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007da0:	0142      	lsls	r2, r0, #5
 8007da2:	4610      	mov	r0, r2
 8007da4:	4619      	mov	r1, r3
 8007da6:	ebb0 0008 	subs.w	r0, r0, r8
 8007daa:	eb61 0109 	sbc.w	r1, r1, r9
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	018b      	lsls	r3, r1, #6
 8007db8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dbc:	0182      	lsls	r2, r0, #6
 8007dbe:	1a12      	subs	r2, r2, r0
 8007dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	00d9      	lsls	r1, r3, #3
 8007dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd2:	00d0      	lsls	r0, r2, #3
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	eb12 0208 	adds.w	r2, r2, r8
 8007ddc:	eb43 0309 	adc.w	r3, r3, r9
 8007de0:	f04f 0000 	mov.w	r0, #0
 8007de4:	f04f 0100 	mov.w	r1, #0
 8007de8:	0299      	lsls	r1, r3, #10
 8007dea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dee:	0290      	lsls	r0, r2, #10
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4610      	mov	r0, r2
 8007df6:	4619      	mov	r1, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	f7f8 ff52 	bl	8000ca8 <__aeabi_uldivmod>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4613      	mov	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e04a      	b.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e0e:	4b31      	ldr	r3, [pc, #196]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	099b      	lsrs	r3, r3, #6
 8007e14:	461a      	mov	r2, r3
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e1e:	f04f 0100 	mov.w	r1, #0
 8007e22:	ea02 0400 	and.w	r4, r2, r0
 8007e26:	ea03 0501 	and.w	r5, r3, r1
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	014b      	lsls	r3, r1, #5
 8007e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e3c:	0142      	lsls	r2, r0, #5
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4619      	mov	r1, r3
 8007e42:	1b00      	subs	r0, r0, r4
 8007e44:	eb61 0105 	sbc.w	r1, r1, r5
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	018b      	lsls	r3, r1, #6
 8007e52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e56:	0182      	lsls	r2, r0, #6
 8007e58:	1a12      	subs	r2, r2, r0
 8007e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e5e:	f04f 0000 	mov.w	r0, #0
 8007e62:	f04f 0100 	mov.w	r1, #0
 8007e66:	00d9      	lsls	r1, r3, #3
 8007e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e6c:	00d0      	lsls	r0, r2, #3
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	1912      	adds	r2, r2, r4
 8007e74:	eb45 0303 	adc.w	r3, r5, r3
 8007e78:	f04f 0000 	mov.w	r0, #0
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	0299      	lsls	r1, r3, #10
 8007e82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e86:	0290      	lsls	r0, r2, #10
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f7f8 ff06 	bl	8000ca8 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	3301      	adds	r3, #1
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebc:	60bb      	str	r3, [r7, #8]
      break;
 8007ebe:	e002      	b.n	8007ec6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ec2:	60bb      	str	r3, [r7, #8]
      break;
 8007ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	00f42400 	.word	0x00f42400

08007edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20000000 	.word	0x20000000

08007ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ef8:	f7ff fff0 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	0a9b      	lsrs	r3, r3, #10
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	4903      	ldr	r1, [pc, #12]	; (8007f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f0a:	5ccb      	ldrb	r3, [r1, r3]
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40023800 	.word	0x40023800
 8007f18:	0801646c 	.word	0x0801646c

08007f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f20:	f7ff ffdc 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f24:	4602      	mov	r2, r0
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	0b5b      	lsrs	r3, r3, #13
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	4903      	ldr	r1, [pc, #12]	; (8007f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f32:	5ccb      	ldrb	r3, [r1, r3]
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	0801646c 	.word	0x0801646c

08007f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	220f      	movs	r2, #15
 8007f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f54:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0203 	and.w	r2, r3, #3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f78:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	08db      	lsrs	r3, r3, #3
 8007f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCC_GetClockConfig+0x60>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 020f 	and.w	r2, r3, #15
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40023c00 	.word	0x40023c00

08007fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d075      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fdc:	4bad      	ldr	r3, [pc, #692]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fe2:	f7fc fa93 	bl	800450c <HAL_GetTick>
 8007fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fe8:	e008      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fea:	f7fc fa8f 	bl	800450c <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e18b      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ffc:	4ba6      	ldr	r3, [pc, #664]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1f0      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	019a      	lsls	r2, r3, #6
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	071b      	lsls	r3, r3, #28
 8008020:	499d      	ldr	r1, [pc, #628]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01f      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008034:	4b98      	ldr	r3, [pc, #608]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	019a      	lsls	r2, r3, #6
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	431a      	orrs	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	071b      	lsls	r3, r3, #28
 8008054:	4990      	ldr	r1, [pc, #576]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800805c:	4b8e      	ldr	r3, [pc, #568]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800805e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008062:	f023 021f 	bic.w	r2, r3, #31
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	3b01      	subs	r3, #1
 800806c:	498a      	ldr	r1, [pc, #552]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	019a      	lsls	r2, r3, #6
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	071b      	lsls	r3, r3, #28
 8008094:	4980      	ldr	r1, [pc, #512]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800809c:	4b7d      	ldr	r3, [pc, #500]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080a2:	f7fc fa33 	bl	800450c <HAL_GetTick>
 80080a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080a8:	e008      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080aa:	f7fc fa2f 	bl	800450c <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e12b      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080bc:	4b76      	ldr	r3, [pc, #472]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d079      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080e0:	4b6e      	ldr	r3, [pc, #440]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080e6:	f7fc fa11 	bl	800450c <HAL_GetTick>
 80080ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080ec:	e008      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80080ee:	f7fc fa0d 	bl	800450c <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e109      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008100:	4b65      	ldr	r3, [pc, #404]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810c:	d0ef      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d020      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800811a:	4b5f      	ldr	r3, [pc, #380]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	0f1b      	lsrs	r3, r3, #28
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	019a      	lsls	r2, r3, #6
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	061b      	lsls	r3, r3, #24
 8008134:	431a      	orrs	r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	071b      	lsls	r3, r3, #28
 800813a:	4957      	ldr	r1, [pc, #348]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008142:	4b55      	ldr	r3, [pc, #340]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	3b01      	subs	r3, #1
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	4950      	ldr	r1, [pc, #320]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01e      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008168:	4b4b      	ldr	r3, [pc, #300]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816e:	0e1b      	lsrs	r3, r3, #24
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	019a      	lsls	r2, r3, #6
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	061b      	lsls	r3, r3, #24
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	071b      	lsls	r3, r3, #28
 8008188:	4943      	ldr	r1, [pc, #268]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008190:	4b41      	ldr	r3, [pc, #260]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008196:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	493e      	ldr	r1, [pc, #248]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80081a6:	4b3d      	ldr	r3, [pc, #244]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081a8:	2201      	movs	r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081ac:	f7fc f9ae 	bl	800450c <HAL_GetTick>
 80081b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081b2:	e008      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80081b4:	f7fc f9aa 	bl	800450c <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e0a6      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081c6:	4b34      	ldr	r3, [pc, #208]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d2:	d1ef      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 808d 	beq.w	80082fc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	4b2c      	ldr	r3, [pc, #176]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f0:	6413      	str	r3, [r2, #64]	; 0x40
 80081f2:	4b29      	ldr	r3, [pc, #164]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081fe:	4b28      	ldr	r3, [pc, #160]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800820a:	f7fc f97f 	bl	800450c <HAL_GetTick>
 800820e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008210:	e008      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008212:	f7fc f97b 	bl	800450c <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e077      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008224:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0f0      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008230:	4b19      	ldr	r3, [pc, #100]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008238:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d039      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	429a      	cmp	r2, r3
 800824c:	d032      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008256:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008264:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800826a:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b01      	cmp	r3, #1
 8008274:	d11e      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008276:	f7fc f949 	bl	800450c <HAL_GetTick>
 800827a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800827c:	e014      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800827e:	f7fc f945 	bl	800450c <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	4293      	cmp	r3, r2
 800828e:	d90b      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e03f      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008294:	42470068 	.word	0x42470068
 8008298:	40023800 	.word	0x40023800
 800829c:	42470070 	.word	0x42470070
 80082a0:	40007000 	.word	0x40007000
 80082a4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a8:	4b1c      	ldr	r3, [pc, #112]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0e4      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082c0:	d10d      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x336>
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d6:	4911      	ldr	r1, [pc, #68]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	608b      	str	r3, [r1, #8]
 80082dc:	e005      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80082de:	4b0f      	ldr	r3, [pc, #60]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	4a0e      	ldr	r2, [pc, #56]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082e8:	6093      	str	r3, [r2, #8]
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f6:	4909      	ldr	r1, [pc, #36]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0310 	and.w	r3, r3, #16
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800830e:	4b04      	ldr	r3, [pc, #16]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008310:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	424711e0 	.word	0x424711e0

08008324 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e083      	b.n	800843e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	7f5b      	ldrb	r3, [r3, #29]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7f9 ff74 	bl	8002234 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	22ca      	movs	r2, #202	; 0xca
 8008358:	625a      	str	r2, [r3, #36]	; 0x24
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2253      	movs	r2, #83	; 0x53
 8008360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb7a 	bl	8008a5c <RTC_EnterInitMode>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2204      	movs	r2, #4
 800837a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e05e      	b.n	800843e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800838e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008392:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6899      	ldr	r1, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68d2      	ldr	r2, [r2, #12]
 80083ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6919      	ldr	r1, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	041a      	lsls	r2, r3, #16
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb0c 	bl	8008a0c <HAL_RTC_WaitForSynchro>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	22ff      	movs	r2, #255	; 0xff
 8008400:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2204      	movs	r2, #4
 8008406:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e018      	b.n	800843e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800841a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	22ff      	movs	r2, #255	; 0xff
 8008434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800843c:	2300      	movs	r3, #0
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008446:	b590      	push	{r4, r7, lr}
 8008448:	b087      	sub	sp, #28
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	7f1b      	ldrb	r3, [r3, #28]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_RTC_SetTime+0x1c>
 800845e:	2302      	movs	r3, #2
 8008460:	e0aa      	b.n	80085b8 <HAL_RTC_SetTime+0x172>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2202      	movs	r2, #2
 800846c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d126      	bne.n	80084c2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fb11 	bl	8008ab4 <RTC_ByteToBcd2>
 8008492:	4603      	mov	r3, r0
 8008494:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fb0a 	bl	8008ab4 <RTC_ByteToBcd2>
 80084a0:	4603      	mov	r3, r0
 80084a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084a4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	789b      	ldrb	r3, [r3, #2]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fb02 	bl	8008ab4 <RTC_ByteToBcd2>
 80084b0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80084b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	78db      	ldrb	r3, [r3, #3]
 80084ba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e018      	b.n	80084f4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	22ca      	movs	r2, #202	; 0xca
 80084fa:	625a      	str	r2, [r3, #36]	; 0x24
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2253      	movs	r2, #83	; 0x53
 8008502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 faa9 	bl	8008a5c <RTC_EnterInitMode>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	22ff      	movs	r2, #255	; 0xff
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2204      	movs	r2, #4
 800851c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e047      	b.n	80085b8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008532:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008536:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008546:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6899      	ldr	r1, [r3, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	431a      	orrs	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800856e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d111      	bne.n	80085a2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fa44 	bl	8008a0c <HAL_RTC_WaitForSynchro>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	22ff      	movs	r2, #255	; 0xff
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2204      	movs	r2, #4
 8008596:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e00a      	b.n	80085b8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	22ff      	movs	r2, #255	; 0xff
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085b6:	2300      	movs	r3, #0
  }
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd90      	pop	{r4, r7, pc}

080085c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7f1b      	ldrb	r3, [r3, #28]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_RTC_SetDate+0x1c>
 80085d8:	2302      	movs	r3, #2
 80085da:	e094      	b.n	8008706 <HAL_RTC_SetDate+0x146>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2202      	movs	r2, #2
 80085e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10e      	bne.n	800860c <HAL_RTC_SetDate+0x4c>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d008      	beq.n	800860c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	f023 0310 	bic.w	r3, r3, #16
 8008602:	b2db      	uxtb	r3, r3
 8008604:	330a      	adds	r3, #10
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d11c      	bne.n	800864c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	78db      	ldrb	r3, [r3, #3]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fa4c 	bl	8008ab4 <RTC_ByteToBcd2>
 800861c:	4603      	mov	r3, r0
 800861e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fa45 	bl	8008ab4 <RTC_ByteToBcd2>
 800862a:	4603      	mov	r3, r0
 800862c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800862e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	789b      	ldrb	r3, [r3, #2]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fa3d 	bl	8008ab4 <RTC_ByteToBcd2>
 800863a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800863c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e00e      	b.n	800866a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	78db      	ldrb	r3, [r3, #3]
 8008650:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008658:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800865e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	22ca      	movs	r2, #202	; 0xca
 8008670:	625a      	str	r2, [r3, #36]	; 0x24
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2253      	movs	r2, #83	; 0x53
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f9ee 	bl	8008a5c <RTC_EnterInitMode>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	22ff      	movs	r2, #255	; 0xff
 800868c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2204      	movs	r2, #4
 8008692:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e033      	b.n	8008706 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d111      	bne.n	80086f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f99d 	bl	8008a0c <HAL_RTC_WaitForSynchro>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	22ff      	movs	r2, #255	; 0xff
 80086de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2204      	movs	r2, #4
 80086e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e00a      	b.n	8008706 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008704:	2300      	movs	r3, #0
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd90      	pop	{r4, r7, pc}
	...

08008710 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b089      	sub	sp, #36	; 0x24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	2300      	movs	r3, #0
 8008722:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008724:	4b93      	ldr	r3, [pc, #588]	; (8008974 <HAL_RTC_SetAlarm_IT+0x264>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a93      	ldr	r2, [pc, #588]	; (8008978 <HAL_RTC_SetAlarm_IT+0x268>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	0adb      	lsrs	r3, r3, #11
 8008730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008734:	fb02 f303 	mul.w	r3, r2, r3
 8008738:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	7f1b      	ldrb	r3, [r3, #28]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_RTC_SetAlarm_IT+0x36>
 8008742:	2302      	movs	r3, #2
 8008744:	e111      	b.n	800896a <HAL_RTC_SetAlarm_IT+0x25a>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2202      	movs	r2, #2
 8008750:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d137      	bne.n	80087c8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f99f 	bl	8008ab4 <RTC_ByteToBcd2>
 8008776:	4603      	mov	r3, r0
 8008778:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f998 	bl	8008ab4 <RTC_ByteToBcd2>
 8008784:	4603      	mov	r3, r0
 8008786:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008788:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 f990 	bl	8008ab4 <RTC_ByteToBcd2>
 8008794:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008796:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80087a0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f982 	bl	8008ab4 <RTC_ByteToBcd2>
 80087b0:	4603      	mov	r3, r0
 80087b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80087b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80087bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80087c2:	4313      	orrs	r3, r2
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	e023      	b.n	8008810 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d102      	bne.n	80087dc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2200      	movs	r2, #0
 80087da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80087e8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80087ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	78db      	ldrb	r3, [r3, #3]
 80087f4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008800:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008806:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800880c:	4313      	orrs	r3, r2
 800880e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	4313      	orrs	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	22ca      	movs	r2, #202	; 0xca
 8008822:	625a      	str	r2, [r3, #36]	; 0x24
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2253      	movs	r2, #83	; 0x53
 800882a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008834:	d141      	bne.n	80088ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008844:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	b2da      	uxtb	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008856:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	1e5a      	subs	r2, r3, #1
 800885c:	617a      	str	r2, [r7, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10b      	bne.n	800887a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2203      	movs	r2, #3
 800886e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e077      	b.n	800896a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0e7      	beq.n	8008858 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088b6:	609a      	str	r2, [r3, #8]
 80088b8:	e040      	b.n	800893c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80088da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	1e5a      	subs	r2, r3, #1
 80088e0:	617a      	str	r2, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10b      	bne.n	80088fe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	22ff      	movs	r2, #255	; 0xff
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2203      	movs	r2, #3
 80088f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e035      	b.n	800896a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0e7      	beq.n	80088dc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800892a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800893a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <HAL_RTC_SetAlarm_IT+0x26c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a0e      	ldr	r2, [pc, #56]	; (800897c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008946:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <HAL_RTC_SetAlarm_IT+0x26c>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	4a0b      	ldr	r2, [pc, #44]	; (800897c <HAL_RTC_SetAlarm_IT+0x26c>)
 800894e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008952:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	22ff      	movs	r2, #255	; 0xff
 800895a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3724      	adds	r7, #36	; 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}
 8008972:	bf00      	nop
 8008974:	20000000 	.word	0x20000000
 8008978:	10624dd3 	.word	0x10624dd3
 800897c:	40013c00 	.word	0x40013c00

08008980 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d012      	beq.n	80089bc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fb fc83 	bl	80042b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80089ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d012      	beq.n	80089f0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f8e1 	bl	8008ba0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80089ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_RTC_AlarmIRQHandler+0x88>)
 80089f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	775a      	strb	r2, [r3, #29]
}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40013c00 	.word	0x40013c00

08008a0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a28:	f7fb fd70 	bl	800450c <HAL_GetTick>
 8008a2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a2e:	e009      	b.n	8008a44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a30:	f7fb fd6c 	bl	800450c <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a3e:	d901      	bls.n	8008a44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e007      	b.n	8008a54 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0ee      	beq.n	8008a30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d119      	bne.n	8008aaa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a80:	f7fb fd44 	bl	800450c <HAL_GetTick>
 8008a84:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a86:	e009      	b.n	8008a9c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a88:	f7fb fd40 	bl	800450c <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a96:	d901      	bls.n	8008a9c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e007      	b.n	8008aac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0ee      	beq.n	8008a88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008ac2:	e005      	b.n	8008ad0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	3b0a      	subs	r3, #10
 8008ace:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	2b09      	cmp	r3, #9
 8008ad4:	d8f6      	bhi.n	8008ac4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b2db      	uxtb	r3, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7f1b      	ldrb	r3, [r3, #28]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e047      	b.n	8008b98 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	22ca      	movs	r2, #202	; 0xca
 8008b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2253      	movs	r2, #83	; 0x53
 8008b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b32:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b42:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b44:	f7fb fce2 	bl	800450c <HAL_GetTick>
 8008b48:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008b4a:	e013      	b.n	8008b74 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b4c:	f7fb fcde 	bl	800450c <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5a:	d90b      	bls.n	8008b74 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	22ff      	movs	r2, #255	; 0xff
 8008b62:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2203      	movs	r2, #3
 8008b68:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e011      	b.n	8008b98 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0e4      	beq.n	8008b4c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	22ff      	movs	r2, #255	; 0xff
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e056      	b.n	8008c74 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7f9 fb43 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	ea42 0103 	orr.w	r1, r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	f003 0104 	and.w	r1, r3, #4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69da      	ldr	r2, [r3, #28]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e01d      	b.n	8008cca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f815 	bl	8008cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 fa58 	bl	8009170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b06      	cmp	r3, #6
 8008d0e:	d007      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e01d      	b.n	8008d7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7f9 fb3f 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f000 f9ff 	bl	8009170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d122      	bne.n	8008de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d11b      	bne.n	8008de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0202 	mvn.w	r2, #2
 8008db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9b4 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f9a6 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9b7 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0304 	and.w	r3, r3, #4
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0204 	mvn.w	r2, #4
 8008e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f98a 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f97c 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f98d 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0208 	mvn.w	r2, #8
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2204      	movs	r2, #4
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f960 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f952 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f963 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0310 	and.w	r3, r3, #16
 8008e92:	2b10      	cmp	r3, #16
 8008e94:	d122      	bne.n	8008edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b10      	cmp	r3, #16
 8008ea2:	d11b      	bne.n	8008edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0210 	mvn.w	r2, #16
 8008eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f936 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f928 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f939 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d10e      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d107      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0201 	mvn.w	r2, #1
 8008f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f9 f83a 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	d10e      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f20:	2b80      	cmp	r3, #128	; 0x80
 8008f22:	d107      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fbf4 	bl	800971c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d10e      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4c:	2b40      	cmp	r3, #64	; 0x40
 8008f4e:	d107      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f8fe 	bl	800915c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d10e      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d107      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0220 	mvn.w	r2, #32
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fbbe 	bl	8009708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e0b4      	b.n	8009118 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b0c      	cmp	r3, #12
 8008fc2:	f200 809f 	bhi.w	8009104 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009105 	.word	0x08009105
 8008fd4:	08009105 	.word	0x08009105
 8008fd8:	08009105 	.word	0x08009105
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	08009105 	.word	0x08009105
 8008fe4:	08009105 	.word	0x08009105
 8008fe8:	08009105 	.word	0x08009105
 8008fec:	08009083 	.word	0x08009083
 8008ff0:	08009105 	.word	0x08009105
 8008ff4:	08009105 	.word	0x08009105
 8008ff8:	08009105 	.word	0x08009105
 8008ffc:	080090c3 	.word	0x080090c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f952 	bl	80092b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0208 	orr.w	r2, r2, #8
 800901a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0204 	bic.w	r2, r2, #4
 800902a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6999      	ldr	r1, [r3, #24]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	691a      	ldr	r2, [r3, #16]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	619a      	str	r2, [r3, #24]
      break;
 800903e:	e062      	b.n	8009106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f9a2 	bl	8009390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800905a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800906a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6999      	ldr	r1, [r3, #24]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	021a      	lsls	r2, r3, #8
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	619a      	str	r2, [r3, #24]
      break;
 8009080:	e041      	b.n	8009106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f9f7 	bl	800947c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0208 	orr.w	r2, r2, #8
 800909c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0204 	bic.w	r2, r2, #4
 80090ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69d9      	ldr	r1, [r3, #28]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	691a      	ldr	r2, [r3, #16]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	61da      	str	r2, [r3, #28]
      break;
 80090c0:	e021      	b.n	8009106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fa4b 	bl	8009564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69da      	ldr	r2, [r3, #28]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69d9      	ldr	r1, [r3, #28]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	021a      	lsls	r2, r3, #8
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	61da      	str	r2, [r3, #28]
      break;
 8009102:	e000      	b.n	8009106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009104:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a40      	ldr	r2, [pc, #256]	; (8009284 <TIM_Base_SetConfig+0x114>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918e:	d00f      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a3d      	ldr	r2, [pc, #244]	; (8009288 <TIM_Base_SetConfig+0x118>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00b      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a3c      	ldr	r2, [pc, #240]	; (800928c <TIM_Base_SetConfig+0x11c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d007      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a3b      	ldr	r2, [pc, #236]	; (8009290 <TIM_Base_SetConfig+0x120>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a3a      	ldr	r2, [pc, #232]	; (8009294 <TIM_Base_SetConfig+0x124>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d108      	bne.n	80091c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2f      	ldr	r2, [pc, #188]	; (8009284 <TIM_Base_SetConfig+0x114>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d02b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d0:	d027      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2c      	ldr	r2, [pc, #176]	; (8009288 <TIM_Base_SetConfig+0x118>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d023      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a2b      	ldr	r2, [pc, #172]	; (800928c <TIM_Base_SetConfig+0x11c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d01f      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a2a      	ldr	r2, [pc, #168]	; (8009290 <TIM_Base_SetConfig+0x120>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a29      	ldr	r2, [pc, #164]	; (8009294 <TIM_Base_SetConfig+0x124>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d017      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a28      	ldr	r2, [pc, #160]	; (8009298 <TIM_Base_SetConfig+0x128>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a27      	ldr	r2, [pc, #156]	; (800929c <TIM_Base_SetConfig+0x12c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a26      	ldr	r2, [pc, #152]	; (80092a0 <TIM_Base_SetConfig+0x130>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a25      	ldr	r2, [pc, #148]	; (80092a4 <TIM_Base_SetConfig+0x134>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a24      	ldr	r2, [pc, #144]	; (80092a8 <TIM_Base_SetConfig+0x138>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a23      	ldr	r2, [pc, #140]	; (80092ac <TIM_Base_SetConfig+0x13c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d108      	bne.n	8009234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <TIM_Base_SetConfig+0x114>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_Base_SetConfig+0xf8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a0c      	ldr	r2, [pc, #48]	; (8009294 <TIM_Base_SetConfig+0x124>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d103      	bne.n	8009270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	615a      	str	r2, [r3, #20]
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40010000 	.word	0x40010000
 8009288:	40000400 	.word	0x40000400
 800928c:	40000800 	.word	0x40000800
 8009290:	40000c00 	.word	0x40000c00
 8009294:	40010400 	.word	0x40010400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800
 80092a4:	40001800 	.word	0x40001800
 80092a8:	40001c00 	.word	0x40001c00
 80092ac:	40002000 	.word	0x40002000

080092b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	f023 0201 	bic.w	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f023 0302 	bic.w	r3, r3, #2
 80092f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a20      	ldr	r2, [pc, #128]	; (8009388 <TIM_OC1_SetConfig+0xd8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC1_SetConfig+0x64>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a1f      	ldr	r2, [pc, #124]	; (800938c <TIM_OC1_SetConfig+0xdc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10c      	bne.n	800932e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0308 	bic.w	r3, r3, #8
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f023 0304 	bic.w	r3, r3, #4
 800932c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a15      	ldr	r2, [pc, #84]	; (8009388 <TIM_OC1_SetConfig+0xd8>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_OC1_SetConfig+0x8e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a14      	ldr	r2, [pc, #80]	; (800938c <TIM_OC1_SetConfig+0xdc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d111      	bne.n	8009362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800934c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	4313      	orrs	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	621a      	str	r2, [r3, #32]
}
 800937c:	bf00      	nop
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400

08009390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	f023 0210 	bic.w	r2, r3, #16
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0320 	bic.w	r3, r3, #32
 80093da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a22      	ldr	r2, [pc, #136]	; (8009474 <TIM_OC2_SetConfig+0xe4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d003      	beq.n	80093f8 <TIM_OC2_SetConfig+0x68>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a21      	ldr	r2, [pc, #132]	; (8009478 <TIM_OC2_SetConfig+0xe8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d10d      	bne.n	8009414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4313      	orrs	r3, r2
 800940a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a17      	ldr	r2, [pc, #92]	; (8009474 <TIM_OC2_SetConfig+0xe4>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d003      	beq.n	8009424 <TIM_OC2_SetConfig+0x94>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a16      	ldr	r2, [pc, #88]	; (8009478 <TIM_OC2_SetConfig+0xe8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d113      	bne.n	800944c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800942a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	621a      	str	r2, [r3, #32]
}
 8009466:	bf00      	nop
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40010000 	.word	0x40010000
 8009478:	40010400 	.word	0x40010400

0800947c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a21      	ldr	r2, [pc, #132]	; (800955c <TIM_OC3_SetConfig+0xe0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_OC3_SetConfig+0x66>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a20      	ldr	r2, [pc, #128]	; (8009560 <TIM_OC3_SetConfig+0xe4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d10d      	bne.n	80094fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a16      	ldr	r2, [pc, #88]	; (800955c <TIM_OC3_SetConfig+0xe0>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d003      	beq.n	800950e <TIM_OC3_SetConfig+0x92>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a15      	ldr	r2, [pc, #84]	; (8009560 <TIM_OC3_SetConfig+0xe4>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d113      	bne.n	8009536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800951c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	4313      	orrs	r3, r2
 8009528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	4313      	orrs	r3, r2
 8009534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	621a      	str	r2, [r3, #32]
}
 8009550:	bf00      	nop
 8009552:	371c      	adds	r7, #28
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	40010000 	.word	0x40010000
 8009560:	40010400 	.word	0x40010400

08009564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	031b      	lsls	r3, r3, #12
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a12      	ldr	r2, [pc, #72]	; (8009608 <TIM_OC4_SetConfig+0xa4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_OC4_SetConfig+0x68>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a11      	ldr	r2, [pc, #68]	; (800960c <TIM_OC4_SetConfig+0xa8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d109      	bne.n	80095e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	019b      	lsls	r3, r3, #6
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	4313      	orrs	r3, r2
 80095de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40010000 	.word	0x40010000
 800960c:	40010400 	.word	0x40010400

08009610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009624:	2302      	movs	r3, #2
 8009626:	e05a      	b.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a21      	ldr	r2, [pc, #132]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d022      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009674:	d01d      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1b      	ldr	r2, [pc, #108]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d013      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1a      	ldr	r2, [pc, #104]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a18      	ldr	r2, [pc, #96]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a17      	ldr	r2, [pc, #92]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a15      	ldr	r2, [pc, #84]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10c      	bne.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40001800 	.word	0x40001800

08009708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e03f      	b.n	80097c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7f8 fe96 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2224      	movs	r2, #36	; 0x24
 8009760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f9b1 	bl	8009adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	695a      	ldr	r2, [r3, #20]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b088      	sub	sp, #32
 80097ce:	af02      	add	r7, sp, #8
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	603b      	str	r3, [r7, #0]
 80097d6:	4613      	mov	r3, r2
 80097d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	f040 8083 	bne.w	80098f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_UART_Transmit+0x2e>
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e07b      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <HAL_UART_Transmit+0x40>
 8009806:	2302      	movs	r3, #2
 8009808:	e074      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2221      	movs	r2, #33	; 0x21
 800981c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009820:	f7fa fe74 	bl	800450c <HAL_GetTick>
 8009824:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800983a:	e042      	b.n	80098c2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009852:	d122      	bne.n	800989a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2200      	movs	r2, #0
 800985c:	2180      	movs	r1, #128	; 0x80
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f8f2 	bl	8009a48 <UART_WaitOnFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e042      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009880:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d103      	bne.n	8009892 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3302      	adds	r3, #2
 800988e:	60bb      	str	r3, [r7, #8]
 8009890:	e017      	b.n	80098c2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	3301      	adds	r3, #1
 8009896:	60bb      	str	r3, [r7, #8]
 8009898:	e013      	b.n	80098c2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2200      	movs	r2, #0
 80098a2:	2180      	movs	r1, #128	; 0x80
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f8cf 	bl	8009a48 <UART_WaitOnFlagUntilTimeout>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e01f      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	60ba      	str	r2, [r7, #8]
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1b7      	bne.n	800983c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2200      	movs	r2, #0
 80098d4:	2140      	movs	r1, #64	; 0x40
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f8b6 	bl	8009a48 <UART_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e006      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	e000      	b.n	80098f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80098f2:	2302      	movs	r3, #2
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b20      	cmp	r3, #32
 800991a:	f040 8090 	bne.w	8009a3e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_UART_Receive+0x2e>
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e088      	b.n	8009a40 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_UART_Receive+0x40>
 8009938:	2302      	movs	r3, #2
 800993a:	e081      	b.n	8009a40 <HAL_UART_Receive+0x144>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2222      	movs	r2, #34	; 0x22
 800994e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009952:	f7fa fddb 	bl	800450c <HAL_GetTick>
 8009956:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	88fa      	ldrh	r2, [r7, #6]
 800995c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	88fa      	ldrh	r2, [r7, #6]
 8009962:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800996c:	e05c      	b.n	8009a28 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009972:	b29b      	uxth	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009984:	d12b      	bne.n	80099de <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2200      	movs	r2, #0
 800998e:	2120      	movs	r1, #32
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 f859 	bl	8009a48 <UART_WaitOnFlagUntilTimeout>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e04f      	b.n	8009a40 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10c      	bne.n	80099c6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3302      	adds	r3, #2
 80099c2:	60bb      	str	r3, [r7, #8]
 80099c4:	e030      	b.n	8009a28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	3301      	adds	r3, #1
 80099da:	60bb      	str	r3, [r7, #8]
 80099dc:	e024      	b.n	8009a28 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2200      	movs	r2, #0
 80099e6:	2120      	movs	r1, #32
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 f82d 	bl	8009a48 <UART_WaitOnFlagUntilTimeout>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e023      	b.n	8009a40 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d108      	bne.n	8009a12 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6859      	ldr	r1, [r3, #4]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	60ba      	str	r2, [r7, #8]
 8009a0c:	b2ca      	uxtb	r2, r1
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e00a      	b.n	8009a28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	1c59      	adds	r1, r3, #1
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d19d      	bne.n	800996e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e000      	b.n	8009a40 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009a3e:	2302      	movs	r3, #2
  }
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	4613      	mov	r3, r2
 8009a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a58:	e02c      	b.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a60:	d028      	beq.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a68:	f7fa fd50 	bl	800450c <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d21d      	bcs.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	695a      	ldr	r2, [r3, #20]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 0201 	bic.w	r2, r2, #1
 8009a96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e00f      	b.n	8009ad4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	4013      	ands	r3, r2
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	bf0c      	ite	eq
 8009ac4:	2301      	moveq	r3, #1
 8009ac6:	2300      	movne	r3, #0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	461a      	mov	r2, r3
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d0c3      	beq.n	8009a5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	b0bd      	sub	sp, #244	; 0xf4
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af8:	68d9      	ldr	r1, [r3, #12]
 8009afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	ea40 0301 	orr.w	r3, r0, r1
 8009b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b34:	f021 010c 	bic.w	r1, r1, #12
 8009b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b42:	430b      	orrs	r3, r1
 8009b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b56:	6999      	ldr	r1, [r3, #24]
 8009b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	ea40 0301 	orr.w	r3, r0, r1
 8009b62:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b6e:	f040 81a5 	bne.w	8009ebc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	4bcd      	ldr	r3, [pc, #820]	; (8009eb0 <UART_SetConfig+0x3d4>)
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d006      	beq.n	8009b8c <UART_SetConfig+0xb0>
 8009b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4bcb      	ldr	r3, [pc, #812]	; (8009eb4 <UART_SetConfig+0x3d8>)
 8009b86:	429a      	cmp	r2, r3
 8009b88:	f040 80cb 	bne.w	8009d22 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b8c:	f7fe f9c6 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 8009b90:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b98:	461c      	mov	r4, r3
 8009b9a:	f04f 0500 	mov.w	r5, #0
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	1891      	adds	r1, r2, r2
 8009ba4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009ba8:	415b      	adcs	r3, r3
 8009baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009bae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009bb2:	1912      	adds	r2, r2, r4
 8009bb4:	eb45 0303 	adc.w	r3, r5, r3
 8009bb8:	f04f 0000 	mov.w	r0, #0
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	00d9      	lsls	r1, r3, #3
 8009bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bc6:	00d0      	lsls	r0, r2, #3
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	1911      	adds	r1, r2, r4
 8009bce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009bd2:	416b      	adcs	r3, r5
 8009bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	461a      	mov	r2, r3
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	1891      	adds	r1, r2, r2
 8009be6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009bea:	415b      	adcs	r3, r3
 8009bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bf0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009bf4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009bf8:	f7f7 f856 	bl	8000ca8 <__aeabi_uldivmod>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4bad      	ldr	r3, [pc, #692]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009c02:	fba3 2302 	umull	r2, r3, r3, r2
 8009c06:	095b      	lsrs	r3, r3, #5
 8009c08:	011e      	lsls	r6, r3, #4
 8009c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c0e:	461c      	mov	r4, r3
 8009c10:	f04f 0500 	mov.w	r5, #0
 8009c14:	4622      	mov	r2, r4
 8009c16:	462b      	mov	r3, r5
 8009c18:	1891      	adds	r1, r2, r2
 8009c1a:	67b9      	str	r1, [r7, #120]	; 0x78
 8009c1c:	415b      	adcs	r3, r3
 8009c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c20:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009c24:	1912      	adds	r2, r2, r4
 8009c26:	eb45 0303 	adc.w	r3, r5, r3
 8009c2a:	f04f 0000 	mov.w	r0, #0
 8009c2e:	f04f 0100 	mov.w	r1, #0
 8009c32:	00d9      	lsls	r1, r3, #3
 8009c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c38:	00d0      	lsls	r0, r2, #3
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	1911      	adds	r1, r2, r4
 8009c40:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009c44:	416b      	adcs	r3, r5
 8009c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	461a      	mov	r2, r3
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	1891      	adds	r1, r2, r2
 8009c58:	6739      	str	r1, [r7, #112]	; 0x70
 8009c5a:	415b      	adcs	r3, r3
 8009c5c:	677b      	str	r3, [r7, #116]	; 0x74
 8009c5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009c62:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009c66:	f7f7 f81f 	bl	8000ca8 <__aeabi_uldivmod>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4b92      	ldr	r3, [pc, #584]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009c70:	fba3 1302 	umull	r1, r3, r3, r2
 8009c74:	095b      	lsrs	r3, r3, #5
 8009c76:	2164      	movs	r1, #100	; 0x64
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	3332      	adds	r3, #50	; 0x32
 8009c82:	4a8d      	ldr	r2, [pc, #564]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009c84:	fba2 2303 	umull	r2, r3, r2, r3
 8009c88:	095b      	lsrs	r3, r3, #5
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c90:	441e      	add	r6, r3
 8009c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c96:	4618      	mov	r0, r3
 8009c98:	f04f 0100 	mov.w	r1, #0
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	1894      	adds	r4, r2, r2
 8009ca2:	66bc      	str	r4, [r7, #104]	; 0x68
 8009ca4:	415b      	adcs	r3, r3
 8009ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ca8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009cac:	1812      	adds	r2, r2, r0
 8009cae:	eb41 0303 	adc.w	r3, r1, r3
 8009cb2:	f04f 0400 	mov.w	r4, #0
 8009cb6:	f04f 0500 	mov.w	r5, #0
 8009cba:	00dd      	lsls	r5, r3, #3
 8009cbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009cc0:	00d4      	lsls	r4, r2, #3
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	1814      	adds	r4, r2, r0
 8009cc8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009ccc:	414b      	adcs	r3, r1
 8009cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	f04f 0300 	mov.w	r3, #0
 8009cde:	1891      	adds	r1, r2, r2
 8009ce0:	6639      	str	r1, [r7, #96]	; 0x60
 8009ce2:	415b      	adcs	r3, r3
 8009ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ce6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009cea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009cee:	f7f6 ffdb 	bl	8000ca8 <__aeabi_uldivmod>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4b70      	ldr	r3, [pc, #448]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	2164      	movs	r1, #100	; 0x64
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	3332      	adds	r3, #50	; 0x32
 8009d0a:	4a6b      	ldr	r2, [pc, #428]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	095b      	lsrs	r3, r3, #5
 8009d12:	f003 0207 	and.w	r2, r3, #7
 8009d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4432      	add	r2, r6
 8009d1e:	609a      	str	r2, [r3, #8]
 8009d20:	e26d      	b.n	800a1fe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d22:	f7fe f8e7 	bl	8007ef4 <HAL_RCC_GetPCLK1Freq>
 8009d26:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d2e:	461c      	mov	r4, r3
 8009d30:	f04f 0500 	mov.w	r5, #0
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	1891      	adds	r1, r2, r2
 8009d3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d3c:	415b      	adcs	r3, r3
 8009d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d44:	1912      	adds	r2, r2, r4
 8009d46:	eb45 0303 	adc.w	r3, r5, r3
 8009d4a:	f04f 0000 	mov.w	r0, #0
 8009d4e:	f04f 0100 	mov.w	r1, #0
 8009d52:	00d9      	lsls	r1, r3, #3
 8009d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d58:	00d0      	lsls	r0, r2, #3
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	1911      	adds	r1, r2, r4
 8009d60:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009d64:	416b      	adcs	r3, r5
 8009d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f04f 0300 	mov.w	r3, #0
 8009d76:	1891      	adds	r1, r2, r2
 8009d78:	6539      	str	r1, [r7, #80]	; 0x50
 8009d7a:	415b      	adcs	r3, r3
 8009d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8009d7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d82:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009d86:	f7f6 ff8f 	bl	8000ca8 <__aeabi_uldivmod>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4b4a      	ldr	r3, [pc, #296]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009d90:	fba3 2302 	umull	r2, r3, r3, r2
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	011e      	lsls	r6, r3, #4
 8009d98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d9c:	461c      	mov	r4, r3
 8009d9e:	f04f 0500 	mov.w	r5, #0
 8009da2:	4622      	mov	r2, r4
 8009da4:	462b      	mov	r3, r5
 8009da6:	1891      	adds	r1, r2, r2
 8009da8:	64b9      	str	r1, [r7, #72]	; 0x48
 8009daa:	415b      	adcs	r3, r3
 8009dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009db2:	1912      	adds	r2, r2, r4
 8009db4:	eb45 0303 	adc.w	r3, r5, r3
 8009db8:	f04f 0000 	mov.w	r0, #0
 8009dbc:	f04f 0100 	mov.w	r1, #0
 8009dc0:	00d9      	lsls	r1, r3, #3
 8009dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dc6:	00d0      	lsls	r0, r2, #3
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	1911      	adds	r1, r2, r4
 8009dce:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009dd2:	416b      	adcs	r3, r5
 8009dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	1891      	adds	r1, r2, r2
 8009de6:	6439      	str	r1, [r7, #64]	; 0x40
 8009de8:	415b      	adcs	r3, r3
 8009dea:	647b      	str	r3, [r7, #68]	; 0x44
 8009dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009df0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009df4:	f7f6 ff58 	bl	8000ca8 <__aeabi_uldivmod>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4b2e      	ldr	r3, [pc, #184]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8009e02:	095b      	lsrs	r3, r3, #5
 8009e04:	2164      	movs	r1, #100	; 0x64
 8009e06:	fb01 f303 	mul.w	r3, r1, r3
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	3332      	adds	r3, #50	; 0x32
 8009e10:	4a29      	ldr	r2, [pc, #164]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	095b      	lsrs	r3, r3, #5
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e1e:	441e      	add	r6, r3
 8009e20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e24:	4618      	mov	r0, r3
 8009e26:	f04f 0100 	mov.w	r1, #0
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	1894      	adds	r4, r2, r2
 8009e30:	63bc      	str	r4, [r7, #56]	; 0x38
 8009e32:	415b      	adcs	r3, r3
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e3a:	1812      	adds	r2, r2, r0
 8009e3c:	eb41 0303 	adc.w	r3, r1, r3
 8009e40:	f04f 0400 	mov.w	r4, #0
 8009e44:	f04f 0500 	mov.w	r5, #0
 8009e48:	00dd      	lsls	r5, r3, #3
 8009e4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e4e:	00d4      	lsls	r4, r2, #3
 8009e50:	4622      	mov	r2, r4
 8009e52:	462b      	mov	r3, r5
 8009e54:	1814      	adds	r4, r2, r0
 8009e56:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009e5a:	414b      	adcs	r3, r1
 8009e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f04f 0300 	mov.w	r3, #0
 8009e6c:	1891      	adds	r1, r2, r2
 8009e6e:	6339      	str	r1, [r7, #48]	; 0x30
 8009e70:	415b      	adcs	r3, r3
 8009e72:	637b      	str	r3, [r7, #52]	; 0x34
 8009e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009e78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e7c:	f7f6 ff14 	bl	8000ca8 <__aeabi_uldivmod>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009e86:	fba3 1302 	umull	r1, r3, r3, r2
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	2164      	movs	r1, #100	; 0x64
 8009e8e:	fb01 f303 	mul.w	r3, r1, r3
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	3332      	adds	r3, #50	; 0x32
 8009e98:	4a07      	ldr	r2, [pc, #28]	; (8009eb8 <UART_SetConfig+0x3dc>)
 8009e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9e:	095b      	lsrs	r3, r3, #5
 8009ea0:	f003 0207 	and.w	r2, r3, #7
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4432      	add	r2, r6
 8009eac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009eae:	e1a6      	b.n	800a1fe <UART_SetConfig+0x722>
 8009eb0:	40011000 	.word	0x40011000
 8009eb4:	40011400 	.word	0x40011400
 8009eb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4bd1      	ldr	r3, [pc, #836]	; (800a208 <UART_SetConfig+0x72c>)
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d006      	beq.n	8009ed6 <UART_SetConfig+0x3fa>
 8009ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4bcf      	ldr	r3, [pc, #828]	; (800a20c <UART_SetConfig+0x730>)
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	f040 80ca 	bne.w	800a06a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ed6:	f7fe f821 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 8009eda:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	f04f 0500 	mov.w	r5, #0
 8009ee8:	4622      	mov	r2, r4
 8009eea:	462b      	mov	r3, r5
 8009eec:	1891      	adds	r1, r2, r2
 8009eee:	62b9      	str	r1, [r7, #40]	; 0x28
 8009ef0:	415b      	adcs	r3, r3
 8009ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ef8:	1912      	adds	r2, r2, r4
 8009efa:	eb45 0303 	adc.w	r3, r5, r3
 8009efe:	f04f 0000 	mov.w	r0, #0
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	00d9      	lsls	r1, r3, #3
 8009f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f0c:	00d0      	lsls	r0, r2, #3
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	eb12 0a04 	adds.w	sl, r2, r4
 8009f16:	eb43 0b05 	adc.w	fp, r3, r5
 8009f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f04f 0100 	mov.w	r1, #0
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	f04f 0300 	mov.w	r3, #0
 8009f2e:	008b      	lsls	r3, r1, #2
 8009f30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f34:	0082      	lsls	r2, r0, #2
 8009f36:	4650      	mov	r0, sl
 8009f38:	4659      	mov	r1, fp
 8009f3a:	f7f6 feb5 	bl	8000ca8 <__aeabi_uldivmod>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4bb3      	ldr	r3, [pc, #716]	; (800a210 <UART_SetConfig+0x734>)
 8009f44:	fba3 2302 	umull	r2, r3, r3, r2
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	011e      	lsls	r6, r3, #4
 8009f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f50:	4618      	mov	r0, r3
 8009f52:	f04f 0100 	mov.w	r1, #0
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	1894      	adds	r4, r2, r2
 8009f5c:	623c      	str	r4, [r7, #32]
 8009f5e:	415b      	adcs	r3, r3
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
 8009f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f66:	1812      	adds	r2, r2, r0
 8009f68:	eb41 0303 	adc.w	r3, r1, r3
 8009f6c:	f04f 0400 	mov.w	r4, #0
 8009f70:	f04f 0500 	mov.w	r5, #0
 8009f74:	00dd      	lsls	r5, r3, #3
 8009f76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f7a:	00d4      	lsls	r4, r2, #3
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	462b      	mov	r3, r5
 8009f80:	1814      	adds	r4, r2, r0
 8009f82:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009f86:	414b      	adcs	r3, r1
 8009f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f04f 0100 	mov.w	r1, #0
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	008b      	lsls	r3, r1, #2
 8009fa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009fa6:	0082      	lsls	r2, r0, #2
 8009fa8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009fac:	f7f6 fe7c 	bl	8000ca8 <__aeabi_uldivmod>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4b96      	ldr	r3, [pc, #600]	; (800a210 <UART_SetConfig+0x734>)
 8009fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8009fba:	095b      	lsrs	r3, r3, #5
 8009fbc:	2164      	movs	r1, #100	; 0x64
 8009fbe:	fb01 f303 	mul.w	r3, r1, r3
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	3332      	adds	r3, #50	; 0x32
 8009fc8:	4a91      	ldr	r2, [pc, #580]	; (800a210 <UART_SetConfig+0x734>)
 8009fca:	fba2 2303 	umull	r2, r3, r2, r3
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fd4:	441e      	add	r6, r3
 8009fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f04f 0100 	mov.w	r1, #0
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	1894      	adds	r4, r2, r2
 8009fe6:	61bc      	str	r4, [r7, #24]
 8009fe8:	415b      	adcs	r3, r3
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ff0:	1812      	adds	r2, r2, r0
 8009ff2:	eb41 0303 	adc.w	r3, r1, r3
 8009ff6:	f04f 0400 	mov.w	r4, #0
 8009ffa:	f04f 0500 	mov.w	r5, #0
 8009ffe:	00dd      	lsls	r5, r3, #3
 800a000:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a004:	00d4      	lsls	r4, r2, #3
 800a006:	4622      	mov	r2, r4
 800a008:	462b      	mov	r3, r5
 800a00a:	1814      	adds	r4, r2, r0
 800a00c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800a010:	414b      	adcs	r3, r1
 800a012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f04f 0100 	mov.w	r1, #0
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	008b      	lsls	r3, r1, #2
 800a02c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a030:	0082      	lsls	r2, r0, #2
 800a032:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a036:	f7f6 fe37 	bl	8000ca8 <__aeabi_uldivmod>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4b74      	ldr	r3, [pc, #464]	; (800a210 <UART_SetConfig+0x734>)
 800a040:	fba3 1302 	umull	r1, r3, r3, r2
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	2164      	movs	r1, #100	; 0x64
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	3332      	adds	r3, #50	; 0x32
 800a052:	4a6f      	ldr	r2, [pc, #444]	; (800a210 <UART_SetConfig+0x734>)
 800a054:	fba2 2303 	umull	r2, r3, r2, r3
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4432      	add	r2, r6
 800a066:	609a      	str	r2, [r3, #8]
 800a068:	e0c9      	b.n	800a1fe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fd ff43 	bl	8007ef4 <HAL_RCC_GetPCLK1Freq>
 800a06e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a072:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a076:	461c      	mov	r4, r3
 800a078:	f04f 0500 	mov.w	r5, #0
 800a07c:	4622      	mov	r2, r4
 800a07e:	462b      	mov	r3, r5
 800a080:	1891      	adds	r1, r2, r2
 800a082:	6139      	str	r1, [r7, #16]
 800a084:	415b      	adcs	r3, r3
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a08c:	1912      	adds	r2, r2, r4
 800a08e:	eb45 0303 	adc.w	r3, r5, r3
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f04f 0100 	mov.w	r1, #0
 800a09a:	00d9      	lsls	r1, r3, #3
 800a09c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0a0:	00d0      	lsls	r0, r2, #3
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	eb12 0804 	adds.w	r8, r2, r4
 800a0aa:	eb43 0905 	adc.w	r9, r3, r5
 800a0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f04f 0100 	mov.w	r1, #0
 800a0ba:	f04f 0200 	mov.w	r2, #0
 800a0be:	f04f 0300 	mov.w	r3, #0
 800a0c2:	008b      	lsls	r3, r1, #2
 800a0c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a0c8:	0082      	lsls	r2, r0, #2
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 fdeb 	bl	8000ca8 <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4b4e      	ldr	r3, [pc, #312]	; (800a210 <UART_SetConfig+0x734>)
 800a0d8:	fba3 2302 	umull	r2, r3, r3, r2
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	011e      	lsls	r6, r3, #4
 800a0e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f04f 0100 	mov.w	r1, #0
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	1894      	adds	r4, r2, r2
 800a0f0:	60bc      	str	r4, [r7, #8]
 800a0f2:	415b      	adcs	r3, r3
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0fa:	1812      	adds	r2, r2, r0
 800a0fc:	eb41 0303 	adc.w	r3, r1, r3
 800a100:	f04f 0400 	mov.w	r4, #0
 800a104:	f04f 0500 	mov.w	r5, #0
 800a108:	00dd      	lsls	r5, r3, #3
 800a10a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a10e:	00d4      	lsls	r4, r2, #3
 800a110:	4622      	mov	r2, r4
 800a112:	462b      	mov	r3, r5
 800a114:	1814      	adds	r4, r2, r0
 800a116:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800a11a:	414b      	adcs	r3, r1
 800a11c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	f04f 0100 	mov.w	r1, #0
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	008b      	lsls	r3, r1, #2
 800a136:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a13a:	0082      	lsls	r2, r0, #2
 800a13c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a140:	f7f6 fdb2 	bl	8000ca8 <__aeabi_uldivmod>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4b31      	ldr	r3, [pc, #196]	; (800a210 <UART_SetConfig+0x734>)
 800a14a:	fba3 1302 	umull	r1, r3, r3, r2
 800a14e:	095b      	lsrs	r3, r3, #5
 800a150:	2164      	movs	r1, #100	; 0x64
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	3332      	adds	r3, #50	; 0x32
 800a15c:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <UART_SetConfig+0x734>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a168:	441e      	add	r6, r3
 800a16a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a16e:	4618      	mov	r0, r3
 800a170:	f04f 0100 	mov.w	r1, #0
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	1894      	adds	r4, r2, r2
 800a17a:	603c      	str	r4, [r7, #0]
 800a17c:	415b      	adcs	r3, r3
 800a17e:	607b      	str	r3, [r7, #4]
 800a180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a184:	1812      	adds	r2, r2, r0
 800a186:	eb41 0303 	adc.w	r3, r1, r3
 800a18a:	f04f 0400 	mov.w	r4, #0
 800a18e:	f04f 0500 	mov.w	r5, #0
 800a192:	00dd      	lsls	r5, r3, #3
 800a194:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a198:	00d4      	lsls	r4, r2, #3
 800a19a:	4622      	mov	r2, r4
 800a19c:	462b      	mov	r3, r5
 800a19e:	1814      	adds	r4, r2, r0
 800a1a0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f04f 0100 	mov.w	r1, #0
 800a1b6:	f04f 0200 	mov.w	r2, #0
 800a1ba:	f04f 0300 	mov.w	r3, #0
 800a1be:	008b      	lsls	r3, r1, #2
 800a1c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1c4:	0082      	lsls	r2, r0, #2
 800a1c6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a1ca:	f7f6 fd6d 	bl	8000ca8 <__aeabi_uldivmod>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <UART_SetConfig+0x734>)
 800a1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1d8:	095b      	lsrs	r3, r3, #5
 800a1da:	2164      	movs	r1, #100	; 0x64
 800a1dc:	fb01 f303 	mul.w	r3, r1, r3
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	011b      	lsls	r3, r3, #4
 800a1e4:	3332      	adds	r3, #50	; 0x32
 800a1e6:	4a0a      	ldr	r2, [pc, #40]	; (800a210 <UART_SetConfig+0x734>)
 800a1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ec:	095b      	lsrs	r3, r3, #5
 800a1ee:	f003 020f 	and.w	r2, r3, #15
 800a1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4432      	add	r2, r6
 800a1fa:	609a      	str	r2, [r3, #8]
}
 800a1fc:	e7ff      	b.n	800a1fe <UART_SetConfig+0x722>
 800a1fe:	bf00      	nop
 800a200:	37f4      	adds	r7, #244	; 0xf4
 800a202:	46bd      	mov	sp, r7
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	40011000 	.word	0x40011000
 800a20c:	40011400 	.word	0x40011400
 800a210:	51eb851f 	.word	0x51eb851f

0800a214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a214:	b084      	sub	sp, #16
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	f107 001c 	add.w	r0, r7, #28
 800a222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d122      	bne.n	800a272 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d105      	bne.n	800a266 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 fac6 	bl	800b7f8 <USB_CoreReset>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
 800a270:	e01a      	b.n	800a2a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 faba 	bl	800b7f8 <USB_CoreReset>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	639a      	str	r2, [r3, #56]	; 0x38
 800a29a:	e005      	b.n	800a2a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d10b      	bne.n	800a2c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f043 0206 	orr.w	r2, r3, #6
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f043 0220 	orr.w	r2, r3, #32
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2d2:	b004      	add	sp, #16
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d165      	bne.n	800a3b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	4a41      	ldr	r2, [pc, #260]	; (800a3f4 <USB_SetTurnaroundTime+0x11c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d906      	bls.n	800a302 <USB_SetTurnaroundTime+0x2a>
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	4a40      	ldr	r2, [pc, #256]	; (800a3f8 <USB_SetTurnaroundTime+0x120>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d202      	bcs.n	800a302 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2fc:	230f      	movs	r3, #15
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e062      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4a3c      	ldr	r2, [pc, #240]	; (800a3f8 <USB_SetTurnaroundTime+0x120>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d306      	bcc.n	800a318 <USB_SetTurnaroundTime+0x40>
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4a3b      	ldr	r2, [pc, #236]	; (800a3fc <USB_SetTurnaroundTime+0x124>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d202      	bcs.n	800a318 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a312:	230e      	movs	r3, #14
 800a314:	617b      	str	r3, [r7, #20]
 800a316:	e057      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4a38      	ldr	r2, [pc, #224]	; (800a3fc <USB_SetTurnaroundTime+0x124>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d306      	bcc.n	800a32e <USB_SetTurnaroundTime+0x56>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	4a37      	ldr	r2, [pc, #220]	; (800a400 <USB_SetTurnaroundTime+0x128>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d202      	bcs.n	800a32e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a328:	230d      	movs	r3, #13
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	e04c      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	4a33      	ldr	r2, [pc, #204]	; (800a400 <USB_SetTurnaroundTime+0x128>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d306      	bcc.n	800a344 <USB_SetTurnaroundTime+0x6c>
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4a32      	ldr	r2, [pc, #200]	; (800a404 <USB_SetTurnaroundTime+0x12c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d802      	bhi.n	800a344 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a33e:	230c      	movs	r3, #12
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	e041      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4a2f      	ldr	r2, [pc, #188]	; (800a404 <USB_SetTurnaroundTime+0x12c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d906      	bls.n	800a35a <USB_SetTurnaroundTime+0x82>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4a2e      	ldr	r2, [pc, #184]	; (800a408 <USB_SetTurnaroundTime+0x130>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d802      	bhi.n	800a35a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a354:	230b      	movs	r3, #11
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	e036      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	4a2a      	ldr	r2, [pc, #168]	; (800a408 <USB_SetTurnaroundTime+0x130>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d906      	bls.n	800a370 <USB_SetTurnaroundTime+0x98>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4a29      	ldr	r2, [pc, #164]	; (800a40c <USB_SetTurnaroundTime+0x134>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d802      	bhi.n	800a370 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a36a:	230a      	movs	r3, #10
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e02b      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4a26      	ldr	r2, [pc, #152]	; (800a40c <USB_SetTurnaroundTime+0x134>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d906      	bls.n	800a386 <USB_SetTurnaroundTime+0xae>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4a25      	ldr	r2, [pc, #148]	; (800a410 <USB_SetTurnaroundTime+0x138>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d202      	bcs.n	800a386 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a380:	2309      	movs	r3, #9
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e020      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4a21      	ldr	r2, [pc, #132]	; (800a410 <USB_SetTurnaroundTime+0x138>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d306      	bcc.n	800a39c <USB_SetTurnaroundTime+0xc4>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4a20      	ldr	r2, [pc, #128]	; (800a414 <USB_SetTurnaroundTime+0x13c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d802      	bhi.n	800a39c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a396:	2308      	movs	r3, #8
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e015      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <USB_SetTurnaroundTime+0x13c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d906      	bls.n	800a3b2 <USB_SetTurnaroundTime+0xda>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <USB_SetTurnaroundTime+0x140>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d202      	bcs.n	800a3b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a3ac:	2307      	movs	r3, #7
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e00a      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a3b2:	2306      	movs	r3, #6
 800a3b4:	617b      	str	r3, [r7, #20]
 800a3b6:	e007      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a3be:	2309      	movs	r3, #9
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	e001      	b.n	800a3c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3c4:	2309      	movs	r3, #9
 800a3c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	029b      	lsls	r3, r3, #10
 800a3dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	00d8acbf 	.word	0x00d8acbf
 800a3f8:	00e4e1c0 	.word	0x00e4e1c0
 800a3fc:	00f42400 	.word	0x00f42400
 800a400:	01067380 	.word	0x01067380
 800a404:	011a499f 	.word	0x011a499f
 800a408:	01312cff 	.word	0x01312cff
 800a40c:	014ca43f 	.word	0x014ca43f
 800a410:	016e3600 	.word	0x016e3600
 800a414:	01a6ab1f 	.word	0x01a6ab1f
 800a418:	01e84800 	.word	0x01e84800

0800a41c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f043 0201 	orr.w	r2, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f023 0201 	bic.w	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d106      	bne.n	800a48c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
 800a48a:	e00b      	b.n	800a4a4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60da      	str	r2, [r3, #12]
 800a49e:	e001      	b.n	800a4a4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e003      	b.n	800a4ac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a4a4:	2032      	movs	r0, #50	; 0x32
 800a4a6:	f7fa f83d 	bl	8004524 <HAL_Delay>

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b086      	sub	sp, #24
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	e009      	b.n	800a4e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	3340      	adds	r3, #64	; 0x40
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b0e      	cmp	r3, #14
 800a4ec:	d9f2      	bls.n	800a4d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11c      	bne.n	800a52e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a502:	f043 0302 	orr.w	r3, r3, #2
 800a506:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	639a      	str	r2, [r3, #56]	; 0x38
 800a52c:	e00b      	b.n	800a546 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a54c:	461a      	mov	r2, r3
 800a54e:	2300      	movs	r3, #0
 800a550:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a558:	4619      	mov	r1, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a560:	461a      	mov	r2, r3
 800a562:	680b      	ldr	r3, [r1, #0]
 800a564:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d10c      	bne.n	800a586 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a572:	2100      	movs	r1, #0
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f949 	bl	800a80c <USB_SetDevSpeed>
 800a57a:	e008      	b.n	800a58e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a57c:	2101      	movs	r1, #1
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f944 	bl	800a80c <USB_SetDevSpeed>
 800a584:	e003      	b.n	800a58e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a586:	2103      	movs	r1, #3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f93f 	bl	800a80c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a58e:	2110      	movs	r1, #16
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f8f3 	bl	800a77c <USB_FlushTxFifo>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f911 	bl	800a7c8 <USB_FlushRxFifo>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e043      	b.n	800a662 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f0:	d118      	bne.n	800a624 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a604:	461a      	mov	r2, r3
 800a606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	e013      	b.n	800a636 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61a:	461a      	mov	r2, r3
 800a61c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	e008      	b.n	800a636 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a630:	461a      	mov	r2, r3
 800a632:	2300      	movs	r3, #0
 800a634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a642:	461a      	mov	r2, r3
 800a644:	2300      	movs	r3, #0
 800a646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a654:	461a      	mov	r2, r3
 800a656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a65a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3301      	adds	r3, #1
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	429a      	cmp	r2, r3
 800a668:	d3b7      	bcc.n	800a5da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a66a:	2300      	movs	r3, #0
 800a66c:	613b      	str	r3, [r7, #16]
 800a66e:	e043      	b.n	800a6f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a686:	d118      	bne.n	800a6ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69a:	461a      	mov	r2, r3
 800a69c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e013      	b.n	800a6cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	e008      	b.n	800a6cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d8:	461a      	mov	r2, r3
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3b7      	bcc.n	800a670 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a70e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	f043 0210 	orr.w	r2, r3, #16
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	699a      	ldr	r2, [r3, #24]
 800a738:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <USB_DevInit+0x2c4>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	f043 0208 	orr.w	r2, r3, #8
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a754:	2b01      	cmp	r3, #1
 800a756:	d107      	bne.n	800a768 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a760:	f043 0304 	orr.w	r3, r3, #4
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a774:	b004      	add	sp, #16
 800a776:	4770      	bx	lr
 800a778:	803c3800 	.word	0x803c3800

0800a77c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	019b      	lsls	r3, r3, #6
 800a78e:	f043 0220 	orr.w	r2, r3, #32
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <USB_FlushTxFifo+0x48>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d901      	bls.n	800a7a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e006      	b.n	800a7b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	d0f0      	beq.n	800a796 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	00030d40 	.word	0x00030d40

0800a7c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a09      	ldr	r2, [pc, #36]	; (800a808 <USB_FlushRxFifo+0x40>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d901      	bls.n	800a7ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e006      	b.n	800a7fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d0f0      	beq.n	800a7da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	00030d40 	.word	0x00030d40

0800a80c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a82c:	4313      	orrs	r3, r2
 800a82e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a83e:	b480      	push	{r7}
 800a840:	b087      	sub	sp, #28
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f003 0306 	and.w	r3, r3, #6
 800a856:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d102      	bne.n	800a864 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]
 800a862:	e00a      	b.n	800a87a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d002      	beq.n	800a870 <USB_GetDevSpeed+0x32>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b06      	cmp	r3, #6
 800a86e:	d102      	bne.n	800a876 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a870:	2302      	movs	r3, #2
 800a872:	75fb      	strb	r3, [r7, #23]
 800a874:	e001      	b.n	800a87a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a876:	230f      	movs	r3, #15
 800a878:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d13a      	bne.n	800a91a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	69da      	ldr	r2, [r3, #28]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	68f9      	ldr	r1, [r7, #12]
 800a8be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d155      	bne.n	800a988 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	78db      	ldrb	r3, [r3, #3]
 800a8f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	059b      	lsls	r3, r3, #22
 800a8fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a900:	4313      	orrs	r3, r2
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a90e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	e036      	b.n	800a988 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a920:	69da      	ldr	r2, [r3, #28]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 030f 	and.w	r3, r3, #15
 800a92a:	2101      	movs	r1, #1
 800a92c:	fa01 f303 	lsl.w	r3, r1, r3
 800a930:	041b      	lsls	r3, r3, #16
 800a932:	68f9      	ldr	r1, [r7, #12]
 800a934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a938:	4313      	orrs	r3, r2
 800a93a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d11a      	bne.n	800a988 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	78db      	ldrb	r3, [r3, #3]
 800a96c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a96e:	430b      	orrs	r3, r1
 800a970:	4313      	orrs	r3, r2
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	0151      	lsls	r1, r2, #5
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	440a      	add	r2, r1
 800a97a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a97e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a986:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
	...

0800a998 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d161      	bne.n	800aa78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ca:	d11f      	bne.n	800aa0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	0151      	lsls	r1, r2, #5
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	43db      	mvns	r3, r3
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa36:	69da      	ldr	r2, [r3, #28]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	2101      	movs	r1, #1
 800aa42:	fa01 f303 	lsl.w	r3, r1, r3
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa50:	4013      	ands	r3, r2
 800aa52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	0159      	lsls	r1, r3, #5
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	440b      	add	r3, r1
 800aa6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4b35      	ldr	r3, [pc, #212]	; (800ab48 <USB_DeactivateEndpoint+0x1b0>)
 800aa72:	4013      	ands	r3, r2
 800aa74:	600b      	str	r3, [r1, #0]
 800aa76:	e060      	b.n	800ab3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8e:	d11f      	bne.n	800aad0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aace:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 030f 	and.w	r3, r3, #15
 800aae0:	2101      	movs	r1, #1
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	041b      	lsls	r3, r3, #16
 800aae8:	43db      	mvns	r3, r3
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafa:	69da      	ldr	r2, [r3, #28]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	f003 030f 	and.w	r3, r3, #15
 800ab04:	2101      	movs	r1, #1
 800ab06:	fa01 f303 	lsl.w	r3, r1, r3
 800ab0a:	041b      	lsls	r3, r3, #16
 800ab0c:	43db      	mvns	r3, r3
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab14:	4013      	ands	r3, r2
 800ab16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	0159      	lsls	r1, r3, #5
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	440b      	add	r3, r1
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab32:	4619      	mov	r1, r3
 800ab34:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <USB_DeactivateEndpoint+0x1b4>)
 800ab36:	4013      	ands	r3, r2
 800ab38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	ec337800 	.word	0xec337800
 800ab4c:	eff37800 	.word	0xeff37800

0800ab50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	; 0x28
 800ab54:	af02      	add	r7, sp, #8
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	f040 815c 	bne.w	800ae2a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d132      	bne.n	800abe0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	0151      	lsls	r1, r2, #5
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	440a      	add	r2, r1
 800ab90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	0151      	lsls	r1, r2, #5
 800abb0:	69fa      	ldr	r2, [r7, #28]
 800abb2:	440a      	add	r2, r1
 800abb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	69ba      	ldr	r2, [r7, #24]
 800abce:	0151      	lsls	r1, r2, #5
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	440a      	add	r2, r1
 800abd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd8:	0cdb      	lsrs	r3, r3, #19
 800abda:	04db      	lsls	r3, r3, #19
 800abdc:	6113      	str	r3, [r2, #16]
 800abde:	e074      	b.n	800acca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	69fa      	ldr	r2, [r7, #28]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abfa:	0cdb      	lsrs	r3, r3, #19
 800abfc:	04db      	lsls	r3, r3, #19
 800abfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	69ba      	ldr	r2, [r7, #24]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	69fa      	ldr	r2, [r7, #28]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6959      	ldr	r1, [r3, #20]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	440b      	add	r3, r1
 800ac3c:	1e59      	subs	r1, r3, #1
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac46:	04d9      	lsls	r1, r3, #19
 800ac48:	4b9d      	ldr	r3, [pc, #628]	; (800aec0 <USB_EPStartXfer+0x370>)
 800ac4a:	400b      	ands	r3, r1
 800ac4c:	69b9      	ldr	r1, [r7, #24]
 800ac4e:	0148      	lsls	r0, r1, #5
 800ac50:	69f9      	ldr	r1, [r7, #28]
 800ac52:	4401      	add	r1, r0
 800ac54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac68:	691a      	ldr	r2, [r3, #16]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac72:	69b9      	ldr	r1, [r7, #24]
 800ac74:	0148      	lsls	r0, r1, #5
 800ac76:	69f9      	ldr	r1, [r7, #28]
 800ac78:	4401      	add	r1, r0
 800ac7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	78db      	ldrb	r3, [r3, #3]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d11f      	bne.n	800acca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	0151      	lsls	r1, r2, #5
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	440a      	add	r2, r1
 800aca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aca8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	0151      	lsls	r1, r2, #5
 800acbc:	69fa      	ldr	r2, [r7, #28]
 800acbe:	440a      	add	r2, r1
 800acc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d14b      	bne.n	800ad68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d009      	beq.n	800acec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace4:	461a      	mov	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	78db      	ldrb	r3, [r3, #3]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d128      	bne.n	800ad46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d110      	bne.n	800ad26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	0151      	lsls	r1, r2, #5
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	440a      	add	r2, r1
 800ad1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	e00f      	b.n	800ad46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	0151      	lsls	r1, r2, #5
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	440a      	add	r2, r1
 800ad3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	69ba      	ldr	r2, [r7, #24]
 800ad56:	0151      	lsls	r1, r2, #5
 800ad58:	69fa      	ldr	r2, [r7, #28]
 800ad5a:	440a      	add	r2, r1
 800ad5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	e12f      	b.n	800afc8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	78db      	ldrb	r3, [r3, #3]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d015      	beq.n	800adbc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 8117 	beq.w	800afc8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	2101      	movs	r1, #1
 800adac:	fa01 f303 	lsl.w	r3, r1, r3
 800adb0:	69f9      	ldr	r1, [r7, #28]
 800adb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adb6:	4313      	orrs	r3, r2
 800adb8:	634b      	str	r3, [r1, #52]	; 0x34
 800adba:	e105      	b.n	800afc8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d110      	bne.n	800adee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	69ba      	ldr	r2, [r7, #24]
 800addc:	0151      	lsls	r1, r2, #5
 800adde:	69fa      	ldr	r2, [r7, #28]
 800ade0:	440a      	add	r2, r1
 800ade2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	e00f      	b.n	800ae0e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae0c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	68d9      	ldr	r1, [r3, #12]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	b298      	uxth	r0, r3
 800ae1c:	79fb      	ldrb	r3, [r7, #7]
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	4603      	mov	r3, r0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 fa2b 	bl	800b27e <USB_WritePacket>
 800ae28:	e0ce      	b.n	800afc8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	0151      	lsls	r1, r2, #5
 800ae3c:	69fa      	ldr	r2, [r7, #28]
 800ae3e:	440a      	add	r2, r1
 800ae40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae44:	0cdb      	lsrs	r3, r3, #19
 800ae46:	04db      	lsls	r3, r3, #19
 800ae48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d126      	bne.n	800aec4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae8c:	69b9      	ldr	r1, [r7, #24]
 800ae8e:	0148      	lsls	r0, r1, #5
 800ae90:	69f9      	ldr	r1, [r7, #28]
 800ae92:	4401      	add	r1, r0
 800ae94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	69fa      	ldr	r2, [r7, #28]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeba:	6113      	str	r3, [r2, #16]
 800aebc:	e036      	b.n	800af2c <USB_EPStartXfer+0x3dc>
 800aebe:	bf00      	nop
 800aec0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	695a      	ldr	r2, [r3, #20]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	4413      	add	r3, r2
 800aece:	1e5a      	subs	r2, r3, #1
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee6:	691a      	ldr	r2, [r3, #16]
 800aee8:	8afb      	ldrh	r3, [r7, #22]
 800aeea:	04d9      	lsls	r1, r3, #19
 800aeec:	4b39      	ldr	r3, [pc, #228]	; (800afd4 <USB_EPStartXfer+0x484>)
 800aeee:	400b      	ands	r3, r1
 800aef0:	69b9      	ldr	r1, [r7, #24]
 800aef2:	0148      	lsls	r0, r1, #5
 800aef4:	69f9      	ldr	r1, [r7, #28]
 800aef6:	4401      	add	r1, r0
 800aef8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aefc:	4313      	orrs	r3, r2
 800aefe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	8af9      	ldrh	r1, [r7, #22]
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af1c:	69b9      	ldr	r1, [r7, #24]
 800af1e:	0148      	lsls	r0, r1, #5
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	4401      	add	r1, r0
 800af24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af28:	4313      	orrs	r3, r2
 800af2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d10d      	bne.n	800af4e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d009      	beq.n	800af4e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	68d9      	ldr	r1, [r3, #12]
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	4413      	add	r3, r2
 800af46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4a:	460a      	mov	r2, r1
 800af4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	78db      	ldrb	r3, [r3, #3]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d128      	bne.n	800afa8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af62:	2b00      	cmp	r3, #0
 800af64:	d110      	bne.n	800af88 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	69fa      	ldr	r2, [r7, #28]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e00f      	b.n	800afa8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	0151      	lsls	r1, r2, #5
 800af9a:	69fa      	ldr	r2, [r7, #28]
 800af9c:	440a      	add	r2, r1
 800af9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	0151      	lsls	r1, r2, #5
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	440a      	add	r2, r1
 800afbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3720      	adds	r7, #32
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	1ff80000 	.word	0x1ff80000

0800afd8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	f040 80cd 	bne.w	800b194 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d132      	bne.n	800b068 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	0151      	lsls	r1, r2, #5
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	440a      	add	r2, r1
 800b018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b020:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	0151      	lsls	r1, r2, #5
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	440a      	add	r2, r1
 800b03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	015a      	lsls	r2, r3, #5
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	0151      	lsls	r1, r2, #5
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	440a      	add	r2, r1
 800b05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b060:	0cdb      	lsrs	r3, r3, #19
 800b062:	04db      	lsls	r3, r3, #19
 800b064:	6113      	str	r3, [r2, #16]
 800b066:	e04e      	b.n	800b106 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b082:	0cdb      	lsrs	r3, r3, #19
 800b084:	04db      	lsls	r3, r3, #19
 800b086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	695a      	ldr	r2, [r3, #20]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	691a      	ldr	r2, [r3, #16]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0f6:	6939      	ldr	r1, [r7, #16]
 800b0f8:	0148      	lsls	r0, r1, #5
 800b0fa:	6979      	ldr	r1, [r7, #20]
 800b0fc:	4401      	add	r1, r0
 800b0fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b102:	4313      	orrs	r3, r2
 800b104:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d11e      	bne.n	800b14a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b120:	461a      	mov	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	e092      	b.n	800b270 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b168:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d07e      	beq.n	800b270 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	2101      	movs	r1, #1
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b18e:	4313      	orrs	r3, r2
 800b190:	634b      	str	r3, [r1, #52]	; 0x34
 800b192:	e06d      	b.n	800b270 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ae:	0cdb      	lsrs	r3, r3, #19
 800b1b0:	04db      	lsls	r3, r3, #19
 800b1b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	0151      	lsls	r1, r2, #5
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b206:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b21e:	6939      	ldr	r1, [r7, #16]
 800b220:	0148      	lsls	r0, r1, #5
 800b222:	6979      	ldr	r1, [r7, #20]
 800b224:	4401      	add	r1, r0
 800b226:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b22a:	4313      	orrs	r3, r2
 800b22c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d10d      	bne.n	800b250 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	68d9      	ldr	r1, [r3, #12]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24c:	460a      	mov	r2, r1
 800b24e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	0151      	lsls	r1, r2, #5
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	440a      	add	r2, r1
 800b266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b26e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	371c      	adds	r7, #28
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b27e:	b480      	push	{r7}
 800b280:	b089      	sub	sp, #36	; 0x24
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	4611      	mov	r1, r2
 800b28a:	461a      	mov	r2, r3
 800b28c:	460b      	mov	r3, r1
 800b28e:	71fb      	strb	r3, [r7, #7]
 800b290:	4613      	mov	r3, r2
 800b292:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b29c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d11a      	bne.n	800b2da <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b2a4:	88bb      	ldrh	r3, [r7, #4]
 800b2a6:	3303      	adds	r3, #3
 800b2a8:	089b      	lsrs	r3, r3, #2
 800b2aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	e00f      	b.n	800b2d2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	031a      	lsls	r2, r3, #12
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2be:	461a      	mov	r2, r3
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d3eb      	bcc.n	800b2b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3724      	adds	r7, #36	; 0x24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b089      	sub	sp, #36	; 0x24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b2fe:	88fb      	ldrh	r3, [r7, #6]
 800b300:	3303      	adds	r3, #3
 800b302:	089b      	lsrs	r3, r3, #2
 800b304:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b306:	2300      	movs	r3, #0
 800b308:	61bb      	str	r3, [r7, #24]
 800b30a:	e00b      	b.n	800b324 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	601a      	str	r2, [r3, #0]
    pDest++;
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	3304      	adds	r3, #4
 800b31c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	3301      	adds	r3, #1
 800b322:	61bb      	str	r3, [r7, #24]
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d3ef      	bcc.n	800b30c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b32c:	69fb      	ldr	r3, [r7, #28]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3724      	adds	r7, #36	; 0x24
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b085      	sub	sp, #20
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	785b      	ldrb	r3, [r3, #1]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d12c      	bne.n	800b3b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	db12      	blt.n	800b38e <USB_EPSetStall+0x54>
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00f      	beq.n	800b38e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b38c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	0151      	lsls	r1, r2, #5
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	440a      	add	r2, r1
 800b3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	e02b      	b.n	800b408 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	db12      	blt.n	800b3e8 <USB_EPSetStall+0xae>
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00f      	beq.n	800b3e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	0151      	lsls	r1, r2, #5
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	440a      	add	r2, r1
 800b3de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d128      	bne.n	800b484 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	440a      	add	r2, r1
 800b448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	78db      	ldrb	r3, [r3, #3]
 800b456:	2b03      	cmp	r3, #3
 800b458:	d003      	beq.n	800b462 <USB_EPClearStall+0x4c>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	78db      	ldrb	r3, [r3, #3]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d138      	bne.n	800b4d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	0151      	lsls	r1, r2, #5
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	440a      	add	r2, r1
 800b478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e027      	b.n	800b4d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	78db      	ldrb	r3, [r3, #3]
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d003      	beq.n	800b4b4 <USB_EPClearStall+0x9e>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	78db      	ldrb	r3, [r3, #3]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d10f      	bne.n	800b4d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b085      	sub	sp, #20
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b500:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b504:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	78fb      	ldrb	r3, [r7, #3]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b516:	68f9      	ldr	r1, [r7, #12]
 800b518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b51c:	4313      	orrs	r3, r2
 800b51e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b55c:	f023 0302 	bic.w	r3, r3, #2
 800b560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b59e:	f043 0302 	orr.w	r3, r3, #2
 800b5a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	0c1b      	lsrs	r3, r3, #16
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b628:	69db      	ldr	r3, [r3, #28]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	4013      	ands	r3, r2
 800b62e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	b29b      	uxth	r3, r3
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	4013      	ands	r3, r2
 800b66c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b66e:	68bb      	ldr	r3, [r7, #8]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3714      	adds	r7, #20
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 030f 	and.w	r3, r3, #15
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ac:	01db      	lsls	r3, r3, #7
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	f003 0301 	and.w	r3, r3, #1
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b712:	f023 0307 	bic.w	r3, r3, #7
 800b716:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b72a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
	...

0800b73c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	460b      	mov	r3, r1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	333c      	adds	r3, #60	; 0x3c
 800b752:	3304      	adds	r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	4a26      	ldr	r2, [pc, #152]	; (800b7f4 <USB_EP0_OutStart+0xb8>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d90a      	bls.n	800b776 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b76c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b770:	d101      	bne.n	800b776 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	e037      	b.n	800b7e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77c:	461a      	mov	r2, r3
 800b77e:	2300      	movs	r3, #0
 800b780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a4:	f043 0318 	orr.w	r3, r3, #24
 800b7a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b7bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d10f      	bne.n	800b7e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b7e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	4f54300a 	.word	0x4f54300a

0800b7f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3301      	adds	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <USB_CoreReset+0x64>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d901      	bls.n	800b816 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e01b      	b.n	800b84e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	daf2      	bge.n	800b804 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4a09      	ldr	r2, [pc, #36]	; (800b85c <USB_CoreReset+0x64>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d901      	bls.n	800b840 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e006      	b.n	800b84e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d0f0      	beq.n	800b82e <USB_CoreReset+0x36>

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	00030d40 	.word	0x00030d40

0800b860 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b86c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b870:	f005 fb9e 	bl	8010fb0 <malloc>
 800b874:	4603      	mov	r3, r0
 800b876:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d105      	bne.n	800b88a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b886:	2302      	movs	r3, #2
 800b888:	e066      	b.n	800b958 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7c1b      	ldrb	r3, [r3, #16]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d119      	bne.n	800b8ce <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b89e:	2202      	movs	r2, #2
 800b8a0:	2181      	movs	r1, #129	; 0x81
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f005 f8f5 	bl	8010a92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f005 f8eb 	bl	8010a92 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2210      	movs	r2, #16
 800b8c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b8cc:	e016      	b.n	800b8fc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8ce:	2340      	movs	r3, #64	; 0x40
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	2181      	movs	r1, #129	; 0x81
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f005 f8dc 	bl	8010a92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f005 f8d3 	bl	8010a92 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2210      	movs	r2, #16
 800b8f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b8fc:	2308      	movs	r3, #8
 800b8fe:	2203      	movs	r2, #3
 800b900:	2182      	movs	r1, #130	; 0x82
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f005 f8c5 	bl	8010a92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	7c1b      	ldrb	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b93c:	2101      	movs	r1, #1
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f005 f996 	bl	8010c70 <USBD_LL_PrepareReceive>
 800b944:	e007      	b.n	800b956 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b94c:	2340      	movs	r3, #64	; 0x40
 800b94e:	2101      	movs	r1, #1
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f005 f98d 	bl	8010c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b970:	2181      	movs	r1, #129	; 0x81
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f005 f8b3 	bl	8010ade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b97e:	2101      	movs	r1, #1
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f005 f8ac 	bl	8010ade <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b98e:	2182      	movs	r1, #130	; 0x82
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f005 f8a4 	bl	8010ade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00e      	beq.n	800b9ce <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f005 fafd 	bl	8010fc0 <free>
    pdev->pClassData = NULL;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d03a      	beq.n	800ba78 <USBD_CDC_Setup+0xa0>
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	f040 8097 	bne.w	800bb36 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	88db      	ldrh	r3, [r3, #6]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d029      	beq.n	800ba64 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b25b      	sxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da11      	bge.n	800ba3e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ba26:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	88d2      	ldrh	r2, [r2, #6]
 800ba2c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba2e:	6939      	ldr	r1, [r7, #16]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	88db      	ldrh	r3, [r3, #6]
 800ba34:	461a      	mov	r2, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 fa7c 	bl	800cf34 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ba3c:	e082      	b.n	800bb44 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	785a      	ldrb	r2, [r3, #1]
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	88db      	ldrh	r3, [r3, #6]
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba54:	6939      	ldr	r1, [r7, #16]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 fa95 	bl	800cf8c <USBD_CtlPrepareRx>
    break;
 800ba62:	e06f      	b.n	800bb44 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	7850      	ldrb	r0, [r2, #1]
 800ba70:	2200      	movs	r2, #0
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	4798      	blx	r3
    break;
 800ba76:	e065      	b.n	800bb44 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	2b0b      	cmp	r3, #11
 800ba7e:	d84f      	bhi.n	800bb20 <USBD_CDC_Setup+0x148>
 800ba80:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <USBD_CDC_Setup+0xb0>)
 800ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	0800bab9 	.word	0x0800bab9
 800ba8c:	0800bb2f 	.word	0x0800bb2f
 800ba90:	0800bb21 	.word	0x0800bb21
 800ba94:	0800bb21 	.word	0x0800bb21
 800ba98:	0800bb21 	.word	0x0800bb21
 800ba9c:	0800bb21 	.word	0x0800bb21
 800baa0:	0800bb21 	.word	0x0800bb21
 800baa4:	0800bb21 	.word	0x0800bb21
 800baa8:	0800bb21 	.word	0x0800bb21
 800baac:	0800bb21 	.word	0x0800bb21
 800bab0:	0800bae1 	.word	0x0800bae1
 800bab4:	0800bb09 	.word	0x0800bb09
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d107      	bne.n	800bad2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bac2:	f107 030c 	add.w	r3, r7, #12
 800bac6:	2202      	movs	r2, #2
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 fa32 	bl	800cf34 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bad0:	e030      	b.n	800bb34 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f001 f9bc 	bl	800ce52 <USBD_CtlError>
        ret = USBD_FAIL;
 800bada:	2303      	movs	r3, #3
 800badc:	75fb      	strb	r3, [r7, #23]
      break;
 800bade:	e029      	b.n	800bb34 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d107      	bne.n	800bafa <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800baea:	f107 030f 	add.w	r3, r7, #15
 800baee:	2201      	movs	r2, #1
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f001 fa1e 	bl	800cf34 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800baf8:	e01c      	b.n	800bb34 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 f9a8 	bl	800ce52 <USBD_CtlError>
        ret = USBD_FAIL;
 800bb02:	2303      	movs	r3, #3
 800bb04:	75fb      	strb	r3, [r7, #23]
      break;
 800bb06:	e015      	b.n	800bb34 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d00f      	beq.n	800bb32 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 f99c 	bl	800ce52 <USBD_CtlError>
        ret = USBD_FAIL;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bb1e:	e008      	b.n	800bb32 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 f995 	bl	800ce52 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb2c:	e002      	b.n	800bb34 <USBD_CDC_Setup+0x15c>
      break;
 800bb2e:	bf00      	nop
 800bb30:	e008      	b.n	800bb44 <USBD_CDC_Setup+0x16c>
      break;
 800bb32:	bf00      	nop
    }
    break;
 800bb34:	e006      	b.n	800bb44 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 f98a 	bl	800ce52 <USBD_CtlError>
    ret = USBD_FAIL;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	75fb      	strb	r3, [r7, #23]
    break;
 800bb42:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop

0800bb50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e049      	b.n	800bc06 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bb7a:	78fa      	ldrb	r2, [r7, #3]
 800bb7c:	6879      	ldr	r1, [r7, #4]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	440b      	add	r3, r1
 800bb88:	3318      	adds	r3, #24
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d029      	beq.n	800bbe4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bb90:	78fa      	ldrb	r2, [r7, #3]
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3318      	adds	r3, #24
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	78f9      	ldrb	r1, [r7, #3]
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	460b      	mov	r3, r1
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	1a5b      	subs	r3, r3, r1
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4403      	add	r3, r0
 800bbb0:	3344      	adds	r3, #68	; 0x44
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbb8:	fb03 f301 	mul.w	r3, r3, r1
 800bbbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d110      	bne.n	800bbe4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bbc2:	78fa      	ldrb	r2, [r7, #3]
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	440b      	add	r3, r1
 800bbd0:	3318      	adds	r3, #24
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bbd6:	78f9      	ldrb	r1, [r7, #3]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f005 f826 	bl	8010c2e <USBD_LL_Transmit>
 800bbe2:	e00f      	b.n	800bc04 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e015      	b.n	800bc5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f005 f83c 	bl	8010cb2 <USBD_LL_GetRxDataSize>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc56:	4611      	mov	r1, r2
 800bc58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc72:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d015      	beq.n	800bcaa <USBD_CDC_EP0_RxReady+0x46>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc84:	2bff      	cmp	r3, #255	; 0xff
 800bc86:	d010      	beq.n	800bcaa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bc96:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2243      	movs	r2, #67	; 0x43
 800bcc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bcc2:	4b03      	ldr	r3, [pc, #12]	; (800bcd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20000094 	.word	0x20000094

0800bcd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2243      	movs	r2, #67	; 0x43
 800bce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bce2:	4b03      	ldr	r3, [pc, #12]	; (800bcf0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	20000050 	.word	0x20000050

0800bcf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2243      	movs	r2, #67	; 0x43
 800bd00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bd02:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	200000d8 	.word	0x200000d8

0800bd14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	220a      	movs	r2, #10
 800bd20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd22:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	2000000c 	.word	0x2000000c

0800bd34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e004      	b.n	800bd52 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b087      	sub	sp, #28
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	371c      	adds	r7, #28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bda0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	e016      	b.n	800be04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7c1b      	ldrb	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bde4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde8:	2101      	movs	r1, #1
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f004 ff40 	bl	8010c70 <USBD_LL_PrepareReceive>
 800bdf0:	e007      	b.n	800be02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdf8:	2340      	movs	r3, #64	; 0x40
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f004 ff37 	bl	8010c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	4613      	mov	r3, r2
 800be18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be20:	2303      	movs	r3, #3
 800be22:	e025      	b.n	800be70 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	79fa      	ldrb	r2, [r7, #7]
 800be62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f004 fdad 	bl	80109c4 <USBD_LL_Init>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3718      	adds	r7, #24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e010      	b.n	800beb2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea0:	f107 020e 	add.w	r2, r7, #14
 800bea4:	4610      	mov	r0, r2
 800bea6:	4798      	blx	r3
 800bea8:	4602      	mov	r2, r0
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f004 fdca 	bl	8010a5c <USBD_LL_Start>
 800bec8:	4603      	mov	r3, r0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d009      	beq.n	800bf16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d007      	beq.n	800bf46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	78fa      	ldrb	r2, [r7, #3]
 800bf40:	4611      	mov	r1, r2
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
  }

  return USBD_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 ff3b 	bl	800cdde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bf76:	461a      	mov	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf84:	f003 031f 	and.w	r3, r3, #31
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d01a      	beq.n	800bfc2 <USBD_LL_SetupStage+0x72>
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d822      	bhi.n	800bfd6 <USBD_LL_SetupStage+0x86>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <USBD_LL_SetupStage+0x4a>
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d00a      	beq.n	800bfae <USBD_LL_SetupStage+0x5e>
 800bf98:	e01d      	b.n	800bfd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fa18 	bl	800c3d8 <USBD_StdDevReq>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bfac:	e020      	b.n	800bff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fa7c 	bl	800c4b4 <USBD_StdItfReq>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc0:	e016      	b.n	800bff0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 faba 	bl	800c544 <USBD_StdEPReq>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfd4:	e00c      	b.n	800bff0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bfdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f004 fd99 	bl	8010b1c <USBD_LL_StallEP>
 800bfea:	4603      	mov	r3, r0
 800bfec:	73fb      	strb	r3, [r7, #15]
      break;
 800bfee:	bf00      	nop
  }

  return ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	af00      	add	r7, sp, #0
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	460b      	mov	r3, r1
 800c004:	607a      	str	r2, [r7, #4]
 800c006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d137      	bne.n	800c07e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c014:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d14a      	bne.n	800c0b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d913      	bls.n	800c054 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	1ad2      	subs	r2, r2, r3
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	68da      	ldr	r2, [r3, #12]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	4293      	cmp	r3, r2
 800c044:	bf28      	it	cs
 800c046:	4613      	movcs	r3, r2
 800c048:	461a      	mov	r2, r3
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 ffba 	bl	800cfc6 <USBD_CtlContinueRx>
 800c052:	e030      	b.n	800c0b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00a      	beq.n	800c076 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c066:	2b03      	cmp	r3, #3
 800c068:	d105      	bne.n	800c076 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 ffb6 	bl	800cfe8 <USBD_CtlSendStatus>
 800c07c:	e01b      	b.n	800c0b6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d013      	beq.n	800c0b2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c090:	2b03      	cmp	r3, #3
 800c092:	d10e      	bne.n	800c0b2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	7afa      	ldrb	r2, [r7, #11]
 800c09e:	4611      	mov	r1, r2
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	4798      	blx	r3
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	e002      	b.n	800c0b8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e000      	b.n	800c0b8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d16a      	bne.n	800c1aa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3314      	adds	r3, #20
 800c0d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d155      	bne.n	800c190 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	689a      	ldr	r2, [r3, #8]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d914      	bls.n	800c11a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	1ad2      	subs	r2, r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	461a      	mov	r2, r3
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f000 ff2f 	bl	800cf6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c10c:	2300      	movs	r3, #0
 800c10e:	2200      	movs	r2, #0
 800c110:	2100      	movs	r1, #0
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f004 fdac 	bl	8010c70 <USBD_LL_PrepareReceive>
 800c118:	e03a      	b.n	800c190 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	429a      	cmp	r2, r3
 800c124:	d11c      	bne.n	800c160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c12e:	429a      	cmp	r2, r3
 800c130:	d316      	bcc.n	800c160 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d20f      	bcs.n	800c160 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c140:	2200      	movs	r2, #0
 800c142:	2100      	movs	r1, #0
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 ff10 	bl	800cf6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c152:	2300      	movs	r3, #0
 800c154:	2200      	movs	r2, #0
 800c156:	2100      	movs	r1, #0
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f004 fd89 	bl	8010c70 <USBD_LL_PrepareReceive>
 800c15e:	e017      	b.n	800c190 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00a      	beq.n	800c182 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c172:	2b03      	cmp	r3, #3
 800c174:	d105      	bne.n	800c182 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c182:	2180      	movs	r1, #128	; 0x80
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f004 fcc9 	bl	8010b1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 ff3f 	bl	800d00e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c196:	2b01      	cmp	r3, #1
 800c198:	d123      	bne.n	800c1e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7ff fe99 	bl	800bed2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c1a8:	e01b      	b.n	800c1e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d013      	beq.n	800c1de <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d10e      	bne.n	800c1de <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	7afa      	ldrb	r2, [r7, #11]
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	4798      	blx	r3
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	e002      	b.n	800c1e4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e000      	b.n	800c1e4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d009      	beq.n	800c230 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6852      	ldr	r2, [r2, #4]
 800c228:	b2d2      	uxtb	r2, r2
 800c22a:	4611      	mov	r1, r2
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c230:	2340      	movs	r3, #64	; 0x40
 800c232:	2200      	movs	r2, #0
 800c234:	2100      	movs	r1, #0
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f004 fc2b 	bl	8010a92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2240      	movs	r2, #64	; 0x40
 800c248:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c24c:	2340      	movs	r3, #64	; 0x40
 800c24e:	2200      	movs	r2, #0
 800c250:	2180      	movs	r1, #128	; 0x80
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f004 fc1d 	bl	8010a92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2240      	movs	r2, #64	; 0x40
 800c262:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	78fa      	ldrb	r2, [r7, #3]
 800c27e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2204      	movs	r2, #4
 800c2a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d105      	bne.n	800c2d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d10b      	bne.n	800c30e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6852      	ldr	r2, [r2, #4]
 800c388:	b2d2      	uxtb	r2, r2
 800c38a:	4611      	mov	r1, r2
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	4798      	blx	r3
  }

  return USBD_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b087      	sub	sp, #28
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3b8:	8a3b      	ldrh	r3, [r7, #16]
 800c3ba:	021b      	lsls	r3, r3, #8
 800c3bc:	b21a      	sxth	r2, r3
 800c3be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	b21b      	sxth	r3, r3
 800c3c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3c8:	89fb      	ldrh	r3, [r7, #14]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
	...

0800c3d8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d005      	beq.n	800c3fe <USBD_StdDevReq+0x26>
 800c3f2:	2b40      	cmp	r3, #64	; 0x40
 800c3f4:	d853      	bhi.n	800c49e <USBD_StdDevReq+0xc6>
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00b      	beq.n	800c412 <USBD_StdDevReq+0x3a>
 800c3fa:	2b20      	cmp	r3, #32
 800c3fc:	d14f      	bne.n	800c49e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	4798      	blx	r3
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]
    break;
 800c410:	e04a      	b.n	800c4a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	785b      	ldrb	r3, [r3, #1]
 800c416:	2b09      	cmp	r3, #9
 800c418:	d83b      	bhi.n	800c492 <USBD_StdDevReq+0xba>
 800c41a:	a201      	add	r2, pc, #4	; (adr r2, 800c420 <USBD_StdDevReq+0x48>)
 800c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c420:	0800c475 	.word	0x0800c475
 800c424:	0800c489 	.word	0x0800c489
 800c428:	0800c493 	.word	0x0800c493
 800c42c:	0800c47f 	.word	0x0800c47f
 800c430:	0800c493 	.word	0x0800c493
 800c434:	0800c453 	.word	0x0800c453
 800c438:	0800c449 	.word	0x0800c449
 800c43c:	0800c493 	.word	0x0800c493
 800c440:	0800c46b 	.word	0x0800c46b
 800c444:	0800c45d 	.word	0x0800c45d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f9d8 	bl	800c800 <USBD_GetDescriptor>
      break;
 800c450:	e024      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fb3d 	bl	800cad4 <USBD_SetAddress>
      break;
 800c45a:	e01f      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fb7c 	bl	800cb5c <USBD_SetConfig>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]
      break;
 800c468:	e018      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fc19 	bl	800cca4 <USBD_GetConfig>
      break;
 800c472:	e013      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fc49 	bl	800cd0e <USBD_GetStatus>
      break;
 800c47c:	e00e      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fc77 	bl	800cd74 <USBD_SetFeature>
      break;
 800c486:	e009      	b.n	800c49c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fc86 	bl	800cd9c <USBD_ClrFeature>
      break;
 800c490:	e004      	b.n	800c49c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fcdc 	bl	800ce52 <USBD_CtlError>
      break;
 800c49a:	bf00      	nop
    }
    break;
 800c49c:	e004      	b.n	800c4a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fcd6 	bl	800ce52 <USBD_CtlError>
    break;
 800c4a6:	bf00      	nop
  }

  return ret;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop

0800c4b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4ca:	2b40      	cmp	r3, #64	; 0x40
 800c4cc:	d005      	beq.n	800c4da <USBD_StdItfReq+0x26>
 800c4ce:	2b40      	cmp	r3, #64	; 0x40
 800c4d0:	d82e      	bhi.n	800c530 <USBD_StdItfReq+0x7c>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <USBD_StdItfReq+0x26>
 800c4d6:	2b20      	cmp	r3, #32
 800c4d8:	d12a      	bne.n	800c530 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d81d      	bhi.n	800c522 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	889b      	ldrh	r3, [r3, #4]
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d813      	bhi.n	800c518 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	88db      	ldrh	r3, [r3, #6]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d110      	bne.n	800c52c <USBD_StdItfReq+0x78>
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10d      	bne.n	800c52c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fd69 	bl	800cfe8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c516:	e009      	b.n	800c52c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fc99 	bl	800ce52 <USBD_CtlError>
      break;
 800c520:	e004      	b.n	800c52c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fc94 	bl	800ce52 <USBD_CtlError>
      break;
 800c52a:	e000      	b.n	800c52e <USBD_StdItfReq+0x7a>
      break;
 800c52c:	bf00      	nop
    }
    break;
 800c52e:	e004      	b.n	800c53a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fc8d 	bl	800ce52 <USBD_CtlError>
    break;
 800c538:	bf00      	nop
  }

  return ret;
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	889b      	ldrh	r3, [r3, #4]
 800c556:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c560:	2b40      	cmp	r3, #64	; 0x40
 800c562:	d007      	beq.n	800c574 <USBD_StdEPReq+0x30>
 800c564:	2b40      	cmp	r3, #64	; 0x40
 800c566:	f200 8140 	bhi.w	800c7ea <USBD_StdEPReq+0x2a6>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00c      	beq.n	800c588 <USBD_StdEPReq+0x44>
 800c56e:	2b20      	cmp	r3, #32
 800c570:	f040 813b 	bne.w	800c7ea <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]
    break;
 800c586:	e135      	b.n	800c7f4 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d007      	beq.n	800c5a0 <USBD_StdEPReq+0x5c>
 800c590:	2b03      	cmp	r3, #3
 800c592:	f300 8124 	bgt.w	800c7de <USBD_StdEPReq+0x29a>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d07b      	beq.n	800c692 <USBD_StdEPReq+0x14e>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d03b      	beq.n	800c616 <USBD_StdEPReq+0xd2>
 800c59e:	e11e      	b.n	800c7de <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d002      	beq.n	800c5b0 <USBD_StdEPReq+0x6c>
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d016      	beq.n	800c5dc <USBD_StdEPReq+0x98>
 800c5ae:	e02c      	b.n	800c60a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00d      	beq.n	800c5d2 <USBD_StdEPReq+0x8e>
 800c5b6:	7bbb      	ldrb	r3, [r7, #14]
 800c5b8:	2b80      	cmp	r3, #128	; 0x80
 800c5ba:	d00a      	beq.n	800c5d2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f004 faab 	bl	8010b1c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c6:	2180      	movs	r1, #128	; 0x80
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f004 faa7 	bl	8010b1c <USBD_LL_StallEP>
 800c5ce:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c5d0:	e020      	b.n	800c614 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fc3c 	bl	800ce52 <USBD_CtlError>
        break;
 800c5da:	e01b      	b.n	800c614 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	885b      	ldrh	r3, [r3, #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10e      	bne.n	800c602 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00b      	beq.n	800c602 <USBD_StdEPReq+0xbe>
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	2b80      	cmp	r3, #128	; 0x80
 800c5ee:	d008      	beq.n	800c602 <USBD_StdEPReq+0xbe>
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	88db      	ldrh	r3, [r3, #6]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f004 fa8d 	bl	8010b1c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fcf0 	bl	800cfe8 <USBD_CtlSendStatus>

        break;
 800c608:	e004      	b.n	800c614 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fc20 	bl	800ce52 <USBD_CtlError>
        break;
 800c612:	bf00      	nop
      }
      break;
 800c614:	e0e8      	b.n	800c7e8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d002      	beq.n	800c626 <USBD_StdEPReq+0xe2>
 800c620:	2b03      	cmp	r3, #3
 800c622:	d016      	beq.n	800c652 <USBD_StdEPReq+0x10e>
 800c624:	e02e      	b.n	800c684 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00d      	beq.n	800c648 <USBD_StdEPReq+0x104>
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b80      	cmp	r3, #128	; 0x80
 800c630:	d00a      	beq.n	800c648 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f004 fa70 	bl	8010b1c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c63c:	2180      	movs	r1, #128	; 0x80
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f004 fa6c 	bl	8010b1c <USBD_LL_StallEP>
 800c644:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c646:	e023      	b.n	800c690 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fc01 	bl	800ce52 <USBD_CtlError>
        break;
 800c650:	e01e      	b.n	800c690 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	885b      	ldrh	r3, [r3, #2]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d119      	bne.n	800c68e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f004 fa76 	bl	8010b5a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fcba 	bl	800cfe8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
        }
        break;
 800c682:	e004      	b.n	800c68e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fbe3 	bl	800ce52 <USBD_CtlError>
        break;
 800c68c:	e000      	b.n	800c690 <USBD_StdEPReq+0x14c>
        break;
 800c68e:	bf00      	nop
      }
      break;
 800c690:	e0aa      	b.n	800c7e8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d002      	beq.n	800c6a2 <USBD_StdEPReq+0x15e>
 800c69c:	2b03      	cmp	r3, #3
 800c69e:	d032      	beq.n	800c706 <USBD_StdEPReq+0x1c2>
 800c6a0:	e097      	b.n	800c7d2 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <USBD_StdEPReq+0x174>
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b80      	cmp	r3, #128	; 0x80
 800c6ac:	d004      	beq.n	800c6b8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fbce 	bl	800ce52 <USBD_CtlError>
          break;
 800c6b6:	e091      	b.n	800c7dc <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	da0b      	bge.n	800c6d8 <USBD_StdEPReq+0x194>
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	3310      	adds	r3, #16
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	e00b      	b.n	800c6f0 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
 800c6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fc18 	bl	800cf34 <USBD_CtlSendData>
        break;
 800c704:	e06a      	b.n	800c7dc <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	da11      	bge.n	800c732 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
 800c710:	f003 020f 	and.w	r2, r3, #15
 800c714:	6879      	ldr	r1, [r7, #4]
 800c716:	4613      	mov	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	440b      	add	r3, r1
 800c720:	3324      	adds	r3, #36	; 0x24
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d117      	bne.n	800c758 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fb91 	bl	800ce52 <USBD_CtlError>
            break;
 800c730:	e054      	b.n	800c7dc <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c732:	7bbb      	ldrb	r3, [r7, #14]
 800c734:	f003 020f 	and.w	r2, r3, #15
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fb7e 	bl	800ce52 <USBD_CtlError>
            break;
 800c756:	e041      	b.n	800c7dc <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	da0b      	bge.n	800c778 <USBD_StdEPReq+0x234>
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c766:	4613      	mov	r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	3310      	adds	r3, #16
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	4413      	add	r3, r2
 800c774:	3304      	adds	r3, #4
 800c776:	e00b      	b.n	800c790 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	3304      	adds	r3, #4
 800c790:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <USBD_StdEPReq+0x25a>
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b80      	cmp	r3, #128	; 0x80
 800c79c:	d103      	bne.n	800c7a6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	e00e      	b.n	800c7c4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f004 f9f4 	bl	8010b98 <USBD_LL_IsStallEP>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	e002      	b.n	800c7c4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fbb2 	bl	800cf34 <USBD_CtlSendData>
          break;
 800c7d0:	e004      	b.n	800c7dc <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fb3c 	bl	800ce52 <USBD_CtlError>
        break;
 800c7da:	bf00      	nop
      }
      break;
 800c7dc:	e004      	b.n	800c7e8 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fb36 	bl	800ce52 <USBD_CtlError>
      break;
 800c7e6:	bf00      	nop
    }
    break;
 800c7e8:	e004      	b.n	800c7f4 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fb30 	bl	800ce52 <USBD_CtlError>
    break;
 800c7f2:	bf00      	nop
  }

  return ret;
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	0a1b      	lsrs	r3, r3, #8
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	3b01      	subs	r3, #1
 800c820:	2b06      	cmp	r3, #6
 800c822:	f200 8128 	bhi.w	800ca76 <USBD_GetDescriptor+0x276>
 800c826:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <USBD_GetDescriptor+0x2c>)
 800c828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82c:	0800c849 	.word	0x0800c849
 800c830:	0800c861 	.word	0x0800c861
 800c834:	0800c8a1 	.word	0x0800c8a1
 800c838:	0800ca77 	.word	0x0800ca77
 800c83c:	0800ca77 	.word	0x0800ca77
 800c840:	0800ca17 	.word	0x0800ca17
 800c844:	0800ca43 	.word	0x0800ca43
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	7c12      	ldrb	r2, [r2, #16]
 800c854:	f107 0108 	add.w	r1, r7, #8
 800c858:	4610      	mov	r0, r2
 800c85a:	4798      	blx	r3
 800c85c:	60f8      	str	r0, [r7, #12]
    break;
 800c85e:	e112      	b.n	800ca86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7c1b      	ldrb	r3, [r3, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10d      	bne.n	800c884 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	f107 0208 	add.w	r2, r7, #8
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3301      	adds	r3, #1
 800c87e:	2202      	movs	r2, #2
 800c880:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c882:	e100      	b.n	800ca86 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	f107 0208 	add.w	r2, r7, #8
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
 800c894:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	2202      	movs	r2, #2
 800c89c:	701a      	strb	r2, [r3, #0]
    break;
 800c89e:	e0f2      	b.n	800ca86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	885b      	ldrh	r3, [r3, #2]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b05      	cmp	r3, #5
 800c8a8:	f200 80ac 	bhi.w	800ca04 <USBD_GetDescriptor+0x204>
 800c8ac:	a201      	add	r2, pc, #4	; (adr r2, 800c8b4 <USBD_GetDescriptor+0xb4>)
 800c8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b2:	bf00      	nop
 800c8b4:	0800c8cd 	.word	0x0800c8cd
 800c8b8:	0800c901 	.word	0x0800c901
 800c8bc:	0800c935 	.word	0x0800c935
 800c8c0:	0800c969 	.word	0x0800c969
 800c8c4:	0800c99d 	.word	0x0800c99d
 800c8c8:	0800c9d1 	.word	0x0800c9d1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	7c12      	ldrb	r2, [r2, #16]
 800c8e4:	f107 0108 	add.w	r1, r7, #8
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8ee:	e091      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 faad 	bl	800ce52 <USBD_CtlError>
        err++;
 800c8f8:	7afb      	ldrb	r3, [r7, #11]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	72fb      	strb	r3, [r7, #11]
      break;
 800c8fe:	e089      	b.n	800ca14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	7c12      	ldrb	r2, [r2, #16]
 800c918:	f107 0108 	add.w	r1, r7, #8
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c922:	e077      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fa93 	bl	800ce52 <USBD_CtlError>
        err++;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3301      	adds	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]
      break;
 800c932:	e06f      	b.n	800ca14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	7c12      	ldrb	r2, [r2, #16]
 800c94c:	f107 0108 	add.w	r1, r7, #8
 800c950:	4610      	mov	r0, r2
 800c952:	4798      	blx	r3
 800c954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c956:	e05d      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fa79 	bl	800ce52 <USBD_CtlError>
        err++;
 800c960:	7afb      	ldrb	r3, [r7, #11]
 800c962:	3301      	adds	r3, #1
 800c964:	72fb      	strb	r3, [r7, #11]
      break;
 800c966:	e055      	b.n	800ca14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00b      	beq.n	800c98c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	7c12      	ldrb	r2, [r2, #16]
 800c980:	f107 0108 	add.w	r1, r7, #8
 800c984:	4610      	mov	r0, r2
 800c986:	4798      	blx	r3
 800c988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c98a:	e043      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fa5f 	bl	800ce52 <USBD_CtlError>
        err++;
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	3301      	adds	r3, #1
 800c998:	72fb      	strb	r3, [r7, #11]
      break;
 800c99a:	e03b      	b.n	800ca14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00b      	beq.n	800c9c0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	7c12      	ldrb	r2, [r2, #16]
 800c9b4:	f107 0108 	add.w	r1, r7, #8
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	4798      	blx	r3
 800c9bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9be:	e029      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa45 	bl	800ce52 <USBD_CtlError>
        err++;
 800c9c8:	7afb      	ldrb	r3, [r7, #11]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	72fb      	strb	r3, [r7, #11]
      break;
 800c9ce:	e021      	b.n	800ca14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9d6:	699b      	ldr	r3, [r3, #24]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	7c12      	ldrb	r2, [r2, #16]
 800c9e8:	f107 0108 	add.w	r1, r7, #8
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	4798      	blx	r3
 800c9f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9f2:	e00f      	b.n	800ca14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa2b 	bl	800ce52 <USBD_CtlError>
        err++;
 800c9fc:	7afb      	ldrb	r3, [r7, #11]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	72fb      	strb	r3, [r7, #11]
      break;
 800ca02:	e007      	b.n	800ca14 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa23 	bl	800ce52 <USBD_CtlError>
      err++;
 800ca0c:	7afb      	ldrb	r3, [r7, #11]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ca12:	bf00      	nop
    }
    break;
 800ca14:	e037      	b.n	800ca86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7c1b      	ldrb	r3, [r3, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca26:	f107 0208 	add.w	r2, r7, #8
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	4798      	blx	r3
 800ca2e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ca30:	e029      	b.n	800ca86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa0c 	bl	800ce52 <USBD_CtlError>
      err++;
 800ca3a:	7afb      	ldrb	r3, [r7, #11]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	72fb      	strb	r3, [r7, #11]
    break;
 800ca40:	e021      	b.n	800ca86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7c1b      	ldrb	r3, [r3, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10d      	bne.n	800ca66 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca52:	f107 0208 	add.w	r2, r7, #8
 800ca56:	4610      	mov	r0, r2
 800ca58:	4798      	blx	r3
 800ca5a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	2207      	movs	r2, #7
 800ca62:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ca64:	e00f      	b.n	800ca86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f9f2 	bl	800ce52 <USBD_CtlError>
      err++;
 800ca6e:	7afb      	ldrb	r3, [r7, #11]
 800ca70:	3301      	adds	r3, #1
 800ca72:	72fb      	strb	r3, [r7, #11]
    break;
 800ca74:	e007      	b.n	800ca86 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f9ea 	bl	800ce52 <USBD_CtlError>
    err++;
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
 800ca80:	3301      	adds	r3, #1
 800ca82:	72fb      	strb	r3, [r7, #11]
    break;
 800ca84:	bf00      	nop
  }

  if (err != 0U)
 800ca86:	7afb      	ldrb	r3, [r7, #11]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d11e      	bne.n	800caca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	88db      	ldrh	r3, [r3, #6]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d016      	beq.n	800cac2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ca94:	893b      	ldrh	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00e      	beq.n	800cab8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	88da      	ldrh	r2, [r3, #6]
 800ca9e:	893b      	ldrh	r3, [r7, #8]
 800caa0:	4293      	cmp	r3, r2
 800caa2:	bf28      	it	cs
 800caa4:	4613      	movcs	r3, r2
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800caaa:	893b      	ldrh	r3, [r7, #8]
 800caac:	461a      	mov	r2, r3
 800caae:	68f9      	ldr	r1, [r7, #12]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fa3f 	bl	800cf34 <USBD_CtlSendData>
 800cab6:	e009      	b.n	800cacc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f9c9 	bl	800ce52 <USBD_CtlError>
 800cac0:	e004      	b.n	800cacc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa90 	bl	800cfe8 <USBD_CtlSendStatus>
 800cac8:	e000      	b.n	800cacc <USBD_GetDescriptor+0x2cc>
    return;
 800caca:	bf00      	nop
    }
  }
}
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop

0800cad4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	889b      	ldrh	r3, [r3, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d130      	bne.n	800cb48 <USBD_SetAddress+0x74>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	88db      	ldrh	r3, [r3, #6]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d12c      	bne.n	800cb48 <USBD_SetAddress+0x74>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	885b      	ldrh	r3, [r3, #2]
 800caf2:	2b7f      	cmp	r3, #127	; 0x7f
 800caf4:	d828      	bhi.n	800cb48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	885b      	ldrh	r3, [r3, #2]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d104      	bne.n	800cb16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f99f 	bl	800ce52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb14:	e01d      	b.n	800cb52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7bfa      	ldrb	r2, [r7, #15]
 800cb1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb1e:	7bfb      	ldrb	r3, [r7, #15]
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f004 f864 	bl	8010bf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fa5d 	bl	800cfe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2202      	movs	r2, #2
 800cb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb3c:	e009      	b.n	800cb52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2201      	movs	r2, #1
 800cb42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb46:	e004      	b.n	800cb52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f981 	bl	800ce52 <USBD_CtlError>
  }
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	885b      	ldrh	r3, [r3, #2]
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	4b4b      	ldr	r3, [pc, #300]	; (800cca0 <USBD_SetConfig+0x144>)
 800cb72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb74:	4b4a      	ldr	r3, [pc, #296]	; (800cca0 <USBD_SetConfig+0x144>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d905      	bls.n	800cb88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f967 	bl	800ce52 <USBD_CtlError>
    return USBD_FAIL;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e087      	b.n	800cc98 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d002      	beq.n	800cb98 <USBD_SetConfig+0x3c>
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d025      	beq.n	800cbe2 <USBD_SetConfig+0x86>
 800cb96:	e071      	b.n	800cc7c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cb98:	4b41      	ldr	r3, [pc, #260]	; (800cca0 <USBD_SetConfig+0x144>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01c      	beq.n	800cbda <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cba0:	4b3f      	ldr	r3, [pc, #252]	; (800cca0 <USBD_SetConfig+0x144>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbaa:	4b3d      	ldr	r3, [pc, #244]	; (800cca0 <USBD_SetConfig+0x144>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff f999 	bl	800bee8 <USBD_SetClassConfig>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f945 	bl	800ce52 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cbc8:	e065      	b.n	800cc96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fa0c 	bl	800cfe8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cbd8:	e05d      	b.n	800cc96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa04 	bl	800cfe8 <USBD_CtlSendStatus>
    break;
 800cbe0:	e059      	b.n	800cc96 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cbe2:	4b2f      	ldr	r3, [pc, #188]	; (800cca0 <USBD_SetConfig+0x144>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d112      	bne.n	800cc10 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2202      	movs	r2, #2
 800cbee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cbf2:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <USBD_SetConfig+0x144>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbfc:	4b28      	ldr	r3, [pc, #160]	; (800cca0 <USBD_SetConfig+0x144>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff f98c 	bl	800bf20 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f9ed 	bl	800cfe8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cc0e:	e042      	b.n	800cc96 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cc10:	4b23      	ldr	r3, [pc, #140]	; (800cca0 <USBD_SetConfig+0x144>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	461a      	mov	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d02a      	beq.n	800cc74 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff f97a 	bl	800bf20 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cc2c:	4b1c      	ldr	r3, [pc, #112]	; (800cca0 <USBD_SetConfig+0x144>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	461a      	mov	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc36:	4b1a      	ldr	r3, [pc, #104]	; (800cca0 <USBD_SetConfig+0x144>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff f953 	bl	800bee8 <USBD_SetClassConfig>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00f      	beq.n	800cc6c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f8ff 	bl	800ce52 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff f95f 	bl	800bf20 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2202      	movs	r2, #2
 800cc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cc6a:	e014      	b.n	800cc96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f9bb 	bl	800cfe8 <USBD_CtlSendStatus>
    break;
 800cc72:	e010      	b.n	800cc96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f9b7 	bl	800cfe8 <USBD_CtlSendStatus>
    break;
 800cc7a:	e00c      	b.n	800cc96 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f8e7 	bl	800ce52 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc84:	4b06      	ldr	r3, [pc, #24]	; (800cca0 <USBD_SetConfig+0x144>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff f948 	bl	800bf20 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cc90:	2303      	movs	r3, #3
 800cc92:	73fb      	strb	r3, [r7, #15]
    break;
 800cc94:	bf00      	nop
  }

  return ret;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200005e1 	.word	0x200005e1

0800cca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	88db      	ldrh	r3, [r3, #6]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d004      	beq.n	800ccc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 f8ca 	bl	800ce52 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ccbe:	e022      	b.n	800cd06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	dc02      	bgt.n	800ccd0 <USBD_GetConfig+0x2c>
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dc03      	bgt.n	800ccd6 <USBD_GetConfig+0x32>
 800ccce:	e015      	b.n	800ccfc <USBD_GetConfig+0x58>
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d00b      	beq.n	800ccec <USBD_GetConfig+0x48>
 800ccd4:	e012      	b.n	800ccfc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3308      	adds	r3, #8
 800cce0:	2201      	movs	r2, #1
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f925 	bl	800cf34 <USBD_CtlSendData>
      break;
 800ccea:	e00c      	b.n	800cd06 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f91d 	bl	800cf34 <USBD_CtlSendData>
      break;
 800ccfa:	e004      	b.n	800cd06 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f8a7 	bl	800ce52 <USBD_CtlError>
      break;
 800cd04:	bf00      	nop
}
 800cd06:	bf00      	nop
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d81e      	bhi.n	800cd62 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	88db      	ldrh	r3, [r3, #6]
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d004      	beq.n	800cd36 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f88f 	bl	800ce52 <USBD_CtlError>
      break;
 800cd34:	e01a      	b.n	800cd6c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d005      	beq.n	800cd52 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f043 0202 	orr.w	r2, r3, #2
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	330c      	adds	r3, #12
 800cd56:	2202      	movs	r2, #2
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f8ea 	bl	800cf34 <USBD_CtlSendData>
    break;
 800cd60:	e004      	b.n	800cd6c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f874 	bl	800ce52 <USBD_CtlError>
    break;
 800cd6a:	bf00      	nop
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	885b      	ldrh	r3, [r3, #2]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d106      	bne.n	800cd94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f92a 	bl	800cfe8 <USBD_CtlSendStatus>
  }
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdac:	3b01      	subs	r3, #1
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d80b      	bhi.n	800cdca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	885b      	ldrh	r3, [r3, #2]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d10c      	bne.n	800cdd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f910 	bl	800cfe8 <USBD_CtlSendStatus>
      }
      break;
 800cdc8:	e004      	b.n	800cdd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f840 	bl	800ce52 <USBD_CtlError>
      break;
 800cdd2:	e000      	b.n	800cdd6 <USBD_ClrFeature+0x3a>
      break;
 800cdd4:	bf00      	nop
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	3301      	adds	r3, #1
 800ce06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7ff fac6 	bl	800c39a <SWAPBYTE>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	461a      	mov	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f7ff fab9 	bl	800c39a <SWAPBYTE>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f7ff faac 	bl	800c39a <SWAPBYTE>
 800ce42:	4603      	mov	r3, r0
 800ce44:	461a      	mov	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	80da      	strh	r2, [r3, #6]
}
 800ce4a:	bf00      	nop
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce5c:	2180      	movs	r1, #128	; 0x80
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f003 fe5c 	bl	8010b1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce64:	2100      	movs	r1, #0
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f003 fe58 	bl	8010b1c <USBD_LL_StallEP>
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce80:	2300      	movs	r3, #0
 800ce82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d036      	beq.n	800cef8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce8e:	6938      	ldr	r0, [r7, #16]
 800ce90:	f000 f836 	bl	800cf00 <USBD_GetLen>
 800ce94:	4603      	mov	r3, r0
 800ce96:	3301      	adds	r3, #1
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	4413      	add	r3, r2
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	7812      	ldrb	r2, [r2, #0]
 800ceac:	701a      	strb	r2, [r3, #0]
  idx++;
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	4413      	add	r3, r2
 800ceba:	2203      	movs	r2, #3
 800cebc:	701a      	strb	r2, [r3, #0]
  idx++;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	3301      	adds	r3, #1
 800cec2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cec4:	e013      	b.n	800ceee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	4413      	add	r3, r2
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	7812      	ldrb	r2, [r2, #0]
 800ced0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	3301      	adds	r3, #1
 800ced6:	613b      	str	r3, [r7, #16]
    idx++;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	3301      	adds	r3, #1
 800cedc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	4413      	add	r3, r2
 800cee4:	2200      	movs	r2, #0
 800cee6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	3301      	adds	r3, #1
 800ceec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1e7      	bne.n	800cec6 <USBD_GetString+0x52>
 800cef6:	e000      	b.n	800cefa <USBD_GetString+0x86>
    return;
 800cef8:	bf00      	nop
  }
}
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf10:	e005      	b.n	800cf1e <USBD_GetLen+0x1e>
  {
    len++;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	3301      	adds	r3, #1
 800cf16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f5      	bne.n	800cf12 <USBD_GetLen+0x12>
  }

  return len;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	2100      	movs	r1, #0
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f003 fe67 	bl	8010c2e <USBD_LL_Transmit>

  return USBD_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b084      	sub	sp, #16
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f003 fe56 	bl	8010c2e <USBD_LL_Transmit>

  return USBD_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2203      	movs	r2, #3
 800cf9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f003 fe5a 	bl	8010c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f003 fe49 	bl	8010c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2204      	movs	r2, #4
 800cff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cff8:	2300      	movs	r3, #0
 800cffa:	2200      	movs	r2, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f003 fe15 	bl	8010c2e <USBD_LL_Transmit>

  return USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2205      	movs	r2, #5
 800d01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d01e:	2300      	movs	r3, #0
 800d020:	2200      	movs	r2, #0
 800d022:	2100      	movs	r1, #0
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f003 fe23 	bl	8010c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d038:	bf00      	nop
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
	...

0800d044 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d04a:	f3ef 8305 	mrs	r3, IPSR
 800d04e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d050:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10f      	bne.n	800d076 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d056:	f3ef 8310 	mrs	r3, PRIMASK
 800d05a:	607b      	str	r3, [r7, #4]
  return(result);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d062:	f3ef 8311 	mrs	r3, BASEPRI
 800d066:	603b      	str	r3, [r7, #0]
  return(result);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d007      	beq.n	800d07e <osKernelInitialize+0x3a>
 800d06e:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <osKernelInitialize+0x64>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b02      	cmp	r3, #2
 800d074:	d103      	bne.n	800d07e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d076:	f06f 0305 	mvn.w	r3, #5
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	e00c      	b.n	800d098 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d07e:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <osKernelInitialize+0x64>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d105      	bne.n	800d092 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d086:	4b08      	ldr	r3, [pc, #32]	; (800d0a8 <osKernelInitialize+0x64>)
 800d088:	2201      	movs	r2, #1
 800d08a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e002      	b.n	800d098 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d092:	f04f 33ff 	mov.w	r3, #4294967295
 800d096:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d098:	68fb      	ldr	r3, [r7, #12]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	200005e4 	.word	0x200005e4

0800d0ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0b2:	f3ef 8305 	mrs	r3, IPSR
 800d0b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10f      	bne.n	800d0de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0be:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c2:	607b      	str	r3, [r7, #4]
  return(result);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d105      	bne.n	800d0d6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ce:	603b      	str	r3, [r7, #0]
  return(result);
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d007      	beq.n	800d0e6 <osKernelStart+0x3a>
 800d0d6:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <osKernelStart+0x68>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d103      	bne.n	800d0e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d0de:	f06f 0305 	mvn.w	r3, #5
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	e010      	b.n	800d108 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <osKernelStart+0x68>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d109      	bne.n	800d102 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d0ee:	f7ff ffa1 	bl	800d034 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d0f2:	4b08      	ldr	r3, [pc, #32]	; (800d114 <osKernelStart+0x68>)
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d0f8:	f001 fb6c 	bl	800e7d4 <vTaskStartScheduler>
      stat = osOK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	e002      	b.n	800d108 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d102:	f04f 33ff 	mov.w	r3, #4294967295
 800d106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d108:	68fb      	ldr	r3, [r7, #12]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	200005e4 	.word	0x200005e4

0800d118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d118:	b580      	push	{r7, lr}
 800d11a:	b090      	sub	sp, #64	; 0x40
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d124:	2300      	movs	r3, #0
 800d126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d128:	f3ef 8305 	mrs	r3, IPSR
 800d12c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d12e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d130:	2b00      	cmp	r3, #0
 800d132:	f040 808f 	bne.w	800d254 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d136:	f3ef 8310 	mrs	r3, PRIMASK
 800d13a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d105      	bne.n	800d14e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d142:	f3ef 8311 	mrs	r3, BASEPRI
 800d146:	617b      	str	r3, [r7, #20]
  return(result);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <osThreadNew+0x3e>
 800d14e:	4b44      	ldr	r3, [pc, #272]	; (800d260 <osThreadNew+0x148>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d07e      	beq.n	800d254 <osThreadNew+0x13c>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d07b      	beq.n	800d254 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d15c:	2380      	movs	r3, #128	; 0x80
 800d15e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d160:	2318      	movs	r3, #24
 800d162:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d164:	2300      	movs	r3, #0
 800d166:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d168:	f04f 33ff 	mov.w	r3, #4294967295
 800d16c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d045      	beq.n	800d200 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <osThreadNew+0x6a>
        name = attr->name;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	2b00      	cmp	r3, #0
 800d194:	d008      	beq.n	800d1a8 <osThreadNew+0x90>
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	2b38      	cmp	r3, #56	; 0x38
 800d19a:	d805      	bhi.n	800d1a8 <osThreadNew+0x90>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	f003 0301 	and.w	r3, r3, #1
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <osThreadNew+0x94>
        return (NULL);
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e054      	b.n	800d256 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	695b      	ldr	r3, [r3, #20]
 800d1b8:	089b      	lsrs	r3, r3, #2
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00e      	beq.n	800d1e2 <osThreadNew+0xca>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	2bbb      	cmp	r3, #187	; 0xbb
 800d1ca:	d90a      	bls.n	800d1e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d006      	beq.n	800d1e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <osThreadNew+0xca>
        mem = 1;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	623b      	str	r3, [r7, #32]
 800d1e0:	e010      	b.n	800d204 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10c      	bne.n	800d204 <osThreadNew+0xec>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d108      	bne.n	800d204 <osThreadNew+0xec>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d104      	bne.n	800d204 <osThreadNew+0xec>
          mem = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	623b      	str	r3, [r7, #32]
 800d1fe:	e001      	b.n	800d204 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d110      	bne.n	800d22c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d212:	9202      	str	r2, [sp, #8]
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f001 f879 	bl	800e318 <xTaskCreateStatic>
 800d226:	4603      	mov	r3, r0
 800d228:	613b      	str	r3, [r7, #16]
 800d22a:	e013      	b.n	800d254 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d110      	bne.n	800d254 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	b29a      	uxth	r2, r3
 800d236:	f107 0310 	add.w	r3, r7, #16
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f001 f8c4 	bl	800e3d2 <xTaskCreate>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d001      	beq.n	800d254 <osThreadNew+0x13c>
          hTask = NULL;
 800d250:	2300      	movs	r3, #0
 800d252:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d254:	693b      	ldr	r3, [r7, #16]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3730      	adds	r7, #48	; 0x30
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	200005e4 	.word	0x200005e4

0800d264 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800d26a:	f001 ff0f 	bl	800f08c <xTaskGetCurrentTaskHandle>
 800d26e:	6078      	str	r0, [r7, #4]

  return (id);
 800d270:	687b      	ldr	r3, [r7, #4]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800d27a:	b580      	push	{r7, lr}
 800d27c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d27e:	2000      	movs	r0, #0
 800d280:	f001 fa02 	bl	800e688 <vTaskDelete>
#endif
  for (;;);
 800d284:	e7fe      	b.n	800d284 <osThreadExit+0xa>
	...

0800d288 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d290:	f3ef 8305 	mrs	r3, IPSR
 800d294:	613b      	str	r3, [r7, #16]
  return(result);
 800d296:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10f      	bne.n	800d2bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d29c:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d2ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d007      	beq.n	800d2c4 <osDelay+0x3c>
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <osDelay+0x58>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d103      	bne.n	800d2c4 <osDelay+0x3c>
    stat = osErrorISR;
 800d2bc:	f06f 0305 	mvn.w	r3, #5
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	e007      	b.n	800d2d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 fa4c 	bl	800e76c <vTaskDelay>
    }
  }

  return (stat);
 800d2d4:	697b      	ldr	r3, [r7, #20]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	200005e4 	.word	0x200005e4

0800d2e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08a      	sub	sp, #40	; 0x28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2f0:	f3ef 8305 	mrs	r3, IPSR
 800d2f4:	613b      	str	r3, [r7, #16]
  return(result);
 800d2f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f040 8085 	bne.w	800d408 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d302:	60fb      	str	r3, [r7, #12]
  return(result);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d30a:	f3ef 8311 	mrs	r3, BASEPRI
 800d30e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <osMutexNew+0x3a>
 800d316:	4b3f      	ldr	r3, [pc, #252]	; (800d414 <osMutexNew+0x130>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d074      	beq.n	800d408 <osMutexNew+0x124>
    if (attr != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <osMutexNew+0x48>
      type = attr->attr_bits;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	623b      	str	r3, [r7, #32]
 800d32a:	e001      	b.n	800d330 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	2b00      	cmp	r3, #0
 800d338:	d002      	beq.n	800d340 <osMutexNew+0x5c>
      rmtx = 1U;
 800d33a:	2301      	movs	r3, #1
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	e001      	b.n	800d344 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d340:	2300      	movs	r3, #0
 800d342:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d15c      	bne.n	800d408 <osMutexNew+0x124>
      mem = -1;
 800d34e:	f04f 33ff 	mov.w	r3, #4294967295
 800d352:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d015      	beq.n	800d386 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d006      	beq.n	800d370 <osMutexNew+0x8c>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b4f      	cmp	r3, #79	; 0x4f
 800d368:	d902      	bls.n	800d370 <osMutexNew+0x8c>
          mem = 1;
 800d36a:	2301      	movs	r3, #1
 800d36c:	61bb      	str	r3, [r7, #24]
 800d36e:	e00c      	b.n	800d38a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d108      	bne.n	800d38a <osMutexNew+0xa6>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d104      	bne.n	800d38a <osMutexNew+0xa6>
            mem = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	61bb      	str	r3, [r7, #24]
 800d384:	e001      	b.n	800d38a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d112      	bne.n	800d3b6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	4619      	mov	r1, r3
 800d39c:	2004      	movs	r0, #4
 800d39e:	f000 fa98 	bl	800d8d2 <xQueueCreateMutexStatic>
 800d3a2:	6278      	str	r0, [r7, #36]	; 0x24
 800d3a4:	e016      	b.n	800d3d4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	f000 fa90 	bl	800d8d2 <xQueueCreateMutexStatic>
 800d3b2:	6278      	str	r0, [r7, #36]	; 0x24
 800d3b4:	e00e      	b.n	800d3d4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d3c2:	2004      	movs	r0, #4
 800d3c4:	f000 fa6d 	bl	800d8a2 <xQueueCreateMutex>
 800d3c8:	6278      	str	r0, [r7, #36]	; 0x24
 800d3ca:	e003      	b.n	800d3d4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	f000 fa68 	bl	800d8a2 <xQueueCreateMutex>
 800d3d2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00c      	beq.n	800d3f4 <osMutexNew+0x110>
        if (attr != NULL) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d003      	beq.n	800d3e8 <osMutexNew+0x104>
          name = attr->name;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	e001      	b.n	800d3ec <osMutexNew+0x108>
        } else {
          name = NULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d3ec:	6979      	ldr	r1, [r7, #20]
 800d3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3f0:	f000 ff34 	bl	800e25c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d006      	beq.n	800d408 <osMutexNew+0x124>
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	f043 0301 	orr.w	r3, r3, #1
 800d406:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3728      	adds	r7, #40	; 0x28
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	200005e4 	.word	0x200005e4

0800d418 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4a07      	ldr	r2, [pc, #28]	; (800d444 <vApplicationGetIdleTaskMemory+0x2c>)
 800d428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	4a06      	ldr	r2, [pc, #24]	; (800d448 <vApplicationGetIdleTaskMemory+0x30>)
 800d42e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2280      	movs	r2, #128	; 0x80
 800d434:	601a      	str	r2, [r3, #0]
}
 800d436:	bf00      	nop
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	200005e8 	.word	0x200005e8
 800d448:	200006a4 	.word	0x200006a4

0800d44c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	4a07      	ldr	r2, [pc, #28]	; (800d478 <vApplicationGetTimerTaskMemory+0x2c>)
 800d45c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	4a06      	ldr	r2, [pc, #24]	; (800d47c <vApplicationGetTimerTaskMemory+0x30>)
 800d462:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d46a:	601a      	str	r2, [r3, #0]
}
 800d46c:	bf00      	nop
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	200008a4 	.word	0x200008a4
 800d47c:	20000960 	.word	0x20000960

0800d480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f103 0208 	add.w	r2, r3, #8
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f04f 32ff 	mov.w	r2, #4294967295
 800d498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f103 0208 	add.w	r2, r3, #8
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f103 0208 	add.w	r2, r3, #8
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4ce:	bf00      	nop
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b085      	sub	sp, #20
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	689a      	ldr	r2, [r3, #8]
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
}
 800d516:	bf00      	nop
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d522:	b480      	push	{r7}
 800d524:	b085      	sub	sp, #20
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d538:	d103      	bne.n	800d542 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	e00c      	b.n	800d55c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3308      	adds	r3, #8
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e002      	b.n	800d550 <vListInsert+0x2e>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d2f6      	bcs.n	800d54a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]
}
 800d588:	bf00      	nop
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	6892      	ldr	r2, [r2, #8]
 800d5aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	6852      	ldr	r2, [r2, #4]
 800d5b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d103      	bne.n	800d5c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	689a      	ldr	r2, [r3, #8]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	1e5a      	subs	r2, r3, #1
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10a      	bne.n	800d612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d612:	f002 fba7 	bl	800fd64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d622:	fb01 f303 	mul.w	r3, r1, r3
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d642:	3b01      	subs	r3, #1
 800d644:	68f9      	ldr	r1, [r7, #12]
 800d646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d648:	fb01 f303 	mul.w	r3, r1, r3
 800d64c:	441a      	add	r2, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	22ff      	movs	r2, #255	; 0xff
 800d656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	22ff      	movs	r2, #255	; 0xff
 800d65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d114      	bne.n	800d692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d01a      	beq.n	800d6a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	3310      	adds	r3, #16
 800d674:	4618      	mov	r0, r3
 800d676:	f001 fb47 	bl	800ed08 <xTaskRemoveFromEventList>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d012      	beq.n	800d6a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d680:	4b0c      	ldr	r3, [pc, #48]	; (800d6b4 <xQueueGenericReset+0xcc>)
 800d682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	e009      	b.n	800d6a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	3310      	adds	r3, #16
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fef2 	bl	800d480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3324      	adds	r3, #36	; 0x24
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff feed 	bl	800d480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6a6:	f002 fb8d 	bl	800fdc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6aa:	2301      	movs	r3, #1
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	e000ed04 	.word	0xe000ed04

0800d6b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08e      	sub	sp, #56	; 0x38
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d002      	beq.n	800d70a <xQueueGenericCreateStatic+0x52>
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <xQueueGenericCreateStatic+0x56>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e000      	b.n	800d710 <xQueueGenericCreateStatic+0x58>
 800d70e:	2300      	movs	r3, #0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	623b      	str	r3, [r7, #32]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <xQueueGenericCreateStatic+0x7e>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <xQueueGenericCreateStatic+0x82>
 800d736:	2301      	movs	r3, #1
 800d738:	e000      	b.n	800d73c <xQueueGenericCreateStatic+0x84>
 800d73a:	2300      	movs	r3, #0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10a      	bne.n	800d756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	61fb      	str	r3, [r7, #28]
}
 800d752:	bf00      	nop
 800d754:	e7fe      	b.n	800d754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d756:	2350      	movs	r3, #80	; 0x50
 800d758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b50      	cmp	r3, #80	; 0x50
 800d75e:	d00a      	beq.n	800d776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	61bb      	str	r3, [r7, #24]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d776:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00d      	beq.n	800d79e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	2201      	movs	r2, #1
 800d786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d78a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	4613      	mov	r3, r2
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 f845 	bl	800d828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3730      	adds	r7, #48	; 0x30
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08a      	sub	sp, #40	; 0x28
 800d7ac:	af02      	add	r7, sp, #8
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	613b      	str	r3, [r7, #16]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61fb      	str	r3, [r7, #28]
 800d7dc:	e004      	b.n	800d7e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	fb02 f303 	mul.w	r3, r2, r3
 800d7e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	3350      	adds	r3, #80	; 0x50
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f002 fbdb 	bl	800ffa8 <pvPortMalloc>
 800d7f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d011      	beq.n	800d81e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	3350      	adds	r3, #80	; 0x50
 800d802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d80c:	79fa      	ldrb	r2, [r7, #7]
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	4613      	mov	r3, r2
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	68b9      	ldr	r1, [r7, #8]
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f000 f805 	bl	800d828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d81e:	69bb      	ldr	r3, [r7, #24]
	}
 800d820:	4618      	mov	r0, r3
 800d822:	3720      	adds	r7, #32
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
 800d834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d103      	bne.n	800d844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	69ba      	ldr	r2, [r7, #24]
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	e002      	b.n	800d84a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d856:	2101      	movs	r1, #1
 800d858:	69b8      	ldr	r0, [r7, #24]
 800d85a:	f7ff fec5 	bl	800d5e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	78fa      	ldrb	r2, [r7, #3]
 800d862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00e      	beq.n	800d89a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d88e:	2300      	movs	r3, #0
 800d890:	2200      	movs	r2, #0
 800d892:	2100      	movs	r1, #0
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f837 	bl	800d908 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d89a:	bf00      	nop
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b086      	sub	sp, #24
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6939      	ldr	r1, [r7, #16]
 800d8ba:	6978      	ldr	r0, [r7, #20]
 800d8bc:	f7ff ff74 	bl	800d7a8 <xQueueGenericCreate>
 800d8c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7ff ffd3 	bl	800d86e <prvInitialiseMutex>

		return xNewQueue;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b088      	sub	sp, #32
 800d8d6:	af02      	add	r7, sp, #8
 800d8d8:	4603      	mov	r3, r0
 800d8da:	6039      	str	r1, [r7, #0]
 800d8dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	6939      	ldr	r1, [r7, #16]
 800d8f0:	6978      	ldr	r0, [r7, #20]
 800d8f2:	f7ff fee1 	bl	800d6b8 <xQueueGenericCreateStatic>
 800d8f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f7ff ffb8 	bl	800d86e <prvInitialiseMutex>

		return xNewQueue;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08e      	sub	sp, #56	; 0x38
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d916:	2300      	movs	r3, #0
 800d918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <xQueueGenericSend+0x32>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d103      	bne.n	800d948 <xQueueGenericSend+0x40>
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <xQueueGenericSend+0x44>
 800d948:	2301      	movs	r3, #1
 800d94a:	e000      	b.n	800d94e <xQueueGenericSend+0x46>
 800d94c:	2300      	movs	r3, #0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10a      	bne.n	800d968 <xQueueGenericSend+0x60>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d103      	bne.n	800d976 <xQueueGenericSend+0x6e>
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <xQueueGenericSend+0x72>
 800d976:	2301      	movs	r3, #1
 800d978:	e000      	b.n	800d97c <xQueueGenericSend+0x74>
 800d97a:	2300      	movs	r3, #0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10a      	bne.n	800d996 <xQueueGenericSend+0x8e>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	623b      	str	r3, [r7, #32]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d996:	f001 fb89 	bl	800f0ac <xTaskGetSchedulerState>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <xQueueGenericSend+0x9e>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <xQueueGenericSend+0xa2>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e000      	b.n	800d9ac <xQueueGenericSend+0xa4>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10a      	bne.n	800d9c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	61fb      	str	r3, [r7, #28]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9c6:	f002 f9cd 	bl	800fd64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d302      	bcc.n	800d9dc <xQueueGenericSend+0xd4>
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d129      	bne.n	800da30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	68b9      	ldr	r1, [r7, #8]
 800d9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9e2:	f000 fb2b 	bl	800e03c <prvCopyDataToQueue>
 800d9e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d010      	beq.n	800da12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	3324      	adds	r3, #36	; 0x24
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f001 f987 	bl	800ed08 <xTaskRemoveFromEventList>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d013      	beq.n	800da28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da00:	4b3f      	ldr	r3, [pc, #252]	; (800db00 <xQueueGenericSend+0x1f8>)
 800da02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	e00a      	b.n	800da28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da18:	4b39      	ldr	r3, [pc, #228]	; (800db00 <xQueueGenericSend+0x1f8>)
 800da1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da1e:	601a      	str	r2, [r3, #0]
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da28:	f002 f9cc 	bl	800fdc4 <vPortExitCritical>
				return pdPASS;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e063      	b.n	800daf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d103      	bne.n	800da3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da36:	f002 f9c5 	bl	800fdc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e05c      	b.n	800daf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	4618      	mov	r0, r3
 800da4a:	f001 f9c1 	bl	800edd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da4e:	2301      	movs	r3, #1
 800da50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da52:	f002 f9b7 	bl	800fdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da56:	f000 ff2d 	bl	800e8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da5a:	f002 f983 	bl	800fd64 <vPortEnterCritical>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da64:	b25b      	sxtb	r3, r3
 800da66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6a:	d103      	bne.n	800da74 <xQueueGenericSend+0x16c>
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da7a:	b25b      	sxtb	r3, r3
 800da7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da80:	d103      	bne.n	800da8a <xQueueGenericSend+0x182>
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da8a:	f002 f99b 	bl	800fdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da8e:	1d3a      	adds	r2, r7, #4
 800da90:	f107 0314 	add.w	r3, r7, #20
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f001 f9b0 	bl	800edfc <xTaskCheckForTimeOut>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d124      	bne.n	800daec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800daa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daa4:	f000 fbc2 	bl	800e22c <prvIsQueueFull>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d018      	beq.n	800dae0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	3310      	adds	r3, #16
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f001 f8d6 	bl	800ec68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dabc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dabe:	f000 fb4d 	bl	800e15c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dac2:	f000 ff05 	bl	800e8d0 <xTaskResumeAll>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f47f af7c 	bne.w	800d9c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dace:	4b0c      	ldr	r3, [pc, #48]	; (800db00 <xQueueGenericSend+0x1f8>)
 800dad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	e772      	b.n	800d9c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dae2:	f000 fb3b 	bl	800e15c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dae6:	f000 fef3 	bl	800e8d0 <xTaskResumeAll>
 800daea:	e76c      	b.n	800d9c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800daec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daee:	f000 fb35 	bl	800e15c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daf2:	f000 feed 	bl	800e8d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800daf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3738      	adds	r7, #56	; 0x38
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	e000ed04 	.word	0xe000ed04

0800db04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b08e      	sub	sp, #56	; 0x38
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
 800db10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10a      	bne.n	800db32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db2e:	bf00      	nop
 800db30:	e7fe      	b.n	800db30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <xQueueGenericSendFromISR+0x3c>
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <xQueueGenericSendFromISR+0x40>
 800db40:	2301      	movs	r3, #1
 800db42:	e000      	b.n	800db46 <xQueueGenericSendFromISR+0x42>
 800db44:	2300      	movs	r3, #0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	623b      	str	r3, [r7, #32]
}
 800db5c:	bf00      	nop
 800db5e:	e7fe      	b.n	800db5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b02      	cmp	r3, #2
 800db64:	d103      	bne.n	800db6e <xQueueGenericSendFromISR+0x6a>
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d101      	bne.n	800db72 <xQueueGenericSendFromISR+0x6e>
 800db6e:	2301      	movs	r3, #1
 800db70:	e000      	b.n	800db74 <xQueueGenericSendFromISR+0x70>
 800db72:	2300      	movs	r3, #0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	61fb      	str	r3, [r7, #28]
}
 800db8a:	bf00      	nop
 800db8c:	e7fe      	b.n	800db8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db8e:	f002 f9cb 	bl	800ff28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db92:	f3ef 8211 	mrs	r2, BASEPRI
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	61ba      	str	r2, [r7, #24]
 800dba8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbaa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d302      	bcc.n	800dbc0 <xQueueGenericSendFromISR+0xbc>
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d12c      	bne.n	800dc1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	68b9      	ldr	r1, [r7, #8]
 800dbce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbd0:	f000 fa34 	bl	800e03c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbdc:	d112      	bne.n	800dc04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d016      	beq.n	800dc14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	3324      	adds	r3, #36	; 0x24
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 f88c 	bl	800ed08 <xTaskRemoveFromEventList>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00e      	beq.n	800dc14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00b      	beq.n	800dc14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	e007      	b.n	800dc14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc08:	3301      	adds	r3, #1
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	b25a      	sxtb	r2, r3
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc14:	2301      	movs	r3, #1
 800dc16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dc18:	e001      	b.n	800dc1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3738      	adds	r7, #56	; 0x38
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08c      	sub	sp, #48	; 0x30
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc40:	2300      	movs	r3, #0
 800dc42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10a      	bne.n	800dc64 <xQueueReceive+0x30>
	__asm volatile
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	623b      	str	r3, [r7, #32]
}
 800dc60:	bf00      	nop
 800dc62:	e7fe      	b.n	800dc62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d103      	bne.n	800dc72 <xQueueReceive+0x3e>
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <xQueueReceive+0x42>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e000      	b.n	800dc78 <xQueueReceive+0x44>
 800dc76:	2300      	movs	r3, #0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10a      	bne.n	800dc92 <xQueueReceive+0x5e>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	61fb      	str	r3, [r7, #28]
}
 800dc8e:	bf00      	nop
 800dc90:	e7fe      	b.n	800dc90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc92:	f001 fa0b 	bl	800f0ac <xTaskGetSchedulerState>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d102      	bne.n	800dca2 <xQueueReceive+0x6e>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <xQueueReceive+0x72>
 800dca2:	2301      	movs	r3, #1
 800dca4:	e000      	b.n	800dca8 <xQueueReceive+0x74>
 800dca6:	2300      	movs	r3, #0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10a      	bne.n	800dcc2 <xQueueReceive+0x8e>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	61bb      	str	r3, [r7, #24]
}
 800dcbe:	bf00      	nop
 800dcc0:	e7fe      	b.n	800dcc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcc2:	f002 f84f 	bl	800fd64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d01f      	beq.n	800dd12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcd2:	68b9      	ldr	r1, [r7, #8]
 800dcd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd6:	f000 fa1b 	bl	800e110 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	1e5a      	subs	r2, r3, #1
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d00f      	beq.n	800dd0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	3310      	adds	r3, #16
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f001 f80a 	bl	800ed08 <xTaskRemoveFromEventList>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d007      	beq.n	800dd0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcfa:	4b3d      	ldr	r3, [pc, #244]	; (800ddf0 <xQueueReceive+0x1bc>)
 800dcfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd0a:	f002 f85b 	bl	800fdc4 <vPortExitCritical>
				return pdPASS;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e069      	b.n	800dde6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd18:	f002 f854 	bl	800fdc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	e062      	b.n	800dde6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d106      	bne.n	800dd34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd26:	f107 0310 	add.w	r3, r7, #16
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 f850 	bl	800edd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd30:	2301      	movs	r3, #1
 800dd32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd34:	f002 f846 	bl	800fdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd38:	f000 fdbc 	bl	800e8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd3c:	f002 f812 	bl	800fd64 <vPortEnterCritical>
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd46:	b25b      	sxtb	r3, r3
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d103      	bne.n	800dd56 <xQueueReceive+0x122>
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd5c:	b25b      	sxtb	r3, r3
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd62:	d103      	bne.n	800dd6c <xQueueReceive+0x138>
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd6c:	f002 f82a 	bl	800fdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd70:	1d3a      	adds	r2, r7, #4
 800dd72:	f107 0310 	add.w	r3, r7, #16
 800dd76:	4611      	mov	r1, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f001 f83f 	bl	800edfc <xTaskCheckForTimeOut>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d123      	bne.n	800ddcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd86:	f000 fa3b 	bl	800e200 <prvIsQueueEmpty>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d017      	beq.n	800ddc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	3324      	adds	r3, #36	; 0x24
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 ff65 	bl	800ec68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda0:	f000 f9dc 	bl	800e15c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dda4:	f000 fd94 	bl	800e8d0 <xTaskResumeAll>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d189      	bne.n	800dcc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ddae:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <xQueueReceive+0x1bc>)
 800ddb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	e780      	b.n	800dcc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ddc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc2:	f000 f9cb 	bl	800e15c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddc6:	f000 fd83 	bl	800e8d0 <xTaskResumeAll>
 800ddca:	e77a      	b.n	800dcc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ddcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddce:	f000 f9c5 	bl	800e15c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddd2:	f000 fd7d 	bl	800e8d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd8:	f000 fa12 	bl	800e200 <prvIsQueueEmpty>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f43f af6f 	beq.w	800dcc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dde4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3730      	adds	r7, #48	; 0x30
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	e000ed04 	.word	0xe000ed04

0800ddf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddfe:	2300      	movs	r3, #0
 800de00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800de06:	2300      	movs	r3, #0
 800de08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10a      	bne.n	800de26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	623b      	str	r3, [r7, #32]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	61fb      	str	r3, [r7, #28]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de44:	f001 f932 	bl	800f0ac <xTaskGetSchedulerState>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d102      	bne.n	800de54 <xQueueSemaphoreTake+0x60>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <xQueueSemaphoreTake+0x64>
 800de54:	2301      	movs	r3, #1
 800de56:	e000      	b.n	800de5a <xQueueSemaphoreTake+0x66>
 800de58:	2300      	movs	r3, #0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10a      	bne.n	800de74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	61bb      	str	r3, [r7, #24]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de74:	f001 ff76 	bl	800fd64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	2b00      	cmp	r3, #0
 800de82:	d024      	beq.n	800dece <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	1e5a      	subs	r2, r3, #1
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d104      	bne.n	800de9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de94:	f001 fa80 	bl	800f398 <pvTaskIncrementMutexHeldCount>
 800de98:	4602      	mov	r2, r0
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00f      	beq.n	800dec6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	3310      	adds	r3, #16
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 ff2c 	bl	800ed08 <xTaskRemoveFromEventList>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d007      	beq.n	800dec6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800deb6:	4b54      	ldr	r3, [pc, #336]	; (800e008 <xQueueSemaphoreTake+0x214>)
 800deb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dec6:	f001 ff7d 	bl	800fdc4 <vPortExitCritical>
				return pdPASS;
 800deca:	2301      	movs	r3, #1
 800decc:	e097      	b.n	800dffe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d111      	bne.n	800def8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	617b      	str	r3, [r7, #20]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800def0:	f001 ff68 	bl	800fdc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800def4:	2300      	movs	r3, #0
 800def6:	e082      	b.n	800dffe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800def8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800defe:	f107 030c 	add.w	r3, r7, #12
 800df02:	4618      	mov	r0, r3
 800df04:	f000 ff64 	bl	800edd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df08:	2301      	movs	r3, #1
 800df0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df0c:	f001 ff5a 	bl	800fdc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df10:	f000 fcd0 	bl	800e8b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df14:	f001 ff26 	bl	800fd64 <vPortEnterCritical>
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df1e:	b25b      	sxtb	r3, r3
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df24:	d103      	bne.n	800df2e <xQueueSemaphoreTake+0x13a>
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df34:	b25b      	sxtb	r3, r3
 800df36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3a:	d103      	bne.n	800df44 <xQueueSemaphoreTake+0x150>
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df44:	f001 ff3e 	bl	800fdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df48:	463a      	mov	r2, r7
 800df4a:	f107 030c 	add.w	r3, r7, #12
 800df4e:	4611      	mov	r1, r2
 800df50:	4618      	mov	r0, r3
 800df52:	f000 ff53 	bl	800edfc <xTaskCheckForTimeOut>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d132      	bne.n	800dfc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df5e:	f000 f94f 	bl	800e200 <prvIsQueueEmpty>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d026      	beq.n	800dfb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d109      	bne.n	800df84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800df70:	f001 fef8 	bl	800fd64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	4618      	mov	r0, r3
 800df7a:	f001 f8b5 	bl	800f0e8 <xTaskPriorityInherit>
 800df7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800df80:	f001 ff20 	bl	800fdc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	3324      	adds	r3, #36	; 0x24
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	4611      	mov	r1, r2
 800df8c:	4618      	mov	r0, r3
 800df8e:	f000 fe6b 	bl	800ec68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df94:	f000 f8e2 	bl	800e15c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df98:	f000 fc9a 	bl	800e8d0 <xTaskResumeAll>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f47f af68 	bne.w	800de74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dfa4:	4b18      	ldr	r3, [pc, #96]	; (800e008 <xQueueSemaphoreTake+0x214>)
 800dfa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	e75e      	b.n	800de74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dfb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfb8:	f000 f8d0 	bl	800e15c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfbc:	f000 fc88 	bl	800e8d0 <xTaskResumeAll>
 800dfc0:	e758      	b.n	800de74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dfc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfc4:	f000 f8ca 	bl	800e15c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfc8:	f000 fc82 	bl	800e8d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfce:	f000 f917 	bl	800e200 <prvIsQueueEmpty>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f43f af4d 	beq.w	800de74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00d      	beq.n	800dffc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dfe0:	f001 fec0 	bl	800fd64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dfe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfe6:	f000 f811 	bl	800e00c <prvGetDisinheritPriorityAfterTimeout>
 800dfea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 f94e 	bl	800f294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dff8:	f001 fee4 	bl	800fdc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3738      	adds	r7, #56	; 0x38
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d006      	beq.n	800e02a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	e001      	b.n	800e02e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e02a:	2300      	movs	r3, #0
 800e02c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e02e:	68fb      	ldr	r3, [r7, #12]
	}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b086      	sub	sp, #24
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10d      	bne.n	800e076 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d14d      	bne.n	800e0fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	4618      	mov	r0, r3
 800e068:	f001 f8a6 	bl	800f1b8 <xTaskPriorityDisinherit>
 800e06c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	609a      	str	r2, [r3, #8]
 800e074:	e043      	b.n	800e0fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d119      	bne.n	800e0b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6858      	ldr	r0, [r3, #4]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e084:	461a      	mov	r2, r3
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	f002 ffa2 	bl	8010fd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e094:	441a      	add	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	685a      	ldr	r2, [r3, #4]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d32b      	bcc.n	800e0fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	605a      	str	r2, [r3, #4]
 800e0ae:	e026      	b.n	800e0fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68d8      	ldr	r0, [r3, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	f002 ff88 	bl	8010fd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	68da      	ldr	r2, [r3, #12]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c8:	425b      	negs	r3, r3
 800e0ca:	441a      	add	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68da      	ldr	r2, [r3, #12]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d207      	bcs.n	800e0ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	689a      	ldr	r2, [r3, #8]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e4:	425b      	negs	r3, r3
 800e0e6:	441a      	add	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d105      	bne.n	800e0fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e106:	697b      	ldr	r3, [r7, #20]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3718      	adds	r7, #24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d018      	beq.n	800e154 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68da      	ldr	r2, [r3, #12]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	441a      	add	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	68da      	ldr	r2, [r3, #12]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d303      	bcc.n	800e144 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	68d9      	ldr	r1, [r3, #12]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14c:	461a      	mov	r2, r3
 800e14e:	6838      	ldr	r0, [r7, #0]
 800e150:	f002 ff3e 	bl	8010fd0 <memcpy>
	}
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e164:	f001 fdfe 	bl	800fd64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e16e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e170:	e011      	b.n	800e196 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	2b00      	cmp	r3, #0
 800e178:	d012      	beq.n	800e1a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3324      	adds	r3, #36	; 0x24
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 fdc2 	bl	800ed08 <xTaskRemoveFromEventList>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e18a:	f000 fe99 	bl	800eec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	3b01      	subs	r3, #1
 800e192:	b2db      	uxtb	r3, r3
 800e194:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dce9      	bgt.n	800e172 <prvUnlockQueue+0x16>
 800e19e:	e000      	b.n	800e1a2 <prvUnlockQueue+0x46>
					break;
 800e1a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	22ff      	movs	r2, #255	; 0xff
 800e1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e1aa:	f001 fe0b 	bl	800fdc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1ae:	f001 fdd9 	bl	800fd64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1ba:	e011      	b.n	800e1e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d012      	beq.n	800e1ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3310      	adds	r3, #16
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 fd9d 	bl	800ed08 <xTaskRemoveFromEventList>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e1d4:	f000 fe74 	bl	800eec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e1d8:	7bbb      	ldrb	r3, [r7, #14]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dce9      	bgt.n	800e1bc <prvUnlockQueue+0x60>
 800e1e8:	e000      	b.n	800e1ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e1ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	22ff      	movs	r2, #255	; 0xff
 800e1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e1f4:	f001 fde6 	bl	800fdc4 <vPortExitCritical>
}
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e208:	f001 fdac 	bl	800fd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e214:	2301      	movs	r3, #1
 800e216:	60fb      	str	r3, [r7, #12]
 800e218:	e001      	b.n	800e21e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e21e:	f001 fdd1 	bl	800fdc4 <vPortExitCritical>

	return xReturn;
 800e222:	68fb      	ldr	r3, [r7, #12]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e234:	f001 fd96 	bl	800fd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e240:	429a      	cmp	r2, r3
 800e242:	d102      	bne.n	800e24a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e244:	2301      	movs	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e001      	b.n	800e24e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e24e:	f001 fdb9 	bl	800fdc4 <vPortExitCritical>

	return xReturn;
 800e252:	68fb      	ldr	r3, [r7, #12]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	e014      	b.n	800e296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e26c:	4a0f      	ldr	r2, [pc, #60]	; (800e2ac <vQueueAddToRegistry+0x50>)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10b      	bne.n	800e290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e278:	490c      	ldr	r1, [pc, #48]	; (800e2ac <vQueueAddToRegistry+0x50>)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e282:	4a0a      	ldr	r2, [pc, #40]	; (800e2ac <vQueueAddToRegistry+0x50>)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	4413      	add	r3, r2
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e28e:	e006      	b.n	800e29e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3301      	adds	r3, #1
 800e294:	60fb      	str	r3, [r7, #12]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2b07      	cmp	r3, #7
 800e29a:	d9e7      	bls.n	800e26c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e29c:	bf00      	nop
 800e29e:	bf00      	nop
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	20005550 	.word	0x20005550

0800e2b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e2c0:	f001 fd50 	bl	800fd64 <vPortEnterCritical>
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2ca:	b25b      	sxtb	r3, r3
 800e2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d0:	d103      	bne.n	800e2da <vQueueWaitForMessageRestricted+0x2a>
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2e0:	b25b      	sxtb	r3, r3
 800e2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e6:	d103      	bne.n	800e2f0 <vQueueWaitForMessageRestricted+0x40>
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2f0:	f001 fd68 	bl	800fdc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d106      	bne.n	800e30a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	3324      	adds	r3, #36	; 0x24
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	68b9      	ldr	r1, [r7, #8]
 800e304:	4618      	mov	r0, r3
 800e306:	f000 fcd3 	bl	800ecb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e30a:	6978      	ldr	r0, [r7, #20]
 800e30c:	f7ff ff26 	bl	800e15c <prvUnlockQueue>
	}
 800e310:	bf00      	nop
 800e312:	3718      	adds	r7, #24
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08e      	sub	sp, #56	; 0x38
 800e31c:	af04      	add	r7, sp, #16
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	623b      	str	r3, [r7, #32]
}
 800e33e:	bf00      	nop
 800e340:	e7fe      	b.n	800e340 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <xTaskCreateStatic+0x46>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	61fb      	str	r3, [r7, #28]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e35e:	23bc      	movs	r3, #188	; 0xbc
 800e360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2bbc      	cmp	r3, #188	; 0xbc
 800e366:	d00a      	beq.n	800e37e <xTaskCreateStatic+0x66>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	61bb      	str	r3, [r7, #24]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e37e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	2b00      	cmp	r3, #0
 800e384:	d01e      	beq.n	800e3c4 <xTaskCreateStatic+0xac>
 800e386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01b      	beq.n	800e3c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e394:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	2202      	movs	r2, #2
 800e39a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e39e:	2300      	movs	r3, #0
 800e3a0:	9303      	str	r3, [sp, #12]
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	9302      	str	r3, [sp, #8]
 800e3a6:	f107 0314 	add.w	r3, r7, #20
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	68b9      	ldr	r1, [r7, #8]
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f000 f850 	bl	800e45c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3be:	f000 f8f3 	bl	800e5a8 <prvAddNewTaskToReadyList>
 800e3c2:	e001      	b.n	800e3c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e3c8:	697b      	ldr	r3, [r7, #20]
	}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3728      	adds	r7, #40	; 0x28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b08c      	sub	sp, #48	; 0x30
 800e3d6:	af04      	add	r7, sp, #16
 800e3d8:	60f8      	str	r0, [r7, #12]
 800e3da:	60b9      	str	r1, [r7, #8]
 800e3dc:	603b      	str	r3, [r7, #0]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e3e2:	88fb      	ldrh	r3, [r7, #6]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f001 fdde 	bl	800ffa8 <pvPortMalloc>
 800e3ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00e      	beq.n	800e412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e3f4:	20bc      	movs	r0, #188	; 0xbc
 800e3f6:	f001 fdd7 	bl	800ffa8 <pvPortMalloc>
 800e3fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	631a      	str	r2, [r3, #48]	; 0x30
 800e408:	e005      	b.n	800e416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e40a:	6978      	ldr	r0, [r7, #20]
 800e40c:	f001 fe90 	bl	8010130 <vPortFree>
 800e410:	e001      	b.n	800e416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d017      	beq.n	800e44c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e424:	88fa      	ldrh	r2, [r7, #6]
 800e426:	2300      	movs	r3, #0
 800e428:	9303      	str	r3, [sp, #12]
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	9302      	str	r3, [sp, #8]
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	68b9      	ldr	r1, [r7, #8]
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f000 f80e 	bl	800e45c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e440:	69f8      	ldr	r0, [r7, #28]
 800e442:	f000 f8b1 	bl	800e5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e446:	2301      	movs	r3, #1
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	e002      	b.n	800e452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295
 800e450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e452:	69bb      	ldr	r3, [r7, #24]
	}
 800e454:	4618      	mov	r0, r3
 800e456:	3720      	adds	r7, #32
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	461a      	mov	r2, r3
 800e474:	21a5      	movs	r1, #165	; 0xa5
 800e476:	f002 fdd3 	bl	8011020 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e484:	3b01      	subs	r3, #1
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	f023 0307 	bic.w	r3, r3, #7
 800e492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00a      	beq.n	800e4b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	617b      	str	r3, [r7, #20]
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d01f      	beq.n	800e4fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
 800e4be:	e012      	b.n	800e4e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	7819      	ldrb	r1, [r3, #0]
 800e4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	3334      	adds	r3, #52	; 0x34
 800e4d0:	460a      	mov	r2, r1
 800e4d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	4413      	add	r3, r2
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d006      	beq.n	800e4ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	61fb      	str	r3, [r7, #28]
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2b0f      	cmp	r3, #15
 800e4ea:	d9e9      	bls.n	800e4c0 <prvInitialiseNewTask+0x64>
 800e4ec:	e000      	b.n	800e4f0 <prvInitialiseNewTask+0x94>
			{
				break;
 800e4ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4f8:	e003      	b.n	800e502 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	2b37      	cmp	r3, #55	; 0x37
 800e506:	d901      	bls.n	800e50c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e508:	2337      	movs	r3, #55	; 0x37
 800e50a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e516:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	2200      	movs	r2, #0
 800e51c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	3304      	adds	r3, #4
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe ffcc 	bl	800d4c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52a:	3318      	adds	r3, #24
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fe ffc7 	bl	800d4c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	2200      	movs	r2, #0
 800e554:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	3354      	adds	r3, #84	; 0x54
 800e55c:	2260      	movs	r2, #96	; 0x60
 800e55e:	2100      	movs	r1, #0
 800e560:	4618      	mov	r0, r3
 800e562:	f002 fd5d 	bl	8011020 <memset>
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	4a0c      	ldr	r2, [pc, #48]	; (800e59c <prvInitialiseNewTask+0x140>)
 800e56a:	659a      	str	r2, [r3, #88]	; 0x58
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	4a0c      	ldr	r2, [pc, #48]	; (800e5a0 <prvInitialiseNewTask+0x144>)
 800e570:	65da      	str	r2, [r3, #92]	; 0x5c
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	4a0b      	ldr	r2, [pc, #44]	; (800e5a4 <prvInitialiseNewTask+0x148>)
 800e576:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	68f9      	ldr	r1, [r7, #12]
 800e57c:	69b8      	ldr	r0, [r7, #24]
 800e57e:	f001 fac1 	bl	800fb04 <pxPortInitialiseStack>
 800e582:	4602      	mov	r2, r0
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e594:	bf00      	nop
 800e596:	3720      	adds	r7, #32
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	080164e4 	.word	0x080164e4
 800e5a0:	08016504 	.word	0x08016504
 800e5a4:	080164c4 	.word	0x080164c4

0800e5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e5b0:	f001 fbd8 	bl	800fd64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e5b4:	4b2d      	ldr	r3, [pc, #180]	; (800e66c <prvAddNewTaskToReadyList+0xc4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	4a2c      	ldr	r2, [pc, #176]	; (800e66c <prvAddNewTaskToReadyList+0xc4>)
 800e5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e5be:	4b2c      	ldr	r3, [pc, #176]	; (800e670 <prvAddNewTaskToReadyList+0xc8>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d109      	bne.n	800e5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e5c6:	4a2a      	ldr	r2, [pc, #168]	; (800e670 <prvAddNewTaskToReadyList+0xc8>)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e5cc:	4b27      	ldr	r3, [pc, #156]	; (800e66c <prvAddNewTaskToReadyList+0xc4>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d110      	bne.n	800e5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e5d4:	f000 fc98 	bl	800ef08 <prvInitialiseTaskLists>
 800e5d8:	e00d      	b.n	800e5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e5da:	4b26      	ldr	r3, [pc, #152]	; (800e674 <prvAddNewTaskToReadyList+0xcc>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d109      	bne.n	800e5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e5e2:	4b23      	ldr	r3, [pc, #140]	; (800e670 <prvAddNewTaskToReadyList+0xc8>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d802      	bhi.n	800e5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e5f0:	4a1f      	ldr	r2, [pc, #124]	; (800e670 <prvAddNewTaskToReadyList+0xc8>)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e5f6:	4b20      	ldr	r3, [pc, #128]	; (800e678 <prvAddNewTaskToReadyList+0xd0>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	4a1e      	ldr	r2, [pc, #120]	; (800e678 <prvAddNewTaskToReadyList+0xd0>)
 800e5fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e600:	4b1d      	ldr	r3, [pc, #116]	; (800e678 <prvAddNewTaskToReadyList+0xd0>)
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60c:	4b1b      	ldr	r3, [pc, #108]	; (800e67c <prvAddNewTaskToReadyList+0xd4>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	429a      	cmp	r2, r3
 800e612:	d903      	bls.n	800e61c <prvAddNewTaskToReadyList+0x74>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e618:	4a18      	ldr	r2, [pc, #96]	; (800e67c <prvAddNewTaskToReadyList+0xd4>)
 800e61a:	6013      	str	r3, [r2, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	4a15      	ldr	r2, [pc, #84]	; (800e680 <prvAddNewTaskToReadyList+0xd8>)
 800e62a:	441a      	add	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	3304      	adds	r3, #4
 800e630:	4619      	mov	r1, r3
 800e632:	4610      	mov	r0, r2
 800e634:	f7fe ff51 	bl	800d4da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e638:	f001 fbc4 	bl	800fdc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e63c:	4b0d      	ldr	r3, [pc, #52]	; (800e674 <prvAddNewTaskToReadyList+0xcc>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00e      	beq.n	800e662 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e644:	4b0a      	ldr	r3, [pc, #40]	; (800e670 <prvAddNewTaskToReadyList+0xc8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	429a      	cmp	r2, r3
 800e650:	d207      	bcs.n	800e662 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e652:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <prvAddNewTaskToReadyList+0xdc>)
 800e654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	20001234 	.word	0x20001234
 800e670:	20000d60 	.word	0x20000d60
 800e674:	20001240 	.word	0x20001240
 800e678:	20001250 	.word	0x20001250
 800e67c:	2000123c 	.word	0x2000123c
 800e680:	20000d64 	.word	0x20000d64
 800e684:	e000ed04 	.word	0xe000ed04

0800e688 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e690:	f001 fb68 	bl	800fd64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d102      	bne.n	800e6a0 <vTaskDelete+0x18>
 800e69a:	4b2c      	ldr	r3, [pc, #176]	; (800e74c <vTaskDelete+0xc4>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	e000      	b.n	800e6a2 <vTaskDelete+0x1a>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe ff73 	bl	800d594 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3318      	adds	r3, #24
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe ff6a 	bl	800d594 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e6c0:	4b23      	ldr	r3, [pc, #140]	; (800e750 <vTaskDelete+0xc8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	4a22      	ldr	r2, [pc, #136]	; (800e750 <vTaskDelete+0xc8>)
 800e6c8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e6ca:	4b20      	ldr	r3, [pc, #128]	; (800e74c <vTaskDelete+0xc4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d10b      	bne.n	800e6ec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	481e      	ldr	r0, [pc, #120]	; (800e754 <vTaskDelete+0xcc>)
 800e6dc:	f7fe fefd 	bl	800d4da <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e6e0:	4b1d      	ldr	r3, [pc, #116]	; (800e758 <vTaskDelete+0xd0>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	4a1c      	ldr	r2, [pc, #112]	; (800e758 <vTaskDelete+0xd0>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	e009      	b.n	800e700 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e6ec:	4b1b      	ldr	r3, [pc, #108]	; (800e75c <vTaskDelete+0xd4>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	4a1a      	ldr	r2, [pc, #104]	; (800e75c <vTaskDelete+0xd4>)
 800e6f4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f000 fc74 	bl	800efe4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e6fc:	f000 fca6 	bl	800f04c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e700:	f001 fb60 	bl	800fdc4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <vTaskDelete+0xd8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01b      	beq.n	800e744 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800e70c:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <vTaskDelete+0xc4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	429a      	cmp	r2, r3
 800e714:	d116      	bne.n	800e744 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e716:	4b13      	ldr	r3, [pc, #76]	; (800e764 <vTaskDelete+0xdc>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00a      	beq.n	800e734 <vTaskDelete+0xac>
	__asm volatile
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	60bb      	str	r3, [r7, #8]
}
 800e730:	bf00      	nop
 800e732:	e7fe      	b.n	800e732 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e734:	4b0c      	ldr	r3, [pc, #48]	; (800e768 <vTaskDelete+0xe0>)
 800e736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e744:	bf00      	nop
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20000d60 	.word	0x20000d60
 800e750:	20001250 	.word	0x20001250
 800e754:	20001208 	.word	0x20001208
 800e758:	2000121c 	.word	0x2000121c
 800e75c:	20001234 	.word	0x20001234
 800e760:	20001240 	.word	0x20001240
 800e764:	2000125c 	.word	0x2000125c
 800e768:	e000ed04 	.word	0xe000ed04

0800e76c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e774:	2300      	movs	r3, #0
 800e776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d017      	beq.n	800e7ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e77e:	4b13      	ldr	r3, [pc, #76]	; (800e7cc <vTaskDelay+0x60>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00a      	beq.n	800e79c <vTaskDelay+0x30>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	60bb      	str	r3, [r7, #8]
}
 800e798:	bf00      	nop
 800e79a:	e7fe      	b.n	800e79a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e79c:	f000 f88a 	bl	800e8b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fe0c 	bl	800f3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e7a8:	f000 f892 	bl	800e8d0 <xTaskResumeAll>
 800e7ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d107      	bne.n	800e7c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e7b4:	4b06      	ldr	r3, [pc, #24]	; (800e7d0 <vTaskDelay+0x64>)
 800e7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7c4:	bf00      	nop
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	2000125c 	.word	0x2000125c
 800e7d0:	e000ed04 	.word	0xe000ed04

0800e7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08a      	sub	sp, #40	; 0x28
 800e7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7e2:	463a      	mov	r2, r7
 800e7e4:	1d39      	adds	r1, r7, #4
 800e7e6:	f107 0308 	add.w	r3, r7, #8
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fe14 	bl	800d418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	9202      	str	r2, [sp, #8]
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	2300      	movs	r3, #0
 800e800:	460a      	mov	r2, r1
 800e802:	4924      	ldr	r1, [pc, #144]	; (800e894 <vTaskStartScheduler+0xc0>)
 800e804:	4824      	ldr	r0, [pc, #144]	; (800e898 <vTaskStartScheduler+0xc4>)
 800e806:	f7ff fd87 	bl	800e318 <xTaskCreateStatic>
 800e80a:	4603      	mov	r3, r0
 800e80c:	4a23      	ldr	r2, [pc, #140]	; (800e89c <vTaskStartScheduler+0xc8>)
 800e80e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e810:	4b22      	ldr	r3, [pc, #136]	; (800e89c <vTaskStartScheduler+0xc8>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e818:	2301      	movs	r3, #1
 800e81a:	617b      	str	r3, [r7, #20]
 800e81c:	e001      	b.n	800e822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e81e:	2300      	movs	r3, #0
 800e820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d102      	bne.n	800e82e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e828:	f000 fe1e 	bl	800f468 <xTimerCreateTimerTask>
 800e82c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d11b      	bne.n	800e86c <vTaskStartScheduler+0x98>
	__asm volatile
 800e834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	613b      	str	r3, [r7, #16]
}
 800e846:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e848:	4b15      	ldr	r3, [pc, #84]	; (800e8a0 <vTaskStartScheduler+0xcc>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3354      	adds	r3, #84	; 0x54
 800e84e:	4a15      	ldr	r2, [pc, #84]	; (800e8a4 <vTaskStartScheduler+0xd0>)
 800e850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <vTaskStartScheduler+0xd4>)
 800e854:	f04f 32ff 	mov.w	r2, #4294967295
 800e858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e85a:	4b14      	ldr	r3, [pc, #80]	; (800e8ac <vTaskStartScheduler+0xd8>)
 800e85c:	2201      	movs	r2, #1
 800e85e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e860:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <vTaskStartScheduler+0xdc>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e866:	f001 f9db 	bl	800fc20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e86a:	e00e      	b.n	800e88a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e872:	d10a      	bne.n	800e88a <vTaskStartScheduler+0xb6>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	60fb      	str	r3, [r7, #12]
}
 800e886:	bf00      	nop
 800e888:	e7fe      	b.n	800e888 <vTaskStartScheduler+0xb4>
}
 800e88a:	bf00      	nop
 800e88c:	3718      	adds	r7, #24
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	0801630c 	.word	0x0801630c
 800e898:	0800eed9 	.word	0x0800eed9
 800e89c:	20001258 	.word	0x20001258
 800e8a0:	20000d60 	.word	0x20000d60
 800e8a4:	20000188 	.word	0x20000188
 800e8a8:	20001254 	.word	0x20001254
 800e8ac:	20001240 	.word	0x20001240
 800e8b0:	20001238 	.word	0x20001238

0800e8b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e8b8:	4b04      	ldr	r3, [pc, #16]	; (800e8cc <vTaskSuspendAll+0x18>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	4a03      	ldr	r2, [pc, #12]	; (800e8cc <vTaskSuspendAll+0x18>)
 800e8c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e8c2:	bf00      	nop
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	2000125c 	.word	0x2000125c

0800e8d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e8de:	4b42      	ldr	r3, [pc, #264]	; (800e9e8 <xTaskResumeAll+0x118>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10a      	bne.n	800e8fc <xTaskResumeAll+0x2c>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	603b      	str	r3, [r7, #0]
}
 800e8f8:	bf00      	nop
 800e8fa:	e7fe      	b.n	800e8fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8fc:	f001 fa32 	bl	800fd64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e900:	4b39      	ldr	r3, [pc, #228]	; (800e9e8 <xTaskResumeAll+0x118>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	3b01      	subs	r3, #1
 800e906:	4a38      	ldr	r2, [pc, #224]	; (800e9e8 <xTaskResumeAll+0x118>)
 800e908:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e90a:	4b37      	ldr	r3, [pc, #220]	; (800e9e8 <xTaskResumeAll+0x118>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d162      	bne.n	800e9d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e912:	4b36      	ldr	r3, [pc, #216]	; (800e9ec <xTaskResumeAll+0x11c>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d05e      	beq.n	800e9d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e91a:	e02f      	b.n	800e97c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91c:	4b34      	ldr	r3, [pc, #208]	; (800e9f0 <xTaskResumeAll+0x120>)
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	3318      	adds	r3, #24
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fe fe33 	bl	800d594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3304      	adds	r3, #4
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fe2e 	bl	800d594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93c:	4b2d      	ldr	r3, [pc, #180]	; (800e9f4 <xTaskResumeAll+0x124>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d903      	bls.n	800e94c <xTaskResumeAll+0x7c>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	4a2a      	ldr	r2, [pc, #168]	; (800e9f4 <xTaskResumeAll+0x124>)
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e950:	4613      	mov	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4413      	add	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4a27      	ldr	r2, [pc, #156]	; (800e9f8 <xTaskResumeAll+0x128>)
 800e95a:	441a      	add	r2, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3304      	adds	r3, #4
 800e960:	4619      	mov	r1, r3
 800e962:	4610      	mov	r0, r2
 800e964:	f7fe fdb9 	bl	800d4da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96c:	4b23      	ldr	r3, [pc, #140]	; (800e9fc <xTaskResumeAll+0x12c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e972:	429a      	cmp	r2, r3
 800e974:	d302      	bcc.n	800e97c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e976:	4b22      	ldr	r3, [pc, #136]	; (800ea00 <xTaskResumeAll+0x130>)
 800e978:	2201      	movs	r2, #1
 800e97a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e97c:	4b1c      	ldr	r3, [pc, #112]	; (800e9f0 <xTaskResumeAll+0x120>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1cb      	bne.n	800e91c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e98a:	f000 fb5f 	bl	800f04c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e98e:	4b1d      	ldr	r3, [pc, #116]	; (800ea04 <xTaskResumeAll+0x134>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d010      	beq.n	800e9bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e99a:	f000 f847 	bl	800ea2c <xTaskIncrementTick>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e9a4:	4b16      	ldr	r3, [pc, #88]	; (800ea00 <xTaskResumeAll+0x130>)
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1f1      	bne.n	800e99a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <xTaskResumeAll+0x134>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e9bc:	4b10      	ldr	r3, [pc, #64]	; (800ea00 <xTaskResumeAll+0x130>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <xTaskResumeAll+0x138>)
 800e9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9d8:	f001 f9f4 	bl	800fdc4 <vPortExitCritical>

	return xAlreadyYielded;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	2000125c 	.word	0x2000125c
 800e9ec:	20001234 	.word	0x20001234
 800e9f0:	200011f4 	.word	0x200011f4
 800e9f4:	2000123c 	.word	0x2000123c
 800e9f8:	20000d64 	.word	0x20000d64
 800e9fc:	20000d60 	.word	0x20000d60
 800ea00:	20001248 	.word	0x20001248
 800ea04:	20001244 	.word	0x20001244
 800ea08:	e000ed04 	.word	0xe000ed04

0800ea0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ea12:	4b05      	ldr	r3, [pc, #20]	; (800ea28 <xTaskGetTickCount+0x1c>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ea18:	687b      	ldr	r3, [r7, #4]
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	20001238 	.word	0x20001238

0800ea2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea32:	2300      	movs	r3, #0
 800ea34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea36:	4b4f      	ldr	r3, [pc, #316]	; (800eb74 <xTaskIncrementTick+0x148>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f040 8089 	bne.w	800eb52 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea40:	4b4d      	ldr	r3, [pc, #308]	; (800eb78 <xTaskIncrementTick+0x14c>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea48:	4a4b      	ldr	r2, [pc, #300]	; (800eb78 <xTaskIncrementTick+0x14c>)
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d120      	bne.n	800ea96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea54:	4b49      	ldr	r3, [pc, #292]	; (800eb7c <xTaskIncrementTick+0x150>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00a      	beq.n	800ea74 <xTaskIncrementTick+0x48>
	__asm volatile
 800ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	603b      	str	r3, [r7, #0]
}
 800ea70:	bf00      	nop
 800ea72:	e7fe      	b.n	800ea72 <xTaskIncrementTick+0x46>
 800ea74:	4b41      	ldr	r3, [pc, #260]	; (800eb7c <xTaskIncrementTick+0x150>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	4b41      	ldr	r3, [pc, #260]	; (800eb80 <xTaskIncrementTick+0x154>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a3f      	ldr	r2, [pc, #252]	; (800eb7c <xTaskIncrementTick+0x150>)
 800ea80:	6013      	str	r3, [r2, #0]
 800ea82:	4a3f      	ldr	r2, [pc, #252]	; (800eb80 <xTaskIncrementTick+0x154>)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	4b3e      	ldr	r3, [pc, #248]	; (800eb84 <xTaskIncrementTick+0x158>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	4a3d      	ldr	r2, [pc, #244]	; (800eb84 <xTaskIncrementTick+0x158>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	f000 fadb 	bl	800f04c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea96:	4b3c      	ldr	r3, [pc, #240]	; (800eb88 <xTaskIncrementTick+0x15c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d349      	bcc.n	800eb34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaa0:	4b36      	ldr	r3, [pc, #216]	; (800eb7c <xTaskIncrementTick+0x150>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d104      	bne.n	800eab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaaa:	4b37      	ldr	r3, [pc, #220]	; (800eb88 <xTaskIncrementTick+0x15c>)
 800eaac:	f04f 32ff 	mov.w	r2, #4294967295
 800eab0:	601a      	str	r2, [r3, #0]
					break;
 800eab2:	e03f      	b.n	800eb34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eab4:	4b31      	ldr	r3, [pc, #196]	; (800eb7c <xTaskIncrementTick+0x150>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d203      	bcs.n	800ead4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eacc:	4a2e      	ldr	r2, [pc, #184]	; (800eb88 <xTaskIncrementTick+0x15c>)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ead2:	e02f      	b.n	800eb34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe fd5b 	bl	800d594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	3318      	adds	r3, #24
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fe fd52 	bl	800d594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf4:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <xTaskIncrementTick+0x160>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d903      	bls.n	800eb04 <xTaskIncrementTick+0xd8>
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	4a22      	ldr	r2, [pc, #136]	; (800eb8c <xTaskIncrementTick+0x160>)
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb08:	4613      	mov	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4413      	add	r3, r2
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4a1f      	ldr	r2, [pc, #124]	; (800eb90 <xTaskIncrementTick+0x164>)
 800eb12:	441a      	add	r2, r3
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	3304      	adds	r3, #4
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f7fe fcdd 	bl	800d4da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb24:	4b1b      	ldr	r3, [pc, #108]	; (800eb94 <xTaskIncrementTick+0x168>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d3b8      	bcc.n	800eaa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb32:	e7b5      	b.n	800eaa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb34:	4b17      	ldr	r3, [pc, #92]	; (800eb94 <xTaskIncrementTick+0x168>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3a:	4915      	ldr	r1, [pc, #84]	; (800eb90 <xTaskIncrementTick+0x164>)
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	440b      	add	r3, r1
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d907      	bls.n	800eb5c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	617b      	str	r3, [r7, #20]
 800eb50:	e004      	b.n	800eb5c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eb52:	4b11      	ldr	r3, [pc, #68]	; (800eb98 <xTaskIncrementTick+0x16c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	3301      	adds	r3, #1
 800eb58:	4a0f      	ldr	r2, [pc, #60]	; (800eb98 <xTaskIncrementTick+0x16c>)
 800eb5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb5c:	4b0f      	ldr	r3, [pc, #60]	; (800eb9c <xTaskIncrementTick+0x170>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb68:	697b      	ldr	r3, [r7, #20]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3718      	adds	r7, #24
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	2000125c 	.word	0x2000125c
 800eb78:	20001238 	.word	0x20001238
 800eb7c:	200011ec 	.word	0x200011ec
 800eb80:	200011f0 	.word	0x200011f0
 800eb84:	2000124c 	.word	0x2000124c
 800eb88:	20001254 	.word	0x20001254
 800eb8c:	2000123c 	.word	0x2000123c
 800eb90:	20000d64 	.word	0x20000d64
 800eb94:	20000d60 	.word	0x20000d60
 800eb98:	20001244 	.word	0x20001244
 800eb9c:	20001248 	.word	0x20001248

0800eba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eba6:	4b2a      	ldr	r3, [pc, #168]	; (800ec50 <vTaskSwitchContext+0xb0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ebae:	4b29      	ldr	r3, [pc, #164]	; (800ec54 <vTaskSwitchContext+0xb4>)
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ebb4:	e046      	b.n	800ec44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ebb6:	4b27      	ldr	r3, [pc, #156]	; (800ec54 <vTaskSwitchContext+0xb4>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebbc:	4b26      	ldr	r3, [pc, #152]	; (800ec58 <vTaskSwitchContext+0xb8>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	60fb      	str	r3, [r7, #12]
 800ebc2:	e010      	b.n	800ebe6 <vTaskSwitchContext+0x46>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <vTaskSwitchContext+0x40>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	607b      	str	r3, [r7, #4]
}
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <vTaskSwitchContext+0x3e>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	491d      	ldr	r1, [pc, #116]	; (800ec5c <vTaskSwitchContext+0xbc>)
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	4613      	mov	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	440b      	add	r3, r1
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d0e4      	beq.n	800ebc4 <vTaskSwitchContext+0x24>
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4a15      	ldr	r2, [pc, #84]	; (800ec5c <vTaskSwitchContext+0xbc>)
 800ec06:	4413      	add	r3, r2
 800ec08:	60bb      	str	r3, [r7, #8]
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	605a      	str	r2, [r3, #4]
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d104      	bne.n	800ec2a <vTaskSwitchContext+0x8a>
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	605a      	str	r2, [r3, #4]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	4a0b      	ldr	r2, [pc, #44]	; (800ec60 <vTaskSwitchContext+0xc0>)
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	4a08      	ldr	r2, [pc, #32]	; (800ec58 <vTaskSwitchContext+0xb8>)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec3a:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <vTaskSwitchContext+0xc0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3354      	adds	r3, #84	; 0x54
 800ec40:	4a08      	ldr	r2, [pc, #32]	; (800ec64 <vTaskSwitchContext+0xc4>)
 800ec42:	6013      	str	r3, [r2, #0]
}
 800ec44:	bf00      	nop
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	2000125c 	.word	0x2000125c
 800ec54:	20001248 	.word	0x20001248
 800ec58:	2000123c 	.word	0x2000123c
 800ec5c:	20000d64 	.word	0x20000d64
 800ec60:	20000d60 	.word	0x20000d60
 800ec64:	20000188 	.word	0x20000188

0800ec68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10a      	bne.n	800ec8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	60fb      	str	r3, [r7, #12]
}
 800ec8a:	bf00      	nop
 800ec8c:	e7fe      	b.n	800ec8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec8e:	4b07      	ldr	r3, [pc, #28]	; (800ecac <vTaskPlaceOnEventList+0x44>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3318      	adds	r3, #24
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7fe fc43 	bl	800d522 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	6838      	ldr	r0, [r7, #0]
 800eca0:	f000 fb8e 	bl	800f3c0 <prvAddCurrentTaskToDelayedList>
}
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	20000d60 	.word	0x20000d60

0800ecb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10a      	bne.n	800ecd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	617b      	str	r3, [r7, #20]
}
 800ecd4:	bf00      	nop
 800ecd6:	e7fe      	b.n	800ecd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	; (800ed04 <vTaskPlaceOnEventListRestricted+0x54>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3318      	adds	r3, #24
 800ecde:	4619      	mov	r1, r3
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7fe fbfa 	bl	800d4da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ecec:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ecf2:	6879      	ldr	r1, [r7, #4]
 800ecf4:	68b8      	ldr	r0, [r7, #8]
 800ecf6:	f000 fb63 	bl	800f3c0 <prvAddCurrentTaskToDelayedList>
	}
 800ecfa:	bf00      	nop
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	20000d60 	.word	0x20000d60

0800ed08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10a      	bne.n	800ed34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	60fb      	str	r3, [r7, #12]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	3318      	adds	r3, #24
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fe fc2b 	bl	800d594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed3e:	4b1e      	ldr	r3, [pc, #120]	; (800edb8 <xTaskRemoveFromEventList+0xb0>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d11d      	bne.n	800ed82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	3304      	adds	r3, #4
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe fc22 	bl	800d594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed54:	4b19      	ldr	r3, [pc, #100]	; (800edbc <xTaskRemoveFromEventList+0xb4>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d903      	bls.n	800ed64 <xTaskRemoveFromEventList+0x5c>
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed60:	4a16      	ldr	r2, [pc, #88]	; (800edbc <xTaskRemoveFromEventList+0xb4>)
 800ed62:	6013      	str	r3, [r2, #0]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed68:	4613      	mov	r3, r2
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	4413      	add	r3, r2
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	4a13      	ldr	r2, [pc, #76]	; (800edc0 <xTaskRemoveFromEventList+0xb8>)
 800ed72:	441a      	add	r2, r3
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	3304      	adds	r3, #4
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	f7fe fbad 	bl	800d4da <vListInsertEnd>
 800ed80:	e005      	b.n	800ed8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	3318      	adds	r3, #24
 800ed86:	4619      	mov	r1, r3
 800ed88:	480e      	ldr	r0, [pc, #56]	; (800edc4 <xTaskRemoveFromEventList+0xbc>)
 800ed8a:	f7fe fba6 	bl	800d4da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed92:	4b0d      	ldr	r3, [pc, #52]	; (800edc8 <xTaskRemoveFromEventList+0xc0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d905      	bls.n	800eda8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eda0:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <xTaskRemoveFromEventList+0xc4>)
 800eda2:	2201      	movs	r2, #1
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	e001      	b.n	800edac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eda8:	2300      	movs	r3, #0
 800edaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edac:	697b      	ldr	r3, [r7, #20]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	2000125c 	.word	0x2000125c
 800edbc:	2000123c 	.word	0x2000123c
 800edc0:	20000d64 	.word	0x20000d64
 800edc4:	200011f4 	.word	0x200011f4
 800edc8:	20000d60 	.word	0x20000d60
 800edcc:	20001248 	.word	0x20001248

0800edd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edd8:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <vTaskInternalSetTimeOutState+0x24>)
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ede0:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <vTaskInternalSetTimeOutState+0x28>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	605a      	str	r2, [r3, #4]
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	2000124c 	.word	0x2000124c
 800edf8:	20001238 	.word	0x20001238

0800edfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d10a      	bne.n	800ee22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ee0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee10:	f383 8811 	msr	BASEPRI, r3
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	613b      	str	r3, [r7, #16]
}
 800ee1e:	bf00      	nop
 800ee20:	e7fe      	b.n	800ee20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10a      	bne.n	800ee3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	60fb      	str	r3, [r7, #12]
}
 800ee3a:	bf00      	nop
 800ee3c:	e7fe      	b.n	800ee3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ee3e:	f000 ff91 	bl	800fd64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee42:	4b1d      	ldr	r3, [pc, #116]	; (800eeb8 <xTaskCheckForTimeOut+0xbc>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	69ba      	ldr	r2, [r7, #24]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	d102      	bne.n	800ee62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	61fb      	str	r3, [r7, #28]
 800ee60:	e023      	b.n	800eeaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	4b15      	ldr	r3, [pc, #84]	; (800eebc <xTaskCheckForTimeOut+0xc0>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d007      	beq.n	800ee7e <xTaskCheckForTimeOut+0x82>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d302      	bcc.n	800ee7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	61fb      	str	r3, [r7, #28]
 800ee7c:	e015      	b.n	800eeaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d20b      	bcs.n	800eea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	1ad2      	subs	r2, r2, r3
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ff9b 	bl	800edd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	61fb      	str	r3, [r7, #28]
 800ee9e:	e004      	b.n	800eeaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2200      	movs	r2, #0
 800eea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eea6:	2301      	movs	r3, #1
 800eea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eeaa:	f000 ff8b 	bl	800fdc4 <vPortExitCritical>

	return xReturn;
 800eeae:	69fb      	ldr	r3, [r7, #28]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3720      	adds	r7, #32
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	20001238 	.word	0x20001238
 800eebc:	2000124c 	.word	0x2000124c

0800eec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eec0:	b480      	push	{r7}
 800eec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eec4:	4b03      	ldr	r3, [pc, #12]	; (800eed4 <vTaskMissedYield+0x14>)
 800eec6:	2201      	movs	r2, #1
 800eec8:	601a      	str	r2, [r3, #0]
}
 800eeca:	bf00      	nop
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	20001248 	.word	0x20001248

0800eed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eee0:	f000 f852 	bl	800ef88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eee4:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <prvIdleTask+0x28>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d9f9      	bls.n	800eee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eeec:	4b05      	ldr	r3, [pc, #20]	; (800ef04 <prvIdleTask+0x2c>)
 800eeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	f3bf 8f4f 	dsb	sy
 800eef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eefc:	e7f0      	b.n	800eee0 <prvIdleTask+0x8>
 800eefe:	bf00      	nop
 800ef00:	20000d64 	.word	0x20000d64
 800ef04:	e000ed04 	.word	0xe000ed04

0800ef08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef0e:	2300      	movs	r3, #0
 800ef10:	607b      	str	r3, [r7, #4]
 800ef12:	e00c      	b.n	800ef2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	4613      	mov	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4a12      	ldr	r2, [pc, #72]	; (800ef68 <prvInitialiseTaskLists+0x60>)
 800ef20:	4413      	add	r3, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe faac 	bl	800d480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	607b      	str	r3, [r7, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b37      	cmp	r3, #55	; 0x37
 800ef32:	d9ef      	bls.n	800ef14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef34:	480d      	ldr	r0, [pc, #52]	; (800ef6c <prvInitialiseTaskLists+0x64>)
 800ef36:	f7fe faa3 	bl	800d480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef3a:	480d      	ldr	r0, [pc, #52]	; (800ef70 <prvInitialiseTaskLists+0x68>)
 800ef3c:	f7fe faa0 	bl	800d480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef40:	480c      	ldr	r0, [pc, #48]	; (800ef74 <prvInitialiseTaskLists+0x6c>)
 800ef42:	f7fe fa9d 	bl	800d480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef46:	480c      	ldr	r0, [pc, #48]	; (800ef78 <prvInitialiseTaskLists+0x70>)
 800ef48:	f7fe fa9a 	bl	800d480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef4c:	480b      	ldr	r0, [pc, #44]	; (800ef7c <prvInitialiseTaskLists+0x74>)
 800ef4e:	f7fe fa97 	bl	800d480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef52:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <prvInitialiseTaskLists+0x78>)
 800ef54:	4a05      	ldr	r2, [pc, #20]	; (800ef6c <prvInitialiseTaskLists+0x64>)
 800ef56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <prvInitialiseTaskLists+0x7c>)
 800ef5a:	4a05      	ldr	r2, [pc, #20]	; (800ef70 <prvInitialiseTaskLists+0x68>)
 800ef5c:	601a      	str	r2, [r3, #0]
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20000d64 	.word	0x20000d64
 800ef6c:	200011c4 	.word	0x200011c4
 800ef70:	200011d8 	.word	0x200011d8
 800ef74:	200011f4 	.word	0x200011f4
 800ef78:	20001208 	.word	0x20001208
 800ef7c:	20001220 	.word	0x20001220
 800ef80:	200011ec 	.word	0x200011ec
 800ef84:	200011f0 	.word	0x200011f0

0800ef88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef8e:	e019      	b.n	800efc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef90:	f000 fee8 	bl	800fd64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef94:	4b10      	ldr	r3, [pc, #64]	; (800efd8 <prvCheckTasksWaitingTermination+0x50>)
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3304      	adds	r3, #4
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fe faf7 	bl	800d594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <prvCheckTasksWaitingTermination+0x54>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3b01      	subs	r3, #1
 800efac:	4a0b      	ldr	r2, [pc, #44]	; (800efdc <prvCheckTasksWaitingTermination+0x54>)
 800efae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efb0:	4b0b      	ldr	r3, [pc, #44]	; (800efe0 <prvCheckTasksWaitingTermination+0x58>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	4a0a      	ldr	r2, [pc, #40]	; (800efe0 <prvCheckTasksWaitingTermination+0x58>)
 800efb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efba:	f000 ff03 	bl	800fdc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f810 	bl	800efe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efc4:	4b06      	ldr	r3, [pc, #24]	; (800efe0 <prvCheckTasksWaitingTermination+0x58>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1e1      	bne.n	800ef90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efcc:	bf00      	nop
 800efce:	bf00      	nop
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20001208 	.word	0x20001208
 800efdc:	20001234 	.word	0x20001234
 800efe0:	2000121c 	.word	0x2000121c

0800efe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3354      	adds	r3, #84	; 0x54
 800eff0:	4618      	mov	r0, r3
 800eff2:	f002 ff4f 	bl	8011e94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800effc:	2b00      	cmp	r3, #0
 800effe:	d108      	bne.n	800f012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f004:	4618      	mov	r0, r3
 800f006:	f001 f893 	bl	8010130 <vPortFree>
				vPortFree( pxTCB );
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f001 f890 	bl	8010130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f010:	e018      	b.n	800f044 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d103      	bne.n	800f024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f001 f887 	bl	8010130 <vPortFree>
	}
 800f022:	e00f      	b.n	800f044 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d00a      	beq.n	800f044 <prvDeleteTCB+0x60>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	60fb      	str	r3, [r7, #12]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <prvDeleteTCB+0x5e>
	}
 800f044:	bf00      	nop
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f052:	4b0c      	ldr	r3, [pc, #48]	; (800f084 <prvResetNextTaskUnblockTime+0x38>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d104      	bne.n	800f066 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <prvResetNextTaskUnblockTime+0x3c>)
 800f05e:	f04f 32ff 	mov.w	r2, #4294967295
 800f062:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f064:	e008      	b.n	800f078 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f066:	4b07      	ldr	r3, [pc, #28]	; (800f084 <prvResetNextTaskUnblockTime+0x38>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	4a04      	ldr	r2, [pc, #16]	; (800f088 <prvResetNextTaskUnblockTime+0x3c>)
 800f076:	6013      	str	r3, [r2, #0]
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	200011ec 	.word	0x200011ec
 800f088:	20001254 	.word	0x20001254

0800f08c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f092:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <xTaskGetCurrentTaskHandle+0x1c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f098:	687b      	ldr	r3, [r7, #4]
	}
 800f09a:	4618      	mov	r0, r3
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20000d60 	.word	0x20000d60

0800f0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <xTaskGetSchedulerState+0x34>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	e008      	b.n	800f0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0c0:	4b08      	ldr	r3, [pc, #32]	; (800f0e4 <xTaskGetSchedulerState+0x38>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d102      	bne.n	800f0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	607b      	str	r3, [r7, #4]
 800f0cc:	e001      	b.n	800f0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0d2:	687b      	ldr	r3, [r7, #4]
	}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	20001240 	.word	0x20001240
 800f0e4:	2000125c 	.word	0x2000125c

0800f0e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d051      	beq.n	800f1a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f102:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <xTaskPriorityInherit+0xc4>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	429a      	cmp	r2, r3
 800f10a:	d241      	bcs.n	800f190 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	db06      	blt.n	800f122 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f114:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <xTaskPriorityInherit+0xc4>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6959      	ldr	r1, [r3, #20]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4a1f      	ldr	r2, [pc, #124]	; (800f1b0 <xTaskPriorityInherit+0xc8>)
 800f134:	4413      	add	r3, r2
 800f136:	4299      	cmp	r1, r3
 800f138:	d122      	bne.n	800f180 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	3304      	adds	r3, #4
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fe fa28 	bl	800d594 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f144:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <xTaskPriorityInherit+0xc4>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f152:	4b18      	ldr	r3, [pc, #96]	; (800f1b4 <xTaskPriorityInherit+0xcc>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	429a      	cmp	r2, r3
 800f158:	d903      	bls.n	800f162 <xTaskPriorityInherit+0x7a>
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15e:	4a15      	ldr	r2, [pc, #84]	; (800f1b4 <xTaskPriorityInherit+0xcc>)
 800f160:	6013      	str	r3, [r2, #0]
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4a10      	ldr	r2, [pc, #64]	; (800f1b0 <xTaskPriorityInherit+0xc8>)
 800f170:	441a      	add	r2, r3
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	3304      	adds	r3, #4
 800f176:	4619      	mov	r1, r3
 800f178:	4610      	mov	r0, r2
 800f17a:	f7fe f9ae 	bl	800d4da <vListInsertEnd>
 800f17e:	e004      	b.n	800f18a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f180:	4b0a      	ldr	r3, [pc, #40]	; (800f1ac <xTaskPriorityInherit+0xc4>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f18a:	2301      	movs	r3, #1
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	e008      	b.n	800f1a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f194:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <xTaskPriorityInherit+0xc4>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d201      	bcs.n	800f1a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
	}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	20000d60 	.word	0x20000d60
 800f1b0:	20000d64 	.word	0x20000d64
 800f1b4:	2000123c 	.word	0x2000123c

0800f1b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d056      	beq.n	800f27c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1ce:	4b2e      	ldr	r3, [pc, #184]	; (800f288 <xTaskPriorityDisinherit+0xd0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d00a      	beq.n	800f1ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60fb      	str	r3, [r7, #12]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10a      	bne.n	800f20c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	60bb      	str	r3, [r7, #8]
}
 800f208:	bf00      	nop
 800f20a:	e7fe      	b.n	800f20a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f210:	1e5a      	subs	r2, r3, #1
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f21e:	429a      	cmp	r2, r3
 800f220:	d02c      	beq.n	800f27c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f226:	2b00      	cmp	r3, #0
 800f228:	d128      	bne.n	800f27c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	3304      	adds	r3, #4
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fe f9b0 	bl	800d594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f240:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24c:	4b0f      	ldr	r3, [pc, #60]	; (800f28c <xTaskPriorityDisinherit+0xd4>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	429a      	cmp	r2, r3
 800f252:	d903      	bls.n	800f25c <xTaskPriorityDisinherit+0xa4>
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f258:	4a0c      	ldr	r2, [pc, #48]	; (800f28c <xTaskPriorityDisinherit+0xd4>)
 800f25a:	6013      	str	r3, [r2, #0]
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f260:	4613      	mov	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4a09      	ldr	r2, [pc, #36]	; (800f290 <xTaskPriorityDisinherit+0xd8>)
 800f26a:	441a      	add	r2, r3
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	3304      	adds	r3, #4
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f7fe f931 	bl	800d4da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f278:	2301      	movs	r3, #1
 800f27a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f27c:	697b      	ldr	r3, [r7, #20]
	}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	20000d60 	.word	0x20000d60
 800f28c:	2000123c 	.word	0x2000123c
 800f290:	20000d64 	.word	0x20000d64

0800f294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f294:	b580      	push	{r7, lr}
 800f296:	b088      	sub	sp, #32
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d06a      	beq.n	800f382 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10a      	bne.n	800f2ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	60fb      	str	r3, [r7, #12]
}
 800f2c6:	bf00      	nop
 800f2c8:	e7fe      	b.n	800f2c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d902      	bls.n	800f2da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	61fb      	str	r3, [r7, #28]
 800f2d8:	e002      	b.n	800f2e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e4:	69fa      	ldr	r2, [r7, #28]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d04b      	beq.n	800f382 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d146      	bne.n	800f382 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f2f4:	4b25      	ldr	r3, [pc, #148]	; (800f38c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	69ba      	ldr	r2, [r7, #24]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d10a      	bne.n	800f314 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	60bb      	str	r3, [r7, #8]
}
 800f310:	bf00      	nop
 800f312:	e7fe      	b.n	800f312 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	69fa      	ldr	r2, [r7, #28]
 800f31e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	699b      	ldr	r3, [r3, #24]
 800f324:	2b00      	cmp	r3, #0
 800f326:	db04      	blt.n	800f332 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6959      	ldr	r1, [r3, #20]
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	4613      	mov	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	4a13      	ldr	r2, [pc, #76]	; (800f390 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f342:	4413      	add	r3, r2
 800f344:	4299      	cmp	r1, r3
 800f346:	d11c      	bne.n	800f382 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	3304      	adds	r3, #4
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fe f921 	bl	800d594 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f356:	4b0f      	ldr	r3, [pc, #60]	; (800f394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d903      	bls.n	800f366 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f362:	4a0c      	ldr	r2, [pc, #48]	; (800f394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f364:	6013      	str	r3, [r2, #0]
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f36a:	4613      	mov	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4413      	add	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4a07      	ldr	r2, [pc, #28]	; (800f390 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f374:	441a      	add	r2, r3
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	3304      	adds	r3, #4
 800f37a:	4619      	mov	r1, r3
 800f37c:	4610      	mov	r0, r2
 800f37e:	f7fe f8ac 	bl	800d4da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f382:	bf00      	nop
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20000d60 	.word	0x20000d60
 800f390:	20000d64 	.word	0x20000d64
 800f394:	2000123c 	.word	0x2000123c

0800f398 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f39c:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3a4:	4b05      	ldr	r3, [pc, #20]	; (800f3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3aa:	3201      	adds	r2, #1
 800f3ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f3ae:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
	}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	20000d60 	.word	0x20000d60

0800f3c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3ca:	4b21      	ldr	r3, [pc, #132]	; (800f450 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d0:	4b20      	ldr	r3, [pc, #128]	; (800f454 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe f8dc 	bl	800d594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	d10a      	bne.n	800f3fa <prvAddCurrentTaskToDelayedList+0x3a>
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d007      	beq.n	800f3fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3ea:	4b1a      	ldr	r3, [pc, #104]	; (800f454 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4819      	ldr	r0, [pc, #100]	; (800f458 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3f4:	f7fe f871 	bl	800d4da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3f8:	e026      	b.n	800f448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4413      	add	r3, r2
 800f400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f402:	4b14      	ldr	r3, [pc, #80]	; (800f454 <prvAddCurrentTaskToDelayedList+0x94>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d209      	bcs.n	800f426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f412:	4b12      	ldr	r3, [pc, #72]	; (800f45c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	4b0f      	ldr	r3, [pc, #60]	; (800f454 <prvAddCurrentTaskToDelayedList+0x94>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3304      	adds	r3, #4
 800f41c:	4619      	mov	r1, r3
 800f41e:	4610      	mov	r0, r2
 800f420:	f7fe f87f 	bl	800d522 <vListInsert>
}
 800f424:	e010      	b.n	800f448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f426:	4b0e      	ldr	r3, [pc, #56]	; (800f460 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	4b0a      	ldr	r3, [pc, #40]	; (800f454 <prvAddCurrentTaskToDelayedList+0x94>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3304      	adds	r3, #4
 800f430:	4619      	mov	r1, r3
 800f432:	4610      	mov	r0, r2
 800f434:	f7fe f875 	bl	800d522 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f438:	4b0a      	ldr	r3, [pc, #40]	; (800f464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d202      	bcs.n	800f448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f442:	4a08      	ldr	r2, [pc, #32]	; (800f464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	6013      	str	r3, [r2, #0]
}
 800f448:	bf00      	nop
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	20001238 	.word	0x20001238
 800f454:	20000d60 	.word	0x20000d60
 800f458:	20001220 	.word	0x20001220
 800f45c:	200011f0 	.word	0x200011f0
 800f460:	200011ec 	.word	0x200011ec
 800f464:	20001254 	.word	0x20001254

0800f468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08a      	sub	sp, #40	; 0x28
 800f46c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f46e:	2300      	movs	r3, #0
 800f470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f472:	f000 fb07 	bl	800fa84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f476:	4b1c      	ldr	r3, [pc, #112]	; (800f4e8 <xTimerCreateTimerTask+0x80>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d021      	beq.n	800f4c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f47e:	2300      	movs	r3, #0
 800f480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f482:	2300      	movs	r3, #0
 800f484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f486:	1d3a      	adds	r2, r7, #4
 800f488:	f107 0108 	add.w	r1, r7, #8
 800f48c:	f107 030c 	add.w	r3, r7, #12
 800f490:	4618      	mov	r0, r3
 800f492:	f7fd ffdb 	bl	800d44c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	68fa      	ldr	r2, [r7, #12]
 800f49c:	9202      	str	r2, [sp, #8]
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	2302      	movs	r3, #2
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	460a      	mov	r2, r1
 800f4a8:	4910      	ldr	r1, [pc, #64]	; (800f4ec <xTimerCreateTimerTask+0x84>)
 800f4aa:	4811      	ldr	r0, [pc, #68]	; (800f4f0 <xTimerCreateTimerTask+0x88>)
 800f4ac:	f7fe ff34 	bl	800e318 <xTaskCreateStatic>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	4a10      	ldr	r2, [pc, #64]	; (800f4f4 <xTimerCreateTimerTask+0x8c>)
 800f4b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f4b6:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <xTimerCreateTimerTask+0x8c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d10a      	bne.n	800f4de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	613b      	str	r3, [r7, #16]
}
 800f4da:	bf00      	nop
 800f4dc:	e7fe      	b.n	800f4dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4de:	697b      	ldr	r3, [r7, #20]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20001290 	.word	0x20001290
 800f4ec:	08016314 	.word	0x08016314
 800f4f0:	0800f62d 	.word	0x0800f62d
 800f4f4:	20001294 	.word	0x20001294

0800f4f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b08a      	sub	sp, #40	; 0x28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f506:	2300      	movs	r3, #0
 800f508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10a      	bne.n	800f526 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f514:	f383 8811 	msr	BASEPRI, r3
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	623b      	str	r3, [r7, #32]
}
 800f522:	bf00      	nop
 800f524:	e7fe      	b.n	800f524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f526:	4b1a      	ldr	r3, [pc, #104]	; (800f590 <xTimerGenericCommand+0x98>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d02a      	beq.n	800f584 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b05      	cmp	r3, #5
 800f53e:	dc18      	bgt.n	800f572 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f540:	f7ff fdb4 	bl	800f0ac <xTaskGetSchedulerState>
 800f544:	4603      	mov	r3, r0
 800f546:	2b02      	cmp	r3, #2
 800f548:	d109      	bne.n	800f55e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f54a:	4b11      	ldr	r3, [pc, #68]	; (800f590 <xTimerGenericCommand+0x98>)
 800f54c:	6818      	ldr	r0, [r3, #0]
 800f54e:	f107 0110 	add.w	r1, r7, #16
 800f552:	2300      	movs	r3, #0
 800f554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f556:	f7fe f9d7 	bl	800d908 <xQueueGenericSend>
 800f55a:	6278      	str	r0, [r7, #36]	; 0x24
 800f55c:	e012      	b.n	800f584 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f55e:	4b0c      	ldr	r3, [pc, #48]	; (800f590 <xTimerGenericCommand+0x98>)
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f107 0110 	add.w	r1, r7, #16
 800f566:	2300      	movs	r3, #0
 800f568:	2200      	movs	r2, #0
 800f56a:	f7fe f9cd 	bl	800d908 <xQueueGenericSend>
 800f56e:	6278      	str	r0, [r7, #36]	; 0x24
 800f570:	e008      	b.n	800f584 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f572:	4b07      	ldr	r3, [pc, #28]	; (800f590 <xTimerGenericCommand+0x98>)
 800f574:	6818      	ldr	r0, [r3, #0]
 800f576:	f107 0110 	add.w	r1, r7, #16
 800f57a:	2300      	movs	r3, #0
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	f7fe fac1 	bl	800db04 <xQueueGenericSendFromISR>
 800f582:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f586:	4618      	mov	r0, r3
 800f588:	3728      	adds	r7, #40	; 0x28
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20001290 	.word	0x20001290

0800f594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af02      	add	r7, sp, #8
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f59e:	4b22      	ldr	r3, [pc, #136]	; (800f628 <prvProcessExpiredTimer+0x94>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	3304      	adds	r3, #4
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fd fff1 	bl	800d594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5b8:	f003 0304 	and.w	r3, r3, #4
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d022      	beq.n	800f606 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	699a      	ldr	r2, [r3, #24]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	18d1      	adds	r1, r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	683a      	ldr	r2, [r7, #0]
 800f5cc:	6978      	ldr	r0, [r7, #20]
 800f5ce:	f000 f8d1 	bl	800f774 <prvInsertTimerInActiveList>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d01f      	beq.n	800f618 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5d8:	2300      	movs	r3, #0
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	2300      	movs	r3, #0
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	6978      	ldr	r0, [r7, #20]
 800f5e4:	f7ff ff88 	bl	800f4f8 <xTimerGenericCommand>
 800f5e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d113      	bne.n	800f618 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	60fb      	str	r3, [r7, #12]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f60c:	f023 0301 	bic.w	r3, r3, #1
 800f610:	b2da      	uxtb	r2, r3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	6978      	ldr	r0, [r7, #20]
 800f61e:	4798      	blx	r3
}
 800f620:	bf00      	nop
 800f622:	3718      	adds	r7, #24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	20001288 	.word	0x20001288

0800f62c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f634:	f107 0308 	add.w	r3, r7, #8
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 f857 	bl	800f6ec <prvGetNextExpireTime>
 800f63e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	4619      	mov	r1, r3
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f000 f803 	bl	800f650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f64a:	f000 f8d5 	bl	800f7f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f64e:	e7f1      	b.n	800f634 <prvTimerTask+0x8>

0800f650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f65a:	f7ff f92b 	bl	800e8b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f65e:	f107 0308 	add.w	r3, r7, #8
 800f662:	4618      	mov	r0, r3
 800f664:	f000 f866 	bl	800f734 <prvSampleTimeNow>
 800f668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d130      	bne.n	800f6d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10a      	bne.n	800f68c <prvProcessTimerOrBlockTask+0x3c>
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d806      	bhi.n	800f68c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f67e:	f7ff f927 	bl	800e8d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f682:	68f9      	ldr	r1, [r7, #12]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff ff85 	bl	800f594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f68a:	e024      	b.n	800f6d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d008      	beq.n	800f6a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f692:	4b13      	ldr	r3, [pc, #76]	; (800f6e0 <prvProcessTimerOrBlockTask+0x90>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d101      	bne.n	800f6a0 <prvProcessTimerOrBlockTask+0x50>
 800f69c:	2301      	movs	r3, #1
 800f69e:	e000      	b.n	800f6a2 <prvProcessTimerOrBlockTask+0x52>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f6a4:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <prvProcessTimerOrBlockTask+0x94>)
 800f6a6:	6818      	ldr	r0, [r3, #0]
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	f7fe fdfd 	bl	800e2b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6b6:	f7ff f90b 	bl	800e8d0 <xTaskResumeAll>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10a      	bne.n	800f6d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6c0:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <prvProcessTimerOrBlockTask+0x98>)
 800f6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	f3bf 8f6f 	isb	sy
}
 800f6d0:	e001      	b.n	800f6d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6d2:	f7ff f8fd 	bl	800e8d0 <xTaskResumeAll>
}
 800f6d6:	bf00      	nop
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	2000128c 	.word	0x2000128c
 800f6e4:	20001290 	.word	0x20001290
 800f6e8:	e000ed04 	.word	0xe000ed04

0800f6ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b085      	sub	sp, #20
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6f4:	4b0e      	ldr	r3, [pc, #56]	; (800f730 <prvGetNextExpireTime+0x44>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <prvGetNextExpireTime+0x16>
 800f6fe:	2201      	movs	r2, #1
 800f700:	e000      	b.n	800f704 <prvGetNextExpireTime+0x18>
 800f702:	2200      	movs	r2, #0
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d105      	bne.n	800f71c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f710:	4b07      	ldr	r3, [pc, #28]	; (800f730 <prvGetNextExpireTime+0x44>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e001      	b.n	800f720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f71c:	2300      	movs	r3, #0
 800f71e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f720:	68fb      	ldr	r3, [r7, #12]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	20001288 	.word	0x20001288

0800f734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f73c:	f7ff f966 	bl	800ea0c <xTaskGetTickCount>
 800f740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f742:	4b0b      	ldr	r3, [pc, #44]	; (800f770 <prvSampleTimeNow+0x3c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d205      	bcs.n	800f758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f74c:	f000 f936 	bl	800f9bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	e002      	b.n	800f75e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f75e:	4a04      	ldr	r2, [pc, #16]	; (800f770 <prvSampleTimeNow+0x3c>)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f764:	68fb      	ldr	r3, [r7, #12]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20001298 	.word	0x20001298

0800f774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b086      	sub	sp, #24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
 800f780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f782:	2300      	movs	r3, #0
 800f784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	429a      	cmp	r2, r3
 800f798:	d812      	bhi.n	800f7c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	1ad2      	subs	r2, r2, r3
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	699b      	ldr	r3, [r3, #24]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d302      	bcc.n	800f7ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	617b      	str	r3, [r7, #20]
 800f7ac:	e01b      	b.n	800f7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7ae:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <prvInsertTimerInActiveList+0x7c>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	3304      	adds	r3, #4
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	f7fd feb2 	bl	800d522 <vListInsert>
 800f7be:	e012      	b.n	800f7e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d206      	bcs.n	800f7d6 <prvInsertTimerInActiveList+0x62>
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d302      	bcc.n	800f7d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	617b      	str	r3, [r7, #20]
 800f7d4:	e007      	b.n	800f7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7d6:	4b07      	ldr	r3, [pc, #28]	; (800f7f4 <prvInsertTimerInActiveList+0x80>)
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3304      	adds	r3, #4
 800f7de:	4619      	mov	r1, r3
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	f7fd fe9e 	bl	800d522 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7e6:	697b      	ldr	r3, [r7, #20]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3718      	adds	r7, #24
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	2000128c 	.word	0x2000128c
 800f7f4:	20001288 	.word	0x20001288

0800f7f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08e      	sub	sp, #56	; 0x38
 800f7fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7fe:	e0ca      	b.n	800f996 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	da18      	bge.n	800f838 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f806:	1d3b      	adds	r3, r7, #4
 800f808:	3304      	adds	r3, #4
 800f80a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d10a      	bne.n	800f828 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	61fb      	str	r3, [r7, #28]
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f82e:	6850      	ldr	r0, [r2, #4]
 800f830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f832:	6892      	ldr	r2, [r2, #8]
 800f834:	4611      	mov	r1, r2
 800f836:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f2c0 80aa 	blt.w	800f994 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f846:	695b      	ldr	r3, [r3, #20]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d004      	beq.n	800f856 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	3304      	adds	r3, #4
 800f850:	4618      	mov	r0, r3
 800f852:	f7fd fe9f 	bl	800d594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f856:	463b      	mov	r3, r7
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff ff6b 	bl	800f734 <prvSampleTimeNow>
 800f85e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b09      	cmp	r3, #9
 800f864:	f200 8097 	bhi.w	800f996 <prvProcessReceivedCommands+0x19e>
 800f868:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <prvProcessReceivedCommands+0x78>)
 800f86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86e:	bf00      	nop
 800f870:	0800f899 	.word	0x0800f899
 800f874:	0800f899 	.word	0x0800f899
 800f878:	0800f899 	.word	0x0800f899
 800f87c:	0800f90d 	.word	0x0800f90d
 800f880:	0800f921 	.word	0x0800f921
 800f884:	0800f96b 	.word	0x0800f96b
 800f888:	0800f899 	.word	0x0800f899
 800f88c:	0800f899 	.word	0x0800f899
 800f890:	0800f90d 	.word	0x0800f90d
 800f894:	0800f921 	.word	0x0800f921
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f89e:	f043 0301 	orr.w	r3, r3, #1
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ae:	699b      	ldr	r3, [r3, #24]
 800f8b0:	18d1      	adds	r1, r2, r3
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8b8:	f7ff ff5c 	bl	800f774 <prvInsertTimerInActiveList>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d069      	beq.n	800f996 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8d0:	f003 0304 	and.w	r3, r3, #4
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d05e      	beq.n	800f996 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8d8:	68ba      	ldr	r2, [r7, #8]
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	699b      	ldr	r3, [r3, #24]
 800f8de:	441a      	add	r2, r3
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	9300      	str	r3, [sp, #0]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8ea:	f7ff fe05 	bl	800f4f8 <xTimerGenericCommand>
 800f8ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d14f      	bne.n	800f996 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	61bb      	str	r3, [r7, #24]
}
 800f908:	bf00      	nop
 800f90a:	e7fe      	b.n	800f90a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f912:	f023 0301 	bic.w	r3, r3, #1
 800f916:	b2da      	uxtb	r2, r3
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f91e:	e03a      	b.n	800f996 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f926:	f043 0301 	orr.w	r3, r3, #1
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f936:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93a:	699b      	ldr	r3, [r3, #24]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10a      	bne.n	800f956 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f944:	f383 8811 	msr	BASEPRI, r3
 800f948:	f3bf 8f6f 	isb	sy
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	617b      	str	r3, [r7, #20]
}
 800f952:	bf00      	nop
 800f954:	e7fe      	b.n	800f954 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	699a      	ldr	r2, [r3, #24]
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	18d1      	adds	r1, r2, r3
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f964:	f7ff ff06 	bl	800f774 <prvInsertTimerInActiveList>
					break;
 800f968:	e015      	b.n	800f996 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f970:	f003 0302 	and.w	r3, r3, #2
 800f974:	2b00      	cmp	r3, #0
 800f976:	d103      	bne.n	800f980 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f97a:	f000 fbd9 	bl	8010130 <vPortFree>
 800f97e:	e00a      	b.n	800f996 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f986:	f023 0301 	bic.w	r3, r3, #1
 800f98a:	b2da      	uxtb	r2, r3
 800f98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f992:	e000      	b.n	800f996 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f996:	4b08      	ldr	r3, [pc, #32]	; (800f9b8 <prvProcessReceivedCommands+0x1c0>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	1d39      	adds	r1, r7, #4
 800f99c:	2200      	movs	r2, #0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe f948 	bl	800dc34 <xQueueReceive>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f47f af2a 	bne.w	800f800 <prvProcessReceivedCommands+0x8>
	}
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	3730      	adds	r7, #48	; 0x30
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20001290 	.word	0x20001290

0800f9bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b088      	sub	sp, #32
 800f9c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9c2:	e048      	b.n	800fa56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9c4:	4b2d      	ldr	r3, [pc, #180]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ce:	4b2b      	ldr	r3, [pc, #172]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fd fdd9 	bl	800d594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d02e      	beq.n	800fa56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	699b      	ldr	r3, [r3, #24]
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	4413      	add	r3, r2
 800fa00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d90e      	bls.n	800fa28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa16:	4b19      	ldr	r3, [pc, #100]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	3304      	adds	r3, #4
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7fd fd7e 	bl	800d522 <vListInsert>
 800fa26:	e016      	b.n	800fa56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa28:	2300      	movs	r3, #0
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	693a      	ldr	r2, [r7, #16]
 800fa30:	2100      	movs	r1, #0
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f7ff fd60 	bl	800f4f8 <xTimerGenericCommand>
 800fa38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10a      	bne.n	800fa56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa44:	f383 8811 	msr	BASEPRI, r3
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	603b      	str	r3, [r7, #0]
}
 800fa52:	bf00      	nop
 800fa54:	e7fe      	b.n	800fa54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa56:	4b09      	ldr	r3, [pc, #36]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d1b1      	bne.n	800f9c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa60:	4b06      	ldr	r3, [pc, #24]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa66:	4b06      	ldr	r3, [pc, #24]	; (800fa80 <prvSwitchTimerLists+0xc4>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a04      	ldr	r2, [pc, #16]	; (800fa7c <prvSwitchTimerLists+0xc0>)
 800fa6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa6e:	4a04      	ldr	r2, [pc, #16]	; (800fa80 <prvSwitchTimerLists+0xc4>)
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	6013      	str	r3, [r2, #0]
}
 800fa74:	bf00      	nop
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	20001288 	.word	0x20001288
 800fa80:	2000128c 	.word	0x2000128c

0800fa84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa8a:	f000 f96b 	bl	800fd64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa8e:	4b15      	ldr	r3, [pc, #84]	; (800fae4 <prvCheckForValidListAndQueue+0x60>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d120      	bne.n	800fad8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa96:	4814      	ldr	r0, [pc, #80]	; (800fae8 <prvCheckForValidListAndQueue+0x64>)
 800fa98:	f7fd fcf2 	bl	800d480 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa9c:	4813      	ldr	r0, [pc, #76]	; (800faec <prvCheckForValidListAndQueue+0x68>)
 800fa9e:	f7fd fcef 	bl	800d480 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800faa2:	4b13      	ldr	r3, [pc, #76]	; (800faf0 <prvCheckForValidListAndQueue+0x6c>)
 800faa4:	4a10      	ldr	r2, [pc, #64]	; (800fae8 <prvCheckForValidListAndQueue+0x64>)
 800faa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800faa8:	4b12      	ldr	r3, [pc, #72]	; (800faf4 <prvCheckForValidListAndQueue+0x70>)
 800faaa:	4a10      	ldr	r2, [pc, #64]	; (800faec <prvCheckForValidListAndQueue+0x68>)
 800faac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800faae:	2300      	movs	r3, #0
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	4b11      	ldr	r3, [pc, #68]	; (800faf8 <prvCheckForValidListAndQueue+0x74>)
 800fab4:	4a11      	ldr	r2, [pc, #68]	; (800fafc <prvCheckForValidListAndQueue+0x78>)
 800fab6:	2110      	movs	r1, #16
 800fab8:	200a      	movs	r0, #10
 800faba:	f7fd fdfd 	bl	800d6b8 <xQueueGenericCreateStatic>
 800fabe:	4603      	mov	r3, r0
 800fac0:	4a08      	ldr	r2, [pc, #32]	; (800fae4 <prvCheckForValidListAndQueue+0x60>)
 800fac2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fac4:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <prvCheckForValidListAndQueue+0x60>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d005      	beq.n	800fad8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800facc:	4b05      	ldr	r3, [pc, #20]	; (800fae4 <prvCheckForValidListAndQueue+0x60>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	490b      	ldr	r1, [pc, #44]	; (800fb00 <prvCheckForValidListAndQueue+0x7c>)
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fbc2 	bl	800e25c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fad8:	f000 f974 	bl	800fdc4 <vPortExitCritical>
}
 800fadc:	bf00      	nop
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	20001290 	.word	0x20001290
 800fae8:	20001260 	.word	0x20001260
 800faec:	20001274 	.word	0x20001274
 800faf0:	20001288 	.word	0x20001288
 800faf4:	2000128c 	.word	0x2000128c
 800faf8:	2000133c 	.word	0x2000133c
 800fafc:	2000129c 	.word	0x2000129c
 800fb00:	0801631c 	.word	0x0801631c

0800fb04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3b04      	subs	r3, #4
 800fb14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3b04      	subs	r3, #4
 800fb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	f023 0201 	bic.w	r2, r3, #1
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3b04      	subs	r3, #4
 800fb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb34:	4a0c      	ldr	r2, [pc, #48]	; (800fb68 <pxPortInitialiseStack+0x64>)
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3b14      	subs	r3, #20
 800fb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3b04      	subs	r3, #4
 800fb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f06f 0202 	mvn.w	r2, #2
 800fb52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	3b20      	subs	r3, #32
 800fb58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	0800fb6d 	.word	0x0800fb6d

0800fb6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb72:	2300      	movs	r3, #0
 800fb74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb76:	4b12      	ldr	r3, [pc, #72]	; (800fbc0 <prvTaskExitError+0x54>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7e:	d00a      	beq.n	800fb96 <prvTaskExitError+0x2a>
	__asm volatile
 800fb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	60fb      	str	r3, [r7, #12]
}
 800fb92:	bf00      	nop
 800fb94:	e7fe      	b.n	800fb94 <prvTaskExitError+0x28>
	__asm volatile
 800fb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9a:	f383 8811 	msr	BASEPRI, r3
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f3bf 8f4f 	dsb	sy
 800fba6:	60bb      	str	r3, [r7, #8]
}
 800fba8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fbaa:	bf00      	nop
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d0fc      	beq.n	800fbac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fbb2:	bf00      	nop
 800fbb4:	bf00      	nop
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	2000011c 	.word	0x2000011c
	...

0800fbd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbd0:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <pxCurrentTCBConst2>)
 800fbd2:	6819      	ldr	r1, [r3, #0]
 800fbd4:	6808      	ldr	r0, [r1, #0]
 800fbd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbda:	f380 8809 	msr	PSP, r0
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f04f 0000 	mov.w	r0, #0
 800fbe6:	f380 8811 	msr	BASEPRI, r0
 800fbea:	4770      	bx	lr
 800fbec:	f3af 8000 	nop.w

0800fbf0 <pxCurrentTCBConst2>:
 800fbf0:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop

0800fbf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbf8:	4808      	ldr	r0, [pc, #32]	; (800fc1c <prvPortStartFirstTask+0x24>)
 800fbfa:	6800      	ldr	r0, [r0, #0]
 800fbfc:	6800      	ldr	r0, [r0, #0]
 800fbfe:	f380 8808 	msr	MSP, r0
 800fc02:	f04f 0000 	mov.w	r0, #0
 800fc06:	f380 8814 	msr	CONTROL, r0
 800fc0a:	b662      	cpsie	i
 800fc0c:	b661      	cpsie	f
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	df00      	svc	0
 800fc18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc1a:	bf00      	nop
 800fc1c:	e000ed08 	.word	0xe000ed08

0800fc20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc26:	4b46      	ldr	r3, [pc, #280]	; (800fd40 <xPortStartScheduler+0x120>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a46      	ldr	r2, [pc, #280]	; (800fd44 <xPortStartScheduler+0x124>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d10a      	bne.n	800fc46 <xPortStartScheduler+0x26>
	__asm volatile
 800fc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc34:	f383 8811 	msr	BASEPRI, r3
 800fc38:	f3bf 8f6f 	isb	sy
 800fc3c:	f3bf 8f4f 	dsb	sy
 800fc40:	613b      	str	r3, [r7, #16]
}
 800fc42:	bf00      	nop
 800fc44:	e7fe      	b.n	800fc44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc46:	4b3e      	ldr	r3, [pc, #248]	; (800fd40 <xPortStartScheduler+0x120>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a3f      	ldr	r2, [pc, #252]	; (800fd48 <xPortStartScheduler+0x128>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d10a      	bne.n	800fc66 <xPortStartScheduler+0x46>
	__asm volatile
 800fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	60fb      	str	r3, [r7, #12]
}
 800fc62:	bf00      	nop
 800fc64:	e7fe      	b.n	800fc64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc66:	4b39      	ldr	r3, [pc, #228]	; (800fd4c <xPortStartScheduler+0x12c>)
 800fc68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	22ff      	movs	r2, #255	; 0xff
 800fc76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	4b31      	ldr	r3, [pc, #196]	; (800fd50 <xPortStartScheduler+0x130>)
 800fc8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc8e:	4b31      	ldr	r3, [pc, #196]	; (800fd54 <xPortStartScheduler+0x134>)
 800fc90:	2207      	movs	r2, #7
 800fc92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc94:	e009      	b.n	800fcaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fc96:	4b2f      	ldr	r3, [pc, #188]	; (800fd54 <xPortStartScheduler+0x134>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	4a2d      	ldr	r2, [pc, #180]	; (800fd54 <xPortStartScheduler+0x134>)
 800fc9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	005b      	lsls	r3, r3, #1
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcaa:	78fb      	ldrb	r3, [r7, #3]
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb2:	2b80      	cmp	r3, #128	; 0x80
 800fcb4:	d0ef      	beq.n	800fc96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcb6:	4b27      	ldr	r3, [pc, #156]	; (800fd54 <xPortStartScheduler+0x134>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f1c3 0307 	rsb	r3, r3, #7
 800fcbe:	2b04      	cmp	r3, #4
 800fcc0:	d00a      	beq.n	800fcd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	60bb      	str	r3, [r7, #8]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcd8:	4b1e      	ldr	r3, [pc, #120]	; (800fd54 <xPortStartScheduler+0x134>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	021b      	lsls	r3, r3, #8
 800fcde:	4a1d      	ldr	r2, [pc, #116]	; (800fd54 <xPortStartScheduler+0x134>)
 800fce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fce2:	4b1c      	ldr	r3, [pc, #112]	; (800fd54 <xPortStartScheduler+0x134>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcea:	4a1a      	ldr	r2, [pc, #104]	; (800fd54 <xPortStartScheduler+0x134>)
 800fcec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcf6:	4b18      	ldr	r3, [pc, #96]	; (800fd58 <xPortStartScheduler+0x138>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a17      	ldr	r2, [pc, #92]	; (800fd58 <xPortStartScheduler+0x138>)
 800fcfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd02:	4b15      	ldr	r3, [pc, #84]	; (800fd58 <xPortStartScheduler+0x138>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a14      	ldr	r2, [pc, #80]	; (800fd58 <xPortStartScheduler+0x138>)
 800fd08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd0e:	f000 f8dd 	bl	800fecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd12:	4b12      	ldr	r3, [pc, #72]	; (800fd5c <xPortStartScheduler+0x13c>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd18:	f000 f8fc 	bl	800ff14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd1c:	4b10      	ldr	r3, [pc, #64]	; (800fd60 <xPortStartScheduler+0x140>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a0f      	ldr	r2, [pc, #60]	; (800fd60 <xPortStartScheduler+0x140>)
 800fd22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd28:	f7ff ff66 	bl	800fbf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd2c:	f7fe ff38 	bl	800eba0 <vTaskSwitchContext>
	prvTaskExitError();
 800fd30:	f7ff ff1c 	bl	800fb6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	e000ed00 	.word	0xe000ed00
 800fd44:	410fc271 	.word	0x410fc271
 800fd48:	410fc270 	.word	0x410fc270
 800fd4c:	e000e400 	.word	0xe000e400
 800fd50:	2000138c 	.word	0x2000138c
 800fd54:	20001390 	.word	0x20001390
 800fd58:	e000ed20 	.word	0xe000ed20
 800fd5c:	2000011c 	.word	0x2000011c
 800fd60:	e000ef34 	.word	0xe000ef34

0800fd64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	607b      	str	r3, [r7, #4]
}
 800fd7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd7e:	4b0f      	ldr	r3, [pc, #60]	; (800fdbc <vPortEnterCritical+0x58>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3301      	adds	r3, #1
 800fd84:	4a0d      	ldr	r2, [pc, #52]	; (800fdbc <vPortEnterCritical+0x58>)
 800fd86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd88:	4b0c      	ldr	r3, [pc, #48]	; (800fdbc <vPortEnterCritical+0x58>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d10f      	bne.n	800fdb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd90:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <vPortEnterCritical+0x5c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00a      	beq.n	800fdb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	603b      	str	r3, [r7, #0]
}
 800fdac:	bf00      	nop
 800fdae:	e7fe      	b.n	800fdae <vPortEnterCritical+0x4a>
	}
}
 800fdb0:	bf00      	nop
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	2000011c 	.word	0x2000011c
 800fdc0:	e000ed04 	.word	0xe000ed04

0800fdc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdca:	4b12      	ldr	r3, [pc, #72]	; (800fe14 <vPortExitCritical+0x50>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10a      	bne.n	800fde8 <vPortExitCritical+0x24>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	607b      	str	r3, [r7, #4]
}
 800fde4:	bf00      	nop
 800fde6:	e7fe      	b.n	800fde6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <vPortExitCritical+0x50>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	3b01      	subs	r3, #1
 800fdee:	4a09      	ldr	r2, [pc, #36]	; (800fe14 <vPortExitCritical+0x50>)
 800fdf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdf2:	4b08      	ldr	r3, [pc, #32]	; (800fe14 <vPortExitCritical+0x50>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d105      	bne.n	800fe06 <vPortExitCritical+0x42>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	f383 8811 	msr	BASEPRI, r3
}
 800fe04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	2000011c 	.word	0x2000011c
	...

0800fe20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe20:	f3ef 8009 	mrs	r0, PSP
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	4b15      	ldr	r3, [pc, #84]	; (800fe80 <pxCurrentTCBConst>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	f01e 0f10 	tst.w	lr, #16
 800fe30:	bf08      	it	eq
 800fe32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3a:	6010      	str	r0, [r2, #0]
 800fe3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fe44:	f380 8811 	msr	BASEPRI, r0
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f7fe fea6 	bl	800eba0 <vTaskSwitchContext>
 800fe54:	f04f 0000 	mov.w	r0, #0
 800fe58:	f380 8811 	msr	BASEPRI, r0
 800fe5c:	bc09      	pop	{r0, r3}
 800fe5e:	6819      	ldr	r1, [r3, #0]
 800fe60:	6808      	ldr	r0, [r1, #0]
 800fe62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe66:	f01e 0f10 	tst.w	lr, #16
 800fe6a:	bf08      	it	eq
 800fe6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe70:	f380 8809 	msr	PSP, r0
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	f3af 8000 	nop.w

0800fe80 <pxCurrentTCBConst>:
 800fe80:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe84:	bf00      	nop
 800fe86:	bf00      	nop

0800fe88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	607b      	str	r3, [r7, #4]
}
 800fea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fea2:	f7fe fdc3 	bl	800ea2c <xTaskIncrementTick>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d003      	beq.n	800feb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800feac:	4b06      	ldr	r3, [pc, #24]	; (800fec8 <SysTick_Handler+0x40>)
 800feae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	2300      	movs	r3, #0
 800feb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	f383 8811 	msr	BASEPRI, r3
}
 800febe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	e000ed04 	.word	0xe000ed04

0800fecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fecc:	b480      	push	{r7}
 800fece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fed0:	4b0b      	ldr	r3, [pc, #44]	; (800ff00 <vPortSetupTimerInterrupt+0x34>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fed6:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <vPortSetupTimerInterrupt+0x38>)
 800fed8:	2200      	movs	r2, #0
 800feda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fedc:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <vPortSetupTimerInterrupt+0x3c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4a0a      	ldr	r2, [pc, #40]	; (800ff0c <vPortSetupTimerInterrupt+0x40>)
 800fee2:	fba2 2303 	umull	r2, r3, r2, r3
 800fee6:	099b      	lsrs	r3, r3, #6
 800fee8:	4a09      	ldr	r2, [pc, #36]	; (800ff10 <vPortSetupTimerInterrupt+0x44>)
 800feea:	3b01      	subs	r3, #1
 800feec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800feee:	4b04      	ldr	r3, [pc, #16]	; (800ff00 <vPortSetupTimerInterrupt+0x34>)
 800fef0:	2207      	movs	r2, #7
 800fef2:	601a      	str	r2, [r3, #0]
}
 800fef4:	bf00      	nop
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	e000e010 	.word	0xe000e010
 800ff04:	e000e018 	.word	0xe000e018
 800ff08:	20000000 	.word	0x20000000
 800ff0c:	10624dd3 	.word	0x10624dd3
 800ff10:	e000e014 	.word	0xe000e014

0800ff14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ff24 <vPortEnableVFP+0x10>
 800ff18:	6801      	ldr	r1, [r0, #0]
 800ff1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff1e:	6001      	str	r1, [r0, #0]
 800ff20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff22:	bf00      	nop
 800ff24:	e000ed88 	.word	0xe000ed88

0800ff28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff2e:	f3ef 8305 	mrs	r3, IPSR
 800ff32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b0f      	cmp	r3, #15
 800ff38:	d914      	bls.n	800ff64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff3a:	4a17      	ldr	r2, [pc, #92]	; (800ff98 <vPortValidateInterruptPriority+0x70>)
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	4413      	add	r3, r2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff44:	4b15      	ldr	r3, [pc, #84]	; (800ff9c <vPortValidateInterruptPriority+0x74>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	7afa      	ldrb	r2, [r7, #11]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d20a      	bcs.n	800ff64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	607b      	str	r3, [r7, #4]
}
 800ff60:	bf00      	nop
 800ff62:	e7fe      	b.n	800ff62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff64:	4b0e      	ldr	r3, [pc, #56]	; (800ffa0 <vPortValidateInterruptPriority+0x78>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff6c:	4b0d      	ldr	r3, [pc, #52]	; (800ffa4 <vPortValidateInterruptPriority+0x7c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d90a      	bls.n	800ff8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ff74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff78:	f383 8811 	msr	BASEPRI, r3
 800ff7c:	f3bf 8f6f 	isb	sy
 800ff80:	f3bf 8f4f 	dsb	sy
 800ff84:	603b      	str	r3, [r7, #0]
}
 800ff86:	bf00      	nop
 800ff88:	e7fe      	b.n	800ff88 <vPortValidateInterruptPriority+0x60>
	}
 800ff8a:	bf00      	nop
 800ff8c:	3714      	adds	r7, #20
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	e000e3f0 	.word	0xe000e3f0
 800ff9c:	2000138c 	.word	0x2000138c
 800ffa0:	e000ed0c 	.word	0xe000ed0c
 800ffa4:	20001390 	.word	0x20001390

0800ffa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffb4:	f7fe fc7e 	bl	800e8b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffb8:	4b58      	ldr	r3, [pc, #352]	; (801011c <pvPortMalloc+0x174>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d101      	bne.n	800ffc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffc0:	f000 f910 	bl	80101e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffc4:	4b56      	ldr	r3, [pc, #344]	; (8010120 <pvPortMalloc+0x178>)
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4013      	ands	r3, r2
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	f040 808e 	bne.w	80100ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d01d      	beq.n	8010014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ffd8:	2208      	movs	r2, #8
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4413      	add	r3, r2
 800ffde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f003 0307 	and.w	r3, r3, #7
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d014      	beq.n	8010014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f023 0307 	bic.w	r3, r3, #7
 800fff0:	3308      	adds	r3, #8
 800fff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f003 0307 	and.w	r3, r3, #7
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00a      	beq.n	8010014 <pvPortMalloc+0x6c>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	617b      	str	r3, [r7, #20]
}
 8010010:	bf00      	nop
 8010012:	e7fe      	b.n	8010012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d069      	beq.n	80100ee <pvPortMalloc+0x146>
 801001a:	4b42      	ldr	r3, [pc, #264]	; (8010124 <pvPortMalloc+0x17c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	429a      	cmp	r2, r3
 8010022:	d864      	bhi.n	80100ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010024:	4b40      	ldr	r3, [pc, #256]	; (8010128 <pvPortMalloc+0x180>)
 8010026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010028:	4b3f      	ldr	r3, [pc, #252]	; (8010128 <pvPortMalloc+0x180>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801002e:	e004      	b.n	801003a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	429a      	cmp	r2, r3
 8010042:	d903      	bls.n	801004c <pvPortMalloc+0xa4>
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1f1      	bne.n	8010030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801004c:	4b33      	ldr	r3, [pc, #204]	; (801011c <pvPortMalloc+0x174>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010052:	429a      	cmp	r2, r3
 8010054:	d04b      	beq.n	80100ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2208      	movs	r2, #8
 801005c:	4413      	add	r3, r2
 801005e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	6a3b      	ldr	r3, [r7, #32]
 8010066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	1ad2      	subs	r2, r2, r3
 8010070:	2308      	movs	r3, #8
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	429a      	cmp	r2, r3
 8010076:	d91f      	bls.n	80100b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4413      	add	r3, r2
 801007e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	f003 0307 	and.w	r3, r3, #7
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00a      	beq.n	80100a0 <pvPortMalloc+0xf8>
	__asm volatile
 801008a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008e:	f383 8811 	msr	BASEPRI, r3
 8010092:	f3bf 8f6f 	isb	sy
 8010096:	f3bf 8f4f 	dsb	sy
 801009a:	613b      	str	r3, [r7, #16]
}
 801009c:	bf00      	nop
 801009e:	e7fe      	b.n	801009e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a2:	685a      	ldr	r2, [r3, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	1ad2      	subs	r2, r2, r3
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100b2:	69b8      	ldr	r0, [r7, #24]
 80100b4:	f000 f8f8 	bl	80102a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100b8:	4b1a      	ldr	r3, [pc, #104]	; (8010124 <pvPortMalloc+0x17c>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	4a18      	ldr	r2, [pc, #96]	; (8010124 <pvPortMalloc+0x17c>)
 80100c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100c6:	4b17      	ldr	r3, [pc, #92]	; (8010124 <pvPortMalloc+0x17c>)
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	4b18      	ldr	r3, [pc, #96]	; (801012c <pvPortMalloc+0x184>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d203      	bcs.n	80100da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100d2:	4b14      	ldr	r3, [pc, #80]	; (8010124 <pvPortMalloc+0x17c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a15      	ldr	r2, [pc, #84]	; (801012c <pvPortMalloc+0x184>)
 80100d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	4b10      	ldr	r3, [pc, #64]	; (8010120 <pvPortMalloc+0x178>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	431a      	orrs	r2, r3
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100ee:	f7fe fbef 	bl	800e8d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	f003 0307 	and.w	r3, r3, #7
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00a      	beq.n	8010112 <pvPortMalloc+0x16a>
	__asm volatile
 80100fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	60fb      	str	r3, [r7, #12]
}
 801010e:	bf00      	nop
 8010110:	e7fe      	b.n	8010110 <pvPortMalloc+0x168>
	return pvReturn;
 8010112:	69fb      	ldr	r3, [r7, #28]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3728      	adds	r7, #40	; 0x28
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	20004f9c 	.word	0x20004f9c
 8010120:	20004fa8 	.word	0x20004fa8
 8010124:	20004fa0 	.word	0x20004fa0
 8010128:	20004f94 	.word	0x20004f94
 801012c:	20004fa4 	.word	0x20004fa4

08010130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d048      	beq.n	80101d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010142:	2308      	movs	r3, #8
 8010144:	425b      	negs	r3, r3
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	4413      	add	r3, r2
 801014a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	4b21      	ldr	r3, [pc, #132]	; (80101dc <vPortFree+0xac>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4013      	ands	r3, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10a      	bne.n	8010174 <vPortFree+0x44>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60fb      	str	r3, [r7, #12]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00a      	beq.n	8010192 <vPortFree+0x62>
	__asm volatile
 801017c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010180:	f383 8811 	msr	BASEPRI, r3
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	60bb      	str	r3, [r7, #8]
}
 801018e:	bf00      	nop
 8010190:	e7fe      	b.n	8010190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	685a      	ldr	r2, [r3, #4]
 8010196:	4b11      	ldr	r3, [pc, #68]	; (80101dc <vPortFree+0xac>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4013      	ands	r3, r2
 801019c:	2b00      	cmp	r3, #0
 801019e:	d019      	beq.n	80101d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d115      	bne.n	80101d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	685a      	ldr	r2, [r3, #4]
 80101ac:	4b0b      	ldr	r3, [pc, #44]	; (80101dc <vPortFree+0xac>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	43db      	mvns	r3, r3
 80101b2:	401a      	ands	r2, r3
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101b8:	f7fe fb7c 	bl	800e8b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	685a      	ldr	r2, [r3, #4]
 80101c0:	4b07      	ldr	r3, [pc, #28]	; (80101e0 <vPortFree+0xb0>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4413      	add	r3, r2
 80101c6:	4a06      	ldr	r2, [pc, #24]	; (80101e0 <vPortFree+0xb0>)
 80101c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101ca:	6938      	ldr	r0, [r7, #16]
 80101cc:	f000 f86c 	bl	80102a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80101d0:	f7fe fb7e 	bl	800e8d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101d4:	bf00      	nop
 80101d6:	3718      	adds	r7, #24
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	20004fa8 	.word	0x20004fa8
 80101e0:	20004fa0 	.word	0x20004fa0

080101e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80101ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101f0:	4b27      	ldr	r3, [pc, #156]	; (8010290 <prvHeapInit+0xac>)
 80101f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f003 0307 	and.w	r3, r3, #7
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00c      	beq.n	8010218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	3307      	adds	r3, #7
 8010202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f023 0307 	bic.w	r3, r3, #7
 801020a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801020c:	68ba      	ldr	r2, [r7, #8]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	1ad3      	subs	r3, r2, r3
 8010212:	4a1f      	ldr	r2, [pc, #124]	; (8010290 <prvHeapInit+0xac>)
 8010214:	4413      	add	r3, r2
 8010216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801021c:	4a1d      	ldr	r2, [pc, #116]	; (8010294 <prvHeapInit+0xb0>)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010222:	4b1c      	ldr	r3, [pc, #112]	; (8010294 <prvHeapInit+0xb0>)
 8010224:	2200      	movs	r2, #0
 8010226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	4413      	add	r3, r2
 801022e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010230:	2208      	movs	r2, #8
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	1a9b      	subs	r3, r3, r2
 8010236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f023 0307 	bic.w	r3, r3, #7
 801023e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	4a15      	ldr	r2, [pc, #84]	; (8010298 <prvHeapInit+0xb4>)
 8010244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010246:	4b14      	ldr	r3, [pc, #80]	; (8010298 <prvHeapInit+0xb4>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2200      	movs	r2, #0
 801024c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801024e:	4b12      	ldr	r3, [pc, #72]	; (8010298 <prvHeapInit+0xb4>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2200      	movs	r2, #0
 8010254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	1ad2      	subs	r2, r2, r3
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010264:	4b0c      	ldr	r3, [pc, #48]	; (8010298 <prvHeapInit+0xb4>)
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	4a0a      	ldr	r2, [pc, #40]	; (801029c <prvHeapInit+0xb8>)
 8010272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	4a09      	ldr	r2, [pc, #36]	; (80102a0 <prvHeapInit+0xbc>)
 801027a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <prvHeapInit+0xc0>)
 801027e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010282:	601a      	str	r2, [r3, #0]
}
 8010284:	bf00      	nop
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr
 8010290:	20001394 	.word	0x20001394
 8010294:	20004f94 	.word	0x20004f94
 8010298:	20004f9c 	.word	0x20004f9c
 801029c:	20004fa4 	.word	0x20004fa4
 80102a0:	20004fa0 	.word	0x20004fa0
 80102a4:	20004fa8 	.word	0x20004fa8

080102a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102b0:	4b28      	ldr	r3, [pc, #160]	; (8010354 <prvInsertBlockIntoFreeList+0xac>)
 80102b2:	60fb      	str	r3, [r7, #12]
 80102b4:	e002      	b.n	80102bc <prvInsertBlockIntoFreeList+0x14>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60fb      	str	r3, [r7, #12]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d8f7      	bhi.n	80102b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	4413      	add	r3, r2
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d108      	bne.n	80102ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	685a      	ldr	r2, [r3, #4]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	441a      	add	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	68ba      	ldr	r2, [r7, #8]
 80102f4:	441a      	add	r2, r3
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d118      	bne.n	8010330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	4b15      	ldr	r3, [pc, #84]	; (8010358 <prvInsertBlockIntoFreeList+0xb0>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	429a      	cmp	r2, r3
 8010308:	d00d      	beq.n	8010326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685a      	ldr	r2, [r3, #4]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	441a      	add	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	601a      	str	r2, [r3, #0]
 8010324:	e008      	b.n	8010338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010326:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <prvInsertBlockIntoFreeList+0xb0>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	e003      	b.n	8010338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	429a      	cmp	r2, r3
 801033e:	d002      	beq.n	8010346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010346:	bf00      	nop
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	20004f94 	.word	0x20004f94
 8010358:	20004f9c 	.word	0x20004f9c

0801035c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010360:	2200      	movs	r2, #0
 8010362:	4912      	ldr	r1, [pc, #72]	; (80103ac <MX_USB_DEVICE_Init+0x50>)
 8010364:	4812      	ldr	r0, [pc, #72]	; (80103b0 <MX_USB_DEVICE_Init+0x54>)
 8010366:	f7fb fd51 	bl	800be0c <USBD_Init>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d001      	beq.n	8010374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010370:	f7f1 fe16 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010374:	490f      	ldr	r1, [pc, #60]	; (80103b4 <MX_USB_DEVICE_Init+0x58>)
 8010376:	480e      	ldr	r0, [pc, #56]	; (80103b0 <MX_USB_DEVICE_Init+0x54>)
 8010378:	f7fb fd7e 	bl	800be78 <USBD_RegisterClass>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010382:	f7f1 fe0d 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010386:	490c      	ldr	r1, [pc, #48]	; (80103b8 <MX_USB_DEVICE_Init+0x5c>)
 8010388:	4809      	ldr	r0, [pc, #36]	; (80103b0 <MX_USB_DEVICE_Init+0x54>)
 801038a:	f7fb fcd3 	bl	800bd34 <USBD_CDC_RegisterInterface>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010394:	f7f1 fe04 	bl	8001fa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010398:	4805      	ldr	r0, [pc, #20]	; (80103b0 <MX_USB_DEVICE_Init+0x54>)
 801039a:	f7fb fd8e 	bl	800beba <USBD_Start>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d001      	beq.n	80103a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80103a4:	f7f1 fdfc 	bl	8001fa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80103a8:	bf00      	nop
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	20000134 	.word	0x20000134
 80103b0:	20005590 	.word	0x20005590
 80103b4:	20000018 	.word	0x20000018
 80103b8:	20000120 	.word	0x20000120

080103bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80103c0:	2200      	movs	r2, #0
 80103c2:	4905      	ldr	r1, [pc, #20]	; (80103d8 <CDC_Init_FS+0x1c>)
 80103c4:	4805      	ldr	r0, [pc, #20]	; (80103dc <CDC_Init_FS+0x20>)
 80103c6:	f7fb fcca 	bl	800bd5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80103ca:	4905      	ldr	r1, [pc, #20]	; (80103e0 <CDC_Init_FS+0x24>)
 80103cc:	4803      	ldr	r0, [pc, #12]	; (80103dc <CDC_Init_FS+0x20>)
 80103ce:	f7fb fcdf 	bl	800bd90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80103d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	20006060 	.word	0x20006060
 80103dc:	20005590 	.word	0x20005590
 80103e0:	20005860 	.word	0x20005860

080103e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80103e4:	b480      	push	{r7}
 80103e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80103e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	6039      	str	r1, [r7, #0]
 80103fe:	71fb      	strb	r3, [r7, #7]
 8010400:	4613      	mov	r3, r2
 8010402:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010404:	79fb      	ldrb	r3, [r7, #7]
 8010406:	2b23      	cmp	r3, #35	; 0x23
 8010408:	d84a      	bhi.n	80104a0 <CDC_Control_FS+0xac>
 801040a:	a201      	add	r2, pc, #4	; (adr r2, 8010410 <CDC_Control_FS+0x1c>)
 801040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010410:	080104a1 	.word	0x080104a1
 8010414:	080104a1 	.word	0x080104a1
 8010418:	080104a1 	.word	0x080104a1
 801041c:	080104a1 	.word	0x080104a1
 8010420:	080104a1 	.word	0x080104a1
 8010424:	080104a1 	.word	0x080104a1
 8010428:	080104a1 	.word	0x080104a1
 801042c:	080104a1 	.word	0x080104a1
 8010430:	080104a1 	.word	0x080104a1
 8010434:	080104a1 	.word	0x080104a1
 8010438:	080104a1 	.word	0x080104a1
 801043c:	080104a1 	.word	0x080104a1
 8010440:	080104a1 	.word	0x080104a1
 8010444:	080104a1 	.word	0x080104a1
 8010448:	080104a1 	.word	0x080104a1
 801044c:	080104a1 	.word	0x080104a1
 8010450:	080104a1 	.word	0x080104a1
 8010454:	080104a1 	.word	0x080104a1
 8010458:	080104a1 	.word	0x080104a1
 801045c:	080104a1 	.word	0x080104a1
 8010460:	080104a1 	.word	0x080104a1
 8010464:	080104a1 	.word	0x080104a1
 8010468:	080104a1 	.word	0x080104a1
 801046c:	080104a1 	.word	0x080104a1
 8010470:	080104a1 	.word	0x080104a1
 8010474:	080104a1 	.word	0x080104a1
 8010478:	080104a1 	.word	0x080104a1
 801047c:	080104a1 	.word	0x080104a1
 8010480:	080104a1 	.word	0x080104a1
 8010484:	080104a1 	.word	0x080104a1
 8010488:	080104a1 	.word	0x080104a1
 801048c:	080104a1 	.word	0x080104a1
 8010490:	080104a1 	.word	0x080104a1
 8010494:	080104a1 	.word	0x080104a1
 8010498:	080104a1 	.word	0x080104a1
 801049c:	080104a1 	.word	0x080104a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104a0:	bf00      	nop
  }

  return (USBD_OK);
 80104a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	4805      	ldr	r0, [pc, #20]	; (80104d4 <CDC_Receive_FS+0x24>)
 80104be:	f7fb fc67 	bl	800bd90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80104c2:	4804      	ldr	r0, [pc, #16]	; (80104d4 <CDC_Receive_FS+0x24>)
 80104c4:	f7fb fc78 	bl	800bdb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80104c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20005590 	.word	0x20005590

080104d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80104d8:	b480      	push	{r7}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	4613      	mov	r3, r2
 80104e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80104e6:	2300      	movs	r3, #0
 80104e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80104ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	371c      	adds	r7, #28
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
	...

080104fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	4603      	mov	r3, r0
 8010504:	6039      	str	r1, [r7, #0]
 8010506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	2212      	movs	r2, #18
 801050c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801050e:	4b03      	ldr	r3, [pc, #12]	; (801051c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr
 801051c:	20000150 	.word	0x20000150

08010520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	6039      	str	r1, [r7, #0]
 801052a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	2204      	movs	r2, #4
 8010530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010532:	4b03      	ldr	r3, [pc, #12]	; (8010540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr
 8010540:	20000164 	.word	0x20000164

08010544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	4603      	mov	r3, r0
 801054c:	6039      	str	r1, [r7, #0]
 801054e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010550:	79fb      	ldrb	r3, [r7, #7]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d105      	bne.n	8010562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010556:	683a      	ldr	r2, [r7, #0]
 8010558:	4907      	ldr	r1, [pc, #28]	; (8010578 <USBD_FS_ProductStrDescriptor+0x34>)
 801055a:	4808      	ldr	r0, [pc, #32]	; (801057c <USBD_FS_ProductStrDescriptor+0x38>)
 801055c:	f7fc fc8a 	bl	800ce74 <USBD_GetString>
 8010560:	e004      	b.n	801056c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010562:	683a      	ldr	r2, [r7, #0]
 8010564:	4904      	ldr	r1, [pc, #16]	; (8010578 <USBD_FS_ProductStrDescriptor+0x34>)
 8010566:	4805      	ldr	r0, [pc, #20]	; (801057c <USBD_FS_ProductStrDescriptor+0x38>)
 8010568:	f7fc fc84 	bl	800ce74 <USBD_GetString>
  }
  return USBD_StrDesc;
 801056c:	4b02      	ldr	r3, [pc, #8]	; (8010578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801056e:	4618      	mov	r0, r3
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20006860 	.word	0x20006860
 801057c:	08016324 	.word	0x08016324

08010580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	4603      	mov	r3, r0
 8010588:	6039      	str	r1, [r7, #0]
 801058a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	4904      	ldr	r1, [pc, #16]	; (80105a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010590:	4804      	ldr	r0, [pc, #16]	; (80105a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010592:	f7fc fc6f 	bl	800ce74 <USBD_GetString>
  return USBD_StrDesc;
 8010596:	4b02      	ldr	r3, [pc, #8]	; (80105a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010598:	4618      	mov	r0, r3
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	20006860 	.word	0x20006860
 80105a4:	0801633c 	.word	0x0801633c

080105a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	6039      	str	r1, [r7, #0]
 80105b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	221a      	movs	r2, #26
 80105b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80105ba:	f000 f843 	bl	8010644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80105be:	4b02      	ldr	r3, [pc, #8]	; (80105c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	20000168 	.word	0x20000168

080105cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	6039      	str	r1, [r7, #0]
 80105d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80105d8:	79fb      	ldrb	r3, [r7, #7]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d105      	bne.n	80105ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	4907      	ldr	r1, [pc, #28]	; (8010600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80105e2:	4808      	ldr	r0, [pc, #32]	; (8010604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80105e4:	f7fc fc46 	bl	800ce74 <USBD_GetString>
 80105e8:	e004      	b.n	80105f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	4904      	ldr	r1, [pc, #16]	; (8010600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80105ee:	4805      	ldr	r0, [pc, #20]	; (8010604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80105f0:	f7fc fc40 	bl	800ce74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105f4:	4b02      	ldr	r3, [pc, #8]	; (8010600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20006860 	.word	0x20006860
 8010604:	08016350 	.word	0x08016350

08010608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	4603      	mov	r3, r0
 8010610:	6039      	str	r1, [r7, #0]
 8010612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010614:	79fb      	ldrb	r3, [r7, #7]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d105      	bne.n	8010626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	4907      	ldr	r1, [pc, #28]	; (801063c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801061e:	4808      	ldr	r0, [pc, #32]	; (8010640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010620:	f7fc fc28 	bl	800ce74 <USBD_GetString>
 8010624:	e004      	b.n	8010630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010626:	683a      	ldr	r2, [r7, #0]
 8010628:	4904      	ldr	r1, [pc, #16]	; (801063c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801062a:	4805      	ldr	r0, [pc, #20]	; (8010640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801062c:	f7fc fc22 	bl	800ce74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010630:	4b02      	ldr	r3, [pc, #8]	; (801063c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	20006860 	.word	0x20006860
 8010640:	0801635c 	.word	0x0801635c

08010644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801064a:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <Get_SerialNum+0x44>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010650:	4b0e      	ldr	r3, [pc, #56]	; (801068c <Get_SerialNum+0x48>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010656:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <Get_SerialNum+0x4c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4413      	add	r3, r2
 8010662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d009      	beq.n	801067e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801066a:	2208      	movs	r2, #8
 801066c:	4909      	ldr	r1, [pc, #36]	; (8010694 <Get_SerialNum+0x50>)
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 f814 	bl	801069c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010674:	2204      	movs	r2, #4
 8010676:	4908      	ldr	r1, [pc, #32]	; (8010698 <Get_SerialNum+0x54>)
 8010678:	68b8      	ldr	r0, [r7, #8]
 801067a:	f000 f80f 	bl	801069c <IntToUnicode>
  }
}
 801067e:	bf00      	nop
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	1fff7a10 	.word	0x1fff7a10
 801068c:	1fff7a14 	.word	0x1fff7a14
 8010690:	1fff7a18 	.word	0x1fff7a18
 8010694:	2000016a 	.word	0x2000016a
 8010698:	2000017a 	.word	0x2000017a

0801069c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801069c:	b480      	push	{r7}
 801069e:	b087      	sub	sp, #28
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	4613      	mov	r3, r2
 80106a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80106ae:	2300      	movs	r3, #0
 80106b0:	75fb      	strb	r3, [r7, #23]
 80106b2:	e027      	b.n	8010704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	0f1b      	lsrs	r3, r3, #28
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	d80b      	bhi.n	80106d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	0f1b      	lsrs	r3, r3, #28
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	7dfb      	ldrb	r3, [r7, #23]
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	4619      	mov	r1, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	440b      	add	r3, r1
 80106cc:	3230      	adds	r2, #48	; 0x30
 80106ce:	b2d2      	uxtb	r2, r2
 80106d0:	701a      	strb	r2, [r3, #0]
 80106d2:	e00a      	b.n	80106ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	0f1b      	lsrs	r3, r3, #28
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	7dfb      	ldrb	r3, [r7, #23]
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4619      	mov	r1, r3
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	440b      	add	r3, r1
 80106e4:	3237      	adds	r2, #55	; 0x37
 80106e6:	b2d2      	uxtb	r2, r2
 80106e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	011b      	lsls	r3, r3, #4
 80106ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80106f0:	7dfb      	ldrb	r3, [r7, #23]
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	3301      	adds	r3, #1
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	4413      	add	r3, r2
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80106fe:	7dfb      	ldrb	r3, [r7, #23]
 8010700:	3301      	adds	r3, #1
 8010702:	75fb      	strb	r3, [r7, #23]
 8010704:	7dfa      	ldrb	r2, [r7, #23]
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	429a      	cmp	r2, r3
 801070a:	d3d3      	bcc.n	80106b4 <IntToUnicode+0x18>
  }
}
 801070c:	bf00      	nop
 801070e:	bf00      	nop
 8010710:	371c      	adds	r7, #28
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr
	...

0801071c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08a      	sub	sp, #40	; 0x28
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010724:	f107 0314 	add.w	r3, r7, #20
 8010728:	2200      	movs	r2, #0
 801072a:	601a      	str	r2, [r3, #0]
 801072c:	605a      	str	r2, [r3, #4]
 801072e:	609a      	str	r2, [r3, #8]
 8010730:	60da      	str	r2, [r3, #12]
 8010732:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801073c:	d147      	bne.n	80107ce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801073e:	2300      	movs	r3, #0
 8010740:	613b      	str	r3, [r7, #16]
 8010742:	4b25      	ldr	r3, [pc, #148]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 8010744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010746:	4a24      	ldr	r2, [pc, #144]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 8010748:	f043 0301 	orr.w	r3, r3, #1
 801074c:	6313      	str	r3, [r2, #48]	; 0x30
 801074e:	4b22      	ldr	r3, [pc, #136]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 8010750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010752:	f003 0301 	and.w	r3, r3, #1
 8010756:	613b      	str	r3, [r7, #16]
 8010758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010760:	2300      	movs	r3, #0
 8010762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010764:	2300      	movs	r3, #0
 8010766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010768:	f107 0314 	add.w	r3, r7, #20
 801076c:	4619      	mov	r1, r3
 801076e:	481b      	ldr	r0, [pc, #108]	; (80107dc <HAL_PCD_MspInit+0xc0>)
 8010770:	f7f4 fa82 	bl	8004c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010774:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801077a:	2302      	movs	r3, #2
 801077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801077e:	2300      	movs	r3, #0
 8010780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010782:	2303      	movs	r3, #3
 8010784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010786:	230a      	movs	r3, #10
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801078a:	f107 0314 	add.w	r3, r7, #20
 801078e:	4619      	mov	r1, r3
 8010790:	4812      	ldr	r0, [pc, #72]	; (80107dc <HAL_PCD_MspInit+0xc0>)
 8010792:	f7f4 fa71 	bl	8004c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010796:	4b10      	ldr	r3, [pc, #64]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 8010798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801079a:	4a0f      	ldr	r2, [pc, #60]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 801079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107a0:	6353      	str	r3, [r2, #52]	; 0x34
 80107a2:	2300      	movs	r3, #0
 80107a4:	60fb      	str	r3, [r7, #12]
 80107a6:	4b0c      	ldr	r3, [pc, #48]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 80107a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107aa:	4a0b      	ldr	r2, [pc, #44]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 80107ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80107b0:	6453      	str	r3, [r2, #68]	; 0x44
 80107b2:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <HAL_PCD_MspInit+0xbc>)
 80107b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80107be:	2200      	movs	r2, #0
 80107c0:	2100      	movs	r1, #0
 80107c2:	2043      	movs	r0, #67	; 0x43
 80107c4:	f7f4 fa20 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80107c8:	2043      	movs	r0, #67	; 0x43
 80107ca:	f7f4 fa39 	bl	8004c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80107ce:	bf00      	nop
 80107d0:	3728      	adds	r7, #40	; 0x28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	40023800 	.word	0x40023800
 80107dc:	40020000 	.word	0x40020000

080107e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80107f4:	4619      	mov	r1, r3
 80107f6:	4610      	mov	r0, r2
 80107f8:	f7fb fbaa 	bl	800bf50 <USBD_LL_SetupStage>
}
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	460b      	mov	r3, r1
 801080e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010816:	78fa      	ldrb	r2, [r7, #3]
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	4613      	mov	r3, r2
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	440b      	add	r3, r1
 8010824:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	78fb      	ldrb	r3, [r7, #3]
 801082c:	4619      	mov	r1, r3
 801082e:	f7fb fbe4 	bl	800bffa <USBD_LL_DataOutStage>
}
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b082      	sub	sp, #8
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	460b      	mov	r3, r1
 8010844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801084c:	78fa      	ldrb	r2, [r7, #3]
 801084e:	6879      	ldr	r1, [r7, #4]
 8010850:	4613      	mov	r3, r2
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	1a9b      	subs	r3, r3, r2
 8010856:	009b      	lsls	r3, r3, #2
 8010858:	440b      	add	r3, r1
 801085a:	3348      	adds	r3, #72	; 0x48
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	78fb      	ldrb	r3, [r7, #3]
 8010860:	4619      	mov	r1, r3
 8010862:	f7fb fc2d 	bl	800c0c0 <USBD_LL_DataInStage>
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b082      	sub	sp, #8
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801087c:	4618      	mov	r0, r3
 801087e:	f7fb fd31 	bl	800c2e4 <USBD_LL_SOF>
}
 8010882:	bf00      	nop
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}

0801088a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801088a:	b580      	push	{r7, lr}
 801088c:	b084      	sub	sp, #16
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010892:	2301      	movs	r3, #1
 8010894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d102      	bne.n	80108a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801089e:	2300      	movs	r3, #0
 80108a0:	73fb      	strb	r3, [r7, #15]
 80108a2:	e008      	b.n	80108b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d102      	bne.n	80108b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80108ac:	2301      	movs	r3, #1
 80108ae:	73fb      	strb	r3, [r7, #15]
 80108b0:	e001      	b.n	80108b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80108b2:	f7f1 fb75 	bl	8001fa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108bc:	7bfa      	ldrb	r2, [r7, #15]
 80108be:	4611      	mov	r1, r2
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fb fcd4 	bl	800c26e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fb fc8d 	bl	800c1ec <USBD_LL_Reset>
}
 80108d2:	bf00      	nop
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
	...

080108dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fb fccf 	bl	800c28e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	6812      	ldr	r2, [r2, #0]
 80108fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010902:	f043 0301 	orr.w	r3, r3, #1
 8010906:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d005      	beq.n	801091c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010910:	4b04      	ldr	r3, [pc, #16]	; (8010924 <HAL_PCD_SuspendCallback+0x48>)
 8010912:	691b      	ldr	r3, [r3, #16]
 8010914:	4a03      	ldr	r2, [pc, #12]	; (8010924 <HAL_PCD_SuspendCallback+0x48>)
 8010916:	f043 0306 	orr.w	r3, r3, #6
 801091a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	e000ed00 	.word	0xe000ed00

08010928 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010936:	4618      	mov	r0, r3
 8010938:	f7fb fcbe 	bl	800c2b8 <USBD_LL_Resume>
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	460b      	mov	r3, r1
 801094e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010956:	78fa      	ldrb	r2, [r7, #3]
 8010958:	4611      	mov	r1, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f7fb fce9 	bl	800c332 <USBD_LL_IsoOUTIncomplete>
}
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801097a:	78fa      	ldrb	r2, [r7, #3]
 801097c:	4611      	mov	r1, r2
 801097e:	4618      	mov	r0, r3
 8010980:	f7fb fcca 	bl	800c318 <USBD_LL_IsoINIncomplete>
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801099a:	4618      	mov	r0, r3
 801099c:	f7fb fcd6 	bl	800c34c <USBD_LL_DevConnected>
}
 80109a0:	bf00      	nop
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fb fcd3 	bl	800c362 <USBD_LL_DevDisconnected>
}
 80109bc:	bf00      	nop
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d13c      	bne.n	8010a4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80109d4:	4a20      	ldr	r2, [pc, #128]	; (8010a58 <USBD_LL_Init+0x94>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4a1e      	ldr	r2, [pc, #120]	; (8010a58 <USBD_LL_Init+0x94>)
 80109e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80109e4:	4b1c      	ldr	r3, [pc, #112]	; (8010a58 <USBD_LL_Init+0x94>)
 80109e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80109ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80109ec:	4b1a      	ldr	r3, [pc, #104]	; (8010a58 <USBD_LL_Init+0x94>)
 80109ee:	2204      	movs	r2, #4
 80109f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80109f2:	4b19      	ldr	r3, [pc, #100]	; (8010a58 <USBD_LL_Init+0x94>)
 80109f4:	2202      	movs	r2, #2
 80109f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80109f8:	4b17      	ldr	r3, [pc, #92]	; (8010a58 <USBD_LL_Init+0x94>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80109fe:	4b16      	ldr	r3, [pc, #88]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a00:	2202      	movs	r2, #2
 8010a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010a04:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a06:	2200      	movs	r2, #0
 8010a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010a0a:	4b13      	ldr	r3, [pc, #76]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010a10:	4b11      	ldr	r3, [pc, #68]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010a16:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a18:	2201      	movs	r2, #1
 8010a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010a1c:	4b0e      	ldr	r3, [pc, #56]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010a22:	480d      	ldr	r0, [pc, #52]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a24:	f7f5 fc8c 	bl	8006340 <HAL_PCD_Init>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d001      	beq.n	8010a32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010a2e:	f7f1 fab7 	bl	8001fa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010a32:	2180      	movs	r1, #128	; 0x80
 8010a34:	4808      	ldr	r0, [pc, #32]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a36:	f7f6 fdea 	bl	800760e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010a3a:	2240      	movs	r2, #64	; 0x40
 8010a3c:	2100      	movs	r1, #0
 8010a3e:	4806      	ldr	r0, [pc, #24]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a40:	f7f6 fd9e 	bl	8007580 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010a44:	2280      	movs	r2, #128	; 0x80
 8010a46:	2101      	movs	r1, #1
 8010a48:	4803      	ldr	r0, [pc, #12]	; (8010a58 <USBD_LL_Init+0x94>)
 8010a4a:	f7f6 fd99 	bl	8007580 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	20006a60 	.word	0x20006a60

08010a5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f5 fd81 	bl	800657a <HAL_PCD_Start>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 f92a 	bl	8010cd8 <USBD_Get_USB_Status>
 8010a84:	4603      	mov	r3, r0
 8010a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b084      	sub	sp, #16
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	4608      	mov	r0, r1
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	70fb      	strb	r3, [r7, #3]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70bb      	strb	r3, [r7, #2]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010aba:	78bb      	ldrb	r3, [r7, #2]
 8010abc:	883a      	ldrh	r2, [r7, #0]
 8010abe:	78f9      	ldrb	r1, [r7, #3]
 8010ac0:	f7f6 f965 	bl	8006d8e <HAL_PCD_EP_Open>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f000 f904 	bl	8010cd8 <USBD_Get_USB_Status>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	460b      	mov	r3, r1
 8010ae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aee:	2300      	movs	r3, #0
 8010af0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010af8:	78fa      	ldrb	r2, [r7, #3]
 8010afa:	4611      	mov	r1, r2
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7f6 f9ae 	bl	8006e5e <HAL_PCD_EP_Close>
 8010b02:	4603      	mov	r3, r0
 8010b04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b06:	7bfb      	ldrb	r3, [r7, #15]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 f8e5 	bl	8010cd8 <USBD_Get_USB_Status>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3710      	adds	r7, #16
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	460b      	mov	r3, r1
 8010b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b36:	78fa      	ldrb	r2, [r7, #3]
 8010b38:	4611      	mov	r1, r2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f6 fa86 	bl	800704c <HAL_PCD_EP_SetStall>
 8010b40:	4603      	mov	r3, r0
 8010b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b44:	7bfb      	ldrb	r3, [r7, #15]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 f8c6 	bl	8010cd8 <USBD_Get_USB_Status>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b084      	sub	sp, #16
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	460b      	mov	r3, r1
 8010b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b66:	2300      	movs	r3, #0
 8010b68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b74:	78fa      	ldrb	r2, [r7, #3]
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7f6 facb 	bl	8007114 <HAL_PCD_EP_ClrStall>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f000 f8a7 	bl	8010cd8 <USBD_Get_USB_Status>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010baa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da0b      	bge.n	8010bcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010bb4:	78fb      	ldrb	r3, [r7, #3]
 8010bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010bba:	68f9      	ldr	r1, [r7, #12]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	00db      	lsls	r3, r3, #3
 8010bc0:	1a9b      	subs	r3, r3, r2
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	440b      	add	r3, r1
 8010bc6:	333e      	adds	r3, #62	; 0x3e
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	e00b      	b.n	8010be4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010bcc:	78fb      	ldrb	r3, [r7, #3]
 8010bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010bd2:	68f9      	ldr	r1, [r7, #12]
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	00db      	lsls	r3, r3, #3
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	440b      	add	r3, r1
 8010bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010be2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3714      	adds	r7, #20
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c0a:	78fa      	ldrb	r2, [r7, #3]
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7f6 f898 	bl	8006d44 <HAL_PCD_SetAddress>
 8010c14:	4603      	mov	r3, r0
 8010c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 f85c 	bl	8010cd8 <USBD_Get_USB_Status>
 8010c20:	4603      	mov	r3, r0
 8010c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b086      	sub	sp, #24
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	60f8      	str	r0, [r7, #12]
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	603b      	str	r3, [r7, #0]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c4c:	7af9      	ldrb	r1, [r7, #11]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	f7f6 f9b1 	bl	8006fb8 <HAL_PCD_EP_Transmit>
 8010c56:	4603      	mov	r3, r0
 8010c58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c5a:	7dfb      	ldrb	r3, [r7, #23]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 f83b 	bl	8010cd8 <USBD_Get_USB_Status>
 8010c62:	4603      	mov	r3, r0
 8010c64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3718      	adds	r7, #24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	607a      	str	r2, [r7, #4]
 8010c7a:	603b      	str	r3, [r7, #0]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c80:	2300      	movs	r3, #0
 8010c82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c84:	2300      	movs	r3, #0
 8010c86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c8e:	7af9      	ldrb	r1, [r7, #11]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	f7f6 f92d 	bl	8006ef2 <HAL_PCD_EP_Receive>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 f81a 	bl	8010cd8 <USBD_Get_USB_Status>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3718      	adds	r7, #24
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b082      	sub	sp, #8
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
 8010cba:	460b      	mov	r3, r1
 8010cbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cc4:	78fa      	ldrb	r2, [r7, #3]
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f6 f95d 	bl	8006f88 <HAL_PCD_EP_GetRxCount>
 8010cce:	4603      	mov	r3, r0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b085      	sub	sp, #20
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	4603      	mov	r3, r0
 8010ce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ce6:	79fb      	ldrb	r3, [r7, #7]
 8010ce8:	2b03      	cmp	r3, #3
 8010cea:	d817      	bhi.n	8010d1c <USBD_Get_USB_Status+0x44>
 8010cec:	a201      	add	r2, pc, #4	; (adr r2, 8010cf4 <USBD_Get_USB_Status+0x1c>)
 8010cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf2:	bf00      	nop
 8010cf4:	08010d05 	.word	0x08010d05
 8010cf8:	08010d0b 	.word	0x08010d0b
 8010cfc:	08010d11 	.word	0x08010d11
 8010d00:	08010d17 	.word	0x08010d17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	73fb      	strb	r3, [r7, #15]
    break;
 8010d08:	e00b      	b.n	8010d22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d0e:	e008      	b.n	8010d22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d10:	2301      	movs	r3, #1
 8010d12:	73fb      	strb	r3, [r7, #15]
    break;
 8010d14:	e005      	b.n	8010d22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010d16:	2303      	movs	r3, #3
 8010d18:	73fb      	strb	r3, [r7, #15]
    break;
 8010d1a:	e002      	b.n	8010d22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d20:	bf00      	nop
  }
  return usb_status;
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <__cxa_pure_virtual>:
 8010d30:	b508      	push	{r3, lr}
 8010d32:	f000 f80d 	bl	8010d50 <_ZSt9terminatev>

08010d36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010d36:	b508      	push	{r3, lr}
 8010d38:	4780      	blx	r0
 8010d3a:	f000 f80e 	bl	8010d5a <abort>
	...

08010d40 <_ZSt13get_terminatev>:
 8010d40:	4b02      	ldr	r3, [pc, #8]	; (8010d4c <_ZSt13get_terminatev+0xc>)
 8010d42:	6818      	ldr	r0, [r3, #0]
 8010d44:	f3bf 8f5b 	dmb	ish
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	20000184 	.word	0x20000184

08010d50 <_ZSt9terminatev>:
 8010d50:	b508      	push	{r3, lr}
 8010d52:	f7ff fff5 	bl	8010d40 <_ZSt13get_terminatev>
 8010d56:	f7ff ffee 	bl	8010d36 <_ZN10__cxxabiv111__terminateEPFvvE>

08010d5a <abort>:
 8010d5a:	b508      	push	{r3, lr}
 8010d5c:	2006      	movs	r0, #6
 8010d5e:	f001 f933 	bl	8011fc8 <raise>
 8010d62:	2001      	movs	r0, #1
 8010d64:	f7f1 fcee 	bl	8002744 <_exit>

08010d68 <__errno>:
 8010d68:	4b01      	ldr	r3, [pc, #4]	; (8010d70 <__errno+0x8>)
 8010d6a:	6818      	ldr	r0, [r3, #0]
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop
 8010d70:	20000188 	.word	0x20000188

08010d74 <std>:
 8010d74:	2300      	movs	r3, #0
 8010d76:	b510      	push	{r4, lr}
 8010d78:	4604      	mov	r4, r0
 8010d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8010d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d82:	6083      	str	r3, [r0, #8]
 8010d84:	8181      	strh	r1, [r0, #12]
 8010d86:	6643      	str	r3, [r0, #100]	; 0x64
 8010d88:	81c2      	strh	r2, [r0, #14]
 8010d8a:	6183      	str	r3, [r0, #24]
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	2208      	movs	r2, #8
 8010d90:	305c      	adds	r0, #92	; 0x5c
 8010d92:	f000 f945 	bl	8011020 <memset>
 8010d96:	4b05      	ldr	r3, [pc, #20]	; (8010dac <std+0x38>)
 8010d98:	6263      	str	r3, [r4, #36]	; 0x24
 8010d9a:	4b05      	ldr	r3, [pc, #20]	; (8010db0 <std+0x3c>)
 8010d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d9e:	4b05      	ldr	r3, [pc, #20]	; (8010db4 <std+0x40>)
 8010da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010da2:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <std+0x44>)
 8010da4:	6224      	str	r4, [r4, #32]
 8010da6:	6323      	str	r3, [r4, #48]	; 0x30
 8010da8:	bd10      	pop	{r4, pc}
 8010daa:	bf00      	nop
 8010dac:	08012099 	.word	0x08012099
 8010db0:	080120bf 	.word	0x080120bf
 8010db4:	080120f7 	.word	0x080120f7
 8010db8:	0801211b 	.word	0x0801211b

08010dbc <_cleanup_r>:
 8010dbc:	4901      	ldr	r1, [pc, #4]	; (8010dc4 <_cleanup_r+0x8>)
 8010dbe:	f000 b8af 	b.w	8010f20 <_fwalk_reent>
 8010dc2:	bf00      	nop
 8010dc4:	08013e25 	.word	0x08013e25

08010dc8 <__sfmoreglue>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	1e4a      	subs	r2, r1, #1
 8010dcc:	2568      	movs	r5, #104	; 0x68
 8010dce:	4355      	muls	r5, r2
 8010dd0:	460e      	mov	r6, r1
 8010dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010dd6:	f000 f97b 	bl	80110d0 <_malloc_r>
 8010dda:	4604      	mov	r4, r0
 8010ddc:	b140      	cbz	r0, 8010df0 <__sfmoreglue+0x28>
 8010dde:	2100      	movs	r1, #0
 8010de0:	e9c0 1600 	strd	r1, r6, [r0]
 8010de4:	300c      	adds	r0, #12
 8010de6:	60a0      	str	r0, [r4, #8]
 8010de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010dec:	f000 f918 	bl	8011020 <memset>
 8010df0:	4620      	mov	r0, r4
 8010df2:	bd70      	pop	{r4, r5, r6, pc}

08010df4 <__sfp_lock_acquire>:
 8010df4:	4801      	ldr	r0, [pc, #4]	; (8010dfc <__sfp_lock_acquire+0x8>)
 8010df6:	f000 b8d8 	b.w	8010faa <__retarget_lock_acquire_recursive>
 8010dfa:	bf00      	nop
 8010dfc:	20006e70 	.word	0x20006e70

08010e00 <__sfp_lock_release>:
 8010e00:	4801      	ldr	r0, [pc, #4]	; (8010e08 <__sfp_lock_release+0x8>)
 8010e02:	f000 b8d3 	b.w	8010fac <__retarget_lock_release_recursive>
 8010e06:	bf00      	nop
 8010e08:	20006e70 	.word	0x20006e70

08010e0c <__sinit_lock_acquire>:
 8010e0c:	4801      	ldr	r0, [pc, #4]	; (8010e14 <__sinit_lock_acquire+0x8>)
 8010e0e:	f000 b8cc 	b.w	8010faa <__retarget_lock_acquire_recursive>
 8010e12:	bf00      	nop
 8010e14:	20006e6b 	.word	0x20006e6b

08010e18 <__sinit_lock_release>:
 8010e18:	4801      	ldr	r0, [pc, #4]	; (8010e20 <__sinit_lock_release+0x8>)
 8010e1a:	f000 b8c7 	b.w	8010fac <__retarget_lock_release_recursive>
 8010e1e:	bf00      	nop
 8010e20:	20006e6b 	.word	0x20006e6b

08010e24 <__sinit>:
 8010e24:	b510      	push	{r4, lr}
 8010e26:	4604      	mov	r4, r0
 8010e28:	f7ff fff0 	bl	8010e0c <__sinit_lock_acquire>
 8010e2c:	69a3      	ldr	r3, [r4, #24]
 8010e2e:	b11b      	cbz	r3, 8010e38 <__sinit+0x14>
 8010e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e34:	f7ff bff0 	b.w	8010e18 <__sinit_lock_release>
 8010e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8010e3e:	4b13      	ldr	r3, [pc, #76]	; (8010e8c <__sinit+0x68>)
 8010e40:	4a13      	ldr	r2, [pc, #76]	; (8010e90 <__sinit+0x6c>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e46:	42a3      	cmp	r3, r4
 8010e48:	bf04      	itt	eq
 8010e4a:	2301      	moveq	r3, #1
 8010e4c:	61a3      	streq	r3, [r4, #24]
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f000 f820 	bl	8010e94 <__sfp>
 8010e54:	6060      	str	r0, [r4, #4]
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 f81c 	bl	8010e94 <__sfp>
 8010e5c:	60a0      	str	r0, [r4, #8]
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 f818 	bl	8010e94 <__sfp>
 8010e64:	2200      	movs	r2, #0
 8010e66:	60e0      	str	r0, [r4, #12]
 8010e68:	2104      	movs	r1, #4
 8010e6a:	6860      	ldr	r0, [r4, #4]
 8010e6c:	f7ff ff82 	bl	8010d74 <std>
 8010e70:	68a0      	ldr	r0, [r4, #8]
 8010e72:	2201      	movs	r2, #1
 8010e74:	2109      	movs	r1, #9
 8010e76:	f7ff ff7d 	bl	8010d74 <std>
 8010e7a:	68e0      	ldr	r0, [r4, #12]
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	2112      	movs	r1, #18
 8010e80:	f7ff ff78 	bl	8010d74 <std>
 8010e84:	2301      	movs	r3, #1
 8010e86:	61a3      	str	r3, [r4, #24]
 8010e88:	e7d2      	b.n	8010e30 <__sinit+0xc>
 8010e8a:	bf00      	nop
 8010e8c:	08016524 	.word	0x08016524
 8010e90:	08010dbd 	.word	0x08010dbd

08010e94 <__sfp>:
 8010e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e96:	4607      	mov	r7, r0
 8010e98:	f7ff ffac 	bl	8010df4 <__sfp_lock_acquire>
 8010e9c:	4b1e      	ldr	r3, [pc, #120]	; (8010f18 <__sfp+0x84>)
 8010e9e:	681e      	ldr	r6, [r3, #0]
 8010ea0:	69b3      	ldr	r3, [r6, #24]
 8010ea2:	b913      	cbnz	r3, 8010eaa <__sfp+0x16>
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f7ff ffbd 	bl	8010e24 <__sinit>
 8010eaa:	3648      	adds	r6, #72	; 0x48
 8010eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	d503      	bpl.n	8010ebc <__sfp+0x28>
 8010eb4:	6833      	ldr	r3, [r6, #0]
 8010eb6:	b30b      	cbz	r3, 8010efc <__sfp+0x68>
 8010eb8:	6836      	ldr	r6, [r6, #0]
 8010eba:	e7f7      	b.n	8010eac <__sfp+0x18>
 8010ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ec0:	b9d5      	cbnz	r5, 8010ef8 <__sfp+0x64>
 8010ec2:	4b16      	ldr	r3, [pc, #88]	; (8010f1c <__sfp+0x88>)
 8010ec4:	60e3      	str	r3, [r4, #12]
 8010ec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010eca:	6665      	str	r5, [r4, #100]	; 0x64
 8010ecc:	f000 f86c 	bl	8010fa8 <__retarget_lock_init_recursive>
 8010ed0:	f7ff ff96 	bl	8010e00 <__sfp_lock_release>
 8010ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010edc:	6025      	str	r5, [r4, #0]
 8010ede:	61a5      	str	r5, [r4, #24]
 8010ee0:	2208      	movs	r2, #8
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ee8:	f000 f89a 	bl	8011020 <memset>
 8010eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ef8:	3468      	adds	r4, #104	; 0x68
 8010efa:	e7d9      	b.n	8010eb0 <__sfp+0x1c>
 8010efc:	2104      	movs	r1, #4
 8010efe:	4638      	mov	r0, r7
 8010f00:	f7ff ff62 	bl	8010dc8 <__sfmoreglue>
 8010f04:	4604      	mov	r4, r0
 8010f06:	6030      	str	r0, [r6, #0]
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d1d5      	bne.n	8010eb8 <__sfp+0x24>
 8010f0c:	f7ff ff78 	bl	8010e00 <__sfp_lock_release>
 8010f10:	230c      	movs	r3, #12
 8010f12:	603b      	str	r3, [r7, #0]
 8010f14:	e7ee      	b.n	8010ef4 <__sfp+0x60>
 8010f16:	bf00      	nop
 8010f18:	08016524 	.word	0x08016524
 8010f1c:	ffff0001 	.word	0xffff0001

08010f20 <_fwalk_reent>:
 8010f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	4606      	mov	r6, r0
 8010f26:	4688      	mov	r8, r1
 8010f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f2c:	2700      	movs	r7, #0
 8010f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f32:	f1b9 0901 	subs.w	r9, r9, #1
 8010f36:	d505      	bpl.n	8010f44 <_fwalk_reent+0x24>
 8010f38:	6824      	ldr	r4, [r4, #0]
 8010f3a:	2c00      	cmp	r4, #0
 8010f3c:	d1f7      	bne.n	8010f2e <_fwalk_reent+0xe>
 8010f3e:	4638      	mov	r0, r7
 8010f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f44:	89ab      	ldrh	r3, [r5, #12]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d907      	bls.n	8010f5a <_fwalk_reent+0x3a>
 8010f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	d003      	beq.n	8010f5a <_fwalk_reent+0x3a>
 8010f52:	4629      	mov	r1, r5
 8010f54:	4630      	mov	r0, r6
 8010f56:	47c0      	blx	r8
 8010f58:	4307      	orrs	r7, r0
 8010f5a:	3568      	adds	r5, #104	; 0x68
 8010f5c:	e7e9      	b.n	8010f32 <_fwalk_reent+0x12>
	...

08010f60 <__libc_init_array>:
 8010f60:	b570      	push	{r4, r5, r6, lr}
 8010f62:	4d0d      	ldr	r5, [pc, #52]	; (8010f98 <__libc_init_array+0x38>)
 8010f64:	4c0d      	ldr	r4, [pc, #52]	; (8010f9c <__libc_init_array+0x3c>)
 8010f66:	1b64      	subs	r4, r4, r5
 8010f68:	10a4      	asrs	r4, r4, #2
 8010f6a:	2600      	movs	r6, #0
 8010f6c:	42a6      	cmp	r6, r4
 8010f6e:	d109      	bne.n	8010f84 <__libc_init_array+0x24>
 8010f70:	4d0b      	ldr	r5, [pc, #44]	; (8010fa0 <__libc_init_array+0x40>)
 8010f72:	4c0c      	ldr	r4, [pc, #48]	; (8010fa4 <__libc_init_array+0x44>)
 8010f74:	f004 fff8 	bl	8015f68 <_init>
 8010f78:	1b64      	subs	r4, r4, r5
 8010f7a:	10a4      	asrs	r4, r4, #2
 8010f7c:	2600      	movs	r6, #0
 8010f7e:	42a6      	cmp	r6, r4
 8010f80:	d105      	bne.n	8010f8e <__libc_init_array+0x2e>
 8010f82:	bd70      	pop	{r4, r5, r6, pc}
 8010f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f88:	4798      	blx	r3
 8010f8a:	3601      	adds	r6, #1
 8010f8c:	e7ee      	b.n	8010f6c <__libc_init_array+0xc>
 8010f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f92:	4798      	blx	r3
 8010f94:	3601      	adds	r6, #1
 8010f96:	e7f2      	b.n	8010f7e <__libc_init_array+0x1e>
 8010f98:	08016990 	.word	0x08016990
 8010f9c:	08016990 	.word	0x08016990
 8010fa0:	08016990 	.word	0x08016990
 8010fa4:	08016998 	.word	0x08016998

08010fa8 <__retarget_lock_init_recursive>:
 8010fa8:	4770      	bx	lr

08010faa <__retarget_lock_acquire_recursive>:
 8010faa:	4770      	bx	lr

08010fac <__retarget_lock_release_recursive>:
 8010fac:	4770      	bx	lr
	...

08010fb0 <malloc>:
 8010fb0:	4b02      	ldr	r3, [pc, #8]	; (8010fbc <malloc+0xc>)
 8010fb2:	4601      	mov	r1, r0
 8010fb4:	6818      	ldr	r0, [r3, #0]
 8010fb6:	f000 b88b 	b.w	80110d0 <_malloc_r>
 8010fba:	bf00      	nop
 8010fbc:	20000188 	.word	0x20000188

08010fc0 <free>:
 8010fc0:	4b02      	ldr	r3, [pc, #8]	; (8010fcc <free+0xc>)
 8010fc2:	4601      	mov	r1, r0
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	f000 b833 	b.w	8011030 <_free_r>
 8010fca:	bf00      	nop
 8010fcc:	20000188 	.word	0x20000188

08010fd0 <memcpy>:
 8010fd0:	440a      	add	r2, r1
 8010fd2:	4291      	cmp	r1, r2
 8010fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fd8:	d100      	bne.n	8010fdc <memcpy+0xc>
 8010fda:	4770      	bx	lr
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fe6:	4291      	cmp	r1, r2
 8010fe8:	d1f9      	bne.n	8010fde <memcpy+0xe>
 8010fea:	bd10      	pop	{r4, pc}

08010fec <memmove>:
 8010fec:	4288      	cmp	r0, r1
 8010fee:	b510      	push	{r4, lr}
 8010ff0:	eb01 0402 	add.w	r4, r1, r2
 8010ff4:	d902      	bls.n	8010ffc <memmove+0x10>
 8010ff6:	4284      	cmp	r4, r0
 8010ff8:	4623      	mov	r3, r4
 8010ffa:	d807      	bhi.n	801100c <memmove+0x20>
 8010ffc:	1e43      	subs	r3, r0, #1
 8010ffe:	42a1      	cmp	r1, r4
 8011000:	d008      	beq.n	8011014 <memmove+0x28>
 8011002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011006:	f803 2f01 	strb.w	r2, [r3, #1]!
 801100a:	e7f8      	b.n	8010ffe <memmove+0x12>
 801100c:	4402      	add	r2, r0
 801100e:	4601      	mov	r1, r0
 8011010:	428a      	cmp	r2, r1
 8011012:	d100      	bne.n	8011016 <memmove+0x2a>
 8011014:	bd10      	pop	{r4, pc}
 8011016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801101a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801101e:	e7f7      	b.n	8011010 <memmove+0x24>

08011020 <memset>:
 8011020:	4402      	add	r2, r0
 8011022:	4603      	mov	r3, r0
 8011024:	4293      	cmp	r3, r2
 8011026:	d100      	bne.n	801102a <memset+0xa>
 8011028:	4770      	bx	lr
 801102a:	f803 1b01 	strb.w	r1, [r3], #1
 801102e:	e7f9      	b.n	8011024 <memset+0x4>

08011030 <_free_r>:
 8011030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011032:	2900      	cmp	r1, #0
 8011034:	d048      	beq.n	80110c8 <_free_r+0x98>
 8011036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801103a:	9001      	str	r0, [sp, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	f1a1 0404 	sub.w	r4, r1, #4
 8011042:	bfb8      	it	lt
 8011044:	18e4      	addlt	r4, r4, r3
 8011046:	f003 fad3 	bl	80145f0 <__malloc_lock>
 801104a:	4a20      	ldr	r2, [pc, #128]	; (80110cc <_free_r+0x9c>)
 801104c:	9801      	ldr	r0, [sp, #4]
 801104e:	6813      	ldr	r3, [r2, #0]
 8011050:	4615      	mov	r5, r2
 8011052:	b933      	cbnz	r3, 8011062 <_free_r+0x32>
 8011054:	6063      	str	r3, [r4, #4]
 8011056:	6014      	str	r4, [r2, #0]
 8011058:	b003      	add	sp, #12
 801105a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801105e:	f003 bacd 	b.w	80145fc <__malloc_unlock>
 8011062:	42a3      	cmp	r3, r4
 8011064:	d90b      	bls.n	801107e <_free_r+0x4e>
 8011066:	6821      	ldr	r1, [r4, #0]
 8011068:	1862      	adds	r2, r4, r1
 801106a:	4293      	cmp	r3, r2
 801106c:	bf04      	itt	eq
 801106e:	681a      	ldreq	r2, [r3, #0]
 8011070:	685b      	ldreq	r3, [r3, #4]
 8011072:	6063      	str	r3, [r4, #4]
 8011074:	bf04      	itt	eq
 8011076:	1852      	addeq	r2, r2, r1
 8011078:	6022      	streq	r2, [r4, #0]
 801107a:	602c      	str	r4, [r5, #0]
 801107c:	e7ec      	b.n	8011058 <_free_r+0x28>
 801107e:	461a      	mov	r2, r3
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	b10b      	cbz	r3, 8011088 <_free_r+0x58>
 8011084:	42a3      	cmp	r3, r4
 8011086:	d9fa      	bls.n	801107e <_free_r+0x4e>
 8011088:	6811      	ldr	r1, [r2, #0]
 801108a:	1855      	adds	r5, r2, r1
 801108c:	42a5      	cmp	r5, r4
 801108e:	d10b      	bne.n	80110a8 <_free_r+0x78>
 8011090:	6824      	ldr	r4, [r4, #0]
 8011092:	4421      	add	r1, r4
 8011094:	1854      	adds	r4, r2, r1
 8011096:	42a3      	cmp	r3, r4
 8011098:	6011      	str	r1, [r2, #0]
 801109a:	d1dd      	bne.n	8011058 <_free_r+0x28>
 801109c:	681c      	ldr	r4, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	6053      	str	r3, [r2, #4]
 80110a2:	4421      	add	r1, r4
 80110a4:	6011      	str	r1, [r2, #0]
 80110a6:	e7d7      	b.n	8011058 <_free_r+0x28>
 80110a8:	d902      	bls.n	80110b0 <_free_r+0x80>
 80110aa:	230c      	movs	r3, #12
 80110ac:	6003      	str	r3, [r0, #0]
 80110ae:	e7d3      	b.n	8011058 <_free_r+0x28>
 80110b0:	6825      	ldr	r5, [r4, #0]
 80110b2:	1961      	adds	r1, r4, r5
 80110b4:	428b      	cmp	r3, r1
 80110b6:	bf04      	itt	eq
 80110b8:	6819      	ldreq	r1, [r3, #0]
 80110ba:	685b      	ldreq	r3, [r3, #4]
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	bf04      	itt	eq
 80110c0:	1949      	addeq	r1, r1, r5
 80110c2:	6021      	streq	r1, [r4, #0]
 80110c4:	6054      	str	r4, [r2, #4]
 80110c6:	e7c7      	b.n	8011058 <_free_r+0x28>
 80110c8:	b003      	add	sp, #12
 80110ca:	bd30      	pop	{r4, r5, pc}
 80110cc:	20004fac 	.word	0x20004fac

080110d0 <_malloc_r>:
 80110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d2:	1ccd      	adds	r5, r1, #3
 80110d4:	f025 0503 	bic.w	r5, r5, #3
 80110d8:	3508      	adds	r5, #8
 80110da:	2d0c      	cmp	r5, #12
 80110dc:	bf38      	it	cc
 80110de:	250c      	movcc	r5, #12
 80110e0:	2d00      	cmp	r5, #0
 80110e2:	4606      	mov	r6, r0
 80110e4:	db01      	blt.n	80110ea <_malloc_r+0x1a>
 80110e6:	42a9      	cmp	r1, r5
 80110e8:	d903      	bls.n	80110f2 <_malloc_r+0x22>
 80110ea:	230c      	movs	r3, #12
 80110ec:	6033      	str	r3, [r6, #0]
 80110ee:	2000      	movs	r0, #0
 80110f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f2:	f003 fa7d 	bl	80145f0 <__malloc_lock>
 80110f6:	4921      	ldr	r1, [pc, #132]	; (801117c <_malloc_r+0xac>)
 80110f8:	680a      	ldr	r2, [r1, #0]
 80110fa:	4614      	mov	r4, r2
 80110fc:	b99c      	cbnz	r4, 8011126 <_malloc_r+0x56>
 80110fe:	4f20      	ldr	r7, [pc, #128]	; (8011180 <_malloc_r+0xb0>)
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	b923      	cbnz	r3, 801110e <_malloc_r+0x3e>
 8011104:	4621      	mov	r1, r4
 8011106:	4630      	mov	r0, r6
 8011108:	f000 ff20 	bl	8011f4c <_sbrk_r>
 801110c:	6038      	str	r0, [r7, #0]
 801110e:	4629      	mov	r1, r5
 8011110:	4630      	mov	r0, r6
 8011112:	f000 ff1b 	bl	8011f4c <_sbrk_r>
 8011116:	1c43      	adds	r3, r0, #1
 8011118:	d123      	bne.n	8011162 <_malloc_r+0x92>
 801111a:	230c      	movs	r3, #12
 801111c:	6033      	str	r3, [r6, #0]
 801111e:	4630      	mov	r0, r6
 8011120:	f003 fa6c 	bl	80145fc <__malloc_unlock>
 8011124:	e7e3      	b.n	80110ee <_malloc_r+0x1e>
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	1b5b      	subs	r3, r3, r5
 801112a:	d417      	bmi.n	801115c <_malloc_r+0x8c>
 801112c:	2b0b      	cmp	r3, #11
 801112e:	d903      	bls.n	8011138 <_malloc_r+0x68>
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	441c      	add	r4, r3
 8011134:	6025      	str	r5, [r4, #0]
 8011136:	e004      	b.n	8011142 <_malloc_r+0x72>
 8011138:	6863      	ldr	r3, [r4, #4]
 801113a:	42a2      	cmp	r2, r4
 801113c:	bf0c      	ite	eq
 801113e:	600b      	streq	r3, [r1, #0]
 8011140:	6053      	strne	r3, [r2, #4]
 8011142:	4630      	mov	r0, r6
 8011144:	f003 fa5a 	bl	80145fc <__malloc_unlock>
 8011148:	f104 000b 	add.w	r0, r4, #11
 801114c:	1d23      	adds	r3, r4, #4
 801114e:	f020 0007 	bic.w	r0, r0, #7
 8011152:	1ac2      	subs	r2, r0, r3
 8011154:	d0cc      	beq.n	80110f0 <_malloc_r+0x20>
 8011156:	1a1b      	subs	r3, r3, r0
 8011158:	50a3      	str	r3, [r4, r2]
 801115a:	e7c9      	b.n	80110f0 <_malloc_r+0x20>
 801115c:	4622      	mov	r2, r4
 801115e:	6864      	ldr	r4, [r4, #4]
 8011160:	e7cc      	b.n	80110fc <_malloc_r+0x2c>
 8011162:	1cc4      	adds	r4, r0, #3
 8011164:	f024 0403 	bic.w	r4, r4, #3
 8011168:	42a0      	cmp	r0, r4
 801116a:	d0e3      	beq.n	8011134 <_malloc_r+0x64>
 801116c:	1a21      	subs	r1, r4, r0
 801116e:	4630      	mov	r0, r6
 8011170:	f000 feec 	bl	8011f4c <_sbrk_r>
 8011174:	3001      	adds	r0, #1
 8011176:	d1dd      	bne.n	8011134 <_malloc_r+0x64>
 8011178:	e7cf      	b.n	801111a <_malloc_r+0x4a>
 801117a:	bf00      	nop
 801117c:	20004fac 	.word	0x20004fac
 8011180:	20004fb0 	.word	0x20004fb0

08011184 <__cvt>:
 8011184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011188:	ec55 4b10 	vmov	r4, r5, d0
 801118c:	2d00      	cmp	r5, #0
 801118e:	460e      	mov	r6, r1
 8011190:	4619      	mov	r1, r3
 8011192:	462b      	mov	r3, r5
 8011194:	bfbb      	ittet	lt
 8011196:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801119a:	461d      	movlt	r5, r3
 801119c:	2300      	movge	r3, #0
 801119e:	232d      	movlt	r3, #45	; 0x2d
 80111a0:	700b      	strb	r3, [r1, #0]
 80111a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80111a8:	4691      	mov	r9, r2
 80111aa:	f023 0820 	bic.w	r8, r3, #32
 80111ae:	bfbc      	itt	lt
 80111b0:	4622      	movlt	r2, r4
 80111b2:	4614      	movlt	r4, r2
 80111b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80111b8:	d005      	beq.n	80111c6 <__cvt+0x42>
 80111ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80111be:	d100      	bne.n	80111c2 <__cvt+0x3e>
 80111c0:	3601      	adds	r6, #1
 80111c2:	2102      	movs	r1, #2
 80111c4:	e000      	b.n	80111c8 <__cvt+0x44>
 80111c6:	2103      	movs	r1, #3
 80111c8:	ab03      	add	r3, sp, #12
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	ab02      	add	r3, sp, #8
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	ec45 4b10 	vmov	d0, r4, r5
 80111d4:	4653      	mov	r3, sl
 80111d6:	4632      	mov	r2, r6
 80111d8:	f001 ffb2 	bl	8013140 <_dtoa_r>
 80111dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80111e0:	4607      	mov	r7, r0
 80111e2:	d102      	bne.n	80111ea <__cvt+0x66>
 80111e4:	f019 0f01 	tst.w	r9, #1
 80111e8:	d022      	beq.n	8011230 <__cvt+0xac>
 80111ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80111ee:	eb07 0906 	add.w	r9, r7, r6
 80111f2:	d110      	bne.n	8011216 <__cvt+0x92>
 80111f4:	783b      	ldrb	r3, [r7, #0]
 80111f6:	2b30      	cmp	r3, #48	; 0x30
 80111f8:	d10a      	bne.n	8011210 <__cvt+0x8c>
 80111fa:	2200      	movs	r2, #0
 80111fc:	2300      	movs	r3, #0
 80111fe:	4620      	mov	r0, r4
 8011200:	4629      	mov	r1, r5
 8011202:	f7ef fc71 	bl	8000ae8 <__aeabi_dcmpeq>
 8011206:	b918      	cbnz	r0, 8011210 <__cvt+0x8c>
 8011208:	f1c6 0601 	rsb	r6, r6, #1
 801120c:	f8ca 6000 	str.w	r6, [sl]
 8011210:	f8da 3000 	ldr.w	r3, [sl]
 8011214:	4499      	add	r9, r3
 8011216:	2200      	movs	r2, #0
 8011218:	2300      	movs	r3, #0
 801121a:	4620      	mov	r0, r4
 801121c:	4629      	mov	r1, r5
 801121e:	f7ef fc63 	bl	8000ae8 <__aeabi_dcmpeq>
 8011222:	b108      	cbz	r0, 8011228 <__cvt+0xa4>
 8011224:	f8cd 900c 	str.w	r9, [sp, #12]
 8011228:	2230      	movs	r2, #48	; 0x30
 801122a:	9b03      	ldr	r3, [sp, #12]
 801122c:	454b      	cmp	r3, r9
 801122e:	d307      	bcc.n	8011240 <__cvt+0xbc>
 8011230:	9b03      	ldr	r3, [sp, #12]
 8011232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011234:	1bdb      	subs	r3, r3, r7
 8011236:	4638      	mov	r0, r7
 8011238:	6013      	str	r3, [r2, #0]
 801123a:	b004      	add	sp, #16
 801123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011240:	1c59      	adds	r1, r3, #1
 8011242:	9103      	str	r1, [sp, #12]
 8011244:	701a      	strb	r2, [r3, #0]
 8011246:	e7f0      	b.n	801122a <__cvt+0xa6>

08011248 <__exponent>:
 8011248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801124a:	4603      	mov	r3, r0
 801124c:	2900      	cmp	r1, #0
 801124e:	bfb8      	it	lt
 8011250:	4249      	neglt	r1, r1
 8011252:	f803 2b02 	strb.w	r2, [r3], #2
 8011256:	bfb4      	ite	lt
 8011258:	222d      	movlt	r2, #45	; 0x2d
 801125a:	222b      	movge	r2, #43	; 0x2b
 801125c:	2909      	cmp	r1, #9
 801125e:	7042      	strb	r2, [r0, #1]
 8011260:	dd2a      	ble.n	80112b8 <__exponent+0x70>
 8011262:	f10d 0407 	add.w	r4, sp, #7
 8011266:	46a4      	mov	ip, r4
 8011268:	270a      	movs	r7, #10
 801126a:	46a6      	mov	lr, r4
 801126c:	460a      	mov	r2, r1
 801126e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011272:	fb07 1516 	mls	r5, r7, r6, r1
 8011276:	3530      	adds	r5, #48	; 0x30
 8011278:	2a63      	cmp	r2, #99	; 0x63
 801127a:	f104 34ff 	add.w	r4, r4, #4294967295
 801127e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011282:	4631      	mov	r1, r6
 8011284:	dcf1      	bgt.n	801126a <__exponent+0x22>
 8011286:	3130      	adds	r1, #48	; 0x30
 8011288:	f1ae 0502 	sub.w	r5, lr, #2
 801128c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011290:	1c44      	adds	r4, r0, #1
 8011292:	4629      	mov	r1, r5
 8011294:	4561      	cmp	r1, ip
 8011296:	d30a      	bcc.n	80112ae <__exponent+0x66>
 8011298:	f10d 0209 	add.w	r2, sp, #9
 801129c:	eba2 020e 	sub.w	r2, r2, lr
 80112a0:	4565      	cmp	r5, ip
 80112a2:	bf88      	it	hi
 80112a4:	2200      	movhi	r2, #0
 80112a6:	4413      	add	r3, r2
 80112a8:	1a18      	subs	r0, r3, r0
 80112aa:	b003      	add	sp, #12
 80112ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80112b6:	e7ed      	b.n	8011294 <__exponent+0x4c>
 80112b8:	2330      	movs	r3, #48	; 0x30
 80112ba:	3130      	adds	r1, #48	; 0x30
 80112bc:	7083      	strb	r3, [r0, #2]
 80112be:	70c1      	strb	r1, [r0, #3]
 80112c0:	1d03      	adds	r3, r0, #4
 80112c2:	e7f1      	b.n	80112a8 <__exponent+0x60>

080112c4 <_printf_float>:
 80112c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c8:	ed2d 8b02 	vpush	{d8}
 80112cc:	b08d      	sub	sp, #52	; 0x34
 80112ce:	460c      	mov	r4, r1
 80112d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80112d4:	4616      	mov	r6, r2
 80112d6:	461f      	mov	r7, r3
 80112d8:	4605      	mov	r5, r0
 80112da:	f003 f961 	bl	80145a0 <_localeconv_r>
 80112de:	f8d0 a000 	ldr.w	sl, [r0]
 80112e2:	4650      	mov	r0, sl
 80112e4:	f7ee ff84 	bl	80001f0 <strlen>
 80112e8:	2300      	movs	r3, #0
 80112ea:	930a      	str	r3, [sp, #40]	; 0x28
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	9305      	str	r3, [sp, #20]
 80112f0:	f8d8 3000 	ldr.w	r3, [r8]
 80112f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80112f8:	3307      	adds	r3, #7
 80112fa:	f023 0307 	bic.w	r3, r3, #7
 80112fe:	f103 0208 	add.w	r2, r3, #8
 8011302:	f8c8 2000 	str.w	r2, [r8]
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801130e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011316:	9307      	str	r3, [sp, #28]
 8011318:	f8cd 8018 	str.w	r8, [sp, #24]
 801131c:	ee08 0a10 	vmov	s16, r0
 8011320:	4b9f      	ldr	r3, [pc, #636]	; (80115a0 <_printf_float+0x2dc>)
 8011322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011326:	f04f 32ff 	mov.w	r2, #4294967295
 801132a:	f7ef fc0f 	bl	8000b4c <__aeabi_dcmpun>
 801132e:	bb88      	cbnz	r0, 8011394 <_printf_float+0xd0>
 8011330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011334:	4b9a      	ldr	r3, [pc, #616]	; (80115a0 <_printf_float+0x2dc>)
 8011336:	f04f 32ff 	mov.w	r2, #4294967295
 801133a:	f7ef fbe9 	bl	8000b10 <__aeabi_dcmple>
 801133e:	bb48      	cbnz	r0, 8011394 <_printf_float+0xd0>
 8011340:	2200      	movs	r2, #0
 8011342:	2300      	movs	r3, #0
 8011344:	4640      	mov	r0, r8
 8011346:	4649      	mov	r1, r9
 8011348:	f7ef fbd8 	bl	8000afc <__aeabi_dcmplt>
 801134c:	b110      	cbz	r0, 8011354 <_printf_float+0x90>
 801134e:	232d      	movs	r3, #45	; 0x2d
 8011350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011354:	4b93      	ldr	r3, [pc, #588]	; (80115a4 <_printf_float+0x2e0>)
 8011356:	4894      	ldr	r0, [pc, #592]	; (80115a8 <_printf_float+0x2e4>)
 8011358:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801135c:	bf94      	ite	ls
 801135e:	4698      	movls	r8, r3
 8011360:	4680      	movhi	r8, r0
 8011362:	2303      	movs	r3, #3
 8011364:	6123      	str	r3, [r4, #16]
 8011366:	9b05      	ldr	r3, [sp, #20]
 8011368:	f023 0204 	bic.w	r2, r3, #4
 801136c:	6022      	str	r2, [r4, #0]
 801136e:	f04f 0900 	mov.w	r9, #0
 8011372:	9700      	str	r7, [sp, #0]
 8011374:	4633      	mov	r3, r6
 8011376:	aa0b      	add	r2, sp, #44	; 0x2c
 8011378:	4621      	mov	r1, r4
 801137a:	4628      	mov	r0, r5
 801137c:	f000 f9d8 	bl	8011730 <_printf_common>
 8011380:	3001      	adds	r0, #1
 8011382:	f040 8090 	bne.w	80114a6 <_printf_float+0x1e2>
 8011386:	f04f 30ff 	mov.w	r0, #4294967295
 801138a:	b00d      	add	sp, #52	; 0x34
 801138c:	ecbd 8b02 	vpop	{d8}
 8011390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011394:	4642      	mov	r2, r8
 8011396:	464b      	mov	r3, r9
 8011398:	4640      	mov	r0, r8
 801139a:	4649      	mov	r1, r9
 801139c:	f7ef fbd6 	bl	8000b4c <__aeabi_dcmpun>
 80113a0:	b140      	cbz	r0, 80113b4 <_printf_float+0xf0>
 80113a2:	464b      	mov	r3, r9
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	bfbc      	itt	lt
 80113a8:	232d      	movlt	r3, #45	; 0x2d
 80113aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80113ae:	487f      	ldr	r0, [pc, #508]	; (80115ac <_printf_float+0x2e8>)
 80113b0:	4b7f      	ldr	r3, [pc, #508]	; (80115b0 <_printf_float+0x2ec>)
 80113b2:	e7d1      	b.n	8011358 <_printf_float+0x94>
 80113b4:	6863      	ldr	r3, [r4, #4]
 80113b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80113ba:	9206      	str	r2, [sp, #24]
 80113bc:	1c5a      	adds	r2, r3, #1
 80113be:	d13f      	bne.n	8011440 <_printf_float+0x17c>
 80113c0:	2306      	movs	r3, #6
 80113c2:	6063      	str	r3, [r4, #4]
 80113c4:	9b05      	ldr	r3, [sp, #20]
 80113c6:	6861      	ldr	r1, [r4, #4]
 80113c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80113cc:	2300      	movs	r3, #0
 80113ce:	9303      	str	r3, [sp, #12]
 80113d0:	ab0a      	add	r3, sp, #40	; 0x28
 80113d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80113d6:	ab09      	add	r3, sp, #36	; 0x24
 80113d8:	ec49 8b10 	vmov	d0, r8, r9
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	6022      	str	r2, [r4, #0]
 80113e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80113e4:	4628      	mov	r0, r5
 80113e6:	f7ff fecd 	bl	8011184 <__cvt>
 80113ea:	9b06      	ldr	r3, [sp, #24]
 80113ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113ee:	2b47      	cmp	r3, #71	; 0x47
 80113f0:	4680      	mov	r8, r0
 80113f2:	d108      	bne.n	8011406 <_printf_float+0x142>
 80113f4:	1cc8      	adds	r0, r1, #3
 80113f6:	db02      	blt.n	80113fe <_printf_float+0x13a>
 80113f8:	6863      	ldr	r3, [r4, #4]
 80113fa:	4299      	cmp	r1, r3
 80113fc:	dd41      	ble.n	8011482 <_printf_float+0x1be>
 80113fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8011402:	fa5f fb8b 	uxtb.w	fp, fp
 8011406:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801140a:	d820      	bhi.n	801144e <_printf_float+0x18a>
 801140c:	3901      	subs	r1, #1
 801140e:	465a      	mov	r2, fp
 8011410:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011414:	9109      	str	r1, [sp, #36]	; 0x24
 8011416:	f7ff ff17 	bl	8011248 <__exponent>
 801141a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801141c:	1813      	adds	r3, r2, r0
 801141e:	2a01      	cmp	r2, #1
 8011420:	4681      	mov	r9, r0
 8011422:	6123      	str	r3, [r4, #16]
 8011424:	dc02      	bgt.n	801142c <_printf_float+0x168>
 8011426:	6822      	ldr	r2, [r4, #0]
 8011428:	07d2      	lsls	r2, r2, #31
 801142a:	d501      	bpl.n	8011430 <_printf_float+0x16c>
 801142c:	3301      	adds	r3, #1
 801142e:	6123      	str	r3, [r4, #16]
 8011430:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011434:	2b00      	cmp	r3, #0
 8011436:	d09c      	beq.n	8011372 <_printf_float+0xae>
 8011438:	232d      	movs	r3, #45	; 0x2d
 801143a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801143e:	e798      	b.n	8011372 <_printf_float+0xae>
 8011440:	9a06      	ldr	r2, [sp, #24]
 8011442:	2a47      	cmp	r2, #71	; 0x47
 8011444:	d1be      	bne.n	80113c4 <_printf_float+0x100>
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1bc      	bne.n	80113c4 <_printf_float+0x100>
 801144a:	2301      	movs	r3, #1
 801144c:	e7b9      	b.n	80113c2 <_printf_float+0xfe>
 801144e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011452:	d118      	bne.n	8011486 <_printf_float+0x1c2>
 8011454:	2900      	cmp	r1, #0
 8011456:	6863      	ldr	r3, [r4, #4]
 8011458:	dd0b      	ble.n	8011472 <_printf_float+0x1ae>
 801145a:	6121      	str	r1, [r4, #16]
 801145c:	b913      	cbnz	r3, 8011464 <_printf_float+0x1a0>
 801145e:	6822      	ldr	r2, [r4, #0]
 8011460:	07d0      	lsls	r0, r2, #31
 8011462:	d502      	bpl.n	801146a <_printf_float+0x1a6>
 8011464:	3301      	adds	r3, #1
 8011466:	440b      	add	r3, r1
 8011468:	6123      	str	r3, [r4, #16]
 801146a:	65a1      	str	r1, [r4, #88]	; 0x58
 801146c:	f04f 0900 	mov.w	r9, #0
 8011470:	e7de      	b.n	8011430 <_printf_float+0x16c>
 8011472:	b913      	cbnz	r3, 801147a <_printf_float+0x1b6>
 8011474:	6822      	ldr	r2, [r4, #0]
 8011476:	07d2      	lsls	r2, r2, #31
 8011478:	d501      	bpl.n	801147e <_printf_float+0x1ba>
 801147a:	3302      	adds	r3, #2
 801147c:	e7f4      	b.n	8011468 <_printf_float+0x1a4>
 801147e:	2301      	movs	r3, #1
 8011480:	e7f2      	b.n	8011468 <_printf_float+0x1a4>
 8011482:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011488:	4299      	cmp	r1, r3
 801148a:	db05      	blt.n	8011498 <_printf_float+0x1d4>
 801148c:	6823      	ldr	r3, [r4, #0]
 801148e:	6121      	str	r1, [r4, #16]
 8011490:	07d8      	lsls	r0, r3, #31
 8011492:	d5ea      	bpl.n	801146a <_printf_float+0x1a6>
 8011494:	1c4b      	adds	r3, r1, #1
 8011496:	e7e7      	b.n	8011468 <_printf_float+0x1a4>
 8011498:	2900      	cmp	r1, #0
 801149a:	bfd4      	ite	le
 801149c:	f1c1 0202 	rsble	r2, r1, #2
 80114a0:	2201      	movgt	r2, #1
 80114a2:	4413      	add	r3, r2
 80114a4:	e7e0      	b.n	8011468 <_printf_float+0x1a4>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	055a      	lsls	r2, r3, #21
 80114aa:	d407      	bmi.n	80114bc <_printf_float+0x1f8>
 80114ac:	6923      	ldr	r3, [r4, #16]
 80114ae:	4642      	mov	r2, r8
 80114b0:	4631      	mov	r1, r6
 80114b2:	4628      	mov	r0, r5
 80114b4:	47b8      	blx	r7
 80114b6:	3001      	adds	r0, #1
 80114b8:	d12c      	bne.n	8011514 <_printf_float+0x250>
 80114ba:	e764      	b.n	8011386 <_printf_float+0xc2>
 80114bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80114c0:	f240 80e0 	bls.w	8011684 <_printf_float+0x3c0>
 80114c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80114c8:	2200      	movs	r2, #0
 80114ca:	2300      	movs	r3, #0
 80114cc:	f7ef fb0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d034      	beq.n	801153e <_printf_float+0x27a>
 80114d4:	4a37      	ldr	r2, [pc, #220]	; (80115b4 <_printf_float+0x2f0>)
 80114d6:	2301      	movs	r3, #1
 80114d8:	4631      	mov	r1, r6
 80114da:	4628      	mov	r0, r5
 80114dc:	47b8      	blx	r7
 80114de:	3001      	adds	r0, #1
 80114e0:	f43f af51 	beq.w	8011386 <_printf_float+0xc2>
 80114e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114e8:	429a      	cmp	r2, r3
 80114ea:	db02      	blt.n	80114f2 <_printf_float+0x22e>
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	07d8      	lsls	r0, r3, #31
 80114f0:	d510      	bpl.n	8011514 <_printf_float+0x250>
 80114f2:	ee18 3a10 	vmov	r3, s16
 80114f6:	4652      	mov	r2, sl
 80114f8:	4631      	mov	r1, r6
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b8      	blx	r7
 80114fe:	3001      	adds	r0, #1
 8011500:	f43f af41 	beq.w	8011386 <_printf_float+0xc2>
 8011504:	f04f 0800 	mov.w	r8, #0
 8011508:	f104 091a 	add.w	r9, r4, #26
 801150c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801150e:	3b01      	subs	r3, #1
 8011510:	4543      	cmp	r3, r8
 8011512:	dc09      	bgt.n	8011528 <_printf_float+0x264>
 8011514:	6823      	ldr	r3, [r4, #0]
 8011516:	079b      	lsls	r3, r3, #30
 8011518:	f100 8105 	bmi.w	8011726 <_printf_float+0x462>
 801151c:	68e0      	ldr	r0, [r4, #12]
 801151e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011520:	4298      	cmp	r0, r3
 8011522:	bfb8      	it	lt
 8011524:	4618      	movlt	r0, r3
 8011526:	e730      	b.n	801138a <_printf_float+0xc6>
 8011528:	2301      	movs	r3, #1
 801152a:	464a      	mov	r2, r9
 801152c:	4631      	mov	r1, r6
 801152e:	4628      	mov	r0, r5
 8011530:	47b8      	blx	r7
 8011532:	3001      	adds	r0, #1
 8011534:	f43f af27 	beq.w	8011386 <_printf_float+0xc2>
 8011538:	f108 0801 	add.w	r8, r8, #1
 801153c:	e7e6      	b.n	801150c <_printf_float+0x248>
 801153e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011540:	2b00      	cmp	r3, #0
 8011542:	dc39      	bgt.n	80115b8 <_printf_float+0x2f4>
 8011544:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <_printf_float+0x2f0>)
 8011546:	2301      	movs	r3, #1
 8011548:	4631      	mov	r1, r6
 801154a:	4628      	mov	r0, r5
 801154c:	47b8      	blx	r7
 801154e:	3001      	adds	r0, #1
 8011550:	f43f af19 	beq.w	8011386 <_printf_float+0xc2>
 8011554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011558:	4313      	orrs	r3, r2
 801155a:	d102      	bne.n	8011562 <_printf_float+0x29e>
 801155c:	6823      	ldr	r3, [r4, #0]
 801155e:	07d9      	lsls	r1, r3, #31
 8011560:	d5d8      	bpl.n	8011514 <_printf_float+0x250>
 8011562:	ee18 3a10 	vmov	r3, s16
 8011566:	4652      	mov	r2, sl
 8011568:	4631      	mov	r1, r6
 801156a:	4628      	mov	r0, r5
 801156c:	47b8      	blx	r7
 801156e:	3001      	adds	r0, #1
 8011570:	f43f af09 	beq.w	8011386 <_printf_float+0xc2>
 8011574:	f04f 0900 	mov.w	r9, #0
 8011578:	f104 0a1a 	add.w	sl, r4, #26
 801157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801157e:	425b      	negs	r3, r3
 8011580:	454b      	cmp	r3, r9
 8011582:	dc01      	bgt.n	8011588 <_printf_float+0x2c4>
 8011584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011586:	e792      	b.n	80114ae <_printf_float+0x1ea>
 8011588:	2301      	movs	r3, #1
 801158a:	4652      	mov	r2, sl
 801158c:	4631      	mov	r1, r6
 801158e:	4628      	mov	r0, r5
 8011590:	47b8      	blx	r7
 8011592:	3001      	adds	r0, #1
 8011594:	f43f aef7 	beq.w	8011386 <_printf_float+0xc2>
 8011598:	f109 0901 	add.w	r9, r9, #1
 801159c:	e7ee      	b.n	801157c <_printf_float+0x2b8>
 801159e:	bf00      	nop
 80115a0:	7fefffff 	.word	0x7fefffff
 80115a4:	08016528 	.word	0x08016528
 80115a8:	0801652c 	.word	0x0801652c
 80115ac:	08016534 	.word	0x08016534
 80115b0:	08016530 	.word	0x08016530
 80115b4:	08016971 	.word	0x08016971
 80115b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80115bc:	429a      	cmp	r2, r3
 80115be:	bfa8      	it	ge
 80115c0:	461a      	movge	r2, r3
 80115c2:	2a00      	cmp	r2, #0
 80115c4:	4691      	mov	r9, r2
 80115c6:	dc37      	bgt.n	8011638 <_printf_float+0x374>
 80115c8:	f04f 0b00 	mov.w	fp, #0
 80115cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115d0:	f104 021a 	add.w	r2, r4, #26
 80115d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80115d6:	9305      	str	r3, [sp, #20]
 80115d8:	eba3 0309 	sub.w	r3, r3, r9
 80115dc:	455b      	cmp	r3, fp
 80115de:	dc33      	bgt.n	8011648 <_printf_float+0x384>
 80115e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80115e4:	429a      	cmp	r2, r3
 80115e6:	db3b      	blt.n	8011660 <_printf_float+0x39c>
 80115e8:	6823      	ldr	r3, [r4, #0]
 80115ea:	07da      	lsls	r2, r3, #31
 80115ec:	d438      	bmi.n	8011660 <_printf_float+0x39c>
 80115ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115f0:	9b05      	ldr	r3, [sp, #20]
 80115f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	eba2 0901 	sub.w	r9, r2, r1
 80115fa:	4599      	cmp	r9, r3
 80115fc:	bfa8      	it	ge
 80115fe:	4699      	movge	r9, r3
 8011600:	f1b9 0f00 	cmp.w	r9, #0
 8011604:	dc35      	bgt.n	8011672 <_printf_float+0x3ae>
 8011606:	f04f 0800 	mov.w	r8, #0
 801160a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801160e:	f104 0a1a 	add.w	sl, r4, #26
 8011612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011616:	1a9b      	subs	r3, r3, r2
 8011618:	eba3 0309 	sub.w	r3, r3, r9
 801161c:	4543      	cmp	r3, r8
 801161e:	f77f af79 	ble.w	8011514 <_printf_float+0x250>
 8011622:	2301      	movs	r3, #1
 8011624:	4652      	mov	r2, sl
 8011626:	4631      	mov	r1, r6
 8011628:	4628      	mov	r0, r5
 801162a:	47b8      	blx	r7
 801162c:	3001      	adds	r0, #1
 801162e:	f43f aeaa 	beq.w	8011386 <_printf_float+0xc2>
 8011632:	f108 0801 	add.w	r8, r8, #1
 8011636:	e7ec      	b.n	8011612 <_printf_float+0x34e>
 8011638:	4613      	mov	r3, r2
 801163a:	4631      	mov	r1, r6
 801163c:	4642      	mov	r2, r8
 801163e:	4628      	mov	r0, r5
 8011640:	47b8      	blx	r7
 8011642:	3001      	adds	r0, #1
 8011644:	d1c0      	bne.n	80115c8 <_printf_float+0x304>
 8011646:	e69e      	b.n	8011386 <_printf_float+0xc2>
 8011648:	2301      	movs	r3, #1
 801164a:	4631      	mov	r1, r6
 801164c:	4628      	mov	r0, r5
 801164e:	9205      	str	r2, [sp, #20]
 8011650:	47b8      	blx	r7
 8011652:	3001      	adds	r0, #1
 8011654:	f43f ae97 	beq.w	8011386 <_printf_float+0xc2>
 8011658:	9a05      	ldr	r2, [sp, #20]
 801165a:	f10b 0b01 	add.w	fp, fp, #1
 801165e:	e7b9      	b.n	80115d4 <_printf_float+0x310>
 8011660:	ee18 3a10 	vmov	r3, s16
 8011664:	4652      	mov	r2, sl
 8011666:	4631      	mov	r1, r6
 8011668:	4628      	mov	r0, r5
 801166a:	47b8      	blx	r7
 801166c:	3001      	adds	r0, #1
 801166e:	d1be      	bne.n	80115ee <_printf_float+0x32a>
 8011670:	e689      	b.n	8011386 <_printf_float+0xc2>
 8011672:	9a05      	ldr	r2, [sp, #20]
 8011674:	464b      	mov	r3, r9
 8011676:	4442      	add	r2, r8
 8011678:	4631      	mov	r1, r6
 801167a:	4628      	mov	r0, r5
 801167c:	47b8      	blx	r7
 801167e:	3001      	adds	r0, #1
 8011680:	d1c1      	bne.n	8011606 <_printf_float+0x342>
 8011682:	e680      	b.n	8011386 <_printf_float+0xc2>
 8011684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011686:	2a01      	cmp	r2, #1
 8011688:	dc01      	bgt.n	801168e <_printf_float+0x3ca>
 801168a:	07db      	lsls	r3, r3, #31
 801168c:	d538      	bpl.n	8011700 <_printf_float+0x43c>
 801168e:	2301      	movs	r3, #1
 8011690:	4642      	mov	r2, r8
 8011692:	4631      	mov	r1, r6
 8011694:	4628      	mov	r0, r5
 8011696:	47b8      	blx	r7
 8011698:	3001      	adds	r0, #1
 801169a:	f43f ae74 	beq.w	8011386 <_printf_float+0xc2>
 801169e:	ee18 3a10 	vmov	r3, s16
 80116a2:	4652      	mov	r2, sl
 80116a4:	4631      	mov	r1, r6
 80116a6:	4628      	mov	r0, r5
 80116a8:	47b8      	blx	r7
 80116aa:	3001      	adds	r0, #1
 80116ac:	f43f ae6b 	beq.w	8011386 <_printf_float+0xc2>
 80116b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80116b4:	2200      	movs	r2, #0
 80116b6:	2300      	movs	r3, #0
 80116b8:	f7ef fa16 	bl	8000ae8 <__aeabi_dcmpeq>
 80116bc:	b9d8      	cbnz	r0, 80116f6 <_printf_float+0x432>
 80116be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116c0:	f108 0201 	add.w	r2, r8, #1
 80116c4:	3b01      	subs	r3, #1
 80116c6:	4631      	mov	r1, r6
 80116c8:	4628      	mov	r0, r5
 80116ca:	47b8      	blx	r7
 80116cc:	3001      	adds	r0, #1
 80116ce:	d10e      	bne.n	80116ee <_printf_float+0x42a>
 80116d0:	e659      	b.n	8011386 <_printf_float+0xc2>
 80116d2:	2301      	movs	r3, #1
 80116d4:	4652      	mov	r2, sl
 80116d6:	4631      	mov	r1, r6
 80116d8:	4628      	mov	r0, r5
 80116da:	47b8      	blx	r7
 80116dc:	3001      	adds	r0, #1
 80116de:	f43f ae52 	beq.w	8011386 <_printf_float+0xc2>
 80116e2:	f108 0801 	add.w	r8, r8, #1
 80116e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116e8:	3b01      	subs	r3, #1
 80116ea:	4543      	cmp	r3, r8
 80116ec:	dcf1      	bgt.n	80116d2 <_printf_float+0x40e>
 80116ee:	464b      	mov	r3, r9
 80116f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80116f4:	e6dc      	b.n	80114b0 <_printf_float+0x1ec>
 80116f6:	f04f 0800 	mov.w	r8, #0
 80116fa:	f104 0a1a 	add.w	sl, r4, #26
 80116fe:	e7f2      	b.n	80116e6 <_printf_float+0x422>
 8011700:	2301      	movs	r3, #1
 8011702:	4642      	mov	r2, r8
 8011704:	e7df      	b.n	80116c6 <_printf_float+0x402>
 8011706:	2301      	movs	r3, #1
 8011708:	464a      	mov	r2, r9
 801170a:	4631      	mov	r1, r6
 801170c:	4628      	mov	r0, r5
 801170e:	47b8      	blx	r7
 8011710:	3001      	adds	r0, #1
 8011712:	f43f ae38 	beq.w	8011386 <_printf_float+0xc2>
 8011716:	f108 0801 	add.w	r8, r8, #1
 801171a:	68e3      	ldr	r3, [r4, #12]
 801171c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801171e:	1a5b      	subs	r3, r3, r1
 8011720:	4543      	cmp	r3, r8
 8011722:	dcf0      	bgt.n	8011706 <_printf_float+0x442>
 8011724:	e6fa      	b.n	801151c <_printf_float+0x258>
 8011726:	f04f 0800 	mov.w	r8, #0
 801172a:	f104 0919 	add.w	r9, r4, #25
 801172e:	e7f4      	b.n	801171a <_printf_float+0x456>

08011730 <_printf_common>:
 8011730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011734:	4616      	mov	r6, r2
 8011736:	4699      	mov	r9, r3
 8011738:	688a      	ldr	r2, [r1, #8]
 801173a:	690b      	ldr	r3, [r1, #16]
 801173c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011740:	4293      	cmp	r3, r2
 8011742:	bfb8      	it	lt
 8011744:	4613      	movlt	r3, r2
 8011746:	6033      	str	r3, [r6, #0]
 8011748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801174c:	4607      	mov	r7, r0
 801174e:	460c      	mov	r4, r1
 8011750:	b10a      	cbz	r2, 8011756 <_printf_common+0x26>
 8011752:	3301      	adds	r3, #1
 8011754:	6033      	str	r3, [r6, #0]
 8011756:	6823      	ldr	r3, [r4, #0]
 8011758:	0699      	lsls	r1, r3, #26
 801175a:	bf42      	ittt	mi
 801175c:	6833      	ldrmi	r3, [r6, #0]
 801175e:	3302      	addmi	r3, #2
 8011760:	6033      	strmi	r3, [r6, #0]
 8011762:	6825      	ldr	r5, [r4, #0]
 8011764:	f015 0506 	ands.w	r5, r5, #6
 8011768:	d106      	bne.n	8011778 <_printf_common+0x48>
 801176a:	f104 0a19 	add.w	sl, r4, #25
 801176e:	68e3      	ldr	r3, [r4, #12]
 8011770:	6832      	ldr	r2, [r6, #0]
 8011772:	1a9b      	subs	r3, r3, r2
 8011774:	42ab      	cmp	r3, r5
 8011776:	dc26      	bgt.n	80117c6 <_printf_common+0x96>
 8011778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801177c:	1e13      	subs	r3, r2, #0
 801177e:	6822      	ldr	r2, [r4, #0]
 8011780:	bf18      	it	ne
 8011782:	2301      	movne	r3, #1
 8011784:	0692      	lsls	r2, r2, #26
 8011786:	d42b      	bmi.n	80117e0 <_printf_common+0xb0>
 8011788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801178c:	4649      	mov	r1, r9
 801178e:	4638      	mov	r0, r7
 8011790:	47c0      	blx	r8
 8011792:	3001      	adds	r0, #1
 8011794:	d01e      	beq.n	80117d4 <_printf_common+0xa4>
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	68e5      	ldr	r5, [r4, #12]
 801179a:	6832      	ldr	r2, [r6, #0]
 801179c:	f003 0306 	and.w	r3, r3, #6
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	bf08      	it	eq
 80117a4:	1aad      	subeq	r5, r5, r2
 80117a6:	68a3      	ldr	r3, [r4, #8]
 80117a8:	6922      	ldr	r2, [r4, #16]
 80117aa:	bf0c      	ite	eq
 80117ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117b0:	2500      	movne	r5, #0
 80117b2:	4293      	cmp	r3, r2
 80117b4:	bfc4      	itt	gt
 80117b6:	1a9b      	subgt	r3, r3, r2
 80117b8:	18ed      	addgt	r5, r5, r3
 80117ba:	2600      	movs	r6, #0
 80117bc:	341a      	adds	r4, #26
 80117be:	42b5      	cmp	r5, r6
 80117c0:	d11a      	bne.n	80117f8 <_printf_common+0xc8>
 80117c2:	2000      	movs	r0, #0
 80117c4:	e008      	b.n	80117d8 <_printf_common+0xa8>
 80117c6:	2301      	movs	r3, #1
 80117c8:	4652      	mov	r2, sl
 80117ca:	4649      	mov	r1, r9
 80117cc:	4638      	mov	r0, r7
 80117ce:	47c0      	blx	r8
 80117d0:	3001      	adds	r0, #1
 80117d2:	d103      	bne.n	80117dc <_printf_common+0xac>
 80117d4:	f04f 30ff 	mov.w	r0, #4294967295
 80117d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117dc:	3501      	adds	r5, #1
 80117de:	e7c6      	b.n	801176e <_printf_common+0x3e>
 80117e0:	18e1      	adds	r1, r4, r3
 80117e2:	1c5a      	adds	r2, r3, #1
 80117e4:	2030      	movs	r0, #48	; 0x30
 80117e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117ea:	4422      	add	r2, r4
 80117ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117f4:	3302      	adds	r3, #2
 80117f6:	e7c7      	b.n	8011788 <_printf_common+0x58>
 80117f8:	2301      	movs	r3, #1
 80117fa:	4622      	mov	r2, r4
 80117fc:	4649      	mov	r1, r9
 80117fe:	4638      	mov	r0, r7
 8011800:	47c0      	blx	r8
 8011802:	3001      	adds	r0, #1
 8011804:	d0e6      	beq.n	80117d4 <_printf_common+0xa4>
 8011806:	3601      	adds	r6, #1
 8011808:	e7d9      	b.n	80117be <_printf_common+0x8e>
	...

0801180c <_printf_i>:
 801180c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011810:	460c      	mov	r4, r1
 8011812:	4691      	mov	r9, r2
 8011814:	7e27      	ldrb	r7, [r4, #24]
 8011816:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011818:	2f78      	cmp	r7, #120	; 0x78
 801181a:	4680      	mov	r8, r0
 801181c:	469a      	mov	sl, r3
 801181e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011822:	d807      	bhi.n	8011834 <_printf_i+0x28>
 8011824:	2f62      	cmp	r7, #98	; 0x62
 8011826:	d80a      	bhi.n	801183e <_printf_i+0x32>
 8011828:	2f00      	cmp	r7, #0
 801182a:	f000 80d8 	beq.w	80119de <_printf_i+0x1d2>
 801182e:	2f58      	cmp	r7, #88	; 0x58
 8011830:	f000 80a3 	beq.w	801197a <_printf_i+0x16e>
 8011834:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801183c:	e03a      	b.n	80118b4 <_printf_i+0xa8>
 801183e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011842:	2b15      	cmp	r3, #21
 8011844:	d8f6      	bhi.n	8011834 <_printf_i+0x28>
 8011846:	a001      	add	r0, pc, #4	; (adr r0, 801184c <_printf_i+0x40>)
 8011848:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801184c:	080118a5 	.word	0x080118a5
 8011850:	080118b9 	.word	0x080118b9
 8011854:	08011835 	.word	0x08011835
 8011858:	08011835 	.word	0x08011835
 801185c:	08011835 	.word	0x08011835
 8011860:	08011835 	.word	0x08011835
 8011864:	080118b9 	.word	0x080118b9
 8011868:	08011835 	.word	0x08011835
 801186c:	08011835 	.word	0x08011835
 8011870:	08011835 	.word	0x08011835
 8011874:	08011835 	.word	0x08011835
 8011878:	080119c5 	.word	0x080119c5
 801187c:	080118e9 	.word	0x080118e9
 8011880:	080119a7 	.word	0x080119a7
 8011884:	08011835 	.word	0x08011835
 8011888:	08011835 	.word	0x08011835
 801188c:	080119e7 	.word	0x080119e7
 8011890:	08011835 	.word	0x08011835
 8011894:	080118e9 	.word	0x080118e9
 8011898:	08011835 	.word	0x08011835
 801189c:	08011835 	.word	0x08011835
 80118a0:	080119af 	.word	0x080119af
 80118a4:	680b      	ldr	r3, [r1, #0]
 80118a6:	1d1a      	adds	r2, r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	600a      	str	r2, [r1, #0]
 80118ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80118b4:	2301      	movs	r3, #1
 80118b6:	e0a3      	b.n	8011a00 <_printf_i+0x1f4>
 80118b8:	6825      	ldr	r5, [r4, #0]
 80118ba:	6808      	ldr	r0, [r1, #0]
 80118bc:	062e      	lsls	r6, r5, #24
 80118be:	f100 0304 	add.w	r3, r0, #4
 80118c2:	d50a      	bpl.n	80118da <_printf_i+0xce>
 80118c4:	6805      	ldr	r5, [r0, #0]
 80118c6:	600b      	str	r3, [r1, #0]
 80118c8:	2d00      	cmp	r5, #0
 80118ca:	da03      	bge.n	80118d4 <_printf_i+0xc8>
 80118cc:	232d      	movs	r3, #45	; 0x2d
 80118ce:	426d      	negs	r5, r5
 80118d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118d4:	485e      	ldr	r0, [pc, #376]	; (8011a50 <_printf_i+0x244>)
 80118d6:	230a      	movs	r3, #10
 80118d8:	e019      	b.n	801190e <_printf_i+0x102>
 80118da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80118de:	6805      	ldr	r5, [r0, #0]
 80118e0:	600b      	str	r3, [r1, #0]
 80118e2:	bf18      	it	ne
 80118e4:	b22d      	sxthne	r5, r5
 80118e6:	e7ef      	b.n	80118c8 <_printf_i+0xbc>
 80118e8:	680b      	ldr	r3, [r1, #0]
 80118ea:	6825      	ldr	r5, [r4, #0]
 80118ec:	1d18      	adds	r0, r3, #4
 80118ee:	6008      	str	r0, [r1, #0]
 80118f0:	0628      	lsls	r0, r5, #24
 80118f2:	d501      	bpl.n	80118f8 <_printf_i+0xec>
 80118f4:	681d      	ldr	r5, [r3, #0]
 80118f6:	e002      	b.n	80118fe <_printf_i+0xf2>
 80118f8:	0669      	lsls	r1, r5, #25
 80118fa:	d5fb      	bpl.n	80118f4 <_printf_i+0xe8>
 80118fc:	881d      	ldrh	r5, [r3, #0]
 80118fe:	4854      	ldr	r0, [pc, #336]	; (8011a50 <_printf_i+0x244>)
 8011900:	2f6f      	cmp	r7, #111	; 0x6f
 8011902:	bf0c      	ite	eq
 8011904:	2308      	moveq	r3, #8
 8011906:	230a      	movne	r3, #10
 8011908:	2100      	movs	r1, #0
 801190a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801190e:	6866      	ldr	r6, [r4, #4]
 8011910:	60a6      	str	r6, [r4, #8]
 8011912:	2e00      	cmp	r6, #0
 8011914:	bfa2      	ittt	ge
 8011916:	6821      	ldrge	r1, [r4, #0]
 8011918:	f021 0104 	bicge.w	r1, r1, #4
 801191c:	6021      	strge	r1, [r4, #0]
 801191e:	b90d      	cbnz	r5, 8011924 <_printf_i+0x118>
 8011920:	2e00      	cmp	r6, #0
 8011922:	d04d      	beq.n	80119c0 <_printf_i+0x1b4>
 8011924:	4616      	mov	r6, r2
 8011926:	fbb5 f1f3 	udiv	r1, r5, r3
 801192a:	fb03 5711 	mls	r7, r3, r1, r5
 801192e:	5dc7      	ldrb	r7, [r0, r7]
 8011930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011934:	462f      	mov	r7, r5
 8011936:	42bb      	cmp	r3, r7
 8011938:	460d      	mov	r5, r1
 801193a:	d9f4      	bls.n	8011926 <_printf_i+0x11a>
 801193c:	2b08      	cmp	r3, #8
 801193e:	d10b      	bne.n	8011958 <_printf_i+0x14c>
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	07df      	lsls	r7, r3, #31
 8011944:	d508      	bpl.n	8011958 <_printf_i+0x14c>
 8011946:	6923      	ldr	r3, [r4, #16]
 8011948:	6861      	ldr	r1, [r4, #4]
 801194a:	4299      	cmp	r1, r3
 801194c:	bfde      	ittt	le
 801194e:	2330      	movle	r3, #48	; 0x30
 8011950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011954:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011958:	1b92      	subs	r2, r2, r6
 801195a:	6122      	str	r2, [r4, #16]
 801195c:	f8cd a000 	str.w	sl, [sp]
 8011960:	464b      	mov	r3, r9
 8011962:	aa03      	add	r2, sp, #12
 8011964:	4621      	mov	r1, r4
 8011966:	4640      	mov	r0, r8
 8011968:	f7ff fee2 	bl	8011730 <_printf_common>
 801196c:	3001      	adds	r0, #1
 801196e:	d14c      	bne.n	8011a0a <_printf_i+0x1fe>
 8011970:	f04f 30ff 	mov.w	r0, #4294967295
 8011974:	b004      	add	sp, #16
 8011976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197a:	4835      	ldr	r0, [pc, #212]	; (8011a50 <_printf_i+0x244>)
 801197c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011980:	6823      	ldr	r3, [r4, #0]
 8011982:	680e      	ldr	r6, [r1, #0]
 8011984:	061f      	lsls	r7, r3, #24
 8011986:	f856 5b04 	ldr.w	r5, [r6], #4
 801198a:	600e      	str	r6, [r1, #0]
 801198c:	d514      	bpl.n	80119b8 <_printf_i+0x1ac>
 801198e:	07d9      	lsls	r1, r3, #31
 8011990:	bf44      	itt	mi
 8011992:	f043 0320 	orrmi.w	r3, r3, #32
 8011996:	6023      	strmi	r3, [r4, #0]
 8011998:	b91d      	cbnz	r5, 80119a2 <_printf_i+0x196>
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	f023 0320 	bic.w	r3, r3, #32
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	2310      	movs	r3, #16
 80119a4:	e7b0      	b.n	8011908 <_printf_i+0xfc>
 80119a6:	6823      	ldr	r3, [r4, #0]
 80119a8:	f043 0320 	orr.w	r3, r3, #32
 80119ac:	6023      	str	r3, [r4, #0]
 80119ae:	2378      	movs	r3, #120	; 0x78
 80119b0:	4828      	ldr	r0, [pc, #160]	; (8011a54 <_printf_i+0x248>)
 80119b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80119b6:	e7e3      	b.n	8011980 <_printf_i+0x174>
 80119b8:	065e      	lsls	r6, r3, #25
 80119ba:	bf48      	it	mi
 80119bc:	b2ad      	uxthmi	r5, r5
 80119be:	e7e6      	b.n	801198e <_printf_i+0x182>
 80119c0:	4616      	mov	r6, r2
 80119c2:	e7bb      	b.n	801193c <_printf_i+0x130>
 80119c4:	680b      	ldr	r3, [r1, #0]
 80119c6:	6826      	ldr	r6, [r4, #0]
 80119c8:	6960      	ldr	r0, [r4, #20]
 80119ca:	1d1d      	adds	r5, r3, #4
 80119cc:	600d      	str	r5, [r1, #0]
 80119ce:	0635      	lsls	r5, r6, #24
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	d501      	bpl.n	80119d8 <_printf_i+0x1cc>
 80119d4:	6018      	str	r0, [r3, #0]
 80119d6:	e002      	b.n	80119de <_printf_i+0x1d2>
 80119d8:	0671      	lsls	r1, r6, #25
 80119da:	d5fb      	bpl.n	80119d4 <_printf_i+0x1c8>
 80119dc:	8018      	strh	r0, [r3, #0]
 80119de:	2300      	movs	r3, #0
 80119e0:	6123      	str	r3, [r4, #16]
 80119e2:	4616      	mov	r6, r2
 80119e4:	e7ba      	b.n	801195c <_printf_i+0x150>
 80119e6:	680b      	ldr	r3, [r1, #0]
 80119e8:	1d1a      	adds	r2, r3, #4
 80119ea:	600a      	str	r2, [r1, #0]
 80119ec:	681e      	ldr	r6, [r3, #0]
 80119ee:	6862      	ldr	r2, [r4, #4]
 80119f0:	2100      	movs	r1, #0
 80119f2:	4630      	mov	r0, r6
 80119f4:	f7ee fc04 	bl	8000200 <memchr>
 80119f8:	b108      	cbz	r0, 80119fe <_printf_i+0x1f2>
 80119fa:	1b80      	subs	r0, r0, r6
 80119fc:	6060      	str	r0, [r4, #4]
 80119fe:	6863      	ldr	r3, [r4, #4]
 8011a00:	6123      	str	r3, [r4, #16]
 8011a02:	2300      	movs	r3, #0
 8011a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a08:	e7a8      	b.n	801195c <_printf_i+0x150>
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	4632      	mov	r2, r6
 8011a0e:	4649      	mov	r1, r9
 8011a10:	4640      	mov	r0, r8
 8011a12:	47d0      	blx	sl
 8011a14:	3001      	adds	r0, #1
 8011a16:	d0ab      	beq.n	8011970 <_printf_i+0x164>
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	079b      	lsls	r3, r3, #30
 8011a1c:	d413      	bmi.n	8011a46 <_printf_i+0x23a>
 8011a1e:	68e0      	ldr	r0, [r4, #12]
 8011a20:	9b03      	ldr	r3, [sp, #12]
 8011a22:	4298      	cmp	r0, r3
 8011a24:	bfb8      	it	lt
 8011a26:	4618      	movlt	r0, r3
 8011a28:	e7a4      	b.n	8011974 <_printf_i+0x168>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	4649      	mov	r1, r9
 8011a30:	4640      	mov	r0, r8
 8011a32:	47d0      	blx	sl
 8011a34:	3001      	adds	r0, #1
 8011a36:	d09b      	beq.n	8011970 <_printf_i+0x164>
 8011a38:	3501      	adds	r5, #1
 8011a3a:	68e3      	ldr	r3, [r4, #12]
 8011a3c:	9903      	ldr	r1, [sp, #12]
 8011a3e:	1a5b      	subs	r3, r3, r1
 8011a40:	42ab      	cmp	r3, r5
 8011a42:	dcf2      	bgt.n	8011a2a <_printf_i+0x21e>
 8011a44:	e7eb      	b.n	8011a1e <_printf_i+0x212>
 8011a46:	2500      	movs	r5, #0
 8011a48:	f104 0619 	add.w	r6, r4, #25
 8011a4c:	e7f5      	b.n	8011a3a <_printf_i+0x22e>
 8011a4e:	bf00      	nop
 8011a50:	08016538 	.word	0x08016538
 8011a54:	08016549 	.word	0x08016549

08011a58 <_scanf_float>:
 8011a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5c:	b087      	sub	sp, #28
 8011a5e:	4617      	mov	r7, r2
 8011a60:	9303      	str	r3, [sp, #12]
 8011a62:	688b      	ldr	r3, [r1, #8]
 8011a64:	1e5a      	subs	r2, r3, #1
 8011a66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011a6a:	bf83      	ittte	hi
 8011a6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011a70:	195b      	addhi	r3, r3, r5
 8011a72:	9302      	strhi	r3, [sp, #8]
 8011a74:	2300      	movls	r3, #0
 8011a76:	bf86      	itte	hi
 8011a78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011a7c:	608b      	strhi	r3, [r1, #8]
 8011a7e:	9302      	strls	r3, [sp, #8]
 8011a80:	680b      	ldr	r3, [r1, #0]
 8011a82:	468b      	mov	fp, r1
 8011a84:	2500      	movs	r5, #0
 8011a86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011a8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8011a8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011a92:	4680      	mov	r8, r0
 8011a94:	460c      	mov	r4, r1
 8011a96:	465e      	mov	r6, fp
 8011a98:	46aa      	mov	sl, r5
 8011a9a:	46a9      	mov	r9, r5
 8011a9c:	9501      	str	r5, [sp, #4]
 8011a9e:	68a2      	ldr	r2, [r4, #8]
 8011aa0:	b152      	cbz	r2, 8011ab8 <_scanf_float+0x60>
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	2b4e      	cmp	r3, #78	; 0x4e
 8011aa8:	d864      	bhi.n	8011b74 <_scanf_float+0x11c>
 8011aaa:	2b40      	cmp	r3, #64	; 0x40
 8011aac:	d83c      	bhi.n	8011b28 <_scanf_float+0xd0>
 8011aae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011ab2:	b2c8      	uxtb	r0, r1
 8011ab4:	280e      	cmp	r0, #14
 8011ab6:	d93a      	bls.n	8011b2e <_scanf_float+0xd6>
 8011ab8:	f1b9 0f00 	cmp.w	r9, #0
 8011abc:	d003      	beq.n	8011ac6 <_scanf_float+0x6e>
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011aca:	f1ba 0f01 	cmp.w	sl, #1
 8011ace:	f200 8113 	bhi.w	8011cf8 <_scanf_float+0x2a0>
 8011ad2:	455e      	cmp	r6, fp
 8011ad4:	f200 8105 	bhi.w	8011ce2 <_scanf_float+0x28a>
 8011ad8:	2501      	movs	r5, #1
 8011ada:	4628      	mov	r0, r5
 8011adc:	b007      	add	sp, #28
 8011ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011ae6:	2a0d      	cmp	r2, #13
 8011ae8:	d8e6      	bhi.n	8011ab8 <_scanf_float+0x60>
 8011aea:	a101      	add	r1, pc, #4	; (adr r1, 8011af0 <_scanf_float+0x98>)
 8011aec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011af0:	08011c2f 	.word	0x08011c2f
 8011af4:	08011ab9 	.word	0x08011ab9
 8011af8:	08011ab9 	.word	0x08011ab9
 8011afc:	08011ab9 	.word	0x08011ab9
 8011b00:	08011c8f 	.word	0x08011c8f
 8011b04:	08011c67 	.word	0x08011c67
 8011b08:	08011ab9 	.word	0x08011ab9
 8011b0c:	08011ab9 	.word	0x08011ab9
 8011b10:	08011c3d 	.word	0x08011c3d
 8011b14:	08011ab9 	.word	0x08011ab9
 8011b18:	08011ab9 	.word	0x08011ab9
 8011b1c:	08011ab9 	.word	0x08011ab9
 8011b20:	08011ab9 	.word	0x08011ab9
 8011b24:	08011bf5 	.word	0x08011bf5
 8011b28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011b2c:	e7db      	b.n	8011ae6 <_scanf_float+0x8e>
 8011b2e:	290e      	cmp	r1, #14
 8011b30:	d8c2      	bhi.n	8011ab8 <_scanf_float+0x60>
 8011b32:	a001      	add	r0, pc, #4	; (adr r0, 8011b38 <_scanf_float+0xe0>)
 8011b34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011b38:	08011be7 	.word	0x08011be7
 8011b3c:	08011ab9 	.word	0x08011ab9
 8011b40:	08011be7 	.word	0x08011be7
 8011b44:	08011c7b 	.word	0x08011c7b
 8011b48:	08011ab9 	.word	0x08011ab9
 8011b4c:	08011b95 	.word	0x08011b95
 8011b50:	08011bd1 	.word	0x08011bd1
 8011b54:	08011bd1 	.word	0x08011bd1
 8011b58:	08011bd1 	.word	0x08011bd1
 8011b5c:	08011bd1 	.word	0x08011bd1
 8011b60:	08011bd1 	.word	0x08011bd1
 8011b64:	08011bd1 	.word	0x08011bd1
 8011b68:	08011bd1 	.word	0x08011bd1
 8011b6c:	08011bd1 	.word	0x08011bd1
 8011b70:	08011bd1 	.word	0x08011bd1
 8011b74:	2b6e      	cmp	r3, #110	; 0x6e
 8011b76:	d809      	bhi.n	8011b8c <_scanf_float+0x134>
 8011b78:	2b60      	cmp	r3, #96	; 0x60
 8011b7a:	d8b2      	bhi.n	8011ae2 <_scanf_float+0x8a>
 8011b7c:	2b54      	cmp	r3, #84	; 0x54
 8011b7e:	d077      	beq.n	8011c70 <_scanf_float+0x218>
 8011b80:	2b59      	cmp	r3, #89	; 0x59
 8011b82:	d199      	bne.n	8011ab8 <_scanf_float+0x60>
 8011b84:	2d07      	cmp	r5, #7
 8011b86:	d197      	bne.n	8011ab8 <_scanf_float+0x60>
 8011b88:	2508      	movs	r5, #8
 8011b8a:	e029      	b.n	8011be0 <_scanf_float+0x188>
 8011b8c:	2b74      	cmp	r3, #116	; 0x74
 8011b8e:	d06f      	beq.n	8011c70 <_scanf_float+0x218>
 8011b90:	2b79      	cmp	r3, #121	; 0x79
 8011b92:	e7f6      	b.n	8011b82 <_scanf_float+0x12a>
 8011b94:	6821      	ldr	r1, [r4, #0]
 8011b96:	05c8      	lsls	r0, r1, #23
 8011b98:	d51a      	bpl.n	8011bd0 <_scanf_float+0x178>
 8011b9a:	9b02      	ldr	r3, [sp, #8]
 8011b9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011ba0:	6021      	str	r1, [r4, #0]
 8011ba2:	f109 0901 	add.w	r9, r9, #1
 8011ba6:	b11b      	cbz	r3, 8011bb0 <_scanf_float+0x158>
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	3201      	adds	r2, #1
 8011bac:	9302      	str	r3, [sp, #8]
 8011bae:	60a2      	str	r2, [r4, #8]
 8011bb0:	68a3      	ldr	r3, [r4, #8]
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	60a3      	str	r3, [r4, #8]
 8011bb6:	6923      	ldr	r3, [r4, #16]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	6123      	str	r3, [r4, #16]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	607b      	str	r3, [r7, #4]
 8011bc4:	f340 8084 	ble.w	8011cd0 <_scanf_float+0x278>
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	603b      	str	r3, [r7, #0]
 8011bce:	e766      	b.n	8011a9e <_scanf_float+0x46>
 8011bd0:	eb1a 0f05 	cmn.w	sl, r5
 8011bd4:	f47f af70 	bne.w	8011ab8 <_scanf_float+0x60>
 8011bd8:	6822      	ldr	r2, [r4, #0]
 8011bda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011bde:	6022      	str	r2, [r4, #0]
 8011be0:	f806 3b01 	strb.w	r3, [r6], #1
 8011be4:	e7e4      	b.n	8011bb0 <_scanf_float+0x158>
 8011be6:	6822      	ldr	r2, [r4, #0]
 8011be8:	0610      	lsls	r0, r2, #24
 8011bea:	f57f af65 	bpl.w	8011ab8 <_scanf_float+0x60>
 8011bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011bf2:	e7f4      	b.n	8011bde <_scanf_float+0x186>
 8011bf4:	f1ba 0f00 	cmp.w	sl, #0
 8011bf8:	d10e      	bne.n	8011c18 <_scanf_float+0x1c0>
 8011bfa:	f1b9 0f00 	cmp.w	r9, #0
 8011bfe:	d10e      	bne.n	8011c1e <_scanf_float+0x1c6>
 8011c00:	6822      	ldr	r2, [r4, #0]
 8011c02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011c06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011c0a:	d108      	bne.n	8011c1e <_scanf_float+0x1c6>
 8011c0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011c10:	6022      	str	r2, [r4, #0]
 8011c12:	f04f 0a01 	mov.w	sl, #1
 8011c16:	e7e3      	b.n	8011be0 <_scanf_float+0x188>
 8011c18:	f1ba 0f02 	cmp.w	sl, #2
 8011c1c:	d055      	beq.n	8011cca <_scanf_float+0x272>
 8011c1e:	2d01      	cmp	r5, #1
 8011c20:	d002      	beq.n	8011c28 <_scanf_float+0x1d0>
 8011c22:	2d04      	cmp	r5, #4
 8011c24:	f47f af48 	bne.w	8011ab8 <_scanf_float+0x60>
 8011c28:	3501      	adds	r5, #1
 8011c2a:	b2ed      	uxtb	r5, r5
 8011c2c:	e7d8      	b.n	8011be0 <_scanf_float+0x188>
 8011c2e:	f1ba 0f01 	cmp.w	sl, #1
 8011c32:	f47f af41 	bne.w	8011ab8 <_scanf_float+0x60>
 8011c36:	f04f 0a02 	mov.w	sl, #2
 8011c3a:	e7d1      	b.n	8011be0 <_scanf_float+0x188>
 8011c3c:	b97d      	cbnz	r5, 8011c5e <_scanf_float+0x206>
 8011c3e:	f1b9 0f00 	cmp.w	r9, #0
 8011c42:	f47f af3c 	bne.w	8011abe <_scanf_float+0x66>
 8011c46:	6822      	ldr	r2, [r4, #0]
 8011c48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011c4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011c50:	f47f af39 	bne.w	8011ac6 <_scanf_float+0x6e>
 8011c54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011c58:	6022      	str	r2, [r4, #0]
 8011c5a:	2501      	movs	r5, #1
 8011c5c:	e7c0      	b.n	8011be0 <_scanf_float+0x188>
 8011c5e:	2d03      	cmp	r5, #3
 8011c60:	d0e2      	beq.n	8011c28 <_scanf_float+0x1d0>
 8011c62:	2d05      	cmp	r5, #5
 8011c64:	e7de      	b.n	8011c24 <_scanf_float+0x1cc>
 8011c66:	2d02      	cmp	r5, #2
 8011c68:	f47f af26 	bne.w	8011ab8 <_scanf_float+0x60>
 8011c6c:	2503      	movs	r5, #3
 8011c6e:	e7b7      	b.n	8011be0 <_scanf_float+0x188>
 8011c70:	2d06      	cmp	r5, #6
 8011c72:	f47f af21 	bne.w	8011ab8 <_scanf_float+0x60>
 8011c76:	2507      	movs	r5, #7
 8011c78:	e7b2      	b.n	8011be0 <_scanf_float+0x188>
 8011c7a:	6822      	ldr	r2, [r4, #0]
 8011c7c:	0591      	lsls	r1, r2, #22
 8011c7e:	f57f af1b 	bpl.w	8011ab8 <_scanf_float+0x60>
 8011c82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011c86:	6022      	str	r2, [r4, #0]
 8011c88:	f8cd 9004 	str.w	r9, [sp, #4]
 8011c8c:	e7a8      	b.n	8011be0 <_scanf_float+0x188>
 8011c8e:	6822      	ldr	r2, [r4, #0]
 8011c90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011c94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011c98:	d006      	beq.n	8011ca8 <_scanf_float+0x250>
 8011c9a:	0550      	lsls	r0, r2, #21
 8011c9c:	f57f af0c 	bpl.w	8011ab8 <_scanf_float+0x60>
 8011ca0:	f1b9 0f00 	cmp.w	r9, #0
 8011ca4:	f43f af0f 	beq.w	8011ac6 <_scanf_float+0x6e>
 8011ca8:	0591      	lsls	r1, r2, #22
 8011caa:	bf58      	it	pl
 8011cac:	9901      	ldrpl	r1, [sp, #4]
 8011cae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011cb2:	bf58      	it	pl
 8011cb4:	eba9 0101 	subpl.w	r1, r9, r1
 8011cb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011cbc:	bf58      	it	pl
 8011cbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011cc2:	6022      	str	r2, [r4, #0]
 8011cc4:	f04f 0900 	mov.w	r9, #0
 8011cc8:	e78a      	b.n	8011be0 <_scanf_float+0x188>
 8011cca:	f04f 0a03 	mov.w	sl, #3
 8011cce:	e787      	b.n	8011be0 <_scanf_float+0x188>
 8011cd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011cd4:	4639      	mov	r1, r7
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4798      	blx	r3
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	f43f aedf 	beq.w	8011a9e <_scanf_float+0x46>
 8011ce0:	e6ea      	b.n	8011ab8 <_scanf_float+0x60>
 8011ce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ce6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011cea:	463a      	mov	r2, r7
 8011cec:	4640      	mov	r0, r8
 8011cee:	4798      	blx	r3
 8011cf0:	6923      	ldr	r3, [r4, #16]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	6123      	str	r3, [r4, #16]
 8011cf6:	e6ec      	b.n	8011ad2 <_scanf_float+0x7a>
 8011cf8:	1e6b      	subs	r3, r5, #1
 8011cfa:	2b06      	cmp	r3, #6
 8011cfc:	d825      	bhi.n	8011d4a <_scanf_float+0x2f2>
 8011cfe:	2d02      	cmp	r5, #2
 8011d00:	d836      	bhi.n	8011d70 <_scanf_float+0x318>
 8011d02:	455e      	cmp	r6, fp
 8011d04:	f67f aee8 	bls.w	8011ad8 <_scanf_float+0x80>
 8011d08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011d10:	463a      	mov	r2, r7
 8011d12:	4640      	mov	r0, r8
 8011d14:	4798      	blx	r3
 8011d16:	6923      	ldr	r3, [r4, #16]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	6123      	str	r3, [r4, #16]
 8011d1c:	e7f1      	b.n	8011d02 <_scanf_float+0x2aa>
 8011d1e:	9802      	ldr	r0, [sp, #8]
 8011d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011d28:	9002      	str	r0, [sp, #8]
 8011d2a:	463a      	mov	r2, r7
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	4798      	blx	r3
 8011d30:	6923      	ldr	r3, [r4, #16]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	6123      	str	r3, [r4, #16]
 8011d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d3a:	fa5f fa8a 	uxtb.w	sl, sl
 8011d3e:	f1ba 0f02 	cmp.w	sl, #2
 8011d42:	d1ec      	bne.n	8011d1e <_scanf_float+0x2c6>
 8011d44:	3d03      	subs	r5, #3
 8011d46:	b2ed      	uxtb	r5, r5
 8011d48:	1b76      	subs	r6, r6, r5
 8011d4a:	6823      	ldr	r3, [r4, #0]
 8011d4c:	05da      	lsls	r2, r3, #23
 8011d4e:	d52f      	bpl.n	8011db0 <_scanf_float+0x358>
 8011d50:	055b      	lsls	r3, r3, #21
 8011d52:	d510      	bpl.n	8011d76 <_scanf_float+0x31e>
 8011d54:	455e      	cmp	r6, fp
 8011d56:	f67f aebf 	bls.w	8011ad8 <_scanf_float+0x80>
 8011d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011d62:	463a      	mov	r2, r7
 8011d64:	4640      	mov	r0, r8
 8011d66:	4798      	blx	r3
 8011d68:	6923      	ldr	r3, [r4, #16]
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	6123      	str	r3, [r4, #16]
 8011d6e:	e7f1      	b.n	8011d54 <_scanf_float+0x2fc>
 8011d70:	46aa      	mov	sl, r5
 8011d72:	9602      	str	r6, [sp, #8]
 8011d74:	e7df      	b.n	8011d36 <_scanf_float+0x2de>
 8011d76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011d7a:	6923      	ldr	r3, [r4, #16]
 8011d7c:	2965      	cmp	r1, #101	; 0x65
 8011d7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d82:	f106 35ff 	add.w	r5, r6, #4294967295
 8011d86:	6123      	str	r3, [r4, #16]
 8011d88:	d00c      	beq.n	8011da4 <_scanf_float+0x34c>
 8011d8a:	2945      	cmp	r1, #69	; 0x45
 8011d8c:	d00a      	beq.n	8011da4 <_scanf_float+0x34c>
 8011d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d92:	463a      	mov	r2, r7
 8011d94:	4640      	mov	r0, r8
 8011d96:	4798      	blx	r3
 8011d98:	6923      	ldr	r3, [r4, #16]
 8011d9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	1eb5      	subs	r5, r6, #2
 8011da2:	6123      	str	r3, [r4, #16]
 8011da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011da8:	463a      	mov	r2, r7
 8011daa:	4640      	mov	r0, r8
 8011dac:	4798      	blx	r3
 8011dae:	462e      	mov	r6, r5
 8011db0:	6825      	ldr	r5, [r4, #0]
 8011db2:	f015 0510 	ands.w	r5, r5, #16
 8011db6:	d158      	bne.n	8011e6a <_scanf_float+0x412>
 8011db8:	7035      	strb	r5, [r6, #0]
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dc4:	d11c      	bne.n	8011e00 <_scanf_float+0x3a8>
 8011dc6:	9b01      	ldr	r3, [sp, #4]
 8011dc8:	454b      	cmp	r3, r9
 8011dca:	eba3 0209 	sub.w	r2, r3, r9
 8011dce:	d124      	bne.n	8011e1a <_scanf_float+0x3c2>
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	4659      	mov	r1, fp
 8011dd4:	4640      	mov	r0, r8
 8011dd6:	f000 ffdd 	bl	8012d94 <_strtod_r>
 8011dda:	9b03      	ldr	r3, [sp, #12]
 8011ddc:	6821      	ldr	r1, [r4, #0]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f011 0f02 	tst.w	r1, #2
 8011de4:	ec57 6b10 	vmov	r6, r7, d0
 8011de8:	f103 0204 	add.w	r2, r3, #4
 8011dec:	d020      	beq.n	8011e30 <_scanf_float+0x3d8>
 8011dee:	9903      	ldr	r1, [sp, #12]
 8011df0:	600a      	str	r2, [r1, #0]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	e9c3 6700 	strd	r6, r7, [r3]
 8011df8:	68e3      	ldr	r3, [r4, #12]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	60e3      	str	r3, [r4, #12]
 8011dfe:	e66c      	b.n	8011ada <_scanf_float+0x82>
 8011e00:	9b04      	ldr	r3, [sp, #16]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d0e4      	beq.n	8011dd0 <_scanf_float+0x378>
 8011e06:	9905      	ldr	r1, [sp, #20]
 8011e08:	230a      	movs	r3, #10
 8011e0a:	462a      	mov	r2, r5
 8011e0c:	3101      	adds	r1, #1
 8011e0e:	4640      	mov	r0, r8
 8011e10:	f001 f84a 	bl	8012ea8 <_strtol_r>
 8011e14:	9b04      	ldr	r3, [sp, #16]
 8011e16:	9e05      	ldr	r6, [sp, #20]
 8011e18:	1ac2      	subs	r2, r0, r3
 8011e1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011e1e:	429e      	cmp	r6, r3
 8011e20:	bf28      	it	cs
 8011e22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011e26:	4912      	ldr	r1, [pc, #72]	; (8011e70 <_scanf_float+0x418>)
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f000 f8e9 	bl	8012000 <siprintf>
 8011e2e:	e7cf      	b.n	8011dd0 <_scanf_float+0x378>
 8011e30:	f011 0f04 	tst.w	r1, #4
 8011e34:	9903      	ldr	r1, [sp, #12]
 8011e36:	600a      	str	r2, [r1, #0]
 8011e38:	d1db      	bne.n	8011df2 <_scanf_float+0x39a>
 8011e3a:	f8d3 8000 	ldr.w	r8, [r3]
 8011e3e:	ee10 2a10 	vmov	r2, s0
 8011e42:	ee10 0a10 	vmov	r0, s0
 8011e46:	463b      	mov	r3, r7
 8011e48:	4639      	mov	r1, r7
 8011e4a:	f7ee fe7f 	bl	8000b4c <__aeabi_dcmpun>
 8011e4e:	b128      	cbz	r0, 8011e5c <_scanf_float+0x404>
 8011e50:	4808      	ldr	r0, [pc, #32]	; (8011e74 <_scanf_float+0x41c>)
 8011e52:	f000 f88b 	bl	8011f6c <nanf>
 8011e56:	ed88 0a00 	vstr	s0, [r8]
 8011e5a:	e7cd      	b.n	8011df8 <_scanf_float+0x3a0>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	4639      	mov	r1, r7
 8011e60:	f7ee fed2 	bl	8000c08 <__aeabi_d2f>
 8011e64:	f8c8 0000 	str.w	r0, [r8]
 8011e68:	e7c6      	b.n	8011df8 <_scanf_float+0x3a0>
 8011e6a:	2500      	movs	r5, #0
 8011e6c:	e635      	b.n	8011ada <_scanf_float+0x82>
 8011e6e:	bf00      	nop
 8011e70:	0801655a 	.word	0x0801655a
 8011e74:	080165eb 	.word	0x080165eb

08011e78 <cleanup_glue>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	6809      	ldr	r1, [r1, #0]
 8011e7e:	4605      	mov	r5, r0
 8011e80:	b109      	cbz	r1, 8011e86 <cleanup_glue+0xe>
 8011e82:	f7ff fff9 	bl	8011e78 <cleanup_glue>
 8011e86:	4621      	mov	r1, r4
 8011e88:	4628      	mov	r0, r5
 8011e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e8e:	f7ff b8cf 	b.w	8011030 <_free_r>
	...

08011e94 <_reclaim_reent>:
 8011e94:	4b2c      	ldr	r3, [pc, #176]	; (8011f48 <_reclaim_reent+0xb4>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4283      	cmp	r3, r0
 8011e9a:	b570      	push	{r4, r5, r6, lr}
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	d051      	beq.n	8011f44 <_reclaim_reent+0xb0>
 8011ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ea2:	b143      	cbz	r3, 8011eb6 <_reclaim_reent+0x22>
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d14a      	bne.n	8011f40 <_reclaim_reent+0xac>
 8011eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011eac:	6819      	ldr	r1, [r3, #0]
 8011eae:	b111      	cbz	r1, 8011eb6 <_reclaim_reent+0x22>
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7ff f8bd 	bl	8011030 <_free_r>
 8011eb6:	6961      	ldr	r1, [r4, #20]
 8011eb8:	b111      	cbz	r1, 8011ec0 <_reclaim_reent+0x2c>
 8011eba:	4620      	mov	r0, r4
 8011ebc:	f7ff f8b8 	bl	8011030 <_free_r>
 8011ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011ec2:	b111      	cbz	r1, 8011eca <_reclaim_reent+0x36>
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f7ff f8b3 	bl	8011030 <_free_r>
 8011eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ecc:	b111      	cbz	r1, 8011ed4 <_reclaim_reent+0x40>
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f7ff f8ae 	bl	8011030 <_free_r>
 8011ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ed6:	b111      	cbz	r1, 8011ede <_reclaim_reent+0x4a>
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff f8a9 	bl	8011030 <_free_r>
 8011ede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011ee0:	b111      	cbz	r1, 8011ee8 <_reclaim_reent+0x54>
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f7ff f8a4 	bl	8011030 <_free_r>
 8011ee8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011eea:	b111      	cbz	r1, 8011ef2 <_reclaim_reent+0x5e>
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7ff f89f 	bl	8011030 <_free_r>
 8011ef2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011ef4:	b111      	cbz	r1, 8011efc <_reclaim_reent+0x68>
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff f89a 	bl	8011030 <_free_r>
 8011efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011efe:	b111      	cbz	r1, 8011f06 <_reclaim_reent+0x72>
 8011f00:	4620      	mov	r0, r4
 8011f02:	f7ff f895 	bl	8011030 <_free_r>
 8011f06:	69a3      	ldr	r3, [r4, #24]
 8011f08:	b1e3      	cbz	r3, 8011f44 <_reclaim_reent+0xb0>
 8011f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4798      	blx	r3
 8011f10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f12:	b1b9      	cbz	r1, 8011f44 <_reclaim_reent+0xb0>
 8011f14:	4620      	mov	r0, r4
 8011f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f1a:	f7ff bfad 	b.w	8011e78 <cleanup_glue>
 8011f1e:	5949      	ldr	r1, [r1, r5]
 8011f20:	b941      	cbnz	r1, 8011f34 <_reclaim_reent+0xa0>
 8011f22:	3504      	adds	r5, #4
 8011f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f26:	2d80      	cmp	r5, #128	; 0x80
 8011f28:	68d9      	ldr	r1, [r3, #12]
 8011f2a:	d1f8      	bne.n	8011f1e <_reclaim_reent+0x8a>
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f7ff f87f 	bl	8011030 <_free_r>
 8011f32:	e7ba      	b.n	8011eaa <_reclaim_reent+0x16>
 8011f34:	680e      	ldr	r6, [r1, #0]
 8011f36:	4620      	mov	r0, r4
 8011f38:	f7ff f87a 	bl	8011030 <_free_r>
 8011f3c:	4631      	mov	r1, r6
 8011f3e:	e7ef      	b.n	8011f20 <_reclaim_reent+0x8c>
 8011f40:	2500      	movs	r5, #0
 8011f42:	e7ef      	b.n	8011f24 <_reclaim_reent+0x90>
 8011f44:	bd70      	pop	{r4, r5, r6, pc}
 8011f46:	bf00      	nop
 8011f48:	20000188 	.word	0x20000188

08011f4c <_sbrk_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d06      	ldr	r5, [pc, #24]	; (8011f68 <_sbrk_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	f7f0 fc6c 	bl	8002834 <_sbrk>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_sbrk_r+0x1a>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_sbrk_r+0x1a>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	20006e74 	.word	0x20006e74

08011f6c <nanf>:
 8011f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f74 <nanf+0x8>
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	7fc00000 	.word	0x7fc00000

08011f78 <_raise_r>:
 8011f78:	291f      	cmp	r1, #31
 8011f7a:	b538      	push	{r3, r4, r5, lr}
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	460d      	mov	r5, r1
 8011f80:	d904      	bls.n	8011f8c <_raise_r+0x14>
 8011f82:	2316      	movs	r3, #22
 8011f84:	6003      	str	r3, [r0, #0]
 8011f86:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f8e:	b112      	cbz	r2, 8011f96 <_raise_r+0x1e>
 8011f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f94:	b94b      	cbnz	r3, 8011faa <_raise_r+0x32>
 8011f96:	4620      	mov	r0, r4
 8011f98:	f000 f830 	bl	8011ffc <_getpid_r>
 8011f9c:	462a      	mov	r2, r5
 8011f9e:	4601      	mov	r1, r0
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa6:	f000 b817 	b.w	8011fd8 <_kill_r>
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d00a      	beq.n	8011fc4 <_raise_r+0x4c>
 8011fae:	1c59      	adds	r1, r3, #1
 8011fb0:	d103      	bne.n	8011fba <_raise_r+0x42>
 8011fb2:	2316      	movs	r3, #22
 8011fb4:	6003      	str	r3, [r0, #0]
 8011fb6:	2001      	movs	r0, #1
 8011fb8:	e7e7      	b.n	8011f8a <_raise_r+0x12>
 8011fba:	2400      	movs	r4, #0
 8011fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	4798      	blx	r3
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	e7e0      	b.n	8011f8a <_raise_r+0x12>

08011fc8 <raise>:
 8011fc8:	4b02      	ldr	r3, [pc, #8]	; (8011fd4 <raise+0xc>)
 8011fca:	4601      	mov	r1, r0
 8011fcc:	6818      	ldr	r0, [r3, #0]
 8011fce:	f7ff bfd3 	b.w	8011f78 <_raise_r>
 8011fd2:	bf00      	nop
 8011fd4:	20000188 	.word	0x20000188

08011fd8 <_kill_r>:
 8011fd8:	b538      	push	{r3, r4, r5, lr}
 8011fda:	4d07      	ldr	r5, [pc, #28]	; (8011ff8 <_kill_r+0x20>)
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4604      	mov	r4, r0
 8011fe0:	4608      	mov	r0, r1
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	602b      	str	r3, [r5, #0]
 8011fe6:	f7f0 fb9d 	bl	8002724 <_kill>
 8011fea:	1c43      	adds	r3, r0, #1
 8011fec:	d102      	bne.n	8011ff4 <_kill_r+0x1c>
 8011fee:	682b      	ldr	r3, [r5, #0]
 8011ff0:	b103      	cbz	r3, 8011ff4 <_kill_r+0x1c>
 8011ff2:	6023      	str	r3, [r4, #0]
 8011ff4:	bd38      	pop	{r3, r4, r5, pc}
 8011ff6:	bf00      	nop
 8011ff8:	20006e74 	.word	0x20006e74

08011ffc <_getpid_r>:
 8011ffc:	f7f0 bb8a 	b.w	8002714 <_getpid>

08012000 <siprintf>:
 8012000:	b40e      	push	{r1, r2, r3}
 8012002:	b500      	push	{lr}
 8012004:	b09c      	sub	sp, #112	; 0x70
 8012006:	ab1d      	add	r3, sp, #116	; 0x74
 8012008:	9002      	str	r0, [sp, #8]
 801200a:	9006      	str	r0, [sp, #24]
 801200c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012010:	4809      	ldr	r0, [pc, #36]	; (8012038 <siprintf+0x38>)
 8012012:	9107      	str	r1, [sp, #28]
 8012014:	9104      	str	r1, [sp, #16]
 8012016:	4909      	ldr	r1, [pc, #36]	; (801203c <siprintf+0x3c>)
 8012018:	f853 2b04 	ldr.w	r2, [r3], #4
 801201c:	9105      	str	r1, [sp, #20]
 801201e:	6800      	ldr	r0, [r0, #0]
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	a902      	add	r1, sp, #8
 8012024:	f003 f83c 	bl	80150a0 <_svfiprintf_r>
 8012028:	9b02      	ldr	r3, [sp, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	701a      	strb	r2, [r3, #0]
 801202e:	b01c      	add	sp, #112	; 0x70
 8012030:	f85d eb04 	ldr.w	lr, [sp], #4
 8012034:	b003      	add	sp, #12
 8012036:	4770      	bx	lr
 8012038:	20000188 	.word	0x20000188
 801203c:	ffff0208 	.word	0xffff0208

08012040 <siscanf>:
 8012040:	b40e      	push	{r1, r2, r3}
 8012042:	b510      	push	{r4, lr}
 8012044:	b09f      	sub	sp, #124	; 0x7c
 8012046:	ac21      	add	r4, sp, #132	; 0x84
 8012048:	f44f 7101 	mov.w	r1, #516	; 0x204
 801204c:	f854 2b04 	ldr.w	r2, [r4], #4
 8012050:	9201      	str	r2, [sp, #4]
 8012052:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012056:	9004      	str	r0, [sp, #16]
 8012058:	9008      	str	r0, [sp, #32]
 801205a:	f7ee f8c9 	bl	80001f0 <strlen>
 801205e:	4b0c      	ldr	r3, [pc, #48]	; (8012090 <siscanf+0x50>)
 8012060:	9005      	str	r0, [sp, #20]
 8012062:	9009      	str	r0, [sp, #36]	; 0x24
 8012064:	930d      	str	r3, [sp, #52]	; 0x34
 8012066:	480b      	ldr	r0, [pc, #44]	; (8012094 <siscanf+0x54>)
 8012068:	9a01      	ldr	r2, [sp, #4]
 801206a:	6800      	ldr	r0, [r0, #0]
 801206c:	9403      	str	r4, [sp, #12]
 801206e:	2300      	movs	r3, #0
 8012070:	9311      	str	r3, [sp, #68]	; 0x44
 8012072:	9316      	str	r3, [sp, #88]	; 0x58
 8012074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012078:	f8ad 301e 	strh.w	r3, [sp, #30]
 801207c:	a904      	add	r1, sp, #16
 801207e:	4623      	mov	r3, r4
 8012080:	f003 f968 	bl	8015354 <__ssvfiscanf_r>
 8012084:	b01f      	add	sp, #124	; 0x7c
 8012086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801208a:	b003      	add	sp, #12
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	080120bb 	.word	0x080120bb
 8012094:	20000188 	.word	0x20000188

08012098 <__sread>:
 8012098:	b510      	push	{r4, lr}
 801209a:	460c      	mov	r4, r1
 801209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a0:	f003 fd76 	bl	8015b90 <_read_r>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	bfab      	itete	ge
 80120a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120aa:	89a3      	ldrhlt	r3, [r4, #12]
 80120ac:	181b      	addge	r3, r3, r0
 80120ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120b2:	bfac      	ite	ge
 80120b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80120b6:	81a3      	strhlt	r3, [r4, #12]
 80120b8:	bd10      	pop	{r4, pc}

080120ba <__seofread>:
 80120ba:	2000      	movs	r0, #0
 80120bc:	4770      	bx	lr

080120be <__swrite>:
 80120be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c2:	461f      	mov	r7, r3
 80120c4:	898b      	ldrh	r3, [r1, #12]
 80120c6:	05db      	lsls	r3, r3, #23
 80120c8:	4605      	mov	r5, r0
 80120ca:	460c      	mov	r4, r1
 80120cc:	4616      	mov	r6, r2
 80120ce:	d505      	bpl.n	80120dc <__swrite+0x1e>
 80120d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d4:	2302      	movs	r3, #2
 80120d6:	2200      	movs	r2, #0
 80120d8:	f002 fa66 	bl	80145a8 <_lseek_r>
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120e6:	81a3      	strh	r3, [r4, #12]
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	4628      	mov	r0, r5
 80120ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120f2:	f000 bf59 	b.w	8012fa8 <_write_r>

080120f6 <__sseek>:
 80120f6:	b510      	push	{r4, lr}
 80120f8:	460c      	mov	r4, r1
 80120fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fe:	f002 fa53 	bl	80145a8 <_lseek_r>
 8012102:	1c43      	adds	r3, r0, #1
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	bf15      	itete	ne
 8012108:	6560      	strne	r0, [r4, #84]	; 0x54
 801210a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801210e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012112:	81a3      	strheq	r3, [r4, #12]
 8012114:	bf18      	it	ne
 8012116:	81a3      	strhne	r3, [r4, #12]
 8012118:	bd10      	pop	{r4, pc}

0801211a <__sclose>:
 801211a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801211e:	f000 bf73 	b.w	8013008 <_close_r>

08012122 <strncmp>:
 8012122:	b510      	push	{r4, lr}
 8012124:	b16a      	cbz	r2, 8012142 <strncmp+0x20>
 8012126:	3901      	subs	r1, #1
 8012128:	1884      	adds	r4, r0, r2
 801212a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801212e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012132:	4293      	cmp	r3, r2
 8012134:	d103      	bne.n	801213e <strncmp+0x1c>
 8012136:	42a0      	cmp	r0, r4
 8012138:	d001      	beq.n	801213e <strncmp+0x1c>
 801213a:	2b00      	cmp	r3, #0
 801213c:	d1f5      	bne.n	801212a <strncmp+0x8>
 801213e:	1a98      	subs	r0, r3, r2
 8012140:	bd10      	pop	{r4, pc}
 8012142:	4610      	mov	r0, r2
 8012144:	e7fc      	b.n	8012140 <strncmp+0x1e>

08012146 <sulp>:
 8012146:	b570      	push	{r4, r5, r6, lr}
 8012148:	4604      	mov	r4, r0
 801214a:	460d      	mov	r5, r1
 801214c:	ec45 4b10 	vmov	d0, r4, r5
 8012150:	4616      	mov	r6, r2
 8012152:	f002 fdc5 	bl	8014ce0 <__ulp>
 8012156:	ec51 0b10 	vmov	r0, r1, d0
 801215a:	b17e      	cbz	r6, 801217c <sulp+0x36>
 801215c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012160:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012164:	2b00      	cmp	r3, #0
 8012166:	dd09      	ble.n	801217c <sulp+0x36>
 8012168:	051b      	lsls	r3, r3, #20
 801216a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801216e:	2400      	movs	r4, #0
 8012170:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012174:	4622      	mov	r2, r4
 8012176:	462b      	mov	r3, r5
 8012178:	f7ee fa4e 	bl	8000618 <__aeabi_dmul>
 801217c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012180 <_strtod_l>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	b0a3      	sub	sp, #140	; 0x8c
 8012186:	461f      	mov	r7, r3
 8012188:	2300      	movs	r3, #0
 801218a:	931e      	str	r3, [sp, #120]	; 0x78
 801218c:	4ba4      	ldr	r3, [pc, #656]	; (8012420 <_strtod_l+0x2a0>)
 801218e:	9219      	str	r2, [sp, #100]	; 0x64
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	9307      	str	r3, [sp, #28]
 8012194:	4604      	mov	r4, r0
 8012196:	4618      	mov	r0, r3
 8012198:	4688      	mov	r8, r1
 801219a:	f7ee f829 	bl	80001f0 <strlen>
 801219e:	f04f 0a00 	mov.w	sl, #0
 80121a2:	4605      	mov	r5, r0
 80121a4:	f04f 0b00 	mov.w	fp, #0
 80121a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80121ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80121ae:	781a      	ldrb	r2, [r3, #0]
 80121b0:	2a2b      	cmp	r2, #43	; 0x2b
 80121b2:	d04c      	beq.n	801224e <_strtod_l+0xce>
 80121b4:	d839      	bhi.n	801222a <_strtod_l+0xaa>
 80121b6:	2a0d      	cmp	r2, #13
 80121b8:	d832      	bhi.n	8012220 <_strtod_l+0xa0>
 80121ba:	2a08      	cmp	r2, #8
 80121bc:	d832      	bhi.n	8012224 <_strtod_l+0xa4>
 80121be:	2a00      	cmp	r2, #0
 80121c0:	d03c      	beq.n	801223c <_strtod_l+0xbc>
 80121c2:	2300      	movs	r3, #0
 80121c4:	930e      	str	r3, [sp, #56]	; 0x38
 80121c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80121c8:	7833      	ldrb	r3, [r6, #0]
 80121ca:	2b30      	cmp	r3, #48	; 0x30
 80121cc:	f040 80b4 	bne.w	8012338 <_strtod_l+0x1b8>
 80121d0:	7873      	ldrb	r3, [r6, #1]
 80121d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121d6:	2b58      	cmp	r3, #88	; 0x58
 80121d8:	d16c      	bne.n	80122b4 <_strtod_l+0x134>
 80121da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	ab1e      	add	r3, sp, #120	; 0x78
 80121e0:	9702      	str	r7, [sp, #8]
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	4a8f      	ldr	r2, [pc, #572]	; (8012424 <_strtod_l+0x2a4>)
 80121e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80121e8:	a91d      	add	r1, sp, #116	; 0x74
 80121ea:	4620      	mov	r0, r4
 80121ec:	f001 fed0 	bl	8013f90 <__gethex>
 80121f0:	f010 0707 	ands.w	r7, r0, #7
 80121f4:	4605      	mov	r5, r0
 80121f6:	d005      	beq.n	8012204 <_strtod_l+0x84>
 80121f8:	2f06      	cmp	r7, #6
 80121fa:	d12a      	bne.n	8012252 <_strtod_l+0xd2>
 80121fc:	3601      	adds	r6, #1
 80121fe:	2300      	movs	r3, #0
 8012200:	961d      	str	r6, [sp, #116]	; 0x74
 8012202:	930e      	str	r3, [sp, #56]	; 0x38
 8012204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012206:	2b00      	cmp	r3, #0
 8012208:	f040 8596 	bne.w	8012d38 <_strtod_l+0xbb8>
 801220c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801220e:	b1db      	cbz	r3, 8012248 <_strtod_l+0xc8>
 8012210:	4652      	mov	r2, sl
 8012212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012216:	ec43 2b10 	vmov	d0, r2, r3
 801221a:	b023      	add	sp, #140	; 0x8c
 801221c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012220:	2a20      	cmp	r2, #32
 8012222:	d1ce      	bne.n	80121c2 <_strtod_l+0x42>
 8012224:	3301      	adds	r3, #1
 8012226:	931d      	str	r3, [sp, #116]	; 0x74
 8012228:	e7c0      	b.n	80121ac <_strtod_l+0x2c>
 801222a:	2a2d      	cmp	r2, #45	; 0x2d
 801222c:	d1c9      	bne.n	80121c2 <_strtod_l+0x42>
 801222e:	2201      	movs	r2, #1
 8012230:	920e      	str	r2, [sp, #56]	; 0x38
 8012232:	1c5a      	adds	r2, r3, #1
 8012234:	921d      	str	r2, [sp, #116]	; 0x74
 8012236:	785b      	ldrb	r3, [r3, #1]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1c4      	bne.n	80121c6 <_strtod_l+0x46>
 801223c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801223e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012242:	2b00      	cmp	r3, #0
 8012244:	f040 8576 	bne.w	8012d34 <_strtod_l+0xbb4>
 8012248:	4652      	mov	r2, sl
 801224a:	465b      	mov	r3, fp
 801224c:	e7e3      	b.n	8012216 <_strtod_l+0x96>
 801224e:	2200      	movs	r2, #0
 8012250:	e7ee      	b.n	8012230 <_strtod_l+0xb0>
 8012252:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012254:	b13a      	cbz	r2, 8012266 <_strtod_l+0xe6>
 8012256:	2135      	movs	r1, #53	; 0x35
 8012258:	a820      	add	r0, sp, #128	; 0x80
 801225a:	f002 fe4c 	bl	8014ef6 <__copybits>
 801225e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012260:	4620      	mov	r0, r4
 8012262:	f002 fa11 	bl	8014688 <_Bfree>
 8012266:	3f01      	subs	r7, #1
 8012268:	2f05      	cmp	r7, #5
 801226a:	d807      	bhi.n	801227c <_strtod_l+0xfc>
 801226c:	e8df f007 	tbb	[pc, r7]
 8012270:	1d180b0e 	.word	0x1d180b0e
 8012274:	030e      	.short	0x030e
 8012276:	f04f 0b00 	mov.w	fp, #0
 801227a:	46da      	mov	sl, fp
 801227c:	0728      	lsls	r0, r5, #28
 801227e:	d5c1      	bpl.n	8012204 <_strtod_l+0x84>
 8012280:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012284:	e7be      	b.n	8012204 <_strtod_l+0x84>
 8012286:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801228a:	e7f7      	b.n	801227c <_strtod_l+0xfc>
 801228c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012290:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801229a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801229e:	e7ed      	b.n	801227c <_strtod_l+0xfc>
 80122a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012428 <_strtod_l+0x2a8>
 80122a4:	f04f 0a00 	mov.w	sl, #0
 80122a8:	e7e8      	b.n	801227c <_strtod_l+0xfc>
 80122aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80122ae:	f04f 3aff 	mov.w	sl, #4294967295
 80122b2:	e7e3      	b.n	801227c <_strtod_l+0xfc>
 80122b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122b6:	1c5a      	adds	r2, r3, #1
 80122b8:	921d      	str	r2, [sp, #116]	; 0x74
 80122ba:	785b      	ldrb	r3, [r3, #1]
 80122bc:	2b30      	cmp	r3, #48	; 0x30
 80122be:	d0f9      	beq.n	80122b4 <_strtod_l+0x134>
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d09f      	beq.n	8012204 <_strtod_l+0x84>
 80122c4:	2301      	movs	r3, #1
 80122c6:	f04f 0900 	mov.w	r9, #0
 80122ca:	9304      	str	r3, [sp, #16]
 80122cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122ce:	930a      	str	r3, [sp, #40]	; 0x28
 80122d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80122d4:	464f      	mov	r7, r9
 80122d6:	220a      	movs	r2, #10
 80122d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80122da:	7806      	ldrb	r6, [r0, #0]
 80122dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80122e0:	b2d9      	uxtb	r1, r3
 80122e2:	2909      	cmp	r1, #9
 80122e4:	d92a      	bls.n	801233c <_strtod_l+0x1bc>
 80122e6:	9907      	ldr	r1, [sp, #28]
 80122e8:	462a      	mov	r2, r5
 80122ea:	f7ff ff1a 	bl	8012122 <strncmp>
 80122ee:	b398      	cbz	r0, 8012358 <_strtod_l+0x1d8>
 80122f0:	2000      	movs	r0, #0
 80122f2:	4633      	mov	r3, r6
 80122f4:	463d      	mov	r5, r7
 80122f6:	9007      	str	r0, [sp, #28]
 80122f8:	4602      	mov	r2, r0
 80122fa:	2b65      	cmp	r3, #101	; 0x65
 80122fc:	d001      	beq.n	8012302 <_strtod_l+0x182>
 80122fe:	2b45      	cmp	r3, #69	; 0x45
 8012300:	d118      	bne.n	8012334 <_strtod_l+0x1b4>
 8012302:	b91d      	cbnz	r5, 801230c <_strtod_l+0x18c>
 8012304:	9b04      	ldr	r3, [sp, #16]
 8012306:	4303      	orrs	r3, r0
 8012308:	d098      	beq.n	801223c <_strtod_l+0xbc>
 801230a:	2500      	movs	r5, #0
 801230c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012310:	f108 0301 	add.w	r3, r8, #1
 8012314:	931d      	str	r3, [sp, #116]	; 0x74
 8012316:	f898 3001 	ldrb.w	r3, [r8, #1]
 801231a:	2b2b      	cmp	r3, #43	; 0x2b
 801231c:	d075      	beq.n	801240a <_strtod_l+0x28a>
 801231e:	2b2d      	cmp	r3, #45	; 0x2d
 8012320:	d07b      	beq.n	801241a <_strtod_l+0x29a>
 8012322:	f04f 0c00 	mov.w	ip, #0
 8012326:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801232a:	2909      	cmp	r1, #9
 801232c:	f240 8082 	bls.w	8012434 <_strtod_l+0x2b4>
 8012330:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012334:	2600      	movs	r6, #0
 8012336:	e09d      	b.n	8012474 <_strtod_l+0x2f4>
 8012338:	2300      	movs	r3, #0
 801233a:	e7c4      	b.n	80122c6 <_strtod_l+0x146>
 801233c:	2f08      	cmp	r7, #8
 801233e:	bfd8      	it	le
 8012340:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012342:	f100 0001 	add.w	r0, r0, #1
 8012346:	bfda      	itte	le
 8012348:	fb02 3301 	mlale	r3, r2, r1, r3
 801234c:	9309      	strle	r3, [sp, #36]	; 0x24
 801234e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012352:	3701      	adds	r7, #1
 8012354:	901d      	str	r0, [sp, #116]	; 0x74
 8012356:	e7bf      	b.n	80122d8 <_strtod_l+0x158>
 8012358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801235a:	195a      	adds	r2, r3, r5
 801235c:	921d      	str	r2, [sp, #116]	; 0x74
 801235e:	5d5b      	ldrb	r3, [r3, r5]
 8012360:	2f00      	cmp	r7, #0
 8012362:	d037      	beq.n	80123d4 <_strtod_l+0x254>
 8012364:	9007      	str	r0, [sp, #28]
 8012366:	463d      	mov	r5, r7
 8012368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801236c:	2a09      	cmp	r2, #9
 801236e:	d912      	bls.n	8012396 <_strtod_l+0x216>
 8012370:	2201      	movs	r2, #1
 8012372:	e7c2      	b.n	80122fa <_strtod_l+0x17a>
 8012374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012376:	1c5a      	adds	r2, r3, #1
 8012378:	921d      	str	r2, [sp, #116]	; 0x74
 801237a:	785b      	ldrb	r3, [r3, #1]
 801237c:	3001      	adds	r0, #1
 801237e:	2b30      	cmp	r3, #48	; 0x30
 8012380:	d0f8      	beq.n	8012374 <_strtod_l+0x1f4>
 8012382:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012386:	2a08      	cmp	r2, #8
 8012388:	f200 84db 	bhi.w	8012d42 <_strtod_l+0xbc2>
 801238c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801238e:	9007      	str	r0, [sp, #28]
 8012390:	2000      	movs	r0, #0
 8012392:	920a      	str	r2, [sp, #40]	; 0x28
 8012394:	4605      	mov	r5, r0
 8012396:	3b30      	subs	r3, #48	; 0x30
 8012398:	f100 0201 	add.w	r2, r0, #1
 801239c:	d014      	beq.n	80123c8 <_strtod_l+0x248>
 801239e:	9907      	ldr	r1, [sp, #28]
 80123a0:	4411      	add	r1, r2
 80123a2:	9107      	str	r1, [sp, #28]
 80123a4:	462a      	mov	r2, r5
 80123a6:	eb00 0e05 	add.w	lr, r0, r5
 80123aa:	210a      	movs	r1, #10
 80123ac:	4572      	cmp	r2, lr
 80123ae:	d113      	bne.n	80123d8 <_strtod_l+0x258>
 80123b0:	182a      	adds	r2, r5, r0
 80123b2:	2a08      	cmp	r2, #8
 80123b4:	f105 0501 	add.w	r5, r5, #1
 80123b8:	4405      	add	r5, r0
 80123ba:	dc1c      	bgt.n	80123f6 <_strtod_l+0x276>
 80123bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123be:	220a      	movs	r2, #10
 80123c0:	fb02 3301 	mla	r3, r2, r1, r3
 80123c4:	9309      	str	r3, [sp, #36]	; 0x24
 80123c6:	2200      	movs	r2, #0
 80123c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80123ca:	1c59      	adds	r1, r3, #1
 80123cc:	911d      	str	r1, [sp, #116]	; 0x74
 80123ce:	785b      	ldrb	r3, [r3, #1]
 80123d0:	4610      	mov	r0, r2
 80123d2:	e7c9      	b.n	8012368 <_strtod_l+0x1e8>
 80123d4:	4638      	mov	r0, r7
 80123d6:	e7d2      	b.n	801237e <_strtod_l+0x1fe>
 80123d8:	2a08      	cmp	r2, #8
 80123da:	dc04      	bgt.n	80123e6 <_strtod_l+0x266>
 80123dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80123de:	434e      	muls	r6, r1
 80123e0:	9609      	str	r6, [sp, #36]	; 0x24
 80123e2:	3201      	adds	r2, #1
 80123e4:	e7e2      	b.n	80123ac <_strtod_l+0x22c>
 80123e6:	f102 0c01 	add.w	ip, r2, #1
 80123ea:	f1bc 0f10 	cmp.w	ip, #16
 80123ee:	bfd8      	it	le
 80123f0:	fb01 f909 	mulle.w	r9, r1, r9
 80123f4:	e7f5      	b.n	80123e2 <_strtod_l+0x262>
 80123f6:	2d10      	cmp	r5, #16
 80123f8:	bfdc      	itt	le
 80123fa:	220a      	movle	r2, #10
 80123fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8012400:	e7e1      	b.n	80123c6 <_strtod_l+0x246>
 8012402:	2300      	movs	r3, #0
 8012404:	9307      	str	r3, [sp, #28]
 8012406:	2201      	movs	r2, #1
 8012408:	e77c      	b.n	8012304 <_strtod_l+0x184>
 801240a:	f04f 0c00 	mov.w	ip, #0
 801240e:	f108 0302 	add.w	r3, r8, #2
 8012412:	931d      	str	r3, [sp, #116]	; 0x74
 8012414:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012418:	e785      	b.n	8012326 <_strtod_l+0x1a6>
 801241a:	f04f 0c01 	mov.w	ip, #1
 801241e:	e7f6      	b.n	801240e <_strtod_l+0x28e>
 8012420:	080167ec 	.word	0x080167ec
 8012424:	08016560 	.word	0x08016560
 8012428:	7ff00000 	.word	0x7ff00000
 801242c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801242e:	1c59      	adds	r1, r3, #1
 8012430:	911d      	str	r1, [sp, #116]	; 0x74
 8012432:	785b      	ldrb	r3, [r3, #1]
 8012434:	2b30      	cmp	r3, #48	; 0x30
 8012436:	d0f9      	beq.n	801242c <_strtod_l+0x2ac>
 8012438:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801243c:	2908      	cmp	r1, #8
 801243e:	f63f af79 	bhi.w	8012334 <_strtod_l+0x1b4>
 8012442:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012448:	9308      	str	r3, [sp, #32]
 801244a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801244c:	1c59      	adds	r1, r3, #1
 801244e:	911d      	str	r1, [sp, #116]	; 0x74
 8012450:	785b      	ldrb	r3, [r3, #1]
 8012452:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012456:	2e09      	cmp	r6, #9
 8012458:	d937      	bls.n	80124ca <_strtod_l+0x34a>
 801245a:	9e08      	ldr	r6, [sp, #32]
 801245c:	1b89      	subs	r1, r1, r6
 801245e:	2908      	cmp	r1, #8
 8012460:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012464:	dc02      	bgt.n	801246c <_strtod_l+0x2ec>
 8012466:	4576      	cmp	r6, lr
 8012468:	bfa8      	it	ge
 801246a:	4676      	movge	r6, lr
 801246c:	f1bc 0f00 	cmp.w	ip, #0
 8012470:	d000      	beq.n	8012474 <_strtod_l+0x2f4>
 8012472:	4276      	negs	r6, r6
 8012474:	2d00      	cmp	r5, #0
 8012476:	d14f      	bne.n	8012518 <_strtod_l+0x398>
 8012478:	9904      	ldr	r1, [sp, #16]
 801247a:	4301      	orrs	r1, r0
 801247c:	f47f aec2 	bne.w	8012204 <_strtod_l+0x84>
 8012480:	2a00      	cmp	r2, #0
 8012482:	f47f aedb 	bne.w	801223c <_strtod_l+0xbc>
 8012486:	2b69      	cmp	r3, #105	; 0x69
 8012488:	d027      	beq.n	80124da <_strtod_l+0x35a>
 801248a:	dc24      	bgt.n	80124d6 <_strtod_l+0x356>
 801248c:	2b49      	cmp	r3, #73	; 0x49
 801248e:	d024      	beq.n	80124da <_strtod_l+0x35a>
 8012490:	2b4e      	cmp	r3, #78	; 0x4e
 8012492:	f47f aed3 	bne.w	801223c <_strtod_l+0xbc>
 8012496:	499e      	ldr	r1, [pc, #632]	; (8012710 <_strtod_l+0x590>)
 8012498:	a81d      	add	r0, sp, #116	; 0x74
 801249a:	f001 ffd1 	bl	8014440 <__match>
 801249e:	2800      	cmp	r0, #0
 80124a0:	f43f aecc 	beq.w	801223c <_strtod_l+0xbc>
 80124a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b28      	cmp	r3, #40	; 0x28
 80124aa:	d12d      	bne.n	8012508 <_strtod_l+0x388>
 80124ac:	4999      	ldr	r1, [pc, #612]	; (8012714 <_strtod_l+0x594>)
 80124ae:	aa20      	add	r2, sp, #128	; 0x80
 80124b0:	a81d      	add	r0, sp, #116	; 0x74
 80124b2:	f001 ffd9 	bl	8014468 <__hexnan>
 80124b6:	2805      	cmp	r0, #5
 80124b8:	d126      	bne.n	8012508 <_strtod_l+0x388>
 80124ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80124c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80124c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80124c8:	e69c      	b.n	8012204 <_strtod_l+0x84>
 80124ca:	210a      	movs	r1, #10
 80124cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80124d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80124d4:	e7b9      	b.n	801244a <_strtod_l+0x2ca>
 80124d6:	2b6e      	cmp	r3, #110	; 0x6e
 80124d8:	e7db      	b.n	8012492 <_strtod_l+0x312>
 80124da:	498f      	ldr	r1, [pc, #572]	; (8012718 <_strtod_l+0x598>)
 80124dc:	a81d      	add	r0, sp, #116	; 0x74
 80124de:	f001 ffaf 	bl	8014440 <__match>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f43f aeaa 	beq.w	801223c <_strtod_l+0xbc>
 80124e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80124ea:	498c      	ldr	r1, [pc, #560]	; (801271c <_strtod_l+0x59c>)
 80124ec:	3b01      	subs	r3, #1
 80124ee:	a81d      	add	r0, sp, #116	; 0x74
 80124f0:	931d      	str	r3, [sp, #116]	; 0x74
 80124f2:	f001 ffa5 	bl	8014440 <__match>
 80124f6:	b910      	cbnz	r0, 80124fe <_strtod_l+0x37e>
 80124f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80124fa:	3301      	adds	r3, #1
 80124fc:	931d      	str	r3, [sp, #116]	; 0x74
 80124fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801272c <_strtod_l+0x5ac>
 8012502:	f04f 0a00 	mov.w	sl, #0
 8012506:	e67d      	b.n	8012204 <_strtod_l+0x84>
 8012508:	4885      	ldr	r0, [pc, #532]	; (8012720 <_strtod_l+0x5a0>)
 801250a:	f003 fb55 	bl	8015bb8 <nan>
 801250e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012512:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012516:	e675      	b.n	8012204 <_strtod_l+0x84>
 8012518:	9b07      	ldr	r3, [sp, #28]
 801251a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801251c:	1af3      	subs	r3, r6, r3
 801251e:	2f00      	cmp	r7, #0
 8012520:	bf08      	it	eq
 8012522:	462f      	moveq	r7, r5
 8012524:	2d10      	cmp	r5, #16
 8012526:	9308      	str	r3, [sp, #32]
 8012528:	46a8      	mov	r8, r5
 801252a:	bfa8      	it	ge
 801252c:	f04f 0810 	movge.w	r8, #16
 8012530:	f7ed fff8 	bl	8000524 <__aeabi_ui2d>
 8012534:	2d09      	cmp	r5, #9
 8012536:	4682      	mov	sl, r0
 8012538:	468b      	mov	fp, r1
 801253a:	dd13      	ble.n	8012564 <_strtod_l+0x3e4>
 801253c:	4b79      	ldr	r3, [pc, #484]	; (8012724 <_strtod_l+0x5a4>)
 801253e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012542:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012546:	f7ee f867 	bl	8000618 <__aeabi_dmul>
 801254a:	4682      	mov	sl, r0
 801254c:	4648      	mov	r0, r9
 801254e:	468b      	mov	fp, r1
 8012550:	f7ed ffe8 	bl	8000524 <__aeabi_ui2d>
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	4650      	mov	r0, sl
 801255a:	4659      	mov	r1, fp
 801255c:	f7ed fea6 	bl	80002ac <__adddf3>
 8012560:	4682      	mov	sl, r0
 8012562:	468b      	mov	fp, r1
 8012564:	2d0f      	cmp	r5, #15
 8012566:	dc38      	bgt.n	80125da <_strtod_l+0x45a>
 8012568:	9b08      	ldr	r3, [sp, #32]
 801256a:	2b00      	cmp	r3, #0
 801256c:	f43f ae4a 	beq.w	8012204 <_strtod_l+0x84>
 8012570:	dd24      	ble.n	80125bc <_strtod_l+0x43c>
 8012572:	2b16      	cmp	r3, #22
 8012574:	dc0b      	bgt.n	801258e <_strtod_l+0x40e>
 8012576:	4d6b      	ldr	r5, [pc, #428]	; (8012724 <_strtod_l+0x5a4>)
 8012578:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801257c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012580:	4652      	mov	r2, sl
 8012582:	465b      	mov	r3, fp
 8012584:	f7ee f848 	bl	8000618 <__aeabi_dmul>
 8012588:	4682      	mov	sl, r0
 801258a:	468b      	mov	fp, r1
 801258c:	e63a      	b.n	8012204 <_strtod_l+0x84>
 801258e:	9a08      	ldr	r2, [sp, #32]
 8012590:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012594:	4293      	cmp	r3, r2
 8012596:	db20      	blt.n	80125da <_strtod_l+0x45a>
 8012598:	4c62      	ldr	r4, [pc, #392]	; (8012724 <_strtod_l+0x5a4>)
 801259a:	f1c5 050f 	rsb	r5, r5, #15
 801259e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80125a2:	4652      	mov	r2, sl
 80125a4:	465b      	mov	r3, fp
 80125a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125aa:	f7ee f835 	bl	8000618 <__aeabi_dmul>
 80125ae:	9b08      	ldr	r3, [sp, #32]
 80125b0:	1b5d      	subs	r5, r3, r5
 80125b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80125b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80125ba:	e7e3      	b.n	8012584 <_strtod_l+0x404>
 80125bc:	9b08      	ldr	r3, [sp, #32]
 80125be:	3316      	adds	r3, #22
 80125c0:	db0b      	blt.n	80125da <_strtod_l+0x45a>
 80125c2:	9b07      	ldr	r3, [sp, #28]
 80125c4:	4a57      	ldr	r2, [pc, #348]	; (8012724 <_strtod_l+0x5a4>)
 80125c6:	1b9e      	subs	r6, r3, r6
 80125c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80125cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80125d0:	4650      	mov	r0, sl
 80125d2:	4659      	mov	r1, fp
 80125d4:	f7ee f94a 	bl	800086c <__aeabi_ddiv>
 80125d8:	e7d6      	b.n	8012588 <_strtod_l+0x408>
 80125da:	9b08      	ldr	r3, [sp, #32]
 80125dc:	eba5 0808 	sub.w	r8, r5, r8
 80125e0:	4498      	add	r8, r3
 80125e2:	f1b8 0f00 	cmp.w	r8, #0
 80125e6:	dd71      	ble.n	80126cc <_strtod_l+0x54c>
 80125e8:	f018 030f 	ands.w	r3, r8, #15
 80125ec:	d00a      	beq.n	8012604 <_strtod_l+0x484>
 80125ee:	494d      	ldr	r1, [pc, #308]	; (8012724 <_strtod_l+0x5a4>)
 80125f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80125f4:	4652      	mov	r2, sl
 80125f6:	465b      	mov	r3, fp
 80125f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125fc:	f7ee f80c 	bl	8000618 <__aeabi_dmul>
 8012600:	4682      	mov	sl, r0
 8012602:	468b      	mov	fp, r1
 8012604:	f038 080f 	bics.w	r8, r8, #15
 8012608:	d04d      	beq.n	80126a6 <_strtod_l+0x526>
 801260a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801260e:	dd22      	ble.n	8012656 <_strtod_l+0x4d6>
 8012610:	2500      	movs	r5, #0
 8012612:	462e      	mov	r6, r5
 8012614:	9509      	str	r5, [sp, #36]	; 0x24
 8012616:	9507      	str	r5, [sp, #28]
 8012618:	2322      	movs	r3, #34	; 0x22
 801261a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801272c <_strtod_l+0x5ac>
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	f04f 0a00 	mov.w	sl, #0
 8012624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012626:	2b00      	cmp	r3, #0
 8012628:	f43f adec 	beq.w	8012204 <_strtod_l+0x84>
 801262c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801262e:	4620      	mov	r0, r4
 8012630:	f002 f82a 	bl	8014688 <_Bfree>
 8012634:	9907      	ldr	r1, [sp, #28]
 8012636:	4620      	mov	r0, r4
 8012638:	f002 f826 	bl	8014688 <_Bfree>
 801263c:	4631      	mov	r1, r6
 801263e:	4620      	mov	r0, r4
 8012640:	f002 f822 	bl	8014688 <_Bfree>
 8012644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012646:	4620      	mov	r0, r4
 8012648:	f002 f81e 	bl	8014688 <_Bfree>
 801264c:	4629      	mov	r1, r5
 801264e:	4620      	mov	r0, r4
 8012650:	f002 f81a 	bl	8014688 <_Bfree>
 8012654:	e5d6      	b.n	8012204 <_strtod_l+0x84>
 8012656:	2300      	movs	r3, #0
 8012658:	ea4f 1828 	mov.w	r8, r8, asr #4
 801265c:	4650      	mov	r0, sl
 801265e:	4659      	mov	r1, fp
 8012660:	4699      	mov	r9, r3
 8012662:	f1b8 0f01 	cmp.w	r8, #1
 8012666:	dc21      	bgt.n	80126ac <_strtod_l+0x52c>
 8012668:	b10b      	cbz	r3, 801266e <_strtod_l+0x4ee>
 801266a:	4682      	mov	sl, r0
 801266c:	468b      	mov	fp, r1
 801266e:	4b2e      	ldr	r3, [pc, #184]	; (8012728 <_strtod_l+0x5a8>)
 8012670:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012674:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012678:	4652      	mov	r2, sl
 801267a:	465b      	mov	r3, fp
 801267c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012680:	f7ed ffca 	bl	8000618 <__aeabi_dmul>
 8012684:	4b29      	ldr	r3, [pc, #164]	; (801272c <_strtod_l+0x5ac>)
 8012686:	460a      	mov	r2, r1
 8012688:	400b      	ands	r3, r1
 801268a:	4929      	ldr	r1, [pc, #164]	; (8012730 <_strtod_l+0x5b0>)
 801268c:	428b      	cmp	r3, r1
 801268e:	4682      	mov	sl, r0
 8012690:	d8be      	bhi.n	8012610 <_strtod_l+0x490>
 8012692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012696:	428b      	cmp	r3, r1
 8012698:	bf86      	itte	hi
 801269a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012734 <_strtod_l+0x5b4>
 801269e:	f04f 3aff 	movhi.w	sl, #4294967295
 80126a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80126a6:	2300      	movs	r3, #0
 80126a8:	9304      	str	r3, [sp, #16]
 80126aa:	e081      	b.n	80127b0 <_strtod_l+0x630>
 80126ac:	f018 0f01 	tst.w	r8, #1
 80126b0:	d007      	beq.n	80126c2 <_strtod_l+0x542>
 80126b2:	4b1d      	ldr	r3, [pc, #116]	; (8012728 <_strtod_l+0x5a8>)
 80126b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f7ed ffac 	bl	8000618 <__aeabi_dmul>
 80126c0:	2301      	movs	r3, #1
 80126c2:	f109 0901 	add.w	r9, r9, #1
 80126c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80126ca:	e7ca      	b.n	8012662 <_strtod_l+0x4e2>
 80126cc:	d0eb      	beq.n	80126a6 <_strtod_l+0x526>
 80126ce:	f1c8 0800 	rsb	r8, r8, #0
 80126d2:	f018 020f 	ands.w	r2, r8, #15
 80126d6:	d00a      	beq.n	80126ee <_strtod_l+0x56e>
 80126d8:	4b12      	ldr	r3, [pc, #72]	; (8012724 <_strtod_l+0x5a4>)
 80126da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126de:	4650      	mov	r0, sl
 80126e0:	4659      	mov	r1, fp
 80126e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e6:	f7ee f8c1 	bl	800086c <__aeabi_ddiv>
 80126ea:	4682      	mov	sl, r0
 80126ec:	468b      	mov	fp, r1
 80126ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80126f2:	d0d8      	beq.n	80126a6 <_strtod_l+0x526>
 80126f4:	f1b8 0f1f 	cmp.w	r8, #31
 80126f8:	dd1e      	ble.n	8012738 <_strtod_l+0x5b8>
 80126fa:	2500      	movs	r5, #0
 80126fc:	462e      	mov	r6, r5
 80126fe:	9509      	str	r5, [sp, #36]	; 0x24
 8012700:	9507      	str	r5, [sp, #28]
 8012702:	2322      	movs	r3, #34	; 0x22
 8012704:	f04f 0a00 	mov.w	sl, #0
 8012708:	f04f 0b00 	mov.w	fp, #0
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	e789      	b.n	8012624 <_strtod_l+0x4a4>
 8012710:	08016535 	.word	0x08016535
 8012714:	08016574 	.word	0x08016574
 8012718:	0801652d 	.word	0x0801652d
 801271c:	080166f0 	.word	0x080166f0
 8012720:	080165eb 	.word	0x080165eb
 8012724:	08016888 	.word	0x08016888
 8012728:	08016860 	.word	0x08016860
 801272c:	7ff00000 	.word	0x7ff00000
 8012730:	7ca00000 	.word	0x7ca00000
 8012734:	7fefffff 	.word	0x7fefffff
 8012738:	f018 0310 	ands.w	r3, r8, #16
 801273c:	bf18      	it	ne
 801273e:	236a      	movne	r3, #106	; 0x6a
 8012740:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012af8 <_strtod_l+0x978>
 8012744:	9304      	str	r3, [sp, #16]
 8012746:	4650      	mov	r0, sl
 8012748:	4659      	mov	r1, fp
 801274a:	2300      	movs	r3, #0
 801274c:	f018 0f01 	tst.w	r8, #1
 8012750:	d004      	beq.n	801275c <_strtod_l+0x5dc>
 8012752:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012756:	f7ed ff5f 	bl	8000618 <__aeabi_dmul>
 801275a:	2301      	movs	r3, #1
 801275c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012760:	f109 0908 	add.w	r9, r9, #8
 8012764:	d1f2      	bne.n	801274c <_strtod_l+0x5cc>
 8012766:	b10b      	cbz	r3, 801276c <_strtod_l+0x5ec>
 8012768:	4682      	mov	sl, r0
 801276a:	468b      	mov	fp, r1
 801276c:	9b04      	ldr	r3, [sp, #16]
 801276e:	b1bb      	cbz	r3, 80127a0 <_strtod_l+0x620>
 8012770:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012774:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012778:	2b00      	cmp	r3, #0
 801277a:	4659      	mov	r1, fp
 801277c:	dd10      	ble.n	80127a0 <_strtod_l+0x620>
 801277e:	2b1f      	cmp	r3, #31
 8012780:	f340 8128 	ble.w	80129d4 <_strtod_l+0x854>
 8012784:	2b34      	cmp	r3, #52	; 0x34
 8012786:	bfde      	ittt	le
 8012788:	3b20      	suble	r3, #32
 801278a:	f04f 32ff 	movle.w	r2, #4294967295
 801278e:	fa02 f303 	lslle.w	r3, r2, r3
 8012792:	f04f 0a00 	mov.w	sl, #0
 8012796:	bfcc      	ite	gt
 8012798:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801279c:	ea03 0b01 	andle.w	fp, r3, r1
 80127a0:	2200      	movs	r2, #0
 80127a2:	2300      	movs	r3, #0
 80127a4:	4650      	mov	r0, sl
 80127a6:	4659      	mov	r1, fp
 80127a8:	f7ee f99e 	bl	8000ae8 <__aeabi_dcmpeq>
 80127ac:	2800      	cmp	r0, #0
 80127ae:	d1a4      	bne.n	80126fa <_strtod_l+0x57a>
 80127b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80127b6:	462b      	mov	r3, r5
 80127b8:	463a      	mov	r2, r7
 80127ba:	4620      	mov	r0, r4
 80127bc:	f001 ffd0 	bl	8014760 <__s2b>
 80127c0:	9009      	str	r0, [sp, #36]	; 0x24
 80127c2:	2800      	cmp	r0, #0
 80127c4:	f43f af24 	beq.w	8012610 <_strtod_l+0x490>
 80127c8:	9b07      	ldr	r3, [sp, #28]
 80127ca:	1b9e      	subs	r6, r3, r6
 80127cc:	9b08      	ldr	r3, [sp, #32]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	bfb4      	ite	lt
 80127d2:	4633      	movlt	r3, r6
 80127d4:	2300      	movge	r3, #0
 80127d6:	9310      	str	r3, [sp, #64]	; 0x40
 80127d8:	9b08      	ldr	r3, [sp, #32]
 80127da:	2500      	movs	r5, #0
 80127dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80127e0:	9318      	str	r3, [sp, #96]	; 0x60
 80127e2:	462e      	mov	r6, r5
 80127e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127e6:	4620      	mov	r0, r4
 80127e8:	6859      	ldr	r1, [r3, #4]
 80127ea:	f001 ff0d 	bl	8014608 <_Balloc>
 80127ee:	9007      	str	r0, [sp, #28]
 80127f0:	2800      	cmp	r0, #0
 80127f2:	f43f af11 	beq.w	8012618 <_strtod_l+0x498>
 80127f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f8:	691a      	ldr	r2, [r3, #16]
 80127fa:	3202      	adds	r2, #2
 80127fc:	f103 010c 	add.w	r1, r3, #12
 8012800:	0092      	lsls	r2, r2, #2
 8012802:	300c      	adds	r0, #12
 8012804:	f7fe fbe4 	bl	8010fd0 <memcpy>
 8012808:	ec4b ab10 	vmov	d0, sl, fp
 801280c:	aa20      	add	r2, sp, #128	; 0x80
 801280e:	a91f      	add	r1, sp, #124	; 0x7c
 8012810:	4620      	mov	r0, r4
 8012812:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012816:	f002 fadf 	bl	8014dd8 <__d2b>
 801281a:	901e      	str	r0, [sp, #120]	; 0x78
 801281c:	2800      	cmp	r0, #0
 801281e:	f43f aefb 	beq.w	8012618 <_strtod_l+0x498>
 8012822:	2101      	movs	r1, #1
 8012824:	4620      	mov	r0, r4
 8012826:	f002 f835 	bl	8014894 <__i2b>
 801282a:	4606      	mov	r6, r0
 801282c:	2800      	cmp	r0, #0
 801282e:	f43f aef3 	beq.w	8012618 <_strtod_l+0x498>
 8012832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012834:	9904      	ldr	r1, [sp, #16]
 8012836:	2b00      	cmp	r3, #0
 8012838:	bfab      	itete	ge
 801283a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801283c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801283e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012840:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012844:	bfac      	ite	ge
 8012846:	eb03 0902 	addge.w	r9, r3, r2
 801284a:	1ad7      	sublt	r7, r2, r3
 801284c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801284e:	eba3 0801 	sub.w	r8, r3, r1
 8012852:	4490      	add	r8, r2
 8012854:	4ba3      	ldr	r3, [pc, #652]	; (8012ae4 <_strtod_l+0x964>)
 8012856:	f108 38ff 	add.w	r8, r8, #4294967295
 801285a:	4598      	cmp	r8, r3
 801285c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012860:	f280 80cc 	bge.w	80129fc <_strtod_l+0x87c>
 8012864:	eba3 0308 	sub.w	r3, r3, r8
 8012868:	2b1f      	cmp	r3, #31
 801286a:	eba2 0203 	sub.w	r2, r2, r3
 801286e:	f04f 0101 	mov.w	r1, #1
 8012872:	f300 80b6 	bgt.w	80129e2 <_strtod_l+0x862>
 8012876:	fa01 f303 	lsl.w	r3, r1, r3
 801287a:	9311      	str	r3, [sp, #68]	; 0x44
 801287c:	2300      	movs	r3, #0
 801287e:	930c      	str	r3, [sp, #48]	; 0x30
 8012880:	eb09 0802 	add.w	r8, r9, r2
 8012884:	9b04      	ldr	r3, [sp, #16]
 8012886:	45c1      	cmp	r9, r8
 8012888:	4417      	add	r7, r2
 801288a:	441f      	add	r7, r3
 801288c:	464b      	mov	r3, r9
 801288e:	bfa8      	it	ge
 8012890:	4643      	movge	r3, r8
 8012892:	42bb      	cmp	r3, r7
 8012894:	bfa8      	it	ge
 8012896:	463b      	movge	r3, r7
 8012898:	2b00      	cmp	r3, #0
 801289a:	bfc2      	ittt	gt
 801289c:	eba8 0803 	subgt.w	r8, r8, r3
 80128a0:	1aff      	subgt	r7, r7, r3
 80128a2:	eba9 0903 	subgt.w	r9, r9, r3
 80128a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dd17      	ble.n	80128dc <_strtod_l+0x75c>
 80128ac:	4631      	mov	r1, r6
 80128ae:	461a      	mov	r2, r3
 80128b0:	4620      	mov	r0, r4
 80128b2:	f002 f8ab 	bl	8014a0c <__pow5mult>
 80128b6:	4606      	mov	r6, r0
 80128b8:	2800      	cmp	r0, #0
 80128ba:	f43f aead 	beq.w	8012618 <_strtod_l+0x498>
 80128be:	4601      	mov	r1, r0
 80128c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80128c2:	4620      	mov	r0, r4
 80128c4:	f001 fffc 	bl	80148c0 <__multiply>
 80128c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80128ca:	2800      	cmp	r0, #0
 80128cc:	f43f aea4 	beq.w	8012618 <_strtod_l+0x498>
 80128d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80128d2:	4620      	mov	r0, r4
 80128d4:	f001 fed8 	bl	8014688 <_Bfree>
 80128d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80128da:	931e      	str	r3, [sp, #120]	; 0x78
 80128dc:	f1b8 0f00 	cmp.w	r8, #0
 80128e0:	f300 8091 	bgt.w	8012a06 <_strtod_l+0x886>
 80128e4:	9b08      	ldr	r3, [sp, #32]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	dd08      	ble.n	80128fc <_strtod_l+0x77c>
 80128ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80128ec:	9907      	ldr	r1, [sp, #28]
 80128ee:	4620      	mov	r0, r4
 80128f0:	f002 f88c 	bl	8014a0c <__pow5mult>
 80128f4:	9007      	str	r0, [sp, #28]
 80128f6:	2800      	cmp	r0, #0
 80128f8:	f43f ae8e 	beq.w	8012618 <_strtod_l+0x498>
 80128fc:	2f00      	cmp	r7, #0
 80128fe:	dd08      	ble.n	8012912 <_strtod_l+0x792>
 8012900:	9907      	ldr	r1, [sp, #28]
 8012902:	463a      	mov	r2, r7
 8012904:	4620      	mov	r0, r4
 8012906:	f002 f8db 	bl	8014ac0 <__lshift>
 801290a:	9007      	str	r0, [sp, #28]
 801290c:	2800      	cmp	r0, #0
 801290e:	f43f ae83 	beq.w	8012618 <_strtod_l+0x498>
 8012912:	f1b9 0f00 	cmp.w	r9, #0
 8012916:	dd08      	ble.n	801292a <_strtod_l+0x7aa>
 8012918:	4631      	mov	r1, r6
 801291a:	464a      	mov	r2, r9
 801291c:	4620      	mov	r0, r4
 801291e:	f002 f8cf 	bl	8014ac0 <__lshift>
 8012922:	4606      	mov	r6, r0
 8012924:	2800      	cmp	r0, #0
 8012926:	f43f ae77 	beq.w	8012618 <_strtod_l+0x498>
 801292a:	9a07      	ldr	r2, [sp, #28]
 801292c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801292e:	4620      	mov	r0, r4
 8012930:	f002 f94e 	bl	8014bd0 <__mdiff>
 8012934:	4605      	mov	r5, r0
 8012936:	2800      	cmp	r0, #0
 8012938:	f43f ae6e 	beq.w	8012618 <_strtod_l+0x498>
 801293c:	68c3      	ldr	r3, [r0, #12]
 801293e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012940:	2300      	movs	r3, #0
 8012942:	60c3      	str	r3, [r0, #12]
 8012944:	4631      	mov	r1, r6
 8012946:	f002 f927 	bl	8014b98 <__mcmp>
 801294a:	2800      	cmp	r0, #0
 801294c:	da65      	bge.n	8012a1a <_strtod_l+0x89a>
 801294e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012950:	ea53 030a 	orrs.w	r3, r3, sl
 8012954:	f040 8087 	bne.w	8012a66 <_strtod_l+0x8e6>
 8012958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801295c:	2b00      	cmp	r3, #0
 801295e:	f040 8082 	bne.w	8012a66 <_strtod_l+0x8e6>
 8012962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012966:	0d1b      	lsrs	r3, r3, #20
 8012968:	051b      	lsls	r3, r3, #20
 801296a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801296e:	d97a      	bls.n	8012a66 <_strtod_l+0x8e6>
 8012970:	696b      	ldr	r3, [r5, #20]
 8012972:	b913      	cbnz	r3, 801297a <_strtod_l+0x7fa>
 8012974:	692b      	ldr	r3, [r5, #16]
 8012976:	2b01      	cmp	r3, #1
 8012978:	dd75      	ble.n	8012a66 <_strtod_l+0x8e6>
 801297a:	4629      	mov	r1, r5
 801297c:	2201      	movs	r2, #1
 801297e:	4620      	mov	r0, r4
 8012980:	f002 f89e 	bl	8014ac0 <__lshift>
 8012984:	4631      	mov	r1, r6
 8012986:	4605      	mov	r5, r0
 8012988:	f002 f906 	bl	8014b98 <__mcmp>
 801298c:	2800      	cmp	r0, #0
 801298e:	dd6a      	ble.n	8012a66 <_strtod_l+0x8e6>
 8012990:	9904      	ldr	r1, [sp, #16]
 8012992:	4a55      	ldr	r2, [pc, #340]	; (8012ae8 <_strtod_l+0x968>)
 8012994:	465b      	mov	r3, fp
 8012996:	2900      	cmp	r1, #0
 8012998:	f000 8085 	beq.w	8012aa6 <_strtod_l+0x926>
 801299c:	ea02 010b 	and.w	r1, r2, fp
 80129a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80129a4:	dc7f      	bgt.n	8012aa6 <_strtod_l+0x926>
 80129a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80129aa:	f77f aeaa 	ble.w	8012702 <_strtod_l+0x582>
 80129ae:	4a4f      	ldr	r2, [pc, #316]	; (8012aec <_strtod_l+0x96c>)
 80129b0:	2300      	movs	r3, #0
 80129b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80129b6:	4650      	mov	r0, sl
 80129b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80129bc:	4659      	mov	r1, fp
 80129be:	f7ed fe2b 	bl	8000618 <__aeabi_dmul>
 80129c2:	460b      	mov	r3, r1
 80129c4:	4303      	orrs	r3, r0
 80129c6:	bf08      	it	eq
 80129c8:	2322      	moveq	r3, #34	; 0x22
 80129ca:	4682      	mov	sl, r0
 80129cc:	468b      	mov	fp, r1
 80129ce:	bf08      	it	eq
 80129d0:	6023      	streq	r3, [r4, #0]
 80129d2:	e62b      	b.n	801262c <_strtod_l+0x4ac>
 80129d4:	f04f 32ff 	mov.w	r2, #4294967295
 80129d8:	fa02 f303 	lsl.w	r3, r2, r3
 80129dc:	ea03 0a0a 	and.w	sl, r3, sl
 80129e0:	e6de      	b.n	80127a0 <_strtod_l+0x620>
 80129e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80129e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80129ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80129ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80129f2:	fa01 f308 	lsl.w	r3, r1, r8
 80129f6:	930c      	str	r3, [sp, #48]	; 0x30
 80129f8:	9111      	str	r1, [sp, #68]	; 0x44
 80129fa:	e741      	b.n	8012880 <_strtod_l+0x700>
 80129fc:	2300      	movs	r3, #0
 80129fe:	930c      	str	r3, [sp, #48]	; 0x30
 8012a00:	2301      	movs	r3, #1
 8012a02:	9311      	str	r3, [sp, #68]	; 0x44
 8012a04:	e73c      	b.n	8012880 <_strtod_l+0x700>
 8012a06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012a08:	4642      	mov	r2, r8
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f002 f858 	bl	8014ac0 <__lshift>
 8012a10:	901e      	str	r0, [sp, #120]	; 0x78
 8012a12:	2800      	cmp	r0, #0
 8012a14:	f47f af66 	bne.w	80128e4 <_strtod_l+0x764>
 8012a18:	e5fe      	b.n	8012618 <_strtod_l+0x498>
 8012a1a:	465f      	mov	r7, fp
 8012a1c:	d16e      	bne.n	8012afc <_strtod_l+0x97c>
 8012a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a24:	b342      	cbz	r2, 8012a78 <_strtod_l+0x8f8>
 8012a26:	4a32      	ldr	r2, [pc, #200]	; (8012af0 <_strtod_l+0x970>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d128      	bne.n	8012a7e <_strtod_l+0x8fe>
 8012a2c:	9b04      	ldr	r3, [sp, #16]
 8012a2e:	4650      	mov	r0, sl
 8012a30:	b1eb      	cbz	r3, 8012a6e <_strtod_l+0x8ee>
 8012a32:	4a2d      	ldr	r2, [pc, #180]	; (8012ae8 <_strtod_l+0x968>)
 8012a34:	403a      	ands	r2, r7
 8012a36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8012a3e:	d819      	bhi.n	8012a74 <_strtod_l+0x8f4>
 8012a40:	0d12      	lsrs	r2, r2, #20
 8012a42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012a46:	fa01 f303 	lsl.w	r3, r1, r3
 8012a4a:	4298      	cmp	r0, r3
 8012a4c:	d117      	bne.n	8012a7e <_strtod_l+0x8fe>
 8012a4e:	4b29      	ldr	r3, [pc, #164]	; (8012af4 <_strtod_l+0x974>)
 8012a50:	429f      	cmp	r7, r3
 8012a52:	d102      	bne.n	8012a5a <_strtod_l+0x8da>
 8012a54:	3001      	adds	r0, #1
 8012a56:	f43f addf 	beq.w	8012618 <_strtod_l+0x498>
 8012a5a:	4b23      	ldr	r3, [pc, #140]	; (8012ae8 <_strtod_l+0x968>)
 8012a5c:	403b      	ands	r3, r7
 8012a5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012a62:	f04f 0a00 	mov.w	sl, #0
 8012a66:	9b04      	ldr	r3, [sp, #16]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d1a0      	bne.n	80129ae <_strtod_l+0x82e>
 8012a6c:	e5de      	b.n	801262c <_strtod_l+0x4ac>
 8012a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a72:	e7ea      	b.n	8012a4a <_strtod_l+0x8ca>
 8012a74:	460b      	mov	r3, r1
 8012a76:	e7e8      	b.n	8012a4a <_strtod_l+0x8ca>
 8012a78:	ea53 030a 	orrs.w	r3, r3, sl
 8012a7c:	d088      	beq.n	8012990 <_strtod_l+0x810>
 8012a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a80:	b1db      	cbz	r3, 8012aba <_strtod_l+0x93a>
 8012a82:	423b      	tst	r3, r7
 8012a84:	d0ef      	beq.n	8012a66 <_strtod_l+0x8e6>
 8012a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a88:	9a04      	ldr	r2, [sp, #16]
 8012a8a:	4650      	mov	r0, sl
 8012a8c:	4659      	mov	r1, fp
 8012a8e:	b1c3      	cbz	r3, 8012ac2 <_strtod_l+0x942>
 8012a90:	f7ff fb59 	bl	8012146 <sulp>
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a9c:	f7ed fc06 	bl	80002ac <__adddf3>
 8012aa0:	4682      	mov	sl, r0
 8012aa2:	468b      	mov	fp, r1
 8012aa4:	e7df      	b.n	8012a66 <_strtod_l+0x8e6>
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012aac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012ab0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012ab4:	f04f 3aff 	mov.w	sl, #4294967295
 8012ab8:	e7d5      	b.n	8012a66 <_strtod_l+0x8e6>
 8012aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012abc:	ea13 0f0a 	tst.w	r3, sl
 8012ac0:	e7e0      	b.n	8012a84 <_strtod_l+0x904>
 8012ac2:	f7ff fb40 	bl	8012146 <sulp>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ace:	f7ed fbeb 	bl	80002a8 <__aeabi_dsub>
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4682      	mov	sl, r0
 8012ad8:	468b      	mov	fp, r1
 8012ada:	f7ee f805 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0c1      	beq.n	8012a66 <_strtod_l+0x8e6>
 8012ae2:	e60e      	b.n	8012702 <_strtod_l+0x582>
 8012ae4:	fffffc02 	.word	0xfffffc02
 8012ae8:	7ff00000 	.word	0x7ff00000
 8012aec:	39500000 	.word	0x39500000
 8012af0:	000fffff 	.word	0x000fffff
 8012af4:	7fefffff 	.word	0x7fefffff
 8012af8:	08016588 	.word	0x08016588
 8012afc:	4631      	mov	r1, r6
 8012afe:	4628      	mov	r0, r5
 8012b00:	f002 f9c6 	bl	8014e90 <__ratio>
 8012b04:	ec59 8b10 	vmov	r8, r9, d0
 8012b08:	ee10 0a10 	vmov	r0, s0
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b12:	4649      	mov	r1, r9
 8012b14:	f7ed fffc 	bl	8000b10 <__aeabi_dcmple>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d07c      	beq.n	8012c16 <_strtod_l+0xa96>
 8012b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d04c      	beq.n	8012bbc <_strtod_l+0xa3c>
 8012b22:	4b95      	ldr	r3, [pc, #596]	; (8012d78 <_strtod_l+0xbf8>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012b2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012d78 <_strtod_l+0xbf8>
 8012b2e:	f04f 0800 	mov.w	r8, #0
 8012b32:	4b92      	ldr	r3, [pc, #584]	; (8012d7c <_strtod_l+0xbfc>)
 8012b34:	403b      	ands	r3, r7
 8012b36:	9311      	str	r3, [sp, #68]	; 0x44
 8012b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b3a:	4b91      	ldr	r3, [pc, #580]	; (8012d80 <_strtod_l+0xc00>)
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	f040 80b2 	bne.w	8012ca6 <_strtod_l+0xb26>
 8012b42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012b4e:	ec4b ab10 	vmov	d0, sl, fp
 8012b52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012b56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012b5a:	f002 f8c1 	bl	8014ce0 <__ulp>
 8012b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b62:	ec53 2b10 	vmov	r2, r3, d0
 8012b66:	f7ed fd57 	bl	8000618 <__aeabi_dmul>
 8012b6a:	4652      	mov	r2, sl
 8012b6c:	465b      	mov	r3, fp
 8012b6e:	f7ed fb9d 	bl	80002ac <__adddf3>
 8012b72:	460b      	mov	r3, r1
 8012b74:	4981      	ldr	r1, [pc, #516]	; (8012d7c <_strtod_l+0xbfc>)
 8012b76:	4a83      	ldr	r2, [pc, #524]	; (8012d84 <_strtod_l+0xc04>)
 8012b78:	4019      	ands	r1, r3
 8012b7a:	4291      	cmp	r1, r2
 8012b7c:	4682      	mov	sl, r0
 8012b7e:	d95e      	bls.n	8012c3e <_strtod_l+0xabe>
 8012b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d103      	bne.n	8012b92 <_strtod_l+0xa12>
 8012b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	f43f ad43 	beq.w	8012618 <_strtod_l+0x498>
 8012b92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012d90 <_strtod_l+0xc10>
 8012b96:	f04f 3aff 	mov.w	sl, #4294967295
 8012b9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f001 fd73 	bl	8014688 <_Bfree>
 8012ba2:	9907      	ldr	r1, [sp, #28]
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f001 fd6f 	bl	8014688 <_Bfree>
 8012baa:	4631      	mov	r1, r6
 8012bac:	4620      	mov	r0, r4
 8012bae:	f001 fd6b 	bl	8014688 <_Bfree>
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f001 fd67 	bl	8014688 <_Bfree>
 8012bba:	e613      	b.n	80127e4 <_strtod_l+0x664>
 8012bbc:	f1ba 0f00 	cmp.w	sl, #0
 8012bc0:	d11b      	bne.n	8012bfa <_strtod_l+0xa7a>
 8012bc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012bc6:	b9f3      	cbnz	r3, 8012c06 <_strtod_l+0xa86>
 8012bc8:	4b6b      	ldr	r3, [pc, #428]	; (8012d78 <_strtod_l+0xbf8>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	4640      	mov	r0, r8
 8012bce:	4649      	mov	r1, r9
 8012bd0:	f7ed ff94 	bl	8000afc <__aeabi_dcmplt>
 8012bd4:	b9d0      	cbnz	r0, 8012c0c <_strtod_l+0xa8c>
 8012bd6:	4640      	mov	r0, r8
 8012bd8:	4649      	mov	r1, r9
 8012bda:	4b6b      	ldr	r3, [pc, #428]	; (8012d88 <_strtod_l+0xc08>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f7ed fd1b 	bl	8000618 <__aeabi_dmul>
 8012be2:	4680      	mov	r8, r0
 8012be4:	4689      	mov	r9, r1
 8012be6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012bea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012bee:	931b      	str	r3, [sp, #108]	; 0x6c
 8012bf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012bf8:	e79b      	b.n	8012b32 <_strtod_l+0x9b2>
 8012bfa:	f1ba 0f01 	cmp.w	sl, #1
 8012bfe:	d102      	bne.n	8012c06 <_strtod_l+0xa86>
 8012c00:	2f00      	cmp	r7, #0
 8012c02:	f43f ad7e 	beq.w	8012702 <_strtod_l+0x582>
 8012c06:	4b61      	ldr	r3, [pc, #388]	; (8012d8c <_strtod_l+0xc0c>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	e78c      	b.n	8012b26 <_strtod_l+0x9a6>
 8012c0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012d88 <_strtod_l+0xc08>
 8012c10:	f04f 0800 	mov.w	r8, #0
 8012c14:	e7e7      	b.n	8012be6 <_strtod_l+0xa66>
 8012c16:	4b5c      	ldr	r3, [pc, #368]	; (8012d88 <_strtod_l+0xc08>)
 8012c18:	4640      	mov	r0, r8
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f7ed fcfb 	bl	8000618 <__aeabi_dmul>
 8012c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c24:	4680      	mov	r8, r0
 8012c26:	4689      	mov	r9, r1
 8012c28:	b933      	cbnz	r3, 8012c38 <_strtod_l+0xab8>
 8012c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c2e:	9012      	str	r0, [sp, #72]	; 0x48
 8012c30:	9313      	str	r3, [sp, #76]	; 0x4c
 8012c32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012c36:	e7dd      	b.n	8012bf4 <_strtod_l+0xa74>
 8012c38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012c3c:	e7f9      	b.n	8012c32 <_strtod_l+0xab2>
 8012c3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012c42:	9b04      	ldr	r3, [sp, #16]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1a8      	bne.n	8012b9a <_strtod_l+0xa1a>
 8012c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c4e:	0d1b      	lsrs	r3, r3, #20
 8012c50:	051b      	lsls	r3, r3, #20
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d1a1      	bne.n	8012b9a <_strtod_l+0xa1a>
 8012c56:	4640      	mov	r0, r8
 8012c58:	4649      	mov	r1, r9
 8012c5a:	f7ee f83d 	bl	8000cd8 <__aeabi_d2lz>
 8012c5e:	f7ed fcad 	bl	80005bc <__aeabi_l2d>
 8012c62:	4602      	mov	r2, r0
 8012c64:	460b      	mov	r3, r1
 8012c66:	4640      	mov	r0, r8
 8012c68:	4649      	mov	r1, r9
 8012c6a:	f7ed fb1d 	bl	80002a8 <__aeabi_dsub>
 8012c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012c74:	ea43 030a 	orr.w	r3, r3, sl
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	4680      	mov	r8, r0
 8012c7c:	4689      	mov	r9, r1
 8012c7e:	d053      	beq.n	8012d28 <_strtod_l+0xba8>
 8012c80:	a335      	add	r3, pc, #212	; (adr r3, 8012d58 <_strtod_l+0xbd8>)
 8012c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c86:	f7ed ff39 	bl	8000afc <__aeabi_dcmplt>
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	f47f acce 	bne.w	801262c <_strtod_l+0x4ac>
 8012c90:	a333      	add	r3, pc, #204	; (adr r3, 8012d60 <_strtod_l+0xbe0>)
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	4640      	mov	r0, r8
 8012c98:	4649      	mov	r1, r9
 8012c9a:	f7ed ff4d 	bl	8000b38 <__aeabi_dcmpgt>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	f43f af7b 	beq.w	8012b9a <_strtod_l+0xa1a>
 8012ca4:	e4c2      	b.n	801262c <_strtod_l+0x4ac>
 8012ca6:	9b04      	ldr	r3, [sp, #16]
 8012ca8:	b333      	cbz	r3, 8012cf8 <_strtod_l+0xb78>
 8012caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012cac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012cb0:	d822      	bhi.n	8012cf8 <_strtod_l+0xb78>
 8012cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8012d68 <_strtod_l+0xbe8>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	4640      	mov	r0, r8
 8012cba:	4649      	mov	r1, r9
 8012cbc:	f7ed ff28 	bl	8000b10 <__aeabi_dcmple>
 8012cc0:	b1a0      	cbz	r0, 8012cec <_strtod_l+0xb6c>
 8012cc2:	4649      	mov	r1, r9
 8012cc4:	4640      	mov	r0, r8
 8012cc6:	f7ed ff7f 	bl	8000bc8 <__aeabi_d2uiz>
 8012cca:	2801      	cmp	r0, #1
 8012ccc:	bf38      	it	cc
 8012cce:	2001      	movcc	r0, #1
 8012cd0:	f7ed fc28 	bl	8000524 <__aeabi_ui2d>
 8012cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	4689      	mov	r9, r1
 8012cda:	bb13      	cbnz	r3, 8012d22 <_strtod_l+0xba2>
 8012cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ce0:	9014      	str	r0, [sp, #80]	; 0x50
 8012ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8012ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012ce8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012cf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012cf4:	1a9b      	subs	r3, r3, r2
 8012cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8012cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012cfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012d04:	f001 ffec 	bl	8014ce0 <__ulp>
 8012d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012d0c:	ec53 2b10 	vmov	r2, r3, d0
 8012d10:	f7ed fc82 	bl	8000618 <__aeabi_dmul>
 8012d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d18:	f7ed fac8 	bl	80002ac <__adddf3>
 8012d1c:	4682      	mov	sl, r0
 8012d1e:	468b      	mov	fp, r1
 8012d20:	e78f      	b.n	8012c42 <_strtod_l+0xac2>
 8012d22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8012d26:	e7dd      	b.n	8012ce4 <_strtod_l+0xb64>
 8012d28:	a311      	add	r3, pc, #68	; (adr r3, 8012d70 <_strtod_l+0xbf0>)
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f7ed fee5 	bl	8000afc <__aeabi_dcmplt>
 8012d32:	e7b4      	b.n	8012c9e <_strtod_l+0xb1e>
 8012d34:	2300      	movs	r3, #0
 8012d36:	930e      	str	r3, [sp, #56]	; 0x38
 8012d38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012d3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d3c:	6013      	str	r3, [r2, #0]
 8012d3e:	f7ff ba65 	b.w	801220c <_strtod_l+0x8c>
 8012d42:	2b65      	cmp	r3, #101	; 0x65
 8012d44:	f43f ab5d 	beq.w	8012402 <_strtod_l+0x282>
 8012d48:	2b45      	cmp	r3, #69	; 0x45
 8012d4a:	f43f ab5a 	beq.w	8012402 <_strtod_l+0x282>
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f7ff bb92 	b.w	8012478 <_strtod_l+0x2f8>
 8012d54:	f3af 8000 	nop.w
 8012d58:	94a03595 	.word	0x94a03595
 8012d5c:	3fdfffff 	.word	0x3fdfffff
 8012d60:	35afe535 	.word	0x35afe535
 8012d64:	3fe00000 	.word	0x3fe00000
 8012d68:	ffc00000 	.word	0xffc00000
 8012d6c:	41dfffff 	.word	0x41dfffff
 8012d70:	94a03595 	.word	0x94a03595
 8012d74:	3fcfffff 	.word	0x3fcfffff
 8012d78:	3ff00000 	.word	0x3ff00000
 8012d7c:	7ff00000 	.word	0x7ff00000
 8012d80:	7fe00000 	.word	0x7fe00000
 8012d84:	7c9fffff 	.word	0x7c9fffff
 8012d88:	3fe00000 	.word	0x3fe00000
 8012d8c:	bff00000 	.word	0xbff00000
 8012d90:	7fefffff 	.word	0x7fefffff

08012d94 <_strtod_r>:
 8012d94:	4b01      	ldr	r3, [pc, #4]	; (8012d9c <_strtod_r+0x8>)
 8012d96:	f7ff b9f3 	b.w	8012180 <_strtod_l>
 8012d9a:	bf00      	nop
 8012d9c:	200001f0 	.word	0x200001f0

08012da0 <_strtol_l.isra.0>:
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da6:	d001      	beq.n	8012dac <_strtol_l.isra.0+0xc>
 8012da8:	2b24      	cmp	r3, #36	; 0x24
 8012daa:	d906      	bls.n	8012dba <_strtol_l.isra.0+0x1a>
 8012dac:	f7fd ffdc 	bl	8010d68 <__errno>
 8012db0:	2316      	movs	r3, #22
 8012db2:	6003      	str	r3, [r0, #0]
 8012db4:	2000      	movs	r0, #0
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dba:	4f3a      	ldr	r7, [pc, #232]	; (8012ea4 <_strtol_l.isra.0+0x104>)
 8012dbc:	468e      	mov	lr, r1
 8012dbe:	4676      	mov	r6, lr
 8012dc0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012dc4:	5de5      	ldrb	r5, [r4, r7]
 8012dc6:	f015 0508 	ands.w	r5, r5, #8
 8012dca:	d1f8      	bne.n	8012dbe <_strtol_l.isra.0+0x1e>
 8012dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8012dce:	d134      	bne.n	8012e3a <_strtol_l.isra.0+0x9a>
 8012dd0:	f89e 4000 	ldrb.w	r4, [lr]
 8012dd4:	f04f 0801 	mov.w	r8, #1
 8012dd8:	f106 0e02 	add.w	lr, r6, #2
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d05c      	beq.n	8012e9a <_strtol_l.isra.0+0xfa>
 8012de0:	2b10      	cmp	r3, #16
 8012de2:	d10c      	bne.n	8012dfe <_strtol_l.isra.0+0x5e>
 8012de4:	2c30      	cmp	r4, #48	; 0x30
 8012de6:	d10a      	bne.n	8012dfe <_strtol_l.isra.0+0x5e>
 8012de8:	f89e 4000 	ldrb.w	r4, [lr]
 8012dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012df0:	2c58      	cmp	r4, #88	; 0x58
 8012df2:	d14d      	bne.n	8012e90 <_strtol_l.isra.0+0xf0>
 8012df4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012df8:	2310      	movs	r3, #16
 8012dfa:	f10e 0e02 	add.w	lr, lr, #2
 8012dfe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012e02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e06:	2600      	movs	r6, #0
 8012e08:	fbbc f9f3 	udiv	r9, ip, r3
 8012e0c:	4635      	mov	r5, r6
 8012e0e:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012e16:	2f09      	cmp	r7, #9
 8012e18:	d818      	bhi.n	8012e4c <_strtol_l.isra.0+0xac>
 8012e1a:	463c      	mov	r4, r7
 8012e1c:	42a3      	cmp	r3, r4
 8012e1e:	dd24      	ble.n	8012e6a <_strtol_l.isra.0+0xca>
 8012e20:	2e00      	cmp	r6, #0
 8012e22:	db1f      	blt.n	8012e64 <_strtol_l.isra.0+0xc4>
 8012e24:	45a9      	cmp	r9, r5
 8012e26:	d31d      	bcc.n	8012e64 <_strtol_l.isra.0+0xc4>
 8012e28:	d101      	bne.n	8012e2e <_strtol_l.isra.0+0x8e>
 8012e2a:	45a2      	cmp	sl, r4
 8012e2c:	db1a      	blt.n	8012e64 <_strtol_l.isra.0+0xc4>
 8012e2e:	fb05 4503 	mla	r5, r5, r3, r4
 8012e32:	2601      	movs	r6, #1
 8012e34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012e38:	e7eb      	b.n	8012e12 <_strtol_l.isra.0+0x72>
 8012e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8012e3c:	bf08      	it	eq
 8012e3e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012e42:	46a8      	mov	r8, r5
 8012e44:	bf08      	it	eq
 8012e46:	f106 0e02 	addeq.w	lr, r6, #2
 8012e4a:	e7c7      	b.n	8012ddc <_strtol_l.isra.0+0x3c>
 8012e4c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012e50:	2f19      	cmp	r7, #25
 8012e52:	d801      	bhi.n	8012e58 <_strtol_l.isra.0+0xb8>
 8012e54:	3c37      	subs	r4, #55	; 0x37
 8012e56:	e7e1      	b.n	8012e1c <_strtol_l.isra.0+0x7c>
 8012e58:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012e5c:	2f19      	cmp	r7, #25
 8012e5e:	d804      	bhi.n	8012e6a <_strtol_l.isra.0+0xca>
 8012e60:	3c57      	subs	r4, #87	; 0x57
 8012e62:	e7db      	b.n	8012e1c <_strtol_l.isra.0+0x7c>
 8012e64:	f04f 36ff 	mov.w	r6, #4294967295
 8012e68:	e7e4      	b.n	8012e34 <_strtol_l.isra.0+0x94>
 8012e6a:	2e00      	cmp	r6, #0
 8012e6c:	da05      	bge.n	8012e7a <_strtol_l.isra.0+0xda>
 8012e6e:	2322      	movs	r3, #34	; 0x22
 8012e70:	6003      	str	r3, [r0, #0]
 8012e72:	4665      	mov	r5, ip
 8012e74:	b942      	cbnz	r2, 8012e88 <_strtol_l.isra.0+0xe8>
 8012e76:	4628      	mov	r0, r5
 8012e78:	e79d      	b.n	8012db6 <_strtol_l.isra.0+0x16>
 8012e7a:	f1b8 0f00 	cmp.w	r8, #0
 8012e7e:	d000      	beq.n	8012e82 <_strtol_l.isra.0+0xe2>
 8012e80:	426d      	negs	r5, r5
 8012e82:	2a00      	cmp	r2, #0
 8012e84:	d0f7      	beq.n	8012e76 <_strtol_l.isra.0+0xd6>
 8012e86:	b10e      	cbz	r6, 8012e8c <_strtol_l.isra.0+0xec>
 8012e88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012e8c:	6011      	str	r1, [r2, #0]
 8012e8e:	e7f2      	b.n	8012e76 <_strtol_l.isra.0+0xd6>
 8012e90:	2430      	movs	r4, #48	; 0x30
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1b3      	bne.n	8012dfe <_strtol_l.isra.0+0x5e>
 8012e96:	2308      	movs	r3, #8
 8012e98:	e7b1      	b.n	8012dfe <_strtol_l.isra.0+0x5e>
 8012e9a:	2c30      	cmp	r4, #48	; 0x30
 8012e9c:	d0a4      	beq.n	8012de8 <_strtol_l.isra.0+0x48>
 8012e9e:	230a      	movs	r3, #10
 8012ea0:	e7ad      	b.n	8012dfe <_strtol_l.isra.0+0x5e>
 8012ea2:	bf00      	nop
 8012ea4:	080165ed 	.word	0x080165ed

08012ea8 <_strtol_r>:
 8012ea8:	f7ff bf7a 	b.w	8012da0 <_strtol_l.isra.0>

08012eac <_strtoul_l.isra.0>:
 8012eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	4e3b      	ldr	r6, [pc, #236]	; (8012fa0 <_strtoul_l.isra.0+0xf4>)
 8012eb2:	4686      	mov	lr, r0
 8012eb4:	468c      	mov	ip, r1
 8012eb6:	4660      	mov	r0, ip
 8012eb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012ebc:	5da5      	ldrb	r5, [r4, r6]
 8012ebe:	f015 0508 	ands.w	r5, r5, #8
 8012ec2:	d1f8      	bne.n	8012eb6 <_strtoul_l.isra.0+0xa>
 8012ec4:	2c2d      	cmp	r4, #45	; 0x2d
 8012ec6:	d134      	bne.n	8012f32 <_strtoul_l.isra.0+0x86>
 8012ec8:	f89c 4000 	ldrb.w	r4, [ip]
 8012ecc:	f04f 0801 	mov.w	r8, #1
 8012ed0:	f100 0c02 	add.w	ip, r0, #2
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d05e      	beq.n	8012f96 <_strtoul_l.isra.0+0xea>
 8012ed8:	2b10      	cmp	r3, #16
 8012eda:	d10c      	bne.n	8012ef6 <_strtoul_l.isra.0+0x4a>
 8012edc:	2c30      	cmp	r4, #48	; 0x30
 8012ede:	d10a      	bne.n	8012ef6 <_strtoul_l.isra.0+0x4a>
 8012ee0:	f89c 0000 	ldrb.w	r0, [ip]
 8012ee4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012ee8:	2858      	cmp	r0, #88	; 0x58
 8012eea:	d14f      	bne.n	8012f8c <_strtoul_l.isra.0+0xe0>
 8012eec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012ef0:	2310      	movs	r3, #16
 8012ef2:	f10c 0c02 	add.w	ip, ip, #2
 8012ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8012efa:	2500      	movs	r5, #0
 8012efc:	fbb7 f7f3 	udiv	r7, r7, r3
 8012f00:	fb03 f907 	mul.w	r9, r3, r7
 8012f04:	ea6f 0909 	mvn.w	r9, r9
 8012f08:	4628      	mov	r0, r5
 8012f0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012f0e:	2e09      	cmp	r6, #9
 8012f10:	d818      	bhi.n	8012f44 <_strtoul_l.isra.0+0x98>
 8012f12:	4634      	mov	r4, r6
 8012f14:	42a3      	cmp	r3, r4
 8012f16:	dd24      	ble.n	8012f62 <_strtoul_l.isra.0+0xb6>
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	db1f      	blt.n	8012f5c <_strtoul_l.isra.0+0xb0>
 8012f1c:	4287      	cmp	r7, r0
 8012f1e:	d31d      	bcc.n	8012f5c <_strtoul_l.isra.0+0xb0>
 8012f20:	d101      	bne.n	8012f26 <_strtoul_l.isra.0+0x7a>
 8012f22:	45a1      	cmp	r9, r4
 8012f24:	db1a      	blt.n	8012f5c <_strtoul_l.isra.0+0xb0>
 8012f26:	fb00 4003 	mla	r0, r0, r3, r4
 8012f2a:	2501      	movs	r5, #1
 8012f2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012f30:	e7eb      	b.n	8012f0a <_strtoul_l.isra.0+0x5e>
 8012f32:	2c2b      	cmp	r4, #43	; 0x2b
 8012f34:	bf08      	it	eq
 8012f36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012f3a:	46a8      	mov	r8, r5
 8012f3c:	bf08      	it	eq
 8012f3e:	f100 0c02 	addeq.w	ip, r0, #2
 8012f42:	e7c7      	b.n	8012ed4 <_strtoul_l.isra.0+0x28>
 8012f44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012f48:	2e19      	cmp	r6, #25
 8012f4a:	d801      	bhi.n	8012f50 <_strtoul_l.isra.0+0xa4>
 8012f4c:	3c37      	subs	r4, #55	; 0x37
 8012f4e:	e7e1      	b.n	8012f14 <_strtoul_l.isra.0+0x68>
 8012f50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012f54:	2e19      	cmp	r6, #25
 8012f56:	d804      	bhi.n	8012f62 <_strtoul_l.isra.0+0xb6>
 8012f58:	3c57      	subs	r4, #87	; 0x57
 8012f5a:	e7db      	b.n	8012f14 <_strtoul_l.isra.0+0x68>
 8012f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8012f60:	e7e4      	b.n	8012f2c <_strtoul_l.isra.0+0x80>
 8012f62:	2d00      	cmp	r5, #0
 8012f64:	da07      	bge.n	8012f76 <_strtoul_l.isra.0+0xca>
 8012f66:	2322      	movs	r3, #34	; 0x22
 8012f68:	f8ce 3000 	str.w	r3, [lr]
 8012f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f70:	b942      	cbnz	r2, 8012f84 <_strtoul_l.isra.0+0xd8>
 8012f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f76:	f1b8 0f00 	cmp.w	r8, #0
 8012f7a:	d000      	beq.n	8012f7e <_strtoul_l.isra.0+0xd2>
 8012f7c:	4240      	negs	r0, r0
 8012f7e:	2a00      	cmp	r2, #0
 8012f80:	d0f7      	beq.n	8012f72 <_strtoul_l.isra.0+0xc6>
 8012f82:	b10d      	cbz	r5, 8012f88 <_strtoul_l.isra.0+0xdc>
 8012f84:	f10c 31ff 	add.w	r1, ip, #4294967295
 8012f88:	6011      	str	r1, [r2, #0]
 8012f8a:	e7f2      	b.n	8012f72 <_strtoul_l.isra.0+0xc6>
 8012f8c:	2430      	movs	r4, #48	; 0x30
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1b1      	bne.n	8012ef6 <_strtoul_l.isra.0+0x4a>
 8012f92:	2308      	movs	r3, #8
 8012f94:	e7af      	b.n	8012ef6 <_strtoul_l.isra.0+0x4a>
 8012f96:	2c30      	cmp	r4, #48	; 0x30
 8012f98:	d0a2      	beq.n	8012ee0 <_strtoul_l.isra.0+0x34>
 8012f9a:	230a      	movs	r3, #10
 8012f9c:	e7ab      	b.n	8012ef6 <_strtoul_l.isra.0+0x4a>
 8012f9e:	bf00      	nop
 8012fa0:	080165ed 	.word	0x080165ed

08012fa4 <_strtoul_r>:
 8012fa4:	f7ff bf82 	b.w	8012eac <_strtoul_l.isra.0>

08012fa8 <_write_r>:
 8012fa8:	b538      	push	{r3, r4, r5, lr}
 8012faa:	4d07      	ldr	r5, [pc, #28]	; (8012fc8 <_write_r+0x20>)
 8012fac:	4604      	mov	r4, r0
 8012fae:	4608      	mov	r0, r1
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	602a      	str	r2, [r5, #0]
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	f7ef fbeb 	bl	8002792 <_write>
 8012fbc:	1c43      	adds	r3, r0, #1
 8012fbe:	d102      	bne.n	8012fc6 <_write_r+0x1e>
 8012fc0:	682b      	ldr	r3, [r5, #0]
 8012fc2:	b103      	cbz	r3, 8012fc6 <_write_r+0x1e>
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	bd38      	pop	{r3, r4, r5, pc}
 8012fc8:	20006e74 	.word	0x20006e74

08012fcc <__assert_func>:
 8012fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fce:	4614      	mov	r4, r2
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	4b09      	ldr	r3, [pc, #36]	; (8012ff8 <__assert_func+0x2c>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	68d8      	ldr	r0, [r3, #12]
 8012fda:	b14c      	cbz	r4, 8012ff0 <__assert_func+0x24>
 8012fdc:	4b07      	ldr	r3, [pc, #28]	; (8012ffc <__assert_func+0x30>)
 8012fde:	9100      	str	r1, [sp, #0]
 8012fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fe4:	4906      	ldr	r1, [pc, #24]	; (8013000 <__assert_func+0x34>)
 8012fe6:	462b      	mov	r3, r5
 8012fe8:	f000 ff58 	bl	8013e9c <fiprintf>
 8012fec:	f7fd feb5 	bl	8010d5a <abort>
 8012ff0:	4b04      	ldr	r3, [pc, #16]	; (8013004 <__assert_func+0x38>)
 8012ff2:	461c      	mov	r4, r3
 8012ff4:	e7f3      	b.n	8012fde <__assert_func+0x12>
 8012ff6:	bf00      	nop
 8012ff8:	20000188 	.word	0x20000188
 8012ffc:	080165b0 	.word	0x080165b0
 8013000:	080165bd 	.word	0x080165bd
 8013004:	080165eb 	.word	0x080165eb

08013008 <_close_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	4d06      	ldr	r5, [pc, #24]	; (8013024 <_close_r+0x1c>)
 801300c:	2300      	movs	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	4608      	mov	r0, r1
 8013012:	602b      	str	r3, [r5, #0]
 8013014:	f7ef fbd9 	bl	80027ca <_close>
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	d102      	bne.n	8013022 <_close_r+0x1a>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	b103      	cbz	r3, 8013022 <_close_r+0x1a>
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	bd38      	pop	{r3, r4, r5, pc}
 8013024:	20006e74 	.word	0x20006e74

08013028 <quorem>:
 8013028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	6903      	ldr	r3, [r0, #16]
 801302e:	690c      	ldr	r4, [r1, #16]
 8013030:	42a3      	cmp	r3, r4
 8013032:	4607      	mov	r7, r0
 8013034:	f2c0 8081 	blt.w	801313a <quorem+0x112>
 8013038:	3c01      	subs	r4, #1
 801303a:	f101 0814 	add.w	r8, r1, #20
 801303e:	f100 0514 	add.w	r5, r0, #20
 8013042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013046:	9301      	str	r3, [sp, #4]
 8013048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801304c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013050:	3301      	adds	r3, #1
 8013052:	429a      	cmp	r2, r3
 8013054:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801305c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013060:	d331      	bcc.n	80130c6 <quorem+0x9e>
 8013062:	f04f 0e00 	mov.w	lr, #0
 8013066:	4640      	mov	r0, r8
 8013068:	46ac      	mov	ip, r5
 801306a:	46f2      	mov	sl, lr
 801306c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013070:	b293      	uxth	r3, r2
 8013072:	fb06 e303 	mla	r3, r6, r3, lr
 8013076:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801307a:	b29b      	uxth	r3, r3
 801307c:	ebaa 0303 	sub.w	r3, sl, r3
 8013080:	0c12      	lsrs	r2, r2, #16
 8013082:	f8dc a000 	ldr.w	sl, [ip]
 8013086:	fb06 e202 	mla	r2, r6, r2, lr
 801308a:	fa13 f38a 	uxtah	r3, r3, sl
 801308e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013092:	fa1f fa82 	uxth.w	sl, r2
 8013096:	f8dc 2000 	ldr.w	r2, [ip]
 801309a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801309e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130a8:	4581      	cmp	r9, r0
 80130aa:	f84c 3b04 	str.w	r3, [ip], #4
 80130ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80130b2:	d2db      	bcs.n	801306c <quorem+0x44>
 80130b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80130b8:	b92b      	cbnz	r3, 80130c6 <quorem+0x9e>
 80130ba:	9b01      	ldr	r3, [sp, #4]
 80130bc:	3b04      	subs	r3, #4
 80130be:	429d      	cmp	r5, r3
 80130c0:	461a      	mov	r2, r3
 80130c2:	d32e      	bcc.n	8013122 <quorem+0xfa>
 80130c4:	613c      	str	r4, [r7, #16]
 80130c6:	4638      	mov	r0, r7
 80130c8:	f001 fd66 	bl	8014b98 <__mcmp>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	db24      	blt.n	801311a <quorem+0xf2>
 80130d0:	3601      	adds	r6, #1
 80130d2:	4628      	mov	r0, r5
 80130d4:	f04f 0c00 	mov.w	ip, #0
 80130d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80130dc:	f8d0 e000 	ldr.w	lr, [r0]
 80130e0:	b293      	uxth	r3, r2
 80130e2:	ebac 0303 	sub.w	r3, ip, r3
 80130e6:	0c12      	lsrs	r2, r2, #16
 80130e8:	fa13 f38e 	uxtah	r3, r3, lr
 80130ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80130f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130fa:	45c1      	cmp	r9, r8
 80130fc:	f840 3b04 	str.w	r3, [r0], #4
 8013100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013104:	d2e8      	bcs.n	80130d8 <quorem+0xb0>
 8013106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801310a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801310e:	b922      	cbnz	r2, 801311a <quorem+0xf2>
 8013110:	3b04      	subs	r3, #4
 8013112:	429d      	cmp	r5, r3
 8013114:	461a      	mov	r2, r3
 8013116:	d30a      	bcc.n	801312e <quorem+0x106>
 8013118:	613c      	str	r4, [r7, #16]
 801311a:	4630      	mov	r0, r6
 801311c:	b003      	add	sp, #12
 801311e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013122:	6812      	ldr	r2, [r2, #0]
 8013124:	3b04      	subs	r3, #4
 8013126:	2a00      	cmp	r2, #0
 8013128:	d1cc      	bne.n	80130c4 <quorem+0x9c>
 801312a:	3c01      	subs	r4, #1
 801312c:	e7c7      	b.n	80130be <quorem+0x96>
 801312e:	6812      	ldr	r2, [r2, #0]
 8013130:	3b04      	subs	r3, #4
 8013132:	2a00      	cmp	r2, #0
 8013134:	d1f0      	bne.n	8013118 <quorem+0xf0>
 8013136:	3c01      	subs	r4, #1
 8013138:	e7eb      	b.n	8013112 <quorem+0xea>
 801313a:	2000      	movs	r0, #0
 801313c:	e7ee      	b.n	801311c <quorem+0xf4>
	...

08013140 <_dtoa_r>:
 8013140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013144:	ed2d 8b02 	vpush	{d8}
 8013148:	ec57 6b10 	vmov	r6, r7, d0
 801314c:	b095      	sub	sp, #84	; 0x54
 801314e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013154:	9105      	str	r1, [sp, #20]
 8013156:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801315a:	4604      	mov	r4, r0
 801315c:	9209      	str	r2, [sp, #36]	; 0x24
 801315e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013160:	b975      	cbnz	r5, 8013180 <_dtoa_r+0x40>
 8013162:	2010      	movs	r0, #16
 8013164:	f7fd ff24 	bl	8010fb0 <malloc>
 8013168:	4602      	mov	r2, r0
 801316a:	6260      	str	r0, [r4, #36]	; 0x24
 801316c:	b920      	cbnz	r0, 8013178 <_dtoa_r+0x38>
 801316e:	4bb2      	ldr	r3, [pc, #712]	; (8013438 <_dtoa_r+0x2f8>)
 8013170:	21ea      	movs	r1, #234	; 0xea
 8013172:	48b2      	ldr	r0, [pc, #712]	; (801343c <_dtoa_r+0x2fc>)
 8013174:	f7ff ff2a 	bl	8012fcc <__assert_func>
 8013178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801317c:	6005      	str	r5, [r0, #0]
 801317e:	60c5      	str	r5, [r0, #12]
 8013180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013182:	6819      	ldr	r1, [r3, #0]
 8013184:	b151      	cbz	r1, 801319c <_dtoa_r+0x5c>
 8013186:	685a      	ldr	r2, [r3, #4]
 8013188:	604a      	str	r2, [r1, #4]
 801318a:	2301      	movs	r3, #1
 801318c:	4093      	lsls	r3, r2
 801318e:	608b      	str	r3, [r1, #8]
 8013190:	4620      	mov	r0, r4
 8013192:	f001 fa79 	bl	8014688 <_Bfree>
 8013196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013198:	2200      	movs	r2, #0
 801319a:	601a      	str	r2, [r3, #0]
 801319c:	1e3b      	subs	r3, r7, #0
 801319e:	bfb9      	ittee	lt
 80131a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80131a4:	9303      	strlt	r3, [sp, #12]
 80131a6:	2300      	movge	r3, #0
 80131a8:	f8c8 3000 	strge.w	r3, [r8]
 80131ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80131b0:	4ba3      	ldr	r3, [pc, #652]	; (8013440 <_dtoa_r+0x300>)
 80131b2:	bfbc      	itt	lt
 80131b4:	2201      	movlt	r2, #1
 80131b6:	f8c8 2000 	strlt.w	r2, [r8]
 80131ba:	ea33 0309 	bics.w	r3, r3, r9
 80131be:	d11b      	bne.n	80131f8 <_dtoa_r+0xb8>
 80131c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131cc:	4333      	orrs	r3, r6
 80131ce:	f000 857a 	beq.w	8013cc6 <_dtoa_r+0xb86>
 80131d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131d4:	b963      	cbnz	r3, 80131f0 <_dtoa_r+0xb0>
 80131d6:	4b9b      	ldr	r3, [pc, #620]	; (8013444 <_dtoa_r+0x304>)
 80131d8:	e024      	b.n	8013224 <_dtoa_r+0xe4>
 80131da:	4b9b      	ldr	r3, [pc, #620]	; (8013448 <_dtoa_r+0x308>)
 80131dc:	9300      	str	r3, [sp, #0]
 80131de:	3308      	adds	r3, #8
 80131e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131e2:	6013      	str	r3, [r2, #0]
 80131e4:	9800      	ldr	r0, [sp, #0]
 80131e6:	b015      	add	sp, #84	; 0x54
 80131e8:	ecbd 8b02 	vpop	{d8}
 80131ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f0:	4b94      	ldr	r3, [pc, #592]	; (8013444 <_dtoa_r+0x304>)
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	3303      	adds	r3, #3
 80131f6:	e7f3      	b.n	80131e0 <_dtoa_r+0xa0>
 80131f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131fc:	2200      	movs	r2, #0
 80131fe:	ec51 0b17 	vmov	r0, r1, d7
 8013202:	2300      	movs	r3, #0
 8013204:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013208:	f7ed fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801320c:	4680      	mov	r8, r0
 801320e:	b158      	cbz	r0, 8013228 <_dtoa_r+0xe8>
 8013210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013212:	2301      	movs	r3, #1
 8013214:	6013      	str	r3, [r2, #0]
 8013216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013218:	2b00      	cmp	r3, #0
 801321a:	f000 8551 	beq.w	8013cc0 <_dtoa_r+0xb80>
 801321e:	488b      	ldr	r0, [pc, #556]	; (801344c <_dtoa_r+0x30c>)
 8013220:	6018      	str	r0, [r3, #0]
 8013222:	1e43      	subs	r3, r0, #1
 8013224:	9300      	str	r3, [sp, #0]
 8013226:	e7dd      	b.n	80131e4 <_dtoa_r+0xa4>
 8013228:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801322c:	aa12      	add	r2, sp, #72	; 0x48
 801322e:	a913      	add	r1, sp, #76	; 0x4c
 8013230:	4620      	mov	r0, r4
 8013232:	f001 fdd1 	bl	8014dd8 <__d2b>
 8013236:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801323a:	4683      	mov	fp, r0
 801323c:	2d00      	cmp	r5, #0
 801323e:	d07c      	beq.n	801333a <_dtoa_r+0x1fa>
 8013240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013242:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801324a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801324e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801325a:	4b7d      	ldr	r3, [pc, #500]	; (8013450 <_dtoa_r+0x310>)
 801325c:	2200      	movs	r2, #0
 801325e:	4630      	mov	r0, r6
 8013260:	4639      	mov	r1, r7
 8013262:	f7ed f821 	bl	80002a8 <__aeabi_dsub>
 8013266:	a36e      	add	r3, pc, #440	; (adr r3, 8013420 <_dtoa_r+0x2e0>)
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	f7ed f9d4 	bl	8000618 <__aeabi_dmul>
 8013270:	a36d      	add	r3, pc, #436	; (adr r3, 8013428 <_dtoa_r+0x2e8>)
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	f7ed f819 	bl	80002ac <__adddf3>
 801327a:	4606      	mov	r6, r0
 801327c:	4628      	mov	r0, r5
 801327e:	460f      	mov	r7, r1
 8013280:	f7ed f960 	bl	8000544 <__aeabi_i2d>
 8013284:	a36a      	add	r3, pc, #424	; (adr r3, 8013430 <_dtoa_r+0x2f0>)
 8013286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328a:	f7ed f9c5 	bl	8000618 <__aeabi_dmul>
 801328e:	4602      	mov	r2, r0
 8013290:	460b      	mov	r3, r1
 8013292:	4630      	mov	r0, r6
 8013294:	4639      	mov	r1, r7
 8013296:	f7ed f809 	bl	80002ac <__adddf3>
 801329a:	4606      	mov	r6, r0
 801329c:	460f      	mov	r7, r1
 801329e:	f7ed fc6b 	bl	8000b78 <__aeabi_d2iz>
 80132a2:	2200      	movs	r2, #0
 80132a4:	4682      	mov	sl, r0
 80132a6:	2300      	movs	r3, #0
 80132a8:	4630      	mov	r0, r6
 80132aa:	4639      	mov	r1, r7
 80132ac:	f7ed fc26 	bl	8000afc <__aeabi_dcmplt>
 80132b0:	b148      	cbz	r0, 80132c6 <_dtoa_r+0x186>
 80132b2:	4650      	mov	r0, sl
 80132b4:	f7ed f946 	bl	8000544 <__aeabi_i2d>
 80132b8:	4632      	mov	r2, r6
 80132ba:	463b      	mov	r3, r7
 80132bc:	f7ed fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 80132c0:	b908      	cbnz	r0, 80132c6 <_dtoa_r+0x186>
 80132c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132c6:	f1ba 0f16 	cmp.w	sl, #22
 80132ca:	d854      	bhi.n	8013376 <_dtoa_r+0x236>
 80132cc:	4b61      	ldr	r3, [pc, #388]	; (8013454 <_dtoa_r+0x314>)
 80132ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80132da:	f7ed fc0f 	bl	8000afc <__aeabi_dcmplt>
 80132de:	2800      	cmp	r0, #0
 80132e0:	d04b      	beq.n	801337a <_dtoa_r+0x23a>
 80132e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132e6:	2300      	movs	r3, #0
 80132e8:	930e      	str	r3, [sp, #56]	; 0x38
 80132ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132ec:	1b5d      	subs	r5, r3, r5
 80132ee:	1e6b      	subs	r3, r5, #1
 80132f0:	9304      	str	r3, [sp, #16]
 80132f2:	bf43      	ittte	mi
 80132f4:	2300      	movmi	r3, #0
 80132f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80132fa:	9304      	strmi	r3, [sp, #16]
 80132fc:	f04f 0800 	movpl.w	r8, #0
 8013300:	f1ba 0f00 	cmp.w	sl, #0
 8013304:	db3b      	blt.n	801337e <_dtoa_r+0x23e>
 8013306:	9b04      	ldr	r3, [sp, #16]
 8013308:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801330c:	4453      	add	r3, sl
 801330e:	9304      	str	r3, [sp, #16]
 8013310:	2300      	movs	r3, #0
 8013312:	9306      	str	r3, [sp, #24]
 8013314:	9b05      	ldr	r3, [sp, #20]
 8013316:	2b09      	cmp	r3, #9
 8013318:	d869      	bhi.n	80133ee <_dtoa_r+0x2ae>
 801331a:	2b05      	cmp	r3, #5
 801331c:	bfc4      	itt	gt
 801331e:	3b04      	subgt	r3, #4
 8013320:	9305      	strgt	r3, [sp, #20]
 8013322:	9b05      	ldr	r3, [sp, #20]
 8013324:	f1a3 0302 	sub.w	r3, r3, #2
 8013328:	bfcc      	ite	gt
 801332a:	2500      	movgt	r5, #0
 801332c:	2501      	movle	r5, #1
 801332e:	2b03      	cmp	r3, #3
 8013330:	d869      	bhi.n	8013406 <_dtoa_r+0x2c6>
 8013332:	e8df f003 	tbb	[pc, r3]
 8013336:	4e2c      	.short	0x4e2c
 8013338:	5a4c      	.short	0x5a4c
 801333a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801333e:	441d      	add	r5, r3
 8013340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013344:	2b20      	cmp	r3, #32
 8013346:	bfc1      	itttt	gt
 8013348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801334c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013350:	fa09 f303 	lslgt.w	r3, r9, r3
 8013354:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013358:	bfda      	itte	le
 801335a:	f1c3 0320 	rsble	r3, r3, #32
 801335e:	fa06 f003 	lslle.w	r0, r6, r3
 8013362:	4318      	orrgt	r0, r3
 8013364:	f7ed f8de 	bl	8000524 <__aeabi_ui2d>
 8013368:	2301      	movs	r3, #1
 801336a:	4606      	mov	r6, r0
 801336c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013370:	3d01      	subs	r5, #1
 8013372:	9310      	str	r3, [sp, #64]	; 0x40
 8013374:	e771      	b.n	801325a <_dtoa_r+0x11a>
 8013376:	2301      	movs	r3, #1
 8013378:	e7b6      	b.n	80132e8 <_dtoa_r+0x1a8>
 801337a:	900e      	str	r0, [sp, #56]	; 0x38
 801337c:	e7b5      	b.n	80132ea <_dtoa_r+0x1aa>
 801337e:	f1ca 0300 	rsb	r3, sl, #0
 8013382:	9306      	str	r3, [sp, #24]
 8013384:	2300      	movs	r3, #0
 8013386:	eba8 080a 	sub.w	r8, r8, sl
 801338a:	930d      	str	r3, [sp, #52]	; 0x34
 801338c:	e7c2      	b.n	8013314 <_dtoa_r+0x1d4>
 801338e:	2300      	movs	r3, #0
 8013390:	9308      	str	r3, [sp, #32]
 8013392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013394:	2b00      	cmp	r3, #0
 8013396:	dc39      	bgt.n	801340c <_dtoa_r+0x2cc>
 8013398:	f04f 0901 	mov.w	r9, #1
 801339c:	f8cd 9004 	str.w	r9, [sp, #4]
 80133a0:	464b      	mov	r3, r9
 80133a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80133a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80133a8:	2200      	movs	r2, #0
 80133aa:	6042      	str	r2, [r0, #4]
 80133ac:	2204      	movs	r2, #4
 80133ae:	f102 0614 	add.w	r6, r2, #20
 80133b2:	429e      	cmp	r6, r3
 80133b4:	6841      	ldr	r1, [r0, #4]
 80133b6:	d92f      	bls.n	8013418 <_dtoa_r+0x2d8>
 80133b8:	4620      	mov	r0, r4
 80133ba:	f001 f925 	bl	8014608 <_Balloc>
 80133be:	9000      	str	r0, [sp, #0]
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d14b      	bne.n	801345c <_dtoa_r+0x31c>
 80133c4:	4b24      	ldr	r3, [pc, #144]	; (8013458 <_dtoa_r+0x318>)
 80133c6:	4602      	mov	r2, r0
 80133c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80133cc:	e6d1      	b.n	8013172 <_dtoa_r+0x32>
 80133ce:	2301      	movs	r3, #1
 80133d0:	e7de      	b.n	8013390 <_dtoa_r+0x250>
 80133d2:	2300      	movs	r3, #0
 80133d4:	9308      	str	r3, [sp, #32]
 80133d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133d8:	eb0a 0903 	add.w	r9, sl, r3
 80133dc:	f109 0301 	add.w	r3, r9, #1
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	9301      	str	r3, [sp, #4]
 80133e4:	bfb8      	it	lt
 80133e6:	2301      	movlt	r3, #1
 80133e8:	e7dd      	b.n	80133a6 <_dtoa_r+0x266>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e7f2      	b.n	80133d4 <_dtoa_r+0x294>
 80133ee:	2501      	movs	r5, #1
 80133f0:	2300      	movs	r3, #0
 80133f2:	9305      	str	r3, [sp, #20]
 80133f4:	9508      	str	r5, [sp, #32]
 80133f6:	f04f 39ff 	mov.w	r9, #4294967295
 80133fa:	2200      	movs	r2, #0
 80133fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8013400:	2312      	movs	r3, #18
 8013402:	9209      	str	r2, [sp, #36]	; 0x24
 8013404:	e7cf      	b.n	80133a6 <_dtoa_r+0x266>
 8013406:	2301      	movs	r3, #1
 8013408:	9308      	str	r3, [sp, #32]
 801340a:	e7f4      	b.n	80133f6 <_dtoa_r+0x2b6>
 801340c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013410:	f8cd 9004 	str.w	r9, [sp, #4]
 8013414:	464b      	mov	r3, r9
 8013416:	e7c6      	b.n	80133a6 <_dtoa_r+0x266>
 8013418:	3101      	adds	r1, #1
 801341a:	6041      	str	r1, [r0, #4]
 801341c:	0052      	lsls	r2, r2, #1
 801341e:	e7c6      	b.n	80133ae <_dtoa_r+0x26e>
 8013420:	636f4361 	.word	0x636f4361
 8013424:	3fd287a7 	.word	0x3fd287a7
 8013428:	8b60c8b3 	.word	0x8b60c8b3
 801342c:	3fc68a28 	.word	0x3fc68a28
 8013430:	509f79fb 	.word	0x509f79fb
 8013434:	3fd34413 	.word	0x3fd34413
 8013438:	080166fa 	.word	0x080166fa
 801343c:	08016711 	.word	0x08016711
 8013440:	7ff00000 	.word	0x7ff00000
 8013444:	080166f6 	.word	0x080166f6
 8013448:	080166ed 	.word	0x080166ed
 801344c:	08016972 	.word	0x08016972
 8013450:	3ff80000 	.word	0x3ff80000
 8013454:	08016888 	.word	0x08016888
 8013458:	08016770 	.word	0x08016770
 801345c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801345e:	9a00      	ldr	r2, [sp, #0]
 8013460:	601a      	str	r2, [r3, #0]
 8013462:	9b01      	ldr	r3, [sp, #4]
 8013464:	2b0e      	cmp	r3, #14
 8013466:	f200 80ad 	bhi.w	80135c4 <_dtoa_r+0x484>
 801346a:	2d00      	cmp	r5, #0
 801346c:	f000 80aa 	beq.w	80135c4 <_dtoa_r+0x484>
 8013470:	f1ba 0f00 	cmp.w	sl, #0
 8013474:	dd36      	ble.n	80134e4 <_dtoa_r+0x3a4>
 8013476:	4ac3      	ldr	r2, [pc, #780]	; (8013784 <_dtoa_r+0x644>)
 8013478:	f00a 030f 	and.w	r3, sl, #15
 801347c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013480:	ed93 7b00 	vldr	d7, [r3]
 8013484:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013488:	ea4f 172a 	mov.w	r7, sl, asr #4
 801348c:	eeb0 8a47 	vmov.f32	s16, s14
 8013490:	eef0 8a67 	vmov.f32	s17, s15
 8013494:	d016      	beq.n	80134c4 <_dtoa_r+0x384>
 8013496:	4bbc      	ldr	r3, [pc, #752]	; (8013788 <_dtoa_r+0x648>)
 8013498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801349c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80134a0:	f7ed f9e4 	bl	800086c <__aeabi_ddiv>
 80134a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134a8:	f007 070f 	and.w	r7, r7, #15
 80134ac:	2503      	movs	r5, #3
 80134ae:	4eb6      	ldr	r6, [pc, #728]	; (8013788 <_dtoa_r+0x648>)
 80134b0:	b957      	cbnz	r7, 80134c8 <_dtoa_r+0x388>
 80134b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134b6:	ec53 2b18 	vmov	r2, r3, d8
 80134ba:	f7ed f9d7 	bl	800086c <__aeabi_ddiv>
 80134be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134c2:	e029      	b.n	8013518 <_dtoa_r+0x3d8>
 80134c4:	2502      	movs	r5, #2
 80134c6:	e7f2      	b.n	80134ae <_dtoa_r+0x36e>
 80134c8:	07f9      	lsls	r1, r7, #31
 80134ca:	d508      	bpl.n	80134de <_dtoa_r+0x39e>
 80134cc:	ec51 0b18 	vmov	r0, r1, d8
 80134d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80134d4:	f7ed f8a0 	bl	8000618 <__aeabi_dmul>
 80134d8:	ec41 0b18 	vmov	d8, r0, r1
 80134dc:	3501      	adds	r5, #1
 80134de:	107f      	asrs	r7, r7, #1
 80134e0:	3608      	adds	r6, #8
 80134e2:	e7e5      	b.n	80134b0 <_dtoa_r+0x370>
 80134e4:	f000 80a6 	beq.w	8013634 <_dtoa_r+0x4f4>
 80134e8:	f1ca 0600 	rsb	r6, sl, #0
 80134ec:	4ba5      	ldr	r3, [pc, #660]	; (8013784 <_dtoa_r+0x644>)
 80134ee:	4fa6      	ldr	r7, [pc, #664]	; (8013788 <_dtoa_r+0x648>)
 80134f0:	f006 020f 	and.w	r2, r6, #15
 80134f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013500:	f7ed f88a 	bl	8000618 <__aeabi_dmul>
 8013504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013508:	1136      	asrs	r6, r6, #4
 801350a:	2300      	movs	r3, #0
 801350c:	2502      	movs	r5, #2
 801350e:	2e00      	cmp	r6, #0
 8013510:	f040 8085 	bne.w	801361e <_dtoa_r+0x4de>
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1d2      	bne.n	80134be <_dtoa_r+0x37e>
 8013518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801351a:	2b00      	cmp	r3, #0
 801351c:	f000 808c 	beq.w	8013638 <_dtoa_r+0x4f8>
 8013520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013524:	4b99      	ldr	r3, [pc, #612]	; (801378c <_dtoa_r+0x64c>)
 8013526:	2200      	movs	r2, #0
 8013528:	4630      	mov	r0, r6
 801352a:	4639      	mov	r1, r7
 801352c:	f7ed fae6 	bl	8000afc <__aeabi_dcmplt>
 8013530:	2800      	cmp	r0, #0
 8013532:	f000 8081 	beq.w	8013638 <_dtoa_r+0x4f8>
 8013536:	9b01      	ldr	r3, [sp, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d07d      	beq.n	8013638 <_dtoa_r+0x4f8>
 801353c:	f1b9 0f00 	cmp.w	r9, #0
 8013540:	dd3c      	ble.n	80135bc <_dtoa_r+0x47c>
 8013542:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013546:	9307      	str	r3, [sp, #28]
 8013548:	2200      	movs	r2, #0
 801354a:	4b91      	ldr	r3, [pc, #580]	; (8013790 <_dtoa_r+0x650>)
 801354c:	4630      	mov	r0, r6
 801354e:	4639      	mov	r1, r7
 8013550:	f7ed f862 	bl	8000618 <__aeabi_dmul>
 8013554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013558:	3501      	adds	r5, #1
 801355a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801355e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013562:	4628      	mov	r0, r5
 8013564:	f7ec ffee 	bl	8000544 <__aeabi_i2d>
 8013568:	4632      	mov	r2, r6
 801356a:	463b      	mov	r3, r7
 801356c:	f7ed f854 	bl	8000618 <__aeabi_dmul>
 8013570:	4b88      	ldr	r3, [pc, #544]	; (8013794 <_dtoa_r+0x654>)
 8013572:	2200      	movs	r2, #0
 8013574:	f7ec fe9a 	bl	80002ac <__adddf3>
 8013578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801357c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013580:	9303      	str	r3, [sp, #12]
 8013582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013584:	2b00      	cmp	r3, #0
 8013586:	d15c      	bne.n	8013642 <_dtoa_r+0x502>
 8013588:	4b83      	ldr	r3, [pc, #524]	; (8013798 <_dtoa_r+0x658>)
 801358a:	2200      	movs	r2, #0
 801358c:	4630      	mov	r0, r6
 801358e:	4639      	mov	r1, r7
 8013590:	f7ec fe8a 	bl	80002a8 <__aeabi_dsub>
 8013594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013598:	4606      	mov	r6, r0
 801359a:	460f      	mov	r7, r1
 801359c:	f7ed facc 	bl	8000b38 <__aeabi_dcmpgt>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	f040 8296 	bne.w	8013ad2 <_dtoa_r+0x992>
 80135a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80135aa:	4630      	mov	r0, r6
 80135ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135b0:	4639      	mov	r1, r7
 80135b2:	f7ed faa3 	bl	8000afc <__aeabi_dcmplt>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	f040 8288 	bne.w	8013acc <_dtoa_r+0x98c>
 80135bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80135c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80135c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f2c0 8158 	blt.w	801387c <_dtoa_r+0x73c>
 80135cc:	f1ba 0f0e 	cmp.w	sl, #14
 80135d0:	f300 8154 	bgt.w	801387c <_dtoa_r+0x73c>
 80135d4:	4b6b      	ldr	r3, [pc, #428]	; (8013784 <_dtoa_r+0x644>)
 80135d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80135da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f280 80e3 	bge.w	80137ac <_dtoa_r+0x66c>
 80135e6:	9b01      	ldr	r3, [sp, #4]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f300 80df 	bgt.w	80137ac <_dtoa_r+0x66c>
 80135ee:	f040 826d 	bne.w	8013acc <_dtoa_r+0x98c>
 80135f2:	4b69      	ldr	r3, [pc, #420]	; (8013798 <_dtoa_r+0x658>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	4640      	mov	r0, r8
 80135f8:	4649      	mov	r1, r9
 80135fa:	f7ed f80d 	bl	8000618 <__aeabi_dmul>
 80135fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013602:	f7ed fa8f 	bl	8000b24 <__aeabi_dcmpge>
 8013606:	9e01      	ldr	r6, [sp, #4]
 8013608:	4637      	mov	r7, r6
 801360a:	2800      	cmp	r0, #0
 801360c:	f040 8243 	bne.w	8013a96 <_dtoa_r+0x956>
 8013610:	9d00      	ldr	r5, [sp, #0]
 8013612:	2331      	movs	r3, #49	; 0x31
 8013614:	f805 3b01 	strb.w	r3, [r5], #1
 8013618:	f10a 0a01 	add.w	sl, sl, #1
 801361c:	e23f      	b.n	8013a9e <_dtoa_r+0x95e>
 801361e:	07f2      	lsls	r2, r6, #31
 8013620:	d505      	bpl.n	801362e <_dtoa_r+0x4ee>
 8013622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013626:	f7ec fff7 	bl	8000618 <__aeabi_dmul>
 801362a:	3501      	adds	r5, #1
 801362c:	2301      	movs	r3, #1
 801362e:	1076      	asrs	r6, r6, #1
 8013630:	3708      	adds	r7, #8
 8013632:	e76c      	b.n	801350e <_dtoa_r+0x3ce>
 8013634:	2502      	movs	r5, #2
 8013636:	e76f      	b.n	8013518 <_dtoa_r+0x3d8>
 8013638:	9b01      	ldr	r3, [sp, #4]
 801363a:	f8cd a01c 	str.w	sl, [sp, #28]
 801363e:	930c      	str	r3, [sp, #48]	; 0x30
 8013640:	e78d      	b.n	801355e <_dtoa_r+0x41e>
 8013642:	9900      	ldr	r1, [sp, #0]
 8013644:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013648:	4b4e      	ldr	r3, [pc, #312]	; (8013784 <_dtoa_r+0x644>)
 801364a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801364e:	4401      	add	r1, r0
 8013650:	9102      	str	r1, [sp, #8]
 8013652:	9908      	ldr	r1, [sp, #32]
 8013654:	eeb0 8a47 	vmov.f32	s16, s14
 8013658:	eef0 8a67 	vmov.f32	s17, s15
 801365c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013664:	2900      	cmp	r1, #0
 8013666:	d045      	beq.n	80136f4 <_dtoa_r+0x5b4>
 8013668:	494c      	ldr	r1, [pc, #304]	; (801379c <_dtoa_r+0x65c>)
 801366a:	2000      	movs	r0, #0
 801366c:	f7ed f8fe 	bl	800086c <__aeabi_ddiv>
 8013670:	ec53 2b18 	vmov	r2, r3, d8
 8013674:	f7ec fe18 	bl	80002a8 <__aeabi_dsub>
 8013678:	9d00      	ldr	r5, [sp, #0]
 801367a:	ec41 0b18 	vmov	d8, r0, r1
 801367e:	4639      	mov	r1, r7
 8013680:	4630      	mov	r0, r6
 8013682:	f7ed fa79 	bl	8000b78 <__aeabi_d2iz>
 8013686:	900c      	str	r0, [sp, #48]	; 0x30
 8013688:	f7ec ff5c 	bl	8000544 <__aeabi_i2d>
 801368c:	4602      	mov	r2, r0
 801368e:	460b      	mov	r3, r1
 8013690:	4630      	mov	r0, r6
 8013692:	4639      	mov	r1, r7
 8013694:	f7ec fe08 	bl	80002a8 <__aeabi_dsub>
 8013698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801369a:	3330      	adds	r3, #48	; 0x30
 801369c:	f805 3b01 	strb.w	r3, [r5], #1
 80136a0:	ec53 2b18 	vmov	r2, r3, d8
 80136a4:	4606      	mov	r6, r0
 80136a6:	460f      	mov	r7, r1
 80136a8:	f7ed fa28 	bl	8000afc <__aeabi_dcmplt>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d165      	bne.n	801377c <_dtoa_r+0x63c>
 80136b0:	4632      	mov	r2, r6
 80136b2:	463b      	mov	r3, r7
 80136b4:	4935      	ldr	r1, [pc, #212]	; (801378c <_dtoa_r+0x64c>)
 80136b6:	2000      	movs	r0, #0
 80136b8:	f7ec fdf6 	bl	80002a8 <__aeabi_dsub>
 80136bc:	ec53 2b18 	vmov	r2, r3, d8
 80136c0:	f7ed fa1c 	bl	8000afc <__aeabi_dcmplt>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	f040 80b9 	bne.w	801383c <_dtoa_r+0x6fc>
 80136ca:	9b02      	ldr	r3, [sp, #8]
 80136cc:	429d      	cmp	r5, r3
 80136ce:	f43f af75 	beq.w	80135bc <_dtoa_r+0x47c>
 80136d2:	4b2f      	ldr	r3, [pc, #188]	; (8013790 <_dtoa_r+0x650>)
 80136d4:	ec51 0b18 	vmov	r0, r1, d8
 80136d8:	2200      	movs	r2, #0
 80136da:	f7ec ff9d 	bl	8000618 <__aeabi_dmul>
 80136de:	4b2c      	ldr	r3, [pc, #176]	; (8013790 <_dtoa_r+0x650>)
 80136e0:	ec41 0b18 	vmov	d8, r0, r1
 80136e4:	2200      	movs	r2, #0
 80136e6:	4630      	mov	r0, r6
 80136e8:	4639      	mov	r1, r7
 80136ea:	f7ec ff95 	bl	8000618 <__aeabi_dmul>
 80136ee:	4606      	mov	r6, r0
 80136f0:	460f      	mov	r7, r1
 80136f2:	e7c4      	b.n	801367e <_dtoa_r+0x53e>
 80136f4:	ec51 0b17 	vmov	r0, r1, d7
 80136f8:	f7ec ff8e 	bl	8000618 <__aeabi_dmul>
 80136fc:	9b02      	ldr	r3, [sp, #8]
 80136fe:	9d00      	ldr	r5, [sp, #0]
 8013700:	930c      	str	r3, [sp, #48]	; 0x30
 8013702:	ec41 0b18 	vmov	d8, r0, r1
 8013706:	4639      	mov	r1, r7
 8013708:	4630      	mov	r0, r6
 801370a:	f7ed fa35 	bl	8000b78 <__aeabi_d2iz>
 801370e:	9011      	str	r0, [sp, #68]	; 0x44
 8013710:	f7ec ff18 	bl	8000544 <__aeabi_i2d>
 8013714:	4602      	mov	r2, r0
 8013716:	460b      	mov	r3, r1
 8013718:	4630      	mov	r0, r6
 801371a:	4639      	mov	r1, r7
 801371c:	f7ec fdc4 	bl	80002a8 <__aeabi_dsub>
 8013720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013722:	3330      	adds	r3, #48	; 0x30
 8013724:	f805 3b01 	strb.w	r3, [r5], #1
 8013728:	9b02      	ldr	r3, [sp, #8]
 801372a:	429d      	cmp	r5, r3
 801372c:	4606      	mov	r6, r0
 801372e:	460f      	mov	r7, r1
 8013730:	f04f 0200 	mov.w	r2, #0
 8013734:	d134      	bne.n	80137a0 <_dtoa_r+0x660>
 8013736:	4b19      	ldr	r3, [pc, #100]	; (801379c <_dtoa_r+0x65c>)
 8013738:	ec51 0b18 	vmov	r0, r1, d8
 801373c:	f7ec fdb6 	bl	80002ac <__adddf3>
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	4630      	mov	r0, r6
 8013746:	4639      	mov	r1, r7
 8013748:	f7ed f9f6 	bl	8000b38 <__aeabi_dcmpgt>
 801374c:	2800      	cmp	r0, #0
 801374e:	d175      	bne.n	801383c <_dtoa_r+0x6fc>
 8013750:	ec53 2b18 	vmov	r2, r3, d8
 8013754:	4911      	ldr	r1, [pc, #68]	; (801379c <_dtoa_r+0x65c>)
 8013756:	2000      	movs	r0, #0
 8013758:	f7ec fda6 	bl	80002a8 <__aeabi_dsub>
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	4630      	mov	r0, r6
 8013762:	4639      	mov	r1, r7
 8013764:	f7ed f9ca 	bl	8000afc <__aeabi_dcmplt>
 8013768:	2800      	cmp	r0, #0
 801376a:	f43f af27 	beq.w	80135bc <_dtoa_r+0x47c>
 801376e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013770:	1e6b      	subs	r3, r5, #1
 8013772:	930c      	str	r3, [sp, #48]	; 0x30
 8013774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013778:	2b30      	cmp	r3, #48	; 0x30
 801377a:	d0f8      	beq.n	801376e <_dtoa_r+0x62e>
 801377c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013780:	e04a      	b.n	8013818 <_dtoa_r+0x6d8>
 8013782:	bf00      	nop
 8013784:	08016888 	.word	0x08016888
 8013788:	08016860 	.word	0x08016860
 801378c:	3ff00000 	.word	0x3ff00000
 8013790:	40240000 	.word	0x40240000
 8013794:	401c0000 	.word	0x401c0000
 8013798:	40140000 	.word	0x40140000
 801379c:	3fe00000 	.word	0x3fe00000
 80137a0:	4baf      	ldr	r3, [pc, #700]	; (8013a60 <_dtoa_r+0x920>)
 80137a2:	f7ec ff39 	bl	8000618 <__aeabi_dmul>
 80137a6:	4606      	mov	r6, r0
 80137a8:	460f      	mov	r7, r1
 80137aa:	e7ac      	b.n	8013706 <_dtoa_r+0x5c6>
 80137ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80137b0:	9d00      	ldr	r5, [sp, #0]
 80137b2:	4642      	mov	r2, r8
 80137b4:	464b      	mov	r3, r9
 80137b6:	4630      	mov	r0, r6
 80137b8:	4639      	mov	r1, r7
 80137ba:	f7ed f857 	bl	800086c <__aeabi_ddiv>
 80137be:	f7ed f9db 	bl	8000b78 <__aeabi_d2iz>
 80137c2:	9002      	str	r0, [sp, #8]
 80137c4:	f7ec febe 	bl	8000544 <__aeabi_i2d>
 80137c8:	4642      	mov	r2, r8
 80137ca:	464b      	mov	r3, r9
 80137cc:	f7ec ff24 	bl	8000618 <__aeabi_dmul>
 80137d0:	4602      	mov	r2, r0
 80137d2:	460b      	mov	r3, r1
 80137d4:	4630      	mov	r0, r6
 80137d6:	4639      	mov	r1, r7
 80137d8:	f7ec fd66 	bl	80002a8 <__aeabi_dsub>
 80137dc:	9e02      	ldr	r6, [sp, #8]
 80137de:	9f01      	ldr	r7, [sp, #4]
 80137e0:	3630      	adds	r6, #48	; 0x30
 80137e2:	f805 6b01 	strb.w	r6, [r5], #1
 80137e6:	9e00      	ldr	r6, [sp, #0]
 80137e8:	1bae      	subs	r6, r5, r6
 80137ea:	42b7      	cmp	r7, r6
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	d137      	bne.n	8013862 <_dtoa_r+0x722>
 80137f2:	f7ec fd5b 	bl	80002ac <__adddf3>
 80137f6:	4642      	mov	r2, r8
 80137f8:	464b      	mov	r3, r9
 80137fa:	4606      	mov	r6, r0
 80137fc:	460f      	mov	r7, r1
 80137fe:	f7ed f99b 	bl	8000b38 <__aeabi_dcmpgt>
 8013802:	b9c8      	cbnz	r0, 8013838 <_dtoa_r+0x6f8>
 8013804:	4642      	mov	r2, r8
 8013806:	464b      	mov	r3, r9
 8013808:	4630      	mov	r0, r6
 801380a:	4639      	mov	r1, r7
 801380c:	f7ed f96c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013810:	b110      	cbz	r0, 8013818 <_dtoa_r+0x6d8>
 8013812:	9b02      	ldr	r3, [sp, #8]
 8013814:	07d9      	lsls	r1, r3, #31
 8013816:	d40f      	bmi.n	8013838 <_dtoa_r+0x6f8>
 8013818:	4620      	mov	r0, r4
 801381a:	4659      	mov	r1, fp
 801381c:	f000 ff34 	bl	8014688 <_Bfree>
 8013820:	2300      	movs	r3, #0
 8013822:	702b      	strb	r3, [r5, #0]
 8013824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013826:	f10a 0001 	add.w	r0, sl, #1
 801382a:	6018      	str	r0, [r3, #0]
 801382c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801382e:	2b00      	cmp	r3, #0
 8013830:	f43f acd8 	beq.w	80131e4 <_dtoa_r+0xa4>
 8013834:	601d      	str	r5, [r3, #0]
 8013836:	e4d5      	b.n	80131e4 <_dtoa_r+0xa4>
 8013838:	f8cd a01c 	str.w	sl, [sp, #28]
 801383c:	462b      	mov	r3, r5
 801383e:	461d      	mov	r5, r3
 8013840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013844:	2a39      	cmp	r2, #57	; 0x39
 8013846:	d108      	bne.n	801385a <_dtoa_r+0x71a>
 8013848:	9a00      	ldr	r2, [sp, #0]
 801384a:	429a      	cmp	r2, r3
 801384c:	d1f7      	bne.n	801383e <_dtoa_r+0x6fe>
 801384e:	9a07      	ldr	r2, [sp, #28]
 8013850:	9900      	ldr	r1, [sp, #0]
 8013852:	3201      	adds	r2, #1
 8013854:	9207      	str	r2, [sp, #28]
 8013856:	2230      	movs	r2, #48	; 0x30
 8013858:	700a      	strb	r2, [r1, #0]
 801385a:	781a      	ldrb	r2, [r3, #0]
 801385c:	3201      	adds	r2, #1
 801385e:	701a      	strb	r2, [r3, #0]
 8013860:	e78c      	b.n	801377c <_dtoa_r+0x63c>
 8013862:	4b7f      	ldr	r3, [pc, #508]	; (8013a60 <_dtoa_r+0x920>)
 8013864:	2200      	movs	r2, #0
 8013866:	f7ec fed7 	bl	8000618 <__aeabi_dmul>
 801386a:	2200      	movs	r2, #0
 801386c:	2300      	movs	r3, #0
 801386e:	4606      	mov	r6, r0
 8013870:	460f      	mov	r7, r1
 8013872:	f7ed f939 	bl	8000ae8 <__aeabi_dcmpeq>
 8013876:	2800      	cmp	r0, #0
 8013878:	d09b      	beq.n	80137b2 <_dtoa_r+0x672>
 801387a:	e7cd      	b.n	8013818 <_dtoa_r+0x6d8>
 801387c:	9a08      	ldr	r2, [sp, #32]
 801387e:	2a00      	cmp	r2, #0
 8013880:	f000 80c4 	beq.w	8013a0c <_dtoa_r+0x8cc>
 8013884:	9a05      	ldr	r2, [sp, #20]
 8013886:	2a01      	cmp	r2, #1
 8013888:	f300 80a8 	bgt.w	80139dc <_dtoa_r+0x89c>
 801388c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801388e:	2a00      	cmp	r2, #0
 8013890:	f000 80a0 	beq.w	80139d4 <_dtoa_r+0x894>
 8013894:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013898:	9e06      	ldr	r6, [sp, #24]
 801389a:	4645      	mov	r5, r8
 801389c:	9a04      	ldr	r2, [sp, #16]
 801389e:	2101      	movs	r1, #1
 80138a0:	441a      	add	r2, r3
 80138a2:	4620      	mov	r0, r4
 80138a4:	4498      	add	r8, r3
 80138a6:	9204      	str	r2, [sp, #16]
 80138a8:	f000 fff4 	bl	8014894 <__i2b>
 80138ac:	4607      	mov	r7, r0
 80138ae:	2d00      	cmp	r5, #0
 80138b0:	dd0b      	ble.n	80138ca <_dtoa_r+0x78a>
 80138b2:	9b04      	ldr	r3, [sp, #16]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	dd08      	ble.n	80138ca <_dtoa_r+0x78a>
 80138b8:	42ab      	cmp	r3, r5
 80138ba:	9a04      	ldr	r2, [sp, #16]
 80138bc:	bfa8      	it	ge
 80138be:	462b      	movge	r3, r5
 80138c0:	eba8 0803 	sub.w	r8, r8, r3
 80138c4:	1aed      	subs	r5, r5, r3
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	9304      	str	r3, [sp, #16]
 80138ca:	9b06      	ldr	r3, [sp, #24]
 80138cc:	b1fb      	cbz	r3, 801390e <_dtoa_r+0x7ce>
 80138ce:	9b08      	ldr	r3, [sp, #32]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 809f 	beq.w	8013a14 <_dtoa_r+0x8d4>
 80138d6:	2e00      	cmp	r6, #0
 80138d8:	dd11      	ble.n	80138fe <_dtoa_r+0x7be>
 80138da:	4639      	mov	r1, r7
 80138dc:	4632      	mov	r2, r6
 80138de:	4620      	mov	r0, r4
 80138e0:	f001 f894 	bl	8014a0c <__pow5mult>
 80138e4:	465a      	mov	r2, fp
 80138e6:	4601      	mov	r1, r0
 80138e8:	4607      	mov	r7, r0
 80138ea:	4620      	mov	r0, r4
 80138ec:	f000 ffe8 	bl	80148c0 <__multiply>
 80138f0:	4659      	mov	r1, fp
 80138f2:	9007      	str	r0, [sp, #28]
 80138f4:	4620      	mov	r0, r4
 80138f6:	f000 fec7 	bl	8014688 <_Bfree>
 80138fa:	9b07      	ldr	r3, [sp, #28]
 80138fc:	469b      	mov	fp, r3
 80138fe:	9b06      	ldr	r3, [sp, #24]
 8013900:	1b9a      	subs	r2, r3, r6
 8013902:	d004      	beq.n	801390e <_dtoa_r+0x7ce>
 8013904:	4659      	mov	r1, fp
 8013906:	4620      	mov	r0, r4
 8013908:	f001 f880 	bl	8014a0c <__pow5mult>
 801390c:	4683      	mov	fp, r0
 801390e:	2101      	movs	r1, #1
 8013910:	4620      	mov	r0, r4
 8013912:	f000 ffbf 	bl	8014894 <__i2b>
 8013916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013918:	2b00      	cmp	r3, #0
 801391a:	4606      	mov	r6, r0
 801391c:	dd7c      	ble.n	8013a18 <_dtoa_r+0x8d8>
 801391e:	461a      	mov	r2, r3
 8013920:	4601      	mov	r1, r0
 8013922:	4620      	mov	r0, r4
 8013924:	f001 f872 	bl	8014a0c <__pow5mult>
 8013928:	9b05      	ldr	r3, [sp, #20]
 801392a:	2b01      	cmp	r3, #1
 801392c:	4606      	mov	r6, r0
 801392e:	dd76      	ble.n	8013a1e <_dtoa_r+0x8de>
 8013930:	2300      	movs	r3, #0
 8013932:	9306      	str	r3, [sp, #24]
 8013934:	6933      	ldr	r3, [r6, #16]
 8013936:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801393a:	6918      	ldr	r0, [r3, #16]
 801393c:	f000 ff5a 	bl	80147f4 <__hi0bits>
 8013940:	f1c0 0020 	rsb	r0, r0, #32
 8013944:	9b04      	ldr	r3, [sp, #16]
 8013946:	4418      	add	r0, r3
 8013948:	f010 001f 	ands.w	r0, r0, #31
 801394c:	f000 8086 	beq.w	8013a5c <_dtoa_r+0x91c>
 8013950:	f1c0 0320 	rsb	r3, r0, #32
 8013954:	2b04      	cmp	r3, #4
 8013956:	dd7f      	ble.n	8013a58 <_dtoa_r+0x918>
 8013958:	f1c0 001c 	rsb	r0, r0, #28
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	4403      	add	r3, r0
 8013960:	4480      	add	r8, r0
 8013962:	4405      	add	r5, r0
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	f1b8 0f00 	cmp.w	r8, #0
 801396a:	dd05      	ble.n	8013978 <_dtoa_r+0x838>
 801396c:	4659      	mov	r1, fp
 801396e:	4642      	mov	r2, r8
 8013970:	4620      	mov	r0, r4
 8013972:	f001 f8a5 	bl	8014ac0 <__lshift>
 8013976:	4683      	mov	fp, r0
 8013978:	9b04      	ldr	r3, [sp, #16]
 801397a:	2b00      	cmp	r3, #0
 801397c:	dd05      	ble.n	801398a <_dtoa_r+0x84a>
 801397e:	4631      	mov	r1, r6
 8013980:	461a      	mov	r2, r3
 8013982:	4620      	mov	r0, r4
 8013984:	f001 f89c 	bl	8014ac0 <__lshift>
 8013988:	4606      	mov	r6, r0
 801398a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801398c:	2b00      	cmp	r3, #0
 801398e:	d069      	beq.n	8013a64 <_dtoa_r+0x924>
 8013990:	4631      	mov	r1, r6
 8013992:	4658      	mov	r0, fp
 8013994:	f001 f900 	bl	8014b98 <__mcmp>
 8013998:	2800      	cmp	r0, #0
 801399a:	da63      	bge.n	8013a64 <_dtoa_r+0x924>
 801399c:	2300      	movs	r3, #0
 801399e:	4659      	mov	r1, fp
 80139a0:	220a      	movs	r2, #10
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 fe92 	bl	80146cc <__multadd>
 80139a8:	9b08      	ldr	r3, [sp, #32]
 80139aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139ae:	4683      	mov	fp, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f000 818f 	beq.w	8013cd4 <_dtoa_r+0xb94>
 80139b6:	4639      	mov	r1, r7
 80139b8:	2300      	movs	r3, #0
 80139ba:	220a      	movs	r2, #10
 80139bc:	4620      	mov	r0, r4
 80139be:	f000 fe85 	bl	80146cc <__multadd>
 80139c2:	f1b9 0f00 	cmp.w	r9, #0
 80139c6:	4607      	mov	r7, r0
 80139c8:	f300 808e 	bgt.w	8013ae8 <_dtoa_r+0x9a8>
 80139cc:	9b05      	ldr	r3, [sp, #20]
 80139ce:	2b02      	cmp	r3, #2
 80139d0:	dc50      	bgt.n	8013a74 <_dtoa_r+0x934>
 80139d2:	e089      	b.n	8013ae8 <_dtoa_r+0x9a8>
 80139d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80139da:	e75d      	b.n	8013898 <_dtoa_r+0x758>
 80139dc:	9b01      	ldr	r3, [sp, #4]
 80139de:	1e5e      	subs	r6, r3, #1
 80139e0:	9b06      	ldr	r3, [sp, #24]
 80139e2:	42b3      	cmp	r3, r6
 80139e4:	bfbf      	itttt	lt
 80139e6:	9b06      	ldrlt	r3, [sp, #24]
 80139e8:	9606      	strlt	r6, [sp, #24]
 80139ea:	1af2      	sublt	r2, r6, r3
 80139ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80139ee:	bfb6      	itet	lt
 80139f0:	189b      	addlt	r3, r3, r2
 80139f2:	1b9e      	subge	r6, r3, r6
 80139f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80139f6:	9b01      	ldr	r3, [sp, #4]
 80139f8:	bfb8      	it	lt
 80139fa:	2600      	movlt	r6, #0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	bfb5      	itete	lt
 8013a00:	eba8 0503 	sublt.w	r5, r8, r3
 8013a04:	9b01      	ldrge	r3, [sp, #4]
 8013a06:	2300      	movlt	r3, #0
 8013a08:	4645      	movge	r5, r8
 8013a0a:	e747      	b.n	801389c <_dtoa_r+0x75c>
 8013a0c:	9e06      	ldr	r6, [sp, #24]
 8013a0e:	9f08      	ldr	r7, [sp, #32]
 8013a10:	4645      	mov	r5, r8
 8013a12:	e74c      	b.n	80138ae <_dtoa_r+0x76e>
 8013a14:	9a06      	ldr	r2, [sp, #24]
 8013a16:	e775      	b.n	8013904 <_dtoa_r+0x7c4>
 8013a18:	9b05      	ldr	r3, [sp, #20]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	dc18      	bgt.n	8013a50 <_dtoa_r+0x910>
 8013a1e:	9b02      	ldr	r3, [sp, #8]
 8013a20:	b9b3      	cbnz	r3, 8013a50 <_dtoa_r+0x910>
 8013a22:	9b03      	ldr	r3, [sp, #12]
 8013a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a28:	b9a3      	cbnz	r3, 8013a54 <_dtoa_r+0x914>
 8013a2a:	9b03      	ldr	r3, [sp, #12]
 8013a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a30:	0d1b      	lsrs	r3, r3, #20
 8013a32:	051b      	lsls	r3, r3, #20
 8013a34:	b12b      	cbz	r3, 8013a42 <_dtoa_r+0x902>
 8013a36:	9b04      	ldr	r3, [sp, #16]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	9304      	str	r3, [sp, #16]
 8013a3c:	f108 0801 	add.w	r8, r8, #1
 8013a40:	2301      	movs	r3, #1
 8013a42:	9306      	str	r3, [sp, #24]
 8013a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	f47f af74 	bne.w	8013934 <_dtoa_r+0x7f4>
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	e779      	b.n	8013944 <_dtoa_r+0x804>
 8013a50:	2300      	movs	r3, #0
 8013a52:	e7f6      	b.n	8013a42 <_dtoa_r+0x902>
 8013a54:	9b02      	ldr	r3, [sp, #8]
 8013a56:	e7f4      	b.n	8013a42 <_dtoa_r+0x902>
 8013a58:	d085      	beq.n	8013966 <_dtoa_r+0x826>
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	301c      	adds	r0, #28
 8013a5e:	e77d      	b.n	801395c <_dtoa_r+0x81c>
 8013a60:	40240000 	.word	0x40240000
 8013a64:	9b01      	ldr	r3, [sp, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	dc38      	bgt.n	8013adc <_dtoa_r+0x99c>
 8013a6a:	9b05      	ldr	r3, [sp, #20]
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	dd35      	ble.n	8013adc <_dtoa_r+0x99c>
 8013a70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013a74:	f1b9 0f00 	cmp.w	r9, #0
 8013a78:	d10d      	bne.n	8013a96 <_dtoa_r+0x956>
 8013a7a:	4631      	mov	r1, r6
 8013a7c:	464b      	mov	r3, r9
 8013a7e:	2205      	movs	r2, #5
 8013a80:	4620      	mov	r0, r4
 8013a82:	f000 fe23 	bl	80146cc <__multadd>
 8013a86:	4601      	mov	r1, r0
 8013a88:	4606      	mov	r6, r0
 8013a8a:	4658      	mov	r0, fp
 8013a8c:	f001 f884 	bl	8014b98 <__mcmp>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	f73f adbd 	bgt.w	8013610 <_dtoa_r+0x4d0>
 8013a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a98:	9d00      	ldr	r5, [sp, #0]
 8013a9a:	ea6f 0a03 	mvn.w	sl, r3
 8013a9e:	f04f 0800 	mov.w	r8, #0
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f000 fdef 	bl	8014688 <_Bfree>
 8013aaa:	2f00      	cmp	r7, #0
 8013aac:	f43f aeb4 	beq.w	8013818 <_dtoa_r+0x6d8>
 8013ab0:	f1b8 0f00 	cmp.w	r8, #0
 8013ab4:	d005      	beq.n	8013ac2 <_dtoa_r+0x982>
 8013ab6:	45b8      	cmp	r8, r7
 8013ab8:	d003      	beq.n	8013ac2 <_dtoa_r+0x982>
 8013aba:	4641      	mov	r1, r8
 8013abc:	4620      	mov	r0, r4
 8013abe:	f000 fde3 	bl	8014688 <_Bfree>
 8013ac2:	4639      	mov	r1, r7
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f000 fddf 	bl	8014688 <_Bfree>
 8013aca:	e6a5      	b.n	8013818 <_dtoa_r+0x6d8>
 8013acc:	2600      	movs	r6, #0
 8013ace:	4637      	mov	r7, r6
 8013ad0:	e7e1      	b.n	8013a96 <_dtoa_r+0x956>
 8013ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013ad8:	4637      	mov	r7, r6
 8013ada:	e599      	b.n	8013610 <_dtoa_r+0x4d0>
 8013adc:	9b08      	ldr	r3, [sp, #32]
 8013ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	f000 80fd 	beq.w	8013ce2 <_dtoa_r+0xba2>
 8013ae8:	2d00      	cmp	r5, #0
 8013aea:	dd05      	ble.n	8013af8 <_dtoa_r+0x9b8>
 8013aec:	4639      	mov	r1, r7
 8013aee:	462a      	mov	r2, r5
 8013af0:	4620      	mov	r0, r4
 8013af2:	f000 ffe5 	bl	8014ac0 <__lshift>
 8013af6:	4607      	mov	r7, r0
 8013af8:	9b06      	ldr	r3, [sp, #24]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d05c      	beq.n	8013bb8 <_dtoa_r+0xa78>
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4620      	mov	r0, r4
 8013b02:	f000 fd81 	bl	8014608 <_Balloc>
 8013b06:	4605      	mov	r5, r0
 8013b08:	b928      	cbnz	r0, 8013b16 <_dtoa_r+0x9d6>
 8013b0a:	4b80      	ldr	r3, [pc, #512]	; (8013d0c <_dtoa_r+0xbcc>)
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013b12:	f7ff bb2e 	b.w	8013172 <_dtoa_r+0x32>
 8013b16:	693a      	ldr	r2, [r7, #16]
 8013b18:	3202      	adds	r2, #2
 8013b1a:	0092      	lsls	r2, r2, #2
 8013b1c:	f107 010c 	add.w	r1, r7, #12
 8013b20:	300c      	adds	r0, #12
 8013b22:	f7fd fa55 	bl	8010fd0 <memcpy>
 8013b26:	2201      	movs	r2, #1
 8013b28:	4629      	mov	r1, r5
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	f000 ffc8 	bl	8014ac0 <__lshift>
 8013b30:	9b00      	ldr	r3, [sp, #0]
 8013b32:	3301      	adds	r3, #1
 8013b34:	9301      	str	r3, [sp, #4]
 8013b36:	9b00      	ldr	r3, [sp, #0]
 8013b38:	444b      	add	r3, r9
 8013b3a:	9307      	str	r3, [sp, #28]
 8013b3c:	9b02      	ldr	r3, [sp, #8]
 8013b3e:	f003 0301 	and.w	r3, r3, #1
 8013b42:	46b8      	mov	r8, r7
 8013b44:	9306      	str	r3, [sp, #24]
 8013b46:	4607      	mov	r7, r0
 8013b48:	9b01      	ldr	r3, [sp, #4]
 8013b4a:	4631      	mov	r1, r6
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	4658      	mov	r0, fp
 8013b50:	9302      	str	r3, [sp, #8]
 8013b52:	f7ff fa69 	bl	8013028 <quorem>
 8013b56:	4603      	mov	r3, r0
 8013b58:	3330      	adds	r3, #48	; 0x30
 8013b5a:	9004      	str	r0, [sp, #16]
 8013b5c:	4641      	mov	r1, r8
 8013b5e:	4658      	mov	r0, fp
 8013b60:	9308      	str	r3, [sp, #32]
 8013b62:	f001 f819 	bl	8014b98 <__mcmp>
 8013b66:	463a      	mov	r2, r7
 8013b68:	4681      	mov	r9, r0
 8013b6a:	4631      	mov	r1, r6
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f001 f82f 	bl	8014bd0 <__mdiff>
 8013b72:	68c2      	ldr	r2, [r0, #12]
 8013b74:	9b08      	ldr	r3, [sp, #32]
 8013b76:	4605      	mov	r5, r0
 8013b78:	bb02      	cbnz	r2, 8013bbc <_dtoa_r+0xa7c>
 8013b7a:	4601      	mov	r1, r0
 8013b7c:	4658      	mov	r0, fp
 8013b7e:	f001 f80b 	bl	8014b98 <__mcmp>
 8013b82:	9b08      	ldr	r3, [sp, #32]
 8013b84:	4602      	mov	r2, r0
 8013b86:	4629      	mov	r1, r5
 8013b88:	4620      	mov	r0, r4
 8013b8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013b8e:	f000 fd7b 	bl	8014688 <_Bfree>
 8013b92:	9b05      	ldr	r3, [sp, #20]
 8013b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b96:	9d01      	ldr	r5, [sp, #4]
 8013b98:	ea43 0102 	orr.w	r1, r3, r2
 8013b9c:	9b06      	ldr	r3, [sp, #24]
 8013b9e:	430b      	orrs	r3, r1
 8013ba0:	9b08      	ldr	r3, [sp, #32]
 8013ba2:	d10d      	bne.n	8013bc0 <_dtoa_r+0xa80>
 8013ba4:	2b39      	cmp	r3, #57	; 0x39
 8013ba6:	d029      	beq.n	8013bfc <_dtoa_r+0xabc>
 8013ba8:	f1b9 0f00 	cmp.w	r9, #0
 8013bac:	dd01      	ble.n	8013bb2 <_dtoa_r+0xa72>
 8013bae:	9b04      	ldr	r3, [sp, #16]
 8013bb0:	3331      	adds	r3, #49	; 0x31
 8013bb2:	9a02      	ldr	r2, [sp, #8]
 8013bb4:	7013      	strb	r3, [r2, #0]
 8013bb6:	e774      	b.n	8013aa2 <_dtoa_r+0x962>
 8013bb8:	4638      	mov	r0, r7
 8013bba:	e7b9      	b.n	8013b30 <_dtoa_r+0x9f0>
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	e7e2      	b.n	8013b86 <_dtoa_r+0xa46>
 8013bc0:	f1b9 0f00 	cmp.w	r9, #0
 8013bc4:	db06      	blt.n	8013bd4 <_dtoa_r+0xa94>
 8013bc6:	9905      	ldr	r1, [sp, #20]
 8013bc8:	ea41 0909 	orr.w	r9, r1, r9
 8013bcc:	9906      	ldr	r1, [sp, #24]
 8013bce:	ea59 0101 	orrs.w	r1, r9, r1
 8013bd2:	d120      	bne.n	8013c16 <_dtoa_r+0xad6>
 8013bd4:	2a00      	cmp	r2, #0
 8013bd6:	ddec      	ble.n	8013bb2 <_dtoa_r+0xa72>
 8013bd8:	4659      	mov	r1, fp
 8013bda:	2201      	movs	r2, #1
 8013bdc:	4620      	mov	r0, r4
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	f000 ff6e 	bl	8014ac0 <__lshift>
 8013be4:	4631      	mov	r1, r6
 8013be6:	4683      	mov	fp, r0
 8013be8:	f000 ffd6 	bl	8014b98 <__mcmp>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	dc02      	bgt.n	8013bf8 <_dtoa_r+0xab8>
 8013bf2:	d1de      	bne.n	8013bb2 <_dtoa_r+0xa72>
 8013bf4:	07da      	lsls	r2, r3, #31
 8013bf6:	d5dc      	bpl.n	8013bb2 <_dtoa_r+0xa72>
 8013bf8:	2b39      	cmp	r3, #57	; 0x39
 8013bfa:	d1d8      	bne.n	8013bae <_dtoa_r+0xa6e>
 8013bfc:	9a02      	ldr	r2, [sp, #8]
 8013bfe:	2339      	movs	r3, #57	; 0x39
 8013c00:	7013      	strb	r3, [r2, #0]
 8013c02:	462b      	mov	r3, r5
 8013c04:	461d      	mov	r5, r3
 8013c06:	3b01      	subs	r3, #1
 8013c08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013c0c:	2a39      	cmp	r2, #57	; 0x39
 8013c0e:	d050      	beq.n	8013cb2 <_dtoa_r+0xb72>
 8013c10:	3201      	adds	r2, #1
 8013c12:	701a      	strb	r2, [r3, #0]
 8013c14:	e745      	b.n	8013aa2 <_dtoa_r+0x962>
 8013c16:	2a00      	cmp	r2, #0
 8013c18:	dd03      	ble.n	8013c22 <_dtoa_r+0xae2>
 8013c1a:	2b39      	cmp	r3, #57	; 0x39
 8013c1c:	d0ee      	beq.n	8013bfc <_dtoa_r+0xabc>
 8013c1e:	3301      	adds	r3, #1
 8013c20:	e7c7      	b.n	8013bb2 <_dtoa_r+0xa72>
 8013c22:	9a01      	ldr	r2, [sp, #4]
 8013c24:	9907      	ldr	r1, [sp, #28]
 8013c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013c2a:	428a      	cmp	r2, r1
 8013c2c:	d02a      	beq.n	8013c84 <_dtoa_r+0xb44>
 8013c2e:	4659      	mov	r1, fp
 8013c30:	2300      	movs	r3, #0
 8013c32:	220a      	movs	r2, #10
 8013c34:	4620      	mov	r0, r4
 8013c36:	f000 fd49 	bl	80146cc <__multadd>
 8013c3a:	45b8      	cmp	r8, r7
 8013c3c:	4683      	mov	fp, r0
 8013c3e:	f04f 0300 	mov.w	r3, #0
 8013c42:	f04f 020a 	mov.w	r2, #10
 8013c46:	4641      	mov	r1, r8
 8013c48:	4620      	mov	r0, r4
 8013c4a:	d107      	bne.n	8013c5c <_dtoa_r+0xb1c>
 8013c4c:	f000 fd3e 	bl	80146cc <__multadd>
 8013c50:	4680      	mov	r8, r0
 8013c52:	4607      	mov	r7, r0
 8013c54:	9b01      	ldr	r3, [sp, #4]
 8013c56:	3301      	adds	r3, #1
 8013c58:	9301      	str	r3, [sp, #4]
 8013c5a:	e775      	b.n	8013b48 <_dtoa_r+0xa08>
 8013c5c:	f000 fd36 	bl	80146cc <__multadd>
 8013c60:	4639      	mov	r1, r7
 8013c62:	4680      	mov	r8, r0
 8013c64:	2300      	movs	r3, #0
 8013c66:	220a      	movs	r2, #10
 8013c68:	4620      	mov	r0, r4
 8013c6a:	f000 fd2f 	bl	80146cc <__multadd>
 8013c6e:	4607      	mov	r7, r0
 8013c70:	e7f0      	b.n	8013c54 <_dtoa_r+0xb14>
 8013c72:	f1b9 0f00 	cmp.w	r9, #0
 8013c76:	9a00      	ldr	r2, [sp, #0]
 8013c78:	bfcc      	ite	gt
 8013c7a:	464d      	movgt	r5, r9
 8013c7c:	2501      	movle	r5, #1
 8013c7e:	4415      	add	r5, r2
 8013c80:	f04f 0800 	mov.w	r8, #0
 8013c84:	4659      	mov	r1, fp
 8013c86:	2201      	movs	r2, #1
 8013c88:	4620      	mov	r0, r4
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	f000 ff18 	bl	8014ac0 <__lshift>
 8013c90:	4631      	mov	r1, r6
 8013c92:	4683      	mov	fp, r0
 8013c94:	f000 ff80 	bl	8014b98 <__mcmp>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	dcb2      	bgt.n	8013c02 <_dtoa_r+0xac2>
 8013c9c:	d102      	bne.n	8013ca4 <_dtoa_r+0xb64>
 8013c9e:	9b01      	ldr	r3, [sp, #4]
 8013ca0:	07db      	lsls	r3, r3, #31
 8013ca2:	d4ae      	bmi.n	8013c02 <_dtoa_r+0xac2>
 8013ca4:	462b      	mov	r3, r5
 8013ca6:	461d      	mov	r5, r3
 8013ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cac:	2a30      	cmp	r2, #48	; 0x30
 8013cae:	d0fa      	beq.n	8013ca6 <_dtoa_r+0xb66>
 8013cb0:	e6f7      	b.n	8013aa2 <_dtoa_r+0x962>
 8013cb2:	9a00      	ldr	r2, [sp, #0]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d1a5      	bne.n	8013c04 <_dtoa_r+0xac4>
 8013cb8:	f10a 0a01 	add.w	sl, sl, #1
 8013cbc:	2331      	movs	r3, #49	; 0x31
 8013cbe:	e779      	b.n	8013bb4 <_dtoa_r+0xa74>
 8013cc0:	4b13      	ldr	r3, [pc, #76]	; (8013d10 <_dtoa_r+0xbd0>)
 8013cc2:	f7ff baaf 	b.w	8013224 <_dtoa_r+0xe4>
 8013cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f47f aa86 	bne.w	80131da <_dtoa_r+0x9a>
 8013cce:	4b11      	ldr	r3, [pc, #68]	; (8013d14 <_dtoa_r+0xbd4>)
 8013cd0:	f7ff baa8 	b.w	8013224 <_dtoa_r+0xe4>
 8013cd4:	f1b9 0f00 	cmp.w	r9, #0
 8013cd8:	dc03      	bgt.n	8013ce2 <_dtoa_r+0xba2>
 8013cda:	9b05      	ldr	r3, [sp, #20]
 8013cdc:	2b02      	cmp	r3, #2
 8013cde:	f73f aec9 	bgt.w	8013a74 <_dtoa_r+0x934>
 8013ce2:	9d00      	ldr	r5, [sp, #0]
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	4658      	mov	r0, fp
 8013ce8:	f7ff f99e 	bl	8013028 <quorem>
 8013cec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8013cf4:	9a00      	ldr	r2, [sp, #0]
 8013cf6:	1aaa      	subs	r2, r5, r2
 8013cf8:	4591      	cmp	r9, r2
 8013cfa:	ddba      	ble.n	8013c72 <_dtoa_r+0xb32>
 8013cfc:	4659      	mov	r1, fp
 8013cfe:	2300      	movs	r3, #0
 8013d00:	220a      	movs	r2, #10
 8013d02:	4620      	mov	r0, r4
 8013d04:	f000 fce2 	bl	80146cc <__multadd>
 8013d08:	4683      	mov	fp, r0
 8013d0a:	e7eb      	b.n	8013ce4 <_dtoa_r+0xba4>
 8013d0c:	08016770 	.word	0x08016770
 8013d10:	08016971 	.word	0x08016971
 8013d14:	080166ed 	.word	0x080166ed

08013d18 <__sflush_r>:
 8013d18:	898a      	ldrh	r2, [r1, #12]
 8013d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1e:	4605      	mov	r5, r0
 8013d20:	0710      	lsls	r0, r2, #28
 8013d22:	460c      	mov	r4, r1
 8013d24:	d458      	bmi.n	8013dd8 <__sflush_r+0xc0>
 8013d26:	684b      	ldr	r3, [r1, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	dc05      	bgt.n	8013d38 <__sflush_r+0x20>
 8013d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	dc02      	bgt.n	8013d38 <__sflush_r+0x20>
 8013d32:	2000      	movs	r0, #0
 8013d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	d0f9      	beq.n	8013d32 <__sflush_r+0x1a>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d44:	682f      	ldr	r7, [r5, #0]
 8013d46:	602b      	str	r3, [r5, #0]
 8013d48:	d032      	beq.n	8013db0 <__sflush_r+0x98>
 8013d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	075a      	lsls	r2, r3, #29
 8013d50:	d505      	bpl.n	8013d5e <__sflush_r+0x46>
 8013d52:	6863      	ldr	r3, [r4, #4]
 8013d54:	1ac0      	subs	r0, r0, r3
 8013d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d58:	b10b      	cbz	r3, 8013d5e <__sflush_r+0x46>
 8013d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d5c:	1ac0      	subs	r0, r0, r3
 8013d5e:	2300      	movs	r3, #0
 8013d60:	4602      	mov	r2, r0
 8013d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d64:	6a21      	ldr	r1, [r4, #32]
 8013d66:	4628      	mov	r0, r5
 8013d68:	47b0      	blx	r6
 8013d6a:	1c43      	adds	r3, r0, #1
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	d106      	bne.n	8013d7e <__sflush_r+0x66>
 8013d70:	6829      	ldr	r1, [r5, #0]
 8013d72:	291d      	cmp	r1, #29
 8013d74:	d82c      	bhi.n	8013dd0 <__sflush_r+0xb8>
 8013d76:	4a2a      	ldr	r2, [pc, #168]	; (8013e20 <__sflush_r+0x108>)
 8013d78:	40ca      	lsrs	r2, r1
 8013d7a:	07d6      	lsls	r6, r2, #31
 8013d7c:	d528      	bpl.n	8013dd0 <__sflush_r+0xb8>
 8013d7e:	2200      	movs	r2, #0
 8013d80:	6062      	str	r2, [r4, #4]
 8013d82:	04d9      	lsls	r1, r3, #19
 8013d84:	6922      	ldr	r2, [r4, #16]
 8013d86:	6022      	str	r2, [r4, #0]
 8013d88:	d504      	bpl.n	8013d94 <__sflush_r+0x7c>
 8013d8a:	1c42      	adds	r2, r0, #1
 8013d8c:	d101      	bne.n	8013d92 <__sflush_r+0x7a>
 8013d8e:	682b      	ldr	r3, [r5, #0]
 8013d90:	b903      	cbnz	r3, 8013d94 <__sflush_r+0x7c>
 8013d92:	6560      	str	r0, [r4, #84]	; 0x54
 8013d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d96:	602f      	str	r7, [r5, #0]
 8013d98:	2900      	cmp	r1, #0
 8013d9a:	d0ca      	beq.n	8013d32 <__sflush_r+0x1a>
 8013d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da0:	4299      	cmp	r1, r3
 8013da2:	d002      	beq.n	8013daa <__sflush_r+0x92>
 8013da4:	4628      	mov	r0, r5
 8013da6:	f7fd f943 	bl	8011030 <_free_r>
 8013daa:	2000      	movs	r0, #0
 8013dac:	6360      	str	r0, [r4, #52]	; 0x34
 8013dae:	e7c1      	b.n	8013d34 <__sflush_r+0x1c>
 8013db0:	6a21      	ldr	r1, [r4, #32]
 8013db2:	2301      	movs	r3, #1
 8013db4:	4628      	mov	r0, r5
 8013db6:	47b0      	blx	r6
 8013db8:	1c41      	adds	r1, r0, #1
 8013dba:	d1c7      	bne.n	8013d4c <__sflush_r+0x34>
 8013dbc:	682b      	ldr	r3, [r5, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d0c4      	beq.n	8013d4c <__sflush_r+0x34>
 8013dc2:	2b1d      	cmp	r3, #29
 8013dc4:	d001      	beq.n	8013dca <__sflush_r+0xb2>
 8013dc6:	2b16      	cmp	r3, #22
 8013dc8:	d101      	bne.n	8013dce <__sflush_r+0xb6>
 8013dca:	602f      	str	r7, [r5, #0]
 8013dcc:	e7b1      	b.n	8013d32 <__sflush_r+0x1a>
 8013dce:	89a3      	ldrh	r3, [r4, #12]
 8013dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dd4:	81a3      	strh	r3, [r4, #12]
 8013dd6:	e7ad      	b.n	8013d34 <__sflush_r+0x1c>
 8013dd8:	690f      	ldr	r7, [r1, #16]
 8013dda:	2f00      	cmp	r7, #0
 8013ddc:	d0a9      	beq.n	8013d32 <__sflush_r+0x1a>
 8013dde:	0793      	lsls	r3, r2, #30
 8013de0:	680e      	ldr	r6, [r1, #0]
 8013de2:	bf08      	it	eq
 8013de4:	694b      	ldreq	r3, [r1, #20]
 8013de6:	600f      	str	r7, [r1, #0]
 8013de8:	bf18      	it	ne
 8013dea:	2300      	movne	r3, #0
 8013dec:	eba6 0807 	sub.w	r8, r6, r7
 8013df0:	608b      	str	r3, [r1, #8]
 8013df2:	f1b8 0f00 	cmp.w	r8, #0
 8013df6:	dd9c      	ble.n	8013d32 <__sflush_r+0x1a>
 8013df8:	6a21      	ldr	r1, [r4, #32]
 8013dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dfc:	4643      	mov	r3, r8
 8013dfe:	463a      	mov	r2, r7
 8013e00:	4628      	mov	r0, r5
 8013e02:	47b0      	blx	r6
 8013e04:	2800      	cmp	r0, #0
 8013e06:	dc06      	bgt.n	8013e16 <__sflush_r+0xfe>
 8013e08:	89a3      	ldrh	r3, [r4, #12]
 8013e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e0e:	81a3      	strh	r3, [r4, #12]
 8013e10:	f04f 30ff 	mov.w	r0, #4294967295
 8013e14:	e78e      	b.n	8013d34 <__sflush_r+0x1c>
 8013e16:	4407      	add	r7, r0
 8013e18:	eba8 0800 	sub.w	r8, r8, r0
 8013e1c:	e7e9      	b.n	8013df2 <__sflush_r+0xda>
 8013e1e:	bf00      	nop
 8013e20:	20400001 	.word	0x20400001

08013e24 <_fflush_r>:
 8013e24:	b538      	push	{r3, r4, r5, lr}
 8013e26:	690b      	ldr	r3, [r1, #16]
 8013e28:	4605      	mov	r5, r0
 8013e2a:	460c      	mov	r4, r1
 8013e2c:	b913      	cbnz	r3, 8013e34 <_fflush_r+0x10>
 8013e2e:	2500      	movs	r5, #0
 8013e30:	4628      	mov	r0, r5
 8013e32:	bd38      	pop	{r3, r4, r5, pc}
 8013e34:	b118      	cbz	r0, 8013e3e <_fflush_r+0x1a>
 8013e36:	6983      	ldr	r3, [r0, #24]
 8013e38:	b90b      	cbnz	r3, 8013e3e <_fflush_r+0x1a>
 8013e3a:	f7fc fff3 	bl	8010e24 <__sinit>
 8013e3e:	4b14      	ldr	r3, [pc, #80]	; (8013e90 <_fflush_r+0x6c>)
 8013e40:	429c      	cmp	r4, r3
 8013e42:	d11b      	bne.n	8013e7c <_fflush_r+0x58>
 8013e44:	686c      	ldr	r4, [r5, #4]
 8013e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d0ef      	beq.n	8013e2e <_fflush_r+0xa>
 8013e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e50:	07d0      	lsls	r0, r2, #31
 8013e52:	d404      	bmi.n	8013e5e <_fflush_r+0x3a>
 8013e54:	0599      	lsls	r1, r3, #22
 8013e56:	d402      	bmi.n	8013e5e <_fflush_r+0x3a>
 8013e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e5a:	f7fd f8a6 	bl	8010faa <__retarget_lock_acquire_recursive>
 8013e5e:	4628      	mov	r0, r5
 8013e60:	4621      	mov	r1, r4
 8013e62:	f7ff ff59 	bl	8013d18 <__sflush_r>
 8013e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e68:	07da      	lsls	r2, r3, #31
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	d4e0      	bmi.n	8013e30 <_fflush_r+0xc>
 8013e6e:	89a3      	ldrh	r3, [r4, #12]
 8013e70:	059b      	lsls	r3, r3, #22
 8013e72:	d4dd      	bmi.n	8013e30 <_fflush_r+0xc>
 8013e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e76:	f7fd f899 	bl	8010fac <__retarget_lock_release_recursive>
 8013e7a:	e7d9      	b.n	8013e30 <_fflush_r+0xc>
 8013e7c:	4b05      	ldr	r3, [pc, #20]	; (8013e94 <_fflush_r+0x70>)
 8013e7e:	429c      	cmp	r4, r3
 8013e80:	d101      	bne.n	8013e86 <_fflush_r+0x62>
 8013e82:	68ac      	ldr	r4, [r5, #8]
 8013e84:	e7df      	b.n	8013e46 <_fflush_r+0x22>
 8013e86:	4b04      	ldr	r3, [pc, #16]	; (8013e98 <_fflush_r+0x74>)
 8013e88:	429c      	cmp	r4, r3
 8013e8a:	bf08      	it	eq
 8013e8c:	68ec      	ldreq	r4, [r5, #12]
 8013e8e:	e7da      	b.n	8013e46 <_fflush_r+0x22>
 8013e90:	080164e4 	.word	0x080164e4
 8013e94:	08016504 	.word	0x08016504
 8013e98:	080164c4 	.word	0x080164c4

08013e9c <fiprintf>:
 8013e9c:	b40e      	push	{r1, r2, r3}
 8013e9e:	b503      	push	{r0, r1, lr}
 8013ea0:	4601      	mov	r1, r0
 8013ea2:	ab03      	add	r3, sp, #12
 8013ea4:	4805      	ldr	r0, [pc, #20]	; (8013ebc <fiprintf+0x20>)
 8013ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eaa:	6800      	ldr	r0, [r0, #0]
 8013eac:	9301      	str	r3, [sp, #4]
 8013eae:	f001 fbf3 	bl	8015698 <_vfiprintf_r>
 8013eb2:	b002      	add	sp, #8
 8013eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013eb8:	b003      	add	sp, #12
 8013eba:	4770      	bx	lr
 8013ebc:	20000188 	.word	0x20000188

08013ec0 <rshift>:
 8013ec0:	6903      	ldr	r3, [r0, #16]
 8013ec2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013ec6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013ece:	f100 0414 	add.w	r4, r0, #20
 8013ed2:	dd45      	ble.n	8013f60 <rshift+0xa0>
 8013ed4:	f011 011f 	ands.w	r1, r1, #31
 8013ed8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013edc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ee0:	d10c      	bne.n	8013efc <rshift+0x3c>
 8013ee2:	f100 0710 	add.w	r7, r0, #16
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	42b1      	cmp	r1, r6
 8013eea:	d334      	bcc.n	8013f56 <rshift+0x96>
 8013eec:	1a9b      	subs	r3, r3, r2
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	1eea      	subs	r2, r5, #3
 8013ef2:	4296      	cmp	r6, r2
 8013ef4:	bf38      	it	cc
 8013ef6:	2300      	movcc	r3, #0
 8013ef8:	4423      	add	r3, r4
 8013efa:	e015      	b.n	8013f28 <rshift+0x68>
 8013efc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013f00:	f1c1 0820 	rsb	r8, r1, #32
 8013f04:	40cf      	lsrs	r7, r1
 8013f06:	f105 0e04 	add.w	lr, r5, #4
 8013f0a:	46a1      	mov	r9, r4
 8013f0c:	4576      	cmp	r6, lr
 8013f0e:	46f4      	mov	ip, lr
 8013f10:	d815      	bhi.n	8013f3e <rshift+0x7e>
 8013f12:	1a9b      	subs	r3, r3, r2
 8013f14:	009a      	lsls	r2, r3, #2
 8013f16:	3a04      	subs	r2, #4
 8013f18:	3501      	adds	r5, #1
 8013f1a:	42ae      	cmp	r6, r5
 8013f1c:	bf38      	it	cc
 8013f1e:	2200      	movcc	r2, #0
 8013f20:	18a3      	adds	r3, r4, r2
 8013f22:	50a7      	str	r7, [r4, r2]
 8013f24:	b107      	cbz	r7, 8013f28 <rshift+0x68>
 8013f26:	3304      	adds	r3, #4
 8013f28:	1b1a      	subs	r2, r3, r4
 8013f2a:	42a3      	cmp	r3, r4
 8013f2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013f30:	bf08      	it	eq
 8013f32:	2300      	moveq	r3, #0
 8013f34:	6102      	str	r2, [r0, #16]
 8013f36:	bf08      	it	eq
 8013f38:	6143      	streq	r3, [r0, #20]
 8013f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f3e:	f8dc c000 	ldr.w	ip, [ip]
 8013f42:	fa0c fc08 	lsl.w	ip, ip, r8
 8013f46:	ea4c 0707 	orr.w	r7, ip, r7
 8013f4a:	f849 7b04 	str.w	r7, [r9], #4
 8013f4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f52:	40cf      	lsrs	r7, r1
 8013f54:	e7da      	b.n	8013f0c <rshift+0x4c>
 8013f56:	f851 cb04 	ldr.w	ip, [r1], #4
 8013f5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8013f5e:	e7c3      	b.n	8013ee8 <rshift+0x28>
 8013f60:	4623      	mov	r3, r4
 8013f62:	e7e1      	b.n	8013f28 <rshift+0x68>

08013f64 <__hexdig_fun>:
 8013f64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013f68:	2b09      	cmp	r3, #9
 8013f6a:	d802      	bhi.n	8013f72 <__hexdig_fun+0xe>
 8013f6c:	3820      	subs	r0, #32
 8013f6e:	b2c0      	uxtb	r0, r0
 8013f70:	4770      	bx	lr
 8013f72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013f76:	2b05      	cmp	r3, #5
 8013f78:	d801      	bhi.n	8013f7e <__hexdig_fun+0x1a>
 8013f7a:	3847      	subs	r0, #71	; 0x47
 8013f7c:	e7f7      	b.n	8013f6e <__hexdig_fun+0xa>
 8013f7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013f82:	2b05      	cmp	r3, #5
 8013f84:	d801      	bhi.n	8013f8a <__hexdig_fun+0x26>
 8013f86:	3827      	subs	r0, #39	; 0x27
 8013f88:	e7f1      	b.n	8013f6e <__hexdig_fun+0xa>
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	4770      	bx	lr
	...

08013f90 <__gethex>:
 8013f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f94:	ed2d 8b02 	vpush	{d8}
 8013f98:	b089      	sub	sp, #36	; 0x24
 8013f9a:	ee08 0a10 	vmov	s16, r0
 8013f9e:	9304      	str	r3, [sp, #16]
 8013fa0:	4bbc      	ldr	r3, [pc, #752]	; (8014294 <__gethex+0x304>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	468b      	mov	fp, r1
 8013faa:	4690      	mov	r8, r2
 8013fac:	f7ec f920 	bl	80001f0 <strlen>
 8013fb0:	9b01      	ldr	r3, [sp, #4]
 8013fb2:	f8db 2000 	ldr.w	r2, [fp]
 8013fb6:	4403      	add	r3, r0
 8013fb8:	4682      	mov	sl, r0
 8013fba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013fbe:	9305      	str	r3, [sp, #20]
 8013fc0:	1c93      	adds	r3, r2, #2
 8013fc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013fc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013fca:	32fe      	adds	r2, #254	; 0xfe
 8013fcc:	18d1      	adds	r1, r2, r3
 8013fce:	461f      	mov	r7, r3
 8013fd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013fd4:	9100      	str	r1, [sp, #0]
 8013fd6:	2830      	cmp	r0, #48	; 0x30
 8013fd8:	d0f8      	beq.n	8013fcc <__gethex+0x3c>
 8013fda:	f7ff ffc3 	bl	8013f64 <__hexdig_fun>
 8013fde:	4604      	mov	r4, r0
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d13a      	bne.n	801405a <__gethex+0xca>
 8013fe4:	9901      	ldr	r1, [sp, #4]
 8013fe6:	4652      	mov	r2, sl
 8013fe8:	4638      	mov	r0, r7
 8013fea:	f7fe f89a 	bl	8012122 <strncmp>
 8013fee:	4605      	mov	r5, r0
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d168      	bne.n	80140c6 <__gethex+0x136>
 8013ff4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013ff8:	eb07 060a 	add.w	r6, r7, sl
 8013ffc:	f7ff ffb2 	bl	8013f64 <__hexdig_fun>
 8014000:	2800      	cmp	r0, #0
 8014002:	d062      	beq.n	80140ca <__gethex+0x13a>
 8014004:	4633      	mov	r3, r6
 8014006:	7818      	ldrb	r0, [r3, #0]
 8014008:	2830      	cmp	r0, #48	; 0x30
 801400a:	461f      	mov	r7, r3
 801400c:	f103 0301 	add.w	r3, r3, #1
 8014010:	d0f9      	beq.n	8014006 <__gethex+0x76>
 8014012:	f7ff ffa7 	bl	8013f64 <__hexdig_fun>
 8014016:	2301      	movs	r3, #1
 8014018:	fab0 f480 	clz	r4, r0
 801401c:	0964      	lsrs	r4, r4, #5
 801401e:	4635      	mov	r5, r6
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	463a      	mov	r2, r7
 8014024:	4616      	mov	r6, r2
 8014026:	3201      	adds	r2, #1
 8014028:	7830      	ldrb	r0, [r6, #0]
 801402a:	f7ff ff9b 	bl	8013f64 <__hexdig_fun>
 801402e:	2800      	cmp	r0, #0
 8014030:	d1f8      	bne.n	8014024 <__gethex+0x94>
 8014032:	9901      	ldr	r1, [sp, #4]
 8014034:	4652      	mov	r2, sl
 8014036:	4630      	mov	r0, r6
 8014038:	f7fe f873 	bl	8012122 <strncmp>
 801403c:	b980      	cbnz	r0, 8014060 <__gethex+0xd0>
 801403e:	b94d      	cbnz	r5, 8014054 <__gethex+0xc4>
 8014040:	eb06 050a 	add.w	r5, r6, sl
 8014044:	462a      	mov	r2, r5
 8014046:	4616      	mov	r6, r2
 8014048:	3201      	adds	r2, #1
 801404a:	7830      	ldrb	r0, [r6, #0]
 801404c:	f7ff ff8a 	bl	8013f64 <__hexdig_fun>
 8014050:	2800      	cmp	r0, #0
 8014052:	d1f8      	bne.n	8014046 <__gethex+0xb6>
 8014054:	1bad      	subs	r5, r5, r6
 8014056:	00ad      	lsls	r5, r5, #2
 8014058:	e004      	b.n	8014064 <__gethex+0xd4>
 801405a:	2400      	movs	r4, #0
 801405c:	4625      	mov	r5, r4
 801405e:	e7e0      	b.n	8014022 <__gethex+0x92>
 8014060:	2d00      	cmp	r5, #0
 8014062:	d1f7      	bne.n	8014054 <__gethex+0xc4>
 8014064:	7833      	ldrb	r3, [r6, #0]
 8014066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801406a:	2b50      	cmp	r3, #80	; 0x50
 801406c:	d13b      	bne.n	80140e6 <__gethex+0x156>
 801406e:	7873      	ldrb	r3, [r6, #1]
 8014070:	2b2b      	cmp	r3, #43	; 0x2b
 8014072:	d02c      	beq.n	80140ce <__gethex+0x13e>
 8014074:	2b2d      	cmp	r3, #45	; 0x2d
 8014076:	d02e      	beq.n	80140d6 <__gethex+0x146>
 8014078:	1c71      	adds	r1, r6, #1
 801407a:	f04f 0900 	mov.w	r9, #0
 801407e:	7808      	ldrb	r0, [r1, #0]
 8014080:	f7ff ff70 	bl	8013f64 <__hexdig_fun>
 8014084:	1e43      	subs	r3, r0, #1
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b18      	cmp	r3, #24
 801408a:	d82c      	bhi.n	80140e6 <__gethex+0x156>
 801408c:	f1a0 0210 	sub.w	r2, r0, #16
 8014090:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014094:	f7ff ff66 	bl	8013f64 <__hexdig_fun>
 8014098:	1e43      	subs	r3, r0, #1
 801409a:	b2db      	uxtb	r3, r3
 801409c:	2b18      	cmp	r3, #24
 801409e:	d91d      	bls.n	80140dc <__gethex+0x14c>
 80140a0:	f1b9 0f00 	cmp.w	r9, #0
 80140a4:	d000      	beq.n	80140a8 <__gethex+0x118>
 80140a6:	4252      	negs	r2, r2
 80140a8:	4415      	add	r5, r2
 80140aa:	f8cb 1000 	str.w	r1, [fp]
 80140ae:	b1e4      	cbz	r4, 80140ea <__gethex+0x15a>
 80140b0:	9b00      	ldr	r3, [sp, #0]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	bf14      	ite	ne
 80140b6:	2700      	movne	r7, #0
 80140b8:	2706      	moveq	r7, #6
 80140ba:	4638      	mov	r0, r7
 80140bc:	b009      	add	sp, #36	; 0x24
 80140be:	ecbd 8b02 	vpop	{d8}
 80140c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c6:	463e      	mov	r6, r7
 80140c8:	4625      	mov	r5, r4
 80140ca:	2401      	movs	r4, #1
 80140cc:	e7ca      	b.n	8014064 <__gethex+0xd4>
 80140ce:	f04f 0900 	mov.w	r9, #0
 80140d2:	1cb1      	adds	r1, r6, #2
 80140d4:	e7d3      	b.n	801407e <__gethex+0xee>
 80140d6:	f04f 0901 	mov.w	r9, #1
 80140da:	e7fa      	b.n	80140d2 <__gethex+0x142>
 80140dc:	230a      	movs	r3, #10
 80140de:	fb03 0202 	mla	r2, r3, r2, r0
 80140e2:	3a10      	subs	r2, #16
 80140e4:	e7d4      	b.n	8014090 <__gethex+0x100>
 80140e6:	4631      	mov	r1, r6
 80140e8:	e7df      	b.n	80140aa <__gethex+0x11a>
 80140ea:	1bf3      	subs	r3, r6, r7
 80140ec:	3b01      	subs	r3, #1
 80140ee:	4621      	mov	r1, r4
 80140f0:	2b07      	cmp	r3, #7
 80140f2:	dc0b      	bgt.n	801410c <__gethex+0x17c>
 80140f4:	ee18 0a10 	vmov	r0, s16
 80140f8:	f000 fa86 	bl	8014608 <_Balloc>
 80140fc:	4604      	mov	r4, r0
 80140fe:	b940      	cbnz	r0, 8014112 <__gethex+0x182>
 8014100:	4b65      	ldr	r3, [pc, #404]	; (8014298 <__gethex+0x308>)
 8014102:	4602      	mov	r2, r0
 8014104:	21de      	movs	r1, #222	; 0xde
 8014106:	4865      	ldr	r0, [pc, #404]	; (801429c <__gethex+0x30c>)
 8014108:	f7fe ff60 	bl	8012fcc <__assert_func>
 801410c:	3101      	adds	r1, #1
 801410e:	105b      	asrs	r3, r3, #1
 8014110:	e7ee      	b.n	80140f0 <__gethex+0x160>
 8014112:	f100 0914 	add.w	r9, r0, #20
 8014116:	f04f 0b00 	mov.w	fp, #0
 801411a:	f1ca 0301 	rsb	r3, sl, #1
 801411e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014122:	f8cd b000 	str.w	fp, [sp]
 8014126:	9306      	str	r3, [sp, #24]
 8014128:	42b7      	cmp	r7, r6
 801412a:	d340      	bcc.n	80141ae <__gethex+0x21e>
 801412c:	9802      	ldr	r0, [sp, #8]
 801412e:	9b00      	ldr	r3, [sp, #0]
 8014130:	f840 3b04 	str.w	r3, [r0], #4
 8014134:	eba0 0009 	sub.w	r0, r0, r9
 8014138:	1080      	asrs	r0, r0, #2
 801413a:	0146      	lsls	r6, r0, #5
 801413c:	6120      	str	r0, [r4, #16]
 801413e:	4618      	mov	r0, r3
 8014140:	f000 fb58 	bl	80147f4 <__hi0bits>
 8014144:	1a30      	subs	r0, r6, r0
 8014146:	f8d8 6000 	ldr.w	r6, [r8]
 801414a:	42b0      	cmp	r0, r6
 801414c:	dd63      	ble.n	8014216 <__gethex+0x286>
 801414e:	1b87      	subs	r7, r0, r6
 8014150:	4639      	mov	r1, r7
 8014152:	4620      	mov	r0, r4
 8014154:	f000 fef2 	bl	8014f3c <__any_on>
 8014158:	4682      	mov	sl, r0
 801415a:	b1a8      	cbz	r0, 8014188 <__gethex+0x1f8>
 801415c:	1e7b      	subs	r3, r7, #1
 801415e:	1159      	asrs	r1, r3, #5
 8014160:	f003 021f 	and.w	r2, r3, #31
 8014164:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014168:	f04f 0a01 	mov.w	sl, #1
 801416c:	fa0a f202 	lsl.w	r2, sl, r2
 8014170:	420a      	tst	r2, r1
 8014172:	d009      	beq.n	8014188 <__gethex+0x1f8>
 8014174:	4553      	cmp	r3, sl
 8014176:	dd05      	ble.n	8014184 <__gethex+0x1f4>
 8014178:	1eb9      	subs	r1, r7, #2
 801417a:	4620      	mov	r0, r4
 801417c:	f000 fede 	bl	8014f3c <__any_on>
 8014180:	2800      	cmp	r0, #0
 8014182:	d145      	bne.n	8014210 <__gethex+0x280>
 8014184:	f04f 0a02 	mov.w	sl, #2
 8014188:	4639      	mov	r1, r7
 801418a:	4620      	mov	r0, r4
 801418c:	f7ff fe98 	bl	8013ec0 <rshift>
 8014190:	443d      	add	r5, r7
 8014192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014196:	42ab      	cmp	r3, r5
 8014198:	da4c      	bge.n	8014234 <__gethex+0x2a4>
 801419a:	ee18 0a10 	vmov	r0, s16
 801419e:	4621      	mov	r1, r4
 80141a0:	f000 fa72 	bl	8014688 <_Bfree>
 80141a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80141a6:	2300      	movs	r3, #0
 80141a8:	6013      	str	r3, [r2, #0]
 80141aa:	27a3      	movs	r7, #163	; 0xa3
 80141ac:	e785      	b.n	80140ba <__gethex+0x12a>
 80141ae:	1e73      	subs	r3, r6, #1
 80141b0:	9a05      	ldr	r2, [sp, #20]
 80141b2:	9303      	str	r3, [sp, #12]
 80141b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d019      	beq.n	80141f0 <__gethex+0x260>
 80141bc:	f1bb 0f20 	cmp.w	fp, #32
 80141c0:	d107      	bne.n	80141d2 <__gethex+0x242>
 80141c2:	9b02      	ldr	r3, [sp, #8]
 80141c4:	9a00      	ldr	r2, [sp, #0]
 80141c6:	f843 2b04 	str.w	r2, [r3], #4
 80141ca:	9302      	str	r3, [sp, #8]
 80141cc:	2300      	movs	r3, #0
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	469b      	mov	fp, r3
 80141d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80141d6:	f7ff fec5 	bl	8013f64 <__hexdig_fun>
 80141da:	9b00      	ldr	r3, [sp, #0]
 80141dc:	f000 000f 	and.w	r0, r0, #15
 80141e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80141e4:	4303      	orrs	r3, r0
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	f10b 0b04 	add.w	fp, fp, #4
 80141ec:	9b03      	ldr	r3, [sp, #12]
 80141ee:	e00d      	b.n	801420c <__gethex+0x27c>
 80141f0:	9b03      	ldr	r3, [sp, #12]
 80141f2:	9a06      	ldr	r2, [sp, #24]
 80141f4:	4413      	add	r3, r2
 80141f6:	42bb      	cmp	r3, r7
 80141f8:	d3e0      	bcc.n	80141bc <__gethex+0x22c>
 80141fa:	4618      	mov	r0, r3
 80141fc:	9901      	ldr	r1, [sp, #4]
 80141fe:	9307      	str	r3, [sp, #28]
 8014200:	4652      	mov	r2, sl
 8014202:	f7fd ff8e 	bl	8012122 <strncmp>
 8014206:	9b07      	ldr	r3, [sp, #28]
 8014208:	2800      	cmp	r0, #0
 801420a:	d1d7      	bne.n	80141bc <__gethex+0x22c>
 801420c:	461e      	mov	r6, r3
 801420e:	e78b      	b.n	8014128 <__gethex+0x198>
 8014210:	f04f 0a03 	mov.w	sl, #3
 8014214:	e7b8      	b.n	8014188 <__gethex+0x1f8>
 8014216:	da0a      	bge.n	801422e <__gethex+0x29e>
 8014218:	1a37      	subs	r7, r6, r0
 801421a:	4621      	mov	r1, r4
 801421c:	ee18 0a10 	vmov	r0, s16
 8014220:	463a      	mov	r2, r7
 8014222:	f000 fc4d 	bl	8014ac0 <__lshift>
 8014226:	1bed      	subs	r5, r5, r7
 8014228:	4604      	mov	r4, r0
 801422a:	f100 0914 	add.w	r9, r0, #20
 801422e:	f04f 0a00 	mov.w	sl, #0
 8014232:	e7ae      	b.n	8014192 <__gethex+0x202>
 8014234:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014238:	42a8      	cmp	r0, r5
 801423a:	dd72      	ble.n	8014322 <__gethex+0x392>
 801423c:	1b45      	subs	r5, r0, r5
 801423e:	42ae      	cmp	r6, r5
 8014240:	dc36      	bgt.n	80142b0 <__gethex+0x320>
 8014242:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014246:	2b02      	cmp	r3, #2
 8014248:	d02a      	beq.n	80142a0 <__gethex+0x310>
 801424a:	2b03      	cmp	r3, #3
 801424c:	d02c      	beq.n	80142a8 <__gethex+0x318>
 801424e:	2b01      	cmp	r3, #1
 8014250:	d115      	bne.n	801427e <__gethex+0x2ee>
 8014252:	42ae      	cmp	r6, r5
 8014254:	d113      	bne.n	801427e <__gethex+0x2ee>
 8014256:	2e01      	cmp	r6, #1
 8014258:	d10b      	bne.n	8014272 <__gethex+0x2e2>
 801425a:	9a04      	ldr	r2, [sp, #16]
 801425c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014260:	6013      	str	r3, [r2, #0]
 8014262:	2301      	movs	r3, #1
 8014264:	6123      	str	r3, [r4, #16]
 8014266:	f8c9 3000 	str.w	r3, [r9]
 801426a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801426c:	2762      	movs	r7, #98	; 0x62
 801426e:	601c      	str	r4, [r3, #0]
 8014270:	e723      	b.n	80140ba <__gethex+0x12a>
 8014272:	1e71      	subs	r1, r6, #1
 8014274:	4620      	mov	r0, r4
 8014276:	f000 fe61 	bl	8014f3c <__any_on>
 801427a:	2800      	cmp	r0, #0
 801427c:	d1ed      	bne.n	801425a <__gethex+0x2ca>
 801427e:	ee18 0a10 	vmov	r0, s16
 8014282:	4621      	mov	r1, r4
 8014284:	f000 fa00 	bl	8014688 <_Bfree>
 8014288:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801428a:	2300      	movs	r3, #0
 801428c:	6013      	str	r3, [r2, #0]
 801428e:	2750      	movs	r7, #80	; 0x50
 8014290:	e713      	b.n	80140ba <__gethex+0x12a>
 8014292:	bf00      	nop
 8014294:	080167ec 	.word	0x080167ec
 8014298:	08016770 	.word	0x08016770
 801429c:	08016781 	.word	0x08016781
 80142a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1eb      	bne.n	801427e <__gethex+0x2ee>
 80142a6:	e7d8      	b.n	801425a <__gethex+0x2ca>
 80142a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1d5      	bne.n	801425a <__gethex+0x2ca>
 80142ae:	e7e6      	b.n	801427e <__gethex+0x2ee>
 80142b0:	1e6f      	subs	r7, r5, #1
 80142b2:	f1ba 0f00 	cmp.w	sl, #0
 80142b6:	d131      	bne.n	801431c <__gethex+0x38c>
 80142b8:	b127      	cbz	r7, 80142c4 <__gethex+0x334>
 80142ba:	4639      	mov	r1, r7
 80142bc:	4620      	mov	r0, r4
 80142be:	f000 fe3d 	bl	8014f3c <__any_on>
 80142c2:	4682      	mov	sl, r0
 80142c4:	117b      	asrs	r3, r7, #5
 80142c6:	2101      	movs	r1, #1
 80142c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80142cc:	f007 071f 	and.w	r7, r7, #31
 80142d0:	fa01 f707 	lsl.w	r7, r1, r7
 80142d4:	421f      	tst	r7, r3
 80142d6:	4629      	mov	r1, r5
 80142d8:	4620      	mov	r0, r4
 80142da:	bf18      	it	ne
 80142dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80142e0:	1b76      	subs	r6, r6, r5
 80142e2:	f7ff fded 	bl	8013ec0 <rshift>
 80142e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80142ea:	2702      	movs	r7, #2
 80142ec:	f1ba 0f00 	cmp.w	sl, #0
 80142f0:	d048      	beq.n	8014384 <__gethex+0x3f4>
 80142f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80142f6:	2b02      	cmp	r3, #2
 80142f8:	d015      	beq.n	8014326 <__gethex+0x396>
 80142fa:	2b03      	cmp	r3, #3
 80142fc:	d017      	beq.n	801432e <__gethex+0x39e>
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d109      	bne.n	8014316 <__gethex+0x386>
 8014302:	f01a 0f02 	tst.w	sl, #2
 8014306:	d006      	beq.n	8014316 <__gethex+0x386>
 8014308:	f8d9 0000 	ldr.w	r0, [r9]
 801430c:	ea4a 0a00 	orr.w	sl, sl, r0
 8014310:	f01a 0f01 	tst.w	sl, #1
 8014314:	d10e      	bne.n	8014334 <__gethex+0x3a4>
 8014316:	f047 0710 	orr.w	r7, r7, #16
 801431a:	e033      	b.n	8014384 <__gethex+0x3f4>
 801431c:	f04f 0a01 	mov.w	sl, #1
 8014320:	e7d0      	b.n	80142c4 <__gethex+0x334>
 8014322:	2701      	movs	r7, #1
 8014324:	e7e2      	b.n	80142ec <__gethex+0x35c>
 8014326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014328:	f1c3 0301 	rsb	r3, r3, #1
 801432c:	9315      	str	r3, [sp, #84]	; 0x54
 801432e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014330:	2b00      	cmp	r3, #0
 8014332:	d0f0      	beq.n	8014316 <__gethex+0x386>
 8014334:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014338:	f104 0314 	add.w	r3, r4, #20
 801433c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014340:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014344:	f04f 0c00 	mov.w	ip, #0
 8014348:	4618      	mov	r0, r3
 801434a:	f853 2b04 	ldr.w	r2, [r3], #4
 801434e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014352:	d01c      	beq.n	801438e <__gethex+0x3fe>
 8014354:	3201      	adds	r2, #1
 8014356:	6002      	str	r2, [r0, #0]
 8014358:	2f02      	cmp	r7, #2
 801435a:	f104 0314 	add.w	r3, r4, #20
 801435e:	d13f      	bne.n	80143e0 <__gethex+0x450>
 8014360:	f8d8 2000 	ldr.w	r2, [r8]
 8014364:	3a01      	subs	r2, #1
 8014366:	42b2      	cmp	r2, r6
 8014368:	d10a      	bne.n	8014380 <__gethex+0x3f0>
 801436a:	1171      	asrs	r1, r6, #5
 801436c:	2201      	movs	r2, #1
 801436e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014372:	f006 061f 	and.w	r6, r6, #31
 8014376:	fa02 f606 	lsl.w	r6, r2, r6
 801437a:	421e      	tst	r6, r3
 801437c:	bf18      	it	ne
 801437e:	4617      	movne	r7, r2
 8014380:	f047 0720 	orr.w	r7, r7, #32
 8014384:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014386:	601c      	str	r4, [r3, #0]
 8014388:	9b04      	ldr	r3, [sp, #16]
 801438a:	601d      	str	r5, [r3, #0]
 801438c:	e695      	b.n	80140ba <__gethex+0x12a>
 801438e:	4299      	cmp	r1, r3
 8014390:	f843 cc04 	str.w	ip, [r3, #-4]
 8014394:	d8d8      	bhi.n	8014348 <__gethex+0x3b8>
 8014396:	68a3      	ldr	r3, [r4, #8]
 8014398:	459b      	cmp	fp, r3
 801439a:	db19      	blt.n	80143d0 <__gethex+0x440>
 801439c:	6861      	ldr	r1, [r4, #4]
 801439e:	ee18 0a10 	vmov	r0, s16
 80143a2:	3101      	adds	r1, #1
 80143a4:	f000 f930 	bl	8014608 <_Balloc>
 80143a8:	4681      	mov	r9, r0
 80143aa:	b918      	cbnz	r0, 80143b4 <__gethex+0x424>
 80143ac:	4b1a      	ldr	r3, [pc, #104]	; (8014418 <__gethex+0x488>)
 80143ae:	4602      	mov	r2, r0
 80143b0:	2184      	movs	r1, #132	; 0x84
 80143b2:	e6a8      	b.n	8014106 <__gethex+0x176>
 80143b4:	6922      	ldr	r2, [r4, #16]
 80143b6:	3202      	adds	r2, #2
 80143b8:	f104 010c 	add.w	r1, r4, #12
 80143bc:	0092      	lsls	r2, r2, #2
 80143be:	300c      	adds	r0, #12
 80143c0:	f7fc fe06 	bl	8010fd0 <memcpy>
 80143c4:	4621      	mov	r1, r4
 80143c6:	ee18 0a10 	vmov	r0, s16
 80143ca:	f000 f95d 	bl	8014688 <_Bfree>
 80143ce:	464c      	mov	r4, r9
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	1c5a      	adds	r2, r3, #1
 80143d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80143d8:	6122      	str	r2, [r4, #16]
 80143da:	2201      	movs	r2, #1
 80143dc:	615a      	str	r2, [r3, #20]
 80143de:	e7bb      	b.n	8014358 <__gethex+0x3c8>
 80143e0:	6922      	ldr	r2, [r4, #16]
 80143e2:	455a      	cmp	r2, fp
 80143e4:	dd0b      	ble.n	80143fe <__gethex+0x46e>
 80143e6:	2101      	movs	r1, #1
 80143e8:	4620      	mov	r0, r4
 80143ea:	f7ff fd69 	bl	8013ec0 <rshift>
 80143ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143f2:	3501      	adds	r5, #1
 80143f4:	42ab      	cmp	r3, r5
 80143f6:	f6ff aed0 	blt.w	801419a <__gethex+0x20a>
 80143fa:	2701      	movs	r7, #1
 80143fc:	e7c0      	b.n	8014380 <__gethex+0x3f0>
 80143fe:	f016 061f 	ands.w	r6, r6, #31
 8014402:	d0fa      	beq.n	80143fa <__gethex+0x46a>
 8014404:	449a      	add	sl, r3
 8014406:	f1c6 0620 	rsb	r6, r6, #32
 801440a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801440e:	f000 f9f1 	bl	80147f4 <__hi0bits>
 8014412:	42b0      	cmp	r0, r6
 8014414:	dbe7      	blt.n	80143e6 <__gethex+0x456>
 8014416:	e7f0      	b.n	80143fa <__gethex+0x46a>
 8014418:	08016770 	.word	0x08016770

0801441c <L_shift>:
 801441c:	f1c2 0208 	rsb	r2, r2, #8
 8014420:	0092      	lsls	r2, r2, #2
 8014422:	b570      	push	{r4, r5, r6, lr}
 8014424:	f1c2 0620 	rsb	r6, r2, #32
 8014428:	6843      	ldr	r3, [r0, #4]
 801442a:	6804      	ldr	r4, [r0, #0]
 801442c:	fa03 f506 	lsl.w	r5, r3, r6
 8014430:	432c      	orrs	r4, r5
 8014432:	40d3      	lsrs	r3, r2
 8014434:	6004      	str	r4, [r0, #0]
 8014436:	f840 3f04 	str.w	r3, [r0, #4]!
 801443a:	4288      	cmp	r0, r1
 801443c:	d3f4      	bcc.n	8014428 <L_shift+0xc>
 801443e:	bd70      	pop	{r4, r5, r6, pc}

08014440 <__match>:
 8014440:	b530      	push	{r4, r5, lr}
 8014442:	6803      	ldr	r3, [r0, #0]
 8014444:	3301      	adds	r3, #1
 8014446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801444a:	b914      	cbnz	r4, 8014452 <__match+0x12>
 801444c:	6003      	str	r3, [r0, #0]
 801444e:	2001      	movs	r0, #1
 8014450:	bd30      	pop	{r4, r5, pc}
 8014452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801445a:	2d19      	cmp	r5, #25
 801445c:	bf98      	it	ls
 801445e:	3220      	addls	r2, #32
 8014460:	42a2      	cmp	r2, r4
 8014462:	d0f0      	beq.n	8014446 <__match+0x6>
 8014464:	2000      	movs	r0, #0
 8014466:	e7f3      	b.n	8014450 <__match+0x10>

08014468 <__hexnan>:
 8014468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	680b      	ldr	r3, [r1, #0]
 801446e:	6801      	ldr	r1, [r0, #0]
 8014470:	115e      	asrs	r6, r3, #5
 8014472:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014476:	f013 031f 	ands.w	r3, r3, #31
 801447a:	b087      	sub	sp, #28
 801447c:	bf18      	it	ne
 801447e:	3604      	addne	r6, #4
 8014480:	2500      	movs	r5, #0
 8014482:	1f37      	subs	r7, r6, #4
 8014484:	4682      	mov	sl, r0
 8014486:	4690      	mov	r8, r2
 8014488:	9301      	str	r3, [sp, #4]
 801448a:	f846 5c04 	str.w	r5, [r6, #-4]
 801448e:	46b9      	mov	r9, r7
 8014490:	463c      	mov	r4, r7
 8014492:	9502      	str	r5, [sp, #8]
 8014494:	46ab      	mov	fp, r5
 8014496:	784a      	ldrb	r2, [r1, #1]
 8014498:	1c4b      	adds	r3, r1, #1
 801449a:	9303      	str	r3, [sp, #12]
 801449c:	b342      	cbz	r2, 80144f0 <__hexnan+0x88>
 801449e:	4610      	mov	r0, r2
 80144a0:	9105      	str	r1, [sp, #20]
 80144a2:	9204      	str	r2, [sp, #16]
 80144a4:	f7ff fd5e 	bl	8013f64 <__hexdig_fun>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	d14f      	bne.n	801454c <__hexnan+0xe4>
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	9905      	ldr	r1, [sp, #20]
 80144b0:	2a20      	cmp	r2, #32
 80144b2:	d818      	bhi.n	80144e6 <__hexnan+0x7e>
 80144b4:	9b02      	ldr	r3, [sp, #8]
 80144b6:	459b      	cmp	fp, r3
 80144b8:	dd13      	ble.n	80144e2 <__hexnan+0x7a>
 80144ba:	454c      	cmp	r4, r9
 80144bc:	d206      	bcs.n	80144cc <__hexnan+0x64>
 80144be:	2d07      	cmp	r5, #7
 80144c0:	dc04      	bgt.n	80144cc <__hexnan+0x64>
 80144c2:	462a      	mov	r2, r5
 80144c4:	4649      	mov	r1, r9
 80144c6:	4620      	mov	r0, r4
 80144c8:	f7ff ffa8 	bl	801441c <L_shift>
 80144cc:	4544      	cmp	r4, r8
 80144ce:	d950      	bls.n	8014572 <__hexnan+0x10a>
 80144d0:	2300      	movs	r3, #0
 80144d2:	f1a4 0904 	sub.w	r9, r4, #4
 80144d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80144da:	f8cd b008 	str.w	fp, [sp, #8]
 80144de:	464c      	mov	r4, r9
 80144e0:	461d      	mov	r5, r3
 80144e2:	9903      	ldr	r1, [sp, #12]
 80144e4:	e7d7      	b.n	8014496 <__hexnan+0x2e>
 80144e6:	2a29      	cmp	r2, #41	; 0x29
 80144e8:	d156      	bne.n	8014598 <__hexnan+0x130>
 80144ea:	3102      	adds	r1, #2
 80144ec:	f8ca 1000 	str.w	r1, [sl]
 80144f0:	f1bb 0f00 	cmp.w	fp, #0
 80144f4:	d050      	beq.n	8014598 <__hexnan+0x130>
 80144f6:	454c      	cmp	r4, r9
 80144f8:	d206      	bcs.n	8014508 <__hexnan+0xa0>
 80144fa:	2d07      	cmp	r5, #7
 80144fc:	dc04      	bgt.n	8014508 <__hexnan+0xa0>
 80144fe:	462a      	mov	r2, r5
 8014500:	4649      	mov	r1, r9
 8014502:	4620      	mov	r0, r4
 8014504:	f7ff ff8a 	bl	801441c <L_shift>
 8014508:	4544      	cmp	r4, r8
 801450a:	d934      	bls.n	8014576 <__hexnan+0x10e>
 801450c:	f1a8 0204 	sub.w	r2, r8, #4
 8014510:	4623      	mov	r3, r4
 8014512:	f853 1b04 	ldr.w	r1, [r3], #4
 8014516:	f842 1f04 	str.w	r1, [r2, #4]!
 801451a:	429f      	cmp	r7, r3
 801451c:	d2f9      	bcs.n	8014512 <__hexnan+0xaa>
 801451e:	1b3b      	subs	r3, r7, r4
 8014520:	f023 0303 	bic.w	r3, r3, #3
 8014524:	3304      	adds	r3, #4
 8014526:	3401      	adds	r4, #1
 8014528:	3e03      	subs	r6, #3
 801452a:	42b4      	cmp	r4, r6
 801452c:	bf88      	it	hi
 801452e:	2304      	movhi	r3, #4
 8014530:	4443      	add	r3, r8
 8014532:	2200      	movs	r2, #0
 8014534:	f843 2b04 	str.w	r2, [r3], #4
 8014538:	429f      	cmp	r7, r3
 801453a:	d2fb      	bcs.n	8014534 <__hexnan+0xcc>
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	b91b      	cbnz	r3, 8014548 <__hexnan+0xe0>
 8014540:	4547      	cmp	r7, r8
 8014542:	d127      	bne.n	8014594 <__hexnan+0x12c>
 8014544:	2301      	movs	r3, #1
 8014546:	603b      	str	r3, [r7, #0]
 8014548:	2005      	movs	r0, #5
 801454a:	e026      	b.n	801459a <__hexnan+0x132>
 801454c:	3501      	adds	r5, #1
 801454e:	2d08      	cmp	r5, #8
 8014550:	f10b 0b01 	add.w	fp, fp, #1
 8014554:	dd06      	ble.n	8014564 <__hexnan+0xfc>
 8014556:	4544      	cmp	r4, r8
 8014558:	d9c3      	bls.n	80144e2 <__hexnan+0x7a>
 801455a:	2300      	movs	r3, #0
 801455c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014560:	2501      	movs	r5, #1
 8014562:	3c04      	subs	r4, #4
 8014564:	6822      	ldr	r2, [r4, #0]
 8014566:	f000 000f 	and.w	r0, r0, #15
 801456a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801456e:	6022      	str	r2, [r4, #0]
 8014570:	e7b7      	b.n	80144e2 <__hexnan+0x7a>
 8014572:	2508      	movs	r5, #8
 8014574:	e7b5      	b.n	80144e2 <__hexnan+0x7a>
 8014576:	9b01      	ldr	r3, [sp, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d0df      	beq.n	801453c <__hexnan+0xd4>
 801457c:	f04f 32ff 	mov.w	r2, #4294967295
 8014580:	f1c3 0320 	rsb	r3, r3, #32
 8014584:	fa22 f303 	lsr.w	r3, r2, r3
 8014588:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801458c:	401a      	ands	r2, r3
 801458e:	f846 2c04 	str.w	r2, [r6, #-4]
 8014592:	e7d3      	b.n	801453c <__hexnan+0xd4>
 8014594:	3f04      	subs	r7, #4
 8014596:	e7d1      	b.n	801453c <__hexnan+0xd4>
 8014598:	2004      	movs	r0, #4
 801459a:	b007      	add	sp, #28
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145a0 <_localeconv_r>:
 80145a0:	4800      	ldr	r0, [pc, #0]	; (80145a4 <_localeconv_r+0x4>)
 80145a2:	4770      	bx	lr
 80145a4:	200002e0 	.word	0x200002e0

080145a8 <_lseek_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4d07      	ldr	r5, [pc, #28]	; (80145c8 <_lseek_r+0x20>)
 80145ac:	4604      	mov	r4, r0
 80145ae:	4608      	mov	r0, r1
 80145b0:	4611      	mov	r1, r2
 80145b2:	2200      	movs	r2, #0
 80145b4:	602a      	str	r2, [r5, #0]
 80145b6:	461a      	mov	r2, r3
 80145b8:	f7ee f92e 	bl	8002818 <_lseek>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_lseek_r+0x1e>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_lseek_r+0x1e>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	20006e74 	.word	0x20006e74

080145cc <__ascii_mbtowc>:
 80145cc:	b082      	sub	sp, #8
 80145ce:	b901      	cbnz	r1, 80145d2 <__ascii_mbtowc+0x6>
 80145d0:	a901      	add	r1, sp, #4
 80145d2:	b142      	cbz	r2, 80145e6 <__ascii_mbtowc+0x1a>
 80145d4:	b14b      	cbz	r3, 80145ea <__ascii_mbtowc+0x1e>
 80145d6:	7813      	ldrb	r3, [r2, #0]
 80145d8:	600b      	str	r3, [r1, #0]
 80145da:	7812      	ldrb	r2, [r2, #0]
 80145dc:	1e10      	subs	r0, r2, #0
 80145de:	bf18      	it	ne
 80145e0:	2001      	movne	r0, #1
 80145e2:	b002      	add	sp, #8
 80145e4:	4770      	bx	lr
 80145e6:	4610      	mov	r0, r2
 80145e8:	e7fb      	b.n	80145e2 <__ascii_mbtowc+0x16>
 80145ea:	f06f 0001 	mvn.w	r0, #1
 80145ee:	e7f8      	b.n	80145e2 <__ascii_mbtowc+0x16>

080145f0 <__malloc_lock>:
 80145f0:	4801      	ldr	r0, [pc, #4]	; (80145f8 <__malloc_lock+0x8>)
 80145f2:	f7fc bcda 	b.w	8010faa <__retarget_lock_acquire_recursive>
 80145f6:	bf00      	nop
 80145f8:	20006e6c 	.word	0x20006e6c

080145fc <__malloc_unlock>:
 80145fc:	4801      	ldr	r0, [pc, #4]	; (8014604 <__malloc_unlock+0x8>)
 80145fe:	f7fc bcd5 	b.w	8010fac <__retarget_lock_release_recursive>
 8014602:	bf00      	nop
 8014604:	20006e6c 	.word	0x20006e6c

08014608 <_Balloc>:
 8014608:	b570      	push	{r4, r5, r6, lr}
 801460a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801460c:	4604      	mov	r4, r0
 801460e:	460d      	mov	r5, r1
 8014610:	b976      	cbnz	r6, 8014630 <_Balloc+0x28>
 8014612:	2010      	movs	r0, #16
 8014614:	f7fc fccc 	bl	8010fb0 <malloc>
 8014618:	4602      	mov	r2, r0
 801461a:	6260      	str	r0, [r4, #36]	; 0x24
 801461c:	b920      	cbnz	r0, 8014628 <_Balloc+0x20>
 801461e:	4b18      	ldr	r3, [pc, #96]	; (8014680 <_Balloc+0x78>)
 8014620:	4818      	ldr	r0, [pc, #96]	; (8014684 <_Balloc+0x7c>)
 8014622:	2166      	movs	r1, #102	; 0x66
 8014624:	f7fe fcd2 	bl	8012fcc <__assert_func>
 8014628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801462c:	6006      	str	r6, [r0, #0]
 801462e:	60c6      	str	r6, [r0, #12]
 8014630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014632:	68f3      	ldr	r3, [r6, #12]
 8014634:	b183      	cbz	r3, 8014658 <_Balloc+0x50>
 8014636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801463e:	b9b8      	cbnz	r0, 8014670 <_Balloc+0x68>
 8014640:	2101      	movs	r1, #1
 8014642:	fa01 f605 	lsl.w	r6, r1, r5
 8014646:	1d72      	adds	r2, r6, #5
 8014648:	0092      	lsls	r2, r2, #2
 801464a:	4620      	mov	r0, r4
 801464c:	f000 fc97 	bl	8014f7e <_calloc_r>
 8014650:	b160      	cbz	r0, 801466c <_Balloc+0x64>
 8014652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014656:	e00e      	b.n	8014676 <_Balloc+0x6e>
 8014658:	2221      	movs	r2, #33	; 0x21
 801465a:	2104      	movs	r1, #4
 801465c:	4620      	mov	r0, r4
 801465e:	f000 fc8e 	bl	8014f7e <_calloc_r>
 8014662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014664:	60f0      	str	r0, [r6, #12]
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d1e4      	bne.n	8014636 <_Balloc+0x2e>
 801466c:	2000      	movs	r0, #0
 801466e:	bd70      	pop	{r4, r5, r6, pc}
 8014670:	6802      	ldr	r2, [r0, #0]
 8014672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014676:	2300      	movs	r3, #0
 8014678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801467c:	e7f7      	b.n	801466e <_Balloc+0x66>
 801467e:	bf00      	nop
 8014680:	080166fa 	.word	0x080166fa
 8014684:	08016800 	.word	0x08016800

08014688 <_Bfree>:
 8014688:	b570      	push	{r4, r5, r6, lr}
 801468a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801468c:	4605      	mov	r5, r0
 801468e:	460c      	mov	r4, r1
 8014690:	b976      	cbnz	r6, 80146b0 <_Bfree+0x28>
 8014692:	2010      	movs	r0, #16
 8014694:	f7fc fc8c 	bl	8010fb0 <malloc>
 8014698:	4602      	mov	r2, r0
 801469a:	6268      	str	r0, [r5, #36]	; 0x24
 801469c:	b920      	cbnz	r0, 80146a8 <_Bfree+0x20>
 801469e:	4b09      	ldr	r3, [pc, #36]	; (80146c4 <_Bfree+0x3c>)
 80146a0:	4809      	ldr	r0, [pc, #36]	; (80146c8 <_Bfree+0x40>)
 80146a2:	218a      	movs	r1, #138	; 0x8a
 80146a4:	f7fe fc92 	bl	8012fcc <__assert_func>
 80146a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146ac:	6006      	str	r6, [r0, #0]
 80146ae:	60c6      	str	r6, [r0, #12]
 80146b0:	b13c      	cbz	r4, 80146c2 <_Bfree+0x3a>
 80146b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146b4:	6862      	ldr	r2, [r4, #4]
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146bc:	6021      	str	r1, [r4, #0]
 80146be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80146c2:	bd70      	pop	{r4, r5, r6, pc}
 80146c4:	080166fa 	.word	0x080166fa
 80146c8:	08016800 	.word	0x08016800

080146cc <__multadd>:
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	690e      	ldr	r6, [r1, #16]
 80146d2:	4607      	mov	r7, r0
 80146d4:	4698      	mov	r8, r3
 80146d6:	460c      	mov	r4, r1
 80146d8:	f101 0014 	add.w	r0, r1, #20
 80146dc:	2300      	movs	r3, #0
 80146de:	6805      	ldr	r5, [r0, #0]
 80146e0:	b2a9      	uxth	r1, r5
 80146e2:	fb02 8101 	mla	r1, r2, r1, r8
 80146e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80146ea:	0c2d      	lsrs	r5, r5, #16
 80146ec:	fb02 c505 	mla	r5, r2, r5, ip
 80146f0:	b289      	uxth	r1, r1
 80146f2:	3301      	adds	r3, #1
 80146f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80146f8:	429e      	cmp	r6, r3
 80146fa:	f840 1b04 	str.w	r1, [r0], #4
 80146fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014702:	dcec      	bgt.n	80146de <__multadd+0x12>
 8014704:	f1b8 0f00 	cmp.w	r8, #0
 8014708:	d022      	beq.n	8014750 <__multadd+0x84>
 801470a:	68a3      	ldr	r3, [r4, #8]
 801470c:	42b3      	cmp	r3, r6
 801470e:	dc19      	bgt.n	8014744 <__multadd+0x78>
 8014710:	6861      	ldr	r1, [r4, #4]
 8014712:	4638      	mov	r0, r7
 8014714:	3101      	adds	r1, #1
 8014716:	f7ff ff77 	bl	8014608 <_Balloc>
 801471a:	4605      	mov	r5, r0
 801471c:	b928      	cbnz	r0, 801472a <__multadd+0x5e>
 801471e:	4602      	mov	r2, r0
 8014720:	4b0d      	ldr	r3, [pc, #52]	; (8014758 <__multadd+0x8c>)
 8014722:	480e      	ldr	r0, [pc, #56]	; (801475c <__multadd+0x90>)
 8014724:	21b5      	movs	r1, #181	; 0xb5
 8014726:	f7fe fc51 	bl	8012fcc <__assert_func>
 801472a:	6922      	ldr	r2, [r4, #16]
 801472c:	3202      	adds	r2, #2
 801472e:	f104 010c 	add.w	r1, r4, #12
 8014732:	0092      	lsls	r2, r2, #2
 8014734:	300c      	adds	r0, #12
 8014736:	f7fc fc4b 	bl	8010fd0 <memcpy>
 801473a:	4621      	mov	r1, r4
 801473c:	4638      	mov	r0, r7
 801473e:	f7ff ffa3 	bl	8014688 <_Bfree>
 8014742:	462c      	mov	r4, r5
 8014744:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014748:	3601      	adds	r6, #1
 801474a:	f8c3 8014 	str.w	r8, [r3, #20]
 801474e:	6126      	str	r6, [r4, #16]
 8014750:	4620      	mov	r0, r4
 8014752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014756:	bf00      	nop
 8014758:	08016770 	.word	0x08016770
 801475c:	08016800 	.word	0x08016800

08014760 <__s2b>:
 8014760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014764:	460c      	mov	r4, r1
 8014766:	4615      	mov	r5, r2
 8014768:	461f      	mov	r7, r3
 801476a:	2209      	movs	r2, #9
 801476c:	3308      	adds	r3, #8
 801476e:	4606      	mov	r6, r0
 8014770:	fb93 f3f2 	sdiv	r3, r3, r2
 8014774:	2100      	movs	r1, #0
 8014776:	2201      	movs	r2, #1
 8014778:	429a      	cmp	r2, r3
 801477a:	db09      	blt.n	8014790 <__s2b+0x30>
 801477c:	4630      	mov	r0, r6
 801477e:	f7ff ff43 	bl	8014608 <_Balloc>
 8014782:	b940      	cbnz	r0, 8014796 <__s2b+0x36>
 8014784:	4602      	mov	r2, r0
 8014786:	4b19      	ldr	r3, [pc, #100]	; (80147ec <__s2b+0x8c>)
 8014788:	4819      	ldr	r0, [pc, #100]	; (80147f0 <__s2b+0x90>)
 801478a:	21ce      	movs	r1, #206	; 0xce
 801478c:	f7fe fc1e 	bl	8012fcc <__assert_func>
 8014790:	0052      	lsls	r2, r2, #1
 8014792:	3101      	adds	r1, #1
 8014794:	e7f0      	b.n	8014778 <__s2b+0x18>
 8014796:	9b08      	ldr	r3, [sp, #32]
 8014798:	6143      	str	r3, [r0, #20]
 801479a:	2d09      	cmp	r5, #9
 801479c:	f04f 0301 	mov.w	r3, #1
 80147a0:	6103      	str	r3, [r0, #16]
 80147a2:	dd16      	ble.n	80147d2 <__s2b+0x72>
 80147a4:	f104 0909 	add.w	r9, r4, #9
 80147a8:	46c8      	mov	r8, r9
 80147aa:	442c      	add	r4, r5
 80147ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80147b0:	4601      	mov	r1, r0
 80147b2:	3b30      	subs	r3, #48	; 0x30
 80147b4:	220a      	movs	r2, #10
 80147b6:	4630      	mov	r0, r6
 80147b8:	f7ff ff88 	bl	80146cc <__multadd>
 80147bc:	45a0      	cmp	r8, r4
 80147be:	d1f5      	bne.n	80147ac <__s2b+0x4c>
 80147c0:	f1a5 0408 	sub.w	r4, r5, #8
 80147c4:	444c      	add	r4, r9
 80147c6:	1b2d      	subs	r5, r5, r4
 80147c8:	1963      	adds	r3, r4, r5
 80147ca:	42bb      	cmp	r3, r7
 80147cc:	db04      	blt.n	80147d8 <__s2b+0x78>
 80147ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d2:	340a      	adds	r4, #10
 80147d4:	2509      	movs	r5, #9
 80147d6:	e7f6      	b.n	80147c6 <__s2b+0x66>
 80147d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80147dc:	4601      	mov	r1, r0
 80147de:	3b30      	subs	r3, #48	; 0x30
 80147e0:	220a      	movs	r2, #10
 80147e2:	4630      	mov	r0, r6
 80147e4:	f7ff ff72 	bl	80146cc <__multadd>
 80147e8:	e7ee      	b.n	80147c8 <__s2b+0x68>
 80147ea:	bf00      	nop
 80147ec:	08016770 	.word	0x08016770
 80147f0:	08016800 	.word	0x08016800

080147f4 <__hi0bits>:
 80147f4:	0c03      	lsrs	r3, r0, #16
 80147f6:	041b      	lsls	r3, r3, #16
 80147f8:	b9d3      	cbnz	r3, 8014830 <__hi0bits+0x3c>
 80147fa:	0400      	lsls	r0, r0, #16
 80147fc:	2310      	movs	r3, #16
 80147fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014802:	bf04      	itt	eq
 8014804:	0200      	lsleq	r0, r0, #8
 8014806:	3308      	addeq	r3, #8
 8014808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801480c:	bf04      	itt	eq
 801480e:	0100      	lsleq	r0, r0, #4
 8014810:	3304      	addeq	r3, #4
 8014812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014816:	bf04      	itt	eq
 8014818:	0080      	lsleq	r0, r0, #2
 801481a:	3302      	addeq	r3, #2
 801481c:	2800      	cmp	r0, #0
 801481e:	db05      	blt.n	801482c <__hi0bits+0x38>
 8014820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014824:	f103 0301 	add.w	r3, r3, #1
 8014828:	bf08      	it	eq
 801482a:	2320      	moveq	r3, #32
 801482c:	4618      	mov	r0, r3
 801482e:	4770      	bx	lr
 8014830:	2300      	movs	r3, #0
 8014832:	e7e4      	b.n	80147fe <__hi0bits+0xa>

08014834 <__lo0bits>:
 8014834:	6803      	ldr	r3, [r0, #0]
 8014836:	f013 0207 	ands.w	r2, r3, #7
 801483a:	4601      	mov	r1, r0
 801483c:	d00b      	beq.n	8014856 <__lo0bits+0x22>
 801483e:	07da      	lsls	r2, r3, #31
 8014840:	d424      	bmi.n	801488c <__lo0bits+0x58>
 8014842:	0798      	lsls	r0, r3, #30
 8014844:	bf49      	itett	mi
 8014846:	085b      	lsrmi	r3, r3, #1
 8014848:	089b      	lsrpl	r3, r3, #2
 801484a:	2001      	movmi	r0, #1
 801484c:	600b      	strmi	r3, [r1, #0]
 801484e:	bf5c      	itt	pl
 8014850:	600b      	strpl	r3, [r1, #0]
 8014852:	2002      	movpl	r0, #2
 8014854:	4770      	bx	lr
 8014856:	b298      	uxth	r0, r3
 8014858:	b9b0      	cbnz	r0, 8014888 <__lo0bits+0x54>
 801485a:	0c1b      	lsrs	r3, r3, #16
 801485c:	2010      	movs	r0, #16
 801485e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014862:	bf04      	itt	eq
 8014864:	0a1b      	lsreq	r3, r3, #8
 8014866:	3008      	addeq	r0, #8
 8014868:	071a      	lsls	r2, r3, #28
 801486a:	bf04      	itt	eq
 801486c:	091b      	lsreq	r3, r3, #4
 801486e:	3004      	addeq	r0, #4
 8014870:	079a      	lsls	r2, r3, #30
 8014872:	bf04      	itt	eq
 8014874:	089b      	lsreq	r3, r3, #2
 8014876:	3002      	addeq	r0, #2
 8014878:	07da      	lsls	r2, r3, #31
 801487a:	d403      	bmi.n	8014884 <__lo0bits+0x50>
 801487c:	085b      	lsrs	r3, r3, #1
 801487e:	f100 0001 	add.w	r0, r0, #1
 8014882:	d005      	beq.n	8014890 <__lo0bits+0x5c>
 8014884:	600b      	str	r3, [r1, #0]
 8014886:	4770      	bx	lr
 8014888:	4610      	mov	r0, r2
 801488a:	e7e8      	b.n	801485e <__lo0bits+0x2a>
 801488c:	2000      	movs	r0, #0
 801488e:	4770      	bx	lr
 8014890:	2020      	movs	r0, #32
 8014892:	4770      	bx	lr

08014894 <__i2b>:
 8014894:	b510      	push	{r4, lr}
 8014896:	460c      	mov	r4, r1
 8014898:	2101      	movs	r1, #1
 801489a:	f7ff feb5 	bl	8014608 <_Balloc>
 801489e:	4602      	mov	r2, r0
 80148a0:	b928      	cbnz	r0, 80148ae <__i2b+0x1a>
 80148a2:	4b05      	ldr	r3, [pc, #20]	; (80148b8 <__i2b+0x24>)
 80148a4:	4805      	ldr	r0, [pc, #20]	; (80148bc <__i2b+0x28>)
 80148a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80148aa:	f7fe fb8f 	bl	8012fcc <__assert_func>
 80148ae:	2301      	movs	r3, #1
 80148b0:	6144      	str	r4, [r0, #20]
 80148b2:	6103      	str	r3, [r0, #16]
 80148b4:	bd10      	pop	{r4, pc}
 80148b6:	bf00      	nop
 80148b8:	08016770 	.word	0x08016770
 80148bc:	08016800 	.word	0x08016800

080148c0 <__multiply>:
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	4614      	mov	r4, r2
 80148c6:	690a      	ldr	r2, [r1, #16]
 80148c8:	6923      	ldr	r3, [r4, #16]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	bfb8      	it	lt
 80148ce:	460b      	movlt	r3, r1
 80148d0:	460d      	mov	r5, r1
 80148d2:	bfbc      	itt	lt
 80148d4:	4625      	movlt	r5, r4
 80148d6:	461c      	movlt	r4, r3
 80148d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80148dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80148e0:	68ab      	ldr	r3, [r5, #8]
 80148e2:	6869      	ldr	r1, [r5, #4]
 80148e4:	eb0a 0709 	add.w	r7, sl, r9
 80148e8:	42bb      	cmp	r3, r7
 80148ea:	b085      	sub	sp, #20
 80148ec:	bfb8      	it	lt
 80148ee:	3101      	addlt	r1, #1
 80148f0:	f7ff fe8a 	bl	8014608 <_Balloc>
 80148f4:	b930      	cbnz	r0, 8014904 <__multiply+0x44>
 80148f6:	4602      	mov	r2, r0
 80148f8:	4b42      	ldr	r3, [pc, #264]	; (8014a04 <__multiply+0x144>)
 80148fa:	4843      	ldr	r0, [pc, #268]	; (8014a08 <__multiply+0x148>)
 80148fc:	f240 115d 	movw	r1, #349	; 0x15d
 8014900:	f7fe fb64 	bl	8012fcc <__assert_func>
 8014904:	f100 0614 	add.w	r6, r0, #20
 8014908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801490c:	4633      	mov	r3, r6
 801490e:	2200      	movs	r2, #0
 8014910:	4543      	cmp	r3, r8
 8014912:	d31e      	bcc.n	8014952 <__multiply+0x92>
 8014914:	f105 0c14 	add.w	ip, r5, #20
 8014918:	f104 0314 	add.w	r3, r4, #20
 801491c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014924:	9202      	str	r2, [sp, #8]
 8014926:	ebac 0205 	sub.w	r2, ip, r5
 801492a:	3a15      	subs	r2, #21
 801492c:	f022 0203 	bic.w	r2, r2, #3
 8014930:	3204      	adds	r2, #4
 8014932:	f105 0115 	add.w	r1, r5, #21
 8014936:	458c      	cmp	ip, r1
 8014938:	bf38      	it	cc
 801493a:	2204      	movcc	r2, #4
 801493c:	9201      	str	r2, [sp, #4]
 801493e:	9a02      	ldr	r2, [sp, #8]
 8014940:	9303      	str	r3, [sp, #12]
 8014942:	429a      	cmp	r2, r3
 8014944:	d808      	bhi.n	8014958 <__multiply+0x98>
 8014946:	2f00      	cmp	r7, #0
 8014948:	dc55      	bgt.n	80149f6 <__multiply+0x136>
 801494a:	6107      	str	r7, [r0, #16]
 801494c:	b005      	add	sp, #20
 801494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014952:	f843 2b04 	str.w	r2, [r3], #4
 8014956:	e7db      	b.n	8014910 <__multiply+0x50>
 8014958:	f8b3 a000 	ldrh.w	sl, [r3]
 801495c:	f1ba 0f00 	cmp.w	sl, #0
 8014960:	d020      	beq.n	80149a4 <__multiply+0xe4>
 8014962:	f105 0e14 	add.w	lr, r5, #20
 8014966:	46b1      	mov	r9, r6
 8014968:	2200      	movs	r2, #0
 801496a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801496e:	f8d9 b000 	ldr.w	fp, [r9]
 8014972:	b2a1      	uxth	r1, r4
 8014974:	fa1f fb8b 	uxth.w	fp, fp
 8014978:	fb0a b101 	mla	r1, sl, r1, fp
 801497c:	4411      	add	r1, r2
 801497e:	f8d9 2000 	ldr.w	r2, [r9]
 8014982:	0c24      	lsrs	r4, r4, #16
 8014984:	0c12      	lsrs	r2, r2, #16
 8014986:	fb0a 2404 	mla	r4, sl, r4, r2
 801498a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801498e:	b289      	uxth	r1, r1
 8014990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014994:	45f4      	cmp	ip, lr
 8014996:	f849 1b04 	str.w	r1, [r9], #4
 801499a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801499e:	d8e4      	bhi.n	801496a <__multiply+0xaa>
 80149a0:	9901      	ldr	r1, [sp, #4]
 80149a2:	5072      	str	r2, [r6, r1]
 80149a4:	9a03      	ldr	r2, [sp, #12]
 80149a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80149aa:	3304      	adds	r3, #4
 80149ac:	f1b9 0f00 	cmp.w	r9, #0
 80149b0:	d01f      	beq.n	80149f2 <__multiply+0x132>
 80149b2:	6834      	ldr	r4, [r6, #0]
 80149b4:	f105 0114 	add.w	r1, r5, #20
 80149b8:	46b6      	mov	lr, r6
 80149ba:	f04f 0a00 	mov.w	sl, #0
 80149be:	880a      	ldrh	r2, [r1, #0]
 80149c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80149c4:	fb09 b202 	mla	r2, r9, r2, fp
 80149c8:	4492      	add	sl, r2
 80149ca:	b2a4      	uxth	r4, r4
 80149cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80149d0:	f84e 4b04 	str.w	r4, [lr], #4
 80149d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80149d8:	f8be 2000 	ldrh.w	r2, [lr]
 80149dc:	0c24      	lsrs	r4, r4, #16
 80149de:	fb09 2404 	mla	r4, r9, r4, r2
 80149e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80149e6:	458c      	cmp	ip, r1
 80149e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80149ec:	d8e7      	bhi.n	80149be <__multiply+0xfe>
 80149ee:	9a01      	ldr	r2, [sp, #4]
 80149f0:	50b4      	str	r4, [r6, r2]
 80149f2:	3604      	adds	r6, #4
 80149f4:	e7a3      	b.n	801493e <__multiply+0x7e>
 80149f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d1a5      	bne.n	801494a <__multiply+0x8a>
 80149fe:	3f01      	subs	r7, #1
 8014a00:	e7a1      	b.n	8014946 <__multiply+0x86>
 8014a02:	bf00      	nop
 8014a04:	08016770 	.word	0x08016770
 8014a08:	08016800 	.word	0x08016800

08014a0c <__pow5mult>:
 8014a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a10:	4615      	mov	r5, r2
 8014a12:	f012 0203 	ands.w	r2, r2, #3
 8014a16:	4606      	mov	r6, r0
 8014a18:	460f      	mov	r7, r1
 8014a1a:	d007      	beq.n	8014a2c <__pow5mult+0x20>
 8014a1c:	4c25      	ldr	r4, [pc, #148]	; (8014ab4 <__pow5mult+0xa8>)
 8014a1e:	3a01      	subs	r2, #1
 8014a20:	2300      	movs	r3, #0
 8014a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014a26:	f7ff fe51 	bl	80146cc <__multadd>
 8014a2a:	4607      	mov	r7, r0
 8014a2c:	10ad      	asrs	r5, r5, #2
 8014a2e:	d03d      	beq.n	8014aac <__pow5mult+0xa0>
 8014a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014a32:	b97c      	cbnz	r4, 8014a54 <__pow5mult+0x48>
 8014a34:	2010      	movs	r0, #16
 8014a36:	f7fc fabb 	bl	8010fb0 <malloc>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	6270      	str	r0, [r6, #36]	; 0x24
 8014a3e:	b928      	cbnz	r0, 8014a4c <__pow5mult+0x40>
 8014a40:	4b1d      	ldr	r3, [pc, #116]	; (8014ab8 <__pow5mult+0xac>)
 8014a42:	481e      	ldr	r0, [pc, #120]	; (8014abc <__pow5mult+0xb0>)
 8014a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014a48:	f7fe fac0 	bl	8012fcc <__assert_func>
 8014a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a50:	6004      	str	r4, [r0, #0]
 8014a52:	60c4      	str	r4, [r0, #12]
 8014a54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a5c:	b94c      	cbnz	r4, 8014a72 <__pow5mult+0x66>
 8014a5e:	f240 2171 	movw	r1, #625	; 0x271
 8014a62:	4630      	mov	r0, r6
 8014a64:	f7ff ff16 	bl	8014894 <__i2b>
 8014a68:	2300      	movs	r3, #0
 8014a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a6e:	4604      	mov	r4, r0
 8014a70:	6003      	str	r3, [r0, #0]
 8014a72:	f04f 0900 	mov.w	r9, #0
 8014a76:	07eb      	lsls	r3, r5, #31
 8014a78:	d50a      	bpl.n	8014a90 <__pow5mult+0x84>
 8014a7a:	4639      	mov	r1, r7
 8014a7c:	4622      	mov	r2, r4
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f7ff ff1e 	bl	80148c0 <__multiply>
 8014a84:	4639      	mov	r1, r7
 8014a86:	4680      	mov	r8, r0
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f7ff fdfd 	bl	8014688 <_Bfree>
 8014a8e:	4647      	mov	r7, r8
 8014a90:	106d      	asrs	r5, r5, #1
 8014a92:	d00b      	beq.n	8014aac <__pow5mult+0xa0>
 8014a94:	6820      	ldr	r0, [r4, #0]
 8014a96:	b938      	cbnz	r0, 8014aa8 <__pow5mult+0x9c>
 8014a98:	4622      	mov	r2, r4
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4630      	mov	r0, r6
 8014a9e:	f7ff ff0f 	bl	80148c0 <__multiply>
 8014aa2:	6020      	str	r0, [r4, #0]
 8014aa4:	f8c0 9000 	str.w	r9, [r0]
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	e7e4      	b.n	8014a76 <__pow5mult+0x6a>
 8014aac:	4638      	mov	r0, r7
 8014aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ab2:	bf00      	nop
 8014ab4:	08016950 	.word	0x08016950
 8014ab8:	080166fa 	.word	0x080166fa
 8014abc:	08016800 	.word	0x08016800

08014ac0 <__lshift>:
 8014ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ac4:	460c      	mov	r4, r1
 8014ac6:	6849      	ldr	r1, [r1, #4]
 8014ac8:	6923      	ldr	r3, [r4, #16]
 8014aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014ace:	68a3      	ldr	r3, [r4, #8]
 8014ad0:	4607      	mov	r7, r0
 8014ad2:	4691      	mov	r9, r2
 8014ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ad8:	f108 0601 	add.w	r6, r8, #1
 8014adc:	42b3      	cmp	r3, r6
 8014ade:	db0b      	blt.n	8014af8 <__lshift+0x38>
 8014ae0:	4638      	mov	r0, r7
 8014ae2:	f7ff fd91 	bl	8014608 <_Balloc>
 8014ae6:	4605      	mov	r5, r0
 8014ae8:	b948      	cbnz	r0, 8014afe <__lshift+0x3e>
 8014aea:	4602      	mov	r2, r0
 8014aec:	4b28      	ldr	r3, [pc, #160]	; (8014b90 <__lshift+0xd0>)
 8014aee:	4829      	ldr	r0, [pc, #164]	; (8014b94 <__lshift+0xd4>)
 8014af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014af4:	f7fe fa6a 	bl	8012fcc <__assert_func>
 8014af8:	3101      	adds	r1, #1
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	e7ee      	b.n	8014adc <__lshift+0x1c>
 8014afe:	2300      	movs	r3, #0
 8014b00:	f100 0114 	add.w	r1, r0, #20
 8014b04:	f100 0210 	add.w	r2, r0, #16
 8014b08:	4618      	mov	r0, r3
 8014b0a:	4553      	cmp	r3, sl
 8014b0c:	db33      	blt.n	8014b76 <__lshift+0xb6>
 8014b0e:	6920      	ldr	r0, [r4, #16]
 8014b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b14:	f104 0314 	add.w	r3, r4, #20
 8014b18:	f019 091f 	ands.w	r9, r9, #31
 8014b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014b24:	d02b      	beq.n	8014b7e <__lshift+0xbe>
 8014b26:	f1c9 0e20 	rsb	lr, r9, #32
 8014b2a:	468a      	mov	sl, r1
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	6818      	ldr	r0, [r3, #0]
 8014b30:	fa00 f009 	lsl.w	r0, r0, r9
 8014b34:	4302      	orrs	r2, r0
 8014b36:	f84a 2b04 	str.w	r2, [sl], #4
 8014b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b3e:	459c      	cmp	ip, r3
 8014b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8014b44:	d8f3      	bhi.n	8014b2e <__lshift+0x6e>
 8014b46:	ebac 0304 	sub.w	r3, ip, r4
 8014b4a:	3b15      	subs	r3, #21
 8014b4c:	f023 0303 	bic.w	r3, r3, #3
 8014b50:	3304      	adds	r3, #4
 8014b52:	f104 0015 	add.w	r0, r4, #21
 8014b56:	4584      	cmp	ip, r0
 8014b58:	bf38      	it	cc
 8014b5a:	2304      	movcc	r3, #4
 8014b5c:	50ca      	str	r2, [r1, r3]
 8014b5e:	b10a      	cbz	r2, 8014b64 <__lshift+0xa4>
 8014b60:	f108 0602 	add.w	r6, r8, #2
 8014b64:	3e01      	subs	r6, #1
 8014b66:	4638      	mov	r0, r7
 8014b68:	612e      	str	r6, [r5, #16]
 8014b6a:	4621      	mov	r1, r4
 8014b6c:	f7ff fd8c 	bl	8014688 <_Bfree>
 8014b70:	4628      	mov	r0, r5
 8014b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	e7c5      	b.n	8014b0a <__lshift+0x4a>
 8014b7e:	3904      	subs	r1, #4
 8014b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b88:	459c      	cmp	ip, r3
 8014b8a:	d8f9      	bhi.n	8014b80 <__lshift+0xc0>
 8014b8c:	e7ea      	b.n	8014b64 <__lshift+0xa4>
 8014b8e:	bf00      	nop
 8014b90:	08016770 	.word	0x08016770
 8014b94:	08016800 	.word	0x08016800

08014b98 <__mcmp>:
 8014b98:	b530      	push	{r4, r5, lr}
 8014b9a:	6902      	ldr	r2, [r0, #16]
 8014b9c:	690c      	ldr	r4, [r1, #16]
 8014b9e:	1b12      	subs	r2, r2, r4
 8014ba0:	d10e      	bne.n	8014bc0 <__mcmp+0x28>
 8014ba2:	f100 0314 	add.w	r3, r0, #20
 8014ba6:	3114      	adds	r1, #20
 8014ba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014bb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014bb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014bb8:	42a5      	cmp	r5, r4
 8014bba:	d003      	beq.n	8014bc4 <__mcmp+0x2c>
 8014bbc:	d305      	bcc.n	8014bca <__mcmp+0x32>
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	4610      	mov	r0, r2
 8014bc2:	bd30      	pop	{r4, r5, pc}
 8014bc4:	4283      	cmp	r3, r0
 8014bc6:	d3f3      	bcc.n	8014bb0 <__mcmp+0x18>
 8014bc8:	e7fa      	b.n	8014bc0 <__mcmp+0x28>
 8014bca:	f04f 32ff 	mov.w	r2, #4294967295
 8014bce:	e7f7      	b.n	8014bc0 <__mcmp+0x28>

08014bd0 <__mdiff>:
 8014bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd4:	460c      	mov	r4, r1
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	4611      	mov	r1, r2
 8014bda:	4620      	mov	r0, r4
 8014bdc:	4617      	mov	r7, r2
 8014bde:	f7ff ffdb 	bl	8014b98 <__mcmp>
 8014be2:	1e05      	subs	r5, r0, #0
 8014be4:	d110      	bne.n	8014c08 <__mdiff+0x38>
 8014be6:	4629      	mov	r1, r5
 8014be8:	4630      	mov	r0, r6
 8014bea:	f7ff fd0d 	bl	8014608 <_Balloc>
 8014bee:	b930      	cbnz	r0, 8014bfe <__mdiff+0x2e>
 8014bf0:	4b39      	ldr	r3, [pc, #228]	; (8014cd8 <__mdiff+0x108>)
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	f240 2132 	movw	r1, #562	; 0x232
 8014bf8:	4838      	ldr	r0, [pc, #224]	; (8014cdc <__mdiff+0x10c>)
 8014bfa:	f7fe f9e7 	bl	8012fcc <__assert_func>
 8014bfe:	2301      	movs	r3, #1
 8014c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c08:	bfa4      	itt	ge
 8014c0a:	463b      	movge	r3, r7
 8014c0c:	4627      	movge	r7, r4
 8014c0e:	4630      	mov	r0, r6
 8014c10:	6879      	ldr	r1, [r7, #4]
 8014c12:	bfa6      	itte	ge
 8014c14:	461c      	movge	r4, r3
 8014c16:	2500      	movge	r5, #0
 8014c18:	2501      	movlt	r5, #1
 8014c1a:	f7ff fcf5 	bl	8014608 <_Balloc>
 8014c1e:	b920      	cbnz	r0, 8014c2a <__mdiff+0x5a>
 8014c20:	4b2d      	ldr	r3, [pc, #180]	; (8014cd8 <__mdiff+0x108>)
 8014c22:	4602      	mov	r2, r0
 8014c24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014c28:	e7e6      	b.n	8014bf8 <__mdiff+0x28>
 8014c2a:	693e      	ldr	r6, [r7, #16]
 8014c2c:	60c5      	str	r5, [r0, #12]
 8014c2e:	6925      	ldr	r5, [r4, #16]
 8014c30:	f107 0114 	add.w	r1, r7, #20
 8014c34:	f104 0914 	add.w	r9, r4, #20
 8014c38:	f100 0e14 	add.w	lr, r0, #20
 8014c3c:	f107 0210 	add.w	r2, r7, #16
 8014c40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014c44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014c48:	46f2      	mov	sl, lr
 8014c4a:	2700      	movs	r7, #0
 8014c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014c54:	fa1f f883 	uxth.w	r8, r3
 8014c58:	fa17 f78b 	uxtah	r7, r7, fp
 8014c5c:	0c1b      	lsrs	r3, r3, #16
 8014c5e:	eba7 0808 	sub.w	r8, r7, r8
 8014c62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014c66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014c6a:	fa1f f888 	uxth.w	r8, r8
 8014c6e:	141f      	asrs	r7, r3, #16
 8014c70:	454d      	cmp	r5, r9
 8014c72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c76:	f84a 3b04 	str.w	r3, [sl], #4
 8014c7a:	d8e7      	bhi.n	8014c4c <__mdiff+0x7c>
 8014c7c:	1b2b      	subs	r3, r5, r4
 8014c7e:	3b15      	subs	r3, #21
 8014c80:	f023 0303 	bic.w	r3, r3, #3
 8014c84:	3304      	adds	r3, #4
 8014c86:	3415      	adds	r4, #21
 8014c88:	42a5      	cmp	r5, r4
 8014c8a:	bf38      	it	cc
 8014c8c:	2304      	movcc	r3, #4
 8014c8e:	4419      	add	r1, r3
 8014c90:	4473      	add	r3, lr
 8014c92:	469e      	mov	lr, r3
 8014c94:	460d      	mov	r5, r1
 8014c96:	4565      	cmp	r5, ip
 8014c98:	d30e      	bcc.n	8014cb8 <__mdiff+0xe8>
 8014c9a:	f10c 0203 	add.w	r2, ip, #3
 8014c9e:	1a52      	subs	r2, r2, r1
 8014ca0:	f022 0203 	bic.w	r2, r2, #3
 8014ca4:	3903      	subs	r1, #3
 8014ca6:	458c      	cmp	ip, r1
 8014ca8:	bf38      	it	cc
 8014caa:	2200      	movcc	r2, #0
 8014cac:	441a      	add	r2, r3
 8014cae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014cb2:	b17b      	cbz	r3, 8014cd4 <__mdiff+0x104>
 8014cb4:	6106      	str	r6, [r0, #16]
 8014cb6:	e7a5      	b.n	8014c04 <__mdiff+0x34>
 8014cb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8014cbc:	fa17 f488 	uxtah	r4, r7, r8
 8014cc0:	1422      	asrs	r2, r4, #16
 8014cc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014cc6:	b2a4      	uxth	r4, r4
 8014cc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014ccc:	f84e 4b04 	str.w	r4, [lr], #4
 8014cd0:	1417      	asrs	r7, r2, #16
 8014cd2:	e7e0      	b.n	8014c96 <__mdiff+0xc6>
 8014cd4:	3e01      	subs	r6, #1
 8014cd6:	e7ea      	b.n	8014cae <__mdiff+0xde>
 8014cd8:	08016770 	.word	0x08016770
 8014cdc:	08016800 	.word	0x08016800

08014ce0 <__ulp>:
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	ed8d 0b00 	vstr	d0, [sp]
 8014ce6:	9b01      	ldr	r3, [sp, #4]
 8014ce8:	4912      	ldr	r1, [pc, #72]	; (8014d34 <__ulp+0x54>)
 8014cea:	4019      	ands	r1, r3
 8014cec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014cf0:	2900      	cmp	r1, #0
 8014cf2:	dd05      	ble.n	8014d00 <__ulp+0x20>
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	ec43 2b10 	vmov	d0, r2, r3
 8014cfc:	b002      	add	sp, #8
 8014cfe:	4770      	bx	lr
 8014d00:	4249      	negs	r1, r1
 8014d02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014d06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014d0a:	f04f 0200 	mov.w	r2, #0
 8014d0e:	f04f 0300 	mov.w	r3, #0
 8014d12:	da04      	bge.n	8014d1e <__ulp+0x3e>
 8014d14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014d18:	fa41 f300 	asr.w	r3, r1, r0
 8014d1c:	e7ec      	b.n	8014cf8 <__ulp+0x18>
 8014d1e:	f1a0 0114 	sub.w	r1, r0, #20
 8014d22:	291e      	cmp	r1, #30
 8014d24:	bfda      	itte	le
 8014d26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014d2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8014d2e:	2101      	movgt	r1, #1
 8014d30:	460a      	mov	r2, r1
 8014d32:	e7e1      	b.n	8014cf8 <__ulp+0x18>
 8014d34:	7ff00000 	.word	0x7ff00000

08014d38 <__b2d>:
 8014d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3a:	6905      	ldr	r5, [r0, #16]
 8014d3c:	f100 0714 	add.w	r7, r0, #20
 8014d40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014d44:	1f2e      	subs	r6, r5, #4
 8014d46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7ff fd52 	bl	80147f4 <__hi0bits>
 8014d50:	f1c0 0320 	rsb	r3, r0, #32
 8014d54:	280a      	cmp	r0, #10
 8014d56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014dd4 <__b2d+0x9c>
 8014d5a:	600b      	str	r3, [r1, #0]
 8014d5c:	dc14      	bgt.n	8014d88 <__b2d+0x50>
 8014d5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8014d62:	fa24 f10e 	lsr.w	r1, r4, lr
 8014d66:	42b7      	cmp	r7, r6
 8014d68:	ea41 030c 	orr.w	r3, r1, ip
 8014d6c:	bf34      	ite	cc
 8014d6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014d72:	2100      	movcs	r1, #0
 8014d74:	3015      	adds	r0, #21
 8014d76:	fa04 f000 	lsl.w	r0, r4, r0
 8014d7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8014d7e:	ea40 0201 	orr.w	r2, r0, r1
 8014d82:	ec43 2b10 	vmov	d0, r2, r3
 8014d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d88:	42b7      	cmp	r7, r6
 8014d8a:	bf3a      	itte	cc
 8014d8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014d90:	f1a5 0608 	subcc.w	r6, r5, #8
 8014d94:	2100      	movcs	r1, #0
 8014d96:	380b      	subs	r0, #11
 8014d98:	d017      	beq.n	8014dca <__b2d+0x92>
 8014d9a:	f1c0 0c20 	rsb	ip, r0, #32
 8014d9e:	fa04 f500 	lsl.w	r5, r4, r0
 8014da2:	42be      	cmp	r6, r7
 8014da4:	fa21 f40c 	lsr.w	r4, r1, ip
 8014da8:	ea45 0504 	orr.w	r5, r5, r4
 8014dac:	bf8c      	ite	hi
 8014dae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014db2:	2400      	movls	r4, #0
 8014db4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014db8:	fa01 f000 	lsl.w	r0, r1, r0
 8014dbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8014dc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014dc4:	ea40 0204 	orr.w	r2, r0, r4
 8014dc8:	e7db      	b.n	8014d82 <__b2d+0x4a>
 8014dca:	ea44 030c 	orr.w	r3, r4, ip
 8014dce:	460a      	mov	r2, r1
 8014dd0:	e7d7      	b.n	8014d82 <__b2d+0x4a>
 8014dd2:	bf00      	nop
 8014dd4:	3ff00000 	.word	0x3ff00000

08014dd8 <__d2b>:
 8014dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ddc:	4689      	mov	r9, r1
 8014dde:	2101      	movs	r1, #1
 8014de0:	ec57 6b10 	vmov	r6, r7, d0
 8014de4:	4690      	mov	r8, r2
 8014de6:	f7ff fc0f 	bl	8014608 <_Balloc>
 8014dea:	4604      	mov	r4, r0
 8014dec:	b930      	cbnz	r0, 8014dfc <__d2b+0x24>
 8014dee:	4602      	mov	r2, r0
 8014df0:	4b25      	ldr	r3, [pc, #148]	; (8014e88 <__d2b+0xb0>)
 8014df2:	4826      	ldr	r0, [pc, #152]	; (8014e8c <__d2b+0xb4>)
 8014df4:	f240 310a 	movw	r1, #778	; 0x30a
 8014df8:	f7fe f8e8 	bl	8012fcc <__assert_func>
 8014dfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014e04:	bb35      	cbnz	r5, 8014e54 <__d2b+0x7c>
 8014e06:	2e00      	cmp	r6, #0
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	d028      	beq.n	8014e5e <__d2b+0x86>
 8014e0c:	4668      	mov	r0, sp
 8014e0e:	9600      	str	r6, [sp, #0]
 8014e10:	f7ff fd10 	bl	8014834 <__lo0bits>
 8014e14:	9900      	ldr	r1, [sp, #0]
 8014e16:	b300      	cbz	r0, 8014e5a <__d2b+0x82>
 8014e18:	9a01      	ldr	r2, [sp, #4]
 8014e1a:	f1c0 0320 	rsb	r3, r0, #32
 8014e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e22:	430b      	orrs	r3, r1
 8014e24:	40c2      	lsrs	r2, r0
 8014e26:	6163      	str	r3, [r4, #20]
 8014e28:	9201      	str	r2, [sp, #4]
 8014e2a:	9b01      	ldr	r3, [sp, #4]
 8014e2c:	61a3      	str	r3, [r4, #24]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	bf14      	ite	ne
 8014e32:	2202      	movne	r2, #2
 8014e34:	2201      	moveq	r2, #1
 8014e36:	6122      	str	r2, [r4, #16]
 8014e38:	b1d5      	cbz	r5, 8014e70 <__d2b+0x98>
 8014e3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014e3e:	4405      	add	r5, r0
 8014e40:	f8c9 5000 	str.w	r5, [r9]
 8014e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014e48:	f8c8 0000 	str.w	r0, [r8]
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	b003      	add	sp, #12
 8014e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e58:	e7d5      	b.n	8014e06 <__d2b+0x2e>
 8014e5a:	6161      	str	r1, [r4, #20]
 8014e5c:	e7e5      	b.n	8014e2a <__d2b+0x52>
 8014e5e:	a801      	add	r0, sp, #4
 8014e60:	f7ff fce8 	bl	8014834 <__lo0bits>
 8014e64:	9b01      	ldr	r3, [sp, #4]
 8014e66:	6163      	str	r3, [r4, #20]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	6122      	str	r2, [r4, #16]
 8014e6c:	3020      	adds	r0, #32
 8014e6e:	e7e3      	b.n	8014e38 <__d2b+0x60>
 8014e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014e78:	f8c9 0000 	str.w	r0, [r9]
 8014e7c:	6918      	ldr	r0, [r3, #16]
 8014e7e:	f7ff fcb9 	bl	80147f4 <__hi0bits>
 8014e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e86:	e7df      	b.n	8014e48 <__d2b+0x70>
 8014e88:	08016770 	.word	0x08016770
 8014e8c:	08016800 	.word	0x08016800

08014e90 <__ratio>:
 8014e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e94:	4688      	mov	r8, r1
 8014e96:	4669      	mov	r1, sp
 8014e98:	4681      	mov	r9, r0
 8014e9a:	f7ff ff4d 	bl	8014d38 <__b2d>
 8014e9e:	a901      	add	r1, sp, #4
 8014ea0:	4640      	mov	r0, r8
 8014ea2:	ec55 4b10 	vmov	r4, r5, d0
 8014ea6:	f7ff ff47 	bl	8014d38 <__b2d>
 8014eaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014eae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014eb2:	eba3 0c02 	sub.w	ip, r3, r2
 8014eb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014eba:	1a9b      	subs	r3, r3, r2
 8014ebc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014ec0:	ec51 0b10 	vmov	r0, r1, d0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	bfd6      	itet	le
 8014ec8:	460a      	movle	r2, r1
 8014eca:	462a      	movgt	r2, r5
 8014ecc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014ed0:	468b      	mov	fp, r1
 8014ed2:	462f      	mov	r7, r5
 8014ed4:	bfd4      	ite	le
 8014ed6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014eda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014ede:	4620      	mov	r0, r4
 8014ee0:	ee10 2a10 	vmov	r2, s0
 8014ee4:	465b      	mov	r3, fp
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	f7eb fcc0 	bl	800086c <__aeabi_ddiv>
 8014eec:	ec41 0b10 	vmov	d0, r0, r1
 8014ef0:	b003      	add	sp, #12
 8014ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ef6 <__copybits>:
 8014ef6:	3901      	subs	r1, #1
 8014ef8:	b570      	push	{r4, r5, r6, lr}
 8014efa:	1149      	asrs	r1, r1, #5
 8014efc:	6914      	ldr	r4, [r2, #16]
 8014efe:	3101      	adds	r1, #1
 8014f00:	f102 0314 	add.w	r3, r2, #20
 8014f04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014f0c:	1f05      	subs	r5, r0, #4
 8014f0e:	42a3      	cmp	r3, r4
 8014f10:	d30c      	bcc.n	8014f2c <__copybits+0x36>
 8014f12:	1aa3      	subs	r3, r4, r2
 8014f14:	3b11      	subs	r3, #17
 8014f16:	f023 0303 	bic.w	r3, r3, #3
 8014f1a:	3211      	adds	r2, #17
 8014f1c:	42a2      	cmp	r2, r4
 8014f1e:	bf88      	it	hi
 8014f20:	2300      	movhi	r3, #0
 8014f22:	4418      	add	r0, r3
 8014f24:	2300      	movs	r3, #0
 8014f26:	4288      	cmp	r0, r1
 8014f28:	d305      	bcc.n	8014f36 <__copybits+0x40>
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014f30:	f845 6f04 	str.w	r6, [r5, #4]!
 8014f34:	e7eb      	b.n	8014f0e <__copybits+0x18>
 8014f36:	f840 3b04 	str.w	r3, [r0], #4
 8014f3a:	e7f4      	b.n	8014f26 <__copybits+0x30>

08014f3c <__any_on>:
 8014f3c:	f100 0214 	add.w	r2, r0, #20
 8014f40:	6900      	ldr	r0, [r0, #16]
 8014f42:	114b      	asrs	r3, r1, #5
 8014f44:	4298      	cmp	r0, r3
 8014f46:	b510      	push	{r4, lr}
 8014f48:	db11      	blt.n	8014f6e <__any_on+0x32>
 8014f4a:	dd0a      	ble.n	8014f62 <__any_on+0x26>
 8014f4c:	f011 011f 	ands.w	r1, r1, #31
 8014f50:	d007      	beq.n	8014f62 <__any_on+0x26>
 8014f52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014f56:	fa24 f001 	lsr.w	r0, r4, r1
 8014f5a:	fa00 f101 	lsl.w	r1, r0, r1
 8014f5e:	428c      	cmp	r4, r1
 8014f60:	d10b      	bne.n	8014f7a <__any_on+0x3e>
 8014f62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d803      	bhi.n	8014f72 <__any_on+0x36>
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	bd10      	pop	{r4, pc}
 8014f6e:	4603      	mov	r3, r0
 8014f70:	e7f7      	b.n	8014f62 <__any_on+0x26>
 8014f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014f76:	2900      	cmp	r1, #0
 8014f78:	d0f5      	beq.n	8014f66 <__any_on+0x2a>
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	e7f6      	b.n	8014f6c <__any_on+0x30>

08014f7e <_calloc_r>:
 8014f7e:	b513      	push	{r0, r1, r4, lr}
 8014f80:	434a      	muls	r2, r1
 8014f82:	4611      	mov	r1, r2
 8014f84:	9201      	str	r2, [sp, #4]
 8014f86:	f7fc f8a3 	bl	80110d0 <_malloc_r>
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	b118      	cbz	r0, 8014f96 <_calloc_r+0x18>
 8014f8e:	9a01      	ldr	r2, [sp, #4]
 8014f90:	2100      	movs	r1, #0
 8014f92:	f7fc f845 	bl	8011020 <memset>
 8014f96:	4620      	mov	r0, r4
 8014f98:	b002      	add	sp, #8
 8014f9a:	bd10      	pop	{r4, pc}

08014f9c <_realloc_r>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	4607      	mov	r7, r0
 8014fa0:	4614      	mov	r4, r2
 8014fa2:	460e      	mov	r6, r1
 8014fa4:	b921      	cbnz	r1, 8014fb0 <_realloc_r+0x14>
 8014fa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014faa:	4611      	mov	r1, r2
 8014fac:	f7fc b890 	b.w	80110d0 <_malloc_r>
 8014fb0:	b922      	cbnz	r2, 8014fbc <_realloc_r+0x20>
 8014fb2:	f7fc f83d 	bl	8011030 <_free_r>
 8014fb6:	4625      	mov	r5, r4
 8014fb8:	4628      	mov	r0, r5
 8014fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fbc:	f000 ffaa 	bl	8015f14 <_malloc_usable_size_r>
 8014fc0:	42a0      	cmp	r0, r4
 8014fc2:	d20f      	bcs.n	8014fe4 <_realloc_r+0x48>
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	f7fc f882 	bl	80110d0 <_malloc_r>
 8014fcc:	4605      	mov	r5, r0
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0f2      	beq.n	8014fb8 <_realloc_r+0x1c>
 8014fd2:	4631      	mov	r1, r6
 8014fd4:	4622      	mov	r2, r4
 8014fd6:	f7fb fffb 	bl	8010fd0 <memcpy>
 8014fda:	4631      	mov	r1, r6
 8014fdc:	4638      	mov	r0, r7
 8014fde:	f7fc f827 	bl	8011030 <_free_r>
 8014fe2:	e7e9      	b.n	8014fb8 <_realloc_r+0x1c>
 8014fe4:	4635      	mov	r5, r6
 8014fe6:	e7e7      	b.n	8014fb8 <_realloc_r+0x1c>

08014fe8 <__ssputs_r>:
 8014fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fec:	688e      	ldr	r6, [r1, #8]
 8014fee:	429e      	cmp	r6, r3
 8014ff0:	4682      	mov	sl, r0
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	4690      	mov	r8, r2
 8014ff6:	461f      	mov	r7, r3
 8014ff8:	d838      	bhi.n	801506c <__ssputs_r+0x84>
 8014ffa:	898a      	ldrh	r2, [r1, #12]
 8014ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015000:	d032      	beq.n	8015068 <__ssputs_r+0x80>
 8015002:	6825      	ldr	r5, [r4, #0]
 8015004:	6909      	ldr	r1, [r1, #16]
 8015006:	eba5 0901 	sub.w	r9, r5, r1
 801500a:	6965      	ldr	r5, [r4, #20]
 801500c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015014:	3301      	adds	r3, #1
 8015016:	444b      	add	r3, r9
 8015018:	106d      	asrs	r5, r5, #1
 801501a:	429d      	cmp	r5, r3
 801501c:	bf38      	it	cc
 801501e:	461d      	movcc	r5, r3
 8015020:	0553      	lsls	r3, r2, #21
 8015022:	d531      	bpl.n	8015088 <__ssputs_r+0xa0>
 8015024:	4629      	mov	r1, r5
 8015026:	f7fc f853 	bl	80110d0 <_malloc_r>
 801502a:	4606      	mov	r6, r0
 801502c:	b950      	cbnz	r0, 8015044 <__ssputs_r+0x5c>
 801502e:	230c      	movs	r3, #12
 8015030:	f8ca 3000 	str.w	r3, [sl]
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801503a:	81a3      	strh	r3, [r4, #12]
 801503c:	f04f 30ff 	mov.w	r0, #4294967295
 8015040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015044:	6921      	ldr	r1, [r4, #16]
 8015046:	464a      	mov	r2, r9
 8015048:	f7fb ffc2 	bl	8010fd0 <memcpy>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015056:	81a3      	strh	r3, [r4, #12]
 8015058:	6126      	str	r6, [r4, #16]
 801505a:	6165      	str	r5, [r4, #20]
 801505c:	444e      	add	r6, r9
 801505e:	eba5 0509 	sub.w	r5, r5, r9
 8015062:	6026      	str	r6, [r4, #0]
 8015064:	60a5      	str	r5, [r4, #8]
 8015066:	463e      	mov	r6, r7
 8015068:	42be      	cmp	r6, r7
 801506a:	d900      	bls.n	801506e <__ssputs_r+0x86>
 801506c:	463e      	mov	r6, r7
 801506e:	4632      	mov	r2, r6
 8015070:	6820      	ldr	r0, [r4, #0]
 8015072:	4641      	mov	r1, r8
 8015074:	f7fb ffba 	bl	8010fec <memmove>
 8015078:	68a3      	ldr	r3, [r4, #8]
 801507a:	6822      	ldr	r2, [r4, #0]
 801507c:	1b9b      	subs	r3, r3, r6
 801507e:	4432      	add	r2, r6
 8015080:	60a3      	str	r3, [r4, #8]
 8015082:	6022      	str	r2, [r4, #0]
 8015084:	2000      	movs	r0, #0
 8015086:	e7db      	b.n	8015040 <__ssputs_r+0x58>
 8015088:	462a      	mov	r2, r5
 801508a:	f7ff ff87 	bl	8014f9c <_realloc_r>
 801508e:	4606      	mov	r6, r0
 8015090:	2800      	cmp	r0, #0
 8015092:	d1e1      	bne.n	8015058 <__ssputs_r+0x70>
 8015094:	6921      	ldr	r1, [r4, #16]
 8015096:	4650      	mov	r0, sl
 8015098:	f7fb ffca 	bl	8011030 <_free_r>
 801509c:	e7c7      	b.n	801502e <__ssputs_r+0x46>
	...

080150a0 <_svfiprintf_r>:
 80150a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a4:	4698      	mov	r8, r3
 80150a6:	898b      	ldrh	r3, [r1, #12]
 80150a8:	061b      	lsls	r3, r3, #24
 80150aa:	b09d      	sub	sp, #116	; 0x74
 80150ac:	4607      	mov	r7, r0
 80150ae:	460d      	mov	r5, r1
 80150b0:	4614      	mov	r4, r2
 80150b2:	d50e      	bpl.n	80150d2 <_svfiprintf_r+0x32>
 80150b4:	690b      	ldr	r3, [r1, #16]
 80150b6:	b963      	cbnz	r3, 80150d2 <_svfiprintf_r+0x32>
 80150b8:	2140      	movs	r1, #64	; 0x40
 80150ba:	f7fc f809 	bl	80110d0 <_malloc_r>
 80150be:	6028      	str	r0, [r5, #0]
 80150c0:	6128      	str	r0, [r5, #16]
 80150c2:	b920      	cbnz	r0, 80150ce <_svfiprintf_r+0x2e>
 80150c4:	230c      	movs	r3, #12
 80150c6:	603b      	str	r3, [r7, #0]
 80150c8:	f04f 30ff 	mov.w	r0, #4294967295
 80150cc:	e0d1      	b.n	8015272 <_svfiprintf_r+0x1d2>
 80150ce:	2340      	movs	r3, #64	; 0x40
 80150d0:	616b      	str	r3, [r5, #20]
 80150d2:	2300      	movs	r3, #0
 80150d4:	9309      	str	r3, [sp, #36]	; 0x24
 80150d6:	2320      	movs	r3, #32
 80150d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80150e0:	2330      	movs	r3, #48	; 0x30
 80150e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801528c <_svfiprintf_r+0x1ec>
 80150e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150ea:	f04f 0901 	mov.w	r9, #1
 80150ee:	4623      	mov	r3, r4
 80150f0:	469a      	mov	sl, r3
 80150f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150f6:	b10a      	cbz	r2, 80150fc <_svfiprintf_r+0x5c>
 80150f8:	2a25      	cmp	r2, #37	; 0x25
 80150fa:	d1f9      	bne.n	80150f0 <_svfiprintf_r+0x50>
 80150fc:	ebba 0b04 	subs.w	fp, sl, r4
 8015100:	d00b      	beq.n	801511a <_svfiprintf_r+0x7a>
 8015102:	465b      	mov	r3, fp
 8015104:	4622      	mov	r2, r4
 8015106:	4629      	mov	r1, r5
 8015108:	4638      	mov	r0, r7
 801510a:	f7ff ff6d 	bl	8014fe8 <__ssputs_r>
 801510e:	3001      	adds	r0, #1
 8015110:	f000 80aa 	beq.w	8015268 <_svfiprintf_r+0x1c8>
 8015114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015116:	445a      	add	r2, fp
 8015118:	9209      	str	r2, [sp, #36]	; 0x24
 801511a:	f89a 3000 	ldrb.w	r3, [sl]
 801511e:	2b00      	cmp	r3, #0
 8015120:	f000 80a2 	beq.w	8015268 <_svfiprintf_r+0x1c8>
 8015124:	2300      	movs	r3, #0
 8015126:	f04f 32ff 	mov.w	r2, #4294967295
 801512a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801512e:	f10a 0a01 	add.w	sl, sl, #1
 8015132:	9304      	str	r3, [sp, #16]
 8015134:	9307      	str	r3, [sp, #28]
 8015136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801513a:	931a      	str	r3, [sp, #104]	; 0x68
 801513c:	4654      	mov	r4, sl
 801513e:	2205      	movs	r2, #5
 8015140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015144:	4851      	ldr	r0, [pc, #324]	; (801528c <_svfiprintf_r+0x1ec>)
 8015146:	f7eb f85b 	bl	8000200 <memchr>
 801514a:	9a04      	ldr	r2, [sp, #16]
 801514c:	b9d8      	cbnz	r0, 8015186 <_svfiprintf_r+0xe6>
 801514e:	06d0      	lsls	r0, r2, #27
 8015150:	bf44      	itt	mi
 8015152:	2320      	movmi	r3, #32
 8015154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015158:	0711      	lsls	r1, r2, #28
 801515a:	bf44      	itt	mi
 801515c:	232b      	movmi	r3, #43	; 0x2b
 801515e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015162:	f89a 3000 	ldrb.w	r3, [sl]
 8015166:	2b2a      	cmp	r3, #42	; 0x2a
 8015168:	d015      	beq.n	8015196 <_svfiprintf_r+0xf6>
 801516a:	9a07      	ldr	r2, [sp, #28]
 801516c:	4654      	mov	r4, sl
 801516e:	2000      	movs	r0, #0
 8015170:	f04f 0c0a 	mov.w	ip, #10
 8015174:	4621      	mov	r1, r4
 8015176:	f811 3b01 	ldrb.w	r3, [r1], #1
 801517a:	3b30      	subs	r3, #48	; 0x30
 801517c:	2b09      	cmp	r3, #9
 801517e:	d94e      	bls.n	801521e <_svfiprintf_r+0x17e>
 8015180:	b1b0      	cbz	r0, 80151b0 <_svfiprintf_r+0x110>
 8015182:	9207      	str	r2, [sp, #28]
 8015184:	e014      	b.n	80151b0 <_svfiprintf_r+0x110>
 8015186:	eba0 0308 	sub.w	r3, r0, r8
 801518a:	fa09 f303 	lsl.w	r3, r9, r3
 801518e:	4313      	orrs	r3, r2
 8015190:	9304      	str	r3, [sp, #16]
 8015192:	46a2      	mov	sl, r4
 8015194:	e7d2      	b.n	801513c <_svfiprintf_r+0x9c>
 8015196:	9b03      	ldr	r3, [sp, #12]
 8015198:	1d19      	adds	r1, r3, #4
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	9103      	str	r1, [sp, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	bfbb      	ittet	lt
 80151a2:	425b      	neglt	r3, r3
 80151a4:	f042 0202 	orrlt.w	r2, r2, #2
 80151a8:	9307      	strge	r3, [sp, #28]
 80151aa:	9307      	strlt	r3, [sp, #28]
 80151ac:	bfb8      	it	lt
 80151ae:	9204      	strlt	r2, [sp, #16]
 80151b0:	7823      	ldrb	r3, [r4, #0]
 80151b2:	2b2e      	cmp	r3, #46	; 0x2e
 80151b4:	d10c      	bne.n	80151d0 <_svfiprintf_r+0x130>
 80151b6:	7863      	ldrb	r3, [r4, #1]
 80151b8:	2b2a      	cmp	r3, #42	; 0x2a
 80151ba:	d135      	bne.n	8015228 <_svfiprintf_r+0x188>
 80151bc:	9b03      	ldr	r3, [sp, #12]
 80151be:	1d1a      	adds	r2, r3, #4
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	9203      	str	r2, [sp, #12]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	bfb8      	it	lt
 80151c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80151cc:	3402      	adds	r4, #2
 80151ce:	9305      	str	r3, [sp, #20]
 80151d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801529c <_svfiprintf_r+0x1fc>
 80151d4:	7821      	ldrb	r1, [r4, #0]
 80151d6:	2203      	movs	r2, #3
 80151d8:	4650      	mov	r0, sl
 80151da:	f7eb f811 	bl	8000200 <memchr>
 80151de:	b140      	cbz	r0, 80151f2 <_svfiprintf_r+0x152>
 80151e0:	2340      	movs	r3, #64	; 0x40
 80151e2:	eba0 000a 	sub.w	r0, r0, sl
 80151e6:	fa03 f000 	lsl.w	r0, r3, r0
 80151ea:	9b04      	ldr	r3, [sp, #16]
 80151ec:	4303      	orrs	r3, r0
 80151ee:	3401      	adds	r4, #1
 80151f0:	9304      	str	r3, [sp, #16]
 80151f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151f6:	4826      	ldr	r0, [pc, #152]	; (8015290 <_svfiprintf_r+0x1f0>)
 80151f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151fc:	2206      	movs	r2, #6
 80151fe:	f7ea ffff 	bl	8000200 <memchr>
 8015202:	2800      	cmp	r0, #0
 8015204:	d038      	beq.n	8015278 <_svfiprintf_r+0x1d8>
 8015206:	4b23      	ldr	r3, [pc, #140]	; (8015294 <_svfiprintf_r+0x1f4>)
 8015208:	bb1b      	cbnz	r3, 8015252 <_svfiprintf_r+0x1b2>
 801520a:	9b03      	ldr	r3, [sp, #12]
 801520c:	3307      	adds	r3, #7
 801520e:	f023 0307 	bic.w	r3, r3, #7
 8015212:	3308      	adds	r3, #8
 8015214:	9303      	str	r3, [sp, #12]
 8015216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015218:	4433      	add	r3, r6
 801521a:	9309      	str	r3, [sp, #36]	; 0x24
 801521c:	e767      	b.n	80150ee <_svfiprintf_r+0x4e>
 801521e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015222:	460c      	mov	r4, r1
 8015224:	2001      	movs	r0, #1
 8015226:	e7a5      	b.n	8015174 <_svfiprintf_r+0xd4>
 8015228:	2300      	movs	r3, #0
 801522a:	3401      	adds	r4, #1
 801522c:	9305      	str	r3, [sp, #20]
 801522e:	4619      	mov	r1, r3
 8015230:	f04f 0c0a 	mov.w	ip, #10
 8015234:	4620      	mov	r0, r4
 8015236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801523a:	3a30      	subs	r2, #48	; 0x30
 801523c:	2a09      	cmp	r2, #9
 801523e:	d903      	bls.n	8015248 <_svfiprintf_r+0x1a8>
 8015240:	2b00      	cmp	r3, #0
 8015242:	d0c5      	beq.n	80151d0 <_svfiprintf_r+0x130>
 8015244:	9105      	str	r1, [sp, #20]
 8015246:	e7c3      	b.n	80151d0 <_svfiprintf_r+0x130>
 8015248:	fb0c 2101 	mla	r1, ip, r1, r2
 801524c:	4604      	mov	r4, r0
 801524e:	2301      	movs	r3, #1
 8015250:	e7f0      	b.n	8015234 <_svfiprintf_r+0x194>
 8015252:	ab03      	add	r3, sp, #12
 8015254:	9300      	str	r3, [sp, #0]
 8015256:	462a      	mov	r2, r5
 8015258:	4b0f      	ldr	r3, [pc, #60]	; (8015298 <_svfiprintf_r+0x1f8>)
 801525a:	a904      	add	r1, sp, #16
 801525c:	4638      	mov	r0, r7
 801525e:	f7fc f831 	bl	80112c4 <_printf_float>
 8015262:	1c42      	adds	r2, r0, #1
 8015264:	4606      	mov	r6, r0
 8015266:	d1d6      	bne.n	8015216 <_svfiprintf_r+0x176>
 8015268:	89ab      	ldrh	r3, [r5, #12]
 801526a:	065b      	lsls	r3, r3, #25
 801526c:	f53f af2c 	bmi.w	80150c8 <_svfiprintf_r+0x28>
 8015270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015272:	b01d      	add	sp, #116	; 0x74
 8015274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015278:	ab03      	add	r3, sp, #12
 801527a:	9300      	str	r3, [sp, #0]
 801527c:	462a      	mov	r2, r5
 801527e:	4b06      	ldr	r3, [pc, #24]	; (8015298 <_svfiprintf_r+0x1f8>)
 8015280:	a904      	add	r1, sp, #16
 8015282:	4638      	mov	r0, r7
 8015284:	f7fc fac2 	bl	801180c <_printf_i>
 8015288:	e7eb      	b.n	8015262 <_svfiprintf_r+0x1c2>
 801528a:	bf00      	nop
 801528c:	0801695c 	.word	0x0801695c
 8015290:	08016966 	.word	0x08016966
 8015294:	080112c5 	.word	0x080112c5
 8015298:	08014fe9 	.word	0x08014fe9
 801529c:	08016962 	.word	0x08016962

080152a0 <_sungetc_r>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	1c4b      	adds	r3, r1, #1
 80152a4:	4614      	mov	r4, r2
 80152a6:	d103      	bne.n	80152b0 <_sungetc_r+0x10>
 80152a8:	f04f 35ff 	mov.w	r5, #4294967295
 80152ac:	4628      	mov	r0, r5
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	8993      	ldrh	r3, [r2, #12]
 80152b2:	f023 0320 	bic.w	r3, r3, #32
 80152b6:	8193      	strh	r3, [r2, #12]
 80152b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152ba:	6852      	ldr	r2, [r2, #4]
 80152bc:	b2cd      	uxtb	r5, r1
 80152be:	b18b      	cbz	r3, 80152e4 <_sungetc_r+0x44>
 80152c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80152c2:	4293      	cmp	r3, r2
 80152c4:	dd08      	ble.n	80152d8 <_sungetc_r+0x38>
 80152c6:	6823      	ldr	r3, [r4, #0]
 80152c8:	1e5a      	subs	r2, r3, #1
 80152ca:	6022      	str	r2, [r4, #0]
 80152cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80152d0:	6863      	ldr	r3, [r4, #4]
 80152d2:	3301      	adds	r3, #1
 80152d4:	6063      	str	r3, [r4, #4]
 80152d6:	e7e9      	b.n	80152ac <_sungetc_r+0xc>
 80152d8:	4621      	mov	r1, r4
 80152da:	f000 fcaf 	bl	8015c3c <__submore>
 80152de:	2800      	cmp	r0, #0
 80152e0:	d0f1      	beq.n	80152c6 <_sungetc_r+0x26>
 80152e2:	e7e1      	b.n	80152a8 <_sungetc_r+0x8>
 80152e4:	6921      	ldr	r1, [r4, #16]
 80152e6:	6823      	ldr	r3, [r4, #0]
 80152e8:	b151      	cbz	r1, 8015300 <_sungetc_r+0x60>
 80152ea:	4299      	cmp	r1, r3
 80152ec:	d208      	bcs.n	8015300 <_sungetc_r+0x60>
 80152ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80152f2:	42a9      	cmp	r1, r5
 80152f4:	d104      	bne.n	8015300 <_sungetc_r+0x60>
 80152f6:	3b01      	subs	r3, #1
 80152f8:	3201      	adds	r2, #1
 80152fa:	6023      	str	r3, [r4, #0]
 80152fc:	6062      	str	r2, [r4, #4]
 80152fe:	e7d5      	b.n	80152ac <_sungetc_r+0xc>
 8015300:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015308:	6363      	str	r3, [r4, #52]	; 0x34
 801530a:	2303      	movs	r3, #3
 801530c:	63a3      	str	r3, [r4, #56]	; 0x38
 801530e:	4623      	mov	r3, r4
 8015310:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015314:	6023      	str	r3, [r4, #0]
 8015316:	2301      	movs	r3, #1
 8015318:	e7dc      	b.n	80152d4 <_sungetc_r+0x34>

0801531a <__ssrefill_r>:
 801531a:	b510      	push	{r4, lr}
 801531c:	460c      	mov	r4, r1
 801531e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015320:	b169      	cbz	r1, 801533e <__ssrefill_r+0x24>
 8015322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015326:	4299      	cmp	r1, r3
 8015328:	d001      	beq.n	801532e <__ssrefill_r+0x14>
 801532a:	f7fb fe81 	bl	8011030 <_free_r>
 801532e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015330:	6063      	str	r3, [r4, #4]
 8015332:	2000      	movs	r0, #0
 8015334:	6360      	str	r0, [r4, #52]	; 0x34
 8015336:	b113      	cbz	r3, 801533e <__ssrefill_r+0x24>
 8015338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801533a:	6023      	str	r3, [r4, #0]
 801533c:	bd10      	pop	{r4, pc}
 801533e:	6923      	ldr	r3, [r4, #16]
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	2300      	movs	r3, #0
 8015344:	6063      	str	r3, [r4, #4]
 8015346:	89a3      	ldrh	r3, [r4, #12]
 8015348:	f043 0320 	orr.w	r3, r3, #32
 801534c:	81a3      	strh	r3, [r4, #12]
 801534e:	f04f 30ff 	mov.w	r0, #4294967295
 8015352:	e7f3      	b.n	801533c <__ssrefill_r+0x22>

08015354 <__ssvfiscanf_r>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	460c      	mov	r4, r1
 801535a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801535e:	2100      	movs	r1, #0
 8015360:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015364:	49b2      	ldr	r1, [pc, #712]	; (8015630 <__ssvfiscanf_r+0x2dc>)
 8015366:	91a0      	str	r1, [sp, #640]	; 0x280
 8015368:	f10d 0804 	add.w	r8, sp, #4
 801536c:	49b1      	ldr	r1, [pc, #708]	; (8015634 <__ssvfiscanf_r+0x2e0>)
 801536e:	4fb2      	ldr	r7, [pc, #712]	; (8015638 <__ssvfiscanf_r+0x2e4>)
 8015370:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801563c <__ssvfiscanf_r+0x2e8>
 8015374:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015378:	4606      	mov	r6, r0
 801537a:	91a1      	str	r1, [sp, #644]	; 0x284
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	f892 a000 	ldrb.w	sl, [r2]
 8015382:	f1ba 0f00 	cmp.w	sl, #0
 8015386:	f000 8151 	beq.w	801562c <__ssvfiscanf_r+0x2d8>
 801538a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801538e:	f013 0308 	ands.w	r3, r3, #8
 8015392:	f102 0501 	add.w	r5, r2, #1
 8015396:	d019      	beq.n	80153cc <__ssvfiscanf_r+0x78>
 8015398:	6863      	ldr	r3, [r4, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	dd0f      	ble.n	80153be <__ssvfiscanf_r+0x6a>
 801539e:	6823      	ldr	r3, [r4, #0]
 80153a0:	781a      	ldrb	r2, [r3, #0]
 80153a2:	5cba      	ldrb	r2, [r7, r2]
 80153a4:	0712      	lsls	r2, r2, #28
 80153a6:	d401      	bmi.n	80153ac <__ssvfiscanf_r+0x58>
 80153a8:	462a      	mov	r2, r5
 80153aa:	e7e8      	b.n	801537e <__ssvfiscanf_r+0x2a>
 80153ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80153ae:	3201      	adds	r2, #1
 80153b0:	9245      	str	r2, [sp, #276]	; 0x114
 80153b2:	6862      	ldr	r2, [r4, #4]
 80153b4:	3301      	adds	r3, #1
 80153b6:	3a01      	subs	r2, #1
 80153b8:	6062      	str	r2, [r4, #4]
 80153ba:	6023      	str	r3, [r4, #0]
 80153bc:	e7ec      	b.n	8015398 <__ssvfiscanf_r+0x44>
 80153be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80153c0:	4621      	mov	r1, r4
 80153c2:	4630      	mov	r0, r6
 80153c4:	4798      	blx	r3
 80153c6:	2800      	cmp	r0, #0
 80153c8:	d0e9      	beq.n	801539e <__ssvfiscanf_r+0x4a>
 80153ca:	e7ed      	b.n	80153a8 <__ssvfiscanf_r+0x54>
 80153cc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80153d0:	f040 8083 	bne.w	80154da <__ssvfiscanf_r+0x186>
 80153d4:	9341      	str	r3, [sp, #260]	; 0x104
 80153d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80153d8:	7853      	ldrb	r3, [r2, #1]
 80153da:	2b2a      	cmp	r3, #42	; 0x2a
 80153dc:	bf02      	ittt	eq
 80153de:	2310      	moveq	r3, #16
 80153e0:	1c95      	addeq	r5, r2, #2
 80153e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80153e4:	220a      	movs	r2, #10
 80153e6:	46ab      	mov	fp, r5
 80153e8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80153ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80153f0:	2b09      	cmp	r3, #9
 80153f2:	d91d      	bls.n	8015430 <__ssvfiscanf_r+0xdc>
 80153f4:	4891      	ldr	r0, [pc, #580]	; (801563c <__ssvfiscanf_r+0x2e8>)
 80153f6:	2203      	movs	r2, #3
 80153f8:	f7ea ff02 	bl	8000200 <memchr>
 80153fc:	b140      	cbz	r0, 8015410 <__ssvfiscanf_r+0xbc>
 80153fe:	2301      	movs	r3, #1
 8015400:	eba0 0009 	sub.w	r0, r0, r9
 8015404:	fa03 f000 	lsl.w	r0, r3, r0
 8015408:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801540a:	4318      	orrs	r0, r3
 801540c:	9041      	str	r0, [sp, #260]	; 0x104
 801540e:	465d      	mov	r5, fp
 8015410:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015414:	2b78      	cmp	r3, #120	; 0x78
 8015416:	d806      	bhi.n	8015426 <__ssvfiscanf_r+0xd2>
 8015418:	2b57      	cmp	r3, #87	; 0x57
 801541a:	d810      	bhi.n	801543e <__ssvfiscanf_r+0xea>
 801541c:	2b25      	cmp	r3, #37	; 0x25
 801541e:	d05c      	beq.n	80154da <__ssvfiscanf_r+0x186>
 8015420:	d856      	bhi.n	80154d0 <__ssvfiscanf_r+0x17c>
 8015422:	2b00      	cmp	r3, #0
 8015424:	d074      	beq.n	8015510 <__ssvfiscanf_r+0x1bc>
 8015426:	2303      	movs	r3, #3
 8015428:	9347      	str	r3, [sp, #284]	; 0x11c
 801542a:	230a      	movs	r3, #10
 801542c:	9342      	str	r3, [sp, #264]	; 0x108
 801542e:	e081      	b.n	8015534 <__ssvfiscanf_r+0x1e0>
 8015430:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015432:	fb02 1303 	mla	r3, r2, r3, r1
 8015436:	3b30      	subs	r3, #48	; 0x30
 8015438:	9343      	str	r3, [sp, #268]	; 0x10c
 801543a:	465d      	mov	r5, fp
 801543c:	e7d3      	b.n	80153e6 <__ssvfiscanf_r+0x92>
 801543e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015442:	2a20      	cmp	r2, #32
 8015444:	d8ef      	bhi.n	8015426 <__ssvfiscanf_r+0xd2>
 8015446:	a101      	add	r1, pc, #4	; (adr r1, 801544c <__ssvfiscanf_r+0xf8>)
 8015448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801544c:	0801551f 	.word	0x0801551f
 8015450:	08015427 	.word	0x08015427
 8015454:	08015427 	.word	0x08015427
 8015458:	0801557d 	.word	0x0801557d
 801545c:	08015427 	.word	0x08015427
 8015460:	08015427 	.word	0x08015427
 8015464:	08015427 	.word	0x08015427
 8015468:	08015427 	.word	0x08015427
 801546c:	08015427 	.word	0x08015427
 8015470:	08015427 	.word	0x08015427
 8015474:	08015427 	.word	0x08015427
 8015478:	08015593 	.word	0x08015593
 801547c:	08015569 	.word	0x08015569
 8015480:	080154d7 	.word	0x080154d7
 8015484:	080154d7 	.word	0x080154d7
 8015488:	080154d7 	.word	0x080154d7
 801548c:	08015427 	.word	0x08015427
 8015490:	0801556d 	.word	0x0801556d
 8015494:	08015427 	.word	0x08015427
 8015498:	08015427 	.word	0x08015427
 801549c:	08015427 	.word	0x08015427
 80154a0:	08015427 	.word	0x08015427
 80154a4:	080155a3 	.word	0x080155a3
 80154a8:	08015575 	.word	0x08015575
 80154ac:	08015517 	.word	0x08015517
 80154b0:	08015427 	.word	0x08015427
 80154b4:	08015427 	.word	0x08015427
 80154b8:	0801559f 	.word	0x0801559f
 80154bc:	08015427 	.word	0x08015427
 80154c0:	08015569 	.word	0x08015569
 80154c4:	08015427 	.word	0x08015427
 80154c8:	08015427 	.word	0x08015427
 80154cc:	0801551f 	.word	0x0801551f
 80154d0:	3b45      	subs	r3, #69	; 0x45
 80154d2:	2b02      	cmp	r3, #2
 80154d4:	d8a7      	bhi.n	8015426 <__ssvfiscanf_r+0xd2>
 80154d6:	2305      	movs	r3, #5
 80154d8:	e02b      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 80154da:	6863      	ldr	r3, [r4, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	dd0d      	ble.n	80154fc <__ssvfiscanf_r+0x1a8>
 80154e0:	6823      	ldr	r3, [r4, #0]
 80154e2:	781a      	ldrb	r2, [r3, #0]
 80154e4:	4552      	cmp	r2, sl
 80154e6:	f040 80a1 	bne.w	801562c <__ssvfiscanf_r+0x2d8>
 80154ea:	3301      	adds	r3, #1
 80154ec:	6862      	ldr	r2, [r4, #4]
 80154ee:	6023      	str	r3, [r4, #0]
 80154f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80154f2:	3a01      	subs	r2, #1
 80154f4:	3301      	adds	r3, #1
 80154f6:	6062      	str	r2, [r4, #4]
 80154f8:	9345      	str	r3, [sp, #276]	; 0x114
 80154fa:	e755      	b.n	80153a8 <__ssvfiscanf_r+0x54>
 80154fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80154fe:	4621      	mov	r1, r4
 8015500:	4630      	mov	r0, r6
 8015502:	4798      	blx	r3
 8015504:	2800      	cmp	r0, #0
 8015506:	d0eb      	beq.n	80154e0 <__ssvfiscanf_r+0x18c>
 8015508:	9844      	ldr	r0, [sp, #272]	; 0x110
 801550a:	2800      	cmp	r0, #0
 801550c:	f040 8084 	bne.w	8015618 <__ssvfiscanf_r+0x2c4>
 8015510:	f04f 30ff 	mov.w	r0, #4294967295
 8015514:	e086      	b.n	8015624 <__ssvfiscanf_r+0x2d0>
 8015516:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015518:	f042 0220 	orr.w	r2, r2, #32
 801551c:	9241      	str	r2, [sp, #260]	; 0x104
 801551e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015524:	9241      	str	r2, [sp, #260]	; 0x104
 8015526:	2210      	movs	r2, #16
 8015528:	2b6f      	cmp	r3, #111	; 0x6f
 801552a:	9242      	str	r2, [sp, #264]	; 0x108
 801552c:	bf34      	ite	cc
 801552e:	2303      	movcc	r3, #3
 8015530:	2304      	movcs	r3, #4
 8015532:	9347      	str	r3, [sp, #284]	; 0x11c
 8015534:	6863      	ldr	r3, [r4, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	dd41      	ble.n	80155be <__ssvfiscanf_r+0x26a>
 801553a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801553c:	0659      	lsls	r1, r3, #25
 801553e:	d404      	bmi.n	801554a <__ssvfiscanf_r+0x1f6>
 8015540:	6823      	ldr	r3, [r4, #0]
 8015542:	781a      	ldrb	r2, [r3, #0]
 8015544:	5cba      	ldrb	r2, [r7, r2]
 8015546:	0712      	lsls	r2, r2, #28
 8015548:	d440      	bmi.n	80155cc <__ssvfiscanf_r+0x278>
 801554a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801554c:	2b02      	cmp	r3, #2
 801554e:	dc4f      	bgt.n	80155f0 <__ssvfiscanf_r+0x29c>
 8015550:	466b      	mov	r3, sp
 8015552:	4622      	mov	r2, r4
 8015554:	a941      	add	r1, sp, #260	; 0x104
 8015556:	4630      	mov	r0, r6
 8015558:	f000 f9ce 	bl	80158f8 <_scanf_chars>
 801555c:	2801      	cmp	r0, #1
 801555e:	d065      	beq.n	801562c <__ssvfiscanf_r+0x2d8>
 8015560:	2802      	cmp	r0, #2
 8015562:	f47f af21 	bne.w	80153a8 <__ssvfiscanf_r+0x54>
 8015566:	e7cf      	b.n	8015508 <__ssvfiscanf_r+0x1b4>
 8015568:	220a      	movs	r2, #10
 801556a:	e7dd      	b.n	8015528 <__ssvfiscanf_r+0x1d4>
 801556c:	2300      	movs	r3, #0
 801556e:	9342      	str	r3, [sp, #264]	; 0x108
 8015570:	2303      	movs	r3, #3
 8015572:	e7de      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 8015574:	2308      	movs	r3, #8
 8015576:	9342      	str	r3, [sp, #264]	; 0x108
 8015578:	2304      	movs	r3, #4
 801557a:	e7da      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 801557c:	4629      	mov	r1, r5
 801557e:	4640      	mov	r0, r8
 8015580:	f000 fb22 	bl	8015bc8 <__sccl>
 8015584:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801558a:	9341      	str	r3, [sp, #260]	; 0x104
 801558c:	4605      	mov	r5, r0
 801558e:	2301      	movs	r3, #1
 8015590:	e7cf      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 8015592:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015598:	9341      	str	r3, [sp, #260]	; 0x104
 801559a:	2300      	movs	r3, #0
 801559c:	e7c9      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 801559e:	2302      	movs	r3, #2
 80155a0:	e7c7      	b.n	8015532 <__ssvfiscanf_r+0x1de>
 80155a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80155a4:	06c3      	lsls	r3, r0, #27
 80155a6:	f53f aeff 	bmi.w	80153a8 <__ssvfiscanf_r+0x54>
 80155aa:	9b00      	ldr	r3, [sp, #0]
 80155ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80155ae:	1d19      	adds	r1, r3, #4
 80155b0:	9100      	str	r1, [sp, #0]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	07c0      	lsls	r0, r0, #31
 80155b6:	bf4c      	ite	mi
 80155b8:	801a      	strhmi	r2, [r3, #0]
 80155ba:	601a      	strpl	r2, [r3, #0]
 80155bc:	e6f4      	b.n	80153a8 <__ssvfiscanf_r+0x54>
 80155be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80155c0:	4621      	mov	r1, r4
 80155c2:	4630      	mov	r0, r6
 80155c4:	4798      	blx	r3
 80155c6:	2800      	cmp	r0, #0
 80155c8:	d0b7      	beq.n	801553a <__ssvfiscanf_r+0x1e6>
 80155ca:	e79d      	b.n	8015508 <__ssvfiscanf_r+0x1b4>
 80155cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80155ce:	3201      	adds	r2, #1
 80155d0:	9245      	str	r2, [sp, #276]	; 0x114
 80155d2:	6862      	ldr	r2, [r4, #4]
 80155d4:	3a01      	subs	r2, #1
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	6062      	str	r2, [r4, #4]
 80155da:	dd02      	ble.n	80155e2 <__ssvfiscanf_r+0x28e>
 80155dc:	3301      	adds	r3, #1
 80155de:	6023      	str	r3, [r4, #0]
 80155e0:	e7ae      	b.n	8015540 <__ssvfiscanf_r+0x1ec>
 80155e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80155e4:	4621      	mov	r1, r4
 80155e6:	4630      	mov	r0, r6
 80155e8:	4798      	blx	r3
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d0a8      	beq.n	8015540 <__ssvfiscanf_r+0x1ec>
 80155ee:	e78b      	b.n	8015508 <__ssvfiscanf_r+0x1b4>
 80155f0:	2b04      	cmp	r3, #4
 80155f2:	dc06      	bgt.n	8015602 <__ssvfiscanf_r+0x2ae>
 80155f4:	466b      	mov	r3, sp
 80155f6:	4622      	mov	r2, r4
 80155f8:	a941      	add	r1, sp, #260	; 0x104
 80155fa:	4630      	mov	r0, r6
 80155fc:	f000 f9d4 	bl	80159a8 <_scanf_i>
 8015600:	e7ac      	b.n	801555c <__ssvfiscanf_r+0x208>
 8015602:	4b0f      	ldr	r3, [pc, #60]	; (8015640 <__ssvfiscanf_r+0x2ec>)
 8015604:	2b00      	cmp	r3, #0
 8015606:	f43f aecf 	beq.w	80153a8 <__ssvfiscanf_r+0x54>
 801560a:	466b      	mov	r3, sp
 801560c:	4622      	mov	r2, r4
 801560e:	a941      	add	r1, sp, #260	; 0x104
 8015610:	4630      	mov	r0, r6
 8015612:	f7fc fa21 	bl	8011a58 <_scanf_float>
 8015616:	e7a1      	b.n	801555c <__ssvfiscanf_r+0x208>
 8015618:	89a3      	ldrh	r3, [r4, #12]
 801561a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801561e:	bf18      	it	ne
 8015620:	f04f 30ff 	movne.w	r0, #4294967295
 8015624:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801562c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801562e:	e7f9      	b.n	8015624 <__ssvfiscanf_r+0x2d0>
 8015630:	080152a1 	.word	0x080152a1
 8015634:	0801531b 	.word	0x0801531b
 8015638:	080165ed 	.word	0x080165ed
 801563c:	08016962 	.word	0x08016962
 8015640:	08011a59 	.word	0x08011a59

08015644 <__sfputc_r>:
 8015644:	6893      	ldr	r3, [r2, #8]
 8015646:	3b01      	subs	r3, #1
 8015648:	2b00      	cmp	r3, #0
 801564a:	b410      	push	{r4}
 801564c:	6093      	str	r3, [r2, #8]
 801564e:	da08      	bge.n	8015662 <__sfputc_r+0x1e>
 8015650:	6994      	ldr	r4, [r2, #24]
 8015652:	42a3      	cmp	r3, r4
 8015654:	db01      	blt.n	801565a <__sfputc_r+0x16>
 8015656:	290a      	cmp	r1, #10
 8015658:	d103      	bne.n	8015662 <__sfputc_r+0x1e>
 801565a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801565e:	f000 bb27 	b.w	8015cb0 <__swbuf_r>
 8015662:	6813      	ldr	r3, [r2, #0]
 8015664:	1c58      	adds	r0, r3, #1
 8015666:	6010      	str	r0, [r2, #0]
 8015668:	7019      	strb	r1, [r3, #0]
 801566a:	4608      	mov	r0, r1
 801566c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015670:	4770      	bx	lr

08015672 <__sfputs_r>:
 8015672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015674:	4606      	mov	r6, r0
 8015676:	460f      	mov	r7, r1
 8015678:	4614      	mov	r4, r2
 801567a:	18d5      	adds	r5, r2, r3
 801567c:	42ac      	cmp	r4, r5
 801567e:	d101      	bne.n	8015684 <__sfputs_r+0x12>
 8015680:	2000      	movs	r0, #0
 8015682:	e007      	b.n	8015694 <__sfputs_r+0x22>
 8015684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015688:	463a      	mov	r2, r7
 801568a:	4630      	mov	r0, r6
 801568c:	f7ff ffda 	bl	8015644 <__sfputc_r>
 8015690:	1c43      	adds	r3, r0, #1
 8015692:	d1f3      	bne.n	801567c <__sfputs_r+0xa>
 8015694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015698 <_vfiprintf_r>:
 8015698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801569c:	460d      	mov	r5, r1
 801569e:	b09d      	sub	sp, #116	; 0x74
 80156a0:	4614      	mov	r4, r2
 80156a2:	4698      	mov	r8, r3
 80156a4:	4606      	mov	r6, r0
 80156a6:	b118      	cbz	r0, 80156b0 <_vfiprintf_r+0x18>
 80156a8:	6983      	ldr	r3, [r0, #24]
 80156aa:	b90b      	cbnz	r3, 80156b0 <_vfiprintf_r+0x18>
 80156ac:	f7fb fbba 	bl	8010e24 <__sinit>
 80156b0:	4b89      	ldr	r3, [pc, #548]	; (80158d8 <_vfiprintf_r+0x240>)
 80156b2:	429d      	cmp	r5, r3
 80156b4:	d11b      	bne.n	80156ee <_vfiprintf_r+0x56>
 80156b6:	6875      	ldr	r5, [r6, #4]
 80156b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ba:	07d9      	lsls	r1, r3, #31
 80156bc:	d405      	bmi.n	80156ca <_vfiprintf_r+0x32>
 80156be:	89ab      	ldrh	r3, [r5, #12]
 80156c0:	059a      	lsls	r2, r3, #22
 80156c2:	d402      	bmi.n	80156ca <_vfiprintf_r+0x32>
 80156c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156c6:	f7fb fc70 	bl	8010faa <__retarget_lock_acquire_recursive>
 80156ca:	89ab      	ldrh	r3, [r5, #12]
 80156cc:	071b      	lsls	r3, r3, #28
 80156ce:	d501      	bpl.n	80156d4 <_vfiprintf_r+0x3c>
 80156d0:	692b      	ldr	r3, [r5, #16]
 80156d2:	b9eb      	cbnz	r3, 8015710 <_vfiprintf_r+0x78>
 80156d4:	4629      	mov	r1, r5
 80156d6:	4630      	mov	r0, r6
 80156d8:	f000 fb4a 	bl	8015d70 <__swsetup_r>
 80156dc:	b1c0      	cbz	r0, 8015710 <_vfiprintf_r+0x78>
 80156de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156e0:	07dc      	lsls	r4, r3, #31
 80156e2:	d50e      	bpl.n	8015702 <_vfiprintf_r+0x6a>
 80156e4:	f04f 30ff 	mov.w	r0, #4294967295
 80156e8:	b01d      	add	sp, #116	; 0x74
 80156ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ee:	4b7b      	ldr	r3, [pc, #492]	; (80158dc <_vfiprintf_r+0x244>)
 80156f0:	429d      	cmp	r5, r3
 80156f2:	d101      	bne.n	80156f8 <_vfiprintf_r+0x60>
 80156f4:	68b5      	ldr	r5, [r6, #8]
 80156f6:	e7df      	b.n	80156b8 <_vfiprintf_r+0x20>
 80156f8:	4b79      	ldr	r3, [pc, #484]	; (80158e0 <_vfiprintf_r+0x248>)
 80156fa:	429d      	cmp	r5, r3
 80156fc:	bf08      	it	eq
 80156fe:	68f5      	ldreq	r5, [r6, #12]
 8015700:	e7da      	b.n	80156b8 <_vfiprintf_r+0x20>
 8015702:	89ab      	ldrh	r3, [r5, #12]
 8015704:	0598      	lsls	r0, r3, #22
 8015706:	d4ed      	bmi.n	80156e4 <_vfiprintf_r+0x4c>
 8015708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801570a:	f7fb fc4f 	bl	8010fac <__retarget_lock_release_recursive>
 801570e:	e7e9      	b.n	80156e4 <_vfiprintf_r+0x4c>
 8015710:	2300      	movs	r3, #0
 8015712:	9309      	str	r3, [sp, #36]	; 0x24
 8015714:	2320      	movs	r3, #32
 8015716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801571a:	f8cd 800c 	str.w	r8, [sp, #12]
 801571e:	2330      	movs	r3, #48	; 0x30
 8015720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80158e4 <_vfiprintf_r+0x24c>
 8015724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015728:	f04f 0901 	mov.w	r9, #1
 801572c:	4623      	mov	r3, r4
 801572e:	469a      	mov	sl, r3
 8015730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015734:	b10a      	cbz	r2, 801573a <_vfiprintf_r+0xa2>
 8015736:	2a25      	cmp	r2, #37	; 0x25
 8015738:	d1f9      	bne.n	801572e <_vfiprintf_r+0x96>
 801573a:	ebba 0b04 	subs.w	fp, sl, r4
 801573e:	d00b      	beq.n	8015758 <_vfiprintf_r+0xc0>
 8015740:	465b      	mov	r3, fp
 8015742:	4622      	mov	r2, r4
 8015744:	4629      	mov	r1, r5
 8015746:	4630      	mov	r0, r6
 8015748:	f7ff ff93 	bl	8015672 <__sfputs_r>
 801574c:	3001      	adds	r0, #1
 801574e:	f000 80aa 	beq.w	80158a6 <_vfiprintf_r+0x20e>
 8015752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015754:	445a      	add	r2, fp
 8015756:	9209      	str	r2, [sp, #36]	; 0x24
 8015758:	f89a 3000 	ldrb.w	r3, [sl]
 801575c:	2b00      	cmp	r3, #0
 801575e:	f000 80a2 	beq.w	80158a6 <_vfiprintf_r+0x20e>
 8015762:	2300      	movs	r3, #0
 8015764:	f04f 32ff 	mov.w	r2, #4294967295
 8015768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801576c:	f10a 0a01 	add.w	sl, sl, #1
 8015770:	9304      	str	r3, [sp, #16]
 8015772:	9307      	str	r3, [sp, #28]
 8015774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015778:	931a      	str	r3, [sp, #104]	; 0x68
 801577a:	4654      	mov	r4, sl
 801577c:	2205      	movs	r2, #5
 801577e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015782:	4858      	ldr	r0, [pc, #352]	; (80158e4 <_vfiprintf_r+0x24c>)
 8015784:	f7ea fd3c 	bl	8000200 <memchr>
 8015788:	9a04      	ldr	r2, [sp, #16]
 801578a:	b9d8      	cbnz	r0, 80157c4 <_vfiprintf_r+0x12c>
 801578c:	06d1      	lsls	r1, r2, #27
 801578e:	bf44      	itt	mi
 8015790:	2320      	movmi	r3, #32
 8015792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015796:	0713      	lsls	r3, r2, #28
 8015798:	bf44      	itt	mi
 801579a:	232b      	movmi	r3, #43	; 0x2b
 801579c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157a0:	f89a 3000 	ldrb.w	r3, [sl]
 80157a4:	2b2a      	cmp	r3, #42	; 0x2a
 80157a6:	d015      	beq.n	80157d4 <_vfiprintf_r+0x13c>
 80157a8:	9a07      	ldr	r2, [sp, #28]
 80157aa:	4654      	mov	r4, sl
 80157ac:	2000      	movs	r0, #0
 80157ae:	f04f 0c0a 	mov.w	ip, #10
 80157b2:	4621      	mov	r1, r4
 80157b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157b8:	3b30      	subs	r3, #48	; 0x30
 80157ba:	2b09      	cmp	r3, #9
 80157bc:	d94e      	bls.n	801585c <_vfiprintf_r+0x1c4>
 80157be:	b1b0      	cbz	r0, 80157ee <_vfiprintf_r+0x156>
 80157c0:	9207      	str	r2, [sp, #28]
 80157c2:	e014      	b.n	80157ee <_vfiprintf_r+0x156>
 80157c4:	eba0 0308 	sub.w	r3, r0, r8
 80157c8:	fa09 f303 	lsl.w	r3, r9, r3
 80157cc:	4313      	orrs	r3, r2
 80157ce:	9304      	str	r3, [sp, #16]
 80157d0:	46a2      	mov	sl, r4
 80157d2:	e7d2      	b.n	801577a <_vfiprintf_r+0xe2>
 80157d4:	9b03      	ldr	r3, [sp, #12]
 80157d6:	1d19      	adds	r1, r3, #4
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	9103      	str	r1, [sp, #12]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	bfbb      	ittet	lt
 80157e0:	425b      	neglt	r3, r3
 80157e2:	f042 0202 	orrlt.w	r2, r2, #2
 80157e6:	9307      	strge	r3, [sp, #28]
 80157e8:	9307      	strlt	r3, [sp, #28]
 80157ea:	bfb8      	it	lt
 80157ec:	9204      	strlt	r2, [sp, #16]
 80157ee:	7823      	ldrb	r3, [r4, #0]
 80157f0:	2b2e      	cmp	r3, #46	; 0x2e
 80157f2:	d10c      	bne.n	801580e <_vfiprintf_r+0x176>
 80157f4:	7863      	ldrb	r3, [r4, #1]
 80157f6:	2b2a      	cmp	r3, #42	; 0x2a
 80157f8:	d135      	bne.n	8015866 <_vfiprintf_r+0x1ce>
 80157fa:	9b03      	ldr	r3, [sp, #12]
 80157fc:	1d1a      	adds	r2, r3, #4
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	9203      	str	r2, [sp, #12]
 8015802:	2b00      	cmp	r3, #0
 8015804:	bfb8      	it	lt
 8015806:	f04f 33ff 	movlt.w	r3, #4294967295
 801580a:	3402      	adds	r4, #2
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80158f4 <_vfiprintf_r+0x25c>
 8015812:	7821      	ldrb	r1, [r4, #0]
 8015814:	2203      	movs	r2, #3
 8015816:	4650      	mov	r0, sl
 8015818:	f7ea fcf2 	bl	8000200 <memchr>
 801581c:	b140      	cbz	r0, 8015830 <_vfiprintf_r+0x198>
 801581e:	2340      	movs	r3, #64	; 0x40
 8015820:	eba0 000a 	sub.w	r0, r0, sl
 8015824:	fa03 f000 	lsl.w	r0, r3, r0
 8015828:	9b04      	ldr	r3, [sp, #16]
 801582a:	4303      	orrs	r3, r0
 801582c:	3401      	adds	r4, #1
 801582e:	9304      	str	r3, [sp, #16]
 8015830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015834:	482c      	ldr	r0, [pc, #176]	; (80158e8 <_vfiprintf_r+0x250>)
 8015836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801583a:	2206      	movs	r2, #6
 801583c:	f7ea fce0 	bl	8000200 <memchr>
 8015840:	2800      	cmp	r0, #0
 8015842:	d03f      	beq.n	80158c4 <_vfiprintf_r+0x22c>
 8015844:	4b29      	ldr	r3, [pc, #164]	; (80158ec <_vfiprintf_r+0x254>)
 8015846:	bb1b      	cbnz	r3, 8015890 <_vfiprintf_r+0x1f8>
 8015848:	9b03      	ldr	r3, [sp, #12]
 801584a:	3307      	adds	r3, #7
 801584c:	f023 0307 	bic.w	r3, r3, #7
 8015850:	3308      	adds	r3, #8
 8015852:	9303      	str	r3, [sp, #12]
 8015854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015856:	443b      	add	r3, r7
 8015858:	9309      	str	r3, [sp, #36]	; 0x24
 801585a:	e767      	b.n	801572c <_vfiprintf_r+0x94>
 801585c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015860:	460c      	mov	r4, r1
 8015862:	2001      	movs	r0, #1
 8015864:	e7a5      	b.n	80157b2 <_vfiprintf_r+0x11a>
 8015866:	2300      	movs	r3, #0
 8015868:	3401      	adds	r4, #1
 801586a:	9305      	str	r3, [sp, #20]
 801586c:	4619      	mov	r1, r3
 801586e:	f04f 0c0a 	mov.w	ip, #10
 8015872:	4620      	mov	r0, r4
 8015874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015878:	3a30      	subs	r2, #48	; 0x30
 801587a:	2a09      	cmp	r2, #9
 801587c:	d903      	bls.n	8015886 <_vfiprintf_r+0x1ee>
 801587e:	2b00      	cmp	r3, #0
 8015880:	d0c5      	beq.n	801580e <_vfiprintf_r+0x176>
 8015882:	9105      	str	r1, [sp, #20]
 8015884:	e7c3      	b.n	801580e <_vfiprintf_r+0x176>
 8015886:	fb0c 2101 	mla	r1, ip, r1, r2
 801588a:	4604      	mov	r4, r0
 801588c:	2301      	movs	r3, #1
 801588e:	e7f0      	b.n	8015872 <_vfiprintf_r+0x1da>
 8015890:	ab03      	add	r3, sp, #12
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	462a      	mov	r2, r5
 8015896:	4b16      	ldr	r3, [pc, #88]	; (80158f0 <_vfiprintf_r+0x258>)
 8015898:	a904      	add	r1, sp, #16
 801589a:	4630      	mov	r0, r6
 801589c:	f7fb fd12 	bl	80112c4 <_printf_float>
 80158a0:	4607      	mov	r7, r0
 80158a2:	1c78      	adds	r0, r7, #1
 80158a4:	d1d6      	bne.n	8015854 <_vfiprintf_r+0x1bc>
 80158a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158a8:	07d9      	lsls	r1, r3, #31
 80158aa:	d405      	bmi.n	80158b8 <_vfiprintf_r+0x220>
 80158ac:	89ab      	ldrh	r3, [r5, #12]
 80158ae:	059a      	lsls	r2, r3, #22
 80158b0:	d402      	bmi.n	80158b8 <_vfiprintf_r+0x220>
 80158b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158b4:	f7fb fb7a 	bl	8010fac <__retarget_lock_release_recursive>
 80158b8:	89ab      	ldrh	r3, [r5, #12]
 80158ba:	065b      	lsls	r3, r3, #25
 80158bc:	f53f af12 	bmi.w	80156e4 <_vfiprintf_r+0x4c>
 80158c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158c2:	e711      	b.n	80156e8 <_vfiprintf_r+0x50>
 80158c4:	ab03      	add	r3, sp, #12
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	462a      	mov	r2, r5
 80158ca:	4b09      	ldr	r3, [pc, #36]	; (80158f0 <_vfiprintf_r+0x258>)
 80158cc:	a904      	add	r1, sp, #16
 80158ce:	4630      	mov	r0, r6
 80158d0:	f7fb ff9c 	bl	801180c <_printf_i>
 80158d4:	e7e4      	b.n	80158a0 <_vfiprintf_r+0x208>
 80158d6:	bf00      	nop
 80158d8:	080164e4 	.word	0x080164e4
 80158dc:	08016504 	.word	0x08016504
 80158e0:	080164c4 	.word	0x080164c4
 80158e4:	0801695c 	.word	0x0801695c
 80158e8:	08016966 	.word	0x08016966
 80158ec:	080112c5 	.word	0x080112c5
 80158f0:	08015673 	.word	0x08015673
 80158f4:	08016962 	.word	0x08016962

080158f8 <_scanf_chars>:
 80158f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158fc:	4615      	mov	r5, r2
 80158fe:	688a      	ldr	r2, [r1, #8]
 8015900:	4680      	mov	r8, r0
 8015902:	460c      	mov	r4, r1
 8015904:	b932      	cbnz	r2, 8015914 <_scanf_chars+0x1c>
 8015906:	698a      	ldr	r2, [r1, #24]
 8015908:	2a00      	cmp	r2, #0
 801590a:	bf0c      	ite	eq
 801590c:	2201      	moveq	r2, #1
 801590e:	f04f 32ff 	movne.w	r2, #4294967295
 8015912:	608a      	str	r2, [r1, #8]
 8015914:	6822      	ldr	r2, [r4, #0]
 8015916:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80159a4 <_scanf_chars+0xac>
 801591a:	06d1      	lsls	r1, r2, #27
 801591c:	bf5f      	itttt	pl
 801591e:	681a      	ldrpl	r2, [r3, #0]
 8015920:	1d11      	addpl	r1, r2, #4
 8015922:	6019      	strpl	r1, [r3, #0]
 8015924:	6816      	ldrpl	r6, [r2, #0]
 8015926:	2700      	movs	r7, #0
 8015928:	69a0      	ldr	r0, [r4, #24]
 801592a:	b188      	cbz	r0, 8015950 <_scanf_chars+0x58>
 801592c:	2801      	cmp	r0, #1
 801592e:	d107      	bne.n	8015940 <_scanf_chars+0x48>
 8015930:	682b      	ldr	r3, [r5, #0]
 8015932:	781a      	ldrb	r2, [r3, #0]
 8015934:	6963      	ldr	r3, [r4, #20]
 8015936:	5c9b      	ldrb	r3, [r3, r2]
 8015938:	b953      	cbnz	r3, 8015950 <_scanf_chars+0x58>
 801593a:	bb27      	cbnz	r7, 8015986 <_scanf_chars+0x8e>
 801593c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015940:	2802      	cmp	r0, #2
 8015942:	d120      	bne.n	8015986 <_scanf_chars+0x8e>
 8015944:	682b      	ldr	r3, [r5, #0]
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	f813 3009 	ldrb.w	r3, [r3, r9]
 801594c:	071b      	lsls	r3, r3, #28
 801594e:	d41a      	bmi.n	8015986 <_scanf_chars+0x8e>
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	06da      	lsls	r2, r3, #27
 8015954:	bf5e      	ittt	pl
 8015956:	682b      	ldrpl	r3, [r5, #0]
 8015958:	781b      	ldrbpl	r3, [r3, #0]
 801595a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801595e:	682a      	ldr	r2, [r5, #0]
 8015960:	686b      	ldr	r3, [r5, #4]
 8015962:	3201      	adds	r2, #1
 8015964:	602a      	str	r2, [r5, #0]
 8015966:	68a2      	ldr	r2, [r4, #8]
 8015968:	3b01      	subs	r3, #1
 801596a:	3a01      	subs	r2, #1
 801596c:	606b      	str	r3, [r5, #4]
 801596e:	3701      	adds	r7, #1
 8015970:	60a2      	str	r2, [r4, #8]
 8015972:	b142      	cbz	r2, 8015986 <_scanf_chars+0x8e>
 8015974:	2b00      	cmp	r3, #0
 8015976:	dcd7      	bgt.n	8015928 <_scanf_chars+0x30>
 8015978:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801597c:	4629      	mov	r1, r5
 801597e:	4640      	mov	r0, r8
 8015980:	4798      	blx	r3
 8015982:	2800      	cmp	r0, #0
 8015984:	d0d0      	beq.n	8015928 <_scanf_chars+0x30>
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	f013 0310 	ands.w	r3, r3, #16
 801598c:	d105      	bne.n	801599a <_scanf_chars+0xa2>
 801598e:	68e2      	ldr	r2, [r4, #12]
 8015990:	3201      	adds	r2, #1
 8015992:	60e2      	str	r2, [r4, #12]
 8015994:	69a2      	ldr	r2, [r4, #24]
 8015996:	b102      	cbz	r2, 801599a <_scanf_chars+0xa2>
 8015998:	7033      	strb	r3, [r6, #0]
 801599a:	6923      	ldr	r3, [r4, #16]
 801599c:	441f      	add	r7, r3
 801599e:	6127      	str	r7, [r4, #16]
 80159a0:	2000      	movs	r0, #0
 80159a2:	e7cb      	b.n	801593c <_scanf_chars+0x44>
 80159a4:	080165ed 	.word	0x080165ed

080159a8 <_scanf_i>:
 80159a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ac:	4698      	mov	r8, r3
 80159ae:	4b74      	ldr	r3, [pc, #464]	; (8015b80 <_scanf_i+0x1d8>)
 80159b0:	460c      	mov	r4, r1
 80159b2:	4682      	mov	sl, r0
 80159b4:	4616      	mov	r6, r2
 80159b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80159ba:	b087      	sub	sp, #28
 80159bc:	ab03      	add	r3, sp, #12
 80159be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80159c2:	4b70      	ldr	r3, [pc, #448]	; (8015b84 <_scanf_i+0x1dc>)
 80159c4:	69a1      	ldr	r1, [r4, #24]
 80159c6:	4a70      	ldr	r2, [pc, #448]	; (8015b88 <_scanf_i+0x1e0>)
 80159c8:	2903      	cmp	r1, #3
 80159ca:	bf18      	it	ne
 80159cc:	461a      	movne	r2, r3
 80159ce:	68a3      	ldr	r3, [r4, #8]
 80159d0:	9201      	str	r2, [sp, #4]
 80159d2:	1e5a      	subs	r2, r3, #1
 80159d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80159d8:	bf88      	it	hi
 80159da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80159de:	4627      	mov	r7, r4
 80159e0:	bf82      	ittt	hi
 80159e2:	eb03 0905 	addhi.w	r9, r3, r5
 80159e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80159ea:	60a3      	strhi	r3, [r4, #8]
 80159ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80159f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80159f4:	bf98      	it	ls
 80159f6:	f04f 0900 	movls.w	r9, #0
 80159fa:	6023      	str	r3, [r4, #0]
 80159fc:	463d      	mov	r5, r7
 80159fe:	f04f 0b00 	mov.w	fp, #0
 8015a02:	6831      	ldr	r1, [r6, #0]
 8015a04:	ab03      	add	r3, sp, #12
 8015a06:	7809      	ldrb	r1, [r1, #0]
 8015a08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015a0c:	2202      	movs	r2, #2
 8015a0e:	f7ea fbf7 	bl	8000200 <memchr>
 8015a12:	b328      	cbz	r0, 8015a60 <_scanf_i+0xb8>
 8015a14:	f1bb 0f01 	cmp.w	fp, #1
 8015a18:	d159      	bne.n	8015ace <_scanf_i+0x126>
 8015a1a:	6862      	ldr	r2, [r4, #4]
 8015a1c:	b92a      	cbnz	r2, 8015a2a <_scanf_i+0x82>
 8015a1e:	6822      	ldr	r2, [r4, #0]
 8015a20:	2308      	movs	r3, #8
 8015a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015a26:	6063      	str	r3, [r4, #4]
 8015a28:	6022      	str	r2, [r4, #0]
 8015a2a:	6822      	ldr	r2, [r4, #0]
 8015a2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015a30:	6022      	str	r2, [r4, #0]
 8015a32:	68a2      	ldr	r2, [r4, #8]
 8015a34:	1e51      	subs	r1, r2, #1
 8015a36:	60a1      	str	r1, [r4, #8]
 8015a38:	b192      	cbz	r2, 8015a60 <_scanf_i+0xb8>
 8015a3a:	6832      	ldr	r2, [r6, #0]
 8015a3c:	1c51      	adds	r1, r2, #1
 8015a3e:	6031      	str	r1, [r6, #0]
 8015a40:	7812      	ldrb	r2, [r2, #0]
 8015a42:	f805 2b01 	strb.w	r2, [r5], #1
 8015a46:	6872      	ldr	r2, [r6, #4]
 8015a48:	3a01      	subs	r2, #1
 8015a4a:	2a00      	cmp	r2, #0
 8015a4c:	6072      	str	r2, [r6, #4]
 8015a4e:	dc07      	bgt.n	8015a60 <_scanf_i+0xb8>
 8015a50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015a54:	4631      	mov	r1, r6
 8015a56:	4650      	mov	r0, sl
 8015a58:	4790      	blx	r2
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	f040 8085 	bne.w	8015b6a <_scanf_i+0x1c2>
 8015a60:	f10b 0b01 	add.w	fp, fp, #1
 8015a64:	f1bb 0f03 	cmp.w	fp, #3
 8015a68:	d1cb      	bne.n	8015a02 <_scanf_i+0x5a>
 8015a6a:	6863      	ldr	r3, [r4, #4]
 8015a6c:	b90b      	cbnz	r3, 8015a72 <_scanf_i+0xca>
 8015a6e:	230a      	movs	r3, #10
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	6863      	ldr	r3, [r4, #4]
 8015a74:	4945      	ldr	r1, [pc, #276]	; (8015b8c <_scanf_i+0x1e4>)
 8015a76:	6960      	ldr	r0, [r4, #20]
 8015a78:	1ac9      	subs	r1, r1, r3
 8015a7a:	f000 f8a5 	bl	8015bc8 <__sccl>
 8015a7e:	f04f 0b00 	mov.w	fp, #0
 8015a82:	68a3      	ldr	r3, [r4, #8]
 8015a84:	6822      	ldr	r2, [r4, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d03d      	beq.n	8015b06 <_scanf_i+0x15e>
 8015a8a:	6831      	ldr	r1, [r6, #0]
 8015a8c:	6960      	ldr	r0, [r4, #20]
 8015a8e:	f891 c000 	ldrb.w	ip, [r1]
 8015a92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015a96:	2800      	cmp	r0, #0
 8015a98:	d035      	beq.n	8015b06 <_scanf_i+0x15e>
 8015a9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015a9e:	d124      	bne.n	8015aea <_scanf_i+0x142>
 8015aa0:	0510      	lsls	r0, r2, #20
 8015aa2:	d522      	bpl.n	8015aea <_scanf_i+0x142>
 8015aa4:	f10b 0b01 	add.w	fp, fp, #1
 8015aa8:	f1b9 0f00 	cmp.w	r9, #0
 8015aac:	d003      	beq.n	8015ab6 <_scanf_i+0x10e>
 8015aae:	3301      	adds	r3, #1
 8015ab0:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ab4:	60a3      	str	r3, [r4, #8]
 8015ab6:	6873      	ldr	r3, [r6, #4]
 8015ab8:	3b01      	subs	r3, #1
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	6073      	str	r3, [r6, #4]
 8015abe:	dd1b      	ble.n	8015af8 <_scanf_i+0x150>
 8015ac0:	6833      	ldr	r3, [r6, #0]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	6033      	str	r3, [r6, #0]
 8015ac6:	68a3      	ldr	r3, [r4, #8]
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	60a3      	str	r3, [r4, #8]
 8015acc:	e7d9      	b.n	8015a82 <_scanf_i+0xda>
 8015ace:	f1bb 0f02 	cmp.w	fp, #2
 8015ad2:	d1ae      	bne.n	8015a32 <_scanf_i+0x8a>
 8015ad4:	6822      	ldr	r2, [r4, #0]
 8015ad6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015ada:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015ade:	d1bf      	bne.n	8015a60 <_scanf_i+0xb8>
 8015ae0:	2310      	movs	r3, #16
 8015ae2:	6063      	str	r3, [r4, #4]
 8015ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015ae8:	e7a2      	b.n	8015a30 <_scanf_i+0x88>
 8015aea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015aee:	6022      	str	r2, [r4, #0]
 8015af0:	780b      	ldrb	r3, [r1, #0]
 8015af2:	f805 3b01 	strb.w	r3, [r5], #1
 8015af6:	e7de      	b.n	8015ab6 <_scanf_i+0x10e>
 8015af8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015afc:	4631      	mov	r1, r6
 8015afe:	4650      	mov	r0, sl
 8015b00:	4798      	blx	r3
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d0df      	beq.n	8015ac6 <_scanf_i+0x11e>
 8015b06:	6823      	ldr	r3, [r4, #0]
 8015b08:	05d9      	lsls	r1, r3, #23
 8015b0a:	d50d      	bpl.n	8015b28 <_scanf_i+0x180>
 8015b0c:	42bd      	cmp	r5, r7
 8015b0e:	d909      	bls.n	8015b24 <_scanf_i+0x17c>
 8015b10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b18:	4632      	mov	r2, r6
 8015b1a:	4650      	mov	r0, sl
 8015b1c:	4798      	blx	r3
 8015b1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8015b22:	464d      	mov	r5, r9
 8015b24:	42bd      	cmp	r5, r7
 8015b26:	d028      	beq.n	8015b7a <_scanf_i+0x1d2>
 8015b28:	6822      	ldr	r2, [r4, #0]
 8015b2a:	f012 0210 	ands.w	r2, r2, #16
 8015b2e:	d113      	bne.n	8015b58 <_scanf_i+0x1b0>
 8015b30:	702a      	strb	r2, [r5, #0]
 8015b32:	6863      	ldr	r3, [r4, #4]
 8015b34:	9e01      	ldr	r6, [sp, #4]
 8015b36:	4639      	mov	r1, r7
 8015b38:	4650      	mov	r0, sl
 8015b3a:	47b0      	blx	r6
 8015b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8015b40:	6821      	ldr	r1, [r4, #0]
 8015b42:	1d1a      	adds	r2, r3, #4
 8015b44:	f8c8 2000 	str.w	r2, [r8]
 8015b48:	f011 0f20 	tst.w	r1, #32
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	d00f      	beq.n	8015b70 <_scanf_i+0x1c8>
 8015b50:	6018      	str	r0, [r3, #0]
 8015b52:	68e3      	ldr	r3, [r4, #12]
 8015b54:	3301      	adds	r3, #1
 8015b56:	60e3      	str	r3, [r4, #12]
 8015b58:	1bed      	subs	r5, r5, r7
 8015b5a:	44ab      	add	fp, r5
 8015b5c:	6925      	ldr	r5, [r4, #16]
 8015b5e:	445d      	add	r5, fp
 8015b60:	6125      	str	r5, [r4, #16]
 8015b62:	2000      	movs	r0, #0
 8015b64:	b007      	add	sp, #28
 8015b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b6a:	f04f 0b00 	mov.w	fp, #0
 8015b6e:	e7ca      	b.n	8015b06 <_scanf_i+0x15e>
 8015b70:	07ca      	lsls	r2, r1, #31
 8015b72:	bf4c      	ite	mi
 8015b74:	8018      	strhmi	r0, [r3, #0]
 8015b76:	6018      	strpl	r0, [r3, #0]
 8015b78:	e7eb      	b.n	8015b52 <_scanf_i+0x1aa>
 8015b7a:	2001      	movs	r0, #1
 8015b7c:	e7f2      	b.n	8015b64 <_scanf_i+0x1bc>
 8015b7e:	bf00      	nop
 8015b80:	0801636c 	.word	0x0801636c
 8015b84:	08012fa5 	.word	0x08012fa5
 8015b88:	08012ea9 	.word	0x08012ea9
 8015b8c:	08016986 	.word	0x08016986

08015b90 <_read_r>:
 8015b90:	b538      	push	{r3, r4, r5, lr}
 8015b92:	4d07      	ldr	r5, [pc, #28]	; (8015bb0 <_read_r+0x20>)
 8015b94:	4604      	mov	r4, r0
 8015b96:	4608      	mov	r0, r1
 8015b98:	4611      	mov	r1, r2
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	602a      	str	r2, [r5, #0]
 8015b9e:	461a      	mov	r2, r3
 8015ba0:	f7ec fdda 	bl	8002758 <_read>
 8015ba4:	1c43      	adds	r3, r0, #1
 8015ba6:	d102      	bne.n	8015bae <_read_r+0x1e>
 8015ba8:	682b      	ldr	r3, [r5, #0]
 8015baa:	b103      	cbz	r3, 8015bae <_read_r+0x1e>
 8015bac:	6023      	str	r3, [r4, #0]
 8015bae:	bd38      	pop	{r3, r4, r5, pc}
 8015bb0:	20006e74 	.word	0x20006e74
 8015bb4:	00000000 	.word	0x00000000

08015bb8 <nan>:
 8015bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015bc0 <nan+0x8>
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop
 8015bc0:	00000000 	.word	0x00000000
 8015bc4:	7ff80000 	.word	0x7ff80000

08015bc8 <__sccl>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	780b      	ldrb	r3, [r1, #0]
 8015bcc:	4604      	mov	r4, r0
 8015bce:	2b5e      	cmp	r3, #94	; 0x5e
 8015bd0:	bf0b      	itete	eq
 8015bd2:	784b      	ldrbeq	r3, [r1, #1]
 8015bd4:	1c48      	addne	r0, r1, #1
 8015bd6:	1c88      	addeq	r0, r1, #2
 8015bd8:	2200      	movne	r2, #0
 8015bda:	bf08      	it	eq
 8015bdc:	2201      	moveq	r2, #1
 8015bde:	1e61      	subs	r1, r4, #1
 8015be0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015be4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015be8:	42a9      	cmp	r1, r5
 8015bea:	d1fb      	bne.n	8015be4 <__sccl+0x1c>
 8015bec:	b90b      	cbnz	r3, 8015bf2 <__sccl+0x2a>
 8015bee:	3801      	subs	r0, #1
 8015bf0:	bd70      	pop	{r4, r5, r6, pc}
 8015bf2:	f082 0101 	eor.w	r1, r2, #1
 8015bf6:	54e1      	strb	r1, [r4, r3]
 8015bf8:	1c42      	adds	r2, r0, #1
 8015bfa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015bfe:	2d2d      	cmp	r5, #45	; 0x2d
 8015c00:	f102 36ff 	add.w	r6, r2, #4294967295
 8015c04:	4610      	mov	r0, r2
 8015c06:	d006      	beq.n	8015c16 <__sccl+0x4e>
 8015c08:	2d5d      	cmp	r5, #93	; 0x5d
 8015c0a:	d0f1      	beq.n	8015bf0 <__sccl+0x28>
 8015c0c:	b90d      	cbnz	r5, 8015c12 <__sccl+0x4a>
 8015c0e:	4630      	mov	r0, r6
 8015c10:	e7ee      	b.n	8015bf0 <__sccl+0x28>
 8015c12:	462b      	mov	r3, r5
 8015c14:	e7ef      	b.n	8015bf6 <__sccl+0x2e>
 8015c16:	7816      	ldrb	r6, [r2, #0]
 8015c18:	2e5d      	cmp	r6, #93	; 0x5d
 8015c1a:	d0fa      	beq.n	8015c12 <__sccl+0x4a>
 8015c1c:	42b3      	cmp	r3, r6
 8015c1e:	dcf8      	bgt.n	8015c12 <__sccl+0x4a>
 8015c20:	4618      	mov	r0, r3
 8015c22:	3001      	adds	r0, #1
 8015c24:	4286      	cmp	r6, r0
 8015c26:	5421      	strb	r1, [r4, r0]
 8015c28:	dcfb      	bgt.n	8015c22 <__sccl+0x5a>
 8015c2a:	43d8      	mvns	r0, r3
 8015c2c:	4430      	add	r0, r6
 8015c2e:	1c5d      	adds	r5, r3, #1
 8015c30:	42b3      	cmp	r3, r6
 8015c32:	bfa8      	it	ge
 8015c34:	2000      	movge	r0, #0
 8015c36:	182b      	adds	r3, r5, r0
 8015c38:	3202      	adds	r2, #2
 8015c3a:	e7de      	b.n	8015bfa <__sccl+0x32>

08015c3c <__submore>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	460c      	mov	r4, r1
 8015c42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c48:	4299      	cmp	r1, r3
 8015c4a:	d11d      	bne.n	8015c88 <__submore+0x4c>
 8015c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015c50:	f7fb fa3e 	bl	80110d0 <_malloc_r>
 8015c54:	b918      	cbnz	r0, 8015c5e <__submore+0x22>
 8015c56:	f04f 30ff 	mov.w	r0, #4294967295
 8015c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c62:	63a3      	str	r3, [r4, #56]	; 0x38
 8015c64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015c68:	6360      	str	r0, [r4, #52]	; 0x34
 8015c6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015c6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015c72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015c76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015c7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015c7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015c82:	6020      	str	r0, [r4, #0]
 8015c84:	2000      	movs	r0, #0
 8015c86:	e7e8      	b.n	8015c5a <__submore+0x1e>
 8015c88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015c8a:	0077      	lsls	r7, r6, #1
 8015c8c:	463a      	mov	r2, r7
 8015c8e:	f7ff f985 	bl	8014f9c <_realloc_r>
 8015c92:	4605      	mov	r5, r0
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d0de      	beq.n	8015c56 <__submore+0x1a>
 8015c98:	eb00 0806 	add.w	r8, r0, r6
 8015c9c:	4601      	mov	r1, r0
 8015c9e:	4632      	mov	r2, r6
 8015ca0:	4640      	mov	r0, r8
 8015ca2:	f7fb f995 	bl	8010fd0 <memcpy>
 8015ca6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015caa:	f8c4 8000 	str.w	r8, [r4]
 8015cae:	e7e9      	b.n	8015c84 <__submore+0x48>

08015cb0 <__swbuf_r>:
 8015cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cb2:	460e      	mov	r6, r1
 8015cb4:	4614      	mov	r4, r2
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	b118      	cbz	r0, 8015cc2 <__swbuf_r+0x12>
 8015cba:	6983      	ldr	r3, [r0, #24]
 8015cbc:	b90b      	cbnz	r3, 8015cc2 <__swbuf_r+0x12>
 8015cbe:	f7fb f8b1 	bl	8010e24 <__sinit>
 8015cc2:	4b21      	ldr	r3, [pc, #132]	; (8015d48 <__swbuf_r+0x98>)
 8015cc4:	429c      	cmp	r4, r3
 8015cc6:	d12b      	bne.n	8015d20 <__swbuf_r+0x70>
 8015cc8:	686c      	ldr	r4, [r5, #4]
 8015cca:	69a3      	ldr	r3, [r4, #24]
 8015ccc:	60a3      	str	r3, [r4, #8]
 8015cce:	89a3      	ldrh	r3, [r4, #12]
 8015cd0:	071a      	lsls	r2, r3, #28
 8015cd2:	d52f      	bpl.n	8015d34 <__swbuf_r+0x84>
 8015cd4:	6923      	ldr	r3, [r4, #16]
 8015cd6:	b36b      	cbz	r3, 8015d34 <__swbuf_r+0x84>
 8015cd8:	6923      	ldr	r3, [r4, #16]
 8015cda:	6820      	ldr	r0, [r4, #0]
 8015cdc:	1ac0      	subs	r0, r0, r3
 8015cde:	6963      	ldr	r3, [r4, #20]
 8015ce0:	b2f6      	uxtb	r6, r6
 8015ce2:	4283      	cmp	r3, r0
 8015ce4:	4637      	mov	r7, r6
 8015ce6:	dc04      	bgt.n	8015cf2 <__swbuf_r+0x42>
 8015ce8:	4621      	mov	r1, r4
 8015cea:	4628      	mov	r0, r5
 8015cec:	f7fe f89a 	bl	8013e24 <_fflush_r>
 8015cf0:	bb30      	cbnz	r0, 8015d40 <__swbuf_r+0x90>
 8015cf2:	68a3      	ldr	r3, [r4, #8]
 8015cf4:	3b01      	subs	r3, #1
 8015cf6:	60a3      	str	r3, [r4, #8]
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	1c5a      	adds	r2, r3, #1
 8015cfc:	6022      	str	r2, [r4, #0]
 8015cfe:	701e      	strb	r6, [r3, #0]
 8015d00:	6963      	ldr	r3, [r4, #20]
 8015d02:	3001      	adds	r0, #1
 8015d04:	4283      	cmp	r3, r0
 8015d06:	d004      	beq.n	8015d12 <__swbuf_r+0x62>
 8015d08:	89a3      	ldrh	r3, [r4, #12]
 8015d0a:	07db      	lsls	r3, r3, #31
 8015d0c:	d506      	bpl.n	8015d1c <__swbuf_r+0x6c>
 8015d0e:	2e0a      	cmp	r6, #10
 8015d10:	d104      	bne.n	8015d1c <__swbuf_r+0x6c>
 8015d12:	4621      	mov	r1, r4
 8015d14:	4628      	mov	r0, r5
 8015d16:	f7fe f885 	bl	8013e24 <_fflush_r>
 8015d1a:	b988      	cbnz	r0, 8015d40 <__swbuf_r+0x90>
 8015d1c:	4638      	mov	r0, r7
 8015d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d20:	4b0a      	ldr	r3, [pc, #40]	; (8015d4c <__swbuf_r+0x9c>)
 8015d22:	429c      	cmp	r4, r3
 8015d24:	d101      	bne.n	8015d2a <__swbuf_r+0x7a>
 8015d26:	68ac      	ldr	r4, [r5, #8]
 8015d28:	e7cf      	b.n	8015cca <__swbuf_r+0x1a>
 8015d2a:	4b09      	ldr	r3, [pc, #36]	; (8015d50 <__swbuf_r+0xa0>)
 8015d2c:	429c      	cmp	r4, r3
 8015d2e:	bf08      	it	eq
 8015d30:	68ec      	ldreq	r4, [r5, #12]
 8015d32:	e7ca      	b.n	8015cca <__swbuf_r+0x1a>
 8015d34:	4621      	mov	r1, r4
 8015d36:	4628      	mov	r0, r5
 8015d38:	f000 f81a 	bl	8015d70 <__swsetup_r>
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	d0cb      	beq.n	8015cd8 <__swbuf_r+0x28>
 8015d40:	f04f 37ff 	mov.w	r7, #4294967295
 8015d44:	e7ea      	b.n	8015d1c <__swbuf_r+0x6c>
 8015d46:	bf00      	nop
 8015d48:	080164e4 	.word	0x080164e4
 8015d4c:	08016504 	.word	0x08016504
 8015d50:	080164c4 	.word	0x080164c4

08015d54 <__ascii_wctomb>:
 8015d54:	b149      	cbz	r1, 8015d6a <__ascii_wctomb+0x16>
 8015d56:	2aff      	cmp	r2, #255	; 0xff
 8015d58:	bf85      	ittet	hi
 8015d5a:	238a      	movhi	r3, #138	; 0x8a
 8015d5c:	6003      	strhi	r3, [r0, #0]
 8015d5e:	700a      	strbls	r2, [r1, #0]
 8015d60:	f04f 30ff 	movhi.w	r0, #4294967295
 8015d64:	bf98      	it	ls
 8015d66:	2001      	movls	r0, #1
 8015d68:	4770      	bx	lr
 8015d6a:	4608      	mov	r0, r1
 8015d6c:	4770      	bx	lr
	...

08015d70 <__swsetup_r>:
 8015d70:	4b32      	ldr	r3, [pc, #200]	; (8015e3c <__swsetup_r+0xcc>)
 8015d72:	b570      	push	{r4, r5, r6, lr}
 8015d74:	681d      	ldr	r5, [r3, #0]
 8015d76:	4606      	mov	r6, r0
 8015d78:	460c      	mov	r4, r1
 8015d7a:	b125      	cbz	r5, 8015d86 <__swsetup_r+0x16>
 8015d7c:	69ab      	ldr	r3, [r5, #24]
 8015d7e:	b913      	cbnz	r3, 8015d86 <__swsetup_r+0x16>
 8015d80:	4628      	mov	r0, r5
 8015d82:	f7fb f84f 	bl	8010e24 <__sinit>
 8015d86:	4b2e      	ldr	r3, [pc, #184]	; (8015e40 <__swsetup_r+0xd0>)
 8015d88:	429c      	cmp	r4, r3
 8015d8a:	d10f      	bne.n	8015dac <__swsetup_r+0x3c>
 8015d8c:	686c      	ldr	r4, [r5, #4]
 8015d8e:	89a3      	ldrh	r3, [r4, #12]
 8015d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d94:	0719      	lsls	r1, r3, #28
 8015d96:	d42c      	bmi.n	8015df2 <__swsetup_r+0x82>
 8015d98:	06dd      	lsls	r5, r3, #27
 8015d9a:	d411      	bmi.n	8015dc0 <__swsetup_r+0x50>
 8015d9c:	2309      	movs	r3, #9
 8015d9e:	6033      	str	r3, [r6, #0]
 8015da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015da4:	81a3      	strh	r3, [r4, #12]
 8015da6:	f04f 30ff 	mov.w	r0, #4294967295
 8015daa:	e03e      	b.n	8015e2a <__swsetup_r+0xba>
 8015dac:	4b25      	ldr	r3, [pc, #148]	; (8015e44 <__swsetup_r+0xd4>)
 8015dae:	429c      	cmp	r4, r3
 8015db0:	d101      	bne.n	8015db6 <__swsetup_r+0x46>
 8015db2:	68ac      	ldr	r4, [r5, #8]
 8015db4:	e7eb      	b.n	8015d8e <__swsetup_r+0x1e>
 8015db6:	4b24      	ldr	r3, [pc, #144]	; (8015e48 <__swsetup_r+0xd8>)
 8015db8:	429c      	cmp	r4, r3
 8015dba:	bf08      	it	eq
 8015dbc:	68ec      	ldreq	r4, [r5, #12]
 8015dbe:	e7e6      	b.n	8015d8e <__swsetup_r+0x1e>
 8015dc0:	0758      	lsls	r0, r3, #29
 8015dc2:	d512      	bpl.n	8015dea <__swsetup_r+0x7a>
 8015dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015dc6:	b141      	cbz	r1, 8015dda <__swsetup_r+0x6a>
 8015dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015dcc:	4299      	cmp	r1, r3
 8015dce:	d002      	beq.n	8015dd6 <__swsetup_r+0x66>
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7fb f92d 	bl	8011030 <_free_r>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8015dda:	89a3      	ldrh	r3, [r4, #12]
 8015ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015de0:	81a3      	strh	r3, [r4, #12]
 8015de2:	2300      	movs	r3, #0
 8015de4:	6063      	str	r3, [r4, #4]
 8015de6:	6923      	ldr	r3, [r4, #16]
 8015de8:	6023      	str	r3, [r4, #0]
 8015dea:	89a3      	ldrh	r3, [r4, #12]
 8015dec:	f043 0308 	orr.w	r3, r3, #8
 8015df0:	81a3      	strh	r3, [r4, #12]
 8015df2:	6923      	ldr	r3, [r4, #16]
 8015df4:	b94b      	cbnz	r3, 8015e0a <__swsetup_r+0x9a>
 8015df6:	89a3      	ldrh	r3, [r4, #12]
 8015df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e00:	d003      	beq.n	8015e0a <__swsetup_r+0x9a>
 8015e02:	4621      	mov	r1, r4
 8015e04:	4630      	mov	r0, r6
 8015e06:	f000 f845 	bl	8015e94 <__smakebuf_r>
 8015e0a:	89a0      	ldrh	r0, [r4, #12]
 8015e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e10:	f010 0301 	ands.w	r3, r0, #1
 8015e14:	d00a      	beq.n	8015e2c <__swsetup_r+0xbc>
 8015e16:	2300      	movs	r3, #0
 8015e18:	60a3      	str	r3, [r4, #8]
 8015e1a:	6963      	ldr	r3, [r4, #20]
 8015e1c:	425b      	negs	r3, r3
 8015e1e:	61a3      	str	r3, [r4, #24]
 8015e20:	6923      	ldr	r3, [r4, #16]
 8015e22:	b943      	cbnz	r3, 8015e36 <__swsetup_r+0xc6>
 8015e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e28:	d1ba      	bne.n	8015da0 <__swsetup_r+0x30>
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	0781      	lsls	r1, r0, #30
 8015e2e:	bf58      	it	pl
 8015e30:	6963      	ldrpl	r3, [r4, #20]
 8015e32:	60a3      	str	r3, [r4, #8]
 8015e34:	e7f4      	b.n	8015e20 <__swsetup_r+0xb0>
 8015e36:	2000      	movs	r0, #0
 8015e38:	e7f7      	b.n	8015e2a <__swsetup_r+0xba>
 8015e3a:	bf00      	nop
 8015e3c:	20000188 	.word	0x20000188
 8015e40:	080164e4 	.word	0x080164e4
 8015e44:	08016504 	.word	0x08016504
 8015e48:	080164c4 	.word	0x080164c4

08015e4c <__swhatbuf_r>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	460e      	mov	r6, r1
 8015e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e54:	2900      	cmp	r1, #0
 8015e56:	b096      	sub	sp, #88	; 0x58
 8015e58:	4614      	mov	r4, r2
 8015e5a:	461d      	mov	r5, r3
 8015e5c:	da07      	bge.n	8015e6e <__swhatbuf_r+0x22>
 8015e5e:	2300      	movs	r3, #0
 8015e60:	602b      	str	r3, [r5, #0]
 8015e62:	89b3      	ldrh	r3, [r6, #12]
 8015e64:	061a      	lsls	r2, r3, #24
 8015e66:	d410      	bmi.n	8015e8a <__swhatbuf_r+0x3e>
 8015e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e6c:	e00e      	b.n	8015e8c <__swhatbuf_r+0x40>
 8015e6e:	466a      	mov	r2, sp
 8015e70:	f000 f858 	bl	8015f24 <_fstat_r>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	dbf2      	blt.n	8015e5e <__swhatbuf_r+0x12>
 8015e78:	9a01      	ldr	r2, [sp, #4]
 8015e7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015e7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015e82:	425a      	negs	r2, r3
 8015e84:	415a      	adcs	r2, r3
 8015e86:	602a      	str	r2, [r5, #0]
 8015e88:	e7ee      	b.n	8015e68 <__swhatbuf_r+0x1c>
 8015e8a:	2340      	movs	r3, #64	; 0x40
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	6023      	str	r3, [r4, #0]
 8015e90:	b016      	add	sp, #88	; 0x58
 8015e92:	bd70      	pop	{r4, r5, r6, pc}

08015e94 <__smakebuf_r>:
 8015e94:	898b      	ldrh	r3, [r1, #12]
 8015e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e98:	079d      	lsls	r5, r3, #30
 8015e9a:	4606      	mov	r6, r0
 8015e9c:	460c      	mov	r4, r1
 8015e9e:	d507      	bpl.n	8015eb0 <__smakebuf_r+0x1c>
 8015ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	6123      	str	r3, [r4, #16]
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	6163      	str	r3, [r4, #20]
 8015eac:	b002      	add	sp, #8
 8015eae:	bd70      	pop	{r4, r5, r6, pc}
 8015eb0:	ab01      	add	r3, sp, #4
 8015eb2:	466a      	mov	r2, sp
 8015eb4:	f7ff ffca 	bl	8015e4c <__swhatbuf_r>
 8015eb8:	9900      	ldr	r1, [sp, #0]
 8015eba:	4605      	mov	r5, r0
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f7fb f907 	bl	80110d0 <_malloc_r>
 8015ec2:	b948      	cbnz	r0, 8015ed8 <__smakebuf_r+0x44>
 8015ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ec8:	059a      	lsls	r2, r3, #22
 8015eca:	d4ef      	bmi.n	8015eac <__smakebuf_r+0x18>
 8015ecc:	f023 0303 	bic.w	r3, r3, #3
 8015ed0:	f043 0302 	orr.w	r3, r3, #2
 8015ed4:	81a3      	strh	r3, [r4, #12]
 8015ed6:	e7e3      	b.n	8015ea0 <__smakebuf_r+0xc>
 8015ed8:	4b0d      	ldr	r3, [pc, #52]	; (8015f10 <__smakebuf_r+0x7c>)
 8015eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8015edc:	89a3      	ldrh	r3, [r4, #12]
 8015ede:	6020      	str	r0, [r4, #0]
 8015ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ee4:	81a3      	strh	r3, [r4, #12]
 8015ee6:	9b00      	ldr	r3, [sp, #0]
 8015ee8:	6163      	str	r3, [r4, #20]
 8015eea:	9b01      	ldr	r3, [sp, #4]
 8015eec:	6120      	str	r0, [r4, #16]
 8015eee:	b15b      	cbz	r3, 8015f08 <__smakebuf_r+0x74>
 8015ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	f000 f827 	bl	8015f48 <_isatty_r>
 8015efa:	b128      	cbz	r0, 8015f08 <__smakebuf_r+0x74>
 8015efc:	89a3      	ldrh	r3, [r4, #12]
 8015efe:	f023 0303 	bic.w	r3, r3, #3
 8015f02:	f043 0301 	orr.w	r3, r3, #1
 8015f06:	81a3      	strh	r3, [r4, #12]
 8015f08:	89a0      	ldrh	r0, [r4, #12]
 8015f0a:	4305      	orrs	r5, r0
 8015f0c:	81a5      	strh	r5, [r4, #12]
 8015f0e:	e7cd      	b.n	8015eac <__smakebuf_r+0x18>
 8015f10:	08010dbd 	.word	0x08010dbd

08015f14 <_malloc_usable_size_r>:
 8015f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f18:	1f18      	subs	r0, r3, #4
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	bfbc      	itt	lt
 8015f1e:	580b      	ldrlt	r3, [r1, r0]
 8015f20:	18c0      	addlt	r0, r0, r3
 8015f22:	4770      	bx	lr

08015f24 <_fstat_r>:
 8015f24:	b538      	push	{r3, r4, r5, lr}
 8015f26:	4d07      	ldr	r5, [pc, #28]	; (8015f44 <_fstat_r+0x20>)
 8015f28:	2300      	movs	r3, #0
 8015f2a:	4604      	mov	r4, r0
 8015f2c:	4608      	mov	r0, r1
 8015f2e:	4611      	mov	r1, r2
 8015f30:	602b      	str	r3, [r5, #0]
 8015f32:	f7ec fc56 	bl	80027e2 <_fstat>
 8015f36:	1c43      	adds	r3, r0, #1
 8015f38:	d102      	bne.n	8015f40 <_fstat_r+0x1c>
 8015f3a:	682b      	ldr	r3, [r5, #0]
 8015f3c:	b103      	cbz	r3, 8015f40 <_fstat_r+0x1c>
 8015f3e:	6023      	str	r3, [r4, #0]
 8015f40:	bd38      	pop	{r3, r4, r5, pc}
 8015f42:	bf00      	nop
 8015f44:	20006e74 	.word	0x20006e74

08015f48 <_isatty_r>:
 8015f48:	b538      	push	{r3, r4, r5, lr}
 8015f4a:	4d06      	ldr	r5, [pc, #24]	; (8015f64 <_isatty_r+0x1c>)
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	4604      	mov	r4, r0
 8015f50:	4608      	mov	r0, r1
 8015f52:	602b      	str	r3, [r5, #0]
 8015f54:	f7ec fc55 	bl	8002802 <_isatty>
 8015f58:	1c43      	adds	r3, r0, #1
 8015f5a:	d102      	bne.n	8015f62 <_isatty_r+0x1a>
 8015f5c:	682b      	ldr	r3, [r5, #0]
 8015f5e:	b103      	cbz	r3, 8015f62 <_isatty_r+0x1a>
 8015f60:	6023      	str	r3, [r4, #0]
 8015f62:	bd38      	pop	{r3, r4, r5, pc}
 8015f64:	20006e74 	.word	0x20006e74

08015f68 <_init>:
 8015f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f6a:	bf00      	nop
 8015f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f6e:	bc08      	pop	{r3}
 8015f70:	469e      	mov	lr, r3
 8015f72:	4770      	bx	lr

08015f74 <_fini>:
 8015f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f76:	bf00      	nop
 8015f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f7a:	bc08      	pop	{r3}
 8015f7c:	469e      	mov	lr, r3
 8015f7e:	4770      	bx	lr
