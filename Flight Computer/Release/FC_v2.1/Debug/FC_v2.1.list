
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f100  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  0800f2b0  0800f2b0  0001f2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc68  0800fc68  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc70  0800fc70  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc70  0800fc70  0001fc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc78  0800fc78  0001fc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800fc7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          00000f7c  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001184  20001184  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046b6e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000642d  00000000  00000000  00066da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003118  00000000  00000000  0006d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f08  00000000  00000000  000702f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009422  00000000  00000000  000731f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e6e0  00000000  00000000  0007c61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110273  00000000  00000000  000aacfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001baf6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e9bc  00000000  00000000  001bafc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f298 	.word	0x0800f298

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	0800f298 	.word	0x0800f298

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f004 fd44 	bl	8005ac4 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f004 fe21 	bl	8005cb8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f008 fa94 	bl	80095ca <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f003 fb1e 	bl	80046f0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f920 	bl	8004300 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f008 fa7d 	bl	80095ca <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f008 fa71 	bl	80095ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f008 fa69 	bl	80095ca <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00a fd4f 	bl	800bba8 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f008 fa4f 	bl	80095ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f008 fa47 	bl	80095ca <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f008 fa3e 	bl	80095ca <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f8e4 	bl	8004322 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 fac7 	bl	80046f0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f900 	bl	800436e <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f873 	bl	8004268 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fe4f 	bl	8003e2c <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f002 ff6b 	bl	8004070 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fe1d 	bl	8003de0 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ff39 	bl	8004024 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f008 fa04 	bl	80095ca <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000970 	.word	0x20000970
 80011e0:	0800f2b0 	.word	0x0800f2b0
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000224 	.word	0x20000224
 80011f0:	0800f2c8 	.word	0x0800f2c8
 80011f4:	0800f2e0 	.word	0x0800f2e0
 80011f8:	0800f2ec 	.word	0x0800f2ec
 80011fc:	0800f300 	.word	0x0800f300
 8001200:	0800f308 	.word	0x0800f308
 8001204:	0800f320 	.word	0x0800f320
 8001208:	20000225 	.word	0x20000225
 800120c:	0800f328 	.word	0x0800f328

08001210 <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08d      	sub	sp, #52	; 0x34
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	2216      	movs	r2, #22
 800122c:	4948      	ldr	r1, [pc, #288]	; (8001350 <MRT_LPS22HH_Setup+0x140>)
 800122e:	f008 f9cc 	bl	80095ca <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 8001232:	4b48      	ldr	r3, [pc, #288]	; (8001354 <MRT_LPS22HH_Setup+0x144>)
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <MRT_LPS22HH_Setup+0x148>)
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800123e:	2064      	movs	r0, #100	; 0x64
 8001240:	f003 fa56 	bl	80046f0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8001244:	4b45      	ldr	r3, [pc, #276]	; (800135c <MRT_LPS22HH_Setup+0x14c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4943      	ldr	r1, [pc, #268]	; (800135c <MRT_LPS22HH_Setup+0x14c>)
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fd45 	bl	8003ce0 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2216      	movs	r2, #22
 8001260:	493f      	ldr	r1, [pc, #252]	; (8001360 <MRT_LPS22HH_Setup+0x150>)
 8001262:	f008 f9b2 	bl	80095ca <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <MRT_LPS22HH_Setup+0x14c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2bb3      	cmp	r3, #179	; 0xb3
 800126c:	d031      	beq.n	80012d2 <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	2208      	movs	r2, #8
 8001278:	493a      	ldr	r1, [pc, #232]	; (8001364 <MRT_LPS22HH_Setup+0x154>)
 800127a:	f008 f9a6 	bl	80095ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	2210      	movs	r2, #16
 8001288:	4937      	ldr	r1, [pc, #220]	; (8001368 <MRT_LPS22HH_Setup+0x158>)
 800128a:	f008 f99e 	bl	80095ca <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <MRT_LPS22HH_Setup+0x14c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4934      	ldr	r1, [pc, #208]	; (800136c <MRT_LPS22HH_Setup+0x15c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f00a fc84 	bl	800bba8 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 80012a2:	681c      	ldr	r4, [r3, #0]
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffa1 	bl	80001f0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f107 0114 	add.w	r1, r7, #20
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	4620      	mov	r0, r4
 80012bc:	f008 f985 	bl	80095ca <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2216      	movs	r2, #22
 80012ca:	4929      	ldr	r1, [pc, #164]	; (8001370 <MRT_LPS22HH_Setup+0x160>)
 80012cc:	f008 f97d 	bl	80095ca <HAL_UART_Transmit>
		  while(1);
 80012d0:	e7fe      	b.n	80012d0 <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	2204      	movs	r2, #4
 80012dc:	4925      	ldr	r1, [pc, #148]	; (8001374 <MRT_LPS22HH_Setup+0x164>)
 80012de:	f008 f974 	bl	80095ca <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	2101      	movs	r1, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fd0a 	bl	8003d02 <lps22hh_reset_set>

	  HAL_Delay(1000);
 80012ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f2:	f003 f9fd 	bl	80046f0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	491f      	ldr	r1, [pc, #124]	; (8001378 <MRT_LPS22HH_Setup+0x168>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fd26 	bl	8003d4e <lps22hh_reset_get>
	  } while (lps_rst);
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MRT_LPS22HH_Setup+0x168>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f5      	bne.n	80012f6 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fc71 	bl	8003bf8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	2115      	movs	r1, #21
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fc91 	bl	8003c44 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MRT_LPS22HH_Setup+0x13c>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	2218      	movs	r2, #24
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <MRT_LPS22HH_Setup+0x16c>)
 800132e:	f008 f94c 	bl	80095ca <HAL_UART_Transmit>

	  return lps_ctx;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	461c      	mov	r4, r3
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	3734      	adds	r7, #52	; 0x34
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000970 	.word	0x20000970
 8001350:	0800f340 	.word	0x0800f340
 8001354:	08001381 	.word	0x08001381
 8001358:	080013bb 	.word	0x080013bb
 800135c:	20000226 	.word	0x20000226
 8001360:	0800f2c8 	.word	0x0800f2c8
 8001364:	0800f2e0 	.word	0x0800f2e0
 8001368:	0800f2ec 	.word	0x0800f2ec
 800136c:	0800f300 	.word	0x0800f300
 8001370:	0800f308 	.word	0x0800f308
 8001374:	0800f320 	.word	0x0800f320
 8001378:	20000227 	.word	0x20000227
 800137c:	0800f358 	.word	0x0800f358

08001380 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af04      	add	r7, sp, #16
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	72fb      	strb	r3, [r7, #11]
 8001390:	4613      	mov	r3, r2
 8001392:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	b29a      	uxth	r2, r3
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	893b      	ldrh	r3, [r7, #8]
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	21b9      	movs	r1, #185	; 0xb9
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f004 fb8a 	bl	8005ac4 <HAL_I2C_Mem_Write>
  return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b088      	sub	sp, #32
 80013be:	af04      	add	r7, sp, #16
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	72fb      	strb	r3, [r7, #11]
 80013ca:	4613      	mov	r3, r2
 80013cc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	893b      	ldrh	r3, [r7, #8]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	21b9      	movs	r1, #185	; 0xb9
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f004 fc67 	bl	8005cb8 <HAL_I2C_Mem_Read>
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013f8:	f3bf 8f4f 	dsb	sy
}
 80013fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <__NVIC_SystemReset+0x24>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001406:	4904      	ldr	r1, [pc, #16]	; (8001418 <__NVIC_SystemReset+0x24>)
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_SystemReset+0x28>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800140e:	f3bf 8f4f 	dsb	sy
}
 8001412:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <__NVIC_SystemReset+0x20>
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	05fa0004 	.word	0x05fa0004

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b0c1      	sub	sp, #260	; 0x104
 8001424:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f003 f921 	bl	800466c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f94b 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142e:	f000 fcc1 	bl	8001db4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001432:	f000 f9a9 	bl	8001788 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001436:	f000 f9f9 	bl	800182c <MX_I2C1_Init>
  MX_I2C2_Init();
 800143a:	f000 fa37 	bl	80018ac <MX_I2C2_Init>
  MX_I2C3_Init();
 800143e:	f000 fa75 	bl	800192c <MX_I2C3_Init>
  MX_SPI2_Init();
 8001442:	f000 fb3f 	bl	8001ac4 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001446:	f000 fb73 	bl	8001b30 <MX_SPI4_Init>
  MX_SPI5_Init();
 800144a:	f000 fba7 	bl	8001b9c <MX_SPI5_Init>
  MX_TIM2_Init();
 800144e:	f000 fbdb 	bl	8001c08 <MX_TIM2_Init>
  MX_UART8_Init();
 8001452:	f000 fc31 	bl	8001cb8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001456:	f000 fc59 	bl	8001d0c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800145a:	f000 fc81 	bl	8001d60 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800145e:	f000 faa5 	bl	80019ac <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	4888      	ldr	r0, [pc, #544]	; (8001688 <main+0x268>)
 8001468:	f004 f9b6 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2104      	movs	r1, #4
 8001470:	4885      	ldr	r0, [pc, #532]	; (8001688 <main+0x268>)
 8001472:	f004 f9b1 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4883      	ldr	r0, [pc, #524]	; (8001688 <main+0x268>)
 800147c:	f004 f9ac 	bl	80057d8 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	4881      	ldr	r0, [pc, #516]	; (800168c <main+0x26c>)
 8001488:	f004 f9a6 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	487e      	ldr	r0, [pc, #504]	; (800168c <main+0x26c>)
 8001494:	f004 f9a0 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149e:	487b      	ldr	r0, [pc, #492]	; (800168c <main+0x26c>)
 80014a0:	f004 f99a 	bl	80057d8 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4878      	ldr	r0, [pc, #480]	; (800168c <main+0x26c>)
 80014aa:	f004 f995 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	4876      	ldr	r0, [pc, #472]	; (8001690 <main+0x270>)
 80014b6:	f004 f98f 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c0:	4873      	ldr	r0, [pc, #460]	; (8001690 <main+0x270>)
 80014c2:	f004 f989 	bl	80057d8 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80014c6:	2200      	movs	r2, #0
 80014c8:	2104      	movs	r1, #4
 80014ca:	4872      	ldr	r0, [pc, #456]	; (8001694 <main+0x274>)
 80014cc:	f004 f984 	bl	80057d8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d6:	486f      	ldr	r0, [pc, #444]	; (8001694 <main+0x274>)
 80014d8:	f004 f97e 	bl	80057d8 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e2:	486a      	ldr	r0, [pc, #424]	; (800168c <main+0x26c>)
 80014e4:	f004 f978 	bl	80057d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80014e8:	2200      	movs	r2, #0
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	486a      	ldr	r0, [pc, #424]	; (8001698 <main+0x278>)
 80014ee:	f004 f973 	bl	80057d8 <HAL_GPIO_WritePin>



  #define DEBUG_USART huart8

  checkForI2CDevices(huart8,hi2c1);
 80014f2:	4e6a      	ldr	r6, [pc, #424]	; (800169c <main+0x27c>)
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <main+0x280>)
 80014f6:	ab0d      	add	r3, sp, #52	; 0x34
 80014f8:	4611      	mov	r1, r2
 80014fa:	2254      	movs	r2, #84	; 0x54
 80014fc:	4618      	mov	r0, r3
 80014fe:	f009 fba5 	bl	800ac4c <memcpy>
 8001502:	466d      	mov	r5, sp
 8001504:	f106 0410 	add.w	r4, r6, #16
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800151c:	f001 fbb6 	bl	8002c8c <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 8001520:	4e5e      	ldr	r6, [pc, #376]	; (800169c <main+0x27c>)
 8001522:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <main+0x284>)
 8001524:	ab0d      	add	r3, sp, #52	; 0x34
 8001526:	4611      	mov	r1, r2
 8001528:	2254      	movs	r2, #84	; 0x54
 800152a:	4618      	mov	r0, r3
 800152c:	f009 fb8e 	bl	800ac4c <memcpy>
 8001530:	466d      	mov	r5, sp
 8001532:	f106 0410 	add.w	r4, r6, #16
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800154a:	f001 fb9f 	bl	8002c8c <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 800154e:	4e53      	ldr	r6, [pc, #332]	; (800169c <main+0x27c>)
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <main+0x288>)
 8001552:	ab0d      	add	r3, sp, #52	; 0x34
 8001554:	4611      	mov	r1, r2
 8001556:	2254      	movs	r2, #84	; 0x54
 8001558:	4618      	mov	r0, r3
 800155a:	f009 fb77 	bl	800ac4c <memcpy>
 800155e:	466d      	mov	r5, sp
 8001560:	f106 0410 	add.w	r4, r6, #16
 8001564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	602b      	str	r3, [r5, #0]
 8001574:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001578:	f001 fb88 	bl	8002c8c <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 800157c:	4c4b      	ldr	r4, [pc, #300]	; (80016ac <main+0x28c>)
 800157e:	463b      	mov	r3, r7
 8001580:	4a46      	ldr	r2, [pc, #280]	; (800169c <main+0x27c>)
 8001582:	4949      	ldr	r1, [pc, #292]	; (80016a8 <main+0x288>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fd7b 	bl	8001080 <MRT_LSM6DSR_Setup>
 800158a:	463b      	mov	r3, r7
 800158c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001590:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 8001594:	4c46      	ldr	r4, [pc, #280]	; (80016b0 <main+0x290>)
 8001596:	463b      	mov	r3, r7
 8001598:	4a40      	ldr	r2, [pc, #256]	; (800169c <main+0x27c>)
 800159a:	4943      	ldr	r1, [pc, #268]	; (80016a8 <main+0x288>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe37 	bl	8001210 <MRT_LPS22HH_Setup>
 80015a2:	463b      	mov	r3, r7
 80015a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 80015ac:	493b      	ldr	r1, [pc, #236]	; (800169c <main+0x27c>)
 80015ae:	4841      	ldr	r0, [pc, #260]	; (80016b4 <main+0x294>)
 80015b0:	f001 fa7c 	bl	8002aac <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015be:	f004 f90b 	bl	80057d8 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 80015c2:	4c3d      	ldr	r4, [pc, #244]	; (80016b8 <main+0x298>)
 80015c4:	4668      	mov	r0, sp
 80015c6:	f104 0310 	add.w	r3, r4, #16
 80015ca:	2248      	movs	r2, #72	; 0x48
 80015cc:	4619      	mov	r1, r3
 80015ce:	f009 fb3d 	bl	800ac4c <memcpy>
 80015d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d6:	f008 fba9 	bl	8009d2c <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	4837      	ldr	r0, [pc, #220]	; (80016bc <main+0x29c>)
 80015e0:	f008 fb4c 	bl	8009c7c <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80015e4:	2108      	movs	r1, #8
 80015e6:	4829      	ldr	r0, [pc, #164]	; (800168c <main+0x26c>)
 80015e8:	f008 fb5e 	bl	8009ca8 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80015ec:	2104      	movs	r1, #4
 80015ee:	4827      	ldr	r0, [pc, #156]	; (800168c <main+0x26c>)
 80015f0:	f008 fb70 	bl	8009cd4 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 80015f4:	2110      	movs	r1, #16
 80015f6:	4825      	ldr	r0, [pc, #148]	; (800168c <main+0x26c>)
 80015f8:	f008 fb82 	bl	8009d00 <set_DIO1_pin>
	Tx_setup();
 80015fc:	f008 fbae 	bl	8009d5c <Tx_setup>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 8001600:	4e26      	ldr	r6, [pc, #152]	; (800169c <main+0x27c>)
 8001602:	230a      	movs	r3, #10
 8001604:	930d      	str	r3, [sp, #52]	; 0x34
 8001606:	466d      	mov	r5, sp
 8001608:	f106 0410 	add.w	r4, r6, #16
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	602b      	str	r3, [r5, #0]
 800161c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001620:	f002 ff4a 	bl	80044b8 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	2213      	movs	r2, #19
 800162a:	4925      	ldr	r1, [pc, #148]	; (80016c0 <main+0x2a0>)
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <main+0x27c>)
 800162e:	f007 ffcc 	bl	80095ca <HAL_UART_Transmit>
   * For Internal Flash Memory
   * -Set the address of the values in MRT_Helpers.c (VirtAddVarTab)
   * -Map the values to their respective address in MRT_Helpers.h
   */
  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8001632:	f003 fc5b 	bl	8004eec <HAL_FLASH_Unlock>

  /* EEPROM Init */
  if( EE_Init() != EE_OK)
 8001636:	f001 fbf3 	bl	8002e20 <EE_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <main+0x22e>
  {
	HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2102      	movs	r1, #2
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <main+0x268>)
 8001646:	f004 f8c7 	bl	80057d8 <HAL_GPIO_WritePin>
    Error_Handler();
 800164a:	f000 fd57 	bl	80020fc <Error_Handler>
  }
  MRT_getFlags();
 800164e:	f001 fa61 	bl	8002b14 <MRT_getFlags>
  MRT_resetInfo(&DEBUG_USART);
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <main+0x27c>)
 8001654:	f001 facc 	bl	8002bf0 <MRT_resetInfo>

  char buffer[100];
  //sprintf(buffer,"Reset: %i,  WU: %i\r\n",0,0);
  //sprintf(buffer,"Reset: %i,  WU: %i\r\n",reset_flag, wakeup_flag);
  HAL_UART_Transmit(&huart8, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdc7 	bl	80001f0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	f107 0114 	add.w	r1, r7, #20
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <main+0x27c>)
 8001670:	f007 ffab 	bl	80095ca <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001678:	f003 f83a 	bl	80046f0 <HAL_Delay>

  /*For testing*/
  HAL_Delay(1000);
 800167c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001680:	f003 f836 	bl	80046f0 <HAL_Delay>
  NVIC_SystemReset();
 8001684:	f7ff feb6 	bl	80013f4 <__NVIC_SystemReset>
 8001688:	40020800 	.word	0x40020800
 800168c:	40021800 	.word	0x40021800
 8001690:	40021400 	.word	0x40021400
 8001694:	40021000 	.word	0x40021000
 8001698:	40020c00 	.word	0x40020c00
 800169c:	20000ef0 	.word	0x20000ef0
 80016a0:	20000ad8 	.word	0x20000ad8
 80016a4:	20000b38 	.word	0x20000b38
 80016a8:	20000974 	.word	0x20000974
 80016ac:	20000fdc 	.word	0x20000fdc
 80016b0:	20000fd0 	.word	0x20000fd0
 80016b4:	20000f34 	.word	0x20000f34
 80016b8:	200009c8 	.word	0x200009c8
 80016bc:	40020400 	.word	0x40020400
 80016c0:	0800f3d8 	.word	0x0800f3d8

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f009 fae2 	bl	800ac9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <SystemClock_Config+0xbc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a23      	ldr	r2, [pc, #140]	; (8001780 <SystemClock_Config+0xbc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <SystemClock_Config+0xbc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <SystemClock_Config+0xc0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <SystemClock_Config+0xc0>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SystemClock_Config+0xc0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001724:	2309      	movs	r3, #9
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800172e:	2301      	movs	r3, #1
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4618      	mov	r0, r3
 800173c:	f005 fa30 	bl	8006ba0 <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001746:	f000 fcd9 	bl	80020fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	230f      	movs	r3, #15
 800174c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fc92 	bl	8007090 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001772:	f000 fcc3 	bl	80020fc <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	; 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_ADC1_Init+0x98>)
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_ADC1_Init+0x9c>)
 800179e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_ADC1_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_ADC1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_ADC1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_ADC1_Init+0x98>)
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <MX_ADC1_Init+0xa0>)
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_ADC1_Init+0x98>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_ADC1_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_ADC1_Init+0x98>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_ADC1_Init+0x98>)
 80017e8:	f002 ffa6 	bl	8004738 <HAL_ADC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 fc83 	bl	80020fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017f6:	2306      	movs	r3, #6
 80017f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_ADC1_Init+0x98>)
 8001808:	f002 ffda 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001812:	f000 fc73 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000ba4 	.word	0x20000ba4
 8001824:	40012000 	.word	0x40012000
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C1_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C1_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C1_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C1_Init+0x74>)
 800184a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_I2C1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_I2C1_Init+0x74>)
 800186a:	f003 ffe7 	bl	800583c <HAL_I2C_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001874:	f000 fc42 	bl	80020fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001878:	2100      	movs	r1, #0
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C1_Init+0x74>)
 800187c:	f005 f901 	bl	8006a82 <HAL_I2CEx_ConfigAnalogFilter>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001886:	f000 fc39 	bl	80020fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800188a:	2100      	movs	r1, #0
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_I2C1_Init+0x74>)
 800188e:	f005 f934 	bl	8006afa <HAL_I2CEx_ConfigDigitalFilter>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001898:	f000 fc30 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000ad8 	.word	0x20000ad8
 80018a4:	40005400 	.word	0x40005400
 80018a8:	000186a0 	.word	0x000186a0

080018ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_I2C2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <MX_I2C2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_I2C2_Init+0x74>)
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <MX_I2C2_Init+0x7c>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_I2C2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_I2C2_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_I2C2_Init+0x74>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_I2C2_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C2_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_I2C2_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C2_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_I2C2_Init+0x74>)
 80018ea:	f003 ffa7 	bl	800583c <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 fc02 	bl	80020fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_I2C2_Init+0x74>)
 80018fc:	f005 f8c1 	bl	8006a82 <HAL_I2CEx_ConfigAnalogFilter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001906:	f000 fbf9 	bl	80020fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_I2C2_Init+0x74>)
 800190e:	f005 f8f4 	bl	8006afa <HAL_I2CEx_ConfigDigitalFilter>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001918:	f000 fbf0 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000b38 	.word	0x20000b38
 8001924:	40005800 	.word	0x40005800
 8001928:	000186a0 	.word	0x000186a0

0800192c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <MX_I2C3_Init+0x78>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <MX_I2C3_Init+0x7c>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_I2C3_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_I2C3_Init+0x74>)
 800194a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_I2C3_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C3_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <MX_I2C3_Init+0x74>)
 800196a:	f003 ff67 	bl	800583c <HAL_I2C_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001974:	f000 fbc2 	bl	80020fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <MX_I2C3_Init+0x74>)
 800197c:	f005 f881 	bl	8006a82 <HAL_I2CEx_ConfigAnalogFilter>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001986:	f000 fbb9 	bl	80020fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2C3_Init+0x74>)
 800198e:	f005 f8b4 	bl	8006afa <HAL_I2CEx_ConfigDigitalFilter>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001998:	f000 fbb0 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000974 	.word	0x20000974
 80019a4:	40005c00 	.word	0x40005c00
 80019a8:	000186a0 	.word	0x000186a0

080019ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	; 0x40
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2228      	movs	r2, #40	; 0x28
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f009 f965 	bl	800ac9c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <MX_RTC_Init+0x110>)
 80019d4:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <MX_RTC_Init+0x114>)
 80019d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <MX_RTC_Init+0x110>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <MX_RTC_Init+0x110>)
 80019e0:	227f      	movs	r2, #127	; 0x7f
 80019e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <MX_RTC_Init+0x110>)
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <MX_RTC_Init+0x110>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <MX_RTC_Init+0x110>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <MX_RTC_Init+0x110>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019fc:	482f      	ldr	r0, [pc, #188]	; (8001abc <MX_RTC_Init+0x110>)
 80019fe:	f005 ff31 	bl	8007864 <HAL_RTC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a08:	f000 fb78 	bl	80020fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4823      	ldr	r0, [pc, #140]	; (8001abc <MX_RTC_Init+0x110>)
 8001a30:	f005 ffa9 	bl	8007986 <HAL_RTC_SetTime>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a3a:	f000 fb5f 	bl	80020fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4817      	ldr	r0, [pc, #92]	; (8001abc <MX_RTC_Init+0x110>)
 8001a60:	f006 f84e 	bl	8007b00 <HAL_RTC_SetDate>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001a6a:	f000 fb47 	bl	80020fc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_RTC_Init+0x110>)
 8001aa6:	f006 f8d3 	bl	8007c50 <HAL_RTC_SetAlarm_IT>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ab0:	f000 fb24 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3740      	adds	r7, #64	; 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000e50 	.word	0x20000e50
 8001ac0:	40002800 	.word	0x40002800

08001ac4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <MX_SPI2_Init+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b10:	220a      	movs	r2, #10
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b16:	f006 faed 	bl	80080f4 <HAL_SPI_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b20:	f000 faec 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200009c8 	.word	0x200009c8
 8001b2c:	40003800 	.word	0x40003800

08001b30 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <MX_SPI4_Init+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b40:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b60:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_SPI4_Init+0x64>)
 8001b82:	f006 fab7 	bl	80080f4 <HAL_SPI_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001b8c:	f000 fab6 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000df8 	.word	0x20000df8
 8001b98:	40013400 	.word	0x40013400

08001b9c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <MX_SPI5_Init+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SPI5_Init+0x64>)
 8001bee:	f006 fa81 	bl	80080f4 <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f000 fa80 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000a24 	.word	0x20000a24
 8001c04:	40015000 	.word	0x40015000

08001c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c52:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c54:	f006 ff4a 	bl	8008aec <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 fa4d 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c72:	f007 fbcd 	bl	8009410 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c7c:	f000 fa3e 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2208      	movs	r2, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001c98:	f007 f880 	bl	8008d9c <HAL_TIM_PWM_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ca2:	f000 fa2b 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM2_Init+0xac>)
 8001ca8:	f000 fc7e 	bl	80025a8 <HAL_TIM_MspPostInit>

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000f84 	.word	0x20000f84

08001cb8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_UART8_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_UART8_Init+0x4c>)
 8001cf0:	f007 fc1e 	bl	8009530 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f9ff 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000ef0 	.word	0x20000ef0
 8001d08:	40007c00 	.word	0x40007c00

08001d0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <MX_USART3_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART3_UART_Init+0x4c>)
 8001d44:	f007 fbf4 	bl	8009530 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f000 f9d5 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000a80 	.word	0x20000a80
 8001d5c:	40004800 	.word	0x40004800

08001d60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART6_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d98:	f007 fbca 	bl	8009530 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f000 f9ab 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000f34 	.word	0x20000f34
 8001db0:	40011400 	.word	0x40011400

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	4bb5      	ldr	r3, [pc, #724]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4ab4      	ldr	r2, [pc, #720]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4bb2      	ldr	r3, [pc, #712]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	4bae      	ldr	r3, [pc, #696]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4aad      	ldr	r2, [pc, #692]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4bab      	ldr	r3, [pc, #684]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4aa6      	ldr	r2, [pc, #664]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4ba4      	ldr	r3, [pc, #656]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a9f      	ldr	r2, [pc, #636]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b9d      	ldr	r3, [pc, #628]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b96      	ldr	r3, [pc, #600]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a91      	ldr	r2, [pc, #580]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a8a      	ldr	r2, [pc, #552]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a83      	ldr	r2, [pc, #524]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f248 4184 	movw	r1, #33924	; 0x8484
 8001eb0:	487d      	ldr	r0, [pc, #500]	; (80020a8 <MX_GPIO_Init+0x2f4>)
 8001eb2:	f003 fc91 	bl	80057d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001ebc:	487b      	ldr	r0, [pc, #492]	; (80020ac <MX_GPIO_Init+0x2f8>)
 8001ebe:	f003 fc8b 	bl	80057d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001ec8:	4879      	ldr	r0, [pc, #484]	; (80020b0 <MX_GPIO_Init+0x2fc>)
 8001eca:	f003 fc85 	bl	80057d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4878      	ldr	r0, [pc, #480]	; (80020b4 <MX_GPIO_Init+0x300>)
 8001ed4:	f003 fc80 	bl	80057d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8001ede:	4876      	ldr	r0, [pc, #472]	; (80020b8 <MX_GPIO_Init+0x304>)
 8001ee0:	f003 fc7a 	bl	80057d8 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eea:	4874      	ldr	r0, [pc, #464]	; (80020bc <MX_GPIO_Init+0x308>)
 8001eec:	f003 fc74 	bl	80057d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001ef6:	4872      	ldr	r0, [pc, #456]	; (80020c0 <MX_GPIO_Init+0x30c>)
 8001ef8:	f003 fc6e 	bl	80057d8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001efc:	f248 4384 	movw	r3, #33924	; 0x8484
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4864      	ldr	r0, [pc, #400]	; (80020a8 <MX_GPIO_Init+0x2f4>)
 8001f16:	f003 fa9b 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001f1a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	4619      	mov	r1, r3
 8001f32:	485e      	ldr	r0, [pc, #376]	; (80020ac <MX_GPIO_Init+0x2f8>)
 8001f34:	f003 fa8c 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4858      	ldr	r0, [pc, #352]	; (80020b0 <MX_GPIO_Init+0x2fc>)
 8001f4e:	f003 fa7f 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001f52:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4851      	ldr	r0, [pc, #324]	; (80020b0 <MX_GPIO_Init+0x2fc>)
 8001f6c:	f003 fa70 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001f70:	2308      	movs	r3, #8
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	484b      	ldr	r0, [pc, #300]	; (80020b4 <MX_GPIO_Init+0x300>)
 8001f88:	f003 fa62 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001f8c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4843      	ldr	r0, [pc, #268]	; (80020b0 <MX_GPIO_Init+0x2fc>)
 8001fa2:	f003 fa55 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4840      	ldr	r0, [pc, #256]	; (80020bc <MX_GPIO_Init+0x308>)
 8001fba:	f003 fa49 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4836      	ldr	r0, [pc, #216]	; (80020ac <MX_GPIO_Init+0x2f8>)
 8001fd4:	f003 fa3c 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001fd8:	f242 4301 	movw	r3, #9217	; 0x2401
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4832      	ldr	r0, [pc, #200]	; (80020b8 <MX_GPIO_Init+0x304>)
 8001fee:	f003 fa2f 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001ff2:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	482b      	ldr	r0, [pc, #172]	; (80020b8 <MX_GPIO_Init+0x304>)
 800200c:	f003 fa20 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002010:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4820      	ldr	r0, [pc, #128]	; (80020a8 <MX_GPIO_Init+0x2f4>)
 8002026:	f003 fa13 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	481e      	ldr	r0, [pc, #120]	; (80020bc <MX_GPIO_Init+0x308>)
 8002044:	f003 fa04 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002048:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	4619      	mov	r1, r3
 8002060:	4817      	ldr	r0, [pc, #92]	; (80020c0 <MX_GPIO_Init+0x30c>)
 8002062:	f003 f9f5 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	4811      	ldr	r0, [pc, #68]	; (80020c0 <MX_GPIO_Init+0x30c>)
 800207c:	f003 f9e8 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002080:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002086:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <MX_GPIO_Init+0x304>)
 8002098:	f003 f9da 	bl	8005450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2105      	movs	r1, #5
 80020a0:	2006      	movs	r0, #6
 80020a2:	e00f      	b.n	80020c4 <MX_GPIO_Init+0x310>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40021400 	.word	0x40021400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40021800 	.word	0x40021800
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	f002 fe86 	bl	8004dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020c8:	2006      	movs	r0, #6
 80020ca:	f002 fe9f 	bl	8004e0c <HAL_NVIC_EnableIRQ>

}
 80020ce:	bf00      	nop
 80020d0:	3738      	adds	r7, #56	; 0x38
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop

080020d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ea:	f002 fae1 	bl	80046b0 <HAL_IncTick>
	  HAL_Delay(200);
  }
  */

  /* USER CODE END Callback 1 */
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40001000 	.word	0x40001000

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_MspInit+0x54>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_MspInit+0x54>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_MspInit+0x54>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_MspInit+0x54>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_MspInit+0x54>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_MspInit+0x54>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	f06f 0001 	mvn.w	r0, #1
 8002152:	f002 fe3f 	bl	8004dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_ADC_MspInit+0x7c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d127      	bne.n	80021d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_ADC_MspInit+0x80>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c2:	2303      	movs	r3, #3
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_ADC_MspInit+0x84>)
 80021d2:	f003 f93d 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40012000 	.word	0x40012000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_I2C_MspInit+0x190>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12d      	bne.n	800226a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a5a      	ldr	r2, [pc, #360]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b58      	ldr	r3, [pc, #352]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800222a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002230:	2312      	movs	r3, #18
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002234:	2301      	movs	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800223c:	2304      	movs	r3, #4
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	484f      	ldr	r0, [pc, #316]	; (8002384 <HAL_I2C_MspInit+0x198>)
 8002248:	f003 f902 	bl	8005450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_I2C_MspInit+0x194>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002268:	e083      	b.n	8002372 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_I2C_MspInit+0x19c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d12d      	bne.n	80022d0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_I2C_MspInit+0x194>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a40      	ldr	r2, [pc, #256]	; (8002380 <HAL_I2C_MspInit+0x194>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002290:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002296:	2312      	movs	r3, #18
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229a:	2301      	movs	r3, #1
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a2:	2304      	movs	r3, #4
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4835      	ldr	r0, [pc, #212]	; (8002384 <HAL_I2C_MspInit+0x198>)
 80022ae:	f003 f8cf 	bl	8005450 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
}
 80022ce:	e050      	b.n	8002372 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2d      	ldr	r2, [pc, #180]	; (800238c <HAL_I2C_MspInit+0x1a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d14b      	bne.n	8002372 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a27      	ldr	r2, [pc, #156]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_I2C_MspInit+0x194>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002318:	2312      	movs	r3, #18
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231c:	2301      	movs	r3, #1
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002324:	2304      	movs	r3, #4
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	4818      	ldr	r0, [pc, #96]	; (8002390 <HAL_I2C_MspInit+0x1a4>)
 8002330:	f003 f88e 	bl	8005450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233a:	2312      	movs	r3, #18
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233e:	2301      	movs	r3, #1
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002346:	2304      	movs	r3, #4
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4619      	mov	r1, r3
 8002350:	4810      	ldr	r0, [pc, #64]	; (8002394 <HAL_I2C_MspInit+0x1a8>)
 8002352:	f003 f87d 	bl	8005450 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_I2C_MspInit+0x194>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002360:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_I2C_MspInit+0x194>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
}
 8002372:	bf00      	nop
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40005400 	.word	0x40005400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400
 8002388:	40005800 	.word	0x40005800
 800238c:	40005c00 	.word	0x40005c00
 8002390:	40020800 	.word	0x40020800
 8002394:	40020000 	.word	0x40020000

08002398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2230      	movs	r2, #48	; 0x30
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 fc77 	bl	800ac9c <memset>
  if(hrtc->Instance==RTC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_RTC_MspInit+0x5c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d119      	bne.n	80023ec <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b8:	2320      	movs	r3, #32
 80023ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f88e 	bl	80074e8 <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023d2:	f7ff fe93 	bl	80020fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RTC_MspInit+0x60>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2105      	movs	r1, #5
 80023e0:	2029      	movs	r0, #41	; 0x29
 80023e2:	f002 fcf7 	bl	8004dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023e6:	2029      	movs	r0, #41	; 0x29
 80023e8:	f002 fd10 	bl	8004e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40002800 	.word	0x40002800
 80023f8:	42470e3c 	.word	0x42470e3c

080023fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_SPI_MspInit+0x150>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12d      	bne.n	800247a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a43      	ldr	r2, [pc, #268]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_SPI_MspInit+0x154>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002456:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002468:	2305      	movs	r3, #5
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	4838      	ldr	r0, [pc, #224]	; (8002554 <HAL_SPI_MspInit+0x158>)
 8002474:	f002 ffec 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002478:	e064      	b.n	8002544 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_SPI_MspInit+0x15c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d12d      	bne.n	80024e0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_SPI_MspInit+0x154>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	4a30      	ldr	r2, [pc, #192]	; (8002550 <HAL_SPI_MspInit+0x154>)
 800248e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002492:	6453      	str	r3, [r2, #68]	; 0x44
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	6313      	str	r3, [r2, #48]	; 0x30
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80024bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80024ce:	2305      	movs	r3, #5
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	4619      	mov	r1, r3
 80024d8:	4820      	ldr	r0, [pc, #128]	; (800255c <HAL_SPI_MspInit+0x160>)
 80024da:	f002 ffb9 	bl	8005450 <HAL_GPIO_Init>
}
 80024de:	e031      	b.n	8002544 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_SPI_MspInit+0x164>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12c      	bne.n	8002544 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_SPI_MspInit+0x154>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_SPI_MspInit+0x154>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_SPI_MspInit+0x154>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002522:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002534:	2305      	movs	r3, #5
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <HAL_SPI_MspInit+0x168>)
 8002540:	f002 ff86 	bl	8005450 <HAL_GPIO_Init>
}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40003800 	.word	0x40003800
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400
 8002558:	40013400 	.word	0x40013400
 800255c:	40021000 	.word	0x40021000
 8002560:	40015000 	.word	0x40015000
 8002564:	40021400 	.word	0x40021400

08002568 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d10d      	bne.n	8002596 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d11d      	bne.n	8002606 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80025e6:	2304      	movs	r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4619      	mov	r1, r3
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <HAL_TIM_MspPostInit+0x6c>)
 8002602:	f002 ff25 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002606:	bf00      	nop
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_UART_MspInit+0x14c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12c      	bne.n	8002694 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_UART_MspInit+0x150>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_UART_MspInit+0x150>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b40      	ldr	r3, [pc, #256]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002672:	2303      	movs	r3, #3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002682:	2308      	movs	r3, #8
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268a:	4619      	mov	r1, r3
 800268c:	4837      	ldr	r0, [pc, #220]	; (800276c <HAL_UART_MspInit+0x154>)
 800268e:	f002 fedf 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002692:	e063      	b.n	800275c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a35      	ldr	r2, [pc, #212]	; (8002770 <HAL_UART_MspInit+0x158>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12d      	bne.n	80026fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a30      	ldr	r2, [pc, #192]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_UART_MspInit+0x150>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80026d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026e8:	2307      	movs	r3, #7
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	4820      	ldr	r0, [pc, #128]	; (8002774 <HAL_UART_MspInit+0x15c>)
 80026f4:	f002 feac 	bl	8005450 <HAL_GPIO_Init>
}
 80026f8:	e030      	b.n	800275c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_UART_MspInit+0x160>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d12b      	bne.n	800275c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_UART_MspInit+0x150>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_UART_MspInit+0x150>)
 800270e:	f043 0320 	orr.w	r3, r3, #32
 8002712:	6453      	str	r3, [r2, #68]	; 0x44
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_UART_MspInit+0x150>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_UART_MspInit+0x150>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800274c:	2308      	movs	r3, #8
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	4809      	ldr	r0, [pc, #36]	; (800277c <HAL_UART_MspInit+0x164>)
 8002758:	f002 fe7a 	bl	8005450 <HAL_GPIO_Init>
}
 800275c:	bf00      	nop
 800275e:	3738      	adds	r7, #56	; 0x38
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40007c00 	.word	0x40007c00
 8002768:	40023800 	.word	0x40023800
 800276c:	40021000 	.word	0x40021000
 8002770:	40004800 	.word	0x40004800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40011400 	.word	0x40011400
 800277c:	40020800 	.word	0x40020800

08002780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	2036      	movs	r0, #54	; 0x36
 8002796:	f002 fb1d 	bl	8004dd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800279a:	2036      	movs	r0, #54	; 0x36
 800279c:	f002 fb36 	bl	8004e0c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_InitTick+0xa4>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_InitTick+0xa4>)
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_InitTick+0xa4>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027bc:	f107 0210 	add.w	r2, r7, #16
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f004 fe5c 	bl	8007484 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027cc:	f004 fe32 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 80027d0:	4603      	mov	r3, r0
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_InitTick+0xa8>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	3b01      	subs	r3, #1
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_InitTick+0xac>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_InitTick+0xb0>)
 80027e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_InitTick+0xac>)
 80027ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_InitTick+0xac>)
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_InitTick+0xac>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_InitTick+0xac>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <HAL_InitTick+0xac>)
 8002806:	f006 f8a7 	bl	8008958 <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002810:	4806      	ldr	r0, [pc, #24]	; (800282c <HAL_InitTick+0xac>)
 8002812:	f006 f8fb 	bl	8008a0c <HAL_TIM_Base_Start_IT>
 8002816:	4603      	mov	r3, r0
 8002818:	e000      	b.n	800281c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3730      	adds	r7, #48	; 0x30
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	431bde83 	.word	0x431bde83
 800282c:	20001000 	.word	0x20001000
 8002830:	40001000 	.word	0x40001000

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <MemManage_Handler+0x4>

0800284e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler+0x4>

0800285a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800286c:	2001      	movs	r0, #1
 800286e:	f002 ffcd 	bl	800580c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <RTC_Alarm_IRQHandler+0x10>)
 800287e:	f005 fb1f 	bl	8007ec0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000e50 	.word	0x20000e50

0800288c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM6_DAC_IRQHandler+0x10>)
 8002892:	f006 f97a 	bl	8008b8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20001000 	.word	0x20001000

080028a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	return 1;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_kill>:

int _kill(int pid, int sig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028ba:	f008 f893 	bl	800a9e4 <__errno>
 80028be:	4603      	mov	r3, r0
 80028c0:	2216      	movs	r2, #22
 80028c2:	601a      	str	r2, [r3, #0]
	return -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_exit>:

void _exit (int status)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ffe7 	bl	80028b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028e2:	e7fe      	b.n	80028e2 <_exit+0x12>

080028e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e00a      	b.n	800290c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f6:	f3af 8000 	nop.w
 80028fa:	4601      	mov	r1, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	60ba      	str	r2, [r7, #8]
 8002902:	b2ca      	uxtb	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	dbf0      	blt.n	80028f6 <_read+0x12>
	}

return len;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e009      	b.n	8002944 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	60ba      	str	r2, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	dbf1      	blt.n	8002930 <_write+0x12>
	}
	return len;
 800294c:	687b      	ldr	r3, [r7, #4]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_close>:

int _close(int file)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	return -1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297e:	605a      	str	r2, [r3, #4]
	return 0;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <_isatty>:

int _isatty(int file)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	return 1;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	return 0;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <_sbrk+0x5c>)
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <_sbrk+0x60>)
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <_sbrk+0x64>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <_sbrk+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d207      	bcs.n	8002a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f0:	f007 fff8 	bl	800a9e4 <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	220c      	movs	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	e009      	b.n	8002a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <_sbrk+0x64>)
 8002a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20030000 	.word	0x20030000
 8002a20:	00000400 	.word	0x00000400
 8002a24:	20000228 	.word	0x20000228
 8002a28:	20001188 	.word	0x20001188

08002a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <SystemInit+0x28>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <SystemInit+0x28>)
 8002a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SystemInit+0x28>)
 8002a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a46:	609a      	str	r2, [r3, #8]
#endif
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a5e:	e003      	b.n	8002a68 <LoopCopyDataInit>

08002a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a66:	3104      	adds	r1, #4

08002a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a68:	480b      	ldr	r0, [pc, #44]	; (8002a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a70:	d3f6      	bcc.n	8002a60 <CopyDataInit>
  ldr  r2, =_sbss
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a74:	e002      	b.n	8002a7c <LoopFillZerobss>

08002a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a78:	f842 3b04 	str.w	r3, [r2], #4

08002a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a80:	d3f9      	bcc.n	8002a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a82:	f7ff ffd3 	bl	8002a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f008 f8a9 	bl	800abdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8a:	f7fe fcc9 	bl	8001420 <main>
  bx  lr    
 8002a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002a94:	0800fc7c 	.word	0x0800fc7c
  ldr  r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a9c:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8002aa0:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8002aa4:	20001184 	.word	0x20001184

08002aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC_IRQHandler>
	...

08002aac <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <GPS_init+0x30>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <GPS_init+0x34>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <GPS_init+0x34>)
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	2210      	movs	r2, #16
 8002acc:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <GPS_init+0x38>)
 8002ace:	f006 fd7c 	bl	80095ca <HAL_UART_Transmit>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000a20 	.word	0x20000a20
 8002ae0:	20001104 	.word	0x20001104
 8002ae4:	0800f570 	.word	0x0800f570

08002ae8 <__NVIC_SystemReset>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002aec:	f3bf 8f4f 	dsb	sy
}
 8002af0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <__NVIC_SystemReset+0x24>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <__NVIC_SystemReset+0x24>)
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_SystemReset+0x28>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b02:	f3bf 8f4f 	dsb	sy
}
 8002b06:	bf00      	nop
    __NOP();
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <__NVIC_SystemReset+0x20>
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	05fa0004 	.word	0x05fa0004

08002b14 <MRT_getFlags>:


/*
 * User functions
 */
void MRT_getFlags(void){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 8002b18:	f002 f9e8 	bl	8004eec <HAL_FLASH_Unlock>


	//Reset flag
	if((EE_ReadVariable(RESET_FLAG_ADDRESS,  &reset_flag)) != HAL_OK)
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <MRT_getFlags+0xd0>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4931      	ldr	r1, [pc, #196]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fb82 	bl	800322c <EE_ReadVariable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <MRT_getFlags+0x36>
	{
	  //Error_Handler(); Variable doesn't exist so try writing it?
		if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <MRT_getFlags+0xd0>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	b292      	uxth	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fbc0 	bl	80032c0 <EE_WriteVariable>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MRT_getFlags+0x36>
		{
		  Error_Handler();
 8002b46:	f7ff fad9 	bl	80020fc <Error_Handler>
		}
	}
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d014      	beq.n	8002b7c <MRT_getFlags+0x68>
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d010      	beq.n	8002b7c <MRT_getFlags+0x68>
		reset_flag = 0;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
		if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <MRT_getFlags+0xd0>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <MRT_getFlags+0xd4>)
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fba7 	bl	80032c0 <EE_WriteVariable>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MRT_getFlags+0x68>
		{
		  Error_Handler();
 8002b78:	f7ff fac0 	bl	80020fc <Error_Handler>
		}
	}


	//Wakeup flag
	if((EE_ReadVariable(WAKEUP_FLAG_ADDRESS,  &wakeup_flag)) != HAL_OK)
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <MRT_getFlags+0xd0>)
 8002b7e:	885b      	ldrh	r3, [r3, #2]
 8002b80:	491a      	ldr	r1, [pc, #104]	; (8002bec <MRT_getFlags+0xd8>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb52 	bl	800322c <EE_ReadVariable>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <MRT_getFlags+0x96>
	{
	   //Error_Handler(); Variable doesn't exist so try writing it?
		 if((EE_WriteVariable(WAKEUP_FLAG_ADDRESS,  wakeup_flag)) != HAL_OK)
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MRT_getFlags+0xd0>)
 8002b90:	885b      	ldrh	r3, [r3, #2]
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <MRT_getFlags+0xd8>)
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	b292      	uxth	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fb90 	bl	80032c0 <EE_WriteVariable>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MRT_getFlags+0x96>
		 {
		   Error_Handler();
 8002ba6:	f7ff faa9 	bl	80020fc <Error_Handler>
		 }
	}
	if (wakeup_flag != 0 && wakeup_flag !=1){ //If random value (none was written)
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <MRT_getFlags+0xd8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <MRT_getFlags+0xc8>
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MRT_getFlags+0xd8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d010      	beq.n	8002bdc <MRT_getFlags+0xc8>
		wakeup_flag = 0;
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MRT_getFlags+0xd8>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
		if((EE_WriteVariable(WAKEUP_FLAG_ADDRESS,  wakeup_flag)) != HAL_OK)
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MRT_getFlags+0xd0>)
 8002bc2:	885b      	ldrh	r3, [r3, #2]
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <MRT_getFlags+0xd8>)
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fb77 	bl	80032c0 <EE_WriteVariable>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MRT_getFlags+0xc8>
		{
		  Error_Handler();
 8002bd8:	f7ff fa90 	bl	80020fc <Error_Handler>
		}
	}

	HAL_FLASH_Lock();
 8002bdc:	f002 f9a8 	bl	8004f30 <HAL_FLASH_Lock>

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000004 	.word	0x20000004
 8002be8:	2000022c 	.word	0x2000022c
 8002bec:	2000022d 	.word	0x2000022d

08002bf0 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b090      	sub	sp, #64	; 0x40
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]


	  char buffer[50];
	  sprintf(buffer,"Reset: %i,  WU: %i\r\n",reset_flag, wakeup_flag);
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <MRT_resetInfo+0x88>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <MRT_resetInfo+0x8c>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f107 000c 	add.w	r0, r7, #12
 8002c06:	491e      	ldr	r1, [pc, #120]	; (8002c80 <MRT_resetInfo+0x90>)
 8002c08:	f008 ffce 	bl	800bba8 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd faed 	bl	80001f0 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	f107 010c 	add.w	r1, r7, #12
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 fcd1 	bl	80095ca <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c2c:	f001 fd60 	bl	80046f0 <HAL_Delay>


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MRT_resetInfo+0x88>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11b      	bne.n	8002c70 <MRT_resetInfo+0x80>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	220e      	movs	r2, #14
 8002c3e:	4911      	ldr	r1, [pc, #68]	; (8002c84 <MRT_resetInfo+0x94>)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f006 fcc2 	bl	80095ca <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MRT_resetInfo+0x88>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  HAL_FLASH_Unlock();
 8002c4c:	f002 f94e 	bl	8004eec <HAL_FLASH_Unlock>
		  if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <MRT_resetInfo+0x98>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <MRT_resetInfo+0x88>)
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fb2f 	bl	80032c0 <EE_WriteVariable>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MRT_resetInfo+0x7c>
		  {
		    Error_Handler();
 8002c68:	f7ff fa48 	bl	80020fc <Error_Handler>
		  }
		  HAL_FLASH_Lock();
 8002c6c:	f002 f960 	bl	8004f30 <HAL_FLASH_Lock>
	  }
}
 8002c70:	bf00      	nop
 8002c72:	3740      	adds	r7, #64	; 0x40
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000022c 	.word	0x2000022c
 8002c7c:	2000022d 	.word	0x2000022d
 8002c80:	0800f584 	.word	0x0800f584
 8002c84:	0800f59c 	.word	0x0800f59c
 8002c88:	20000004 	.word	0x20000004

08002c8c <checkForI2CDevices>:


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	b5b0      	push	{r4, r5, r7, lr}
 8002c90:	b092      	sub	sp, #72	; 0x48
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
 8002cb0:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <checkForI2CDevices+0x108>)
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <checkForI2CDevices+0x10c>)
 8002cb8:	f107 040c 	add.w	r4, r7, #12
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cc6:	c403      	stmia	r4!, {r0, r1}
 8002cc8:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <checkForI2CDevices+0x110>)
 8002ccc:	463b      	mov	r3, r7
 8002cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd0:	c303      	stmia	r3!, {r0, r1}
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	0c12      	lsrs	r2, r2, #16
 8002cd8:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8002ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce4:	f001 fd04 	bl	80046f0 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8002ce8:	f107 010c 	add.w	r1, r7, #12
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf0:	221a      	movs	r2, #26
 8002cf2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002cf6:	f006 fc68 	bl	80095ca <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d00:	e035      	b.n	8002d6e <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8002d02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002d10:	2305      	movs	r3, #5
 8002d12:	2203      	movs	r2, #3
 8002d14:	f003 f9f6 	bl	8006104 <HAL_I2C_IsDeviceReady>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8002d1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8002d26:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	2204      	movs	r2, #4
 8002d30:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002d34:	f006 fc49 	bl	80095ca <HAL_UART_Transmit>
 8002d38:	e014      	b.n	8002d64 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8002d3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d110      	bne.n	8002d64 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8002d42:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d4a:	4915      	ldr	r1, [pc, #84]	; (8002da0 <checkForI2CDevices+0x114>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f008 ff2b 	bl	800bba8 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8002d52:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	2219      	movs	r2, #25
 8002d5c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002d60:	f006 fc33 	bl	80095ca <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8002d64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dac5      	bge.n	8002d02 <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8002d76:	4639      	mov	r1, r7
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	220b      	movs	r2, #11
 8002d7e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002d82:	f006 fc22 	bl	80095ca <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8002d86:	bf00      	nop
 8002d88:	3748      	adds	r7, #72	; 0x48
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d90:	b004      	add	sp, #16
 8002d92:	4770      	bx	lr
 8002d94:	00202d20 	.word	0x00202d20
 8002d98:	0800f5b4 	.word	0x0800f5b4
 8002d9c:	0800f5d0 	.word	0x0800f5d0
 8002da0:	0800f5ac 	.word	0x0800f5ac

08002da4 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset

		MRT_ResetFromStart();
 8002db4:	f000 f804 	bl	8002dc0 <MRT_ResetFromStart>
	}

}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <MRT_ResetFromStart>:


void MRT_ResetFromStart(void){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	//Clear all saved data of stages


	//Clear wakeup and reset flag

	HAL_FLASH_Unlock();
 8002dc4:	f002 f892 	bl	8004eec <HAL_FLASH_Unlock>

	reset_flag = 0;
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <MRT_ResetFromStart+0x54>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
	if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <MRT_ResetFromStart+0x58>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <MRT_ResetFromStart+0x54>)
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa70 	bl	80032c0 <EE_WriteVariable>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MRT_ResetFromStart+0x2a>
	{
	  Error_Handler();
 8002de6:	f7ff f989 	bl	80020fc <Error_Handler>
	}

	wakeup_flag = 0;
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MRT_ResetFromStart+0x5c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
	if((EE_WriteVariable(WAKEUP_FLAG_ADDRESS, wakeup_flag)) != HAL_OK)
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <MRT_ResetFromStart+0x58>)
 8002df2:	885b      	ldrh	r3, [r3, #2]
 8002df4:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <MRT_ResetFromStart+0x5c>)
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa5f 	bl	80032c0 <EE_WriteVariable>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MRT_ResetFromStart+0x4c>
	{
	  Error_Handler();
 8002e08:	f7ff f978 	bl	80020fc <Error_Handler>
	}
	HAL_FLASH_Lock();
 8002e0c:	f002 f890 	bl	8004f30 <HAL_FLASH_Lock>


	//Reset function
	NVIC_SystemReset();
 8002e10:	f7ff fe6a 	bl	8002ae8 <__NVIC_SystemReset>
 8002e14:	2000022c 	.word	0x2000022c
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	2000022d 	.word	0x2000022d

08002e20 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002e26:	2306      	movs	r3, #6
 8002e28:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e2a:	2306      	movs	r3, #6
 8002e2c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	83fb      	strh	r3, [r7, #30]
 8002e36:	2300      	movs	r3, #0
 8002e38:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8002e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002e44:	4ba1      	ldr	r3, [pc, #644]	; (80030cc <EE_Init+0x2ac>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002e4a:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <EE_Init+0x2b0>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002e50:	2300      	movs	r3, #0
 8002e52:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8002e54:	2302      	movs	r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8002e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <EE_Init+0x62>
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6e:	f280 8196 	bge.w	800319e <EE_Init+0x37e>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80f8 	beq.w	8003068 <EE_Init+0x248>
 8002e78:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d050      	beq.n	8002f22 <EE_Init+0x102>
 8002e80:	e18d      	b.n	800319e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002e82:	8c3b      	ldrh	r3, [r7, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d116      	bne.n	8002eb6 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002e88:	4890      	ldr	r0, [pc, #576]	; (80030cc <EE_Init+0x2ac>)
 8002e8a:	f000 f9a9 	bl	80031e0 <EE_VerifyPageFullyErased>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 818e 	bne.w	80031b2 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002e96:	f107 0214 	add.w	r2, r7, #20
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 f996 	bl	80051d0 <HAL_FLASHEx_Erase>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ea8:	7efb      	ldrb	r3, [r7, #27]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8181 	beq.w	80031b2 <EE_Init+0x392>
          {
            return FlashStatus;
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	e185      	b.n	80031c2 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002eb6:	8c3b      	ldrh	r3, [r7, #32]
 8002eb8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d125      	bne.n	8002f0c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002ec0:	4882      	ldr	r0, [pc, #520]	; (80030cc <EE_Init+0x2ac>)
 8002ec2:	f000 f98d 	bl	80031e0 <EE_VerifyPageFullyErased>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <EE_Init+0xca>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002ecc:	f107 0214 	add.w	r2, r7, #20
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 f97b 	bl	80051d0 <HAL_FLASHEx_Erase>
 8002eda:	4603      	mov	r3, r0
 8002edc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ede:	7efb      	ldrb	r3, [r7, #27]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <EE_Init+0xca>
          {
            return FlashStatus;
 8002ee4:	7efb      	ldrb	r3, [r7, #27]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	e16b      	b.n	80031c2 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	4977      	ldr	r1, [pc, #476]	; (80030d0 <EE_Init+0x2b0>)
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f001 ffa5 	bl	8004e44 <HAL_FLASH_Program>
 8002efa:	4603      	mov	r3, r0
 8002efc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002efe:	7efb      	ldrb	r3, [r7, #27]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8156 	beq.w	80031b2 <EE_Init+0x392>
        {
          return FlashStatus;
 8002f06:	7efb      	ldrb	r3, [r7, #27]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	e15a      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002f0c:	f000 f9fa 	bl	8003304 <EE_Format>
 8002f10:	4603      	mov	r3, r0
 8002f12:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002f14:	7efb      	ldrb	r3, [r7, #27]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 814b 	beq.w	80031b2 <EE_Init+0x392>
        {
          return FlashStatus;
 8002f1c:	7efb      	ldrb	r3, [r7, #27]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	e14f      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002f22:	8c3b      	ldrh	r3, [r7, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d163      	bne.n	8002ff0 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f2c:	e030      	b.n	8002f90 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002f2e:	4b69      	ldr	r3, [pc, #420]	; (80030d4 <EE_Init+0x2b4>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f36:	4968      	ldr	r1, [pc, #416]	; (80030d8 <EE_Init+0x2b8>)
 8002f38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d101      	bne.n	8002f44 <EE_Init+0x124>
          {
            x = VarIdx;
 8002f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f42:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8002f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f46:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d01d      	beq.n	8002f8a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002f4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f50:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <EE_Init+0x2b8>)
 8002f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f56:	4961      	ldr	r1, [pc, #388]	; (80030dc <EE_Init+0x2bc>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f967 	bl	800322c <EE_ReadVariable>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002f62:	8bbb      	ldrh	r3, [r7, #28]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d010      	beq.n	8002f8a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f6a:	4a5b      	ldr	r2, [pc, #364]	; (80030d8 <EE_Init+0x2b8>)
 8002f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f70:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <EE_Init+0x2bc>)
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa5c 	bl	8003434 <EE_VerifyPageFullWriteVariable>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002f80:	8bfb      	ldrh	r3, [r7, #30]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <EE_Init+0x16a>
              {
                return EepromStatus;
 8002f86:	8bfb      	ldrh	r3, [r7, #30]
 8002f88:	e11b      	b.n	80031c2 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d9cb      	bls.n	8002f2e <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	494b      	ldr	r1, [pc, #300]	; (80030cc <EE_Init+0x2ac>)
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f001 ff4f 	bl	8004e44 <HAL_FLASH_Program>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002faa:	7efb      	ldrb	r3, [r7, #27]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <EE_Init+0x196>
        {
          return FlashStatus;
 8002fb0:	7efb      	ldrb	r3, [r7, #27]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	e105      	b.n	80031c2 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002fc2:	4843      	ldr	r0, [pc, #268]	; (80030d0 <EE_Init+0x2b0>)
 8002fc4:	f000 f90c 	bl	80031e0 <EE_VerifyPageFullyErased>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 80f3 	bne.w	80031b6 <EE_Init+0x396>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002fd0:	f107 0214 	add.w	r2, r7, #20
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 f8f9 	bl	80051d0 <HAL_FLASHEx_Erase>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002fe2:	7efb      	ldrb	r3, [r7, #27]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80e6 	beq.w	80031b6 <EE_Init+0x396>
          {
            return FlashStatus;
 8002fea:	7efb      	ldrb	r3, [r7, #27]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	e0e8      	b.n	80031c2 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002ff0:	8c3b      	ldrh	r3, [r7, #32]
 8002ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12b      	bne.n	8003052 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003002:	2302      	movs	r3, #2
 8003004:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003006:	4832      	ldr	r0, [pc, #200]	; (80030d0 <EE_Init+0x2b0>)
 8003008:	f000 f8ea 	bl	80031e0 <EE_VerifyPageFullyErased>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <EE_Init+0x210>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003012:	f107 0214 	add.w	r2, r7, #20
 8003016:	463b      	mov	r3, r7
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f002 f8d8 	bl	80051d0 <HAL_FLASHEx_Erase>
 8003020:	4603      	mov	r3, r0
 8003022:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003024:	7efb      	ldrb	r3, [r7, #27]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <EE_Init+0x210>
          {
            return FlashStatus;
 800302a:	7efb      	ldrb	r3, [r7, #27]
 800302c:	b29b      	uxth	r3, r3
 800302e:	e0c8      	b.n	80031c2 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	4924      	ldr	r1, [pc, #144]	; (80030cc <EE_Init+0x2ac>)
 800303a:	2001      	movs	r0, #1
 800303c:	f001 ff02 	bl	8004e44 <HAL_FLASH_Program>
 8003040:	4603      	mov	r3, r0
 8003042:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003044:	7efb      	ldrb	r3, [r7, #27]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80b5 	beq.w	80031b6 <EE_Init+0x396>
        {
          return FlashStatus;
 800304c:	7efb      	ldrb	r3, [r7, #27]
 800304e:	b29b      	uxth	r3, r3
 8003050:	e0b7      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8003052:	f000 f957 	bl	8003304 <EE_Format>
 8003056:	4603      	mov	r3, r0
 8003058:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800305a:	7efb      	ldrb	r3, [r7, #27]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80aa 	beq.w	80031b6 <EE_Init+0x396>
        {
          return FlashStatus;
 8003062:	7efb      	ldrb	r3, [r7, #27]
 8003064:	b29b      	uxth	r3, r3
 8003066:	e0ac      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8003068:	8c3b      	ldrh	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800306e:	f000 f949 	bl	8003304 <EE_Format>
 8003072:	4603      	mov	r3, r0
 8003074:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003076:	7efb      	ldrb	r3, [r7, #27]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 809e 	beq.w	80031ba <EE_Init+0x39a>
        {
          return FlashStatus;
 800307e:	7efb      	ldrb	r3, [r7, #27]
 8003080:	b29b      	uxth	r3, r3
 8003082:	e09e      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8003084:	8c3b      	ldrh	r3, [r7, #32]
 8003086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800308a:	4293      	cmp	r3, r2
 800308c:	d11b      	bne.n	80030c6 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800308e:	2303      	movs	r3, #3
 8003090:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003096:	2302      	movs	r3, #2
 8003098:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800309a:	480d      	ldr	r0, [pc, #52]	; (80030d0 <EE_Init+0x2b0>)
 800309c:	f000 f8a0 	bl	80031e0 <EE_VerifyPageFullyErased>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8089 	bne.w	80031ba <EE_Init+0x39a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80030a8:	f107 0214 	add.w	r2, r7, #20
 80030ac:	463b      	mov	r3, r7
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 f88d 	bl	80051d0 <HAL_FLASHEx_Erase>
 80030b6:	4603      	mov	r3, r0
 80030b8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80030ba:	7efb      	ldrb	r3, [r7, #27]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d07c      	beq.n	80031ba <EE_Init+0x39a>
          {
            return FlashStatus;
 80030c0:	7efb      	ldrb	r3, [r7, #27]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	e07d      	b.n	80031c2 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030ca:	e03a      	b.n	8003142 <EE_Init+0x322>
 80030cc:	08008000 	.word	0x08008000
 80030d0:	0800c000 	.word	0x0800c000
 80030d4:	08008006 	.word	0x08008006
 80030d8:	20000004 	.word	0x20000004
 80030dc:	2000022e 	.word	0x2000022e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80030e0:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <EE_Init+0x3ac>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030e8:	4939      	ldr	r1, [pc, #228]	; (80031d0 <EE_Init+0x3b0>)
 80030ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d101      	bne.n	80030f6 <EE_Init+0x2d6>
          {
            x = VarIdx;
 80030f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030f4:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80030f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d01d      	beq.n	800313c <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003102:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <EE_Init+0x3b0>)
 8003104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003108:	4932      	ldr	r1, [pc, #200]	; (80031d4 <EE_Init+0x3b4>)
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f88e 	bl	800322c <EE_ReadVariable>
 8003110:	4603      	mov	r3, r0
 8003112:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8003114:	8bbb      	ldrh	r3, [r7, #28]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d010      	beq.n	800313c <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800311a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800311c:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <EE_Init+0x3b0>)
 800311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <EE_Init+0x3b4>)
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f983 	bl	8003434 <EE_VerifyPageFullWriteVariable>
 800312e:	4603      	mov	r3, r0
 8003130:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8003132:	8bfb      	ldrh	r3, [r7, #30]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <EE_Init+0x31c>
              {
                return EepromStatus;
 8003138:	8bfb      	ldrh	r3, [r7, #30]
 800313a:	e042      	b.n	80031c2 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800313c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800313e:	3301      	adds	r3, #1
 8003140:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003144:	2b02      	cmp	r3, #2
 8003146:	d9cb      	bls.n	80030e0 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	4921      	ldr	r1, [pc, #132]	; (80031d8 <EE_Init+0x3b8>)
 8003152:	2001      	movs	r0, #1
 8003154:	f001 fe76 	bl	8004e44 <HAL_FLASH_Program>
 8003158:	4603      	mov	r3, r0
 800315a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800315c:	7efb      	ldrb	r3, [r7, #27]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <EE_Init+0x348>
        {
          return FlashStatus;
 8003162:	7efb      	ldrb	r3, [r7, #27]
 8003164:	b29b      	uxth	r3, r3
 8003166:	e02c      	b.n	80031c2 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8003168:	2302      	movs	r3, #2
 800316a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003170:	2302      	movs	r3, #2
 8003172:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003174:	4819      	ldr	r0, [pc, #100]	; (80031dc <EE_Init+0x3bc>)
 8003176:	f000 f833 	bl	80031e0 <EE_VerifyPageFullyErased>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d11c      	bne.n	80031ba <EE_Init+0x39a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003180:	f107 0214 	add.w	r2, r7, #20
 8003184:	463b      	mov	r3, r7
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f002 f821 	bl	80051d0 <HAL_FLASHEx_Erase>
 800318e:	4603      	mov	r3, r0
 8003190:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003192:	7efb      	ldrb	r3, [r7, #27]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <EE_Init+0x39a>
          {
            return FlashStatus;
 8003198:	7efb      	ldrb	r3, [r7, #27]
 800319a:	b29b      	uxth	r3, r3
 800319c:	e011      	b.n	80031c2 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800319e:	f000 f8b1 	bl	8003304 <EE_Format>
 80031a2:	4603      	mov	r3, r0
 80031a4:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <EE_Init+0x39e>
      {
        return FlashStatus;
 80031ac:	7efb      	ldrb	r3, [r7, #27]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	e007      	b.n	80031c2 <EE_Init+0x3a2>
      break;
 80031b2:	bf00      	nop
 80031b4:	e004      	b.n	80031c0 <EE_Init+0x3a0>
      break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <EE_Init+0x3a0>
      break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <EE_Init+0x3a0>
      }
      break;
 80031be:	bf00      	nop
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3728      	adds	r7, #40	; 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	0800c006 	.word	0x0800c006
 80031d0:	20000004 	.word	0x20000004
 80031d4:	2000022e 	.word	0x2000022e
 80031d8:	0800c000 	.word	0x0800c000
 80031dc:	08008000 	.word	0x08008000

080031e0 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 80031ec:	f245 5355 	movw	r3, #21845	; 0x5555
 80031f0:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80031f2:	e00d      	b.n	8003210 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003200:	4293      	cmp	r3, r2
 8003202:	d002      	beq.n	800320a <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

      break;
 8003208:	e006      	b.n	8003218 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <EE_VerifyPageFullyErased+0x48>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d3ed      	bcc.n	80031f4 <EE_VerifyPageFullyErased+0x14>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	b29b      	uxth	r3, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	0800c000 	.word	0x0800c000

0800322c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8003238:	2300      	movs	r3, #0
 800323a:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800323c:	f245 5355 	movw	r3, #21845	; 0x5555
 8003240:	81bb      	strh	r3, [r7, #12]
 8003242:	2301      	movs	r3, #1
 8003244:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <EE_ReadVariable+0x8c>)
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <EE_ReadVariable+0x8c>)
 800324c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f8aa 	bl	80033a8 <EE_FindValidPage>
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	2bab      	cmp	r3, #171	; 0xab
 800325c:	d101      	bne.n	8003262 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800325e:	23ab      	movs	r3, #171	; 0xab
 8003260:	e025      	b.n	80032ae <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003268:	3302      	adds	r3, #2
 800326a:	039b      	lsls	r3, r3, #14
 800326c:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	3301      	adds	r3, #1
 8003272:	039a      	lsls	r2, r3, #14
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <EE_ReadVariable+0x90>)
 8003276:	4413      	add	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800327a:	e012      	b.n	80032a2 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8003282:	89ba      	ldrh	r2, [r7, #12]
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	429a      	cmp	r2, r3
 8003288:	d108      	bne.n	800329c <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	3b02      	subs	r3, #2
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29a      	uxth	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	82fb      	strh	r3, [r7, #22]

      break;
 800329a:	e007      	b.n	80032ac <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	3b04      	subs	r3, #4
 80032a0:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	3302      	adds	r3, #2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8e7      	bhi.n	800327c <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80032ac:	8afb      	ldrh	r3, [r7, #22]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	08008000 	.word	0x08008000
 80032bc:	08007ffe 	.word	0x08007ffe

080032c0 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	460a      	mov	r2, r1
 80032ca:	80fb      	strh	r3, [r7, #6]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80032d4:	88ba      	ldrh	r2, [r7, #4]
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f8aa 	bl	8003434 <EE_VerifyPageFullWriteVariable>
 80032e0:	4603      	mov	r3, r0
 80032e2:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d107      	bne.n	80032fa <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80032ea:	88ba      	ldrh	r2, [r7, #4]
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f8f9 	bl	80034e8 <EE_PageTransfer>
 80032f6:	4603      	mov	r3, r0
 80032f8:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80032fa:	89fb      	ldrh	r3, [r7, #14]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8003316:	2302      	movs	r3, #2
 8003318:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800331e:	2302      	movs	r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003322:	481f      	ldr	r0, [pc, #124]	; (80033a0 <EE_Format+0x9c>)
 8003324:	f7ff ff5c 	bl	80031e0 <EE_VerifyPageFullyErased>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800332e:	f107 0218 	add.w	r2, r7, #24
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f001 ff4a 	bl	80051d0 <HAL_FLASHEx_Erase>
 800333c:	4603      	mov	r3, r0
 800333e:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8003340:	7ffb      	ldrb	r3, [r7, #31]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <EE_Format+0x46>
    {
      return FlashStatus;
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	e025      	b.n	8003396 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	4913      	ldr	r1, [pc, #76]	; (80033a0 <EE_Format+0x9c>)
 8003354:	2001      	movs	r0, #1
 8003356:	f001 fd75 	bl	8004e44 <HAL_FLASH_Program>
 800335a:	4603      	mov	r3, r0
 800335c:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <EE_Format+0x64>
  {
    return FlashStatus;
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	e016      	b.n	8003396 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8003368:	2303      	movs	r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800336c:	480d      	ldr	r0, [pc, #52]	; (80033a4 <EE_Format+0xa0>)
 800336e:	f7ff ff37 	bl	80031e0 <EE_VerifyPageFullyErased>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003378:	f107 0218 	add.w	r2, r7, #24
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f001 ff25 	bl	80051d0 <HAL_FLASHEx_Erase>
 8003386:	4603      	mov	r3, r0
 8003388:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <EE_Format+0x90>
    {
      return FlashStatus;
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	e000      	b.n	8003396 <EE_Format+0x92>
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08008000 	.word	0x08008000
 80033a4:	0800c000 	.word	0x0800c000

080033a8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80033b2:	2306      	movs	r3, #6
 80033b4:	81fb      	strh	r3, [r7, #14]
 80033b6:	2306      	movs	r3, #6
 80033b8:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <EE_FindValidPage+0x84>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <EE_FindValidPage+0x88>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <EE_FindValidPage+0x5c>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d125      	bne.n	800341c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80033d0:	89bb      	ldrh	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80033e0:	2300      	movs	r3, #0
 80033e2:	e01c      	b.n	800341e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01a      	b.n	800341e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80033e8:	89fb      	ldrh	r3, [r7, #14]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80033ee:	89bb      	ldrh	r3, [r7, #12]
 80033f0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80033f8:	2301      	movs	r3, #1
 80033fa:	e010      	b.n	800341e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80033fc:	2300      	movs	r3, #0
 80033fe:	e00e      	b.n	800341e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8003400:	23ab      	movs	r3, #171	; 0xab
 8003402:	e00c      	b.n	800341e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800340a:	2300      	movs	r3, #0
 800340c:	e007      	b.n	800341e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800340e:	89bb      	ldrh	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8003414:	2301      	movs	r3, #1
 8003416:	e002      	b.n	800341e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8003418:	23ab      	movs	r3, #171	; 0xab
 800341a:	e000      	b.n	800341e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800341c:	2300      	movs	r3, #0
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	08008000 	.word	0x08008000
 8003430:	0800c000 	.word	0x0800c000

08003434 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	460a      	mov	r2, r1
 800343e:	80fb      	strh	r3, [r7, #6]
 8003440:	4613      	mov	r3, r2
 8003442:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8003448:	2300      	movs	r3, #0
 800344a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <EE_VerifyPageFullWriteVariable+0xa8>)
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <EE_VerifyPageFullWriteVariable+0xac>)
 8003452:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ffa7 	bl	80033a8 <EE_FindValidPage>
 800345a:	4603      	mov	r3, r0
 800345c:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800345e:	8a3b      	ldrh	r3, [r7, #16]
 8003460:	2bab      	cmp	r3, #171	; 0xab
 8003462:	d101      	bne.n	8003468 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8003464:	23ab      	movs	r3, #171	; 0xab
 8003466:	e035      	b.n	80034d4 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8003468:	8a3b      	ldrh	r3, [r7, #16]
 800346a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800346e:	3302      	adds	r3, #2
 8003470:	039b      	lsls	r3, r3, #14
 8003472:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8003474:	8a3b      	ldrh	r3, [r7, #16]
 8003476:	3301      	adds	r3, #1
 8003478:	039a      	lsls	r2, r3, #14
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <EE_VerifyPageFullWriteVariable+0xb0>)
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8003480:	e023      	b.n	80034ca <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d11b      	bne.n	80034c4 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800348c:	88ba      	ldrh	r2, [r7, #4]
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	2001      	movs	r0, #1
 8003496:	f001 fcd5 	bl	8004e44 <HAL_FLASH_Program>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	e014      	b.n	80034d4 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	1c99      	adds	r1, r3, #2
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	2001      	movs	r0, #1
 80034b6:	f001 fcc5 	bl	8004e44 <HAL_FLASH_Program>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	e007      	b.n	80034d4 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3d7      	bcc.n	8003482 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80034d2:	2380      	movs	r3, #128	; 0x80
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	08008000 	.word	0x08008000
 80034e0:	0800c000 	.word	0x0800c000
 80034e4:	08007fff 	.word	0x08007fff

080034e8 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	460a      	mov	r2, r1
 80034f2:	80fb      	strh	r3, [r7, #6]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80034fe:	4b54      	ldr	r3, [pc, #336]	; (8003650 <EE_PageTransfer+0x168>)
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8003502:	2300      	movs	r3, #0
 8003504:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	84bb      	strh	r3, [r7, #36]	; 0x24
 800350a:	2300      	movs	r3, #0
 800350c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	847b      	strh	r3, [r7, #34]	; 0x22
 8003512:	2300      	movs	r3, #0
 8003514:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800351a:	2000      	movs	r0, #0
 800351c:	f7ff ff44 	bl	80033a8 <EE_FindValidPage>
 8003520:	4603      	mov	r3, r0
 8003522:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8003524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003526:	2b01      	cmp	r3, #1
 8003528:	d104      	bne.n	8003534 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <EE_PageTransfer+0x168>)
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800352e:	2303      	movs	r3, #3
 8003530:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003532:	e009      	b.n	8003548 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8003534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <EE_PageTransfer+0x16c>)
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800353e:	2302      	movs	r3, #2
 8003540:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003542:	e001      	b.n	8003548 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8003544:	23ab      	movs	r3, #171	; 0xab
 8003546:	e07e      	b.n	8003646 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8003548:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003552:	2001      	movs	r0, #1
 8003554:	f001 fc76 	bl	8004e44 <HAL_FLASH_Program>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800355e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8003566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356a:	b29b      	uxth	r3, r3
 800356c:	e06b      	b.n	8003646 <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800356e:	88ba      	ldrh	r2, [r7, #4]
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <EE_VerifyPageFullWriteVariable>
 800357a:	4603      	mov	r3, r0
 800357c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800357e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8003584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003586:	e05e      	b.n	8003646 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003588:	2300      	movs	r3, #0
 800358a:	853b      	strh	r3, [r7, #40]	; 0x28
 800358c:	e027      	b.n	80035de <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800358e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003590:	4a31      	ldr	r2, [pc, #196]	; (8003658 <EE_PageTransfer+0x170>)
 8003592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	429a      	cmp	r2, r3
 800359a:	d01d      	beq.n	80035d8 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800359c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800359e:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <EE_PageTransfer+0x170>)
 80035a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a4:	492d      	ldr	r1, [pc, #180]	; (800365c <EE_PageTransfer+0x174>)
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fe40 	bl	800322c <EE_ReadVariable>
 80035ac:	4603      	mov	r3, r0
 80035ae:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80035b0:	8c3b      	ldrh	r3, [r7, #32]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d010      	beq.n	80035d8 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80035b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035b8:	4a27      	ldr	r2, [pc, #156]	; (8003658 <EE_PageTransfer+0x170>)
 80035ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035be:	4a27      	ldr	r2, [pc, #156]	; (800365c <EE_PageTransfer+0x174>)
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff35 	bl	8003434 <EE_VerifyPageFullWriteVariable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80035ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80035d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035d6:	e036      	b.n	8003646 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80035d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035da:	3301      	adds	r3, #1
 80035dc:	853b      	strh	r3, [r7, #40]	; 0x28
 80035de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d9d4      	bls.n	800358e <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80035e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ea:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80035f4:	f107 021c 	add.w	r2, r7, #28
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fde6 	bl	80051d0 <HAL_FLASHEx_Erase>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800360a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8003612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003616:	b29b      	uxth	r3, r3
 8003618:	e015      	b.n	8003646 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003624:	2001      	movs	r0, #1
 8003626:	f001 fc0d 	bl	8004e44 <HAL_FLASH_Program>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	b29b      	uxth	r3, r3
 800363e:	e002      	b.n	8003646 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003644:	b29b      	uxth	r3, r3
}
 8003646:	4618      	mov	r0, r3
 8003648:	3730      	adds	r7, #48	; 0x30
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	08008000 	.word	0x08008000
 8003654:	0800c000 	.word	0x0800c000
 8003658:	20000004 	.word	0x20000004
 800365c:	2000022e 	.word	0x2000022e

08003660 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	4790      	blx	r2
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	4413      	add	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  while (size--) {
 80036a0:	e7e6      	b.n	8003670 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80036a2:	697b      	ldr	r3, [r7, #20]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <_ZN5PrintC1Ev+0x24>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	0800f770 	.word	0x0800f770

080036d4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ffe4 	bl	80036ac <_ZN5PrintC1Ev>
 80036e4:	4a05      	ldr	r2, [pc, #20]	; (80036fc <_ZN6StreamC1Ev+0x28>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	0800f7a0 	.word	0x0800f7a0

08003700 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ffe1 	bl	80036d4 <_ZN6StreamC1Ev>
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3390      	adds	r3, #144	; 0x90
 8003722:	2220      	movs	r2, #32
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f007 fab8 	bl	800ac9c <memset>
  rxBufferIndex = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	0800f780 	.word	0x0800f780

08003770 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01d      	beq.n	80037c2 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800378c:	2b1f      	cmp	r3, #31
 800378e:	d901      	bls.n	8003794 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003790:	2300      	movs	r3, #0
 8003792:	e028      	b.n	80037e6 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800379a:	4619      	mov	r1, r3
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	440b      	add	r3, r1
 80037a2:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037aa:	3301      	adds	r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80037c0:	e010      	b.n	80037e4 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f984 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	2201      	movs	r2, #1
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8b7 	bl	8003942 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f949 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	333c      	adds	r3, #60	; 0x3c
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 fdbe 	bl	8006360 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d21e      	bcs.n	800384e <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	440a      	add	r2, r1
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	4611      	mov	r1, r2
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e7ed      	b.n	8003808 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f94f 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f882 	bl	8003942 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f914 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	333c      	adds	r3, #60	; 0x3c
 8003848:	4618      	mov	r0, r3
 800384a:	f002 fd89 	bl	8006360 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800384e:	687b      	ldr	r3, [r7, #4]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	1ad3      	subs	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003894:	b2da      	uxtb	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	429a      	cmp	r2, r3
 80038a0:	bf34      	ite	cc
 80038a2:	2301      	movcc	r3, #1
 80038a4:	2300      	movcs	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d012      	beq.n	80038d2 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80038be:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  int value = -1;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf34      	ite	cc
 8003902:	2301      	movcc	r3, #1
 8003904:	2300      	movcs	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800391e:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8003920:	68fb      	ldr	r3, [r7, #12]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003942:	b480      	push	{r7}
 8003944:	b089      	sub	sp, #36	; 0x24
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	dd41      	ble.n	80039e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800395e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003962:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b80      	cmp	r3, #128	; 0x80
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3b01      	subs	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ed      	bne.n	8003964 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e068      	b.n	8003a60 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	60ba      	str	r2, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	611a      	str	r2, [r3, #16]
        length--;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
        size++;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	3301      	adds	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d104      	bne.n	80039c0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0c8      	beq.n	8003958 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	60ba      	str	r2, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	611a      	str	r2, [r3, #16]
            length--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
            size++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3301      	adds	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80039e0:	e7ba      	b.n	8003958 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80039e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ec      	bne.n	80039e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	e025      	b.n	8003a60 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a1c:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a22:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ed      	bne.n	8003a24 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e008      	b.n	8003a60 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3724      	adds	r7, #36	; 0x24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d106      	bne.n	8003a8c <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003a7e:	2049      	movs	r0, #73	; 0x49
 8003a80:	f001 f9c4 	bl	8004e0c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003a84:	2048      	movs	r0, #72	; 0x48
 8003a86:	f001 f9c1 	bl	8004e0c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003a8a:	e016      	b.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003a96:	2022      	movs	r0, #34	; 0x22
 8003a98:	f001 f9b8 	bl	8004e0c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003a9c:	2021      	movs	r0, #33	; 0x21
 8003a9e:	f001 f9b5 	bl	8004e0c <HAL_NVIC_EnableIRQ>
}
 8003aa2:	e00a      	b.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d105      	bne.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003aae:	2020      	movs	r0, #32
 8003ab0:	f001 f9ac 	bl	8004e0c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ab4:	201f      	movs	r0, #31
 8003ab6:	f001 f9a9 	bl	8004e0c <HAL_NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40005c00 	.word	0x40005c00
 8003ac8:	40005800 	.word	0x40005800
 8003acc:	40005400 	.word	0x40005400

08003ad0 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d106      	bne.n	8003af0 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003ae2:	2049      	movs	r0, #73	; 0x49
 8003ae4:	f001 f9a0 	bl	8004e28 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003ae8:	2048      	movs	r0, #72	; 0x48
 8003aea:	f001 f99d 	bl	8004e28 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003aee:	e016      	b.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d106      	bne.n	8003b08 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003afa:	2022      	movs	r0, #34	; 0x22
 8003afc:	f001 f994 	bl	8004e28 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003b00:	2021      	movs	r0, #33	; 0x21
 8003b02:	f001 f991 	bl	8004e28 <HAL_NVIC_DisableIRQ>
}
 8003b06:	e00a      	b.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d105      	bne.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b12:	2020      	movs	r0, #32
 8003b14:	f001 f988 	bl	8004e28 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003b18:	201f      	movs	r0, #31
 8003b1a:	f001 f985 	bl	8004e28 <HAL_NVIC_DisableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40005c00 	.word	0x40005c00
 8003b2c:	40005800 	.word	0x40005800
 8003b30:	40005400 	.word	0x40005400

08003b34 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d110      	bne.n	8003b66 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10b      	bne.n	8003b66 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003b50:	4808      	ldr	r0, [pc, #32]	; (8003b74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003b52:	f7ff fdd5 	bl	8003700 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003b56:	4908      	ldr	r1, [pc, #32]	; (8003b78 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003b5a:	f7ff fdd1 	bl	8003700 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003b5e:	4908      	ldr	r1, [pc, #32]	; (8003b80 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003b60:	4808      	ldr	r0, [pc, #32]	; (8003b84 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003b62:	f7ff fdcd 	bl	8003700 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005400 	.word	0x40005400
 8003b74:	20000230 	.word	0x20000230
 8003b78:	40005800 	.word	0x40005800
 8003b7c:	200002e8 	.word	0x200002e8
 8003b80:	40005c00 	.word	0x40005c00
 8003b84:	200003a0 	.word	0x200003a0

08003b88 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7ff ffcf 	bl	8003b34 <_Z41__static_initialization_and_destruction_0ii>
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	72fb      	strb	r3, [r7, #11]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685c      	ldr	r4, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6898      	ldr	r0, [r3, #8]
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	7af9      	ldrb	r1, [r7, #11]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	47a0      	blx	r4
 8003bbc:	6178      	str	r0, [r7, #20]

  return ret;
 8003bbe:	697b      	ldr	r3, [r7, #20]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	72fb      	strb	r3, [r7, #11]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681c      	ldr	r4, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6898      	ldr	r0, [r3, #8]
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	7af9      	ldrb	r1, [r7, #11]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	47a0      	blx	r4
 8003bec:	6178      	str	r0, [r7, #20]

  return ret;
 8003bee:	697b      	ldr	r3, [r7, #20]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}

08003bf8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003c04:	f107 0208 	add.w	r2, r7, #8
 8003c08:	2301      	movs	r3, #1
 8003c0a:	2110      	movs	r1, #16
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffc3 	bl	8003b98 <lps22hh_read_reg>
 8003c12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7a3b      	ldrb	r3, [r7, #8]
 8003c24:	f362 0341 	bfi	r3, r2, #1, #1
 8003c28:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003c2a:	f107 0208 	add.w	r2, r7, #8
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2110      	movs	r1, #16
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffc8 	bl	8003bc8 <lps22hh_write_reg>
 8003c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003c50:	f107 0210 	add.w	r2, r7, #16
 8003c54:	2301      	movs	r3, #1
 8003c56:	2110      	movs	r1, #16
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff9d 	bl	8003b98 <lps22hh_read_reg>
 8003c5e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003c66:	f107 020c 	add.w	r2, r7, #12
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2111      	movs	r1, #17
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff92 	bl	8003b98 <lps22hh_read_reg>
 8003c74:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	7c3b      	ldrb	r3, [r7, #16]
 8003c86:	f362 1306 	bfi	r3, r2, #4, #3
 8003c8a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003c8c:	f107 0210 	add.w	r2, r7, #16
 8003c90:	2301      	movs	r3, #1
 8003c92:	2110      	movs	r1, #16
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff97 	bl	8003bc8 <lps22hh_write_reg>
 8003c9a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d119      	bne.n	8003cd6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	7b3b      	ldrb	r3, [r7, #12]
 8003cae:	f362 0341 	bfi	r3, r2, #1, #1
 8003cb2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	7b3b      	ldrb	r3, [r7, #12]
 8003cc0:	f362 0300 	bfi	r3, r2, #0, #1
 8003cc4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003cc6:	f107 020c 	add.w	r2, r7, #12
 8003cca:	2301      	movs	r3, #1
 8003ccc:	2111      	movs	r1, #17
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ff7a 	bl	8003bc8 <lps22hh_write_reg>
 8003cd4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003cd6:	697b      	ldr	r3, [r7, #20]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003cea:	2301      	movs	r3, #1
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	210f      	movs	r1, #15
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff51 	bl	8003b98 <lps22hh_read_reg>
 8003cf6:	60f8      	str	r0, [r7, #12]

  return ret;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	2301      	movs	r3, #1
 8003d14:	2111      	movs	r1, #17
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff3e 	bl	8003b98 <lps22hh_read_reg>
 8003d1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	7a3b      	ldrb	r3, [r7, #8]
 8003d2e:	f362 0382 	bfi	r3, r2, #2, #1
 8003d32:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003d34:	f107 0208 	add.w	r2, r7, #8
 8003d38:	2301      	movs	r3, #1
 8003d3a:	2111      	movs	r1, #17
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff43 	bl	8003bc8 <lps22hh_write_reg>
 8003d42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003d58:	f107 0208 	add.w	r2, r7, #8
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	2111      	movs	r1, #17
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff19 	bl	8003b98 <lps22hh_read_reg>
 8003d66:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8003d68:	7a3b      	ldrb	r3, [r7, #8]
 8003d6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	701a      	strb	r2, [r3, #0]

  return ret;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	72fb      	strb	r3, [r7, #11]
 8003d90:	4613      	mov	r3, r2
 8003d92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685c      	ldr	r4, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6898      	ldr	r0, [r3, #8]
 8003d9c:	893b      	ldrh	r3, [r7, #8]
 8003d9e:	7af9      	ldrb	r1, [r7, #11]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	47a0      	blx	r4
 8003da4:	6178      	str	r0, [r7, #20]

  return ret;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	72fb      	strb	r3, [r7, #11]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681c      	ldr	r4, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6898      	ldr	r0, [r3, #8]
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	7af9      	ldrb	r1, [r7, #11]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	47a0      	blx	r4
 8003dd4:	6178      	str	r0, [r7, #20]

  return ret;
 8003dd6:	697b      	ldr	r3, [r7, #20]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003dec:	f107 0208 	add.w	r2, r7, #8
 8003df0:	2301      	movs	r3, #1
 8003df2:	2110      	movs	r1, #16
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ffc3 	bl	8003d80 <lsm6dsr_read_reg>
 8003dfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	7a3b      	ldrb	r3, [r7, #8]
 8003e0c:	f362 0383 	bfi	r3, r2, #2, #2
 8003e10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003e12:	f107 0208 	add.w	r2, r7, #8
 8003e16:	2301      	movs	r3, #1
 8003e18:	2110      	movs	r1, #16
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ffc8 	bl	8003db0 <lsm6dsr_write_reg>
 8003e20:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 faac 	bl	80043a0 <lsm6dsr_fsm_enable_get>
 8003e48:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 80c4 	bne.w	8003fda <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e52:	7b3b      	ldrb	r3, [r7, #12]
 8003e54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003e5a:	7b3b      	ldrb	r3, [r7, #12]
 8003e5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e60:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e62:	4313      	orrs	r3, r2
 8003e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003e66:	7b3b      	ldrb	r3, [r7, #12]
 8003e68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003e72:	7b3b      	ldrb	r3, [r7, #12]
 8003e74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e8a:	7b3b      	ldrb	r3, [r7, #12]
 8003e8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e96:	7b3b      	ldrb	r3, [r7, #12]
 8003e98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003ea2:	7b3b      	ldrb	r3, [r7, #12]
 8003ea4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003eae:	7b7b      	ldrb	r3, [r7, #13]
 8003eb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003eba:	7b7b      	ldrb	r3, [r7, #13]
 8003ebc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003ec6:	7b7b      	ldrb	r3, [r7, #13]
 8003ec8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003ed2:	7b7b      	ldrb	r3, [r7, #13]
 8003ed4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003ede:	7b7b      	ldrb	r3, [r7, #13]
 8003ee0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ef0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003efc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d163      	bne.n	8003fda <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8003f12:	f107 030b 	add.w	r3, r7, #11
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fa6d 	bl	80043f8 <lsm6dsr_fsm_data_rate_get>
 8003f1e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d159      	bne.n	8003fda <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003f26:	7afb      	ldrb	r3, [r7, #11]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d853      	bhi.n	8003fd4 <lsm6dsr_xl_data_rate_set+0x1a8>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <lsm6dsr_xl_data_rate_set+0x108>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f57 	.word	0x08003f57
 8003f3c:	08003f75 	.word	0x08003f75
 8003f40:	08003f9f 	.word	0x08003f9f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003f4e:	e045      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	75fb      	strb	r3, [r7, #23]
            break;
 8003f54:	e042      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003f60:	e03c      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d102      	bne.n	8003f6e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f6c:	e036      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	75fb      	strb	r3, [r7, #23]
            break;
 8003f72:	e033      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003f7e:	e02d      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003f86:	2303      	movs	r3, #3
 8003f88:	75fb      	strb	r3, [r7, #23]
            break;
 8003f8a:	e027      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d102      	bne.n	8003f98 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003f92:	2303      	movs	r3, #3
 8003f94:	75fb      	strb	r3, [r7, #23]
            break;
 8003f96:	e021      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f9c:	e01e      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003fa8:	e018      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003fb4:	e012      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d102      	bne.n	8003fc2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8003fc0:	e00c      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d102      	bne.n	8003fce <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	75fb      	strb	r3, [r7, #23]
            break;
 8003fcc:	e006      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	75fb      	strb	r3, [r7, #23]
            break;
 8003fd2:	e003      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	75fb      	strb	r3, [r7, #23]
            break;
 8003fd8:	e000      	b.n	8003fdc <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8003fda:	bf00      	nop
    }
  }

  if (ret == 0)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003fe2:	f107 0208 	add.w	r2, r7, #8
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	2110      	movs	r1, #16
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fec8 	bl	8003d80 <lsm6dsr_read_reg>
 8003ff0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	7a3b      	ldrb	r3, [r7, #8]
 8004002:	f362 1307 	bfi	r3, r2, #4, #4
 8004006:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004008:	f107 0208 	add.w	r2, r7, #8
 800400c:	2301      	movs	r3, #1
 800400e:	2110      	movs	r1, #16
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fecd 	bl	8003db0 <lsm6dsr_write_reg>
 8004016:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004018:	693b      	ldr	r3, [r7, #16]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop

08004024 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004030:	f107 0208 	add.w	r2, r7, #8
 8004034:	2301      	movs	r3, #1
 8004036:	2111      	movs	r1, #17
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fea1 	bl	8003d80 <lsm6dsr_read_reg>
 800403e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	b2da      	uxtb	r2, r3
 800404e:	7a3b      	ldrb	r3, [r7, #8]
 8004050:	f362 0303 	bfi	r3, r2, #0, #4
 8004054:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004056:	f107 0208 	add.w	r2, r7, #8
 800405a:	2301      	movs	r3, #1
 800405c:	2111      	movs	r1, #17
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fea6 	bl	8003db0 <lsm6dsr_write_reg>
 8004064:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f98a 	bl	80043a0 <lsm6dsr_fsm_enable_get>
 800408c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 80c4 	bne.w	800421e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004096:	7b3b      	ldrb	r3, [r7, #12]
 8004098:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800409c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800409e:	7b3b      	ldrb	r3, [r7, #12]
 80040a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040aa:	7b3b      	ldrb	r3, [r7, #12]
 80040ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040b6:	7b3b      	ldrb	r3, [r7, #12]
 80040b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040be:	4313      	orrs	r3, r2
 80040c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040c2:	7b3b      	ldrb	r3, [r7, #12]
 80040c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040ca:	4313      	orrs	r3, r2
 80040cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040ce:	7b3b      	ldrb	r3, [r7, #12]
 80040d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80040d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040da:	7b3b      	ldrb	r3, [r7, #12]
 80040dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80040e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80040e6:	7b3b      	ldrb	r3, [r7, #12]
 80040e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80040f2:	7b7b      	ldrb	r3, [r7, #13]
 80040f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004106:	4313      	orrs	r3, r2
 8004108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004112:	4313      	orrs	r3, r2
 8004114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800411c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800411e:	4313      	orrs	r3, r2
 8004120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004122:	7b7b      	ldrb	r3, [r7, #13]
 8004124:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800412a:	4313      	orrs	r3, r2
 800412c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004136:	4313      	orrs	r3, r2
 8004138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800413a:	7b7b      	ldrb	r3, [r7, #13]
 800413c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004142:	4313      	orrs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800414c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800414e:	4313      	orrs	r3, r2
 8004150:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004152:	2b01      	cmp	r3, #1
 8004154:	d163      	bne.n	800421e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004156:	f107 030b 	add.w	r3, r7, #11
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f94b 	bl	80043f8 <lsm6dsr_fsm_data_rate_get>
 8004162:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d159      	bne.n	800421e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d853      	bhi.n	8004218 <lsm6dsr_gy_data_rate_set+0x1a8>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <lsm6dsr_gy_data_rate_set+0x108>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800419b 	.word	0x0800419b
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041e3 	.word	0x080041e3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004192:	e045      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	75fb      	strb	r3, [r7, #23]
            break;
 8004198:	e042      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80041a0:	2302      	movs	r3, #2
 80041a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80041a4:	e03c      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80041ac:	2302      	movs	r3, #2
 80041ae:	75fb      	strb	r3, [r7, #23]
            break;
 80041b0:	e036      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	75fb      	strb	r3, [r7, #23]
            break;
 80041b6:	e033      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80041be:	2303      	movs	r3, #3
 80041c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80041c2:	e02d      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80041ca:	2303      	movs	r3, #3
 80041cc:	75fb      	strb	r3, [r7, #23]
            break;
 80041ce:	e027      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d102      	bne.n	80041dc <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80041d6:	2303      	movs	r3, #3
 80041d8:	75fb      	strb	r3, [r7, #23]
            break;
 80041da:	e021      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	75fb      	strb	r3, [r7, #23]
            break;
 80041e0:	e01e      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80041e8:	2304      	movs	r3, #4
 80041ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80041ec:	e018      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d102      	bne.n	80041fa <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80041f4:	2304      	movs	r3, #4
 80041f6:	75fb      	strb	r3, [r7, #23]
            break;
 80041f8:	e012      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d102      	bne.n	8004206 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004200:	2304      	movs	r3, #4
 8004202:	75fb      	strb	r3, [r7, #23]
            break;
 8004204:	e00c      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d102      	bne.n	8004212 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800420c:	2304      	movs	r3, #4
 800420e:	75fb      	strb	r3, [r7, #23]
            break;
 8004210:	e006      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	75fb      	strb	r3, [r7, #23]
            break;
 8004216:	e003      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	75fb      	strb	r3, [r7, #23]
            break;
 800421c:	e000      	b.n	8004220 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800421e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2301      	movs	r3, #1
 800422c:	2111      	movs	r1, #17
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fda6 	bl	8003d80 <lsm6dsr_read_reg>
 8004234:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	b2da      	uxtb	r2, r3
 8004244:	7a3b      	ldrb	r3, [r7, #8]
 8004246:	f362 1307 	bfi	r3, r2, #4, #4
 800424a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800424c:	f107 0208 	add.w	r2, r7, #8
 8004250:	2301      	movs	r3, #1
 8004252:	2111      	movs	r1, #17
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fdab 	bl	8003db0 <lsm6dsr_write_reg>
 800425a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800425c:	693b      	ldr	r3, [r7, #16]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop

08004268 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004274:	f107 0208 	add.w	r2, r7, #8
 8004278:	2301      	movs	r3, #1
 800427a:	2112      	movs	r1, #18
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fd7f 	bl	8003d80 <lsm6dsr_read_reg>
 8004282:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	7a3b      	ldrb	r3, [r7, #8]
 8004294:	f362 1386 	bfi	r3, r2, #6, #1
 8004298:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800429a:	f107 0208 	add.w	r2, r7, #8
 800429e:	2301      	movs	r3, #1
 80042a0:	2112      	movs	r1, #18
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fd84 	bl	8003db0 <lsm6dsr_write_reg>
 80042a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80042c0:	f107 0208 	add.w	r2, r7, #8
 80042c4:	2301      	movs	r3, #1
 80042c6:	2101      	movs	r1, #1
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fd59 	bl	8003d80 <lsm6dsr_read_reg>
 80042ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	7a3b      	ldrb	r3, [r7, #8]
 80042e0:	f362 1387 	bfi	r3, r2, #6, #2
 80042e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80042e6:	f107 0208 	add.w	r2, r7, #8
 80042ea:	2301      	movs	r3, #1
 80042ec:	2101      	movs	r1, #1
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fd5e 	bl	8003db0 <lsm6dsr_write_reg>
 80042f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800430a:	2301      	movs	r3, #1
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	210f      	movs	r1, #15
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fd35 	bl	8003d80 <lsm6dsr_read_reg>
 8004316:	60f8      	str	r0, [r7, #12]

  return ret;
 8004318:	68fb      	ldr	r3, [r7, #12]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800432e:	f107 0208 	add.w	r2, r7, #8
 8004332:	2301      	movs	r3, #1
 8004334:	2112      	movs	r1, #18
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fd22 	bl	8003d80 <lsm6dsr_read_reg>
 800433c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10f      	bne.n	8004364 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	7a3b      	ldrb	r3, [r7, #8]
 800434e:	f362 0300 	bfi	r3, r2, #0, #1
 8004352:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004354:	f107 0208 	add.w	r2, r7, #8
 8004358:	2301      	movs	r3, #1
 800435a:	2112      	movs	r1, #18
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff fd27 	bl	8003db0 <lsm6dsr_write_reg>
 8004362:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004378:	f107 0208 	add.w	r2, r7, #8
 800437c:	2301      	movs	r3, #1
 800437e:	2112      	movs	r1, #18
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fcfd 	bl	8003d80 <lsm6dsr_read_reg>
 8004386:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8004388:	7a3b      	ldrb	r3, [r7, #8]
 800438a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	701a      	strb	r2, [r3, #0]

  return ret;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80043aa:	2102      	movs	r1, #2
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff81 	bl	80042b4 <lsm6dsr_mem_bank_set>
 80043b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80043ba:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80043bc:	2301      	movs	r3, #1
 80043be:	2146      	movs	r1, #70	; 0x46
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fcdd 	bl	8003d80 <lsm6dsr_read_reg>
 80043c6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80043d2:	2301      	movs	r3, #1
 80043d4:	2147      	movs	r1, #71	; 0x47
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fcd2 	bl	8003d80 <lsm6dsr_read_reg>
 80043dc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80043e4:	2100      	movs	r1, #0
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff64 	bl	80042b4 <lsm6dsr_mem_bank_set>
 80043ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8004402:	2102      	movs	r1, #2
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff55 	bl	80042b4 <lsm6dsr_mem_bank_set>
 800440a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8004412:	f107 0208 	add.w	r2, r7, #8
 8004416:	2301      	movs	r3, #1
 8004418:	215f      	movs	r1, #95	; 0x5f
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fcb0 	bl	8003d80 <lsm6dsr_read_reg>
 8004420:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff42 	bl	80042b4 <lsm6dsr_mem_bank_set>
 8004430:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8004432:	7a3b      	ldrb	r3, [r7, #8]
 8004434:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d81a      	bhi.n	8004474 <lsm6dsr_fsm_data_rate_get+0x7c>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004455 	.word	0x08004455
 8004448:	0800445d 	.word	0x0800445d
 800444c:	08004465 	.word	0x08004465
 8004450:	0800446d 	.word	0x0800446d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
      break;
 800445a:	e00f      	b.n	800447c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
      break;
 8004462:	e00b      	b.n	800447c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2202      	movs	r2, #2
 8004468:	701a      	strb	r2, [r3, #0]
      break;
 800446a:	e007      	b.n	800447c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2203      	movs	r2, #3
 8004470:	701a      	strb	r2, [r3, #0]
      break;
 8004472:	e003      	b.n	800447c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
      break;
 800447a:	bf00      	nop
  }

  return ret;
 800447c:	68fb      	ldr	r3, [r7, #12]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop

08004488 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	2208      	movs	r2, #8
 8004496:	4905      	ldr	r1, [pc, #20]	; (80044ac <HAL_RTC_AlarmAEventCallback+0x24>)
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <HAL_RTC_AlarmAEventCallback+0x28>)
 800449a:	f005 f896 	bl	80095ca <HAL_UART_Transmit>
	flagA = 1;
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	0800f5dc 	.word	0x0800f5dc
 80044b0:	20001108 	.word	0x20001108
 80044b4:	20000458 	.word	0x20000458

080044b8 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 80044b8:	b084      	sub	sp, #16
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	f107 0c10 	add.w	ip, r7, #16
 80044c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	2211      	movs	r2, #17
 80044ce:	490e      	ldr	r1, [pc, #56]	; (8004508 <MRT_SetupRTOS+0x50>)
 80044d0:	480e      	ldr	r0, [pc, #56]	; (800450c <MRT_SetupRTOS+0x54>)
 80044d2:	f005 f87a 	bl	80095ca <HAL_UART_Transmit>
	rtos.huart = uart;
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <MRT_SetupRTOS+0x54>)
 80044d8:	4618      	mov	r0, r3
 80044da:	f107 0310 	add.w	r3, r7, #16
 80044de:	2244      	movs	r2, #68	; 0x44
 80044e0:	4619      	mov	r1, r3
 80044e2:	f006 fbb3 	bl	800ac4c <memcpy>
	rtos.sleepTime = sleepT;
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <MRT_SetupRTOS+0x54>)
 80044e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80044ec:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 80044f0:	f000 f80e 	bl	8004510 <MRT_WUProcedure>
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 80044f8:	79fb      	ldrb	r3, [r7, #7]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004504:	b004      	add	sp, #16
 8004506:	4770      	bx	lr
 8004508:	0800f5f4 	.word	0x0800f5f4
 800450c:	20001108 	.word	0x20001108

08004510 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 8004516:	2300      	movs	r3, #0
 8004518:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <MRT_WUProcedure+0x5c>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d11b      	bne.n	800455e <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 8004526:	2301      	movs	r3, #1
 8004528:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <MRT_WUProcedure+0x5c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a0f      	ldr	r2, [pc, #60]	; (800456c <MRT_WUProcedure+0x5c>)
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <MRT_WUProcedure+0x60>)
 8004538:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f7fb fe58 	bl	80001f0 <strlen>
 8004540:	4603      	mov	r3, r0
 8004542:	b29a      	uxth	r2, r3
 8004544:	f04f 33ff 	mov.w	r3, #4294967295
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	480a      	ldr	r0, [pc, #40]	; (8004574 <MRT_WUProcedure+0x64>)
 800454c:	f005 f83d 	bl	80095ca <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004550:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004554:	f002 fb10 	bl	8006b78 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004558:	4807      	ldr	r0, [pc, #28]	; (8004578 <MRT_WUProcedure+0x68>)
 800455a:	f003 fd69 	bl	8008030 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 800455e:	f000 f80d 	bl	800457c <MRT_ClearFlags>

	return wakingUp;
 8004562:	79fb      	ldrb	r3, [r7, #7]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40007000 	.word	0x40007000
 8004570:	0800f608 	.word	0x0800f608
 8004574:	20001108 	.word	0x20001108
 8004578:	20000e50 	.word	0x20000e50

0800457c <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
 8004584:	2214      	movs	r2, #20
 8004586:	4932      	ldr	r1, [pc, #200]	; (8004650 <MRT_ClearFlags+0xd4>)
 8004588:	4832      	ldr	r0, [pc, #200]	; (8004654 <MRT_ClearFlags+0xd8>)
 800458a:	f005 f81e 	bl	80095ca <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800458e:	4b32      	ldr	r3, [pc, #200]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	22ca      	movs	r2, #202	; 0xca
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
 8004596:	4b30      	ldr	r3, [pc, #192]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2253      	movs	r2, #83	; 0x53
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800459e:	e00f      	b.n	80045c0 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	2217      	movs	r2, #23
 80045a6:	492d      	ldr	r1, [pc, #180]	; (800465c <MRT_ClearFlags+0xe0>)
 80045a8:	482a      	ldr	r0, [pc, #168]	; (8004654 <MRT_ClearFlags+0xd8>)
 80045aa:	f005 f80e 	bl	80095ca <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80045ae:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80045be:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e8      	bne.n	80045a0 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <MRT_ClearFlags+0xe4>)
 80045d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045dc:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	22ca      	movs	r2, #202	; 0xca
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <MRT_ClearFlags+0xdc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2253      	movs	r2, #83	; 0x53
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80045ee:	e00f      	b.n	8004610 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	2217      	movs	r2, #23
 80045f6:	491b      	ldr	r1, [pc, #108]	; (8004664 <MRT_ClearFlags+0xe8>)
 80045f8:	4816      	ldr	r0, [pc, #88]	; (8004654 <MRT_ClearFlags+0xd8>)
 80045fa:	f004 ffe6 	bl	80095ca <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800460e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e8      	bne.n	80045f0 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	22ff      	movs	r2, #255	; 0xff
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <MRT_ClearFlags+0xe4>)
 8004628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800462c:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <MRT_ClearFlags+0xec>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <MRT_ClearFlags+0xec>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <MRT_ClearFlags+0xdc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <MRT_ClearFlags+0xdc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800464a:	60da      	str	r2, [r3, #12]
}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0800f628 	.word	0x0800f628
 8004654:	20001108 	.word	0x20001108
 8004658:	20000e50 	.word	0x20000e50
 800465c:	0800f640 	.word	0x0800f640
 8004660:	40013c00 	.word	0x40013c00
 8004664:	0800f658 	.word	0x0800f658
 8004668:	40007000 	.word	0x40007000

0800466c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_Init+0x40>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <HAL_Init+0x40>)
 8004676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_Init+0x40>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <HAL_Init+0x40>)
 8004682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a07      	ldr	r2, [pc, #28]	; (80046ac <HAL_Init+0x40>)
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004694:	2003      	movs	r0, #3
 8004696:	f000 fb92 	bl	8004dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe f870 	bl	8002780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046a0:	f7fd fd34 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023c00 	.word	0x40023c00

080046b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_IncTick+0x20>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_IncTick+0x24>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <HAL_IncTick+0x24>)
 80046c2:	6013      	str	r3, [r2, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000010 	.word	0x20000010
 80046d4:	20001150 	.word	0x20001150

080046d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return uwTick;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_GetTick+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20001150 	.word	0x20001150

080046f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7ff ffee 	bl	80046d8 <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d005      	beq.n	8004716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_Delay+0x44>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004716:	bf00      	nop
 8004718:	f7ff ffde 	bl	80046d8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	429a      	cmp	r2, r3
 8004726:	d8f7      	bhi.n	8004718 <HAL_Delay+0x28>
  {
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000010 	.word	0x20000010

08004738 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e033      	b.n	80047b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd fd04 	bl	8002164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800477e:	f023 0302 	bic.w	r3, r3, #2
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f94a 	bl	8004a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
 80047a6:	e001      	b.n	80047ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e113      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x244>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d925      	bls.n	8004838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	3b1e      	subs	r3, #30
 8004802:	2207      	movs	r2, #7
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43da      	mvns	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	400a      	ands	r2, r1
 8004810:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68d9      	ldr	r1, [r3, #12]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	4618      	mov	r0, r3
 8004824:	4603      	mov	r3, r0
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4403      	add	r3, r0
 800482a:	3b1e      	subs	r3, #30
 800482c:	409a      	lsls	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e022      	b.n	800487e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	2207      	movs	r2, #7
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	400a      	ands	r2, r1
 800485a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	4618      	mov	r0, r3
 800486e:	4603      	mov	r3, r0
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4403      	add	r3, r0
 8004874:	409a      	lsls	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d824      	bhi.n	80048d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	3b05      	subs	r3, #5
 8004898:	221f      	movs	r2, #31
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	400a      	ands	r2, r1
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4618      	mov	r0, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	3b05      	subs	r3, #5
 80048c2:	fa00 f203 	lsl.w	r2, r0, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	635a      	str	r2, [r3, #52]	; 0x34
 80048ce:	e04c      	b.n	800496a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d824      	bhi.n	8004922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	3b23      	subs	r3, #35	; 0x23
 80048ea:	221f      	movs	r2, #31
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43da      	mvns	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	400a      	ands	r2, r1
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	4618      	mov	r0, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	3b23      	subs	r3, #35	; 0x23
 8004914:	fa00 f203 	lsl.w	r2, r0, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
 8004920:	e023      	b.n	800496a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	3b41      	subs	r3, #65	; 0x41
 8004934:	221f      	movs	r2, #31
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	400a      	ands	r2, r1
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	3b41      	subs	r3, #65	; 0x41
 800495e:	fa00 f203 	lsl.w	r2, r0, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <HAL_ADC_ConfigChannel+0x250>)
 800496c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <HAL_ADC_ConfigChannel+0x254>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10f      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1d8>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b12      	cmp	r3, #18
 800497e:	d10b      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_ADC_ConfigChannel+0x254>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12b      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x23a>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_ADC_ConfigChannel+0x258>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0x1f4>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b11      	cmp	r3, #17
 80049b2:	d122      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <HAL_ADC_ConfigChannel+0x258>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_ADC_ConfigChannel+0x25c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <HAL_ADC_ConfigChannel+0x260>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	0c9a      	lsrs	r2, r3, #18
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049ec:	e002      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f9      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40012300 	.word	0x40012300
 8004a14:	40012000 	.word	0x40012000
 8004a18:	10000012 	.word	0x10000012
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	431bde83 	.word	0x431bde83

08004a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a2c:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <ADC_Init+0x1f0>)
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	021a      	lsls	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <ADC_Init+0x1f4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	e00f      	b.n	8004b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0202 	bic.w	r2, r2, #2
 8004b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7e1b      	ldrb	r3, [r3, #24]
 8004b3c:	005a      	lsls	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	035a      	lsls	r2, r3, #13
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e007      	b.n	8004b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	051a      	lsls	r2, r3, #20
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6899      	ldr	r1, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bda:	025a      	lsls	r2, r3, #9
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6899      	ldr	r1, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	029a      	lsls	r2, r3, #10
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40012300 	.word	0x40012300
 8004c18:	0f000001 	.word	0x0f000001

08004c1c <__NVIC_SetPriorityGrouping>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	60d3      	str	r3, [r2, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <__NVIC_GetPriorityGrouping>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <__NVIC_GetPriorityGrouping+0x18>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	f003 0307 	and.w	r3, r3, #7
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <__NVIC_EnableIRQ>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	db0b      	blt.n	8004caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	f003 021f 	and.w	r2, r3, #31
 8004c98:	4907      	ldr	r1, [pc, #28]	; (8004cb8 <__NVIC_EnableIRQ+0x38>)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000e100 	.word	0xe000e100

08004cbc <__NVIC_DisableIRQ>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db12      	blt.n	8004cf4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	490a      	ldr	r1, [pc, #40]	; (8004d00 <__NVIC_DisableIRQ+0x44>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	3320      	adds	r3, #32
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce8:	f3bf 8f4f 	dsb	sy
}
 8004cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cee:	f3bf 8f6f 	isb	sy
}
 8004cf2:	bf00      	nop
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000e100 	.word	0xe000e100

08004d04 <__NVIC_SetPriority>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	db0a      	blt.n	8004d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	490c      	ldr	r1, [pc, #48]	; (8004d50 <__NVIC_SetPriority+0x4c>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	0112      	lsls	r2, r2, #4
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	440b      	add	r3, r1
 8004d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d2c:	e00a      	b.n	8004d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4908      	ldr	r1, [pc, #32]	; (8004d54 <__NVIC_SetPriority+0x50>)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	3b04      	subs	r3, #4
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	440b      	add	r3, r1
 8004d42:	761a      	strb	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000e100 	.word	0xe000e100
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <NVIC_EncodePriority>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f1c3 0307 	rsb	r3, r3, #7
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf28      	it	cs
 8004d76:	2304      	movcs	r3, #4
 8004d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d902      	bls.n	8004d88 <NVIC_EncodePriority+0x30>
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3b03      	subs	r3, #3
 8004d86:	e000      	b.n	8004d8a <NVIC_EncodePriority+0x32>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da0:	f04f 31ff 	mov.w	r1, #4294967295
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	43d9      	mvns	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	4313      	orrs	r3, r2
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff28 	bl	8004c1c <__NVIC_SetPriorityGrouping>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004de6:	f7ff ff3d 	bl	8004c64 <__NVIC_GetPriorityGrouping>
 8004dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	6978      	ldr	r0, [r7, #20]
 8004df2:	f7ff ffb1 	bl	8004d58 <NVIC_EncodePriority>
 8004df6:	4602      	mov	r2, r0
 8004df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ff80 	bl	8004d04 <__NVIC_SetPriority>
}
 8004e04:	bf00      	nop
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff30 	bl	8004c80 <__NVIC_EnableIRQ>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff40 	bl	8004cbc <__NVIC_DisableIRQ>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_FLASH_Program+0xa0>)
 8004e58:	7e1b      	ldrb	r3, [r3, #24]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_FLASH_Program+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e03b      	b.n	8004eda <HAL_FLASH_Program+0x96>
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_FLASH_Program+0xa0>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e6c:	f000 f870 	bl	8004f50 <FLASH_WaitForLastOperation>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d12b      	bne.n	8004ed2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004e80:	783b      	ldrb	r3, [r7, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	68b8      	ldr	r0, [r7, #8]
 8004e86:	f000 f91b 	bl	80050c0 <FLASH_Program_Byte>
 8004e8a:	e016      	b.n	8004eba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d105      	bne.n	8004e9e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004e92:	883b      	ldrh	r3, [r7, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	68b8      	ldr	r0, [r7, #8]
 8004e98:	f000 f8ee 	bl	8005078 <FLASH_Program_HalfWord>
 8004e9c:	e00d      	b.n	8004eba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d105      	bne.n	8004eb0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	68b8      	ldr	r0, [r7, #8]
 8004eaa:	f000 f8c3 	bl	8005034 <FLASH_Program_Word>
 8004eae:	e004      	b.n	8004eba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	68b8      	ldr	r0, [r7, #8]
 8004eb6:	f000 f88b 	bl	8004fd0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ebe:	f000 f847 	bl	8004f50 <FLASH_WaitForLastOperation>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <HAL_FLASH_Program+0xa4>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <HAL_FLASH_Program+0xa4>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_FLASH_Program+0xa0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20001154 	.word	0x20001154
 8004ee8:	40023c00 	.word	0x40023c00

08004eec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_FLASH_Unlock+0x38>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da0b      	bge.n	8004f16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_FLASH_Unlock+0x38>)
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <HAL_FLASH_Unlock+0x3c>)
 8004f02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <HAL_FLASH_Unlock+0x38>)
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <HAL_FLASH_Unlock+0x40>)
 8004f08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_FLASH_Unlock+0x38>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da01      	bge.n	8004f16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004f16:	79fb      	ldrb	r3, [r7, #7]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	45670123 	.word	0x45670123
 8004f2c:	cdef89ab 	.word	0xcdef89ab

08004f30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_FLASH_Lock+0x1c>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <HAL_FLASH_Lock+0x1c>)
 8004f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40023c00 	.word	0x40023c00

08004f50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <FLASH_WaitForLastOperation+0x78>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f62:	f7ff fbb9 	bl	80046d8 <HAL_GetTick>
 8004f66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f68:	e010      	b.n	8004f8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d00c      	beq.n	8004f8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <FLASH_WaitForLastOperation+0x38>
 8004f78:	f7ff fbae 	bl	80046d8 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d201      	bcs.n	8004f8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e019      	b.n	8004fc0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <FLASH_WaitForLastOperation+0x7c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e8      	bne.n	8004f6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <FLASH_WaitForLastOperation+0x7c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <FLASH_WaitForLastOperation+0x7c>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <FLASH_WaitForLastOperation+0x7c>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004fb6:	f000 f8a5 	bl	8005104 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
  
}  
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20001154 	.word	0x20001154
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	4a10      	ldr	r2, [pc, #64]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004fee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <FLASH_Program_DoubleWord+0x60>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005006:	f3bf 8f6f 	isb	sy
}
 800500a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800500c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	000a      	movs	r2, r1
 800501a:	2300      	movs	r3, #0
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	3104      	adds	r1, #4
 8005020:	4613      	mov	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40023c00 	.word	0x40023c00

08005034 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <FLASH_Program_Word+0x40>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <FLASH_Program_Word+0x40>)
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <FLASH_Program_Word+0x40>)
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <FLASH_Program_Word+0x40>)
 8005050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005054:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <FLASH_Program_Word+0x40>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	4a06      	ldr	r2, [pc, #24]	; (8005074 <FLASH_Program_Word+0x40>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40023c00 	.word	0x40023c00

08005078 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	4a06      	ldr	r2, [pc, #24]	; (80050bc <FLASH_Program_HalfWord+0x44>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	887a      	ldrh	r2, [r7, #2]
 80050ac:	801a      	strh	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00

080050c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4a06      	ldr	r2, [pc, #24]	; (8005100 <FLASH_Program_Byte+0x40>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	701a      	strb	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023c00 	.word	0x40023c00

08005104 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f043 0310 	orr.w	r3, r3, #16
 800511c:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 800511e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005120:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005122:	2210      	movs	r2, #16
 8005124:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005126:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f043 0308 	orr.w	r3, r3, #8
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 800513c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005140:	2220      	movs	r2, #32
 8005142:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005144:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 800515a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 800515e:	2240      	movs	r2, #64	; 0x40
 8005160:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005162:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	4a15      	ldr	r2, [pc, #84]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005178:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 8005196:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 800519a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800519e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f043 0320 	orr.w	r3, r3, #32
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <FLASH_SetErrorCode+0xc8>)
 80051b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80051b8:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <FLASH_SetErrorCode+0xc4>)
 80051ba:	2202      	movs	r2, #2
 80051bc:	60da      	str	r2, [r3, #12]
  }
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40023c00 	.word	0x40023c00
 80051cc:	20001154 	.word	0x20001154

080051d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051e2:	4b32      	ldr	r3, [pc, #200]	; (80052ac <HAL_FLASHEx_Erase+0xdc>)
 80051e4:	7e1b      	ldrb	r3, [r3, #24]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_FLASHEx_Erase+0x1e>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e05a      	b.n	80052a4 <HAL_FLASHEx_Erase+0xd4>
 80051ee:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <HAL_FLASHEx_Erase+0xdc>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051f8:	f7ff feaa 	bl	8004f50 <FLASH_WaitForLastOperation>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d14a      	bne.n	800529c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d117      	bne.n	8005246 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 f846 	bl	80052b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800522c:	f7ff fe90 	bl	8004f50 <FLASH_WaitForLastOperation>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005234:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <HAL_FLASHEx_Erase+0xe0>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_FLASHEx_Erase+0xe0>)
 800523a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800523e:	f023 0304 	bic.w	r3, r3, #4
 8005242:	6113      	str	r3, [r2, #16]
 8005244:	e028      	b.n	8005298 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	e01c      	b.n	8005288 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4619      	mov	r1, r3
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f000 f866 	bl	8005328 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800525c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005260:	f7ff fe76 	bl	8004f50 <FLASH_WaitForLastOperation>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_FLASHEx_Erase+0xe0>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <HAL_FLASHEx_Erase+0xe0>)
 800526e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005272:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	601a      	str	r2, [r3, #0]
          break;
 8005280:	e00a      	b.n	8005298 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3301      	adds	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4413      	add	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3da      	bcc.n	800524e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005298:	f000 f894 	bl	80053c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_FLASHEx_Erase+0xdc>)
 800529e:	2200      	movs	r2, #0
 80052a0:	761a      	strb	r2, [r3, #24]

  return status;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20001154 	.word	0x20001154
 80052b0:	40023c00 	.word	0x40023c00

080052b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052c0:	4b18      	ldr	r3, [pc, #96]	; (8005324 <FLASH_MassErase+0x70>)
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <FLASH_MassErase+0x70>)
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d108      	bne.n	80052e4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <FLASH_MassErase+0x70>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4a13      	ldr	r2, [pc, #76]	; (8005324 <FLASH_MassErase+0x70>)
 80052d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6113      	str	r3, [r2, #16]
 80052e2:	e00f      	b.n	8005304 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d106      	bne.n	80052f8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <FLASH_MassErase+0x70>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <FLASH_MassErase+0x70>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6113      	str	r3, [r2, #16]
 80052f6:	e005      	b.n	8005304 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <FLASH_MassErase+0x70>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <FLASH_MassErase+0x70>)
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005302:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <FLASH_MassErase+0x70>)
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	4313      	orrs	r3, r2
 800530e:	4a05      	ldr	r2, [pc, #20]	; (8005324 <FLASH_MassErase+0x70>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6113      	str	r3, [r2, #16]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40023c00 	.word	0x40023c00

08005328 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e010      	b.n	8005366 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d103      	bne.n	8005352 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800534a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e009      	b.n	8005366 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d103      	bne.n	8005360 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e002      	b.n	8005366 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005360:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b0b      	cmp	r3, #11
 800536a:	d902      	bls.n	8005372 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4a12      	ldr	r2, [pc, #72]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	490f      	ldr	r1, [pc, #60]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005390:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005394:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4313      	orrs	r3, r2
 80053a0:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <FLASH_Erase_Sector+0x98>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	6113      	str	r3, [r2, #16]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40023c00 	.word	0x40023c00

080053c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <FLASH_FlushCaches+0x88>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d017      	beq.n	8005404 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <FLASH_FlushCaches+0x88>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <FLASH_FlushCaches+0x88>)
 80053da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <FLASH_FlushCaches+0x88>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <FLASH_FlushCaches+0x88>)
 80053e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <FLASH_FlushCaches+0x88>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	; (800544c <FLASH_FlushCaches+0x88>)
 80053f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <FLASH_FlushCaches+0x88>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <FLASH_FlushCaches+0x88>)
 80053fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005402:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <FLASH_FlushCaches+0x88>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d017      	beq.n	8005440 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <FLASH_FlushCaches+0x88>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <FLASH_FlushCaches+0x88>)
 8005416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <FLASH_FlushCaches+0x88>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <FLASH_FlushCaches+0x88>)
 8005422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <FLASH_FlushCaches+0x88>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <FLASH_FlushCaches+0x88>)
 800542e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005432:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <FLASH_FlushCaches+0x88>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <FLASH_FlushCaches+0x88>)
 800543a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543e:	6013      	str	r3, [r2, #0]
  }
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40023c00 	.word	0x40023c00

08005450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e177      	b.n	800575c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800546c:	2201      	movs	r2, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	f040 8166 	bne.w	8005756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d005      	beq.n	80054a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d130      	bne.n	8005504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d8:	2201      	movs	r2, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0201 	and.w	r2, r3, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b03      	cmp	r3, #3
 800550e:	d017      	beq.n	8005540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d123      	bne.n	8005594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	220f      	movs	r2, #15
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80c0 	beq.w	8005756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b66      	ldr	r3, [pc, #408]	; (8005774 <HAL_GPIO_Init+0x324>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	4a65      	ldr	r2, [pc, #404]	; (8005774 <HAL_GPIO_Init+0x324>)
 80055e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e4:	6453      	str	r3, [r2, #68]	; 0x44
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <HAL_GPIO_Init+0x324>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f2:	4a61      	ldr	r2, [pc, #388]	; (8005778 <HAL_GPIO_Init+0x328>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	220f      	movs	r2, #15
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_GPIO_Init+0x32c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d037      	beq.n	800568e <HAL_GPIO_Init+0x23e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a57      	ldr	r2, [pc, #348]	; (8005780 <HAL_GPIO_Init+0x330>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d031      	beq.n	800568a <HAL_GPIO_Init+0x23a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a56      	ldr	r2, [pc, #344]	; (8005784 <HAL_GPIO_Init+0x334>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d02b      	beq.n	8005686 <HAL_GPIO_Init+0x236>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a55      	ldr	r2, [pc, #340]	; (8005788 <HAL_GPIO_Init+0x338>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d025      	beq.n	8005682 <HAL_GPIO_Init+0x232>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a54      	ldr	r2, [pc, #336]	; (800578c <HAL_GPIO_Init+0x33c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01f      	beq.n	800567e <HAL_GPIO_Init+0x22e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a53      	ldr	r2, [pc, #332]	; (8005790 <HAL_GPIO_Init+0x340>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d019      	beq.n	800567a <HAL_GPIO_Init+0x22a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_GPIO_Init+0x344>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_GPIO_Init+0x226>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a51      	ldr	r2, [pc, #324]	; (8005798 <HAL_GPIO_Init+0x348>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00d      	beq.n	8005672 <HAL_GPIO_Init+0x222>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a50      	ldr	r2, [pc, #320]	; (800579c <HAL_GPIO_Init+0x34c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <HAL_GPIO_Init+0x21e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a4f      	ldr	r2, [pc, #316]	; (80057a0 <HAL_GPIO_Init+0x350>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_GPIO_Init+0x21a>
 8005666:	2309      	movs	r3, #9
 8005668:	e012      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800566a:	230a      	movs	r3, #10
 800566c:	e010      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800566e:	2308      	movs	r3, #8
 8005670:	e00e      	b.n	8005690 <HAL_GPIO_Init+0x240>
 8005672:	2307      	movs	r3, #7
 8005674:	e00c      	b.n	8005690 <HAL_GPIO_Init+0x240>
 8005676:	2306      	movs	r3, #6
 8005678:	e00a      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800567a:	2305      	movs	r3, #5
 800567c:	e008      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800567e:	2304      	movs	r3, #4
 8005680:	e006      	b.n	8005690 <HAL_GPIO_Init+0x240>
 8005682:	2303      	movs	r3, #3
 8005684:	e004      	b.n	8005690 <HAL_GPIO_Init+0x240>
 8005686:	2302      	movs	r3, #2
 8005688:	e002      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_GPIO_Init+0x240>
 800568e:	2300      	movs	r3, #0
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f002 0203 	and.w	r2, r2, #3
 8005696:	0092      	lsls	r2, r2, #2
 8005698:	4093      	lsls	r3, r2
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056a0:	4935      	ldr	r1, [pc, #212]	; (8005778 <HAL_GPIO_Init+0x328>)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	3302      	adds	r3, #2
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ae:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <HAL_GPIO_Init+0x354>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056d2:	4a34      	ldr	r2, [pc, #208]	; (80057a4 <HAL_GPIO_Init+0x354>)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <HAL_GPIO_Init+0x354>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <HAL_GPIO_Init+0x354>)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005702:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <HAL_GPIO_Init+0x354>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	43db      	mvns	r3, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4013      	ands	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <HAL_GPIO_Init+0x354>)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <HAL_GPIO_Init+0x354>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <HAL_GPIO_Init+0x354>)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	f67f ae84 	bls.w	800546c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3724      	adds	r7, #36	; 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	40013800 	.word	0x40013800
 800577c:	40020000 	.word	0x40020000
 8005780:	40020400 	.word	0x40020400
 8005784:	40020800 	.word	0x40020800
 8005788:	40020c00 	.word	0x40020c00
 800578c:	40021000 	.word	0x40021000
 8005790:	40021400 	.word	0x40021400
 8005794:	40021800 	.word	0x40021800
 8005798:	40021c00 	.word	0x40021c00
 800579c:	40022000 	.word	0x40022000
 80057a0:	40022400 	.word	0x40022400
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
 80057c4:	e001      	b.n	80057ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
 80057e4:	4613      	mov	r3, r2
 80057e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057e8:	787b      	ldrb	r3, [r7, #1]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057f4:	e003      	b.n	80057fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057f6:	887b      	ldrh	r3, [r7, #2]
 80057f8:	041a      	lsls	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	619a      	str	r2, [r3, #24]
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d006      	beq.n	8005830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005822:	4a05      	ldr	r2, [pc, #20]	; (8005838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fd faba 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40013c00 	.word	0x40013c00

0800583c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e12b      	b.n	8005aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fc fcc2 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	; 0x24
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800588e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800589e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058a0:	f001 fdc8 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 80058a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4a81      	ldr	r2, [pc, #516]	; (8005ab0 <HAL_I2C_Init+0x274>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d807      	bhi.n	80058c0 <HAL_I2C_Init+0x84>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a80      	ldr	r2, [pc, #512]	; (8005ab4 <HAL_I2C_Init+0x278>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	bf94      	ite	ls
 80058b8:	2301      	movls	r3, #1
 80058ba:	2300      	movhi	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e006      	b.n	80058ce <HAL_I2C_Init+0x92>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a7d      	ldr	r2, [pc, #500]	; (8005ab8 <HAL_I2C_Init+0x27c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bf94      	ite	ls
 80058c8:	2301      	movls	r3, #1
 80058ca:	2300      	movhi	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0e7      	b.n	8005aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a78      	ldr	r2, [pc, #480]	; (8005abc <HAL_I2C_Init+0x280>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	0c9b      	lsrs	r3, r3, #18
 80058e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a6a      	ldr	r2, [pc, #424]	; (8005ab0 <HAL_I2C_Init+0x274>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d802      	bhi.n	8005910 <HAL_I2C_Init+0xd4>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3301      	adds	r3, #1
 800590e:	e009      	b.n	8005924 <HAL_I2C_Init+0xe8>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	4a69      	ldr	r2, [pc, #420]	; (8005ac0 <HAL_I2C_Init+0x284>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	099b      	lsrs	r3, r3, #6
 8005922:	3301      	adds	r3, #1
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	430b      	orrs	r3, r1
 800592a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	495c      	ldr	r1, [pc, #368]	; (8005ab0 <HAL_I2C_Init+0x274>)
 8005940:	428b      	cmp	r3, r1
 8005942:	d819      	bhi.n	8005978 <HAL_I2C_Init+0x13c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1e59      	subs	r1, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005958:	400b      	ands	r3, r1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_I2C_Init+0x138>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1e59      	subs	r1, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fbb1 f3f3 	udiv	r3, r1, r3
 800596c:	3301      	adds	r3, #1
 800596e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005972:	e051      	b.n	8005a18 <HAL_I2C_Init+0x1dc>
 8005974:	2304      	movs	r3, #4
 8005976:	e04f      	b.n	8005a18 <HAL_I2C_Init+0x1dc>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d111      	bne.n	80059a4 <HAL_I2C_Init+0x168>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1e58      	subs	r0, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	440b      	add	r3, r1
 800598e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005992:	3301      	adds	r3, #1
 8005994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e012      	b.n	80059ca <HAL_I2C_Init+0x18e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1e58      	subs	r0, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6859      	ldr	r1, [r3, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	0099      	lsls	r1, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ba:	3301      	adds	r3, #1
 80059bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Init+0x196>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_I2C_Init+0x1dc>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <HAL_I2C_Init+0x1bc>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1e58      	subs	r0, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6859      	ldr	r1, [r3, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	440b      	add	r3, r1
 80059e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f6:	e00f      	b.n	8005a18 <HAL_I2C_Init+0x1dc>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1e58      	subs	r0, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6859      	ldr	r1, [r3, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	0099      	lsls	r1, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	6809      	ldr	r1, [r1, #0]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6911      	ldr	r1, [r2, #16]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	4311      	orrs	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	000186a0 	.word	0x000186a0
 8005ab4:	001e847f 	.word	0x001e847f
 8005ab8:	003d08ff 	.word	0x003d08ff
 8005abc:	431bde83 	.word	0x431bde83
 8005ac0:	10624dd3 	.word	0x10624dd3

08005ac4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ade:	f7fe fdfb 	bl	80046d8 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 80d9 	bne.w	8005ca4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2319      	movs	r3, #25
 8005af8:	2201      	movs	r2, #1
 8005afa:	496d      	ldr	r1, [pc, #436]	; (8005cb0 <HAL_I2C_Mem_Write+0x1ec>)
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fde3 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e0cc      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_I2C_Mem_Write+0x56>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0c5      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d007      	beq.n	8005b40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2221      	movs	r2, #33	; 0x21
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a4d      	ldr	r2, [pc, #308]	; (8005cb4 <HAL_I2C_Mem_Write+0x1f0>)
 8005b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b82:	88f8      	ldrh	r0, [r7, #6]
 8005b84:	893a      	ldrh	r2, [r7, #8]
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4603      	mov	r3, r0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fc1a 	bl	80063cc <I2C_RequestMemoryWrite>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d052      	beq.n	8005c44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e081      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fe64 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00d      	beq.n	8005bce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d107      	bne.n	8005bca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e06b      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d11b      	bne.n	8005c44 <HAL_I2C_Mem_Write+0x180>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	781a      	ldrb	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1aa      	bne.n	8005ba2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fe50 	bl	80068f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d107      	bne.n	8005c74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e016      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	00100002 	.word	0x00100002
 8005cb4:	ffff0000 	.word	0xffff0000

08005cb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08c      	sub	sp, #48	; 0x30
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	817b      	strh	r3, [r7, #10]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	813b      	strh	r3, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cd2:	f7fe fd01 	bl	80046d8 <HAL_GetTick>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	f040 8208 	bne.w	80060f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	2319      	movs	r3, #25
 8005cec:	2201      	movs	r2, #1
 8005cee:	497b      	ldr	r1, [pc, #492]	; (8005edc <HAL_I2C_Mem_Read+0x224>)
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fce9 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e1fb      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_I2C_Mem_Read+0x56>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e1f4      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d007      	beq.n	8005d34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2222      	movs	r2, #34	; 0x22
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a5b      	ldr	r2, [pc, #364]	; (8005ee0 <HAL_I2C_Mem_Read+0x228>)
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d76:	88f8      	ldrh	r0, [r7, #6]
 8005d78:	893a      	ldrh	r2, [r7, #8]
 8005d7a:	8979      	ldrh	r1, [r7, #10]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4603      	mov	r3, r0
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fbb6 	bl	80064f8 <I2C_RequestMemoryRead>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e1b0      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d113      	bne.n	8005dc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e184      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d11b      	bne.n	8005e06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e164      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11b      	bne.n	8005e46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	e144      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e5c:	e138      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	f200 80f1 	bhi.w	800604a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d123      	bne.n	8005eb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fd7f 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e139      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eb6:	e10b      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d14e      	bne.n	8005f5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4906      	ldr	r1, [pc, #24]	; (8005ee4 <HAL_I2C_Mem_Read+0x22c>)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fbfc 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d008      	beq.n	8005ee8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e10e      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
 8005eda:	bf00      	nop
 8005edc:	00100002 	.word	0x00100002
 8005ee0:	ffff0000 	.word	0xffff0000
 8005ee4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f5c:	e0b8      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2200      	movs	r2, #0
 8005f66:	4966      	ldr	r1, [pc, #408]	; (8006100 <HAL_I2C_Mem_Read+0x448>)
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fbad 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0bf      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	494f      	ldr	r1, [pc, #316]	; (8006100 <HAL_I2C_Mem_Read+0x448>)
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb7f 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e091      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006048:	e042      	b.n	80060d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fc92 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e04c      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b04      	cmp	r3, #4
 800609c:	d118      	bne.n	80060d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f aec2 	bne.w	8005e5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e000      	b.n	80060f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060f6:	2302      	movs	r3, #2
  }
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3728      	adds	r7, #40	; 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	00010004 	.word	0x00010004

08006104 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	460b      	mov	r3, r1
 8006112:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006114:	f7fe fae0 	bl	80046d8 <HAL_GetTick>
 8006118:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	f040 8111 	bne.w	800634e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2319      	movs	r3, #25
 8006132:	2201      	movs	r2, #1
 8006134:	4988      	ldr	r1, [pc, #544]	; (8006358 <HAL_I2C_IsDeviceReady+0x254>)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 fac6 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
 8006144:	e104      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_I2C_IsDeviceReady+0x50>
 8006150:	2302      	movs	r3, #2
 8006152:	e0fd      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d007      	beq.n	800617a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006188:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2224      	movs	r2, #36	; 0x24
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a70      	ldr	r2, [pc, #448]	; (800635c <HAL_I2C_IsDeviceReady+0x258>)
 800619c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa84 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00d      	beq.n	80061e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	d103      	bne.n	80061de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e0b6      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061e2:	897b      	ldrh	r3, [r7, #10]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80061f2:	f7fe fa71 	bl	80046d8 <HAL_GetTick>
 80061f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	bf0c      	ite	eq
 800621e:	2301      	moveq	r3, #1
 8006220:	2300      	movne	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006226:	e025      	b.n	8006274 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fe fa56 	bl	80046d8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <HAL_I2C_IsDeviceReady+0x13a>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22a0      	movs	r2, #160	; 0xa0
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b02      	cmp	r3, #2
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2ba0      	cmp	r3, #160	; 0xa0
 800627e:	d005      	beq.n	800628c <HAL_I2C_IsDeviceReady+0x188>
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <HAL_I2C_IsDeviceReady+0x188>
 8006286:	7dbb      	ldrb	r3, [r7, #22]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0cd      	beq.n	8006228 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d129      	bne.n	80062f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2319      	movs	r3, #25
 80062ce:	2201      	movs	r2, #1
 80062d0:	4921      	ldr	r1, [pc, #132]	; (8006358 <HAL_I2C_IsDeviceReady+0x254>)
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f9f8 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e036      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e02c      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006304:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800630e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2319      	movs	r3, #25
 8006316:	2201      	movs	r2, #1
 8006318:	490f      	ldr	r1, [pc, #60]	; (8006358 <HAL_I2C_IsDeviceReady+0x254>)
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f9d4 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e012      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	3301      	adds	r3, #1
 800632e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	f4ff af32 	bcc.w	800619e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	00100002 	.word	0x00100002
 800635c:	ffff0000 	.word	0xffff0000

08006360 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	d124      	bne.n	80063be <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2228      	movs	r2, #40	; 0x28
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d007      	beq.n	800639a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063a8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80063b8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80063be:	2302      	movs	r3, #2
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f960 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641c:	d103      	bne.n	8006426 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e05f      	b.n	80064ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642a:	897b      	ldrh	r3, [r7, #10]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	492d      	ldr	r1, [pc, #180]	; (80064f4 <I2C_RequestMemoryWrite+0x128>)
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f998 	bl	8006776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e04c      	b.n	80064ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fa02 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b04      	cmp	r3, #4
 800647c:	d107      	bne.n	800648e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e02b      	b.n	80064ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]
 80064a2:	e021      	b.n	80064e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	6a39      	ldr	r1, [r7, #32]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f9dc 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d107      	bne.n	80064da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e005      	b.n	80064ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064de:	893b      	ldrh	r3, [r7, #8]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	00010002 	.word	0x00010002

080064f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4603      	mov	r3, r0
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	460b      	mov	r3, r1
 800650c:	813b      	strh	r3, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006520:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006530:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	2200      	movs	r2, #0
 800653a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f8c2 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006558:	d103      	bne.n	8006562 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0aa      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006566:	897b      	ldrh	r3, [r7, #10]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006574:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	4952      	ldr	r1, [pc, #328]	; (80066c4 <I2C_RequestMemoryRead+0x1cc>)
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f8fa 	bl	8006776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e097      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	6a39      	ldr	r1, [r7, #32]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f964 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d107      	bne.n	80065ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e076      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d105      	bne.n	80065e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	611a      	str	r2, [r3, #16]
 80065de:	e021      	b.n	8006624 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065e0:	893b      	ldrh	r3, [r7, #8]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	6a39      	ldr	r1, [r7, #32]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f93e 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b04      	cmp	r3, #4
 8006604:	d107      	bne.n	8006616 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006614:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e050      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	6a39      	ldr	r1, [r7, #32]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f923 	bl	8006874 <I2C_WaitOnTXEFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	2b04      	cmp	r3, #4
 800663a:	d107      	bne.n	800664c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e035      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800665e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	2200      	movs	r2, #0
 8006668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f82b 	bl	80066c8 <I2C_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00d      	beq.n	8006694 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006686:	d103      	bne.n	8006690 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e013      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006694:	897b      	ldrh	r3, [r7, #10]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	4906      	ldr	r1, [pc, #24]	; (80066c4 <I2C_RequestMemoryRead+0x1cc>)
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f863 	bl	8006776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	00010002 	.word	0x00010002

080066c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d8:	e025      	b.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d021      	beq.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e2:	f7fd fff9 	bl	80046d8 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d116      	bne.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e023      	b.n	800676e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10d      	bne.n	800674c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	43da      	mvns	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	e00c      	b.n	8006766 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0b6      	beq.n	80066da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006784:	e051      	b.n	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d123      	bne.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e046      	b.n	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d021      	beq.n	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e6:	f7fd ff77 	bl	80046d8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d302      	bcc.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d116      	bne.n	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e020      	b.n	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d10c      	bne.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	43da      	mvns	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	e00b      	b.n	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	43da      	mvns	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d18d      	bne.n	8006786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006880:	e02d      	b.n	80068de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f8ce 	bl	8006a24 <I2C_IsAcknowledgeFailed>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e02d      	b.n	80068ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d021      	beq.n	80068de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fd ff1d 	bl	80046d8 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d116      	bne.n	80068de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e007      	b.n	80068ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b80      	cmp	r3, #128	; 0x80
 80068ea:	d1ca      	bne.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006902:	e02d      	b.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f88d 	bl	8006a24 <I2C_IsAcknowledgeFailed>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e02d      	b.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d021      	beq.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691c:	f7fd fedc 	bl	80046d8 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d116      	bne.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e007      	b.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d1ca      	bne.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006984:	e042      	b.n	8006a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d119      	bne.n	80069c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e029      	b.n	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c8:	f7fd fe86 	bl	80046d8 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d116      	bne.n	8006a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	f043 0220 	orr.w	r2, r3, #32
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e007      	b.n	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d1b5      	bne.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3a:	d11b      	bne.n	8006a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f043 0204 	orr.w	r2, r3, #4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d129      	bne.n	8006aec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0210 	bic.w	r2, r2, #16
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d12a      	bne.n	8006b6a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	f023 030f 	bic.w	r3, r3, #15
 8006b3a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	89fa      	ldrh	r2, [r7, #14]
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <HAL_PWR_DisableWakeUpPin+0x24>)
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	43db      	mvns	r3, r3
 8006b88:	4904      	ldr	r1, [pc, #16]	; (8006b9c <HAL_PWR_DisableWakeUpPin+0x24>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	604b      	str	r3, [r1, #4]
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40007000 	.word	0x40007000

08006ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e264      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d075      	beq.n	8006caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bbe:	4ba3      	ldr	r3, [pc, #652]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4ba0      	ldr	r3, [pc, #640]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d112      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd6:	4b9d      	ldr	r3, [pc, #628]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	4b99      	ldr	r3, [pc, #612]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d05b      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x108>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d157      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e23f      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d106      	bne.n	8006c14 <HAL_RCC_OscConfig+0x74>
 8006c06:	4b91      	ldr	r3, [pc, #580]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a90      	ldr	r2, [pc, #576]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e01d      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x98>
 8006c1e:	4b8b      	ldr	r3, [pc, #556]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a8a      	ldr	r2, [pc, #552]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4b88      	ldr	r3, [pc, #544]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a87      	ldr	r2, [pc, #540]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00b      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c38:	4b84      	ldr	r3, [pc, #528]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a83      	ldr	r2, [pc, #524]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4b81      	ldr	r3, [pc, #516]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a80      	ldr	r2, [pc, #512]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fd fd3e 	bl	80046d8 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fd fd3a 	bl	80046d8 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	; 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e204      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b76      	ldr	r3, [pc, #472]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0xc0>
 8006c7e:	e014      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fd fd2a 	bl	80046d8 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fd fd26 	bl	80046d8 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e1f0      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0xe8>
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cb6:	4b65      	ldr	r3, [pc, #404]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b62      	ldr	r3, [pc, #392]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d11c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cce:	4b5f      	ldr	r3, [pc, #380]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	4b5c      	ldr	r3, [pc, #368]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e1c4      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4952      	ldr	r1, [pc, #328]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	e03a      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d10:	4b4f      	ldr	r3, [pc, #316]	; (8006e50 <HAL_RCC_OscConfig+0x2b0>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fd fcdf 	bl	80046d8 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d1e:	f7fd fcdb 	bl	80046d8 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e1a5      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d30:	4b46      	ldr	r3, [pc, #280]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3c:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4940      	ldr	r1, [pc, #256]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
 8006d50:	e015      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d52:	4b3f      	ldr	r3, [pc, #252]	; (8006e50 <HAL_RCC_OscConfig+0x2b0>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fd fcbe 	bl	80046d8 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fd fcba 	bl	80046d8 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e184      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d72:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d030      	beq.n	8006dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d92:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <HAL_RCC_OscConfig+0x2b4>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d98:	f7fd fc9e 	bl	80046d8 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da0:	f7fd fc9a 	bl	80046d8 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e164      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db2:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x200>
 8006dbe:	e015      	b.n	8006dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc0:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <HAL_RCC_OscConfig+0x2b4>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc6:	f7fd fc87 	bl	80046d8 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dcc:	e008      	b.n	8006de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dce:	f7fd fc83 	bl	80046d8 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e14d      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de0:	4b1a      	ldr	r3, [pc, #104]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f0      	bne.n	8006dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a0 	beq.w	8006f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10f      	bne.n	8006e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <HAL_RCC_OscConfig+0x2ac>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_RCC_OscConfig+0x2b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d121      	bne.n	8006e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <HAL_RCC_OscConfig+0x2b8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <HAL_RCC_OscConfig+0x2b8>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e42:	f7fd fc49 	bl	80046d8 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e48:	e011      	b.n	8006e6e <HAL_RCC_OscConfig+0x2ce>
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	42470000 	.word	0x42470000
 8006e54:	42470e80 	.word	0x42470e80
 8006e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5c:	f7fd fc3c 	bl	80046d8 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e106      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6e:	4b85      	ldr	r3, [pc, #532]	; (8007084 <HAL_RCC_OscConfig+0x4e4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d106      	bne.n	8006e90 <HAL_RCC_OscConfig+0x2f0>
 8006e82:	4b81      	ldr	r3, [pc, #516]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a80      	ldr	r2, [pc, #512]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	e01c      	b.n	8006eca <HAL_RCC_OscConfig+0x32a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d10c      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x312>
 8006e98:	4b7b      	ldr	r3, [pc, #492]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	4a7a      	ldr	r2, [pc, #488]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006e9e:	f043 0304 	orr.w	r3, r3, #4
 8006ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea4:	4b78      	ldr	r3, [pc, #480]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4a77      	ldr	r2, [pc, #476]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb0:	e00b      	b.n	8006eca <HAL_RCC_OscConfig+0x32a>
 8006eb2:	4b75      	ldr	r3, [pc, #468]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4a74      	ldr	r2, [pc, #464]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebe:	4b72      	ldr	r3, [pc, #456]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a71      	ldr	r2, [pc, #452]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006ec4:	f023 0304 	bic.w	r3, r3, #4
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d015      	beq.n	8006efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed2:	f7fd fc01 	bl	80046d8 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eda:	f7fd fbfd 	bl	80046d8 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e0c5      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef0:	4b65      	ldr	r3, [pc, #404]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ee      	beq.n	8006eda <HAL_RCC_OscConfig+0x33a>
 8006efc:	e014      	b.n	8006f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efe:	f7fd fbeb 	bl	80046d8 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fd fbe7 	bl	80046d8 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e0af      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1c:	4b5a      	ldr	r3, [pc, #360]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ee      	bne.n	8006f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d105      	bne.n	8006f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2e:	4b56      	ldr	r3, [pc, #344]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	4a55      	ldr	r2, [pc, #340]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 809b 	beq.w	800707a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f44:	4b50      	ldr	r3, [pc, #320]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 030c 	and.w	r3, r3, #12
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d05c      	beq.n	800700a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d141      	bne.n	8006fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f58:	4b4c      	ldr	r3, [pc, #304]	; (800708c <HAL_RCC_OscConfig+0x4ec>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5e:	f7fd fbbb 	bl	80046d8 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f66:	f7fd fbb7 	bl	80046d8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e081      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f78:	4b43      	ldr	r3, [pc, #268]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f0      	bne.n	8006f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	019b      	lsls	r3, r3, #6
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	061b      	lsls	r3, r3, #24
 8006fa8:	4937      	ldr	r1, [pc, #220]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fae:	4b37      	ldr	r3, [pc, #220]	; (800708c <HAL_RCC_OscConfig+0x4ec>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb4:	f7fd fb90 	bl	80046d8 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fbc:	f7fd fb8c 	bl	80046d8 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e056      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCC_OscConfig+0x41c>
 8006fda:	e04e      	b.n	800707a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	; (800708c <HAL_RCC_OscConfig+0x4ec>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe2:	f7fd fb79 	bl	80046d8 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fea:	f7fd fb75 	bl	80046d8 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e03f      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffc:	4b22      	ldr	r3, [pc, #136]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f0      	bne.n	8006fea <HAL_RCC_OscConfig+0x44a>
 8007008:	e037      	b.n	800707a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e032      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <HAL_RCC_OscConfig+0x4e8>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d028      	beq.n	8007076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d121      	bne.n	8007076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d11a      	bne.n	8007076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007046:	4013      	ands	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800704c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	3b01      	subs	r3, #1
 8007060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007062:	429a      	cmp	r2, r3
 8007064:	d107      	bne.n	8007076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d001      	beq.n	800707a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40007000 	.word	0x40007000
 8007088:	40023800 	.word	0x40023800
 800708c:	42470060 	.word	0x42470060

08007090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0cc      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070a4:	4b68      	ldr	r3, [pc, #416]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90c      	bls.n	80070cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b65      	ldr	r3, [pc, #404]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	4b63      	ldr	r3, [pc, #396]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d001      	beq.n	80070cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0b8      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e4:	4b59      	ldr	r3, [pc, #356]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4a58      	ldr	r2, [pc, #352]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070fc:	4b53      	ldr	r3, [pc, #332]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4a52      	ldr	r2, [pc, #328]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007108:	4b50      	ldr	r3, [pc, #320]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	494d      	ldr	r1, [pc, #308]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d044      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b47      	ldr	r3, [pc, #284]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d119      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d003      	beq.n	800714e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714a:	2b03      	cmp	r3, #3
 800714c:	d107      	bne.n	800715e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714e:	4b3f      	ldr	r3, [pc, #252]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e06f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715e:	4b3b      	ldr	r3, [pc, #236]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e067      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b37      	ldr	r3, [pc, #220]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4934      	ldr	r1, [pc, #208]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007180:	f7fd faaa 	bl	80046d8 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fd faa6 	bl	80046d8 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	; 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e04f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b2b      	ldr	r3, [pc, #172]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071b0:	4b25      	ldr	r3, [pc, #148]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20c      	bcs.n	80071d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b22      	ldr	r3, [pc, #136]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b20      	ldr	r3, [pc, #128]	; (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e032      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e4:	4b19      	ldr	r3, [pc, #100]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4916      	ldr	r1, [pc, #88]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007202:	4b12      	ldr	r3, [pc, #72]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	490e      	ldr	r1, [pc, #56]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007216:	f000 f821 	bl	800725c <HAL_RCC_GetSysClockFreq>
 800721a:	4602      	mov	r2, r0
 800721c:	4b0b      	ldr	r3, [pc, #44]	; (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	490a      	ldr	r1, [pc, #40]	; (8007250 <HAL_RCC_ClockConfig+0x1c0>)
 8007228:	5ccb      	ldrb	r3, [r1, r3]
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	4a09      	ldr	r2, [pc, #36]	; (8007254 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <HAL_RCC_ClockConfig+0x1c8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7fb faa2 	bl	8002780 <HAL_InitTick>

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023c00 	.word	0x40023c00
 800724c:	40023800 	.word	0x40023800
 8007250:	0800f750 	.word	0x0800f750
 8007254:	20000000 	.word	0x20000000
 8007258:	2000000c 	.word	0x2000000c

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	2300      	movs	r3, #0
 800726e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007274:	4b67      	ldr	r3, [pc, #412]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 030c 	and.w	r3, r3, #12
 800727c:	2b08      	cmp	r3, #8
 800727e:	d00d      	beq.n	800729c <HAL_RCC_GetSysClockFreq+0x40>
 8007280:	2b08      	cmp	r3, #8
 8007282:	f200 80bd 	bhi.w	8007400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x34>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d003      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x3a>
 800728e:	e0b7      	b.n	8007400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007290:	4b61      	ldr	r3, [pc, #388]	; (8007418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007292:	60bb      	str	r3, [r7, #8]
       break;
 8007294:	e0b7      	b.n	8007406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007296:	4b60      	ldr	r3, [pc, #384]	; (8007418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007298:	60bb      	str	r3, [r7, #8]
      break;
 800729a:	e0b4      	b.n	8007406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800729c:	4b5d      	ldr	r3, [pc, #372]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072a6:	4b5b      	ldr	r3, [pc, #364]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d04d      	beq.n	800734e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b2:	4b58      	ldr	r3, [pc, #352]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	461a      	mov	r2, r3
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	ea02 0800 	and.w	r8, r2, r0
 80072ca:	ea03 0901 	and.w	r9, r3, r1
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	014b      	lsls	r3, r1, #5
 80072dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072e0:	0142      	lsls	r2, r0, #5
 80072e2:	4610      	mov	r0, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	ebb0 0008 	subs.w	r0, r0, r8
 80072ea:	eb61 0109 	sbc.w	r1, r1, r9
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	018b      	lsls	r3, r1, #6
 80072f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072fc:	0182      	lsls	r2, r0, #6
 80072fe:	1a12      	subs	r2, r2, r0
 8007300:	eb63 0301 	sbc.w	r3, r3, r1
 8007304:	f04f 0000 	mov.w	r0, #0
 8007308:	f04f 0100 	mov.w	r1, #0
 800730c:	00d9      	lsls	r1, r3, #3
 800730e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007312:	00d0      	lsls	r0, r2, #3
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	eb12 0208 	adds.w	r2, r2, r8
 800731c:	eb43 0309 	adc.w	r3, r3, r9
 8007320:	f04f 0000 	mov.w	r0, #0
 8007324:	f04f 0100 	mov.w	r1, #0
 8007328:	0299      	lsls	r1, r3, #10
 800732a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800732e:	0290      	lsls	r0, r2, #10
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4610      	mov	r0, r2
 8007336:	4619      	mov	r1, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	461a      	mov	r2, r3
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	f7f9 fcb2 	bl	8000ca8 <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4613      	mov	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e04a      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734e:	4b31      	ldr	r3, [pc, #196]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	099b      	lsrs	r3, r3, #6
 8007354:	461a      	mov	r2, r3
 8007356:	f04f 0300 	mov.w	r3, #0
 800735a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	ea02 0400 	and.w	r4, r2, r0
 8007366:	ea03 0501 	and.w	r5, r3, r1
 800736a:	4620      	mov	r0, r4
 800736c:	4629      	mov	r1, r5
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	014b      	lsls	r3, r1, #5
 8007378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800737c:	0142      	lsls	r2, r0, #5
 800737e:	4610      	mov	r0, r2
 8007380:	4619      	mov	r1, r3
 8007382:	1b00      	subs	r0, r0, r4
 8007384:	eb61 0105 	sbc.w	r1, r1, r5
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	018b      	lsls	r3, r1, #6
 8007392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007396:	0182      	lsls	r2, r0, #6
 8007398:	1a12      	subs	r2, r2, r0
 800739a:	eb63 0301 	sbc.w	r3, r3, r1
 800739e:	f04f 0000 	mov.w	r0, #0
 80073a2:	f04f 0100 	mov.w	r1, #0
 80073a6:	00d9      	lsls	r1, r3, #3
 80073a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073ac:	00d0      	lsls	r0, r2, #3
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	1912      	adds	r2, r2, r4
 80073b4:	eb45 0303 	adc.w	r3, r5, r3
 80073b8:	f04f 0000 	mov.w	r0, #0
 80073bc:	f04f 0100 	mov.w	r1, #0
 80073c0:	0299      	lsls	r1, r3, #10
 80073c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073c6:	0290      	lsls	r0, r2, #10
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4610      	mov	r0, r2
 80073ce:	4619      	mov	r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	f7f9 fc66 	bl	8000ca8 <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4613      	mov	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	3301      	adds	r3, #1
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	60bb      	str	r3, [r7, #8]
      break;
 80073fe:	e002      	b.n	8007406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007402:	60bb      	str	r3, [r7, #8]
      break;
 8007404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007406:	68bb      	ldr	r3, [r7, #8]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007412:	bf00      	nop
 8007414:	40023800 	.word	0x40023800
 8007418:	00f42400 	.word	0x00f42400

0800741c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <HAL_RCC_GetHCLKFreq+0x14>)
 8007422:	681b      	ldr	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000000 	.word	0x20000000

08007434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007438:	f7ff fff0 	bl	800741c <HAL_RCC_GetHCLKFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	0a9b      	lsrs	r3, r3, #10
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	4903      	ldr	r1, [pc, #12]	; (8007458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40023800 	.word	0x40023800
 8007458:	0800f760 	.word	0x0800f760

0800745c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007460:	f7ff ffdc 	bl	800741c <HAL_RCC_GetHCLKFreq>
 8007464:	4602      	mov	r2, r0
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0b5b      	lsrs	r3, r3, #13
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007472:	5ccb      	ldrb	r3, [r1, r3]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40023800 	.word	0x40023800
 8007480:	0800f760 	.word	0x0800f760

08007484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	220f      	movs	r2, #15
 8007492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007494:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0203 	and.w	r2, r3, #3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <HAL_RCC_GetClockConfig+0x5c>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	08db      	lsrs	r3, r3, #3
 80074be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_RCC_GetClockConfig+0x60>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 020f 	and.w	r2, r3, #15
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40023c00 	.word	0x40023c00

080074e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007518:	2b00      	cmp	r3, #0
 800751a:	d075      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800751c:	4bad      	ldr	r3, [pc, #692]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007522:	f7fd f8d9 	bl	80046d8 <HAL_GetTick>
 8007526:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007528:	e008      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800752a:	f7fd f8d5 	bl	80046d8 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e18b      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800753c:	4ba6      	ldr	r3, [pc, #664]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f0      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d009      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	019a      	lsls	r2, r3, #6
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	071b      	lsls	r3, r3, #28
 8007560:	499d      	ldr	r1, [pc, #628]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01f      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007574:	4b98      	ldr	r3, [pc, #608]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	019a      	lsls	r2, r3, #6
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	431a      	orrs	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	071b      	lsls	r3, r3, #28
 8007594:	4990      	ldr	r1, [pc, #576]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800759c:	4b8e      	ldr	r3, [pc, #568]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800759e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a2:	f023 021f 	bic.w	r2, r3, #31
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	498a      	ldr	r1, [pc, #552]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00d      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	019a      	lsls	r2, r3, #6
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	071b      	lsls	r3, r3, #28
 80075d4:	4980      	ldr	r1, [pc, #512]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075dc:	4b7d      	ldr	r3, [pc, #500]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075e2:	f7fd f879 	bl	80046d8 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075e8:	e008      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075ea:	f7fd f875 	bl	80046d8 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e12b      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075fc:	4b76      	ldr	r3, [pc, #472]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800761c:	2b00      	cmp	r3, #0
 800761e:	d079      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007620:	4b6e      	ldr	r3, [pc, #440]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007626:	f7fd f857 	bl	80046d8 <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800762c:	e008      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800762e:	f7fd f853 	bl	80046d8 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e109      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007640:	4b65      	ldr	r3, [pc, #404]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764c:	d0ef      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d020      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800765a:	4b5f      	ldr	r3, [pc, #380]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	0f1b      	lsrs	r3, r3, #28
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	019a      	lsls	r2, r3, #6
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	061b      	lsls	r3, r3, #24
 8007674:	431a      	orrs	r2, r3
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	071b      	lsls	r3, r3, #28
 800767a:	4957      	ldr	r1, [pc, #348]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	3b01      	subs	r3, #1
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	4950      	ldr	r1, [pc, #320]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01e      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076a8:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ae:	0e1b      	lsrs	r3, r3, #24
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	019a      	lsls	r2, r3, #6
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	061b      	lsls	r3, r3, #24
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	071b      	lsls	r3, r3, #28
 80076c8:	4943      	ldr	r1, [pc, #268]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076d0:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	493e      	ldr	r1, [pc, #248]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076e6:	4b3d      	ldr	r3, [pc, #244]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ec:	f7fc fff4 	bl	80046d8 <HAL_GetTick>
 80076f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80076f4:	f7fc fff0 	bl	80046d8 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e0a6      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007706:	4b34      	ldr	r3, [pc, #208]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800770e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007712:	d1ef      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 808d 	beq.w	800783c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	4a2b      	ldr	r2, [pc, #172]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800772c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007730:	6413      	str	r3, [r2, #64]	; 0x40
 8007732:	4b29      	ldr	r3, [pc, #164]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800773e:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800774a:	f7fc ffc5 	bl	80046d8 <HAL_GetTick>
 800774e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007750:	e008      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007752:	f7fc ffc1 	bl	80046d8 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e077      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f0      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007770:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d039      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d032      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007798:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800779e:	4b11      	ldr	r3, [pc, #68]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077a4:	4a0c      	ldr	r2, [pc, #48]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077aa:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d11e      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077b6:	f7fc ff8f 	bl	80046d8 <HAL_GetTick>
 80077ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077bc:	e014      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077be:	f7fc ff8b 	bl	80046d8 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d90b      	bls.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e03f      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80077d4:	42470068 	.word	0x42470068
 80077d8:	40023800 	.word	0x40023800
 80077dc:	42470070 	.word	0x42470070
 80077e0:	40007000 	.word	0x40007000
 80077e4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e8:	4b1c      	ldr	r3, [pc, #112]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0e4      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007800:	d10d      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007802:	4b16      	ldr	r3, [pc, #88]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	4911      	ldr	r1, [pc, #68]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]
 800781c:	e005      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007824:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007828:	6093      	str	r3, [r2, #8]
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800782c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007836:	4909      	ldr	r1, [pc, #36]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007838:	4313      	orrs	r3, r2
 800783a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800784e:	4b04      	ldr	r3, [pc, #16]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007850:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40023800 	.word	0x40023800
 8007860:	424711e0 	.word	0x424711e0

08007864 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e083      	b.n	800797e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7f5b      	ldrb	r3, [r3, #29]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fa fd86 	bl	8002398 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	22ca      	movs	r2, #202	; 0xca
 8007898:	625a      	str	r2, [r3, #36]	; 0x24
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2253      	movs	r2, #83	; 0x53
 80078a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb7a 	bl	8007f9c <RTC_EnterInitMode>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	22ff      	movs	r2, #255	; 0xff
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e05e      	b.n	800797e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6899      	ldr	r1, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68d2      	ldr	r2, [r2, #12]
 80078fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6919      	ldr	r1, [r3, #16]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	041a      	lsls	r2, r3, #16
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800791e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fb0c 	bl	8007f4c <HAL_RTC_WaitForSynchro>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	22ff      	movs	r2, #255	; 0xff
 8007940:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e018      	b.n	800797e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800795a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	22ff      	movs	r2, #255	; 0xff
 8007974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007986:	b590      	push	{r4, r7, lr}
 8007988:	b087      	sub	sp, #28
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7f1b      	ldrb	r3, [r3, #28]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_RTC_SetTime+0x1c>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0aa      	b.n	8007af8 <HAL_RTC_SetTime+0x172>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2202      	movs	r2, #2
 80079ac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d126      	bne.n	8007a02 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fb11 	bl	8007ff4 <RTC_ByteToBcd2>
 80079d2:	4603      	mov	r3, r0
 80079d4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fb0a 	bl	8007ff4 <RTC_ByteToBcd2>
 80079e0:	4603      	mov	r3, r0
 80079e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079e4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	789b      	ldrb	r3, [r3, #2]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fb02 	bl	8007ff4 <RTC_ByteToBcd2>
 80079f0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80079f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e018      	b.n	8007a34 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a22:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	78db      	ldrb	r3, [r3, #3]
 8007a2e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	22ca      	movs	r2, #202	; 0xca
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2253      	movs	r2, #83	; 0x53
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 faa9 	bl	8007f9c <RTC_EnterInitMode>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e047      	b.n	8007af8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007a72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a76:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a86:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6899      	ldr	r1, [r3, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d111      	bne.n	8007ae2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fa44 	bl	8007f4c <HAL_RTC_WaitForSynchro>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	22ff      	movs	r2, #255	; 0xff
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e00a      	b.n	8007af8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	22ff      	movs	r2, #255	; 0xff
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007af6:	2300      	movs	r3, #0
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	7f1b      	ldrb	r3, [r3, #28]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_RTC_SetDate+0x1c>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e094      	b.n	8007c46 <HAL_RTC_SetDate+0x146>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2202      	movs	r2, #2
 8007b26:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10e      	bne.n	8007b4c <HAL_RTC_SetDate+0x4c>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	330a      	adds	r3, #10
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11c      	bne.n	8007b8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fa4c 	bl	8007ff4 <RTC_ByteToBcd2>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fa45 	bl	8007ff4 <RTC_ByteToBcd2>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007b6e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	789b      	ldrb	r3, [r3, #2]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fa3d 	bl	8007ff4 <RTC_ByteToBcd2>
 8007b7a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007b7c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e00e      	b.n	8007baa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007b98:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007b9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	22ca      	movs	r2, #202	; 0xca
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2253      	movs	r2, #83	; 0x53
 8007bb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f9ee 	bl	8007f9c <RTC_EnterInitMode>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	22ff      	movs	r2, #255	; 0xff
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e033      	b.n	8007c46 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007be8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d111      	bne.n	8007c30 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f99d 	bl	8007f4c <HAL_RTC_WaitForSynchro>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	22ff      	movs	r2, #255	; 0xff
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2204      	movs	r2, #4
 8007c24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e00a      	b.n	8007c46 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
  }
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}
	...

08007c50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c50:	b590      	push	{r4, r7, lr}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007c64:	4b93      	ldr	r3, [pc, #588]	; (8007eb4 <HAL_RTC_SetAlarm_IT+0x264>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a93      	ldr	r2, [pc, #588]	; (8007eb8 <HAL_RTC_SetAlarm_IT+0x268>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	0adb      	lsrs	r3, r3, #11
 8007c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	7f1b      	ldrb	r3, [r3, #28]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_RTC_SetAlarm_IT+0x36>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e111      	b.n	8007eaa <HAL_RTC_SetAlarm_IT+0x25a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d137      	bne.n	8007d08 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 f99f 	bl	8007ff4 <RTC_ByteToBcd2>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f998 	bl	8007ff4 <RTC_ByteToBcd2>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007cc8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	789b      	ldrb	r3, [r3, #2]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f990 	bl	8007ff4 <RTC_ByteToBcd2>
 8007cd4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007cd6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	78db      	ldrb	r3, [r3, #3]
 8007cde:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ce0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 f982 	bl	8007ff4 <RTC_ByteToBcd2>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007cf4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007cfc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e023      	b.n	8007d50 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d28:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	78db      	ldrb	r3, [r3, #3]
 8007d34:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d3e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	22ca      	movs	r2, #202	; 0xca
 8007d62:	625a      	str	r2, [r3, #36]	; 0x24
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2253      	movs	r2, #83	; 0x53
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d74:	d141      	bne.n	8007dfa <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d84:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007d96:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	617a      	str	r2, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	22ff      	movs	r2, #255	; 0xff
 8007da8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2203      	movs	r2, #3
 8007dae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e077      	b.n	8007eaa <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0e7      	beq.n	8007d98 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007de6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007df6:	609a      	str	r2, [r3, #8]
 8007df8:	e040      	b.n	8007e7c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e08:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007e1a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	617a      	str	r2, [r7, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	22ff      	movs	r2, #255	; 0xff
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2203      	movs	r2, #3
 8007e32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e035      	b.n	8007eaa <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0e7      	beq.n	8007e1c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69fa      	ldr	r2, [r7, #28]
 8007e52:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0e      	ldr	r2, [pc, #56]	; (8007ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8007e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e86:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8007e88:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4a0b      	ldr	r2, [pc, #44]	; (8007ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8007e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e92:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3724      	adds	r7, #36	; 0x24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd90      	pop	{r4, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000000 	.word	0x20000000
 8007eb8:	10624dd3 	.word	0x10624dd3
 8007ebc:	40013c00 	.word	0x40013c00

08007ec0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d012      	beq.n	8007efc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fc facf 	bl	8004488 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007efa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f8e1 	bl	80080e0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	775a      	strb	r2, [r3, #29]
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40013c00 	.word	0x40013c00

08007f4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f68:	f7fc fbb6 	bl	80046d8 <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007f6e:	e009      	b.n	8007f84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f70:	f7fc fbb2 	bl	80046d8 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f7e:	d901      	bls.n	8007f84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e007      	b.n	8007f94 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0ee      	beq.n	8007f70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d119      	bne.n	8007fea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fc0:	f7fc fb8a 	bl	80046d8 <HAL_GetTick>
 8007fc4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007fc6:	e009      	b.n	8007fdc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fc8:	f7fc fb86 	bl	80046d8 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fd6:	d901      	bls.n	8007fdc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e007      	b.n	8007fec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0ee      	beq.n	8007fc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008002:	e005      	b.n	8008010 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	3b0a      	subs	r3, #10
 800800e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	2b09      	cmp	r3, #9
 8008014:	d8f6      	bhi.n	8008004 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	b2da      	uxtb	r2, r3
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	4313      	orrs	r3, r2
 8008022:	b2db      	uxtb	r3, r3
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7f1b      	ldrb	r3, [r3, #28]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d101      	bne.n	8008048 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008044:	2302      	movs	r3, #2
 8008046:	e047      	b.n	80080d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	22ca      	movs	r2, #202	; 0xca
 800805a:	625a      	str	r2, [r3, #36]	; 0x24
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2253      	movs	r2, #83	; 0x53
 8008062:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008072:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008082:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008084:	f7fc fb28 	bl	80046d8 <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800808a:	e013      	b.n	80080b4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800808c:	f7fc fb24 	bl	80046d8 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800809a:	d90b      	bls.n	80080b4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	22ff      	movs	r2, #255	; 0xff
 80080a2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2203      	movs	r2, #3
 80080a8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e011      	b.n	80080d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0e4      	beq.n	800808c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	22ff      	movs	r2, #255	; 0xff
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e07b      	b.n	80081fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	d108      	bne.n	8008120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008116:	d009      	beq.n	800812c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	61da      	str	r2, [r3, #28]
 800811e:	e005      	b.n	800812c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fa f958 	bl	80023fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008162:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b0:	ea42 0103 	orr.w	r1, r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f003 0104 	and.w	r1, r3, #4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	f003 0210 	and.w	r2, r3, #16
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b088      	sub	sp, #32
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_SPI_Transmit+0x22>
 8008224:	2302      	movs	r3, #2
 8008226:	e126      	b.n	8008476 <HAL_SPI_Transmit+0x270>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008230:	f7fc fa52 	bl	80046d8 <HAL_GetTick>
 8008234:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	d002      	beq.n	800824c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008246:	2302      	movs	r3, #2
 8008248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800824a:	e10b      	b.n	8008464 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_SPI_Transmit+0x52>
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800825c:	e102      	b.n	8008464 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2203      	movs	r2, #3
 8008262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	88fa      	ldrh	r2, [r7, #6]
 800827c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a4:	d10f      	bne.n	80082c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b40      	cmp	r3, #64	; 0x40
 80082d2:	d007      	beq.n	80082e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ec:	d14b      	bne.n	8008386 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_SPI_Transmit+0xf6>
 80082f6:	8afb      	ldrh	r3, [r7, #22]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d13e      	bne.n	800837a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	881a      	ldrh	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	1c9a      	adds	r2, r3, #2
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008316:	b29b      	uxth	r3, r3
 8008318:	3b01      	subs	r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008320:	e02b      	b.n	800837a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b02      	cmp	r3, #2
 800832e:	d112      	bne.n	8008356 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	881a      	ldrh	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	1c9a      	adds	r2, r3, #2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	86da      	strh	r2, [r3, #54]	; 0x36
 8008354:	e011      	b.n	800837a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008356:	f7fc f9bf 	bl	80046d8 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d803      	bhi.n	800836e <HAL_SPI_Transmit+0x168>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d102      	bne.n	8008374 <HAL_SPI_Transmit+0x16e>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008378:	e074      	b.n	8008464 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1ce      	bne.n	8008322 <HAL_SPI_Transmit+0x11c>
 8008384:	e04c      	b.n	8008420 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_SPI_Transmit+0x18e>
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d140      	bne.n	8008416 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	330c      	adds	r3, #12
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083ba:	e02c      	b.n	8008416 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d113      	bne.n	80083f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	7812      	ldrb	r2, [r2, #0]
 80083d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80083f0:	e011      	b.n	8008416 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f2:	f7fc f971 	bl	80046d8 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d803      	bhi.n	800840a <HAL_SPI_Transmit+0x204>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d102      	bne.n	8008410 <HAL_SPI_Transmit+0x20a>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008414:	e026      	b.n	8008464 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1cd      	bne.n	80083bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fa55 	bl	80088d4 <SPI_EndRxTxTransaction>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	77fb      	strb	r3, [r7, #31]
 8008460:	e000      	b.n	8008464 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008474:	7ffb      	ldrb	r3, [r7, #31]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3720      	adds	r7, #32
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b08c      	sub	sp, #48	; 0x30
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800848c:	2301      	movs	r3, #1
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_SPI_TransmitReceive+0x26>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e18a      	b.n	80087ba <HAL_SPI_TransmitReceive+0x33c>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ac:	f7fc f914 	bl	80046d8 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084c2:	887b      	ldrh	r3, [r7, #2]
 80084c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d00f      	beq.n	80084ee <HAL_SPI_TransmitReceive+0x70>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d4:	d107      	bne.n	80084e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <HAL_SPI_TransmitReceive+0x68>
 80084de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d003      	beq.n	80084ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80084e6:	2302      	movs	r3, #2
 80084e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084ec:	e15b      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x82>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x82>
 80084fa:	887b      	ldrh	r3, [r7, #2]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008506:	e14e      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b04      	cmp	r3, #4
 8008512:	d003      	beq.n	800851c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2205      	movs	r2, #5
 8008518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	887a      	ldrh	r2, [r7, #2]
 800852c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	887a      	ldrh	r2, [r7, #2]
 8008532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	887a      	ldrh	r2, [r7, #2]
 800853e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	887a      	ldrh	r2, [r7, #2]
 8008544:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	d007      	beq.n	8008570 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008578:	d178      	bne.n	800866c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x10a>
 8008582:	8b7b      	ldrh	r3, [r7, #26]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d166      	bne.n	8008656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	1c9a      	adds	r2, r3, #2
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ac:	e053      	b.n	8008656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11b      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x176>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d016      	beq.n	80085f4 <HAL_SPI_TransmitReceive+0x176>
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d113      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	1c9a      	adds	r2, r3, #2
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d119      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x1b8>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d014      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	b292      	uxth	r2, r2
 8008618:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	1c9a      	adds	r2, r3, #2
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008632:	2301      	movs	r3, #1
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008636:	f7fc f84f 	bl	80046d8 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008642:	429a      	cmp	r2, r3
 8008644:	d807      	bhi.n	8008656 <HAL_SPI_TransmitReceive+0x1d8>
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d003      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008654:	e0a7      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1a6      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x130>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1a1      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x130>
 800866a:	e07c      	b.n	8008766 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <HAL_SPI_TransmitReceive+0x1fc>
 8008674:	8b7b      	ldrh	r3, [r7, #26]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d16b      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	330c      	adds	r3, #12
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086a0:	e057      	b.n	8008752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d11c      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x26c>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <HAL_SPI_TransmitReceive+0x26c>
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d114      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d119      	bne.n	800872c <HAL_SPI_TransmitReceive+0x2ae>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d014      	beq.n	800872c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008728:	2301      	movs	r3, #1
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800872c:	f7fb ffd4 	bl	80046d8 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008738:	429a      	cmp	r2, r3
 800873a:	d803      	bhi.n	8008744 <HAL_SPI_TransmitReceive+0x2c6>
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d102      	bne.n	800874a <HAL_SPI_TransmitReceive+0x2cc>
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008750:	e029      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1a2      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0x224>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d19d      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f8b2 	bl	80088d4 <SPI_EndRxTxTransaction>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d006      	beq.n	8008784 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008782:	e010      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	e000      	b.n	80087a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80087a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3730      	adds	r7, #48	; 0x30
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087d4:	f7fb ff80 	bl	80046d8 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	4413      	add	r3, r2
 80087e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087e4:	f7fb ff78 	bl	80046d8 <HAL_GetTick>
 80087e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087ea:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	015b      	lsls	r3, r3, #5
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087fa:	e054      	b.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d050      	beq.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008804:	f7fb ff68 	bl	80046d8 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	429a      	cmp	r2, r3
 8008812:	d902      	bls.n	800881a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d13d      	bne.n	8008896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008832:	d111      	bne.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883c:	d004      	beq.n	8008848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008846:	d107      	bne.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008860:	d10f      	bne.n	8008882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e017      	b.n	80088c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4013      	ands	r3, r2
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	bf0c      	ite	eq
 80088b6:	2301      	moveq	r3, #1
 80088b8:	2300      	movne	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d19b      	bne.n	80087fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000000 	.word	0x20000000

080088d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <SPI_EndRxTxTransaction+0x7c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	; (8008954 <SPI_EndRxTxTransaction+0x80>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	0d5b      	lsrs	r3, r3, #21
 80088ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088fe:	d112      	bne.n	8008926 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	2180      	movs	r1, #128	; 0x80
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff ff5a 	bl	80087c4 <SPI_WaitFlagStateUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d016      	beq.n	8008944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f043 0220 	orr.w	r2, r3, #32
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e00f      	b.n	8008946 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3b01      	subs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d0f2      	beq.n	8008926 <SPI_EndRxTxTransaction+0x52>
 8008940:	e000      	b.n	8008944 <SPI_EndRxTxTransaction+0x70>
        break;
 8008942:	bf00      	nop
  }

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000000 	.word	0x20000000
 8008954:	165e9f81 	.word	0x165e9f81

08008958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e041      	b.n	80089ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f839 	bl	80089f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f000 faea 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04e      	b.n	8008ac2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a23      	ldr	r2, [pc, #140]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4e:	d01d      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a19      	ldr	r2, [pc, #100]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d111      	bne.n	8008ab0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d010      	beq.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0201 	orr.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	e007      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40001800 	.word	0x40001800

08008aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e041      	b.n	8008b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f9 fd28 	bl	8002568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f000 fa20 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d122      	bne.n	8008be6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d11b      	bne.n	8008be6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f06f 0202 	mvn.w	r2, #2
 8008bb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f9b1 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008bd2:	e005      	b.n	8008be0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9a3 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f9b4 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d122      	bne.n	8008c3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d11b      	bne.n	8008c3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f06f 0204 	mvn.w	r2, #4
 8008c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f987 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008c26:	e005      	b.n	8008c34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f979 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f98a 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d122      	bne.n	8008c8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d11b      	bne.n	8008c8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f06f 0208 	mvn.w	r2, #8
 8008c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2204      	movs	r2, #4
 8008c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f95d 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008c7a:	e005      	b.n	8008c88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f94f 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f960 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	d122      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d11b      	bne.n	8008ce2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f06f 0210 	mvn.w	r2, #16
 8008cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2208      	movs	r2, #8
 8008cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f933 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008cce:	e005      	b.n	8008cdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f925 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f936 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10e      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d107      	bne.n	8008d0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f06f 0201 	mvn.w	r2, #1
 8008d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7f9 f9e5 	bl	80020d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d18:	2b80      	cmp	r3, #128	; 0x80
 8008d1a:	d10e      	bne.n	8008d3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d26:	2b80      	cmp	r3, #128	; 0x80
 8008d28:	d107      	bne.n	8008d3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fbf1 	bl	800951c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	d10e      	bne.n	8008d66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d107      	bne.n	8008d66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f8fb 	bl	8008f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0320 	and.w	r3, r3, #32
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d10e      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d107      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f06f 0220 	mvn.w	r2, #32
 8008d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbbb 	bl	8009508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e0ae      	b.n	8008f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	f200 809f 	bhi.w	8008f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008f09 	.word	0x08008f09
 8008dd8:	08008f09 	.word	0x08008f09
 8008ddc:	08008f09 	.word	0x08008f09
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008f09 	.word	0x08008f09
 8008de8:	08008f09 	.word	0x08008f09
 8008dec:	08008f09 	.word	0x08008f09
 8008df0:	08008e87 	.word	0x08008e87
 8008df4:	08008f09 	.word	0x08008f09
 8008df8:	08008f09 	.word	0x08008f09
 8008dfc:	08008f09 	.word	0x08008f09
 8008e00:	08008ec7 	.word	0x08008ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 f950 	bl	80090b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0208 	orr.w	r2, r2, #8
 8008e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0204 	bic.w	r2, r2, #4
 8008e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6999      	ldr	r1, [r3, #24]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	619a      	str	r2, [r3, #24]
      break;
 8008e42:	e064      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f9a0 	bl	8009190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6999      	ldr	r1, [r3, #24]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	619a      	str	r2, [r3, #24]
      break;
 8008e84:	e043      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 f9f5 	bl	800927c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69da      	ldr	r2, [r3, #28]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0208 	orr.w	r2, r2, #8
 8008ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69da      	ldr	r2, [r3, #28]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0204 	bic.w	r2, r2, #4
 8008eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69d9      	ldr	r1, [r3, #28]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	61da      	str	r2, [r3, #28]
      break;
 8008ec4:	e023      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fa49 	bl	8009364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69d9      	ldr	r1, [r3, #28]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	021a      	lsls	r2, r3, #8
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	61da      	str	r2, [r3, #28]
      break;
 8008f06:	e002      	b.n	8008f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a40      	ldr	r2, [pc, #256]	; (8009084 <TIM_Base_SetConfig+0x114>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d013      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d00f      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <TIM_Base_SetConfig+0x118>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00b      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a3c      	ldr	r2, [pc, #240]	; (800908c <TIM_Base_SetConfig+0x11c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d007      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a3b      	ldr	r2, [pc, #236]	; (8009090 <TIM_Base_SetConfig+0x120>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d003      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a3a      	ldr	r2, [pc, #232]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d108      	bne.n	8008fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a2f      	ldr	r2, [pc, #188]	; (8009084 <TIM_Base_SetConfig+0x114>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d02b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd0:	d027      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a2c      	ldr	r2, [pc, #176]	; (8009088 <TIM_Base_SetConfig+0x118>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d023      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2b      	ldr	r2, [pc, #172]	; (800908c <TIM_Base_SetConfig+0x11c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d01f      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <TIM_Base_SetConfig+0x120>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a29      	ldr	r2, [pc, #164]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d017      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a28      	ldr	r2, [pc, #160]	; (8009098 <TIM_Base_SetConfig+0x128>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d013      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a27      	ldr	r2, [pc, #156]	; (800909c <TIM_Base_SetConfig+0x12c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00f      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a26      	ldr	r2, [pc, #152]	; (80090a0 <TIM_Base_SetConfig+0x130>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a25      	ldr	r2, [pc, #148]	; (80090a4 <TIM_Base_SetConfig+0x134>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d007      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a24      	ldr	r2, [pc, #144]	; (80090a8 <TIM_Base_SetConfig+0x138>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a23      	ldr	r2, [pc, #140]	; (80090ac <TIM_Base_SetConfig+0x13c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d108      	bne.n	8009034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <TIM_Base_SetConfig+0x114>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0xf8>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d103      	bne.n	8009070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	615a      	str	r2, [r3, #20]
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40010000 	.word	0x40010000
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40000c00 	.word	0x40000c00
 8009094:	40010400 	.word	0x40010400
 8009098:	40014000 	.word	0x40014000
 800909c:	40014400 	.word	0x40014400
 80090a0:	40014800 	.word	0x40014800
 80090a4:	40001800 	.word	0x40001800
 80090a8:	40001c00 	.word	0x40001c00
 80090ac:	40002000 	.word	0x40002000

080090b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f023 0201 	bic.w	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f023 0302 	bic.w	r3, r3, #2
 80090f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4313      	orrs	r3, r2
 8009102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a20      	ldr	r2, [pc, #128]	; (8009188 <TIM_OC1_SetConfig+0xd8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_OC1_SetConfig+0x64>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1f      	ldr	r2, [pc, #124]	; (800918c <TIM_OC1_SetConfig+0xdc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d10c      	bne.n	800912e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f023 0308 	bic.w	r3, r3, #8
 800911a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f023 0304 	bic.w	r3, r3, #4
 800912c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a15      	ldr	r2, [pc, #84]	; (8009188 <TIM_OC1_SetConfig+0xd8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d003      	beq.n	800913e <TIM_OC1_SetConfig+0x8e>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a14      	ldr	r2, [pc, #80]	; (800918c <TIM_OC1_SetConfig+0xdc>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d111      	bne.n	8009162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800914c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	621a      	str	r2, [r3, #32]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	40010000 	.word	0x40010000
 800918c:	40010400 	.word	0x40010400

08009190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0210 	bic.w	r2, r3, #16
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f023 0320 	bic.w	r3, r3, #32
 80091da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a22      	ldr	r2, [pc, #136]	; (8009274 <TIM_OC2_SetConfig+0xe4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_OC2_SetConfig+0x68>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a21      	ldr	r2, [pc, #132]	; (8009278 <TIM_OC2_SetConfig+0xe8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d10d      	bne.n	8009214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a17      	ldr	r2, [pc, #92]	; (8009274 <TIM_OC2_SetConfig+0xe4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d003      	beq.n	8009224 <TIM_OC2_SetConfig+0x94>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a16      	ldr	r2, [pc, #88]	; (8009278 <TIM_OC2_SetConfig+0xe8>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d113      	bne.n	800924c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800922a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4313      	orrs	r3, r2
 800923e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	621a      	str	r2, [r3, #32]
}
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	40010400 	.word	0x40010400

0800927c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a21      	ldr	r2, [pc, #132]	; (800935c <TIM_OC3_SetConfig+0xe0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d003      	beq.n	80092e2 <TIM_OC3_SetConfig+0x66>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a20      	ldr	r2, [pc, #128]	; (8009360 <TIM_OC3_SetConfig+0xe4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d10d      	bne.n	80092fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <TIM_OC3_SetConfig+0xe0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d003      	beq.n	800930e <TIM_OC3_SetConfig+0x92>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a15      	ldr	r2, [pc, #84]	; (8009360 <TIM_OC3_SetConfig+0xe4>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d113      	bne.n	8009336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800931c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40010000 	.word	0x40010000
 8009360:	40010400 	.word	0x40010400

08009364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800939a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	031b      	lsls	r3, r3, #12
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a12      	ldr	r2, [pc, #72]	; (8009408 <TIM_OC4_SetConfig+0xa4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_OC4_SetConfig+0x68>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a11      	ldr	r2, [pc, #68]	; (800940c <TIM_OC4_SetConfig+0xa8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d109      	bne.n	80093e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	019b      	lsls	r3, r3, #6
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4313      	orrs	r3, r2
 80093de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	621a      	str	r2, [r3, #32]
}
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	40010000 	.word	0x40010000
 800940c:	40010400 	.word	0x40010400

08009410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009424:	2302      	movs	r3, #2
 8009426:	e05a      	b.n	80094de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a21      	ldr	r2, [pc, #132]	; (80094ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d022      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009474:	d01d      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a1d      	ldr	r2, [pc, #116]	; (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d018      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1a      	ldr	r2, [pc, #104]	; (80094f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00e      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d009      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a17      	ldr	r2, [pc, #92]	; (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d004      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a15      	ldr	r2, [pc, #84]	; (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d10c      	bne.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40010000 	.word	0x40010000
 80094f0:	40000400 	.word	0x40000400
 80094f4:	40000800 	.word	0x40000800
 80094f8:	40000c00 	.word	0x40000c00
 80094fc:	40010400 	.word	0x40010400
 8009500:	40014000 	.word	0x40014000
 8009504:	40001800 	.word	0x40001800

08009508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e03f      	b.n	80095c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f9 f85e 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2224      	movs	r2, #36	; 0x24
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f929 	bl	80097cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691a      	ldr	r2, [r3, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695a      	ldr	r2, [r3, #20]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b08a      	sub	sp, #40	; 0x28
 80095ce:	af02      	add	r7, sp, #8
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b20      	cmp	r3, #32
 80095e8:	d17c      	bne.n	80096e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <HAL_UART_Transmit+0x2c>
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e075      	b.n	80096e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_UART_Transmit+0x3e>
 8009604:	2302      	movs	r3, #2
 8009606:	e06e      	b.n	80096e6 <HAL_UART_Transmit+0x11c>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2221      	movs	r2, #33	; 0x21
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800961e:	f7fb f85b 	bl	80046d8 <HAL_GetTick>
 8009622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	88fa      	ldrh	r2, [r7, #6]
 8009628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	88fa      	ldrh	r2, [r7, #6]
 800962e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009638:	d108      	bne.n	800964c <HAL_UART_Transmit+0x82>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d104      	bne.n	800964c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	e003      	b.n	8009654 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800965c:	e02a      	b.n	80096b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2200      	movs	r2, #0
 8009666:	2180      	movs	r1, #128	; 0x80
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f840 	bl	80096ee <UART_WaitOnFlagUntilTimeout>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e036      	b.n	80096e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800968c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	3302      	adds	r3, #2
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	e007      	b.n	80096a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	3301      	adds	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1cf      	bne.n	800965e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2200      	movs	r2, #0
 80096c6:	2140      	movs	r1, #64	; 0x40
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f810 	bl	80096ee <UART_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e006      	b.n	80096e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	e000      	b.n	80096e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096e4:	2302      	movs	r3, #2
  }
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b090      	sub	sp, #64	; 0x40
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	4613      	mov	r3, r2
 80096fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fe:	e050      	b.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d04c      	beq.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <UART_WaitOnFlagUntilTimeout+0x30>
 800970e:	f7fa ffe3 	bl	80046d8 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800971a:	429a      	cmp	r2, r3
 800971c:	d241      	bcs.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	330c      	adds	r3, #12
 8009724:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	330c      	adds	r3, #12
 800973c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800973e:	637a      	str	r2, [r7, #52]	; 0x34
 8009740:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e5      	bne.n	800971e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3314      	adds	r3, #20
 8009758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	613b      	str	r3, [r7, #16]
   return(result);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f023 0301 	bic.w	r3, r3, #1
 8009768:	63bb      	str	r3, [r7, #56]	; 0x38
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3314      	adds	r3, #20
 8009770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009772:	623a      	str	r2, [r7, #32]
 8009774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	69f9      	ldr	r1, [r7, #28]
 8009778:	6a3a      	ldr	r2, [r7, #32]
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e00f      	b.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4013      	ands	r3, r2
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	bf0c      	ite	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	2300      	movne	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d09f      	beq.n	8009700 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3740      	adds	r7, #64	; 0x40
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	b09f      	sub	sp, #124	; 0x7c
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e2:	68d9      	ldr	r1, [r3, #12]
 80097e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	ea40 0301 	orr.w	r3, r0, r1
 80097ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	4313      	orrs	r3, r2
 8009804:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009810:	f021 010c 	bic.w	r1, r1, #12
 8009814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800981a:	430b      	orrs	r3, r1
 800981c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800981e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982a:	6999      	ldr	r1, [r3, #24]
 800982c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	ea40 0301 	orr.w	r3, r0, r1
 8009834:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4bc5      	ldr	r3, [pc, #788]	; (8009b50 <UART_SetConfig+0x384>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d004      	beq.n	800984a <UART_SetConfig+0x7e>
 8009840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	4bc3      	ldr	r3, [pc, #780]	; (8009b54 <UART_SetConfig+0x388>)
 8009846:	429a      	cmp	r2, r3
 8009848:	d103      	bne.n	8009852 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800984a:	f7fd fe07 	bl	800745c <HAL_RCC_GetPCLK2Freq>
 800984e:	6778      	str	r0, [r7, #116]	; 0x74
 8009850:	e002      	b.n	8009858 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009852:	f7fd fdef 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 8009856:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009860:	f040 80b6 	bne.w	80099d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009866:	461c      	mov	r4, r3
 8009868:	f04f 0500 	mov.w	r5, #0
 800986c:	4622      	mov	r2, r4
 800986e:	462b      	mov	r3, r5
 8009870:	1891      	adds	r1, r2, r2
 8009872:	6439      	str	r1, [r7, #64]	; 0x40
 8009874:	415b      	adcs	r3, r3
 8009876:	647b      	str	r3, [r7, #68]	; 0x44
 8009878:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800987c:	1912      	adds	r2, r2, r4
 800987e:	eb45 0303 	adc.w	r3, r5, r3
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f04f 0100 	mov.w	r1, #0
 800988a:	00d9      	lsls	r1, r3, #3
 800988c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009890:	00d0      	lsls	r0, r2, #3
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	1911      	adds	r1, r2, r4
 8009898:	6639      	str	r1, [r7, #96]	; 0x60
 800989a:	416b      	adcs	r3, r5
 800989c:	667b      	str	r3, [r7, #100]	; 0x64
 800989e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	1891      	adds	r1, r2, r2
 80098aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80098ac:	415b      	adcs	r3, r3
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80098b8:	f7f7 f9f6 	bl	8000ca8 <__aeabi_uldivmod>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4ba5      	ldr	r3, [pc, #660]	; (8009b58 <UART_SetConfig+0x38c>)
 80098c2:	fba3 2302 	umull	r2, r3, r3, r2
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	011e      	lsls	r6, r3, #4
 80098ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098cc:	461c      	mov	r4, r3
 80098ce:	f04f 0500 	mov.w	r5, #0
 80098d2:	4622      	mov	r2, r4
 80098d4:	462b      	mov	r3, r5
 80098d6:	1891      	adds	r1, r2, r2
 80098d8:	6339      	str	r1, [r7, #48]	; 0x30
 80098da:	415b      	adcs	r3, r3
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
 80098de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80098e2:	1912      	adds	r2, r2, r4
 80098e4:	eb45 0303 	adc.w	r3, r5, r3
 80098e8:	f04f 0000 	mov.w	r0, #0
 80098ec:	f04f 0100 	mov.w	r1, #0
 80098f0:	00d9      	lsls	r1, r3, #3
 80098f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098f6:	00d0      	lsls	r0, r2, #3
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	1911      	adds	r1, r2, r4
 80098fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8009900:	416b      	adcs	r3, r5
 8009902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	461a      	mov	r2, r3
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	1891      	adds	r1, r2, r2
 8009910:	62b9      	str	r1, [r7, #40]	; 0x28
 8009912:	415b      	adcs	r3, r3
 8009914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800991a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800991e:	f7f7 f9c3 	bl	8000ca8 <__aeabi_uldivmod>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4b8c      	ldr	r3, [pc, #560]	; (8009b58 <UART_SetConfig+0x38c>)
 8009928:	fba3 1302 	umull	r1, r3, r3, r2
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	2164      	movs	r1, #100	; 0x64
 8009930:	fb01 f303 	mul.w	r3, r1, r3
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	3332      	adds	r3, #50	; 0x32
 800993a:	4a87      	ldr	r2, [pc, #540]	; (8009b58 <UART_SetConfig+0x38c>)
 800993c:	fba2 2303 	umull	r2, r3, r2, r3
 8009940:	095b      	lsrs	r3, r3, #5
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009948:	441e      	add	r6, r3
 800994a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800994c:	4618      	mov	r0, r3
 800994e:	f04f 0100 	mov.w	r1, #0
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	1894      	adds	r4, r2, r2
 8009958:	623c      	str	r4, [r7, #32]
 800995a:	415b      	adcs	r3, r3
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
 800995e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009962:	1812      	adds	r2, r2, r0
 8009964:	eb41 0303 	adc.w	r3, r1, r3
 8009968:	f04f 0400 	mov.w	r4, #0
 800996c:	f04f 0500 	mov.w	r5, #0
 8009970:	00dd      	lsls	r5, r3, #3
 8009972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009976:	00d4      	lsls	r4, r2, #3
 8009978:	4622      	mov	r2, r4
 800997a:	462b      	mov	r3, r5
 800997c:	1814      	adds	r4, r2, r0
 800997e:	653c      	str	r4, [r7, #80]	; 0x50
 8009980:	414b      	adcs	r3, r1
 8009982:	657b      	str	r3, [r7, #84]	; 0x54
 8009984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	461a      	mov	r2, r3
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	1891      	adds	r1, r2, r2
 8009990:	61b9      	str	r1, [r7, #24]
 8009992:	415b      	adcs	r3, r3
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800999a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800999e:	f7f7 f983 	bl	8000ca8 <__aeabi_uldivmod>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4b6c      	ldr	r3, [pc, #432]	; (8009b58 <UART_SetConfig+0x38c>)
 80099a8:	fba3 1302 	umull	r1, r3, r3, r2
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	2164      	movs	r1, #100	; 0x64
 80099b0:	fb01 f303 	mul.w	r3, r1, r3
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	3332      	adds	r3, #50	; 0x32
 80099ba:	4a67      	ldr	r2, [pc, #412]	; (8009b58 <UART_SetConfig+0x38c>)
 80099bc:	fba2 2303 	umull	r2, r3, r2, r3
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	f003 0207 	and.w	r2, r3, #7
 80099c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4432      	add	r2, r6
 80099cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099ce:	e0b9      	b.n	8009b44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099d2:	461c      	mov	r4, r3
 80099d4:	f04f 0500 	mov.w	r5, #0
 80099d8:	4622      	mov	r2, r4
 80099da:	462b      	mov	r3, r5
 80099dc:	1891      	adds	r1, r2, r2
 80099de:	6139      	str	r1, [r7, #16]
 80099e0:	415b      	adcs	r3, r3
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099e8:	1912      	adds	r2, r2, r4
 80099ea:	eb45 0303 	adc.w	r3, r5, r3
 80099ee:	f04f 0000 	mov.w	r0, #0
 80099f2:	f04f 0100 	mov.w	r1, #0
 80099f6:	00d9      	lsls	r1, r3, #3
 80099f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099fc:	00d0      	lsls	r0, r2, #3
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	eb12 0804 	adds.w	r8, r2, r4
 8009a06:	eb43 0905 	adc.w	r9, r3, r5
 8009a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f04f 0100 	mov.w	r1, #0
 8009a14:	f04f 0200 	mov.w	r2, #0
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	008b      	lsls	r3, r1, #2
 8009a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a22:	0082      	lsls	r2, r0, #2
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	f7f7 f93e 	bl	8000ca8 <__aeabi_uldivmod>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4b49      	ldr	r3, [pc, #292]	; (8009b58 <UART_SetConfig+0x38c>)
 8009a32:	fba3 2302 	umull	r2, r3, r3, r2
 8009a36:	095b      	lsrs	r3, r3, #5
 8009a38:	011e      	lsls	r6, r3, #4
 8009a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f04f 0100 	mov.w	r1, #0
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	1894      	adds	r4, r2, r2
 8009a48:	60bc      	str	r4, [r7, #8]
 8009a4a:	415b      	adcs	r3, r3
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a52:	1812      	adds	r2, r2, r0
 8009a54:	eb41 0303 	adc.w	r3, r1, r3
 8009a58:	f04f 0400 	mov.w	r4, #0
 8009a5c:	f04f 0500 	mov.w	r5, #0
 8009a60:	00dd      	lsls	r5, r3, #3
 8009a62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a66:	00d4      	lsls	r4, r2, #3
 8009a68:	4622      	mov	r2, r4
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	1814      	adds	r4, r2, r0
 8009a6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009a70:	414b      	adcs	r3, r1
 8009a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f04f 0100 	mov.w	r1, #0
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	008b      	lsls	r3, r1, #2
 8009a88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a8c:	0082      	lsls	r2, r0, #2
 8009a8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a92:	f7f7 f909 	bl	8000ca8 <__aeabi_uldivmod>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	; (8009b58 <UART_SetConfig+0x38c>)
 8009a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	2164      	movs	r1, #100	; 0x64
 8009aa4:	fb01 f303 	mul.w	r3, r1, r3
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	3332      	adds	r3, #50	; 0x32
 8009aae:	4a2a      	ldr	r2, [pc, #168]	; (8009b58 <UART_SetConfig+0x38c>)
 8009ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab4:	095b      	lsrs	r3, r3, #5
 8009ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aba:	441e      	add	r6, r3
 8009abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f04f 0100 	mov.w	r1, #0
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	1894      	adds	r4, r2, r2
 8009aca:	603c      	str	r4, [r7, #0]
 8009acc:	415b      	adcs	r3, r3
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad4:	1812      	adds	r2, r2, r0
 8009ad6:	eb41 0303 	adc.w	r3, r1, r3
 8009ada:	f04f 0400 	mov.w	r4, #0
 8009ade:	f04f 0500 	mov.w	r5, #0
 8009ae2:	00dd      	lsls	r5, r3, #3
 8009ae4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ae8:	00d4      	lsls	r4, r2, #3
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	eb12 0a00 	adds.w	sl, r2, r0
 8009af2:	eb43 0b01 	adc.w	fp, r3, r1
 8009af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f04f 0100 	mov.w	r1, #0
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	f04f 0300 	mov.w	r3, #0
 8009b08:	008b      	lsls	r3, r1, #2
 8009b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b0e:	0082      	lsls	r2, r0, #2
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	f7f7 f8c8 	bl	8000ca8 <__aeabi_uldivmod>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <UART_SetConfig+0x38c>)
 8009b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	2164      	movs	r1, #100	; 0x64
 8009b26:	fb01 f303 	mul.w	r3, r1, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	3332      	adds	r3, #50	; 0x32
 8009b30:	4a09      	ldr	r2, [pc, #36]	; (8009b58 <UART_SetConfig+0x38c>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	f003 020f 	and.w	r2, r3, #15
 8009b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4432      	add	r2, r6
 8009b42:	609a      	str	r2, [r3, #8]
}
 8009b44:	bf00      	nop
 8009b46:	377c      	adds	r7, #124	; 0x7c
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4e:	bf00      	nop
 8009b50:	40011000 	.word	0x40011000
 8009b54:	40011400 	.word	0x40011400
 8009b58:	51eb851f 	.word	0x51eb851f

08009b5c <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8009b6c:	bf00      	nop
 8009b6e:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <sx126x_hal_write+0x74>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <sx126x_hal_write+0x78>)
 8009b74:	8812      	ldrh	r2, [r2, #0]
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fb fe15 	bl	80057a8 <HAL_GPIO_ReadPin>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d0f4      	beq.n	8009b6e <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009b84:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <sx126x_hal_write+0x7c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <sx126x_hal_write+0x80>)
 8009b8a:	8811      	ldrh	r1, [r2, #0]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fb fe22 	bl	80057d8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8009b94:	88fa      	ldrh	r2, [r7, #6]
 8009b96:	2364      	movs	r3, #100	; 0x64
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7fe fb33 	bl	8008206 <HAL_SPI_Transmit>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8009ba4:	8c3a      	ldrh	r2, [r7, #32]
 8009ba6:	2364      	movs	r3, #100	; 0x64
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7fe fb2b 	bl	8008206 <HAL_SPI_Transmit>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8009bb4:	4b08      	ldr	r3, [pc, #32]	; (8009bd8 <sx126x_hal_write+0x7c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <sx126x_hal_write+0x80>)
 8009bba:	8811      	ldrh	r1, [r2, #0]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fb fe0a 	bl	80057d8 <HAL_GPIO_WritePin>
    return status;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	2000046c 	.word	0x2000046c
 8009bd4:	20000468 	.word	0x20000468
 8009bd8:	2000045c 	.word	0x2000045c
 8009bdc:	2000045a 	.word	0x2000045a

08009be0 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	4613      	mov	r3, r2
 8009bee:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8009bf0:	bf00      	nop
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	; (8009c6c <sx126x_hal_read+0x8c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1e      	ldr	r2, [pc, #120]	; (8009c70 <sx126x_hal_read+0x90>)
 8009bf8:	8812      	ldrh	r2, [r2, #0]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fb fdd3 	bl	80057a8 <HAL_GPIO_ReadPin>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d0f4      	beq.n	8009bf2 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009c08:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <sx126x_hal_read+0x94>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a1a      	ldr	r2, [pc, #104]	; (8009c78 <sx126x_hal_read+0x98>)
 8009c0e:	8811      	ldrh	r1, [r2, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fb fde0 	bl	80057d8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8009c18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	2364      	movs	r3, #100	; 0x64
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7fe faef 	bl	8008206 <HAL_SPI_Transmit>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8009c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	18d1      	adds	r1, r2, r3
 8009c34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	88fa      	ldrh	r2, [r7, #6]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	2264      	movs	r2, #100	; 0x64
 8009c42:	9200      	str	r2, [sp, #0]
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7fe fc19 	bl	800847e <HAL_SPI_TransmitReceive>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8009c50:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <sx126x_hal_read+0x94>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <sx126x_hal_read+0x98>)
 8009c56:	8811      	ldrh	r1, [r2, #0]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fb fdbc 	bl	80057d8 <HAL_GPIO_WritePin>
    return status;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000046c 	.word	0x2000046c
 8009c70:	20000468 	.word	0x20000468
 8009c74:	2000045c 	.word	0x2000045c
 8009c78:	2000045a 	.word	0x2000045a

08009c7c <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8009c88:	4a05      	ldr	r2, [pc, #20]	; (8009ca0 <set_NSS_pin+0x24>)
 8009c8a:	887b      	ldrh	r3, [r7, #2]
 8009c8c:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8009c8e:	4a05      	ldr	r2, [pc, #20]	; (8009ca4 <set_NSS_pin+0x28>)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6013      	str	r3, [r2, #0]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	2000045a 	.word	0x2000045a
 8009ca4:	2000045c 	.word	0x2000045c

08009ca8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8009cb4:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <set_BUSY_pin+0x24>)
 8009cb6:	887b      	ldrh	r3, [r7, #2]
 8009cb8:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8009cba:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <set_BUSY_pin+0x28>)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6013      	str	r3, [r2, #0]
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	20000468 	.word	0x20000468
 8009cd0:	2000046c 	.word	0x2000046c

08009cd4 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8009ce0:	4a05      	ldr	r2, [pc, #20]	; (8009cf8 <set_NRESET_pin+0x24>)
 8009ce2:	887b      	ldrh	r3, [r7, #2]
 8009ce4:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8009ce6:	4a05      	ldr	r2, [pc, #20]	; (8009cfc <set_NRESET_pin+0x28>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6013      	str	r3, [r2, #0]
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20000460 	.word	0x20000460
 8009cfc:	20000464 	.word	0x20000464

08009d00 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8009d0c:	4a05      	ldr	r2, [pc, #20]	; (8009d24 <set_DIO1_pin+0x24>)
 8009d0e:	887b      	ldrh	r3, [r7, #2]
 8009d10:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8009d12:	4a05      	ldr	r2, [pc, #20]	; (8009d28 <set_DIO1_pin+0x28>)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6013      	str	r3, [r2, #0]
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	20000470 	.word	0x20000470
 8009d28:	20000474 	.word	0x20000474

08009d2c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	f107 0c08 	add.w	ip, r7, #8
 8009d36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <set_hspi+0x2c>)
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	2258      	movs	r2, #88	; 0x58
 8009d44:	4619      	mov	r1, r3
 8009d46:	f000 ff81 	bl	800ac4c <memcpy>
}
 8009d4a:	bf00      	nop
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d52:	b004      	add	sp, #16
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20000478 	.word	0x20000478

08009d5c <Tx_setup>:

void Tx_setup(){
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8009d62:	4b66      	ldr	r3, [pc, #408]	; (8009efc <Tx_setup+0x1a0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a66      	ldr	r2, [pc, #408]	; (8009f00 <Tx_setup+0x1a4>)
 8009d68:	8811      	ldrh	r1, [r2, #0]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fb fd33 	bl	80057d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009d72:	4b64      	ldr	r3, [pc, #400]	; (8009f04 <Tx_setup+0x1a8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a64      	ldr	r2, [pc, #400]	; (8009f08 <Tx_setup+0x1ac>)
 8009d78:	8811      	ldrh	r1, [r2, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fb fd2b 	bl	80057d8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8009d82:	2032      	movs	r0, #50	; 0x32
 8009d84:	f7fa fcb4 	bl	80046f0 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8009d88:	4b5e      	ldr	r3, [pc, #376]	; (8009f04 <Tx_setup+0x1a8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a5e      	ldr	r2, [pc, #376]	; (8009f08 <Tx_setup+0x1ac>)
 8009d8e:	8811      	ldrh	r1, [r2, #0]
 8009d90:	2201      	movs	r2, #1
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fb fd20 	bl	80057d8 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8009d98:	2100      	movs	r1, #0
 8009d9a:	485c      	ldr	r0, [pc, #368]	; (8009f0c <Tx_setup+0x1b0>)
 8009d9c:	f000 f8f2 	bl	8009f84 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8009da0:	4b5b      	ldr	r3, [pc, #364]	; (8009f10 <Tx_setup+0x1b4>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4859      	ldr	r0, [pc, #356]	; (8009f0c <Tx_setup+0x1b0>)
 8009da8:	f000 fa76 	bl	800a298 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8009dac:	4b59      	ldr	r3, [pc, #356]	; (8009f14 <Tx_setup+0x1b8>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	4856      	ldr	r0, [pc, #344]	; (8009f0c <Tx_setup+0x1b0>)
 8009db4:	f000 faaa 	bl	800a30c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8009db8:	4b57      	ldr	r3, [pc, #348]	; (8009f18 <Tx_setup+0x1bc>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4853      	ldr	r0, [pc, #332]	; (8009f0c <Tx_setup+0x1b0>)
 8009dc0:	f000 f977 	bl	800a0b2 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4851      	ldr	r0, [pc, #324]	; (8009f0c <Tx_setup+0x1b0>)
 8009dc8:	f000 fa24 	bl	800a214 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8009dcc:	4b53      	ldr	r3, [pc, #332]	; (8009f1c <Tx_setup+0x1c0>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2264      	movs	r2, #100	; 0x64
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	484d      	ldr	r0, [pc, #308]	; (8009f0c <Tx_setup+0x1b0>)
 8009dd6:	f000 fa37 	bl	800a248 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8009dda:	4b51      	ldr	r3, [pc, #324]	; (8009f20 <Tx_setup+0x1c4>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	484a      	ldr	r0, [pc, #296]	; (8009f0c <Tx_setup+0x1b0>)
 8009de2:	f000 f903 	bl	8009fec <sx126x_cal>
    HAL_Delay(50);
 8009de6:	2032      	movs	r0, #50	; 0x32
 8009de8:	f7fa fc82 	bl	80046f0 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8009dec:	4b4d      	ldr	r3, [pc, #308]	; (8009f24 <Tx_setup+0x1c8>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	4619      	mov	r1, r3
 8009df2:	4846      	ldr	r0, [pc, #280]	; (8009f0c <Tx_setup+0x1b0>)
 8009df4:	f000 f8e0 	bl	8009fb8 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8009df8:	4b4b      	ldr	r3, [pc, #300]	; (8009f28 <Tx_setup+0x1cc>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	4a4b      	ldr	r2, [pc, #300]	; (8009f2c <Tx_setup+0x1d0>)
 8009dfe:	7812      	ldrb	r2, [r2, #0]
 8009e00:	4619      	mov	r1, r3
 8009e02:	4842      	ldr	r0, [pc, #264]	; (8009f0c <Tx_setup+0x1b0>)
 8009e04:	f000 f90c 	bl	800a020 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8009e08:	2004      	movs	r0, #4
 8009e0a:	f000 ff0f 	bl	800ac2c <malloc>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8009e12:	4b47      	ldr	r3, [pc, #284]	; (8009f30 <Tx_setup+0x1d4>)
 8009e14:	781a      	ldrb	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8009e1a:	4b46      	ldr	r3, [pc, #280]	; (8009f34 <Tx_setup+0x1d8>)
 8009e1c:	781a      	ldrb	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8009e22:	4b45      	ldr	r3, [pc, #276]	; (8009f38 <Tx_setup+0x1dc>)
 8009e24:	781a      	ldrb	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8009e2a:	4b44      	ldr	r3, [pc, #272]	; (8009f3c <Tx_setup+0x1e0>)
 8009e2c:	781a      	ldrb	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	4835      	ldr	r0, [pc, #212]	; (8009f0c <Tx_setup+0x1b0>)
 8009e36:	f000 f917 	bl	800a068 <sx126x_set_pa_cfg>
    free(params);
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fefe 	bl	800ac3c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8009e40:	4b3f      	ldr	r3, [pc, #252]	; (8009f40 <Tx_setup+0x1e4>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	b25b      	sxtb	r3, r3
 8009e46:	4a3f      	ldr	r2, [pc, #252]	; (8009f44 <Tx_setup+0x1e8>)
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	482f      	ldr	r0, [pc, #188]	; (8009f0c <Tx_setup+0x1b0>)
 8009e4e:	f000 fa77 	bl	800a340 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8009e52:	4b3d      	ldr	r3, [pc, #244]	; (8009f48 <Tx_setup+0x1ec>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	4a3d      	ldr	r2, [pc, #244]	; (8009f4c <Tx_setup+0x1f0>)
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	482b      	ldr	r0, [pc, #172]	; (8009f0c <Tx_setup+0x1b0>)
 8009e5e:	f000 fb2d 	bl	800a4bc <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8009e62:	2004      	movs	r0, #4
 8009e64:	f000 fee2 	bl	800ac2c <malloc>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8009e6c:	4b38      	ldr	r3, [pc, #224]	; (8009f50 <Tx_setup+0x1f4>)
 8009e6e:	781a      	ldrb	r2, [r3, #0]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8009e74:	4b37      	ldr	r3, [pc, #220]	; (8009f54 <Tx_setup+0x1f8>)
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8009e7c:	4b36      	ldr	r3, [pc, #216]	; (8009f58 <Tx_setup+0x1fc>)
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8009e84:	4b35      	ldr	r3, [pc, #212]	; (8009f5c <Tx_setup+0x200>)
 8009e86:	781a      	ldrb	r2, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	481f      	ldr	r0, [pc, #124]	; (8009f0c <Tx_setup+0x1b0>)
 8009e90:	f000 fa7a 	bl	800a388 <sx126x_set_lora_mod_params>
    free(mod_params);
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f000 fed1 	bl	800ac3c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8009e9a:	2006      	movs	r0, #6
 8009e9c:	f000 fec6 	bl	800ac2c <malloc>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8009ea4:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <Tx_setup+0x204>)
 8009ea6:	881a      	ldrh	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8009eac:	4b2d      	ldr	r3, [pc, #180]	; (8009f64 <Tx_setup+0x208>)
 8009eae:	781a      	ldrb	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8009eb4:	4b2c      	ldr	r3, [pc, #176]	; (8009f68 <Tx_setup+0x20c>)
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8009ebc:	4b2b      	ldr	r3, [pc, #172]	; (8009f6c <Tx_setup+0x210>)
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8009ec4:	4b2a      	ldr	r3, [pc, #168]	; (8009f70 <Tx_setup+0x214>)
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	480f      	ldr	r0, [pc, #60]	; (8009f0c <Tx_setup+0x1b0>)
 8009ed0:	f000 fa86 	bl	800a3e0 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 feb1 	bl	800ac3c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8009eda:	4b26      	ldr	r3, [pc, #152]	; (8009f74 <Tx_setup+0x218>)
 8009edc:	8819      	ldrh	r1, [r3, #0]
 8009ede:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <Tx_setup+0x21c>)
 8009ee0:	881a      	ldrh	r2, [r3, #0]
 8009ee2:	4b26      	ldr	r3, [pc, #152]	; (8009f7c <Tx_setup+0x220>)
 8009ee4:	8818      	ldrh	r0, [r3, #0]
 8009ee6:	4b26      	ldr	r3, [pc, #152]	; (8009f80 <Tx_setup+0x224>)
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	4603      	mov	r3, r0
 8009eee:	4807      	ldr	r0, [pc, #28]	; (8009f0c <Tx_setup+0x1b0>)
 8009ef0:	f000 f94c 	bl	800a18c <sx126x_set_dio_irq_params>

}
 8009ef4:	bf00      	nop
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000464 	.word	0x20000464
 8009f00:	20000460 	.word	0x20000460
 8009f04:	2000045c 	.word	0x2000045c
 8009f08:	2000045a 	.word	0x2000045a
 8009f0c:	20000478 	.word	0x20000478
 8009f10:	20000014 	.word	0x20000014
 8009f14:	20000018 	.word	0x20000018
 8009f18:	20000019 	.word	0x20000019
 8009f1c:	2000001a 	.word	0x2000001a
 8009f20:	2000001c 	.word	0x2000001c
 8009f24:	2000001b 	.word	0x2000001b
 8009f28:	2000001d 	.word	0x2000001d
 8009f2c:	2000001e 	.word	0x2000001e
 8009f30:	2000001f 	.word	0x2000001f
 8009f34:	20000020 	.word	0x20000020
 8009f38:	200004d0 	.word	0x200004d0
 8009f3c:	20000021 	.word	0x20000021
 8009f40:	20000022 	.word	0x20000022
 8009f44:	20000023 	.word	0x20000023
 8009f48:	200004d1 	.word	0x200004d1
 8009f4c:	200004d2 	.word	0x200004d2
 8009f50:	20000024 	.word	0x20000024
 8009f54:	20000025 	.word	0x20000025
 8009f58:	20000026 	.word	0x20000026
 8009f5c:	200004d3 	.word	0x200004d3
 8009f60:	20000028 	.word	0x20000028
 8009f64:	200004d4 	.word	0x200004d4
 8009f68:	2000002a 	.word	0x2000002a
 8009f6c:	2000002b 	.word	0x2000002b
 8009f70:	200004d5 	.word	0x200004d5
 8009f74:	2000002c 	.word	0x2000002c
 8009f78:	2000002e 	.word	0x2000002e
 8009f7c:	200004d6 	.word	0x200004d6
 8009f80:	200004d8 	.word	0x200004d8

08009f84 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8009f90:	2300      	movs	r3, #0
 8009f92:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8009f94:	2380      	movs	r3, #128	; 0x80
 8009f96:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8009f9c:	f107 010c 	add.w	r1, r7, #12
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff fdd7 	bl	8009b5c <sx126x_hal_write>
 8009fae:	4603      	mov	r3, r0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8009fc8:	2396      	movs	r3, #150	; 0x96
 8009fca:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8009fd0:	f107 010c 	add.w	r1, r7, #12
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2202      	movs	r2, #2
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff fdbd 	bl	8009b5c <sx126x_hal_write>
 8009fe2:	4603      	mov	r3, r0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8009ffc:	2389      	movs	r3, #137	; 0x89
 8009ffe:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a004:	f107 010c 	add.w	r1, r7, #12
 800a008:	2300      	movs	r3, #0
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2300      	movs	r3, #0
 800a00e:	2202      	movs	r2, #2
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff fda3 	bl	8009b5c <sx126x_hal_write>
 800a016:	4603      	mov	r3, r0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
 800a02c:	4613      	mov	r3, r2
 800a02e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800a030:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <sx126x_cal_img_hex+0x44>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	81bb      	strh	r3, [r7, #12]
 800a036:	2300      	movs	r3, #0
 800a038:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800a03a:	2398      	movs	r3, #152	; 0x98
 800a03c:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800a042:	78bb      	ldrb	r3, [r7, #2]
 800a044:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800a046:	f107 010c 	add.w	r1, r7, #12
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	2203      	movs	r2, #3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fd82 	bl	8009b5c <sx126x_hal_write>
 800a058:	4603      	mov	r3, r0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	0800f74c 	.word	0x0800f74c

0800a068 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	2300      	movs	r3, #0
 800a078:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800a07a:	2395      	movs	r3, #149	; 0x95
 800a07c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	789b      	ldrb	r3, [r3, #2]
 800a08e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	78db      	ldrb	r3, [r3, #3]
 800a094:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a096:	f107 0108 	add.w	r1, r7, #8
 800a09a:	2300      	movs	r3, #0
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2205      	movs	r2, #5
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff fd5a 	bl	8009b5c <sx126x_hal_write>
 800a0a8:	4603      	mov	r3, r0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af02      	add	r7, sp, #8
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800a0be:	2300      	movs	r3, #0
 800a0c0:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800a0c2:	2393      	movs	r3, #147	; 0x93
 800a0c4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800a0ca:	f107 010c 	add.w	r1, r7, #12
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff fd40 	bl	8009b5c <sx126x_hal_write>
 800a0dc:	4603      	mov	r3, r0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	817b      	strh	r3, [r7, #10]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <sx126x_write_register+0x50>)
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	82bb      	strh	r3, [r7, #20]
 800a102:	2300      	movs	r3, #0
 800a104:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800a106:	230d      	movs	r3, #13
 800a108:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800a10a:	897b      	ldrh	r3, [r7, #10]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	b29b      	uxth	r3, r3
 800a110:	b2db      	uxtb	r3, r3
 800a112:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800a114:	897b      	ldrh	r3, [r7, #10]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a11a:	7a7b      	ldrb	r3, [r7, #9]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f107 0114 	add.w	r1, r7, #20
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2203      	movs	r2, #3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7ff fd17 	bl	8009b5c <sx126x_hal_write>
 800a12e:	4603      	mov	r3, r0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	0800f74c 	.word	0x0800f74c

0800a13c <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	461a      	mov	r2, r3
 800a148:	460b      	mov	r3, r1
 800a14a:	817b      	strh	r3, [r7, #10]
 800a14c:	4613      	mov	r3, r2
 800a14e:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800a154:	2303      	movs	r3, #3
 800a156:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800a158:	231d      	movs	r3, #29
 800a15a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800a15c:	897b      	ldrh	r3, [r7, #10]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	b2db      	uxtb	r3, r3
 800a164:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800a166:	897b      	ldrh	r3, [r7, #10]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a16c:	f107 0110 	add.w	r1, r7, #16
 800a170:	7a7b      	ldrb	r3, [r7, #9]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2204      	movs	r2, #4
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fd31 	bl	8009be0 <sx126x_hal_read>
 800a17e:	4603      	mov	r3, r0
 800a180:	75fb      	strb	r3, [r7, #23]

    return status;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af02      	add	r7, sp, #8
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	817b      	strh	r3, [r7, #10]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	813b      	strh	r3, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	f107 0318 	add.w	r3, r7, #24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800a1b4:	2308      	movs	r3, #8
 800a1b6:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800a1b8:	897b      	ldrh	r3, [r7, #10]
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800a1c2:	897b      	ldrh	r3, [r7, #10]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800a1c8:	893b      	ldrh	r3, [r7, #8]
 800a1ca:	0a1b      	lsrs	r3, r3, #8
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800a1e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1ea:	0a1b      	lsrs	r3, r3, #8
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800a1f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a1f8:	f107 0114 	add.w	r1, r7, #20
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	2209      	movs	r2, #9
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fca9 	bl	8009b5c <sx126x_hal_write>
 800a20a:	4603      	mov	r3, r0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af02      	add	r7, sp, #8
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800a220:	2300      	movs	r3, #0
 800a222:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800a224:	239d      	movs	r3, #157	; 0x9d
 800a226:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800a22c:	f107 010c 	add.w	r1, r7, #12
 800a230:	2300      	movs	r3, #0
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	2300      	movs	r3, #0
 800a236:	2202      	movs	r2, #2
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fc8f 	bl	8009b5c <sx126x_hal_write>
 800a23e:	4603      	mov	r3, r0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	460b      	mov	r3, r1
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800a256:	2300      	movs	r3, #0
 800a258:	613b      	str	r3, [r7, #16]
 800a25a:	2300      	movs	r3, #0
 800a25c:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800a25e:	2397      	movs	r3, #151	; 0x97
 800a260:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800a262:	7afb      	ldrb	r3, [r7, #11]
 800a264:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	0a1b      	lsrs	r3, r3, #8
 800a272:	b2db      	uxtb	r3, r3
 800a274:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	2205      	movs	r2, #5
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff fc67 	bl	8009b5c <sx126x_hal_write>
 800a28e:	4603      	mov	r3, r0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	f000 f92e 	bl	800a504 <sx126x_convert_freq_in_hz_to_pll_step>
 800a2a8:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a2aa:	68f9      	ldr	r1, [r7, #12]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f805 	bl	800a2bc <sx126x_set_rf_freq_in_pll_steps>
 800a2b2:	4603      	mov	r3, r0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800a2ce:	2386      	movs	r3, #134	; 0x86
 800a2d0:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	0e1b      	lsrs	r3, r3, #24
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	0c1b      	lsrs	r3, r3, #16
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fc2d 	bl	8009b5c <sx126x_hal_write>
 800a302:	4603      	mov	r3, r0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af02      	add	r7, sp, #8
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800a318:	2300      	movs	r3, #0
 800a31a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800a31c:	238a      	movs	r3, #138	; 0x8a
 800a31e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a324:	f107 010c 	add.w	r1, r7, #12
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2300      	movs	r3, #0
 800a32e:	2202      	movs	r2, #2
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fc13 	bl	8009b5c <sx126x_hal_write>
 800a336:	4603      	mov	r3, r0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
 800a34c:	4613      	mov	r3, r2
 800a34e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <sx126x_set_tx_params+0x44>)
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	81bb      	strh	r3, [r7, #12]
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800a35a:	238e      	movs	r3, #142	; 0x8e
 800a35c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800a362:	78bb      	ldrb	r3, [r7, #2]
 800a364:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a366:	f107 010c 	add.w	r1, r7, #12
 800a36a:	2300      	movs	r3, #0
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	2300      	movs	r3, #0
 800a370:	2203      	movs	r2, #3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff fbf2 	bl	8009b5c <sx126x_hal_write>
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	0800f74c 	.word	0x0800f74c

0800a388 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af02      	add	r7, sp, #8
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a392:	2303      	movs	r3, #3
 800a394:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800a396:	2300      	movs	r3, #0
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	2300      	movs	r3, #0
 800a39c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800a39e:	238b      	movs	r3, #139	; 0x8b
 800a3a0:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	789b      	ldrb	r3, [r3, #2]
 800a3b2:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	78db      	ldrb	r3, [r3, #3]
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a3c0:	f107 0108 	add.w	r1, r7, #8
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2205      	movs	r2, #5
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff fbc5 	bl	8009b5c <sx126x_hal_write>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	613b      	str	r3, [r7, #16]
 800a3f2:	f107 0314 	add.w	r3, r7, #20
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	460a      	mov	r2, r1
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	460a      	mov	r2, r1
 800a3fe:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800a400:	238c      	movs	r3, #140	; 0x8c
 800a402:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	0a1b      	lsrs	r3, r3, #8
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	78db      	ldrb	r3, [r3, #3]
 800a422:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	791b      	ldrb	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <sx126x_set_lora_pkt_params+0x50>
 800a42c:	2301      	movs	r3, #1
 800a42e:	e000      	b.n	800a432 <sx126x_set_lora_pkt_params+0x52>
 800a430:	2300      	movs	r3, #0
 800a432:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	795b      	ldrb	r3, [r3, #5]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <sx126x_set_lora_pkt_params+0x60>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <sx126x_set_lora_pkt_params+0x62>
 800a440:	2300      	movs	r3, #0
 800a442:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a444:	f107 0110 	add.w	r1, r7, #16
 800a448:	2300      	movs	r3, #0
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	2300      	movs	r3, #0
 800a44e:	2207      	movs	r2, #7
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff fb83 	bl	8009b5c <sx126x_hal_write>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d127      	bne.n	800a4b0 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a464:	f107 020f 	add.w	r2, r7, #15
 800a468:	2301      	movs	r3, #1
 800a46a:	f240 7136 	movw	r1, #1846	; 0x736
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fe64 	bl	800a13c <sx126x_read_register>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d118      	bne.n	800a4b0 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	795b      	ldrb	r3, [r3, #5]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	f023 0304 	bic.w	r3, r3, #4
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	73fb      	strb	r3, [r7, #15]
 800a490:	e004      	b.n	800a49c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	f043 0304 	orr.w	r3, r3, #4
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a49c:	f107 020f 	add.w	r2, r7, #15
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f240 7136 	movw	r1, #1846	; 0x736
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fe1e 	bl	800a0e8 <sx126x_write_register>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
	...

0800a4bc <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <sx126x_set_buffer_base_address+0x44>)
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	81bb      	strh	r3, [r7, #12]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800a4d6:	238f      	movs	r3, #143	; 0x8f
 800a4d8:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800a4de:	78bb      	ldrb	r3, [r7, #2]
 800a4e0:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800a4e2:	f107 010c 	add.w	r1, r7, #12
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fb34 	bl	8009b5c <sx126x_hal_write>
 800a4f4:	4603      	mov	r3, r0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0800f74c 	.word	0x0800f74c

0800a504 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a0f      	ldr	r2, [pc, #60]	; (800a54c <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a510:	fba2 2303 	umull	r2, r3, r2, r3
 800a514:	0b1b      	lsrs	r3, r3, #12
 800a516:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f643 5209 	movw	r2, #15625	; 0x3d09
 800a51e:	fb02 f303 	mul.w	r3, r2, r3
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	039b      	lsls	r3, r3, #14
 800a530:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800a534:	3304      	adds	r3, #4
 800a536:	4905      	ldr	r1, [pc, #20]	; (800a54c <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a538:	fba1 1303 	umull	r1, r3, r1, r3
 800a53c:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a53e:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	431bde83 	.word	0x431bde83

0800a550 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <SysTick_Handler+0x1c>)
 800a556:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a558:	f000 f996 	bl	800a888 <xTaskGetSchedulerState>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d001      	beq.n	800a566 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a562:	f000 fa01 	bl	800a968 <xPortSysTickHandler>
  }
}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	e000e010 	.word	0xe000e010

0800a570 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	601a      	str	r2, [r3, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	6892      	ldr	r2, [r2, #8]
 800a5ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6852      	ldr	r2, [r2, #4]
 800a5d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d103      	bne.n	800a5ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	1e5a      	subs	r2, r3, #1
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a616:	4b4f      	ldr	r3, [pc, #316]	; (800a754 <xTaskIncrementTick+0x148>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f040 808f 	bne.w	800a73e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a620:	4b4d      	ldr	r3, [pc, #308]	; (800a758 <xTaskIncrementTick+0x14c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3301      	adds	r3, #1
 800a626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a628:	4a4b      	ldr	r2, [pc, #300]	; (800a758 <xTaskIncrementTick+0x14c>)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d120      	bne.n	800a676 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a634:	4b49      	ldr	r3, [pc, #292]	; (800a75c <xTaskIncrementTick+0x150>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a650:	bf00      	nop
 800a652:	e7fe      	b.n	800a652 <xTaskIncrementTick+0x46>
 800a654:	4b41      	ldr	r3, [pc, #260]	; (800a75c <xTaskIncrementTick+0x150>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	4b41      	ldr	r3, [pc, #260]	; (800a760 <xTaskIncrementTick+0x154>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a3f      	ldr	r2, [pc, #252]	; (800a75c <xTaskIncrementTick+0x150>)
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	4a3f      	ldr	r2, [pc, #252]	; (800a760 <xTaskIncrementTick+0x154>)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	4b3e      	ldr	r3, [pc, #248]	; (800a764 <xTaskIncrementTick+0x158>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3301      	adds	r3, #1
 800a66e:	4a3d      	ldr	r2, [pc, #244]	; (800a764 <xTaskIncrementTick+0x158>)
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	f000 f8e9 	bl	800a848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a676:	4b3c      	ldr	r3, [pc, #240]	; (800a768 <xTaskIncrementTick+0x15c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d349      	bcc.n	800a714 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <xTaskIncrementTick+0x150>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d104      	bne.n	800a694 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a68a:	4b37      	ldr	r3, [pc, #220]	; (800a768 <xTaskIncrementTick+0x15c>)
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	601a      	str	r2, [r3, #0]
					break;
 800a692:	e03f      	b.n	800a714 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a694:	4b31      	ldr	r3, [pc, #196]	; (800a75c <xTaskIncrementTick+0x150>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d203      	bcs.n	800a6b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6ac:	4a2e      	ldr	r2, [pc, #184]	; (800a768 <xTaskIncrementTick+0x15c>)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a6b2:	e02f      	b.n	800a714 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff ff7d 	bl	800a5b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d004      	beq.n	800a6d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	3318      	adds	r3, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff ff74 	bl	800a5b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d4:	4b25      	ldr	r3, [pc, #148]	; (800a76c <xTaskIncrementTick+0x160>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d903      	bls.n	800a6e4 <xTaskIncrementTick+0xd8>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	4a22      	ldr	r2, [pc, #136]	; (800a76c <xTaskIncrementTick+0x160>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	; (800a770 <xTaskIncrementTick+0x164>)
 800a6f2:	441a      	add	r2, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	f7ff ff38 	bl	800a570 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a704:	4b1b      	ldr	r3, [pc, #108]	; (800a774 <xTaskIncrementTick+0x168>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d3b8      	bcc.n	800a680 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a70e:	2301      	movs	r3, #1
 800a710:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a712:	e7b5      	b.n	800a680 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a714:	4b17      	ldr	r3, [pc, #92]	; (800a774 <xTaskIncrementTick+0x168>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	4915      	ldr	r1, [pc, #84]	; (800a770 <xTaskIncrementTick+0x164>)
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	440b      	add	r3, r1
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d901      	bls.n	800a730 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <xTaskIncrementTick+0x16c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e004      	b.n	800a748 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <xTaskIncrementTick+0x170>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	4a0d      	ldr	r2, [pc, #52]	; (800a77c <xTaskIncrementTick+0x170>)
 800a746:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a748:	697b      	ldr	r3, [r7, #20]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20000964 	.word	0x20000964
 800a758:	20000948 	.word	0x20000948
 800a75c:	20000940 	.word	0x20000940
 800a760:	20000944 	.word	0x20000944
 800a764:	2000095c 	.word	0x2000095c
 800a768:	20000960 	.word	0x20000960
 800a76c:	2000094c 	.word	0x2000094c
 800a770:	200004e0 	.word	0x200004e0
 800a774:	200004dc 	.word	0x200004dc
 800a778:	20000958 	.word	0x20000958
 800a77c:	20000954 	.word	0x20000954

0800a780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a786:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <vTaskSwitchContext+0xb0>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <vTaskSwitchContext+0xb4>)
 800a790:	2201      	movs	r2, #1
 800a792:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a794:	e046      	b.n	800a824 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a796:	4b27      	ldr	r3, [pc, #156]	; (800a834 <vTaskSwitchContext+0xb4>)
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79c:	4b26      	ldr	r3, [pc, #152]	; (800a838 <vTaskSwitchContext+0xb8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	e010      	b.n	800a7c6 <vTaskSwitchContext+0x46>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	607b      	str	r3, [r7, #4]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <vTaskSwitchContext+0x3e>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	491d      	ldr	r1, [pc, #116]	; (800a83c <vTaskSwitchContext+0xbc>)
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0e4      	beq.n	800a7a4 <vTaskSwitchContext+0x24>
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4a15      	ldr	r2, [pc, #84]	; (800a83c <vTaskSwitchContext+0xbc>)
 800a7e6:	4413      	add	r3, r2
 800a7e8:	60bb      	str	r3, [r7, #8]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	605a      	str	r2, [r3, #4]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d104      	bne.n	800a80a <vTaskSwitchContext+0x8a>
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	605a      	str	r2, [r3, #4]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	4a0b      	ldr	r2, [pc, #44]	; (800a840 <vTaskSwitchContext+0xc0>)
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	4a08      	ldr	r2, [pc, #32]	; (800a838 <vTaskSwitchContext+0xb8>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <vTaskSwitchContext+0xc0>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3354      	adds	r3, #84	; 0x54
 800a820:	4a08      	ldr	r2, [pc, #32]	; (800a844 <vTaskSwitchContext+0xc4>)
 800a822:	6013      	str	r3, [r2, #0]
}
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20000964 	.word	0x20000964
 800a834:	20000958 	.word	0x20000958
 800a838:	2000094c 	.word	0x2000094c
 800a83c:	200004e0 	.word	0x200004e0
 800a840:	200004dc 	.word	0x200004dc
 800a844:	20000034 	.word	0x20000034

0800a848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84e:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <prvResetNextTaskUnblockTime+0x38>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d104      	bne.n	800a862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a858:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <prvResetNextTaskUnblockTime+0x3c>)
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a860:	e008      	b.n	800a874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a862:	4b07      	ldr	r3, [pc, #28]	; (800a880 <prvResetNextTaskUnblockTime+0x38>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	4a04      	ldr	r2, [pc, #16]	; (800a884 <prvResetNextTaskUnblockTime+0x3c>)
 800a872:	6013      	str	r3, [r2, #0]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20000940 	.word	0x20000940
 800a884:	20000960 	.word	0x20000960

0800a888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a88e:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <xTaskGetSchedulerState+0x34>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d102      	bne.n	800a89c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a896:	2301      	movs	r3, #1
 800a898:	607b      	str	r3, [r7, #4]
 800a89a:	e008      	b.n	800a8ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a89c:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <xTaskGetSchedulerState+0x38>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	607b      	str	r3, [r7, #4]
 800a8a8:	e001      	b.n	800a8ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8ae:	687b      	ldr	r3, [r7, #4]
	}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	20000950 	.word	0x20000950
 800a8c0:	20000964 	.word	0x20000964
	...

0800a8d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <pxCurrentTCBConst2>)
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	6808      	ldr	r0, [r1, #0]
 800a8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	f380 8809 	msr	PSP, r0
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f04f 0000 	mov.w	r0, #0
 800a8e6:	f380 8811 	msr	BASEPRI, r0
 800a8ea:	4770      	bx	lr
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst2>:
 800a8f0:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
	...

0800a900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a900:	f3ef 8009 	mrs	r0, PSP
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4b15      	ldr	r3, [pc, #84]	; (800a960 <pxCurrentTCBConst>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	f01e 0f10 	tst.w	lr, #16
 800a910:	bf08      	it	eq
 800a912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	6010      	str	r0, [r2, #0]
 800a91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a920:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a924:	f380 8811 	msr	BASEPRI, r0
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f7ff ff26 	bl	800a780 <vTaskSwitchContext>
 800a934:	f04f 0000 	mov.w	r0, #0
 800a938:	f380 8811 	msr	BASEPRI, r0
 800a93c:	bc09      	pop	{r0, r3}
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	6808      	ldr	r0, [r1, #0]
 800a942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a946:	f01e 0f10 	tst.w	lr, #16
 800a94a:	bf08      	it	eq
 800a94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a950:	f380 8809 	msr	PSP, r0
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w

0800a960 <pxCurrentTCBConst>:
 800a960:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop

0800a968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	607b      	str	r3, [r7, #4]
}
 800a980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a982:	f7ff fe43 	bl	800a60c <xTaskIncrementTick>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a98c:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <xPortSysTickHandler+0x40>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	2300      	movs	r3, #0
 800a996:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9a0:	bf00      	nop
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <__cxa_pure_virtual>:
 800a9ac:	b508      	push	{r3, lr}
 800a9ae:	f000 f80d 	bl	800a9cc <_ZSt9terminatev>

0800a9b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a9b2:	b508      	push	{r3, lr}
 800a9b4:	4780      	blx	r0
 800a9b6:	f000 f80e 	bl	800a9d6 <abort>
	...

0800a9bc <_ZSt13get_terminatev>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <_ZSt13get_terminatev+0xc>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	f3bf 8f5b 	dmb	ish
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000030 	.word	0x20000030

0800a9cc <_ZSt9terminatev>:
 800a9cc:	b508      	push	{r3, lr}
 800a9ce:	f7ff fff5 	bl	800a9bc <_ZSt13get_terminatev>
 800a9d2:	f7ff ffee 	bl	800a9b2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a9d6 <abort>:
 800a9d6:	b508      	push	{r3, lr}
 800a9d8:	2006      	movs	r0, #6
 800a9da:	f001 f8c9 	bl	800bb70 <raise>
 800a9de:	2001      	movs	r0, #1
 800a9e0:	f7f7 ff76 	bl	80028d0 <_exit>

0800a9e4 <__errno>:
 800a9e4:	4b01      	ldr	r3, [pc, #4]	; (800a9ec <__errno+0x8>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000034 	.word	0x20000034

0800a9f0 <std>:
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9fe:	6083      	str	r3, [r0, #8]
 800aa00:	8181      	strh	r1, [r0, #12]
 800aa02:	6643      	str	r3, [r0, #100]	; 0x64
 800aa04:	81c2      	strh	r2, [r0, #14]
 800aa06:	6183      	str	r3, [r0, #24]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	305c      	adds	r0, #92	; 0x5c
 800aa0e:	f000 f945 	bl	800ac9c <memset>
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <std+0x38>)
 800aa14:	6263      	str	r3, [r4, #36]	; 0x24
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <std+0x3c>)
 800aa18:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <std+0x40>)
 800aa1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <std+0x44>)
 800aa20:	6224      	str	r4, [r4, #32]
 800aa22:	6323      	str	r3, [r4, #48]	; 0x30
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	0800bbe9 	.word	0x0800bbe9
 800aa2c:	0800bc0b 	.word	0x0800bc0b
 800aa30:	0800bc43 	.word	0x0800bc43
 800aa34:	0800bc67 	.word	0x0800bc67

0800aa38 <_cleanup_r>:
 800aa38:	4901      	ldr	r1, [pc, #4]	; (800aa40 <_cleanup_r+0x8>)
 800aa3a:	f000 b8af 	b.w	800ab9c <_fwalk_reent>
 800aa3e:	bf00      	nop
 800aa40:	0800d87d 	.word	0x0800d87d

0800aa44 <__sfmoreglue>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	1e4a      	subs	r2, r1, #1
 800aa48:	2568      	movs	r5, #104	; 0x68
 800aa4a:	4355      	muls	r5, r2
 800aa4c:	460e      	mov	r6, r1
 800aa4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa52:	f000 f97b 	bl	800ad4c <_malloc_r>
 800aa56:	4604      	mov	r4, r0
 800aa58:	b140      	cbz	r0, 800aa6c <__sfmoreglue+0x28>
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa60:	300c      	adds	r0, #12
 800aa62:	60a0      	str	r0, [r4, #8]
 800aa64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa68:	f000 f918 	bl	800ac9c <memset>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <__sfp_lock_acquire>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__sfp_lock_acquire+0x8>)
 800aa72:	f000 b8d8 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	2000117c 	.word	0x2000117c

0800aa7c <__sfp_lock_release>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__sfp_lock_release+0x8>)
 800aa7e:	f000 b8d3 	b.w	800ac28 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	2000117c 	.word	0x2000117c

0800aa88 <__sinit_lock_acquire>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__sinit_lock_acquire+0x8>)
 800aa8a:	f000 b8cc 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800aa8e:	bf00      	nop
 800aa90:	20001177 	.word	0x20001177

0800aa94 <__sinit_lock_release>:
 800aa94:	4801      	ldr	r0, [pc, #4]	; (800aa9c <__sinit_lock_release+0x8>)
 800aa96:	f000 b8c7 	b.w	800ac28 <__retarget_lock_release_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	20001177 	.word	0x20001177

0800aaa0 <__sinit>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	f7ff fff0 	bl	800aa88 <__sinit_lock_acquire>
 800aaa8:	69a3      	ldr	r3, [r4, #24]
 800aaaa:	b11b      	cbz	r3, 800aab4 <__sinit+0x14>
 800aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab0:	f7ff bff0 	b.w	800aa94 <__sinit_lock_release>
 800aab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aab8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <__sinit+0x68>)
 800aabc:	4a13      	ldr	r2, [pc, #76]	; (800ab0c <__sinit+0x6c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	bf04      	itt	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	61a3      	streq	r3, [r4, #24]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f820 	bl	800ab10 <__sfp>
 800aad0:	6060      	str	r0, [r4, #4]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f81c 	bl	800ab10 <__sfp>
 800aad8:	60a0      	str	r0, [r4, #8]
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f818 	bl	800ab10 <__sfp>
 800aae0:	2200      	movs	r2, #0
 800aae2:	60e0      	str	r0, [r4, #12]
 800aae4:	2104      	movs	r1, #4
 800aae6:	6860      	ldr	r0, [r4, #4]
 800aae8:	f7ff ff82 	bl	800a9f0 <std>
 800aaec:	68a0      	ldr	r0, [r4, #8]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	2109      	movs	r1, #9
 800aaf2:	f7ff ff7d 	bl	800a9f0 <std>
 800aaf6:	68e0      	ldr	r0, [r4, #12]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	2112      	movs	r1, #18
 800aafc:	f7ff ff78 	bl	800a9f0 <std>
 800ab00:	2301      	movs	r3, #1
 800ab02:	61a3      	str	r3, [r4, #24]
 800ab04:	e7d2      	b.n	800aaac <__sinit+0xc>
 800ab06:	bf00      	nop
 800ab08:	0800f818 	.word	0x0800f818
 800ab0c:	0800aa39 	.word	0x0800aa39

0800ab10 <__sfp>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	4607      	mov	r7, r0
 800ab14:	f7ff ffac 	bl	800aa70 <__sfp_lock_acquire>
 800ab18:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <__sfp+0x84>)
 800ab1a:	681e      	ldr	r6, [r3, #0]
 800ab1c:	69b3      	ldr	r3, [r6, #24]
 800ab1e:	b913      	cbnz	r3, 800ab26 <__sfp+0x16>
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7ff ffbd 	bl	800aaa0 <__sinit>
 800ab26:	3648      	adds	r6, #72	; 0x48
 800ab28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	d503      	bpl.n	800ab38 <__sfp+0x28>
 800ab30:	6833      	ldr	r3, [r6, #0]
 800ab32:	b30b      	cbz	r3, 800ab78 <__sfp+0x68>
 800ab34:	6836      	ldr	r6, [r6, #0]
 800ab36:	e7f7      	b.n	800ab28 <__sfp+0x18>
 800ab38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab3c:	b9d5      	cbnz	r5, 800ab74 <__sfp+0x64>
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <__sfp+0x88>)
 800ab40:	60e3      	str	r3, [r4, #12]
 800ab42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab46:	6665      	str	r5, [r4, #100]	; 0x64
 800ab48:	f000 f86c 	bl	800ac24 <__retarget_lock_init_recursive>
 800ab4c:	f7ff ff96 	bl	800aa7c <__sfp_lock_release>
 800ab50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab58:	6025      	str	r5, [r4, #0]
 800ab5a:	61a5      	str	r5, [r4, #24]
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab64:	f000 f89a 	bl	800ac9c <memset>
 800ab68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab70:	4620      	mov	r0, r4
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	3468      	adds	r4, #104	; 0x68
 800ab76:	e7d9      	b.n	800ab2c <__sfp+0x1c>
 800ab78:	2104      	movs	r1, #4
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f7ff ff62 	bl	800aa44 <__sfmoreglue>
 800ab80:	4604      	mov	r4, r0
 800ab82:	6030      	str	r0, [r6, #0]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d1d5      	bne.n	800ab34 <__sfp+0x24>
 800ab88:	f7ff ff78 	bl	800aa7c <__sfp_lock_release>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	e7ee      	b.n	800ab70 <__sfp+0x60>
 800ab92:	bf00      	nop
 800ab94:	0800f818 	.word	0x0800f818
 800ab98:	ffff0001 	.word	0xffff0001

0800ab9c <_fwalk_reent>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4606      	mov	r6, r0
 800aba2:	4688      	mov	r8, r1
 800aba4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aba8:	2700      	movs	r7, #0
 800abaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abae:	f1b9 0901 	subs.w	r9, r9, #1
 800abb2:	d505      	bpl.n	800abc0 <_fwalk_reent+0x24>
 800abb4:	6824      	ldr	r4, [r4, #0]
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	d1f7      	bne.n	800abaa <_fwalk_reent+0xe>
 800abba:	4638      	mov	r0, r7
 800abbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc0:	89ab      	ldrh	r3, [r5, #12]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d907      	bls.n	800abd6 <_fwalk_reent+0x3a>
 800abc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abca:	3301      	adds	r3, #1
 800abcc:	d003      	beq.n	800abd6 <_fwalk_reent+0x3a>
 800abce:	4629      	mov	r1, r5
 800abd0:	4630      	mov	r0, r6
 800abd2:	47c0      	blx	r8
 800abd4:	4307      	orrs	r7, r0
 800abd6:	3568      	adds	r5, #104	; 0x68
 800abd8:	e7e9      	b.n	800abae <_fwalk_reent+0x12>
	...

0800abdc <__libc_init_array>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	4d0d      	ldr	r5, [pc, #52]	; (800ac14 <__libc_init_array+0x38>)
 800abe0:	4c0d      	ldr	r4, [pc, #52]	; (800ac18 <__libc_init_array+0x3c>)
 800abe2:	1b64      	subs	r4, r4, r5
 800abe4:	10a4      	asrs	r4, r4, #2
 800abe6:	2600      	movs	r6, #0
 800abe8:	42a6      	cmp	r6, r4
 800abea:	d109      	bne.n	800ac00 <__libc_init_array+0x24>
 800abec:	4d0b      	ldr	r5, [pc, #44]	; (800ac1c <__libc_init_array+0x40>)
 800abee:	4c0c      	ldr	r4, [pc, #48]	; (800ac20 <__libc_init_array+0x44>)
 800abf0:	f004 fb52 	bl	800f298 <_init>
 800abf4:	1b64      	subs	r4, r4, r5
 800abf6:	10a4      	asrs	r4, r4, #2
 800abf8:	2600      	movs	r6, #0
 800abfa:	42a6      	cmp	r6, r4
 800abfc:	d105      	bne.n	800ac0a <__libc_init_array+0x2e>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac04:	4798      	blx	r3
 800ac06:	3601      	adds	r6, #1
 800ac08:	e7ee      	b.n	800abe8 <__libc_init_array+0xc>
 800ac0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0e:	4798      	blx	r3
 800ac10:	3601      	adds	r6, #1
 800ac12:	e7f2      	b.n	800abfa <__libc_init_array+0x1e>
 800ac14:	0800fc70 	.word	0x0800fc70
 800ac18:	0800fc70 	.word	0x0800fc70
 800ac1c:	0800fc70 	.word	0x0800fc70
 800ac20:	0800fc78 	.word	0x0800fc78

0800ac24 <__retarget_lock_init_recursive>:
 800ac24:	4770      	bx	lr

0800ac26 <__retarget_lock_acquire_recursive>:
 800ac26:	4770      	bx	lr

0800ac28 <__retarget_lock_release_recursive>:
 800ac28:	4770      	bx	lr
	...

0800ac2c <malloc>:
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <malloc+0xc>)
 800ac2e:	4601      	mov	r1, r0
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f000 b88b 	b.w	800ad4c <_malloc_r>
 800ac36:	bf00      	nop
 800ac38:	20000034 	.word	0x20000034

0800ac3c <free>:
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <free+0xc>)
 800ac3e:	4601      	mov	r1, r0
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f000 b833 	b.w	800acac <_free_r>
 800ac46:	bf00      	nop
 800ac48:	20000034 	.word	0x20000034

0800ac4c <memcpy>:
 800ac4c:	440a      	add	r2, r1
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac54:	d100      	bne.n	800ac58 <memcpy+0xc>
 800ac56:	4770      	bx	lr
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac62:	4291      	cmp	r1, r2
 800ac64:	d1f9      	bne.n	800ac5a <memcpy+0xe>
 800ac66:	bd10      	pop	{r4, pc}

0800ac68 <memmove>:
 800ac68:	4288      	cmp	r0, r1
 800ac6a:	b510      	push	{r4, lr}
 800ac6c:	eb01 0402 	add.w	r4, r1, r2
 800ac70:	d902      	bls.n	800ac78 <memmove+0x10>
 800ac72:	4284      	cmp	r4, r0
 800ac74:	4623      	mov	r3, r4
 800ac76:	d807      	bhi.n	800ac88 <memmove+0x20>
 800ac78:	1e43      	subs	r3, r0, #1
 800ac7a:	42a1      	cmp	r1, r4
 800ac7c:	d008      	beq.n	800ac90 <memmove+0x28>
 800ac7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac86:	e7f8      	b.n	800ac7a <memmove+0x12>
 800ac88:	4402      	add	r2, r0
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	428a      	cmp	r2, r1
 800ac8e:	d100      	bne.n	800ac92 <memmove+0x2a>
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac9a:	e7f7      	b.n	800ac8c <memmove+0x24>

0800ac9c <memset>:
 800ac9c:	4402      	add	r2, r0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d100      	bne.n	800aca6 <memset+0xa>
 800aca4:	4770      	bx	lr
 800aca6:	f803 1b01 	strb.w	r1, [r3], #1
 800acaa:	e7f9      	b.n	800aca0 <memset+0x4>

0800acac <_free_r>:
 800acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acae:	2900      	cmp	r1, #0
 800acb0:	d048      	beq.n	800ad44 <_free_r+0x98>
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f1a1 0404 	sub.w	r4, r1, #4
 800acbe:	bfb8      	it	lt
 800acc0:	18e4      	addlt	r4, r4, r3
 800acc2:	f003 f9c1 	bl	800e048 <__malloc_lock>
 800acc6:	4a20      	ldr	r2, [pc, #128]	; (800ad48 <_free_r+0x9c>)
 800acc8:	9801      	ldr	r0, [sp, #4]
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	4615      	mov	r5, r2
 800acce:	b933      	cbnz	r3, 800acde <_free_r+0x32>
 800acd0:	6063      	str	r3, [r4, #4]
 800acd2:	6014      	str	r4, [r2, #0]
 800acd4:	b003      	add	sp, #12
 800acd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acda:	f003 b9bb 	b.w	800e054 <__malloc_unlock>
 800acde:	42a3      	cmp	r3, r4
 800ace0:	d90b      	bls.n	800acfa <_free_r+0x4e>
 800ace2:	6821      	ldr	r1, [r4, #0]
 800ace4:	1862      	adds	r2, r4, r1
 800ace6:	4293      	cmp	r3, r2
 800ace8:	bf04      	itt	eq
 800acea:	681a      	ldreq	r2, [r3, #0]
 800acec:	685b      	ldreq	r3, [r3, #4]
 800acee:	6063      	str	r3, [r4, #4]
 800acf0:	bf04      	itt	eq
 800acf2:	1852      	addeq	r2, r2, r1
 800acf4:	6022      	streq	r2, [r4, #0]
 800acf6:	602c      	str	r4, [r5, #0]
 800acf8:	e7ec      	b.n	800acd4 <_free_r+0x28>
 800acfa:	461a      	mov	r2, r3
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	b10b      	cbz	r3, 800ad04 <_free_r+0x58>
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d9fa      	bls.n	800acfa <_free_r+0x4e>
 800ad04:	6811      	ldr	r1, [r2, #0]
 800ad06:	1855      	adds	r5, r2, r1
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	d10b      	bne.n	800ad24 <_free_r+0x78>
 800ad0c:	6824      	ldr	r4, [r4, #0]
 800ad0e:	4421      	add	r1, r4
 800ad10:	1854      	adds	r4, r2, r1
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	6011      	str	r1, [r2, #0]
 800ad16:	d1dd      	bne.n	800acd4 <_free_r+0x28>
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	4421      	add	r1, r4
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	e7d7      	b.n	800acd4 <_free_r+0x28>
 800ad24:	d902      	bls.n	800ad2c <_free_r+0x80>
 800ad26:	230c      	movs	r3, #12
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	e7d3      	b.n	800acd4 <_free_r+0x28>
 800ad2c:	6825      	ldr	r5, [r4, #0]
 800ad2e:	1961      	adds	r1, r4, r5
 800ad30:	428b      	cmp	r3, r1
 800ad32:	bf04      	itt	eq
 800ad34:	6819      	ldreq	r1, [r3, #0]
 800ad36:	685b      	ldreq	r3, [r3, #4]
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	bf04      	itt	eq
 800ad3c:	1949      	addeq	r1, r1, r5
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	6054      	str	r4, [r2, #4]
 800ad42:	e7c7      	b.n	800acd4 <_free_r+0x28>
 800ad44:	b003      	add	sp, #12
 800ad46:	bd30      	pop	{r4, r5, pc}
 800ad48:	20000968 	.word	0x20000968

0800ad4c <_malloc_r>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	1ccd      	adds	r5, r1, #3
 800ad50:	f025 0503 	bic.w	r5, r5, #3
 800ad54:	3508      	adds	r5, #8
 800ad56:	2d0c      	cmp	r5, #12
 800ad58:	bf38      	it	cc
 800ad5a:	250c      	movcc	r5, #12
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	4606      	mov	r6, r0
 800ad60:	db01      	blt.n	800ad66 <_malloc_r+0x1a>
 800ad62:	42a9      	cmp	r1, r5
 800ad64:	d903      	bls.n	800ad6e <_malloc_r+0x22>
 800ad66:	230c      	movs	r3, #12
 800ad68:	6033      	str	r3, [r6, #0]
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6e:	f003 f96b 	bl	800e048 <__malloc_lock>
 800ad72:	4921      	ldr	r1, [pc, #132]	; (800adf8 <_malloc_r+0xac>)
 800ad74:	680a      	ldr	r2, [r1, #0]
 800ad76:	4614      	mov	r4, r2
 800ad78:	b99c      	cbnz	r4, 800ada2 <_malloc_r+0x56>
 800ad7a:	4f20      	ldr	r7, [pc, #128]	; (800adfc <_malloc_r+0xb0>)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	b923      	cbnz	r3, 800ad8a <_malloc_r+0x3e>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4630      	mov	r0, r6
 800ad84:	f000 feb6 	bl	800baf4 <_sbrk_r>
 800ad88:	6038      	str	r0, [r7, #0]
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f000 feb1 	bl	800baf4 <_sbrk_r>
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	d123      	bne.n	800adde <_malloc_r+0x92>
 800ad96:	230c      	movs	r3, #12
 800ad98:	6033      	str	r3, [r6, #0]
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f003 f95a 	bl	800e054 <__malloc_unlock>
 800ada0:	e7e3      	b.n	800ad6a <_malloc_r+0x1e>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	1b5b      	subs	r3, r3, r5
 800ada6:	d417      	bmi.n	800add8 <_malloc_r+0x8c>
 800ada8:	2b0b      	cmp	r3, #11
 800adaa:	d903      	bls.n	800adb4 <_malloc_r+0x68>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	441c      	add	r4, r3
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	e004      	b.n	800adbe <_malloc_r+0x72>
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	42a2      	cmp	r2, r4
 800adb8:	bf0c      	ite	eq
 800adba:	600b      	streq	r3, [r1, #0]
 800adbc:	6053      	strne	r3, [r2, #4]
 800adbe:	4630      	mov	r0, r6
 800adc0:	f003 f948 	bl	800e054 <__malloc_unlock>
 800adc4:	f104 000b 	add.w	r0, r4, #11
 800adc8:	1d23      	adds	r3, r4, #4
 800adca:	f020 0007 	bic.w	r0, r0, #7
 800adce:	1ac2      	subs	r2, r0, r3
 800add0:	d0cc      	beq.n	800ad6c <_malloc_r+0x20>
 800add2:	1a1b      	subs	r3, r3, r0
 800add4:	50a3      	str	r3, [r4, r2]
 800add6:	e7c9      	b.n	800ad6c <_malloc_r+0x20>
 800add8:	4622      	mov	r2, r4
 800adda:	6864      	ldr	r4, [r4, #4]
 800addc:	e7cc      	b.n	800ad78 <_malloc_r+0x2c>
 800adde:	1cc4      	adds	r4, r0, #3
 800ade0:	f024 0403 	bic.w	r4, r4, #3
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	d0e3      	beq.n	800adb0 <_malloc_r+0x64>
 800ade8:	1a21      	subs	r1, r4, r0
 800adea:	4630      	mov	r0, r6
 800adec:	f000 fe82 	bl	800baf4 <_sbrk_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	d1dd      	bne.n	800adb0 <_malloc_r+0x64>
 800adf4:	e7cf      	b.n	800ad96 <_malloc_r+0x4a>
 800adf6:	bf00      	nop
 800adf8:	20000968 	.word	0x20000968
 800adfc:	2000096c 	.word	0x2000096c

0800ae00 <__cvt>:
 800ae00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae04:	ec55 4b10 	vmov	r4, r5, d0
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	460e      	mov	r6, r1
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	462b      	mov	r3, r5
 800ae10:	bfbb      	ittet	lt
 800ae12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae16:	461d      	movlt	r5, r3
 800ae18:	2300      	movge	r3, #0
 800ae1a:	232d      	movlt	r3, #45	; 0x2d
 800ae1c:	700b      	strb	r3, [r1, #0]
 800ae1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae24:	4691      	mov	r9, r2
 800ae26:	f023 0820 	bic.w	r8, r3, #32
 800ae2a:	bfbc      	itt	lt
 800ae2c:	4622      	movlt	r2, r4
 800ae2e:	4614      	movlt	r4, r2
 800ae30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae34:	d005      	beq.n	800ae42 <__cvt+0x42>
 800ae36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae3a:	d100      	bne.n	800ae3e <__cvt+0x3e>
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	2102      	movs	r1, #2
 800ae40:	e000      	b.n	800ae44 <__cvt+0x44>
 800ae42:	2103      	movs	r1, #3
 800ae44:	ab03      	add	r3, sp, #12
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	ab02      	add	r3, sp, #8
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	ec45 4b10 	vmov	d0, r4, r5
 800ae50:	4653      	mov	r3, sl
 800ae52:	4632      	mov	r2, r6
 800ae54:	f001 fea0 	bl	800cb98 <_dtoa_r>
 800ae58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	d102      	bne.n	800ae66 <__cvt+0x66>
 800ae60:	f019 0f01 	tst.w	r9, #1
 800ae64:	d022      	beq.n	800aeac <__cvt+0xac>
 800ae66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae6a:	eb07 0906 	add.w	r9, r7, r6
 800ae6e:	d110      	bne.n	800ae92 <__cvt+0x92>
 800ae70:	783b      	ldrb	r3, [r7, #0]
 800ae72:	2b30      	cmp	r3, #48	; 0x30
 800ae74:	d10a      	bne.n	800ae8c <__cvt+0x8c>
 800ae76:	2200      	movs	r2, #0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	f7f5 fe33 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae82:	b918      	cbnz	r0, 800ae8c <__cvt+0x8c>
 800ae84:	f1c6 0601 	rsb	r6, r6, #1
 800ae88:	f8ca 6000 	str.w	r6, [sl]
 800ae8c:	f8da 3000 	ldr.w	r3, [sl]
 800ae90:	4499      	add	r9, r3
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fe25 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae9e:	b108      	cbz	r0, 800aea4 <__cvt+0xa4>
 800aea0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aea4:	2230      	movs	r2, #48	; 0x30
 800aea6:	9b03      	ldr	r3, [sp, #12]
 800aea8:	454b      	cmp	r3, r9
 800aeaa:	d307      	bcc.n	800aebc <__cvt+0xbc>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeb0:	1bdb      	subs	r3, r3, r7
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	b004      	add	sp, #16
 800aeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aebc:	1c59      	adds	r1, r3, #1
 800aebe:	9103      	str	r1, [sp, #12]
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	e7f0      	b.n	800aea6 <__cvt+0xa6>

0800aec4 <__exponent>:
 800aec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aec6:	4603      	mov	r3, r0
 800aec8:	2900      	cmp	r1, #0
 800aeca:	bfb8      	it	lt
 800aecc:	4249      	neglt	r1, r1
 800aece:	f803 2b02 	strb.w	r2, [r3], #2
 800aed2:	bfb4      	ite	lt
 800aed4:	222d      	movlt	r2, #45	; 0x2d
 800aed6:	222b      	movge	r2, #43	; 0x2b
 800aed8:	2909      	cmp	r1, #9
 800aeda:	7042      	strb	r2, [r0, #1]
 800aedc:	dd2a      	ble.n	800af34 <__exponent+0x70>
 800aede:	f10d 0407 	add.w	r4, sp, #7
 800aee2:	46a4      	mov	ip, r4
 800aee4:	270a      	movs	r7, #10
 800aee6:	46a6      	mov	lr, r4
 800aee8:	460a      	mov	r2, r1
 800aeea:	fb91 f6f7 	sdiv	r6, r1, r7
 800aeee:	fb07 1516 	mls	r5, r7, r6, r1
 800aef2:	3530      	adds	r5, #48	; 0x30
 800aef4:	2a63      	cmp	r2, #99	; 0x63
 800aef6:	f104 34ff 	add.w	r4, r4, #4294967295
 800aefa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aefe:	4631      	mov	r1, r6
 800af00:	dcf1      	bgt.n	800aee6 <__exponent+0x22>
 800af02:	3130      	adds	r1, #48	; 0x30
 800af04:	f1ae 0502 	sub.w	r5, lr, #2
 800af08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af0c:	1c44      	adds	r4, r0, #1
 800af0e:	4629      	mov	r1, r5
 800af10:	4561      	cmp	r1, ip
 800af12:	d30a      	bcc.n	800af2a <__exponent+0x66>
 800af14:	f10d 0209 	add.w	r2, sp, #9
 800af18:	eba2 020e 	sub.w	r2, r2, lr
 800af1c:	4565      	cmp	r5, ip
 800af1e:	bf88      	it	hi
 800af20:	2200      	movhi	r2, #0
 800af22:	4413      	add	r3, r2
 800af24:	1a18      	subs	r0, r3, r0
 800af26:	b003      	add	sp, #12
 800af28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af32:	e7ed      	b.n	800af10 <__exponent+0x4c>
 800af34:	2330      	movs	r3, #48	; 0x30
 800af36:	3130      	adds	r1, #48	; 0x30
 800af38:	7083      	strb	r3, [r0, #2]
 800af3a:	70c1      	strb	r1, [r0, #3]
 800af3c:	1d03      	adds	r3, r0, #4
 800af3e:	e7f1      	b.n	800af24 <__exponent+0x60>

0800af40 <_printf_float>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ed2d 8b02 	vpush	{d8}
 800af48:	b08d      	sub	sp, #52	; 0x34
 800af4a:	460c      	mov	r4, r1
 800af4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af50:	4616      	mov	r6, r2
 800af52:	461f      	mov	r7, r3
 800af54:	4605      	mov	r5, r0
 800af56:	f003 f84f 	bl	800dff8 <_localeconv_r>
 800af5a:	f8d0 a000 	ldr.w	sl, [r0]
 800af5e:	4650      	mov	r0, sl
 800af60:	f7f5 f946 	bl	80001f0 <strlen>
 800af64:	2300      	movs	r3, #0
 800af66:	930a      	str	r3, [sp, #40]	; 0x28
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	9305      	str	r3, [sp, #20]
 800af6c:	f8d8 3000 	ldr.w	r3, [r8]
 800af70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af74:	3307      	adds	r3, #7
 800af76:	f023 0307 	bic.w	r3, r3, #7
 800af7a:	f103 0208 	add.w	r2, r3, #8
 800af7e:	f8c8 2000 	str.w	r2, [r8]
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af92:	9307      	str	r3, [sp, #28]
 800af94:	f8cd 8018 	str.w	r8, [sp, #24]
 800af98:	ee08 0a10 	vmov	s16, r0
 800af9c:	4b9f      	ldr	r3, [pc, #636]	; (800b21c <_printf_float+0x2dc>)
 800af9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295
 800afa6:	f7f5 fdd1 	bl	8000b4c <__aeabi_dcmpun>
 800afaa:	bb88      	cbnz	r0, 800b010 <_printf_float+0xd0>
 800afac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afb0:	4b9a      	ldr	r3, [pc, #616]	; (800b21c <_printf_float+0x2dc>)
 800afb2:	f04f 32ff 	mov.w	r2, #4294967295
 800afb6:	f7f5 fdab 	bl	8000b10 <__aeabi_dcmple>
 800afba:	bb48      	cbnz	r0, 800b010 <_printf_float+0xd0>
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	4640      	mov	r0, r8
 800afc2:	4649      	mov	r1, r9
 800afc4:	f7f5 fd9a 	bl	8000afc <__aeabi_dcmplt>
 800afc8:	b110      	cbz	r0, 800afd0 <_printf_float+0x90>
 800afca:	232d      	movs	r3, #45	; 0x2d
 800afcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afd0:	4b93      	ldr	r3, [pc, #588]	; (800b220 <_printf_float+0x2e0>)
 800afd2:	4894      	ldr	r0, [pc, #592]	; (800b224 <_printf_float+0x2e4>)
 800afd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afd8:	bf94      	ite	ls
 800afda:	4698      	movls	r8, r3
 800afdc:	4680      	movhi	r8, r0
 800afde:	2303      	movs	r3, #3
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	9b05      	ldr	r3, [sp, #20]
 800afe4:	f023 0204 	bic.w	r2, r3, #4
 800afe8:	6022      	str	r2, [r4, #0]
 800afea:	f04f 0900 	mov.w	r9, #0
 800afee:	9700      	str	r7, [sp, #0]
 800aff0:	4633      	mov	r3, r6
 800aff2:	aa0b      	add	r2, sp, #44	; 0x2c
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f9d8 	bl	800b3ac <_printf_common>
 800affc:	3001      	adds	r0, #1
 800affe:	f040 8090 	bne.w	800b122 <_printf_float+0x1e2>
 800b002:	f04f 30ff 	mov.w	r0, #4294967295
 800b006:	b00d      	add	sp, #52	; 0x34
 800b008:	ecbd 8b02 	vpop	{d8}
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	4642      	mov	r2, r8
 800b012:	464b      	mov	r3, r9
 800b014:	4640      	mov	r0, r8
 800b016:	4649      	mov	r1, r9
 800b018:	f7f5 fd98 	bl	8000b4c <__aeabi_dcmpun>
 800b01c:	b140      	cbz	r0, 800b030 <_printf_float+0xf0>
 800b01e:	464b      	mov	r3, r9
 800b020:	2b00      	cmp	r3, #0
 800b022:	bfbc      	itt	lt
 800b024:	232d      	movlt	r3, #45	; 0x2d
 800b026:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b02a:	487f      	ldr	r0, [pc, #508]	; (800b228 <_printf_float+0x2e8>)
 800b02c:	4b7f      	ldr	r3, [pc, #508]	; (800b22c <_printf_float+0x2ec>)
 800b02e:	e7d1      	b.n	800afd4 <_printf_float+0x94>
 800b030:	6863      	ldr	r3, [r4, #4]
 800b032:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b036:	9206      	str	r2, [sp, #24]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	d13f      	bne.n	800b0bc <_printf_float+0x17c>
 800b03c:	2306      	movs	r3, #6
 800b03e:	6063      	str	r3, [r4, #4]
 800b040:	9b05      	ldr	r3, [sp, #20]
 800b042:	6861      	ldr	r1, [r4, #4]
 800b044:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b048:	2300      	movs	r3, #0
 800b04a:	9303      	str	r3, [sp, #12]
 800b04c:	ab0a      	add	r3, sp, #40	; 0x28
 800b04e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b052:	ab09      	add	r3, sp, #36	; 0x24
 800b054:	ec49 8b10 	vmov	d0, r8, r9
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	6022      	str	r2, [r4, #0]
 800b05c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b060:	4628      	mov	r0, r5
 800b062:	f7ff fecd 	bl	800ae00 <__cvt>
 800b066:	9b06      	ldr	r3, [sp, #24]
 800b068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b06a:	2b47      	cmp	r3, #71	; 0x47
 800b06c:	4680      	mov	r8, r0
 800b06e:	d108      	bne.n	800b082 <_printf_float+0x142>
 800b070:	1cc8      	adds	r0, r1, #3
 800b072:	db02      	blt.n	800b07a <_printf_float+0x13a>
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	4299      	cmp	r1, r3
 800b078:	dd41      	ble.n	800b0fe <_printf_float+0x1be>
 800b07a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b07e:	fa5f fb8b 	uxtb.w	fp, fp
 800b082:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b086:	d820      	bhi.n	800b0ca <_printf_float+0x18a>
 800b088:	3901      	subs	r1, #1
 800b08a:	465a      	mov	r2, fp
 800b08c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b090:	9109      	str	r1, [sp, #36]	; 0x24
 800b092:	f7ff ff17 	bl	800aec4 <__exponent>
 800b096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b098:	1813      	adds	r3, r2, r0
 800b09a:	2a01      	cmp	r2, #1
 800b09c:	4681      	mov	r9, r0
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	dc02      	bgt.n	800b0a8 <_printf_float+0x168>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	07d2      	lsls	r2, r2, #31
 800b0a6:	d501      	bpl.n	800b0ac <_printf_float+0x16c>
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d09c      	beq.n	800afee <_printf_float+0xae>
 800b0b4:	232d      	movs	r3, #45	; 0x2d
 800b0b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ba:	e798      	b.n	800afee <_printf_float+0xae>
 800b0bc:	9a06      	ldr	r2, [sp, #24]
 800b0be:	2a47      	cmp	r2, #71	; 0x47
 800b0c0:	d1be      	bne.n	800b040 <_printf_float+0x100>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1bc      	bne.n	800b040 <_printf_float+0x100>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e7b9      	b.n	800b03e <_printf_float+0xfe>
 800b0ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0ce:	d118      	bne.n	800b102 <_printf_float+0x1c2>
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	6863      	ldr	r3, [r4, #4]
 800b0d4:	dd0b      	ble.n	800b0ee <_printf_float+0x1ae>
 800b0d6:	6121      	str	r1, [r4, #16]
 800b0d8:	b913      	cbnz	r3, 800b0e0 <_printf_float+0x1a0>
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	07d0      	lsls	r0, r2, #31
 800b0de:	d502      	bpl.n	800b0e6 <_printf_float+0x1a6>
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	440b      	add	r3, r1
 800b0e4:	6123      	str	r3, [r4, #16]
 800b0e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0e8:	f04f 0900 	mov.w	r9, #0
 800b0ec:	e7de      	b.n	800b0ac <_printf_float+0x16c>
 800b0ee:	b913      	cbnz	r3, 800b0f6 <_printf_float+0x1b6>
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	07d2      	lsls	r2, r2, #31
 800b0f4:	d501      	bpl.n	800b0fa <_printf_float+0x1ba>
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	e7f4      	b.n	800b0e4 <_printf_float+0x1a4>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e7f2      	b.n	800b0e4 <_printf_float+0x1a4>
 800b0fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b104:	4299      	cmp	r1, r3
 800b106:	db05      	blt.n	800b114 <_printf_float+0x1d4>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	6121      	str	r1, [r4, #16]
 800b10c:	07d8      	lsls	r0, r3, #31
 800b10e:	d5ea      	bpl.n	800b0e6 <_printf_float+0x1a6>
 800b110:	1c4b      	adds	r3, r1, #1
 800b112:	e7e7      	b.n	800b0e4 <_printf_float+0x1a4>
 800b114:	2900      	cmp	r1, #0
 800b116:	bfd4      	ite	le
 800b118:	f1c1 0202 	rsble	r2, r1, #2
 800b11c:	2201      	movgt	r2, #1
 800b11e:	4413      	add	r3, r2
 800b120:	e7e0      	b.n	800b0e4 <_printf_float+0x1a4>
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	055a      	lsls	r2, r3, #21
 800b126:	d407      	bmi.n	800b138 <_printf_float+0x1f8>
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	4642      	mov	r2, r8
 800b12c:	4631      	mov	r1, r6
 800b12e:	4628      	mov	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	3001      	adds	r0, #1
 800b134:	d12c      	bne.n	800b190 <_printf_float+0x250>
 800b136:	e764      	b.n	800b002 <_printf_float+0xc2>
 800b138:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b13c:	f240 80e0 	bls.w	800b300 <_printf_float+0x3c0>
 800b140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b144:	2200      	movs	r2, #0
 800b146:	2300      	movs	r3, #0
 800b148:	f7f5 fcce 	bl	8000ae8 <__aeabi_dcmpeq>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d034      	beq.n	800b1ba <_printf_float+0x27a>
 800b150:	4a37      	ldr	r2, [pc, #220]	; (800b230 <_printf_float+0x2f0>)
 800b152:	2301      	movs	r3, #1
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f af51 	beq.w	800b002 <_printf_float+0xc2>
 800b160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b164:	429a      	cmp	r2, r3
 800b166:	db02      	blt.n	800b16e <_printf_float+0x22e>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07d8      	lsls	r0, r3, #31
 800b16c:	d510      	bpl.n	800b190 <_printf_float+0x250>
 800b16e:	ee18 3a10 	vmov	r3, s16
 800b172:	4652      	mov	r2, sl
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	f43f af41 	beq.w	800b002 <_printf_float+0xc2>
 800b180:	f04f 0800 	mov.w	r8, #0
 800b184:	f104 091a 	add.w	r9, r4, #26
 800b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18a:	3b01      	subs	r3, #1
 800b18c:	4543      	cmp	r3, r8
 800b18e:	dc09      	bgt.n	800b1a4 <_printf_float+0x264>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	079b      	lsls	r3, r3, #30
 800b194:	f100 8105 	bmi.w	800b3a2 <_printf_float+0x462>
 800b198:	68e0      	ldr	r0, [r4, #12]
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	4298      	cmp	r0, r3
 800b19e:	bfb8      	it	lt
 800b1a0:	4618      	movlt	r0, r3
 800b1a2:	e730      	b.n	800b006 <_printf_float+0xc6>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	464a      	mov	r2, r9
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b8      	blx	r7
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	f43f af27 	beq.w	800b002 <_printf_float+0xc2>
 800b1b4:	f108 0801 	add.w	r8, r8, #1
 800b1b8:	e7e6      	b.n	800b188 <_printf_float+0x248>
 800b1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dc39      	bgt.n	800b234 <_printf_float+0x2f4>
 800b1c0:	4a1b      	ldr	r2, [pc, #108]	; (800b230 <_printf_float+0x2f0>)
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b8      	blx	r7
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	f43f af19 	beq.w	800b002 <_printf_float+0xc2>
 800b1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	d102      	bne.n	800b1de <_printf_float+0x29e>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	07d9      	lsls	r1, r3, #31
 800b1dc:	d5d8      	bpl.n	800b190 <_printf_float+0x250>
 800b1de:	ee18 3a10 	vmov	r3, s16
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f af09 	beq.w	800b002 <_printf_float+0xc2>
 800b1f0:	f04f 0900 	mov.w	r9, #0
 800b1f4:	f104 0a1a 	add.w	sl, r4, #26
 800b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fa:	425b      	negs	r3, r3
 800b1fc:	454b      	cmp	r3, r9
 800b1fe:	dc01      	bgt.n	800b204 <_printf_float+0x2c4>
 800b200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b202:	e792      	b.n	800b12a <_printf_float+0x1ea>
 800b204:	2301      	movs	r3, #1
 800b206:	4652      	mov	r2, sl
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	f43f aef7 	beq.w	800b002 <_printf_float+0xc2>
 800b214:	f109 0901 	add.w	r9, r9, #1
 800b218:	e7ee      	b.n	800b1f8 <_printf_float+0x2b8>
 800b21a:	bf00      	nop
 800b21c:	7fefffff 	.word	0x7fefffff
 800b220:	0800f81c 	.word	0x0800f81c
 800b224:	0800f820 	.word	0x0800f820
 800b228:	0800f828 	.word	0x0800f828
 800b22c:	0800f824 	.word	0x0800f824
 800b230:	0800f82c 	.word	0x0800f82c
 800b234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b238:	429a      	cmp	r2, r3
 800b23a:	bfa8      	it	ge
 800b23c:	461a      	movge	r2, r3
 800b23e:	2a00      	cmp	r2, #0
 800b240:	4691      	mov	r9, r2
 800b242:	dc37      	bgt.n	800b2b4 <_printf_float+0x374>
 800b244:	f04f 0b00 	mov.w	fp, #0
 800b248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b24c:	f104 021a 	add.w	r2, r4, #26
 800b250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b252:	9305      	str	r3, [sp, #20]
 800b254:	eba3 0309 	sub.w	r3, r3, r9
 800b258:	455b      	cmp	r3, fp
 800b25a:	dc33      	bgt.n	800b2c4 <_printf_float+0x384>
 800b25c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b260:	429a      	cmp	r2, r3
 800b262:	db3b      	blt.n	800b2dc <_printf_float+0x39c>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	07da      	lsls	r2, r3, #31
 800b268:	d438      	bmi.n	800b2dc <_printf_float+0x39c>
 800b26a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b26c:	9b05      	ldr	r3, [sp, #20]
 800b26e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	eba2 0901 	sub.w	r9, r2, r1
 800b276:	4599      	cmp	r9, r3
 800b278:	bfa8      	it	ge
 800b27a:	4699      	movge	r9, r3
 800b27c:	f1b9 0f00 	cmp.w	r9, #0
 800b280:	dc35      	bgt.n	800b2ee <_printf_float+0x3ae>
 800b282:	f04f 0800 	mov.w	r8, #0
 800b286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b28a:	f104 0a1a 	add.w	sl, r4, #26
 800b28e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	eba3 0309 	sub.w	r3, r3, r9
 800b298:	4543      	cmp	r3, r8
 800b29a:	f77f af79 	ble.w	800b190 <_printf_float+0x250>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b8      	blx	r7
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	f43f aeaa 	beq.w	800b002 <_printf_float+0xc2>
 800b2ae:	f108 0801 	add.w	r8, r8, #1
 800b2b2:	e7ec      	b.n	800b28e <_printf_float+0x34e>
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	47b8      	blx	r7
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d1c0      	bne.n	800b244 <_printf_float+0x304>
 800b2c2:	e69e      	b.n	800b002 <_printf_float+0xc2>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	9205      	str	r2, [sp, #20]
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f43f ae97 	beq.w	800b002 <_printf_float+0xc2>
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	f10b 0b01 	add.w	fp, fp, #1
 800b2da:	e7b9      	b.n	800b250 <_printf_float+0x310>
 800b2dc:	ee18 3a10 	vmov	r3, s16
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b8      	blx	r7
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d1be      	bne.n	800b26a <_printf_float+0x32a>
 800b2ec:	e689      	b.n	800b002 <_printf_float+0xc2>
 800b2ee:	9a05      	ldr	r2, [sp, #20]
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	4442      	add	r2, r8
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d1c1      	bne.n	800b282 <_printf_float+0x342>
 800b2fe:	e680      	b.n	800b002 <_printf_float+0xc2>
 800b300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b302:	2a01      	cmp	r2, #1
 800b304:	dc01      	bgt.n	800b30a <_printf_float+0x3ca>
 800b306:	07db      	lsls	r3, r3, #31
 800b308:	d538      	bpl.n	800b37c <_printf_float+0x43c>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4642      	mov	r2, r8
 800b30e:	4631      	mov	r1, r6
 800b310:	4628      	mov	r0, r5
 800b312:	47b8      	blx	r7
 800b314:	3001      	adds	r0, #1
 800b316:	f43f ae74 	beq.w	800b002 <_printf_float+0xc2>
 800b31a:	ee18 3a10 	vmov	r3, s16
 800b31e:	4652      	mov	r2, sl
 800b320:	4631      	mov	r1, r6
 800b322:	4628      	mov	r0, r5
 800b324:	47b8      	blx	r7
 800b326:	3001      	adds	r0, #1
 800b328:	f43f ae6b 	beq.w	800b002 <_printf_float+0xc2>
 800b32c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b330:	2200      	movs	r2, #0
 800b332:	2300      	movs	r3, #0
 800b334:	f7f5 fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800b338:	b9d8      	cbnz	r0, 800b372 <_printf_float+0x432>
 800b33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33c:	f108 0201 	add.w	r2, r8, #1
 800b340:	3b01      	subs	r3, #1
 800b342:	4631      	mov	r1, r6
 800b344:	4628      	mov	r0, r5
 800b346:	47b8      	blx	r7
 800b348:	3001      	adds	r0, #1
 800b34a:	d10e      	bne.n	800b36a <_printf_float+0x42a>
 800b34c:	e659      	b.n	800b002 <_printf_float+0xc2>
 800b34e:	2301      	movs	r3, #1
 800b350:	4652      	mov	r2, sl
 800b352:	4631      	mov	r1, r6
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	f43f ae52 	beq.w	800b002 <_printf_float+0xc2>
 800b35e:	f108 0801 	add.w	r8, r8, #1
 800b362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b364:	3b01      	subs	r3, #1
 800b366:	4543      	cmp	r3, r8
 800b368:	dcf1      	bgt.n	800b34e <_printf_float+0x40e>
 800b36a:	464b      	mov	r3, r9
 800b36c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b370:	e6dc      	b.n	800b12c <_printf_float+0x1ec>
 800b372:	f04f 0800 	mov.w	r8, #0
 800b376:	f104 0a1a 	add.w	sl, r4, #26
 800b37a:	e7f2      	b.n	800b362 <_printf_float+0x422>
 800b37c:	2301      	movs	r3, #1
 800b37e:	4642      	mov	r2, r8
 800b380:	e7df      	b.n	800b342 <_printf_float+0x402>
 800b382:	2301      	movs	r3, #1
 800b384:	464a      	mov	r2, r9
 800b386:	4631      	mov	r1, r6
 800b388:	4628      	mov	r0, r5
 800b38a:	47b8      	blx	r7
 800b38c:	3001      	adds	r0, #1
 800b38e:	f43f ae38 	beq.w	800b002 <_printf_float+0xc2>
 800b392:	f108 0801 	add.w	r8, r8, #1
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b39a:	1a5b      	subs	r3, r3, r1
 800b39c:	4543      	cmp	r3, r8
 800b39e:	dcf0      	bgt.n	800b382 <_printf_float+0x442>
 800b3a0:	e6fa      	b.n	800b198 <_printf_float+0x258>
 800b3a2:	f04f 0800 	mov.w	r8, #0
 800b3a6:	f104 0919 	add.w	r9, r4, #25
 800b3aa:	e7f4      	b.n	800b396 <_printf_float+0x456>

0800b3ac <_printf_common>:
 800b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	4616      	mov	r6, r2
 800b3b2:	4699      	mov	r9, r3
 800b3b4:	688a      	ldr	r2, [r1, #8]
 800b3b6:	690b      	ldr	r3, [r1, #16]
 800b3b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	bfb8      	it	lt
 800b3c0:	4613      	movlt	r3, r2
 800b3c2:	6033      	str	r3, [r6, #0]
 800b3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	b10a      	cbz	r2, 800b3d2 <_printf_common+0x26>
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	6033      	str	r3, [r6, #0]
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	0699      	lsls	r1, r3, #26
 800b3d6:	bf42      	ittt	mi
 800b3d8:	6833      	ldrmi	r3, [r6, #0]
 800b3da:	3302      	addmi	r3, #2
 800b3dc:	6033      	strmi	r3, [r6, #0]
 800b3de:	6825      	ldr	r5, [r4, #0]
 800b3e0:	f015 0506 	ands.w	r5, r5, #6
 800b3e4:	d106      	bne.n	800b3f4 <_printf_common+0x48>
 800b3e6:	f104 0a19 	add.w	sl, r4, #25
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	6832      	ldr	r2, [r6, #0]
 800b3ee:	1a9b      	subs	r3, r3, r2
 800b3f0:	42ab      	cmp	r3, r5
 800b3f2:	dc26      	bgt.n	800b442 <_printf_common+0x96>
 800b3f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3f8:	1e13      	subs	r3, r2, #0
 800b3fa:	6822      	ldr	r2, [r4, #0]
 800b3fc:	bf18      	it	ne
 800b3fe:	2301      	movne	r3, #1
 800b400:	0692      	lsls	r2, r2, #26
 800b402:	d42b      	bmi.n	800b45c <_printf_common+0xb0>
 800b404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b408:	4649      	mov	r1, r9
 800b40a:	4638      	mov	r0, r7
 800b40c:	47c0      	blx	r8
 800b40e:	3001      	adds	r0, #1
 800b410:	d01e      	beq.n	800b450 <_printf_common+0xa4>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	68e5      	ldr	r5, [r4, #12]
 800b416:	6832      	ldr	r2, [r6, #0]
 800b418:	f003 0306 	and.w	r3, r3, #6
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	bf08      	it	eq
 800b420:	1aad      	subeq	r5, r5, r2
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	6922      	ldr	r2, [r4, #16]
 800b426:	bf0c      	ite	eq
 800b428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b42c:	2500      	movne	r5, #0
 800b42e:	4293      	cmp	r3, r2
 800b430:	bfc4      	itt	gt
 800b432:	1a9b      	subgt	r3, r3, r2
 800b434:	18ed      	addgt	r5, r5, r3
 800b436:	2600      	movs	r6, #0
 800b438:	341a      	adds	r4, #26
 800b43a:	42b5      	cmp	r5, r6
 800b43c:	d11a      	bne.n	800b474 <_printf_common+0xc8>
 800b43e:	2000      	movs	r0, #0
 800b440:	e008      	b.n	800b454 <_printf_common+0xa8>
 800b442:	2301      	movs	r3, #1
 800b444:	4652      	mov	r2, sl
 800b446:	4649      	mov	r1, r9
 800b448:	4638      	mov	r0, r7
 800b44a:	47c0      	blx	r8
 800b44c:	3001      	adds	r0, #1
 800b44e:	d103      	bne.n	800b458 <_printf_common+0xac>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b458:	3501      	adds	r5, #1
 800b45a:	e7c6      	b.n	800b3ea <_printf_common+0x3e>
 800b45c:	18e1      	adds	r1, r4, r3
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	2030      	movs	r0, #48	; 0x30
 800b462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b466:	4422      	add	r2, r4
 800b468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b46c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b470:	3302      	adds	r3, #2
 800b472:	e7c7      	b.n	800b404 <_printf_common+0x58>
 800b474:	2301      	movs	r3, #1
 800b476:	4622      	mov	r2, r4
 800b478:	4649      	mov	r1, r9
 800b47a:	4638      	mov	r0, r7
 800b47c:	47c0      	blx	r8
 800b47e:	3001      	adds	r0, #1
 800b480:	d0e6      	beq.n	800b450 <_printf_common+0xa4>
 800b482:	3601      	adds	r6, #1
 800b484:	e7d9      	b.n	800b43a <_printf_common+0x8e>
	...

0800b488 <_printf_i>:
 800b488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b48c:	460c      	mov	r4, r1
 800b48e:	4691      	mov	r9, r2
 800b490:	7e27      	ldrb	r7, [r4, #24]
 800b492:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b494:	2f78      	cmp	r7, #120	; 0x78
 800b496:	4680      	mov	r8, r0
 800b498:	469a      	mov	sl, r3
 800b49a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b49e:	d807      	bhi.n	800b4b0 <_printf_i+0x28>
 800b4a0:	2f62      	cmp	r7, #98	; 0x62
 800b4a2:	d80a      	bhi.n	800b4ba <_printf_i+0x32>
 800b4a4:	2f00      	cmp	r7, #0
 800b4a6:	f000 80d8 	beq.w	800b65a <_printf_i+0x1d2>
 800b4aa:	2f58      	cmp	r7, #88	; 0x58
 800b4ac:	f000 80a3 	beq.w	800b5f6 <_printf_i+0x16e>
 800b4b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4b8:	e03a      	b.n	800b530 <_printf_i+0xa8>
 800b4ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4be:	2b15      	cmp	r3, #21
 800b4c0:	d8f6      	bhi.n	800b4b0 <_printf_i+0x28>
 800b4c2:	a001      	add	r0, pc, #4	; (adr r0, 800b4c8 <_printf_i+0x40>)
 800b4c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4c8:	0800b521 	.word	0x0800b521
 800b4cc:	0800b535 	.word	0x0800b535
 800b4d0:	0800b4b1 	.word	0x0800b4b1
 800b4d4:	0800b4b1 	.word	0x0800b4b1
 800b4d8:	0800b4b1 	.word	0x0800b4b1
 800b4dc:	0800b4b1 	.word	0x0800b4b1
 800b4e0:	0800b535 	.word	0x0800b535
 800b4e4:	0800b4b1 	.word	0x0800b4b1
 800b4e8:	0800b4b1 	.word	0x0800b4b1
 800b4ec:	0800b4b1 	.word	0x0800b4b1
 800b4f0:	0800b4b1 	.word	0x0800b4b1
 800b4f4:	0800b641 	.word	0x0800b641
 800b4f8:	0800b565 	.word	0x0800b565
 800b4fc:	0800b623 	.word	0x0800b623
 800b500:	0800b4b1 	.word	0x0800b4b1
 800b504:	0800b4b1 	.word	0x0800b4b1
 800b508:	0800b663 	.word	0x0800b663
 800b50c:	0800b4b1 	.word	0x0800b4b1
 800b510:	0800b565 	.word	0x0800b565
 800b514:	0800b4b1 	.word	0x0800b4b1
 800b518:	0800b4b1 	.word	0x0800b4b1
 800b51c:	0800b62b 	.word	0x0800b62b
 800b520:	680b      	ldr	r3, [r1, #0]
 800b522:	1d1a      	adds	r2, r3, #4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	600a      	str	r2, [r1, #0]
 800b528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b52c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b530:	2301      	movs	r3, #1
 800b532:	e0a3      	b.n	800b67c <_printf_i+0x1f4>
 800b534:	6825      	ldr	r5, [r4, #0]
 800b536:	6808      	ldr	r0, [r1, #0]
 800b538:	062e      	lsls	r6, r5, #24
 800b53a:	f100 0304 	add.w	r3, r0, #4
 800b53e:	d50a      	bpl.n	800b556 <_printf_i+0xce>
 800b540:	6805      	ldr	r5, [r0, #0]
 800b542:	600b      	str	r3, [r1, #0]
 800b544:	2d00      	cmp	r5, #0
 800b546:	da03      	bge.n	800b550 <_printf_i+0xc8>
 800b548:	232d      	movs	r3, #45	; 0x2d
 800b54a:	426d      	negs	r5, r5
 800b54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b550:	485e      	ldr	r0, [pc, #376]	; (800b6cc <_printf_i+0x244>)
 800b552:	230a      	movs	r3, #10
 800b554:	e019      	b.n	800b58a <_printf_i+0x102>
 800b556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b55a:	6805      	ldr	r5, [r0, #0]
 800b55c:	600b      	str	r3, [r1, #0]
 800b55e:	bf18      	it	ne
 800b560:	b22d      	sxthne	r5, r5
 800b562:	e7ef      	b.n	800b544 <_printf_i+0xbc>
 800b564:	680b      	ldr	r3, [r1, #0]
 800b566:	6825      	ldr	r5, [r4, #0]
 800b568:	1d18      	adds	r0, r3, #4
 800b56a:	6008      	str	r0, [r1, #0]
 800b56c:	0628      	lsls	r0, r5, #24
 800b56e:	d501      	bpl.n	800b574 <_printf_i+0xec>
 800b570:	681d      	ldr	r5, [r3, #0]
 800b572:	e002      	b.n	800b57a <_printf_i+0xf2>
 800b574:	0669      	lsls	r1, r5, #25
 800b576:	d5fb      	bpl.n	800b570 <_printf_i+0xe8>
 800b578:	881d      	ldrh	r5, [r3, #0]
 800b57a:	4854      	ldr	r0, [pc, #336]	; (800b6cc <_printf_i+0x244>)
 800b57c:	2f6f      	cmp	r7, #111	; 0x6f
 800b57e:	bf0c      	ite	eq
 800b580:	2308      	moveq	r3, #8
 800b582:	230a      	movne	r3, #10
 800b584:	2100      	movs	r1, #0
 800b586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b58a:	6866      	ldr	r6, [r4, #4]
 800b58c:	60a6      	str	r6, [r4, #8]
 800b58e:	2e00      	cmp	r6, #0
 800b590:	bfa2      	ittt	ge
 800b592:	6821      	ldrge	r1, [r4, #0]
 800b594:	f021 0104 	bicge.w	r1, r1, #4
 800b598:	6021      	strge	r1, [r4, #0]
 800b59a:	b90d      	cbnz	r5, 800b5a0 <_printf_i+0x118>
 800b59c:	2e00      	cmp	r6, #0
 800b59e:	d04d      	beq.n	800b63c <_printf_i+0x1b4>
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b5aa:	5dc7      	ldrb	r7, [r0, r7]
 800b5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5b0:	462f      	mov	r7, r5
 800b5b2:	42bb      	cmp	r3, r7
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	d9f4      	bls.n	800b5a2 <_printf_i+0x11a>
 800b5b8:	2b08      	cmp	r3, #8
 800b5ba:	d10b      	bne.n	800b5d4 <_printf_i+0x14c>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	07df      	lsls	r7, r3, #31
 800b5c0:	d508      	bpl.n	800b5d4 <_printf_i+0x14c>
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	6861      	ldr	r1, [r4, #4]
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	bfde      	ittt	le
 800b5ca:	2330      	movle	r3, #48	; 0x30
 800b5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5d4:	1b92      	subs	r2, r2, r6
 800b5d6:	6122      	str	r2, [r4, #16]
 800b5d8:	f8cd a000 	str.w	sl, [sp]
 800b5dc:	464b      	mov	r3, r9
 800b5de:	aa03      	add	r2, sp, #12
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	f7ff fee2 	bl	800b3ac <_printf_common>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d14c      	bne.n	800b686 <_printf_i+0x1fe>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	b004      	add	sp, #16
 800b5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f6:	4835      	ldr	r0, [pc, #212]	; (800b6cc <_printf_i+0x244>)
 800b5f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	680e      	ldr	r6, [r1, #0]
 800b600:	061f      	lsls	r7, r3, #24
 800b602:	f856 5b04 	ldr.w	r5, [r6], #4
 800b606:	600e      	str	r6, [r1, #0]
 800b608:	d514      	bpl.n	800b634 <_printf_i+0x1ac>
 800b60a:	07d9      	lsls	r1, r3, #31
 800b60c:	bf44      	itt	mi
 800b60e:	f043 0320 	orrmi.w	r3, r3, #32
 800b612:	6023      	strmi	r3, [r4, #0]
 800b614:	b91d      	cbnz	r5, 800b61e <_printf_i+0x196>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	f023 0320 	bic.w	r3, r3, #32
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	2310      	movs	r3, #16
 800b620:	e7b0      	b.n	800b584 <_printf_i+0xfc>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	f043 0320 	orr.w	r3, r3, #32
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	2378      	movs	r3, #120	; 0x78
 800b62c:	4828      	ldr	r0, [pc, #160]	; (800b6d0 <_printf_i+0x248>)
 800b62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b632:	e7e3      	b.n	800b5fc <_printf_i+0x174>
 800b634:	065e      	lsls	r6, r3, #25
 800b636:	bf48      	it	mi
 800b638:	b2ad      	uxthmi	r5, r5
 800b63a:	e7e6      	b.n	800b60a <_printf_i+0x182>
 800b63c:	4616      	mov	r6, r2
 800b63e:	e7bb      	b.n	800b5b8 <_printf_i+0x130>
 800b640:	680b      	ldr	r3, [r1, #0]
 800b642:	6826      	ldr	r6, [r4, #0]
 800b644:	6960      	ldr	r0, [r4, #20]
 800b646:	1d1d      	adds	r5, r3, #4
 800b648:	600d      	str	r5, [r1, #0]
 800b64a:	0635      	lsls	r5, r6, #24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	d501      	bpl.n	800b654 <_printf_i+0x1cc>
 800b650:	6018      	str	r0, [r3, #0]
 800b652:	e002      	b.n	800b65a <_printf_i+0x1d2>
 800b654:	0671      	lsls	r1, r6, #25
 800b656:	d5fb      	bpl.n	800b650 <_printf_i+0x1c8>
 800b658:	8018      	strh	r0, [r3, #0]
 800b65a:	2300      	movs	r3, #0
 800b65c:	6123      	str	r3, [r4, #16]
 800b65e:	4616      	mov	r6, r2
 800b660:	e7ba      	b.n	800b5d8 <_printf_i+0x150>
 800b662:	680b      	ldr	r3, [r1, #0]
 800b664:	1d1a      	adds	r2, r3, #4
 800b666:	600a      	str	r2, [r1, #0]
 800b668:	681e      	ldr	r6, [r3, #0]
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	2100      	movs	r1, #0
 800b66e:	4630      	mov	r0, r6
 800b670:	f7f4 fdc6 	bl	8000200 <memchr>
 800b674:	b108      	cbz	r0, 800b67a <_printf_i+0x1f2>
 800b676:	1b80      	subs	r0, r0, r6
 800b678:	6060      	str	r0, [r4, #4]
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	2300      	movs	r3, #0
 800b680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b684:	e7a8      	b.n	800b5d8 <_printf_i+0x150>
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	4632      	mov	r2, r6
 800b68a:	4649      	mov	r1, r9
 800b68c:	4640      	mov	r0, r8
 800b68e:	47d0      	blx	sl
 800b690:	3001      	adds	r0, #1
 800b692:	d0ab      	beq.n	800b5ec <_printf_i+0x164>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	079b      	lsls	r3, r3, #30
 800b698:	d413      	bmi.n	800b6c2 <_printf_i+0x23a>
 800b69a:	68e0      	ldr	r0, [r4, #12]
 800b69c:	9b03      	ldr	r3, [sp, #12]
 800b69e:	4298      	cmp	r0, r3
 800b6a0:	bfb8      	it	lt
 800b6a2:	4618      	movlt	r0, r3
 800b6a4:	e7a4      	b.n	800b5f0 <_printf_i+0x168>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	47d0      	blx	sl
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d09b      	beq.n	800b5ec <_printf_i+0x164>
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	68e3      	ldr	r3, [r4, #12]
 800b6b8:	9903      	ldr	r1, [sp, #12]
 800b6ba:	1a5b      	subs	r3, r3, r1
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	dcf2      	bgt.n	800b6a6 <_printf_i+0x21e>
 800b6c0:	e7eb      	b.n	800b69a <_printf_i+0x212>
 800b6c2:	2500      	movs	r5, #0
 800b6c4:	f104 0619 	add.w	r6, r4, #25
 800b6c8:	e7f5      	b.n	800b6b6 <_printf_i+0x22e>
 800b6ca:	bf00      	nop
 800b6cc:	0800f82e 	.word	0x0800f82e
 800b6d0:	0800f83f 	.word	0x0800f83f

0800b6d4 <_scanf_float>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	b087      	sub	sp, #28
 800b6da:	4617      	mov	r7, r2
 800b6dc:	9303      	str	r3, [sp, #12]
 800b6de:	688b      	ldr	r3, [r1, #8]
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b6e6:	bf83      	ittte	hi
 800b6e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6ec:	195b      	addhi	r3, r3, r5
 800b6ee:	9302      	strhi	r3, [sp, #8]
 800b6f0:	2300      	movls	r3, #0
 800b6f2:	bf86      	itte	hi
 800b6f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6f8:	608b      	strhi	r3, [r1, #8]
 800b6fa:	9302      	strls	r3, [sp, #8]
 800b6fc:	680b      	ldr	r3, [r1, #0]
 800b6fe:	468b      	mov	fp, r1
 800b700:	2500      	movs	r5, #0
 800b702:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b706:	f84b 3b1c 	str.w	r3, [fp], #28
 800b70a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b70e:	4680      	mov	r8, r0
 800b710:	460c      	mov	r4, r1
 800b712:	465e      	mov	r6, fp
 800b714:	46aa      	mov	sl, r5
 800b716:	46a9      	mov	r9, r5
 800b718:	9501      	str	r5, [sp, #4]
 800b71a:	68a2      	ldr	r2, [r4, #8]
 800b71c:	b152      	cbz	r2, 800b734 <_scanf_float+0x60>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b4e      	cmp	r3, #78	; 0x4e
 800b724:	d864      	bhi.n	800b7f0 <_scanf_float+0x11c>
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d83c      	bhi.n	800b7a4 <_scanf_float+0xd0>
 800b72a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b72e:	b2c8      	uxtb	r0, r1
 800b730:	280e      	cmp	r0, #14
 800b732:	d93a      	bls.n	800b7aa <_scanf_float+0xd6>
 800b734:	f1b9 0f00 	cmp.w	r9, #0
 800b738:	d003      	beq.n	800b742 <_scanf_float+0x6e>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b746:	f1ba 0f01 	cmp.w	sl, #1
 800b74a:	f200 8113 	bhi.w	800b974 <_scanf_float+0x2a0>
 800b74e:	455e      	cmp	r6, fp
 800b750:	f200 8105 	bhi.w	800b95e <_scanf_float+0x28a>
 800b754:	2501      	movs	r5, #1
 800b756:	4628      	mov	r0, r5
 800b758:	b007      	add	sp, #28
 800b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b762:	2a0d      	cmp	r2, #13
 800b764:	d8e6      	bhi.n	800b734 <_scanf_float+0x60>
 800b766:	a101      	add	r1, pc, #4	; (adr r1, 800b76c <_scanf_float+0x98>)
 800b768:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b76c:	0800b8ab 	.word	0x0800b8ab
 800b770:	0800b735 	.word	0x0800b735
 800b774:	0800b735 	.word	0x0800b735
 800b778:	0800b735 	.word	0x0800b735
 800b77c:	0800b90b 	.word	0x0800b90b
 800b780:	0800b8e3 	.word	0x0800b8e3
 800b784:	0800b735 	.word	0x0800b735
 800b788:	0800b735 	.word	0x0800b735
 800b78c:	0800b8b9 	.word	0x0800b8b9
 800b790:	0800b735 	.word	0x0800b735
 800b794:	0800b735 	.word	0x0800b735
 800b798:	0800b735 	.word	0x0800b735
 800b79c:	0800b735 	.word	0x0800b735
 800b7a0:	0800b871 	.word	0x0800b871
 800b7a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b7a8:	e7db      	b.n	800b762 <_scanf_float+0x8e>
 800b7aa:	290e      	cmp	r1, #14
 800b7ac:	d8c2      	bhi.n	800b734 <_scanf_float+0x60>
 800b7ae:	a001      	add	r0, pc, #4	; (adr r0, 800b7b4 <_scanf_float+0xe0>)
 800b7b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7b4:	0800b863 	.word	0x0800b863
 800b7b8:	0800b735 	.word	0x0800b735
 800b7bc:	0800b863 	.word	0x0800b863
 800b7c0:	0800b8f7 	.word	0x0800b8f7
 800b7c4:	0800b735 	.word	0x0800b735
 800b7c8:	0800b811 	.word	0x0800b811
 800b7cc:	0800b84d 	.word	0x0800b84d
 800b7d0:	0800b84d 	.word	0x0800b84d
 800b7d4:	0800b84d 	.word	0x0800b84d
 800b7d8:	0800b84d 	.word	0x0800b84d
 800b7dc:	0800b84d 	.word	0x0800b84d
 800b7e0:	0800b84d 	.word	0x0800b84d
 800b7e4:	0800b84d 	.word	0x0800b84d
 800b7e8:	0800b84d 	.word	0x0800b84d
 800b7ec:	0800b84d 	.word	0x0800b84d
 800b7f0:	2b6e      	cmp	r3, #110	; 0x6e
 800b7f2:	d809      	bhi.n	800b808 <_scanf_float+0x134>
 800b7f4:	2b60      	cmp	r3, #96	; 0x60
 800b7f6:	d8b2      	bhi.n	800b75e <_scanf_float+0x8a>
 800b7f8:	2b54      	cmp	r3, #84	; 0x54
 800b7fa:	d077      	beq.n	800b8ec <_scanf_float+0x218>
 800b7fc:	2b59      	cmp	r3, #89	; 0x59
 800b7fe:	d199      	bne.n	800b734 <_scanf_float+0x60>
 800b800:	2d07      	cmp	r5, #7
 800b802:	d197      	bne.n	800b734 <_scanf_float+0x60>
 800b804:	2508      	movs	r5, #8
 800b806:	e029      	b.n	800b85c <_scanf_float+0x188>
 800b808:	2b74      	cmp	r3, #116	; 0x74
 800b80a:	d06f      	beq.n	800b8ec <_scanf_float+0x218>
 800b80c:	2b79      	cmp	r3, #121	; 0x79
 800b80e:	e7f6      	b.n	800b7fe <_scanf_float+0x12a>
 800b810:	6821      	ldr	r1, [r4, #0]
 800b812:	05c8      	lsls	r0, r1, #23
 800b814:	d51a      	bpl.n	800b84c <_scanf_float+0x178>
 800b816:	9b02      	ldr	r3, [sp, #8]
 800b818:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b81c:	6021      	str	r1, [r4, #0]
 800b81e:	f109 0901 	add.w	r9, r9, #1
 800b822:	b11b      	cbz	r3, 800b82c <_scanf_float+0x158>
 800b824:	3b01      	subs	r3, #1
 800b826:	3201      	adds	r2, #1
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	60a2      	str	r2, [r4, #8]
 800b82c:	68a3      	ldr	r3, [r4, #8]
 800b82e:	3b01      	subs	r3, #1
 800b830:	60a3      	str	r3, [r4, #8]
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	3301      	adds	r3, #1
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	607b      	str	r3, [r7, #4]
 800b840:	f340 8084 	ble.w	800b94c <_scanf_float+0x278>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	603b      	str	r3, [r7, #0]
 800b84a:	e766      	b.n	800b71a <_scanf_float+0x46>
 800b84c:	eb1a 0f05 	cmn.w	sl, r5
 800b850:	f47f af70 	bne.w	800b734 <_scanf_float+0x60>
 800b854:	6822      	ldr	r2, [r4, #0]
 800b856:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	f806 3b01 	strb.w	r3, [r6], #1
 800b860:	e7e4      	b.n	800b82c <_scanf_float+0x158>
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	0610      	lsls	r0, r2, #24
 800b866:	f57f af65 	bpl.w	800b734 <_scanf_float+0x60>
 800b86a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b86e:	e7f4      	b.n	800b85a <_scanf_float+0x186>
 800b870:	f1ba 0f00 	cmp.w	sl, #0
 800b874:	d10e      	bne.n	800b894 <_scanf_float+0x1c0>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	d10e      	bne.n	800b89a <_scanf_float+0x1c6>
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b882:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b886:	d108      	bne.n	800b89a <_scanf_float+0x1c6>
 800b888:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b88c:	6022      	str	r2, [r4, #0]
 800b88e:	f04f 0a01 	mov.w	sl, #1
 800b892:	e7e3      	b.n	800b85c <_scanf_float+0x188>
 800b894:	f1ba 0f02 	cmp.w	sl, #2
 800b898:	d055      	beq.n	800b946 <_scanf_float+0x272>
 800b89a:	2d01      	cmp	r5, #1
 800b89c:	d002      	beq.n	800b8a4 <_scanf_float+0x1d0>
 800b89e:	2d04      	cmp	r5, #4
 800b8a0:	f47f af48 	bne.w	800b734 <_scanf_float+0x60>
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	b2ed      	uxtb	r5, r5
 800b8a8:	e7d8      	b.n	800b85c <_scanf_float+0x188>
 800b8aa:	f1ba 0f01 	cmp.w	sl, #1
 800b8ae:	f47f af41 	bne.w	800b734 <_scanf_float+0x60>
 800b8b2:	f04f 0a02 	mov.w	sl, #2
 800b8b6:	e7d1      	b.n	800b85c <_scanf_float+0x188>
 800b8b8:	b97d      	cbnz	r5, 800b8da <_scanf_float+0x206>
 800b8ba:	f1b9 0f00 	cmp.w	r9, #0
 800b8be:	f47f af3c 	bne.w	800b73a <_scanf_float+0x66>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8cc:	f47f af39 	bne.w	800b742 <_scanf_float+0x6e>
 800b8d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8d4:	6022      	str	r2, [r4, #0]
 800b8d6:	2501      	movs	r5, #1
 800b8d8:	e7c0      	b.n	800b85c <_scanf_float+0x188>
 800b8da:	2d03      	cmp	r5, #3
 800b8dc:	d0e2      	beq.n	800b8a4 <_scanf_float+0x1d0>
 800b8de:	2d05      	cmp	r5, #5
 800b8e0:	e7de      	b.n	800b8a0 <_scanf_float+0x1cc>
 800b8e2:	2d02      	cmp	r5, #2
 800b8e4:	f47f af26 	bne.w	800b734 <_scanf_float+0x60>
 800b8e8:	2503      	movs	r5, #3
 800b8ea:	e7b7      	b.n	800b85c <_scanf_float+0x188>
 800b8ec:	2d06      	cmp	r5, #6
 800b8ee:	f47f af21 	bne.w	800b734 <_scanf_float+0x60>
 800b8f2:	2507      	movs	r5, #7
 800b8f4:	e7b2      	b.n	800b85c <_scanf_float+0x188>
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	0591      	lsls	r1, r2, #22
 800b8fa:	f57f af1b 	bpl.w	800b734 <_scanf_float+0x60>
 800b8fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b902:	6022      	str	r2, [r4, #0]
 800b904:	f8cd 9004 	str.w	r9, [sp, #4]
 800b908:	e7a8      	b.n	800b85c <_scanf_float+0x188>
 800b90a:	6822      	ldr	r2, [r4, #0]
 800b90c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b910:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b914:	d006      	beq.n	800b924 <_scanf_float+0x250>
 800b916:	0550      	lsls	r0, r2, #21
 800b918:	f57f af0c 	bpl.w	800b734 <_scanf_float+0x60>
 800b91c:	f1b9 0f00 	cmp.w	r9, #0
 800b920:	f43f af0f 	beq.w	800b742 <_scanf_float+0x6e>
 800b924:	0591      	lsls	r1, r2, #22
 800b926:	bf58      	it	pl
 800b928:	9901      	ldrpl	r1, [sp, #4]
 800b92a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b92e:	bf58      	it	pl
 800b930:	eba9 0101 	subpl.w	r1, r9, r1
 800b934:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b938:	bf58      	it	pl
 800b93a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	f04f 0900 	mov.w	r9, #0
 800b944:	e78a      	b.n	800b85c <_scanf_float+0x188>
 800b946:	f04f 0a03 	mov.w	sl, #3
 800b94a:	e787      	b.n	800b85c <_scanf_float+0x188>
 800b94c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b950:	4639      	mov	r1, r7
 800b952:	4640      	mov	r0, r8
 800b954:	4798      	blx	r3
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f aedf 	beq.w	800b71a <_scanf_float+0x46>
 800b95c:	e6ea      	b.n	800b734 <_scanf_float+0x60>
 800b95e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b966:	463a      	mov	r2, r7
 800b968:	4640      	mov	r0, r8
 800b96a:	4798      	blx	r3
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	3b01      	subs	r3, #1
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	e6ec      	b.n	800b74e <_scanf_float+0x7a>
 800b974:	1e6b      	subs	r3, r5, #1
 800b976:	2b06      	cmp	r3, #6
 800b978:	d825      	bhi.n	800b9c6 <_scanf_float+0x2f2>
 800b97a:	2d02      	cmp	r5, #2
 800b97c:	d836      	bhi.n	800b9ec <_scanf_float+0x318>
 800b97e:	455e      	cmp	r6, fp
 800b980:	f67f aee8 	bls.w	800b754 <_scanf_float+0x80>
 800b984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b988:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b98c:	463a      	mov	r2, r7
 800b98e:	4640      	mov	r0, r8
 800b990:	4798      	blx	r3
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	3b01      	subs	r3, #1
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	e7f1      	b.n	800b97e <_scanf_float+0x2aa>
 800b99a:	9802      	ldr	r0, [sp, #8]
 800b99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b9a4:	9002      	str	r0, [sp, #8]
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4798      	blx	r3
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9b6:	fa5f fa8a 	uxtb.w	sl, sl
 800b9ba:	f1ba 0f02 	cmp.w	sl, #2
 800b9be:	d1ec      	bne.n	800b99a <_scanf_float+0x2c6>
 800b9c0:	3d03      	subs	r5, #3
 800b9c2:	b2ed      	uxtb	r5, r5
 800b9c4:	1b76      	subs	r6, r6, r5
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	05da      	lsls	r2, r3, #23
 800b9ca:	d52f      	bpl.n	800ba2c <_scanf_float+0x358>
 800b9cc:	055b      	lsls	r3, r3, #21
 800b9ce:	d510      	bpl.n	800b9f2 <_scanf_float+0x31e>
 800b9d0:	455e      	cmp	r6, fp
 800b9d2:	f67f aebf 	bls.w	800b754 <_scanf_float+0x80>
 800b9d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9de:	463a      	mov	r2, r7
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	4798      	blx	r3
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	e7f1      	b.n	800b9d0 <_scanf_float+0x2fc>
 800b9ec:	46aa      	mov	sl, r5
 800b9ee:	9602      	str	r6, [sp, #8]
 800b9f0:	e7df      	b.n	800b9b2 <_scanf_float+0x2de>
 800b9f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	2965      	cmp	r1, #101	; 0x65
 800b9fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba02:	6123      	str	r3, [r4, #16]
 800ba04:	d00c      	beq.n	800ba20 <_scanf_float+0x34c>
 800ba06:	2945      	cmp	r1, #69	; 0x45
 800ba08:	d00a      	beq.n	800ba20 <_scanf_float+0x34c>
 800ba0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba0e:	463a      	mov	r2, r7
 800ba10:	4640      	mov	r0, r8
 800ba12:	4798      	blx	r3
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	1eb5      	subs	r5, r6, #2
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba24:	463a      	mov	r2, r7
 800ba26:	4640      	mov	r0, r8
 800ba28:	4798      	blx	r3
 800ba2a:	462e      	mov	r6, r5
 800ba2c:	6825      	ldr	r5, [r4, #0]
 800ba2e:	f015 0510 	ands.w	r5, r5, #16
 800ba32:	d158      	bne.n	800bae6 <_scanf_float+0x412>
 800ba34:	7035      	strb	r5, [r6, #0]
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba40:	d11c      	bne.n	800ba7c <_scanf_float+0x3a8>
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	454b      	cmp	r3, r9
 800ba46:	eba3 0209 	sub.w	r2, r3, r9
 800ba4a:	d124      	bne.n	800ba96 <_scanf_float+0x3c2>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4659      	mov	r1, fp
 800ba50:	4640      	mov	r0, r8
 800ba52:	f000 ff47 	bl	800c8e4 <_strtod_r>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	6821      	ldr	r1, [r4, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f011 0f02 	tst.w	r1, #2
 800ba60:	ec57 6b10 	vmov	r6, r7, d0
 800ba64:	f103 0204 	add.w	r2, r3, #4
 800ba68:	d020      	beq.n	800baac <_scanf_float+0x3d8>
 800ba6a:	9903      	ldr	r1, [sp, #12]
 800ba6c:	600a      	str	r2, [r1, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	e9c3 6700 	strd	r6, r7, [r3]
 800ba74:	68e3      	ldr	r3, [r4, #12]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60e3      	str	r3, [r4, #12]
 800ba7a:	e66c      	b.n	800b756 <_scanf_float+0x82>
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0e4      	beq.n	800ba4c <_scanf_float+0x378>
 800ba82:	9905      	ldr	r1, [sp, #20]
 800ba84:	230a      	movs	r3, #10
 800ba86:	462a      	mov	r2, r5
 800ba88:	3101      	adds	r1, #1
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f000 ffb4 	bl	800c9f8 <_strtol_r>
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	9e05      	ldr	r6, [sp, #20]
 800ba94:	1ac2      	subs	r2, r0, r3
 800ba96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ba9a:	429e      	cmp	r6, r3
 800ba9c:	bf28      	it	cs
 800ba9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800baa2:	4912      	ldr	r1, [pc, #72]	; (800baec <_scanf_float+0x418>)
 800baa4:	4630      	mov	r0, r6
 800baa6:	f000 f87f 	bl	800bba8 <siprintf>
 800baaa:	e7cf      	b.n	800ba4c <_scanf_float+0x378>
 800baac:	f011 0f04 	tst.w	r1, #4
 800bab0:	9903      	ldr	r1, [sp, #12]
 800bab2:	600a      	str	r2, [r1, #0]
 800bab4:	d1db      	bne.n	800ba6e <_scanf_float+0x39a>
 800bab6:	f8d3 8000 	ldr.w	r8, [r3]
 800baba:	ee10 2a10 	vmov	r2, s0
 800babe:	ee10 0a10 	vmov	r0, s0
 800bac2:	463b      	mov	r3, r7
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f5 f841 	bl	8000b4c <__aeabi_dcmpun>
 800baca:	b128      	cbz	r0, 800bad8 <_scanf_float+0x404>
 800bacc:	4808      	ldr	r0, [pc, #32]	; (800baf0 <_scanf_float+0x41c>)
 800bace:	f000 f821 	bl	800bb14 <nanf>
 800bad2:	ed88 0a00 	vstr	s0, [r8]
 800bad6:	e7cd      	b.n	800ba74 <_scanf_float+0x3a0>
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	f7f5 f894 	bl	8000c08 <__aeabi_d2f>
 800bae0:	f8c8 0000 	str.w	r0, [r8]
 800bae4:	e7c6      	b.n	800ba74 <_scanf_float+0x3a0>
 800bae6:	2500      	movs	r5, #0
 800bae8:	e635      	b.n	800b756 <_scanf_float+0x82>
 800baea:	bf00      	nop
 800baec:	0800f850 	.word	0x0800f850
 800baf0:	0800f8e3 	.word	0x0800f8e3

0800baf4 <_sbrk_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d06      	ldr	r5, [pc, #24]	; (800bb10 <_sbrk_r+0x1c>)
 800baf8:	2300      	movs	r3, #0
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	602b      	str	r3, [r5, #0]
 800bb00:	f7f6 ff5e 	bl	80029c0 <_sbrk>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_sbrk_r+0x1a>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_sbrk_r+0x1a>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20001180 	.word	0x20001180

0800bb14 <nanf>:
 800bb14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb1c <nanf+0x8>
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	7fc00000 	.word	0x7fc00000

0800bb20 <_raise_r>:
 800bb20:	291f      	cmp	r1, #31
 800bb22:	b538      	push	{r3, r4, r5, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	d904      	bls.n	800bb34 <_raise_r+0x14>
 800bb2a:	2316      	movs	r3, #22
 800bb2c:	6003      	str	r3, [r0, #0]
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb36:	b112      	cbz	r2, 800bb3e <_raise_r+0x1e>
 800bb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb3c:	b94b      	cbnz	r3, 800bb52 <_raise_r+0x32>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 f830 	bl	800bba4 <_getpid_r>
 800bb44:	462a      	mov	r2, r5
 800bb46:	4601      	mov	r1, r0
 800bb48:	4620      	mov	r0, r4
 800bb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb4e:	f000 b817 	b.w	800bb80 <_kill_r>
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d00a      	beq.n	800bb6c <_raise_r+0x4c>
 800bb56:	1c59      	adds	r1, r3, #1
 800bb58:	d103      	bne.n	800bb62 <_raise_r+0x42>
 800bb5a:	2316      	movs	r3, #22
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	2001      	movs	r0, #1
 800bb60:	e7e7      	b.n	800bb32 <_raise_r+0x12>
 800bb62:	2400      	movs	r4, #0
 800bb64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb68:	4628      	mov	r0, r5
 800bb6a:	4798      	blx	r3
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e7e0      	b.n	800bb32 <_raise_r+0x12>

0800bb70 <raise>:
 800bb70:	4b02      	ldr	r3, [pc, #8]	; (800bb7c <raise+0xc>)
 800bb72:	4601      	mov	r1, r0
 800bb74:	6818      	ldr	r0, [r3, #0]
 800bb76:	f7ff bfd3 	b.w	800bb20 <_raise_r>
 800bb7a:	bf00      	nop
 800bb7c:	20000034 	.word	0x20000034

0800bb80 <_kill_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d07      	ldr	r5, [pc, #28]	; (800bba0 <_kill_r+0x20>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	602b      	str	r3, [r5, #0]
 800bb8e:	f7f6 fe8f 	bl	80028b0 <_kill>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d102      	bne.n	800bb9c <_kill_r+0x1c>
 800bb96:	682b      	ldr	r3, [r5, #0]
 800bb98:	b103      	cbz	r3, 800bb9c <_kill_r+0x1c>
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	20001180 	.word	0x20001180

0800bba4 <_getpid_r>:
 800bba4:	f7f6 be7c 	b.w	80028a0 <_getpid>

0800bba8 <siprintf>:
 800bba8:	b40e      	push	{r1, r2, r3}
 800bbaa:	b500      	push	{lr}
 800bbac:	b09c      	sub	sp, #112	; 0x70
 800bbae:	ab1d      	add	r3, sp, #116	; 0x74
 800bbb0:	9002      	str	r0, [sp, #8]
 800bbb2:	9006      	str	r0, [sp, #24]
 800bbb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbb8:	4809      	ldr	r0, [pc, #36]	; (800bbe0 <siprintf+0x38>)
 800bbba:	9107      	str	r1, [sp, #28]
 800bbbc:	9104      	str	r1, [sp, #16]
 800bbbe:	4909      	ldr	r1, [pc, #36]	; (800bbe4 <siprintf+0x3c>)
 800bbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc4:	9105      	str	r1, [sp, #20]
 800bbc6:	6800      	ldr	r0, [r0, #0]
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	a902      	add	r1, sp, #8
 800bbcc:	f002 ff94 	bl	800eaf8 <_svfiprintf_r>
 800bbd0:	9b02      	ldr	r3, [sp, #8]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	b01c      	add	sp, #112	; 0x70
 800bbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbdc:	b003      	add	sp, #12
 800bbde:	4770      	bx	lr
 800bbe0:	20000034 	.word	0x20000034
 800bbe4:	ffff0208 	.word	0xffff0208

0800bbe8 <__sread>:
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	460c      	mov	r4, r1
 800bbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf0:	f003 f9dc 	bl	800efac <_read_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	bfab      	itete	ge
 800bbf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbfa:	89a3      	ldrhlt	r3, [r4, #12]
 800bbfc:	181b      	addge	r3, r3, r0
 800bbfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc02:	bfac      	ite	ge
 800bc04:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc06:	81a3      	strhlt	r3, [r4, #12]
 800bc08:	bd10      	pop	{r4, pc}

0800bc0a <__swrite>:
 800bc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0e:	461f      	mov	r7, r3
 800bc10:	898b      	ldrh	r3, [r1, #12]
 800bc12:	05db      	lsls	r3, r3, #23
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	4616      	mov	r6, r2
 800bc1a:	d505      	bpl.n	800bc28 <__swrite+0x1e>
 800bc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc20:	2302      	movs	r3, #2
 800bc22:	2200      	movs	r2, #0
 800bc24:	f002 f9ec 	bl	800e000 <_lseek_r>
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	4632      	mov	r2, r6
 800bc36:	463b      	mov	r3, r7
 800bc38:	4628      	mov	r0, r5
 800bc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3e:	f000 bedd 	b.w	800c9fc <_write_r>

0800bc42 <__sseek>:
 800bc42:	b510      	push	{r4, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4a:	f002 f9d9 	bl	800e000 <_lseek_r>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	bf15      	itete	ne
 800bc54:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc5e:	81a3      	strheq	r3, [r4, #12]
 800bc60:	bf18      	it	ne
 800bc62:	81a3      	strhne	r3, [r4, #12]
 800bc64:	bd10      	pop	{r4, pc}

0800bc66 <__sclose>:
 800bc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6a:	f000 bef7 	b.w	800ca5c <_close_r>

0800bc6e <strncmp>:
 800bc6e:	b510      	push	{r4, lr}
 800bc70:	b16a      	cbz	r2, 800bc8e <strncmp+0x20>
 800bc72:	3901      	subs	r1, #1
 800bc74:	1884      	adds	r4, r0, r2
 800bc76:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d103      	bne.n	800bc8a <strncmp+0x1c>
 800bc82:	42a0      	cmp	r0, r4
 800bc84:	d001      	beq.n	800bc8a <strncmp+0x1c>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1f5      	bne.n	800bc76 <strncmp+0x8>
 800bc8a:	1a98      	subs	r0, r3, r2
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	4610      	mov	r0, r2
 800bc90:	e7fc      	b.n	800bc8c <strncmp+0x1e>

0800bc92 <sulp>:
 800bc92:	b570      	push	{r4, r5, r6, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	ec45 4b10 	vmov	d0, r4, r5
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	f002 fd4b 	bl	800e738 <__ulp>
 800bca2:	ec51 0b10 	vmov	r0, r1, d0
 800bca6:	b17e      	cbz	r6, 800bcc8 <sulp+0x36>
 800bca8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dd09      	ble.n	800bcc8 <sulp+0x36>
 800bcb4:	051b      	lsls	r3, r3, #20
 800bcb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bcba:	2400      	movs	r4, #0
 800bcbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	f7f4 fca8 	bl	8000618 <__aeabi_dmul>
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	0000      	movs	r0, r0
 800bccc:	0000      	movs	r0, r0
	...

0800bcd0 <_strtod_l>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	b0a3      	sub	sp, #140	; 0x8c
 800bcd6:	461f      	mov	r7, r3
 800bcd8:	2300      	movs	r3, #0
 800bcda:	931e      	str	r3, [sp, #120]	; 0x78
 800bcdc:	4ba4      	ldr	r3, [pc, #656]	; (800bf70 <_strtod_l+0x2a0>)
 800bcde:	9219      	str	r2, [sp, #100]	; 0x64
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	4604      	mov	r4, r0
 800bce6:	4618      	mov	r0, r3
 800bce8:	4688      	mov	r8, r1
 800bcea:	f7f4 fa81 	bl	80001f0 <strlen>
 800bcee:	f04f 0a00 	mov.w	sl, #0
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	f04f 0b00 	mov.w	fp, #0
 800bcf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bcfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcfe:	781a      	ldrb	r2, [r3, #0]
 800bd00:	2a2b      	cmp	r2, #43	; 0x2b
 800bd02:	d04c      	beq.n	800bd9e <_strtod_l+0xce>
 800bd04:	d839      	bhi.n	800bd7a <_strtod_l+0xaa>
 800bd06:	2a0d      	cmp	r2, #13
 800bd08:	d832      	bhi.n	800bd70 <_strtod_l+0xa0>
 800bd0a:	2a08      	cmp	r2, #8
 800bd0c:	d832      	bhi.n	800bd74 <_strtod_l+0xa4>
 800bd0e:	2a00      	cmp	r2, #0
 800bd10:	d03c      	beq.n	800bd8c <_strtod_l+0xbc>
 800bd12:	2300      	movs	r3, #0
 800bd14:	930e      	str	r3, [sp, #56]	; 0x38
 800bd16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bd18:	7833      	ldrb	r3, [r6, #0]
 800bd1a:	2b30      	cmp	r3, #48	; 0x30
 800bd1c:	f040 80b4 	bne.w	800be88 <_strtod_l+0x1b8>
 800bd20:	7873      	ldrb	r3, [r6, #1]
 800bd22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd26:	2b58      	cmp	r3, #88	; 0x58
 800bd28:	d16c      	bne.n	800be04 <_strtod_l+0x134>
 800bd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	ab1e      	add	r3, sp, #120	; 0x78
 800bd30:	9702      	str	r7, [sp, #8]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	4a8f      	ldr	r2, [pc, #572]	; (800bf74 <_strtod_l+0x2a4>)
 800bd36:	ab1f      	add	r3, sp, #124	; 0x7c
 800bd38:	a91d      	add	r1, sp, #116	; 0x74
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f001 fe54 	bl	800d9e8 <__gethex>
 800bd40:	f010 0707 	ands.w	r7, r0, #7
 800bd44:	4605      	mov	r5, r0
 800bd46:	d005      	beq.n	800bd54 <_strtod_l+0x84>
 800bd48:	2f06      	cmp	r7, #6
 800bd4a:	d12a      	bne.n	800bda2 <_strtod_l+0xd2>
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	2300      	movs	r3, #0
 800bd50:	961d      	str	r6, [sp, #116]	; 0x74
 800bd52:	930e      	str	r3, [sp, #56]	; 0x38
 800bd54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f040 8596 	bne.w	800c888 <_strtod_l+0xbb8>
 800bd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd5e:	b1db      	cbz	r3, 800bd98 <_strtod_l+0xc8>
 800bd60:	4652      	mov	r2, sl
 800bd62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd66:	ec43 2b10 	vmov	d0, r2, r3
 800bd6a:	b023      	add	sp, #140	; 0x8c
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	2a20      	cmp	r2, #32
 800bd72:	d1ce      	bne.n	800bd12 <_strtod_l+0x42>
 800bd74:	3301      	adds	r3, #1
 800bd76:	931d      	str	r3, [sp, #116]	; 0x74
 800bd78:	e7c0      	b.n	800bcfc <_strtod_l+0x2c>
 800bd7a:	2a2d      	cmp	r2, #45	; 0x2d
 800bd7c:	d1c9      	bne.n	800bd12 <_strtod_l+0x42>
 800bd7e:	2201      	movs	r2, #1
 800bd80:	920e      	str	r2, [sp, #56]	; 0x38
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	921d      	str	r2, [sp, #116]	; 0x74
 800bd86:	785b      	ldrb	r3, [r3, #1]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1c4      	bne.n	800bd16 <_strtod_l+0x46>
 800bd8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f040 8576 	bne.w	800c884 <_strtod_l+0xbb4>
 800bd98:	4652      	mov	r2, sl
 800bd9a:	465b      	mov	r3, fp
 800bd9c:	e7e3      	b.n	800bd66 <_strtod_l+0x96>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	e7ee      	b.n	800bd80 <_strtod_l+0xb0>
 800bda2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bda4:	b13a      	cbz	r2, 800bdb6 <_strtod_l+0xe6>
 800bda6:	2135      	movs	r1, #53	; 0x35
 800bda8:	a820      	add	r0, sp, #128	; 0x80
 800bdaa:	f002 fdd0 	bl	800e94e <__copybits>
 800bdae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f002 f995 	bl	800e0e0 <_Bfree>
 800bdb6:	3f01      	subs	r7, #1
 800bdb8:	2f05      	cmp	r7, #5
 800bdba:	d807      	bhi.n	800bdcc <_strtod_l+0xfc>
 800bdbc:	e8df f007 	tbb	[pc, r7]
 800bdc0:	1d180b0e 	.word	0x1d180b0e
 800bdc4:	030e      	.short	0x030e
 800bdc6:	f04f 0b00 	mov.w	fp, #0
 800bdca:	46da      	mov	sl, fp
 800bdcc:	0728      	lsls	r0, r5, #28
 800bdce:	d5c1      	bpl.n	800bd54 <_strtod_l+0x84>
 800bdd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bdd4:	e7be      	b.n	800bd54 <_strtod_l+0x84>
 800bdd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800bdda:	e7f7      	b.n	800bdcc <_strtod_l+0xfc>
 800bddc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800bde0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bde2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bde6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bdea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bdee:	e7ed      	b.n	800bdcc <_strtod_l+0xfc>
 800bdf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bf78 <_strtod_l+0x2a8>
 800bdf4:	f04f 0a00 	mov.w	sl, #0
 800bdf8:	e7e8      	b.n	800bdcc <_strtod_l+0xfc>
 800bdfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bdfe:	f04f 3aff 	mov.w	sl, #4294967295
 800be02:	e7e3      	b.n	800bdcc <_strtod_l+0xfc>
 800be04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	921d      	str	r2, [sp, #116]	; 0x74
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	2b30      	cmp	r3, #48	; 0x30
 800be0e:	d0f9      	beq.n	800be04 <_strtod_l+0x134>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d09f      	beq.n	800bd54 <_strtod_l+0x84>
 800be14:	2301      	movs	r3, #1
 800be16:	f04f 0900 	mov.w	r9, #0
 800be1a:	9304      	str	r3, [sp, #16]
 800be1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be1e:	930a      	str	r3, [sp, #40]	; 0x28
 800be20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800be24:	464f      	mov	r7, r9
 800be26:	220a      	movs	r2, #10
 800be28:	981d      	ldr	r0, [sp, #116]	; 0x74
 800be2a:	7806      	ldrb	r6, [r0, #0]
 800be2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be30:	b2d9      	uxtb	r1, r3
 800be32:	2909      	cmp	r1, #9
 800be34:	d92a      	bls.n	800be8c <_strtod_l+0x1bc>
 800be36:	9907      	ldr	r1, [sp, #28]
 800be38:	462a      	mov	r2, r5
 800be3a:	f7ff ff18 	bl	800bc6e <strncmp>
 800be3e:	b398      	cbz	r0, 800bea8 <_strtod_l+0x1d8>
 800be40:	2000      	movs	r0, #0
 800be42:	4633      	mov	r3, r6
 800be44:	463d      	mov	r5, r7
 800be46:	9007      	str	r0, [sp, #28]
 800be48:	4602      	mov	r2, r0
 800be4a:	2b65      	cmp	r3, #101	; 0x65
 800be4c:	d001      	beq.n	800be52 <_strtod_l+0x182>
 800be4e:	2b45      	cmp	r3, #69	; 0x45
 800be50:	d118      	bne.n	800be84 <_strtod_l+0x1b4>
 800be52:	b91d      	cbnz	r5, 800be5c <_strtod_l+0x18c>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4303      	orrs	r3, r0
 800be58:	d098      	beq.n	800bd8c <_strtod_l+0xbc>
 800be5a:	2500      	movs	r5, #0
 800be5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800be60:	f108 0301 	add.w	r3, r8, #1
 800be64:	931d      	str	r3, [sp, #116]	; 0x74
 800be66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800be6a:	2b2b      	cmp	r3, #43	; 0x2b
 800be6c:	d075      	beq.n	800bf5a <_strtod_l+0x28a>
 800be6e:	2b2d      	cmp	r3, #45	; 0x2d
 800be70:	d07b      	beq.n	800bf6a <_strtod_l+0x29a>
 800be72:	f04f 0c00 	mov.w	ip, #0
 800be76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800be7a:	2909      	cmp	r1, #9
 800be7c:	f240 8082 	bls.w	800bf84 <_strtod_l+0x2b4>
 800be80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800be84:	2600      	movs	r6, #0
 800be86:	e09d      	b.n	800bfc4 <_strtod_l+0x2f4>
 800be88:	2300      	movs	r3, #0
 800be8a:	e7c4      	b.n	800be16 <_strtod_l+0x146>
 800be8c:	2f08      	cmp	r7, #8
 800be8e:	bfd8      	it	le
 800be90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800be92:	f100 0001 	add.w	r0, r0, #1
 800be96:	bfda      	itte	le
 800be98:	fb02 3301 	mlale	r3, r2, r1, r3
 800be9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800be9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bea2:	3701      	adds	r7, #1
 800bea4:	901d      	str	r0, [sp, #116]	; 0x74
 800bea6:	e7bf      	b.n	800be28 <_strtod_l+0x158>
 800bea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800beaa:	195a      	adds	r2, r3, r5
 800beac:	921d      	str	r2, [sp, #116]	; 0x74
 800beae:	5d5b      	ldrb	r3, [r3, r5]
 800beb0:	2f00      	cmp	r7, #0
 800beb2:	d037      	beq.n	800bf24 <_strtod_l+0x254>
 800beb4:	9007      	str	r0, [sp, #28]
 800beb6:	463d      	mov	r5, r7
 800beb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bebc:	2a09      	cmp	r2, #9
 800bebe:	d912      	bls.n	800bee6 <_strtod_l+0x216>
 800bec0:	2201      	movs	r2, #1
 800bec2:	e7c2      	b.n	800be4a <_strtod_l+0x17a>
 800bec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	921d      	str	r2, [sp, #116]	; 0x74
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	3001      	adds	r0, #1
 800bece:	2b30      	cmp	r3, #48	; 0x30
 800bed0:	d0f8      	beq.n	800bec4 <_strtod_l+0x1f4>
 800bed2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bed6:	2a08      	cmp	r2, #8
 800bed8:	f200 84db 	bhi.w	800c892 <_strtod_l+0xbc2>
 800bedc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bede:	9007      	str	r0, [sp, #28]
 800bee0:	2000      	movs	r0, #0
 800bee2:	920a      	str	r2, [sp, #40]	; 0x28
 800bee4:	4605      	mov	r5, r0
 800bee6:	3b30      	subs	r3, #48	; 0x30
 800bee8:	f100 0201 	add.w	r2, r0, #1
 800beec:	d014      	beq.n	800bf18 <_strtod_l+0x248>
 800beee:	9907      	ldr	r1, [sp, #28]
 800bef0:	4411      	add	r1, r2
 800bef2:	9107      	str	r1, [sp, #28]
 800bef4:	462a      	mov	r2, r5
 800bef6:	eb00 0e05 	add.w	lr, r0, r5
 800befa:	210a      	movs	r1, #10
 800befc:	4572      	cmp	r2, lr
 800befe:	d113      	bne.n	800bf28 <_strtod_l+0x258>
 800bf00:	182a      	adds	r2, r5, r0
 800bf02:	2a08      	cmp	r2, #8
 800bf04:	f105 0501 	add.w	r5, r5, #1
 800bf08:	4405      	add	r5, r0
 800bf0a:	dc1c      	bgt.n	800bf46 <_strtod_l+0x276>
 800bf0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf0e:	220a      	movs	r2, #10
 800bf10:	fb02 3301 	mla	r3, r2, r1, r3
 800bf14:	9309      	str	r3, [sp, #36]	; 0x24
 800bf16:	2200      	movs	r2, #0
 800bf18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf1a:	1c59      	adds	r1, r3, #1
 800bf1c:	911d      	str	r1, [sp, #116]	; 0x74
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	4610      	mov	r0, r2
 800bf22:	e7c9      	b.n	800beb8 <_strtod_l+0x1e8>
 800bf24:	4638      	mov	r0, r7
 800bf26:	e7d2      	b.n	800bece <_strtod_l+0x1fe>
 800bf28:	2a08      	cmp	r2, #8
 800bf2a:	dc04      	bgt.n	800bf36 <_strtod_l+0x266>
 800bf2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bf2e:	434e      	muls	r6, r1
 800bf30:	9609      	str	r6, [sp, #36]	; 0x24
 800bf32:	3201      	adds	r2, #1
 800bf34:	e7e2      	b.n	800befc <_strtod_l+0x22c>
 800bf36:	f102 0c01 	add.w	ip, r2, #1
 800bf3a:	f1bc 0f10 	cmp.w	ip, #16
 800bf3e:	bfd8      	it	le
 800bf40:	fb01 f909 	mulle.w	r9, r1, r9
 800bf44:	e7f5      	b.n	800bf32 <_strtod_l+0x262>
 800bf46:	2d10      	cmp	r5, #16
 800bf48:	bfdc      	itt	le
 800bf4a:	220a      	movle	r2, #10
 800bf4c:	fb02 3909 	mlale	r9, r2, r9, r3
 800bf50:	e7e1      	b.n	800bf16 <_strtod_l+0x246>
 800bf52:	2300      	movs	r3, #0
 800bf54:	9307      	str	r3, [sp, #28]
 800bf56:	2201      	movs	r2, #1
 800bf58:	e77c      	b.n	800be54 <_strtod_l+0x184>
 800bf5a:	f04f 0c00 	mov.w	ip, #0
 800bf5e:	f108 0302 	add.w	r3, r8, #2
 800bf62:	931d      	str	r3, [sp, #116]	; 0x74
 800bf64:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bf68:	e785      	b.n	800be76 <_strtod_l+0x1a6>
 800bf6a:	f04f 0c01 	mov.w	ip, #1
 800bf6e:	e7f6      	b.n	800bf5e <_strtod_l+0x28e>
 800bf70:	0800fae4 	.word	0x0800fae4
 800bf74:	0800f858 	.word	0x0800f858
 800bf78:	7ff00000 	.word	0x7ff00000
 800bf7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf7e:	1c59      	adds	r1, r3, #1
 800bf80:	911d      	str	r1, [sp, #116]	; 0x74
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b30      	cmp	r3, #48	; 0x30
 800bf86:	d0f9      	beq.n	800bf7c <_strtod_l+0x2ac>
 800bf88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bf8c:	2908      	cmp	r1, #8
 800bf8e:	f63f af79 	bhi.w	800be84 <_strtod_l+0x1b4>
 800bf92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bf96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf98:	9308      	str	r3, [sp, #32]
 800bf9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf9c:	1c59      	adds	r1, r3, #1
 800bf9e:	911d      	str	r1, [sp, #116]	; 0x74
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800bfa6:	2e09      	cmp	r6, #9
 800bfa8:	d937      	bls.n	800c01a <_strtod_l+0x34a>
 800bfaa:	9e08      	ldr	r6, [sp, #32]
 800bfac:	1b89      	subs	r1, r1, r6
 800bfae:	2908      	cmp	r1, #8
 800bfb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bfb4:	dc02      	bgt.n	800bfbc <_strtod_l+0x2ec>
 800bfb6:	4576      	cmp	r6, lr
 800bfb8:	bfa8      	it	ge
 800bfba:	4676      	movge	r6, lr
 800bfbc:	f1bc 0f00 	cmp.w	ip, #0
 800bfc0:	d000      	beq.n	800bfc4 <_strtod_l+0x2f4>
 800bfc2:	4276      	negs	r6, r6
 800bfc4:	2d00      	cmp	r5, #0
 800bfc6:	d14f      	bne.n	800c068 <_strtod_l+0x398>
 800bfc8:	9904      	ldr	r1, [sp, #16]
 800bfca:	4301      	orrs	r1, r0
 800bfcc:	f47f aec2 	bne.w	800bd54 <_strtod_l+0x84>
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	f47f aedb 	bne.w	800bd8c <_strtod_l+0xbc>
 800bfd6:	2b69      	cmp	r3, #105	; 0x69
 800bfd8:	d027      	beq.n	800c02a <_strtod_l+0x35a>
 800bfda:	dc24      	bgt.n	800c026 <_strtod_l+0x356>
 800bfdc:	2b49      	cmp	r3, #73	; 0x49
 800bfde:	d024      	beq.n	800c02a <_strtod_l+0x35a>
 800bfe0:	2b4e      	cmp	r3, #78	; 0x4e
 800bfe2:	f47f aed3 	bne.w	800bd8c <_strtod_l+0xbc>
 800bfe6:	499e      	ldr	r1, [pc, #632]	; (800c260 <_strtod_l+0x590>)
 800bfe8:	a81d      	add	r0, sp, #116	; 0x74
 800bfea:	f001 ff55 	bl	800de98 <__match>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f43f aecc 	beq.w	800bd8c <_strtod_l+0xbc>
 800bff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b28      	cmp	r3, #40	; 0x28
 800bffa:	d12d      	bne.n	800c058 <_strtod_l+0x388>
 800bffc:	4999      	ldr	r1, [pc, #612]	; (800c264 <_strtod_l+0x594>)
 800bffe:	aa20      	add	r2, sp, #128	; 0x80
 800c000:	a81d      	add	r0, sp, #116	; 0x74
 800c002:	f001 ff5d 	bl	800dec0 <__hexnan>
 800c006:	2805      	cmp	r0, #5
 800c008:	d126      	bne.n	800c058 <_strtod_l+0x388>
 800c00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c00c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c010:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c014:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c018:	e69c      	b.n	800bd54 <_strtod_l+0x84>
 800c01a:	210a      	movs	r1, #10
 800c01c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c020:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c024:	e7b9      	b.n	800bf9a <_strtod_l+0x2ca>
 800c026:	2b6e      	cmp	r3, #110	; 0x6e
 800c028:	e7db      	b.n	800bfe2 <_strtod_l+0x312>
 800c02a:	498f      	ldr	r1, [pc, #572]	; (800c268 <_strtod_l+0x598>)
 800c02c:	a81d      	add	r0, sp, #116	; 0x74
 800c02e:	f001 ff33 	bl	800de98 <__match>
 800c032:	2800      	cmp	r0, #0
 800c034:	f43f aeaa 	beq.w	800bd8c <_strtod_l+0xbc>
 800c038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c03a:	498c      	ldr	r1, [pc, #560]	; (800c26c <_strtod_l+0x59c>)
 800c03c:	3b01      	subs	r3, #1
 800c03e:	a81d      	add	r0, sp, #116	; 0x74
 800c040:	931d      	str	r3, [sp, #116]	; 0x74
 800c042:	f001 ff29 	bl	800de98 <__match>
 800c046:	b910      	cbnz	r0, 800c04e <_strtod_l+0x37e>
 800c048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c04a:	3301      	adds	r3, #1
 800c04c:	931d      	str	r3, [sp, #116]	; 0x74
 800c04e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c27c <_strtod_l+0x5ac>
 800c052:	f04f 0a00 	mov.w	sl, #0
 800c056:	e67d      	b.n	800bd54 <_strtod_l+0x84>
 800c058:	4885      	ldr	r0, [pc, #532]	; (800c270 <_strtod_l+0x5a0>)
 800c05a:	f002 ffb9 	bl	800efd0 <nan>
 800c05e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c062:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c066:	e675      	b.n	800bd54 <_strtod_l+0x84>
 800c068:	9b07      	ldr	r3, [sp, #28]
 800c06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c06c:	1af3      	subs	r3, r6, r3
 800c06e:	2f00      	cmp	r7, #0
 800c070:	bf08      	it	eq
 800c072:	462f      	moveq	r7, r5
 800c074:	2d10      	cmp	r5, #16
 800c076:	9308      	str	r3, [sp, #32]
 800c078:	46a8      	mov	r8, r5
 800c07a:	bfa8      	it	ge
 800c07c:	f04f 0810 	movge.w	r8, #16
 800c080:	f7f4 fa50 	bl	8000524 <__aeabi_ui2d>
 800c084:	2d09      	cmp	r5, #9
 800c086:	4682      	mov	sl, r0
 800c088:	468b      	mov	fp, r1
 800c08a:	dd13      	ble.n	800c0b4 <_strtod_l+0x3e4>
 800c08c:	4b79      	ldr	r3, [pc, #484]	; (800c274 <_strtod_l+0x5a4>)
 800c08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c096:	f7f4 fabf 	bl	8000618 <__aeabi_dmul>
 800c09a:	4682      	mov	sl, r0
 800c09c:	4648      	mov	r0, r9
 800c09e:	468b      	mov	fp, r1
 800c0a0:	f7f4 fa40 	bl	8000524 <__aeabi_ui2d>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4650      	mov	r0, sl
 800c0aa:	4659      	mov	r1, fp
 800c0ac:	f7f4 f8fe 	bl	80002ac <__adddf3>
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	468b      	mov	fp, r1
 800c0b4:	2d0f      	cmp	r5, #15
 800c0b6:	dc38      	bgt.n	800c12a <_strtod_l+0x45a>
 800c0b8:	9b08      	ldr	r3, [sp, #32]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f43f ae4a 	beq.w	800bd54 <_strtod_l+0x84>
 800c0c0:	dd24      	ble.n	800c10c <_strtod_l+0x43c>
 800c0c2:	2b16      	cmp	r3, #22
 800c0c4:	dc0b      	bgt.n	800c0de <_strtod_l+0x40e>
 800c0c6:	4d6b      	ldr	r5, [pc, #428]	; (800c274 <_strtod_l+0x5a4>)
 800c0c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c0d0:	4652      	mov	r2, sl
 800c0d2:	465b      	mov	r3, fp
 800c0d4:	f7f4 faa0 	bl	8000618 <__aeabi_dmul>
 800c0d8:	4682      	mov	sl, r0
 800c0da:	468b      	mov	fp, r1
 800c0dc:	e63a      	b.n	800bd54 <_strtod_l+0x84>
 800c0de:	9a08      	ldr	r2, [sp, #32]
 800c0e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	db20      	blt.n	800c12a <_strtod_l+0x45a>
 800c0e8:	4c62      	ldr	r4, [pc, #392]	; (800c274 <_strtod_l+0x5a4>)
 800c0ea:	f1c5 050f 	rsb	r5, r5, #15
 800c0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c0f2:	4652      	mov	r2, sl
 800c0f4:	465b      	mov	r3, fp
 800c0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0fa:	f7f4 fa8d 	bl	8000618 <__aeabi_dmul>
 800c0fe:	9b08      	ldr	r3, [sp, #32]
 800c100:	1b5d      	subs	r5, r3, r5
 800c102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c10a:	e7e3      	b.n	800c0d4 <_strtod_l+0x404>
 800c10c:	9b08      	ldr	r3, [sp, #32]
 800c10e:	3316      	adds	r3, #22
 800c110:	db0b      	blt.n	800c12a <_strtod_l+0x45a>
 800c112:	9b07      	ldr	r3, [sp, #28]
 800c114:	4a57      	ldr	r2, [pc, #348]	; (800c274 <_strtod_l+0x5a4>)
 800c116:	1b9e      	subs	r6, r3, r6
 800c118:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	f7f4 fba2 	bl	800086c <__aeabi_ddiv>
 800c128:	e7d6      	b.n	800c0d8 <_strtod_l+0x408>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	eba5 0808 	sub.w	r8, r5, r8
 800c130:	4498      	add	r8, r3
 800c132:	f1b8 0f00 	cmp.w	r8, #0
 800c136:	dd71      	ble.n	800c21c <_strtod_l+0x54c>
 800c138:	f018 030f 	ands.w	r3, r8, #15
 800c13c:	d00a      	beq.n	800c154 <_strtod_l+0x484>
 800c13e:	494d      	ldr	r1, [pc, #308]	; (800c274 <_strtod_l+0x5a4>)
 800c140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c144:	4652      	mov	r2, sl
 800c146:	465b      	mov	r3, fp
 800c148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c14c:	f7f4 fa64 	bl	8000618 <__aeabi_dmul>
 800c150:	4682      	mov	sl, r0
 800c152:	468b      	mov	fp, r1
 800c154:	f038 080f 	bics.w	r8, r8, #15
 800c158:	d04d      	beq.n	800c1f6 <_strtod_l+0x526>
 800c15a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c15e:	dd22      	ble.n	800c1a6 <_strtod_l+0x4d6>
 800c160:	2500      	movs	r5, #0
 800c162:	462e      	mov	r6, r5
 800c164:	9509      	str	r5, [sp, #36]	; 0x24
 800c166:	9507      	str	r5, [sp, #28]
 800c168:	2322      	movs	r3, #34	; 0x22
 800c16a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c27c <_strtod_l+0x5ac>
 800c16e:	6023      	str	r3, [r4, #0]
 800c170:	f04f 0a00 	mov.w	sl, #0
 800c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	f43f adec 	beq.w	800bd54 <_strtod_l+0x84>
 800c17c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c17e:	4620      	mov	r0, r4
 800c180:	f001 ffae 	bl	800e0e0 <_Bfree>
 800c184:	9907      	ldr	r1, [sp, #28]
 800c186:	4620      	mov	r0, r4
 800c188:	f001 ffaa 	bl	800e0e0 <_Bfree>
 800c18c:	4631      	mov	r1, r6
 800c18e:	4620      	mov	r0, r4
 800c190:	f001 ffa6 	bl	800e0e0 <_Bfree>
 800c194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c196:	4620      	mov	r0, r4
 800c198:	f001 ffa2 	bl	800e0e0 <_Bfree>
 800c19c:	4629      	mov	r1, r5
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f001 ff9e 	bl	800e0e0 <_Bfree>
 800c1a4:	e5d6      	b.n	800bd54 <_strtod_l+0x84>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c1ac:	4650      	mov	r0, sl
 800c1ae:	4659      	mov	r1, fp
 800c1b0:	4699      	mov	r9, r3
 800c1b2:	f1b8 0f01 	cmp.w	r8, #1
 800c1b6:	dc21      	bgt.n	800c1fc <_strtod_l+0x52c>
 800c1b8:	b10b      	cbz	r3, 800c1be <_strtod_l+0x4ee>
 800c1ba:	4682      	mov	sl, r0
 800c1bc:	468b      	mov	fp, r1
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <_strtod_l+0x5a8>)
 800c1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c1c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c1d0:	f7f4 fa22 	bl	8000618 <__aeabi_dmul>
 800c1d4:	4b29      	ldr	r3, [pc, #164]	; (800c27c <_strtod_l+0x5ac>)
 800c1d6:	460a      	mov	r2, r1
 800c1d8:	400b      	ands	r3, r1
 800c1da:	4929      	ldr	r1, [pc, #164]	; (800c280 <_strtod_l+0x5b0>)
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	4682      	mov	sl, r0
 800c1e0:	d8be      	bhi.n	800c160 <_strtod_l+0x490>
 800c1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c1e6:	428b      	cmp	r3, r1
 800c1e8:	bf86      	itte	hi
 800c1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c284 <_strtod_l+0x5b4>
 800c1ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800c1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	e081      	b.n	800c300 <_strtod_l+0x630>
 800c1fc:	f018 0f01 	tst.w	r8, #1
 800c200:	d007      	beq.n	800c212 <_strtod_l+0x542>
 800c202:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <_strtod_l+0x5a8>)
 800c204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f7f4 fa04 	bl	8000618 <__aeabi_dmul>
 800c210:	2301      	movs	r3, #1
 800c212:	f109 0901 	add.w	r9, r9, #1
 800c216:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c21a:	e7ca      	b.n	800c1b2 <_strtod_l+0x4e2>
 800c21c:	d0eb      	beq.n	800c1f6 <_strtod_l+0x526>
 800c21e:	f1c8 0800 	rsb	r8, r8, #0
 800c222:	f018 020f 	ands.w	r2, r8, #15
 800c226:	d00a      	beq.n	800c23e <_strtod_l+0x56e>
 800c228:	4b12      	ldr	r3, [pc, #72]	; (800c274 <_strtod_l+0x5a4>)
 800c22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c22e:	4650      	mov	r0, sl
 800c230:	4659      	mov	r1, fp
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 fb19 	bl	800086c <__aeabi_ddiv>
 800c23a:	4682      	mov	sl, r0
 800c23c:	468b      	mov	fp, r1
 800c23e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c242:	d0d8      	beq.n	800c1f6 <_strtod_l+0x526>
 800c244:	f1b8 0f1f 	cmp.w	r8, #31
 800c248:	dd1e      	ble.n	800c288 <_strtod_l+0x5b8>
 800c24a:	2500      	movs	r5, #0
 800c24c:	462e      	mov	r6, r5
 800c24e:	9509      	str	r5, [sp, #36]	; 0x24
 800c250:	9507      	str	r5, [sp, #28]
 800c252:	2322      	movs	r3, #34	; 0x22
 800c254:	f04f 0a00 	mov.w	sl, #0
 800c258:	f04f 0b00 	mov.w	fp, #0
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	e789      	b.n	800c174 <_strtod_l+0x4a4>
 800c260:	0800f829 	.word	0x0800f829
 800c264:	0800f86c 	.word	0x0800f86c
 800c268:	0800f821 	.word	0x0800f821
 800c26c:	0800f9e8 	.word	0x0800f9e8
 800c270:	0800f8e3 	.word	0x0800f8e3
 800c274:	0800fb80 	.word	0x0800fb80
 800c278:	0800fb58 	.word	0x0800fb58
 800c27c:	7ff00000 	.word	0x7ff00000
 800c280:	7ca00000 	.word	0x7ca00000
 800c284:	7fefffff 	.word	0x7fefffff
 800c288:	f018 0310 	ands.w	r3, r8, #16
 800c28c:	bf18      	it	ne
 800c28e:	236a      	movne	r3, #106	; 0x6a
 800c290:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c648 <_strtod_l+0x978>
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	4650      	mov	r0, sl
 800c298:	4659      	mov	r1, fp
 800c29a:	2300      	movs	r3, #0
 800c29c:	f018 0f01 	tst.w	r8, #1
 800c2a0:	d004      	beq.n	800c2ac <_strtod_l+0x5dc>
 800c2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c2a6:	f7f4 f9b7 	bl	8000618 <__aeabi_dmul>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c2b0:	f109 0908 	add.w	r9, r9, #8
 800c2b4:	d1f2      	bne.n	800c29c <_strtod_l+0x5cc>
 800c2b6:	b10b      	cbz	r3, 800c2bc <_strtod_l+0x5ec>
 800c2b8:	4682      	mov	sl, r0
 800c2ba:	468b      	mov	fp, r1
 800c2bc:	9b04      	ldr	r3, [sp, #16]
 800c2be:	b1bb      	cbz	r3, 800c2f0 <_strtod_l+0x620>
 800c2c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c2c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	dd10      	ble.n	800c2f0 <_strtod_l+0x620>
 800c2ce:	2b1f      	cmp	r3, #31
 800c2d0:	f340 8128 	ble.w	800c524 <_strtod_l+0x854>
 800c2d4:	2b34      	cmp	r3, #52	; 0x34
 800c2d6:	bfde      	ittt	le
 800c2d8:	3b20      	suble	r3, #32
 800c2da:	f04f 32ff 	movle.w	r2, #4294967295
 800c2de:	fa02 f303 	lslle.w	r3, r2, r3
 800c2e2:	f04f 0a00 	mov.w	sl, #0
 800c2e6:	bfcc      	ite	gt
 800c2e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c2ec:	ea03 0b01 	andle.w	fp, r3, r1
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	4659      	mov	r1, fp
 800c2f8:	f7f4 fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d1a4      	bne.n	800c24a <_strtod_l+0x57a>
 800c300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c306:	462b      	mov	r3, r5
 800c308:	463a      	mov	r2, r7
 800c30a:	4620      	mov	r0, r4
 800c30c:	f001 ff54 	bl	800e1b8 <__s2b>
 800c310:	9009      	str	r0, [sp, #36]	; 0x24
 800c312:	2800      	cmp	r0, #0
 800c314:	f43f af24 	beq.w	800c160 <_strtod_l+0x490>
 800c318:	9b07      	ldr	r3, [sp, #28]
 800c31a:	1b9e      	subs	r6, r3, r6
 800c31c:	9b08      	ldr	r3, [sp, #32]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfb4      	ite	lt
 800c322:	4633      	movlt	r3, r6
 800c324:	2300      	movge	r3, #0
 800c326:	9310      	str	r3, [sp, #64]	; 0x40
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	2500      	movs	r5, #0
 800c32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c330:	9318      	str	r3, [sp, #96]	; 0x60
 800c332:	462e      	mov	r6, r5
 800c334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c336:	4620      	mov	r0, r4
 800c338:	6859      	ldr	r1, [r3, #4]
 800c33a:	f001 fe91 	bl	800e060 <_Balloc>
 800c33e:	9007      	str	r0, [sp, #28]
 800c340:	2800      	cmp	r0, #0
 800c342:	f43f af11 	beq.w	800c168 <_strtod_l+0x498>
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	691a      	ldr	r2, [r3, #16]
 800c34a:	3202      	adds	r2, #2
 800c34c:	f103 010c 	add.w	r1, r3, #12
 800c350:	0092      	lsls	r2, r2, #2
 800c352:	300c      	adds	r0, #12
 800c354:	f7fe fc7a 	bl	800ac4c <memcpy>
 800c358:	ec4b ab10 	vmov	d0, sl, fp
 800c35c:	aa20      	add	r2, sp, #128	; 0x80
 800c35e:	a91f      	add	r1, sp, #124	; 0x7c
 800c360:	4620      	mov	r0, r4
 800c362:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c366:	f002 fa63 	bl	800e830 <__d2b>
 800c36a:	901e      	str	r0, [sp, #120]	; 0x78
 800c36c:	2800      	cmp	r0, #0
 800c36e:	f43f aefb 	beq.w	800c168 <_strtod_l+0x498>
 800c372:	2101      	movs	r1, #1
 800c374:	4620      	mov	r0, r4
 800c376:	f001 ffb9 	bl	800e2ec <__i2b>
 800c37a:	4606      	mov	r6, r0
 800c37c:	2800      	cmp	r0, #0
 800c37e:	f43f aef3 	beq.w	800c168 <_strtod_l+0x498>
 800c382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c384:	9904      	ldr	r1, [sp, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	bfab      	itete	ge
 800c38a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c38c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c38e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c390:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c394:	bfac      	ite	ge
 800c396:	eb03 0902 	addge.w	r9, r3, r2
 800c39a:	1ad7      	sublt	r7, r2, r3
 800c39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c39e:	eba3 0801 	sub.w	r8, r3, r1
 800c3a2:	4490      	add	r8, r2
 800c3a4:	4ba3      	ldr	r3, [pc, #652]	; (800c634 <_strtod_l+0x964>)
 800c3a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3aa:	4598      	cmp	r8, r3
 800c3ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3b0:	f280 80cc 	bge.w	800c54c <_strtod_l+0x87c>
 800c3b4:	eba3 0308 	sub.w	r3, r3, r8
 800c3b8:	2b1f      	cmp	r3, #31
 800c3ba:	eba2 0203 	sub.w	r2, r2, r3
 800c3be:	f04f 0101 	mov.w	r1, #1
 800c3c2:	f300 80b6 	bgt.w	800c532 <_strtod_l+0x862>
 800c3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ca:	9311      	str	r3, [sp, #68]	; 0x44
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c3d0:	eb09 0802 	add.w	r8, r9, r2
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	45c1      	cmp	r9, r8
 800c3d8:	4417      	add	r7, r2
 800c3da:	441f      	add	r7, r3
 800c3dc:	464b      	mov	r3, r9
 800c3de:	bfa8      	it	ge
 800c3e0:	4643      	movge	r3, r8
 800c3e2:	42bb      	cmp	r3, r7
 800c3e4:	bfa8      	it	ge
 800c3e6:	463b      	movge	r3, r7
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	bfc2      	ittt	gt
 800c3ec:	eba8 0803 	subgt.w	r8, r8, r3
 800c3f0:	1aff      	subgt	r7, r7, r3
 800c3f2:	eba9 0903 	subgt.w	r9, r9, r3
 800c3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dd17      	ble.n	800c42c <_strtod_l+0x75c>
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	461a      	mov	r2, r3
 800c400:	4620      	mov	r0, r4
 800c402:	f002 f82f 	bl	800e464 <__pow5mult>
 800c406:	4606      	mov	r6, r0
 800c408:	2800      	cmp	r0, #0
 800c40a:	f43f aead 	beq.w	800c168 <_strtod_l+0x498>
 800c40e:	4601      	mov	r1, r0
 800c410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c412:	4620      	mov	r0, r4
 800c414:	f001 ff80 	bl	800e318 <__multiply>
 800c418:	900f      	str	r0, [sp, #60]	; 0x3c
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f43f aea4 	beq.w	800c168 <_strtod_l+0x498>
 800c420:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c422:	4620      	mov	r0, r4
 800c424:	f001 fe5c 	bl	800e0e0 <_Bfree>
 800c428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c42a:	931e      	str	r3, [sp, #120]	; 0x78
 800c42c:	f1b8 0f00 	cmp.w	r8, #0
 800c430:	f300 8091 	bgt.w	800c556 <_strtod_l+0x886>
 800c434:	9b08      	ldr	r3, [sp, #32]
 800c436:	2b00      	cmp	r3, #0
 800c438:	dd08      	ble.n	800c44c <_strtod_l+0x77c>
 800c43a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c43c:	9907      	ldr	r1, [sp, #28]
 800c43e:	4620      	mov	r0, r4
 800c440:	f002 f810 	bl	800e464 <__pow5mult>
 800c444:	9007      	str	r0, [sp, #28]
 800c446:	2800      	cmp	r0, #0
 800c448:	f43f ae8e 	beq.w	800c168 <_strtod_l+0x498>
 800c44c:	2f00      	cmp	r7, #0
 800c44e:	dd08      	ble.n	800c462 <_strtod_l+0x792>
 800c450:	9907      	ldr	r1, [sp, #28]
 800c452:	463a      	mov	r2, r7
 800c454:	4620      	mov	r0, r4
 800c456:	f002 f85f 	bl	800e518 <__lshift>
 800c45a:	9007      	str	r0, [sp, #28]
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f43f ae83 	beq.w	800c168 <_strtod_l+0x498>
 800c462:	f1b9 0f00 	cmp.w	r9, #0
 800c466:	dd08      	ble.n	800c47a <_strtod_l+0x7aa>
 800c468:	4631      	mov	r1, r6
 800c46a:	464a      	mov	r2, r9
 800c46c:	4620      	mov	r0, r4
 800c46e:	f002 f853 	bl	800e518 <__lshift>
 800c472:	4606      	mov	r6, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	f43f ae77 	beq.w	800c168 <_strtod_l+0x498>
 800c47a:	9a07      	ldr	r2, [sp, #28]
 800c47c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c47e:	4620      	mov	r0, r4
 800c480:	f002 f8d2 	bl	800e628 <__mdiff>
 800c484:	4605      	mov	r5, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f ae6e 	beq.w	800c168 <_strtod_l+0x498>
 800c48c:	68c3      	ldr	r3, [r0, #12]
 800c48e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c490:	2300      	movs	r3, #0
 800c492:	60c3      	str	r3, [r0, #12]
 800c494:	4631      	mov	r1, r6
 800c496:	f002 f8ab 	bl	800e5f0 <__mcmp>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	da65      	bge.n	800c56a <_strtod_l+0x89a>
 800c49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4a0:	ea53 030a 	orrs.w	r3, r3, sl
 800c4a4:	f040 8087 	bne.w	800c5b6 <_strtod_l+0x8e6>
 800c4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f040 8082 	bne.w	800c5b6 <_strtod_l+0x8e6>
 800c4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4b6:	0d1b      	lsrs	r3, r3, #20
 800c4b8:	051b      	lsls	r3, r3, #20
 800c4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4be:	d97a      	bls.n	800c5b6 <_strtod_l+0x8e6>
 800c4c0:	696b      	ldr	r3, [r5, #20]
 800c4c2:	b913      	cbnz	r3, 800c4ca <_strtod_l+0x7fa>
 800c4c4:	692b      	ldr	r3, [r5, #16]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	dd75      	ble.n	800c5b6 <_strtod_l+0x8e6>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f002 f822 	bl	800e518 <__lshift>
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	f002 f88a 	bl	800e5f0 <__mcmp>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	dd6a      	ble.n	800c5b6 <_strtod_l+0x8e6>
 800c4e0:	9904      	ldr	r1, [sp, #16]
 800c4e2:	4a55      	ldr	r2, [pc, #340]	; (800c638 <_strtod_l+0x968>)
 800c4e4:	465b      	mov	r3, fp
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	f000 8085 	beq.w	800c5f6 <_strtod_l+0x926>
 800c4ec:	ea02 010b 	and.w	r1, r2, fp
 800c4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c4f4:	dc7f      	bgt.n	800c5f6 <_strtod_l+0x926>
 800c4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c4fa:	f77f aeaa 	ble.w	800c252 <_strtod_l+0x582>
 800c4fe:	4a4f      	ldr	r2, [pc, #316]	; (800c63c <_strtod_l+0x96c>)
 800c500:	2300      	movs	r3, #0
 800c502:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c506:	4650      	mov	r0, sl
 800c508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c50c:	4659      	mov	r1, fp
 800c50e:	f7f4 f883 	bl	8000618 <__aeabi_dmul>
 800c512:	460b      	mov	r3, r1
 800c514:	4303      	orrs	r3, r0
 800c516:	bf08      	it	eq
 800c518:	2322      	moveq	r3, #34	; 0x22
 800c51a:	4682      	mov	sl, r0
 800c51c:	468b      	mov	fp, r1
 800c51e:	bf08      	it	eq
 800c520:	6023      	streq	r3, [r4, #0]
 800c522:	e62b      	b.n	800c17c <_strtod_l+0x4ac>
 800c524:	f04f 32ff 	mov.w	r2, #4294967295
 800c528:	fa02 f303 	lsl.w	r3, r2, r3
 800c52c:	ea03 0a0a 	and.w	sl, r3, sl
 800c530:	e6de      	b.n	800c2f0 <_strtod_l+0x620>
 800c532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c53a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c53e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c542:	fa01 f308 	lsl.w	r3, r1, r8
 800c546:	930c      	str	r3, [sp, #48]	; 0x30
 800c548:	9111      	str	r1, [sp, #68]	; 0x44
 800c54a:	e741      	b.n	800c3d0 <_strtod_l+0x700>
 800c54c:	2300      	movs	r3, #0
 800c54e:	930c      	str	r3, [sp, #48]	; 0x30
 800c550:	2301      	movs	r3, #1
 800c552:	9311      	str	r3, [sp, #68]	; 0x44
 800c554:	e73c      	b.n	800c3d0 <_strtod_l+0x700>
 800c556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c558:	4642      	mov	r2, r8
 800c55a:	4620      	mov	r0, r4
 800c55c:	f001 ffdc 	bl	800e518 <__lshift>
 800c560:	901e      	str	r0, [sp, #120]	; 0x78
 800c562:	2800      	cmp	r0, #0
 800c564:	f47f af66 	bne.w	800c434 <_strtod_l+0x764>
 800c568:	e5fe      	b.n	800c168 <_strtod_l+0x498>
 800c56a:	465f      	mov	r7, fp
 800c56c:	d16e      	bne.n	800c64c <_strtod_l+0x97c>
 800c56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c574:	b342      	cbz	r2, 800c5c8 <_strtod_l+0x8f8>
 800c576:	4a32      	ldr	r2, [pc, #200]	; (800c640 <_strtod_l+0x970>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d128      	bne.n	800c5ce <_strtod_l+0x8fe>
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	4650      	mov	r0, sl
 800c580:	b1eb      	cbz	r3, 800c5be <_strtod_l+0x8ee>
 800c582:	4a2d      	ldr	r2, [pc, #180]	; (800c638 <_strtod_l+0x968>)
 800c584:	403a      	ands	r2, r7
 800c586:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c58a:	f04f 31ff 	mov.w	r1, #4294967295
 800c58e:	d819      	bhi.n	800c5c4 <_strtod_l+0x8f4>
 800c590:	0d12      	lsrs	r2, r2, #20
 800c592:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c596:	fa01 f303 	lsl.w	r3, r1, r3
 800c59a:	4298      	cmp	r0, r3
 800c59c:	d117      	bne.n	800c5ce <_strtod_l+0x8fe>
 800c59e:	4b29      	ldr	r3, [pc, #164]	; (800c644 <_strtod_l+0x974>)
 800c5a0:	429f      	cmp	r7, r3
 800c5a2:	d102      	bne.n	800c5aa <_strtod_l+0x8da>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	f43f addf 	beq.w	800c168 <_strtod_l+0x498>
 800c5aa:	4b23      	ldr	r3, [pc, #140]	; (800c638 <_strtod_l+0x968>)
 800c5ac:	403b      	ands	r3, r7
 800c5ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c5b2:	f04f 0a00 	mov.w	sl, #0
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1a0      	bne.n	800c4fe <_strtod_l+0x82e>
 800c5bc:	e5de      	b.n	800c17c <_strtod_l+0x4ac>
 800c5be:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c2:	e7ea      	b.n	800c59a <_strtod_l+0x8ca>
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	e7e8      	b.n	800c59a <_strtod_l+0x8ca>
 800c5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c5cc:	d088      	beq.n	800c4e0 <_strtod_l+0x810>
 800c5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5d0:	b1db      	cbz	r3, 800c60a <_strtod_l+0x93a>
 800c5d2:	423b      	tst	r3, r7
 800c5d4:	d0ef      	beq.n	800c5b6 <_strtod_l+0x8e6>
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d8:	9a04      	ldr	r2, [sp, #16]
 800c5da:	4650      	mov	r0, sl
 800c5dc:	4659      	mov	r1, fp
 800c5de:	b1c3      	cbz	r3, 800c612 <_strtod_l+0x942>
 800c5e0:	f7ff fb57 	bl	800bc92 <sulp>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5ec:	f7f3 fe5e 	bl	80002ac <__adddf3>
 800c5f0:	4682      	mov	sl, r0
 800c5f2:	468b      	mov	fp, r1
 800c5f4:	e7df      	b.n	800c5b6 <_strtod_l+0x8e6>
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c5fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c604:	f04f 3aff 	mov.w	sl, #4294967295
 800c608:	e7d5      	b.n	800c5b6 <_strtod_l+0x8e6>
 800c60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c60c:	ea13 0f0a 	tst.w	r3, sl
 800c610:	e7e0      	b.n	800c5d4 <_strtod_l+0x904>
 800c612:	f7ff fb3e 	bl	800bc92 <sulp>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c61e:	f7f3 fe43 	bl	80002a8 <__aeabi_dsub>
 800c622:	2200      	movs	r2, #0
 800c624:	2300      	movs	r3, #0
 800c626:	4682      	mov	sl, r0
 800c628:	468b      	mov	fp, r1
 800c62a:	f7f4 fa5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0c1      	beq.n	800c5b6 <_strtod_l+0x8e6>
 800c632:	e60e      	b.n	800c252 <_strtod_l+0x582>
 800c634:	fffffc02 	.word	0xfffffc02
 800c638:	7ff00000 	.word	0x7ff00000
 800c63c:	39500000 	.word	0x39500000
 800c640:	000fffff 	.word	0x000fffff
 800c644:	7fefffff 	.word	0x7fefffff
 800c648:	0800f880 	.word	0x0800f880
 800c64c:	4631      	mov	r1, r6
 800c64e:	4628      	mov	r0, r5
 800c650:	f002 f94a 	bl	800e8e8 <__ratio>
 800c654:	ec59 8b10 	vmov	r8, r9, d0
 800c658:	ee10 0a10 	vmov	r0, s0
 800c65c:	2200      	movs	r2, #0
 800c65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c662:	4649      	mov	r1, r9
 800c664:	f7f4 fa54 	bl	8000b10 <__aeabi_dcmple>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d07c      	beq.n	800c766 <_strtod_l+0xa96>
 800c66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d04c      	beq.n	800c70c <_strtod_l+0xa3c>
 800c672:	4b95      	ldr	r3, [pc, #596]	; (800c8c8 <_strtod_l+0xbf8>)
 800c674:	2200      	movs	r2, #0
 800c676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c67a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c8c8 <_strtod_l+0xbf8>
 800c67e:	f04f 0800 	mov.w	r8, #0
 800c682:	4b92      	ldr	r3, [pc, #584]	; (800c8cc <_strtod_l+0xbfc>)
 800c684:	403b      	ands	r3, r7
 800c686:	9311      	str	r3, [sp, #68]	; 0x44
 800c688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c68a:	4b91      	ldr	r3, [pc, #580]	; (800c8d0 <_strtod_l+0xc00>)
 800c68c:	429a      	cmp	r2, r3
 800c68e:	f040 80b2 	bne.w	800c7f6 <_strtod_l+0xb26>
 800c692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c69a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c69e:	ec4b ab10 	vmov	d0, sl, fp
 800c6a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c6a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c6aa:	f002 f845 	bl	800e738 <__ulp>
 800c6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6b2:	ec53 2b10 	vmov	r2, r3, d0
 800c6b6:	f7f3 ffaf 	bl	8000618 <__aeabi_dmul>
 800c6ba:	4652      	mov	r2, sl
 800c6bc:	465b      	mov	r3, fp
 800c6be:	f7f3 fdf5 	bl	80002ac <__adddf3>
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4981      	ldr	r1, [pc, #516]	; (800c8cc <_strtod_l+0xbfc>)
 800c6c6:	4a83      	ldr	r2, [pc, #524]	; (800c8d4 <_strtod_l+0xc04>)
 800c6c8:	4019      	ands	r1, r3
 800c6ca:	4291      	cmp	r1, r2
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	d95e      	bls.n	800c78e <_strtod_l+0xabe>
 800c6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d103      	bne.n	800c6e2 <_strtod_l+0xa12>
 800c6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f43f ad43 	beq.w	800c168 <_strtod_l+0x498>
 800c6e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c8e0 <_strtod_l+0xc10>
 800c6e6:	f04f 3aff 	mov.w	sl, #4294967295
 800c6ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f001 fcf7 	bl	800e0e0 <_Bfree>
 800c6f2:	9907      	ldr	r1, [sp, #28]
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f001 fcf3 	bl	800e0e0 <_Bfree>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f001 fcef 	bl	800e0e0 <_Bfree>
 800c702:	4629      	mov	r1, r5
 800c704:	4620      	mov	r0, r4
 800c706:	f001 fceb 	bl	800e0e0 <_Bfree>
 800c70a:	e613      	b.n	800c334 <_strtod_l+0x664>
 800c70c:	f1ba 0f00 	cmp.w	sl, #0
 800c710:	d11b      	bne.n	800c74a <_strtod_l+0xa7a>
 800c712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c716:	b9f3      	cbnz	r3, 800c756 <_strtod_l+0xa86>
 800c718:	4b6b      	ldr	r3, [pc, #428]	; (800c8c8 <_strtod_l+0xbf8>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	4640      	mov	r0, r8
 800c71e:	4649      	mov	r1, r9
 800c720:	f7f4 f9ec 	bl	8000afc <__aeabi_dcmplt>
 800c724:	b9d0      	cbnz	r0, 800c75c <_strtod_l+0xa8c>
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	4b6b      	ldr	r3, [pc, #428]	; (800c8d8 <_strtod_l+0xc08>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	f7f3 ff73 	bl	8000618 <__aeabi_dmul>
 800c732:	4680      	mov	r8, r0
 800c734:	4689      	mov	r9, r1
 800c736:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c73a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c73e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c740:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c748:	e79b      	b.n	800c682 <_strtod_l+0x9b2>
 800c74a:	f1ba 0f01 	cmp.w	sl, #1
 800c74e:	d102      	bne.n	800c756 <_strtod_l+0xa86>
 800c750:	2f00      	cmp	r7, #0
 800c752:	f43f ad7e 	beq.w	800c252 <_strtod_l+0x582>
 800c756:	4b61      	ldr	r3, [pc, #388]	; (800c8dc <_strtod_l+0xc0c>)
 800c758:	2200      	movs	r2, #0
 800c75a:	e78c      	b.n	800c676 <_strtod_l+0x9a6>
 800c75c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c8d8 <_strtod_l+0xc08>
 800c760:	f04f 0800 	mov.w	r8, #0
 800c764:	e7e7      	b.n	800c736 <_strtod_l+0xa66>
 800c766:	4b5c      	ldr	r3, [pc, #368]	; (800c8d8 <_strtod_l+0xc08>)
 800c768:	4640      	mov	r0, r8
 800c76a:	4649      	mov	r1, r9
 800c76c:	2200      	movs	r2, #0
 800c76e:	f7f3 ff53 	bl	8000618 <__aeabi_dmul>
 800c772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c774:	4680      	mov	r8, r0
 800c776:	4689      	mov	r9, r1
 800c778:	b933      	cbnz	r3, 800c788 <_strtod_l+0xab8>
 800c77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c77e:	9012      	str	r0, [sp, #72]	; 0x48
 800c780:	9313      	str	r3, [sp, #76]	; 0x4c
 800c782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c786:	e7dd      	b.n	800c744 <_strtod_l+0xa74>
 800c788:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c78c:	e7f9      	b.n	800c782 <_strtod_l+0xab2>
 800c78e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1a8      	bne.n	800c6ea <_strtod_l+0xa1a>
 800c798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c79e:	0d1b      	lsrs	r3, r3, #20
 800c7a0:	051b      	lsls	r3, r3, #20
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d1a1      	bne.n	800c6ea <_strtod_l+0xa1a>
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f4 fa95 	bl	8000cd8 <__aeabi_d2lz>
 800c7ae:	f7f3 ff05 	bl	80005bc <__aeabi_l2d>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f3 fd75 	bl	80002a8 <__aeabi_dsub>
 800c7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7c4:	ea43 030a 	orr.w	r3, r3, sl
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	4689      	mov	r9, r1
 800c7ce:	d053      	beq.n	800c878 <_strtod_l+0xba8>
 800c7d0:	a335      	add	r3, pc, #212	; (adr r3, 800c8a8 <_strtod_l+0xbd8>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f4 f991 	bl	8000afc <__aeabi_dcmplt>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	f47f acce 	bne.w	800c17c <_strtod_l+0x4ac>
 800c7e0:	a333      	add	r3, pc, #204	; (adr r3, 800c8b0 <_strtod_l+0xbe0>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	f7f4 f9a5 	bl	8000b38 <__aeabi_dcmpgt>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f43f af7b 	beq.w	800c6ea <_strtod_l+0xa1a>
 800c7f4:	e4c2      	b.n	800c17c <_strtod_l+0x4ac>
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	b333      	cbz	r3, 800c848 <_strtod_l+0xb78>
 800c7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c800:	d822      	bhi.n	800c848 <_strtod_l+0xb78>
 800c802:	a32d      	add	r3, pc, #180	; (adr r3, 800c8b8 <_strtod_l+0xbe8>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	4640      	mov	r0, r8
 800c80a:	4649      	mov	r1, r9
 800c80c:	f7f4 f980 	bl	8000b10 <__aeabi_dcmple>
 800c810:	b1a0      	cbz	r0, 800c83c <_strtod_l+0xb6c>
 800c812:	4649      	mov	r1, r9
 800c814:	4640      	mov	r0, r8
 800c816:	f7f4 f9d7 	bl	8000bc8 <__aeabi_d2uiz>
 800c81a:	2801      	cmp	r0, #1
 800c81c:	bf38      	it	cc
 800c81e:	2001      	movcc	r0, #1
 800c820:	f7f3 fe80 	bl	8000524 <__aeabi_ui2d>
 800c824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c826:	4680      	mov	r8, r0
 800c828:	4689      	mov	r9, r1
 800c82a:	bb13      	cbnz	r3, 800c872 <_strtod_l+0xba2>
 800c82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c830:	9014      	str	r0, [sp, #80]	; 0x50
 800c832:	9315      	str	r3, [sp, #84]	; 0x54
 800c834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	930d      	str	r3, [sp, #52]	; 0x34
 800c848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c84c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c854:	f001 ff70 	bl	800e738 <__ulp>
 800c858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c85c:	ec53 2b10 	vmov	r2, r3, d0
 800c860:	f7f3 feda 	bl	8000618 <__aeabi_dmul>
 800c864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c868:	f7f3 fd20 	bl	80002ac <__adddf3>
 800c86c:	4682      	mov	sl, r0
 800c86e:	468b      	mov	fp, r1
 800c870:	e78f      	b.n	800c792 <_strtod_l+0xac2>
 800c872:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c876:	e7dd      	b.n	800c834 <_strtod_l+0xb64>
 800c878:	a311      	add	r3, pc, #68	; (adr r3, 800c8c0 <_strtod_l+0xbf0>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f4 f93d 	bl	8000afc <__aeabi_dcmplt>
 800c882:	e7b4      	b.n	800c7ee <_strtod_l+0xb1e>
 800c884:	2300      	movs	r3, #0
 800c886:	930e      	str	r3, [sp, #56]	; 0x38
 800c888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	f7ff ba65 	b.w	800bd5c <_strtod_l+0x8c>
 800c892:	2b65      	cmp	r3, #101	; 0x65
 800c894:	f43f ab5d 	beq.w	800bf52 <_strtod_l+0x282>
 800c898:	2b45      	cmp	r3, #69	; 0x45
 800c89a:	f43f ab5a 	beq.w	800bf52 <_strtod_l+0x282>
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f7ff bb92 	b.w	800bfc8 <_strtod_l+0x2f8>
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	94a03595 	.word	0x94a03595
 800c8ac:	3fdfffff 	.word	0x3fdfffff
 800c8b0:	35afe535 	.word	0x35afe535
 800c8b4:	3fe00000 	.word	0x3fe00000
 800c8b8:	ffc00000 	.word	0xffc00000
 800c8bc:	41dfffff 	.word	0x41dfffff
 800c8c0:	94a03595 	.word	0x94a03595
 800c8c4:	3fcfffff 	.word	0x3fcfffff
 800c8c8:	3ff00000 	.word	0x3ff00000
 800c8cc:	7ff00000 	.word	0x7ff00000
 800c8d0:	7fe00000 	.word	0x7fe00000
 800c8d4:	7c9fffff 	.word	0x7c9fffff
 800c8d8:	3fe00000 	.word	0x3fe00000
 800c8dc:	bff00000 	.word	0xbff00000
 800c8e0:	7fefffff 	.word	0x7fefffff

0800c8e4 <_strtod_r>:
 800c8e4:	4b01      	ldr	r3, [pc, #4]	; (800c8ec <_strtod_r+0x8>)
 800c8e6:	f7ff b9f3 	b.w	800bcd0 <_strtod_l>
 800c8ea:	bf00      	nop
 800c8ec:	2000009c 	.word	0x2000009c

0800c8f0 <_strtol_l.isra.0>:
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f6:	d001      	beq.n	800c8fc <_strtol_l.isra.0+0xc>
 800c8f8:	2b24      	cmp	r3, #36	; 0x24
 800c8fa:	d906      	bls.n	800c90a <_strtol_l.isra.0+0x1a>
 800c8fc:	f7fe f872 	bl	800a9e4 <__errno>
 800c900:	2316      	movs	r3, #22
 800c902:	6003      	str	r3, [r0, #0]
 800c904:	2000      	movs	r0, #0
 800c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90a:	4f3a      	ldr	r7, [pc, #232]	; (800c9f4 <_strtol_l.isra.0+0x104>)
 800c90c:	468e      	mov	lr, r1
 800c90e:	4676      	mov	r6, lr
 800c910:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c914:	5de5      	ldrb	r5, [r4, r7]
 800c916:	f015 0508 	ands.w	r5, r5, #8
 800c91a:	d1f8      	bne.n	800c90e <_strtol_l.isra.0+0x1e>
 800c91c:	2c2d      	cmp	r4, #45	; 0x2d
 800c91e:	d134      	bne.n	800c98a <_strtol_l.isra.0+0x9a>
 800c920:	f89e 4000 	ldrb.w	r4, [lr]
 800c924:	f04f 0801 	mov.w	r8, #1
 800c928:	f106 0e02 	add.w	lr, r6, #2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d05c      	beq.n	800c9ea <_strtol_l.isra.0+0xfa>
 800c930:	2b10      	cmp	r3, #16
 800c932:	d10c      	bne.n	800c94e <_strtol_l.isra.0+0x5e>
 800c934:	2c30      	cmp	r4, #48	; 0x30
 800c936:	d10a      	bne.n	800c94e <_strtol_l.isra.0+0x5e>
 800c938:	f89e 4000 	ldrb.w	r4, [lr]
 800c93c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c940:	2c58      	cmp	r4, #88	; 0x58
 800c942:	d14d      	bne.n	800c9e0 <_strtol_l.isra.0+0xf0>
 800c944:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c948:	2310      	movs	r3, #16
 800c94a:	f10e 0e02 	add.w	lr, lr, #2
 800c94e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c952:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c956:	2600      	movs	r6, #0
 800c958:	fbbc f9f3 	udiv	r9, ip, r3
 800c95c:	4635      	mov	r5, r6
 800c95e:	fb03 ca19 	mls	sl, r3, r9, ip
 800c962:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c966:	2f09      	cmp	r7, #9
 800c968:	d818      	bhi.n	800c99c <_strtol_l.isra.0+0xac>
 800c96a:	463c      	mov	r4, r7
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	dd24      	ble.n	800c9ba <_strtol_l.isra.0+0xca>
 800c970:	2e00      	cmp	r6, #0
 800c972:	db1f      	blt.n	800c9b4 <_strtol_l.isra.0+0xc4>
 800c974:	45a9      	cmp	r9, r5
 800c976:	d31d      	bcc.n	800c9b4 <_strtol_l.isra.0+0xc4>
 800c978:	d101      	bne.n	800c97e <_strtol_l.isra.0+0x8e>
 800c97a:	45a2      	cmp	sl, r4
 800c97c:	db1a      	blt.n	800c9b4 <_strtol_l.isra.0+0xc4>
 800c97e:	fb05 4503 	mla	r5, r5, r3, r4
 800c982:	2601      	movs	r6, #1
 800c984:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c988:	e7eb      	b.n	800c962 <_strtol_l.isra.0+0x72>
 800c98a:	2c2b      	cmp	r4, #43	; 0x2b
 800c98c:	bf08      	it	eq
 800c98e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c992:	46a8      	mov	r8, r5
 800c994:	bf08      	it	eq
 800c996:	f106 0e02 	addeq.w	lr, r6, #2
 800c99a:	e7c7      	b.n	800c92c <_strtol_l.isra.0+0x3c>
 800c99c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c9a0:	2f19      	cmp	r7, #25
 800c9a2:	d801      	bhi.n	800c9a8 <_strtol_l.isra.0+0xb8>
 800c9a4:	3c37      	subs	r4, #55	; 0x37
 800c9a6:	e7e1      	b.n	800c96c <_strtol_l.isra.0+0x7c>
 800c9a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c9ac:	2f19      	cmp	r7, #25
 800c9ae:	d804      	bhi.n	800c9ba <_strtol_l.isra.0+0xca>
 800c9b0:	3c57      	subs	r4, #87	; 0x57
 800c9b2:	e7db      	b.n	800c96c <_strtol_l.isra.0+0x7c>
 800c9b4:	f04f 36ff 	mov.w	r6, #4294967295
 800c9b8:	e7e4      	b.n	800c984 <_strtol_l.isra.0+0x94>
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	da05      	bge.n	800c9ca <_strtol_l.isra.0+0xda>
 800c9be:	2322      	movs	r3, #34	; 0x22
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	4665      	mov	r5, ip
 800c9c4:	b942      	cbnz	r2, 800c9d8 <_strtol_l.isra.0+0xe8>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	e79d      	b.n	800c906 <_strtol_l.isra.0+0x16>
 800c9ca:	f1b8 0f00 	cmp.w	r8, #0
 800c9ce:	d000      	beq.n	800c9d2 <_strtol_l.isra.0+0xe2>
 800c9d0:	426d      	negs	r5, r5
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d0f7      	beq.n	800c9c6 <_strtol_l.isra.0+0xd6>
 800c9d6:	b10e      	cbz	r6, 800c9dc <_strtol_l.isra.0+0xec>
 800c9d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c9dc:	6011      	str	r1, [r2, #0]
 800c9de:	e7f2      	b.n	800c9c6 <_strtol_l.isra.0+0xd6>
 800c9e0:	2430      	movs	r4, #48	; 0x30
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1b3      	bne.n	800c94e <_strtol_l.isra.0+0x5e>
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	e7b1      	b.n	800c94e <_strtol_l.isra.0+0x5e>
 800c9ea:	2c30      	cmp	r4, #48	; 0x30
 800c9ec:	d0a4      	beq.n	800c938 <_strtol_l.isra.0+0x48>
 800c9ee:	230a      	movs	r3, #10
 800c9f0:	e7ad      	b.n	800c94e <_strtol_l.isra.0+0x5e>
 800c9f2:	bf00      	nop
 800c9f4:	0800f8e5 	.word	0x0800f8e5

0800c9f8 <_strtol_r>:
 800c9f8:	f7ff bf7a 	b.w	800c8f0 <_strtol_l.isra.0>

0800c9fc <_write_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	; (800ca1c <_write_r+0x20>)
 800ca00:	4604      	mov	r4, r0
 800ca02:	4608      	mov	r0, r1
 800ca04:	4611      	mov	r1, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	602a      	str	r2, [r5, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f7f5 ff87 	bl	800291e <_write>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_write_r+0x1e>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_write_r+0x1e>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20001180 	.word	0x20001180

0800ca20 <__assert_func>:
 800ca20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca22:	4614      	mov	r4, r2
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <__assert_func+0x2c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	68d8      	ldr	r0, [r3, #12]
 800ca2e:	b14c      	cbz	r4, 800ca44 <__assert_func+0x24>
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <__assert_func+0x30>)
 800ca32:	9100      	str	r1, [sp, #0]
 800ca34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca38:	4906      	ldr	r1, [pc, #24]	; (800ca54 <__assert_func+0x34>)
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	f000 ff5a 	bl	800d8f4 <fiprintf>
 800ca40:	f7fd ffc9 	bl	800a9d6 <abort>
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <__assert_func+0x38>)
 800ca46:	461c      	mov	r4, r3
 800ca48:	e7f3      	b.n	800ca32 <__assert_func+0x12>
 800ca4a:	bf00      	nop
 800ca4c:	20000034 	.word	0x20000034
 800ca50:	0800f8a8 	.word	0x0800f8a8
 800ca54:	0800f8b5 	.word	0x0800f8b5
 800ca58:	0800f8e3 	.word	0x0800f8e3

0800ca5c <_close_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d06      	ldr	r5, [pc, #24]	; (800ca78 <_close_r+0x1c>)
 800ca60:	2300      	movs	r3, #0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	602b      	str	r3, [r5, #0]
 800ca68:	f7f5 ff75 	bl	8002956 <_close>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d102      	bne.n	800ca76 <_close_r+0x1a>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	b103      	cbz	r3, 800ca76 <_close_r+0x1a>
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	20001180 	.word	0x20001180

0800ca7c <quorem>:
 800ca7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	6903      	ldr	r3, [r0, #16]
 800ca82:	690c      	ldr	r4, [r1, #16]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	4607      	mov	r7, r0
 800ca88:	f2c0 8081 	blt.w	800cb8e <quorem+0x112>
 800ca8c:	3c01      	subs	r4, #1
 800ca8e:	f101 0814 	add.w	r8, r1, #20
 800ca92:	f100 0514 	add.w	r5, r0, #20
 800ca96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800caa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caa4:	3301      	adds	r3, #1
 800caa6:	429a      	cmp	r2, r3
 800caa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800caac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cab4:	d331      	bcc.n	800cb1a <quorem+0x9e>
 800cab6:	f04f 0e00 	mov.w	lr, #0
 800caba:	4640      	mov	r0, r8
 800cabc:	46ac      	mov	ip, r5
 800cabe:	46f2      	mov	sl, lr
 800cac0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cac4:	b293      	uxth	r3, r2
 800cac6:	fb06 e303 	mla	r3, r6, r3, lr
 800caca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cace:	b29b      	uxth	r3, r3
 800cad0:	ebaa 0303 	sub.w	r3, sl, r3
 800cad4:	0c12      	lsrs	r2, r2, #16
 800cad6:	f8dc a000 	ldr.w	sl, [ip]
 800cada:	fb06 e202 	mla	r2, r6, r2, lr
 800cade:	fa13 f38a 	uxtah	r3, r3, sl
 800cae2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cae6:	fa1f fa82 	uxth.w	sl, r2
 800caea:	f8dc 2000 	ldr.w	r2, [ip]
 800caee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800caf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cafc:	4581      	cmp	r9, r0
 800cafe:	f84c 3b04 	str.w	r3, [ip], #4
 800cb02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb06:	d2db      	bcs.n	800cac0 <quorem+0x44>
 800cb08:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb0c:	b92b      	cbnz	r3, 800cb1a <quorem+0x9e>
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	429d      	cmp	r5, r3
 800cb14:	461a      	mov	r2, r3
 800cb16:	d32e      	bcc.n	800cb76 <quorem+0xfa>
 800cb18:	613c      	str	r4, [r7, #16]
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	f001 fd68 	bl	800e5f0 <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	db24      	blt.n	800cb6e <quorem+0xf2>
 800cb24:	3601      	adds	r6, #1
 800cb26:	4628      	mov	r0, r5
 800cb28:	f04f 0c00 	mov.w	ip, #0
 800cb2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb30:	f8d0 e000 	ldr.w	lr, [r0]
 800cb34:	b293      	uxth	r3, r2
 800cb36:	ebac 0303 	sub.w	r3, ip, r3
 800cb3a:	0c12      	lsrs	r2, r2, #16
 800cb3c:	fa13 f38e 	uxtah	r3, r3, lr
 800cb40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb4e:	45c1      	cmp	r9, r8
 800cb50:	f840 3b04 	str.w	r3, [r0], #4
 800cb54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb58:	d2e8      	bcs.n	800cb2c <quorem+0xb0>
 800cb5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb62:	b922      	cbnz	r2, 800cb6e <quorem+0xf2>
 800cb64:	3b04      	subs	r3, #4
 800cb66:	429d      	cmp	r5, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	d30a      	bcc.n	800cb82 <quorem+0x106>
 800cb6c:	613c      	str	r4, [r7, #16]
 800cb6e:	4630      	mov	r0, r6
 800cb70:	b003      	add	sp, #12
 800cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	3b04      	subs	r3, #4
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	d1cc      	bne.n	800cb18 <quorem+0x9c>
 800cb7e:	3c01      	subs	r4, #1
 800cb80:	e7c7      	b.n	800cb12 <quorem+0x96>
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	3b04      	subs	r3, #4
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d1f0      	bne.n	800cb6c <quorem+0xf0>
 800cb8a:	3c01      	subs	r4, #1
 800cb8c:	e7eb      	b.n	800cb66 <quorem+0xea>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	e7ee      	b.n	800cb70 <quorem+0xf4>
 800cb92:	0000      	movs	r0, r0
 800cb94:	0000      	movs	r0, r0
	...

0800cb98 <_dtoa_r>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	ed2d 8b02 	vpush	{d8}
 800cba0:	ec57 6b10 	vmov	r6, r7, d0
 800cba4:	b095      	sub	sp, #84	; 0x54
 800cba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbac:	9105      	str	r1, [sp, #20]
 800cbae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbb8:	b975      	cbnz	r5, 800cbd8 <_dtoa_r+0x40>
 800cbba:	2010      	movs	r0, #16
 800cbbc:	f7fe f836 	bl	800ac2c <malloc>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	6260      	str	r0, [r4, #36]	; 0x24
 800cbc4:	b920      	cbnz	r0, 800cbd0 <_dtoa_r+0x38>
 800cbc6:	4bb2      	ldr	r3, [pc, #712]	; (800ce90 <_dtoa_r+0x2f8>)
 800cbc8:	21ea      	movs	r1, #234	; 0xea
 800cbca:	48b2      	ldr	r0, [pc, #712]	; (800ce94 <_dtoa_r+0x2fc>)
 800cbcc:	f7ff ff28 	bl	800ca20 <__assert_func>
 800cbd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbd4:	6005      	str	r5, [r0, #0]
 800cbd6:	60c5      	str	r5, [r0, #12]
 800cbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbda:	6819      	ldr	r1, [r3, #0]
 800cbdc:	b151      	cbz	r1, 800cbf4 <_dtoa_r+0x5c>
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	604a      	str	r2, [r1, #4]
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	4093      	lsls	r3, r2
 800cbe6:	608b      	str	r3, [r1, #8]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f001 fa79 	bl	800e0e0 <_Bfree>
 800cbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	1e3b      	subs	r3, r7, #0
 800cbf6:	bfb9      	ittee	lt
 800cbf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cbfc:	9303      	strlt	r3, [sp, #12]
 800cbfe:	2300      	movge	r3, #0
 800cc00:	f8c8 3000 	strge.w	r3, [r8]
 800cc04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cc08:	4ba3      	ldr	r3, [pc, #652]	; (800ce98 <_dtoa_r+0x300>)
 800cc0a:	bfbc      	itt	lt
 800cc0c:	2201      	movlt	r2, #1
 800cc0e:	f8c8 2000 	strlt.w	r2, [r8]
 800cc12:	ea33 0309 	bics.w	r3, r3, r9
 800cc16:	d11b      	bne.n	800cc50 <_dtoa_r+0xb8>
 800cc18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc24:	4333      	orrs	r3, r6
 800cc26:	f000 857a 	beq.w	800d71e <_dtoa_r+0xb86>
 800cc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc2c:	b963      	cbnz	r3, 800cc48 <_dtoa_r+0xb0>
 800cc2e:	4b9b      	ldr	r3, [pc, #620]	; (800ce9c <_dtoa_r+0x304>)
 800cc30:	e024      	b.n	800cc7c <_dtoa_r+0xe4>
 800cc32:	4b9b      	ldr	r3, [pc, #620]	; (800cea0 <_dtoa_r+0x308>)
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	3308      	adds	r3, #8
 800cc38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	9800      	ldr	r0, [sp, #0]
 800cc3e:	b015      	add	sp, #84	; 0x54
 800cc40:	ecbd 8b02 	vpop	{d8}
 800cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	4b94      	ldr	r3, [pc, #592]	; (800ce9c <_dtoa_r+0x304>)
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	3303      	adds	r3, #3
 800cc4e:	e7f3      	b.n	800cc38 <_dtoa_r+0xa0>
 800cc50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc54:	2200      	movs	r2, #0
 800cc56:	ec51 0b17 	vmov	r0, r1, d7
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cc60:	f7f3 ff42 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc64:	4680      	mov	r8, r0
 800cc66:	b158      	cbz	r0, 800cc80 <_dtoa_r+0xe8>
 800cc68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 8551 	beq.w	800d718 <_dtoa_r+0xb80>
 800cc76:	488b      	ldr	r0, [pc, #556]	; (800cea4 <_dtoa_r+0x30c>)
 800cc78:	6018      	str	r0, [r3, #0]
 800cc7a:	1e43      	subs	r3, r0, #1
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	e7dd      	b.n	800cc3c <_dtoa_r+0xa4>
 800cc80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cc84:	aa12      	add	r2, sp, #72	; 0x48
 800cc86:	a913      	add	r1, sp, #76	; 0x4c
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f001 fdd1 	bl	800e830 <__d2b>
 800cc8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc92:	4683      	mov	fp, r0
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d07c      	beq.n	800cd92 <_dtoa_r+0x1fa>
 800cc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cca2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cca6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccb2:	4b7d      	ldr	r3, [pc, #500]	; (800cea8 <_dtoa_r+0x310>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	4639      	mov	r1, r7
 800ccba:	f7f3 faf5 	bl	80002a8 <__aeabi_dsub>
 800ccbe:	a36e      	add	r3, pc, #440	; (adr r3, 800ce78 <_dtoa_r+0x2e0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fca8 	bl	8000618 <__aeabi_dmul>
 800ccc8:	a36d      	add	r3, pc, #436	; (adr r3, 800ce80 <_dtoa_r+0x2e8>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 faed 	bl	80002ac <__adddf3>
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	460f      	mov	r7, r1
 800ccd8:	f7f3 fc34 	bl	8000544 <__aeabi_i2d>
 800ccdc:	a36a      	add	r3, pc, #424	; (adr r3, 800ce88 <_dtoa_r+0x2f0>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fc99 	bl	8000618 <__aeabi_dmul>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4630      	mov	r0, r6
 800ccec:	4639      	mov	r1, r7
 800ccee:	f7f3 fadd 	bl	80002ac <__adddf3>
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	460f      	mov	r7, r1
 800ccf6:	f7f3 ff3f 	bl	8000b78 <__aeabi_d2iz>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	2300      	movs	r3, #0
 800cd00:	4630      	mov	r0, r6
 800cd02:	4639      	mov	r1, r7
 800cd04:	f7f3 fefa 	bl	8000afc <__aeabi_dcmplt>
 800cd08:	b148      	cbz	r0, 800cd1e <_dtoa_r+0x186>
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	f7f3 fc1a 	bl	8000544 <__aeabi_i2d>
 800cd10:	4632      	mov	r2, r6
 800cd12:	463b      	mov	r3, r7
 800cd14:	f7f3 fee8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd18:	b908      	cbnz	r0, 800cd1e <_dtoa_r+0x186>
 800cd1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd1e:	f1ba 0f16 	cmp.w	sl, #22
 800cd22:	d854      	bhi.n	800cdce <_dtoa_r+0x236>
 800cd24:	4b61      	ldr	r3, [pc, #388]	; (800ceac <_dtoa_r+0x314>)
 800cd26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd32:	f7f3 fee3 	bl	8000afc <__aeabi_dcmplt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d04b      	beq.n	800cdd2 <_dtoa_r+0x23a>
 800cd3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd3e:	2300      	movs	r3, #0
 800cd40:	930e      	str	r3, [sp, #56]	; 0x38
 800cd42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd44:	1b5d      	subs	r5, r3, r5
 800cd46:	1e6b      	subs	r3, r5, #1
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	bf43      	ittte	mi
 800cd4c:	2300      	movmi	r3, #0
 800cd4e:	f1c5 0801 	rsbmi	r8, r5, #1
 800cd52:	9304      	strmi	r3, [sp, #16]
 800cd54:	f04f 0800 	movpl.w	r8, #0
 800cd58:	f1ba 0f00 	cmp.w	sl, #0
 800cd5c:	db3b      	blt.n	800cdd6 <_dtoa_r+0x23e>
 800cd5e:	9b04      	ldr	r3, [sp, #16]
 800cd60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cd64:	4453      	add	r3, sl
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	9306      	str	r3, [sp, #24]
 800cd6c:	9b05      	ldr	r3, [sp, #20]
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	d869      	bhi.n	800ce46 <_dtoa_r+0x2ae>
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	bfc4      	itt	gt
 800cd76:	3b04      	subgt	r3, #4
 800cd78:	9305      	strgt	r3, [sp, #20]
 800cd7a:	9b05      	ldr	r3, [sp, #20]
 800cd7c:	f1a3 0302 	sub.w	r3, r3, #2
 800cd80:	bfcc      	ite	gt
 800cd82:	2500      	movgt	r5, #0
 800cd84:	2501      	movle	r5, #1
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d869      	bhi.n	800ce5e <_dtoa_r+0x2c6>
 800cd8a:	e8df f003 	tbb	[pc, r3]
 800cd8e:	4e2c      	.short	0x4e2c
 800cd90:	5a4c      	.short	0x5a4c
 800cd92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cd96:	441d      	add	r5, r3
 800cd98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd9c:	2b20      	cmp	r3, #32
 800cd9e:	bfc1      	itttt	gt
 800cda0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cda4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cda8:	fa09 f303 	lslgt.w	r3, r9, r3
 800cdac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cdb0:	bfda      	itte	le
 800cdb2:	f1c3 0320 	rsble	r3, r3, #32
 800cdb6:	fa06 f003 	lslle.w	r0, r6, r3
 800cdba:	4318      	orrgt	r0, r3
 800cdbc:	f7f3 fbb2 	bl	8000524 <__aeabi_ui2d>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cdc8:	3d01      	subs	r5, #1
 800cdca:	9310      	str	r3, [sp, #64]	; 0x40
 800cdcc:	e771      	b.n	800ccb2 <_dtoa_r+0x11a>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e7b6      	b.n	800cd40 <_dtoa_r+0x1a8>
 800cdd2:	900e      	str	r0, [sp, #56]	; 0x38
 800cdd4:	e7b5      	b.n	800cd42 <_dtoa_r+0x1aa>
 800cdd6:	f1ca 0300 	rsb	r3, sl, #0
 800cdda:	9306      	str	r3, [sp, #24]
 800cddc:	2300      	movs	r3, #0
 800cdde:	eba8 080a 	sub.w	r8, r8, sl
 800cde2:	930d      	str	r3, [sp, #52]	; 0x34
 800cde4:	e7c2      	b.n	800cd6c <_dtoa_r+0x1d4>
 800cde6:	2300      	movs	r3, #0
 800cde8:	9308      	str	r3, [sp, #32]
 800cdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dc39      	bgt.n	800ce64 <_dtoa_r+0x2cc>
 800cdf0:	f04f 0901 	mov.w	r9, #1
 800cdf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cdfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce00:	2200      	movs	r2, #0
 800ce02:	6042      	str	r2, [r0, #4]
 800ce04:	2204      	movs	r2, #4
 800ce06:	f102 0614 	add.w	r6, r2, #20
 800ce0a:	429e      	cmp	r6, r3
 800ce0c:	6841      	ldr	r1, [r0, #4]
 800ce0e:	d92f      	bls.n	800ce70 <_dtoa_r+0x2d8>
 800ce10:	4620      	mov	r0, r4
 800ce12:	f001 f925 	bl	800e060 <_Balloc>
 800ce16:	9000      	str	r0, [sp, #0]
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d14b      	bne.n	800ceb4 <_dtoa_r+0x31c>
 800ce1c:	4b24      	ldr	r3, [pc, #144]	; (800ceb0 <_dtoa_r+0x318>)
 800ce1e:	4602      	mov	r2, r0
 800ce20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce24:	e6d1      	b.n	800cbca <_dtoa_r+0x32>
 800ce26:	2301      	movs	r3, #1
 800ce28:	e7de      	b.n	800cde8 <_dtoa_r+0x250>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9308      	str	r3, [sp, #32]
 800ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce30:	eb0a 0903 	add.w	r9, sl, r3
 800ce34:	f109 0301 	add.w	r3, r9, #1
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	bfb8      	it	lt
 800ce3e:	2301      	movlt	r3, #1
 800ce40:	e7dd      	b.n	800cdfe <_dtoa_r+0x266>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e7f2      	b.n	800ce2c <_dtoa_r+0x294>
 800ce46:	2501      	movs	r5, #1
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	9508      	str	r5, [sp, #32]
 800ce4e:	f04f 39ff 	mov.w	r9, #4294967295
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce58:	2312      	movs	r3, #18
 800ce5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce5c:	e7cf      	b.n	800cdfe <_dtoa_r+0x266>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	9308      	str	r3, [sp, #32]
 800ce62:	e7f4      	b.n	800ce4e <_dtoa_r+0x2b6>
 800ce64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce68:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce6c:	464b      	mov	r3, r9
 800ce6e:	e7c6      	b.n	800cdfe <_dtoa_r+0x266>
 800ce70:	3101      	adds	r1, #1
 800ce72:	6041      	str	r1, [r0, #4]
 800ce74:	0052      	lsls	r2, r2, #1
 800ce76:	e7c6      	b.n	800ce06 <_dtoa_r+0x26e>
 800ce78:	636f4361 	.word	0x636f4361
 800ce7c:	3fd287a7 	.word	0x3fd287a7
 800ce80:	8b60c8b3 	.word	0x8b60c8b3
 800ce84:	3fc68a28 	.word	0x3fc68a28
 800ce88:	509f79fb 	.word	0x509f79fb
 800ce8c:	3fd34413 	.word	0x3fd34413
 800ce90:	0800f9f2 	.word	0x0800f9f2
 800ce94:	0800fa09 	.word	0x0800fa09
 800ce98:	7ff00000 	.word	0x7ff00000
 800ce9c:	0800f9ee 	.word	0x0800f9ee
 800cea0:	0800f9e5 	.word	0x0800f9e5
 800cea4:	0800f82d 	.word	0x0800f82d
 800cea8:	3ff80000 	.word	0x3ff80000
 800ceac:	0800fb80 	.word	0x0800fb80
 800ceb0:	0800fa68 	.word	0x0800fa68
 800ceb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceb6:	9a00      	ldr	r2, [sp, #0]
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	9b01      	ldr	r3, [sp, #4]
 800cebc:	2b0e      	cmp	r3, #14
 800cebe:	f200 80ad 	bhi.w	800d01c <_dtoa_r+0x484>
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	f000 80aa 	beq.w	800d01c <_dtoa_r+0x484>
 800cec8:	f1ba 0f00 	cmp.w	sl, #0
 800cecc:	dd36      	ble.n	800cf3c <_dtoa_r+0x3a4>
 800cece:	4ac3      	ldr	r2, [pc, #780]	; (800d1dc <_dtoa_r+0x644>)
 800ced0:	f00a 030f 	and.w	r3, sl, #15
 800ced4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ced8:	ed93 7b00 	vldr	d7, [r3]
 800cedc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cee0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cee4:	eeb0 8a47 	vmov.f32	s16, s14
 800cee8:	eef0 8a67 	vmov.f32	s17, s15
 800ceec:	d016      	beq.n	800cf1c <_dtoa_r+0x384>
 800ceee:	4bbc      	ldr	r3, [pc, #752]	; (800d1e0 <_dtoa_r+0x648>)
 800cef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cef8:	f7f3 fcb8 	bl	800086c <__aeabi_ddiv>
 800cefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf00:	f007 070f 	and.w	r7, r7, #15
 800cf04:	2503      	movs	r5, #3
 800cf06:	4eb6      	ldr	r6, [pc, #728]	; (800d1e0 <_dtoa_r+0x648>)
 800cf08:	b957      	cbnz	r7, 800cf20 <_dtoa_r+0x388>
 800cf0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf0e:	ec53 2b18 	vmov	r2, r3, d8
 800cf12:	f7f3 fcab 	bl	800086c <__aeabi_ddiv>
 800cf16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf1a:	e029      	b.n	800cf70 <_dtoa_r+0x3d8>
 800cf1c:	2502      	movs	r5, #2
 800cf1e:	e7f2      	b.n	800cf06 <_dtoa_r+0x36e>
 800cf20:	07f9      	lsls	r1, r7, #31
 800cf22:	d508      	bpl.n	800cf36 <_dtoa_r+0x39e>
 800cf24:	ec51 0b18 	vmov	r0, r1, d8
 800cf28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf2c:	f7f3 fb74 	bl	8000618 <__aeabi_dmul>
 800cf30:	ec41 0b18 	vmov	d8, r0, r1
 800cf34:	3501      	adds	r5, #1
 800cf36:	107f      	asrs	r7, r7, #1
 800cf38:	3608      	adds	r6, #8
 800cf3a:	e7e5      	b.n	800cf08 <_dtoa_r+0x370>
 800cf3c:	f000 80a6 	beq.w	800d08c <_dtoa_r+0x4f4>
 800cf40:	f1ca 0600 	rsb	r6, sl, #0
 800cf44:	4ba5      	ldr	r3, [pc, #660]	; (800d1dc <_dtoa_r+0x644>)
 800cf46:	4fa6      	ldr	r7, [pc, #664]	; (800d1e0 <_dtoa_r+0x648>)
 800cf48:	f006 020f 	and.w	r2, r6, #15
 800cf4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf58:	f7f3 fb5e 	bl	8000618 <__aeabi_dmul>
 800cf5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf60:	1136      	asrs	r6, r6, #4
 800cf62:	2300      	movs	r3, #0
 800cf64:	2502      	movs	r5, #2
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	f040 8085 	bne.w	800d076 <_dtoa_r+0x4de>
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1d2      	bne.n	800cf16 <_dtoa_r+0x37e>
 800cf70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 808c 	beq.w	800d090 <_dtoa_r+0x4f8>
 800cf78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf7c:	4b99      	ldr	r3, [pc, #612]	; (800d1e4 <_dtoa_r+0x64c>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4630      	mov	r0, r6
 800cf82:	4639      	mov	r1, r7
 800cf84:	f7f3 fdba 	bl	8000afc <__aeabi_dcmplt>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	f000 8081 	beq.w	800d090 <_dtoa_r+0x4f8>
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d07d      	beq.n	800d090 <_dtoa_r+0x4f8>
 800cf94:	f1b9 0f00 	cmp.w	r9, #0
 800cf98:	dd3c      	ble.n	800d014 <_dtoa_r+0x47c>
 800cf9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf9e:	9307      	str	r3, [sp, #28]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	4b91      	ldr	r3, [pc, #580]	; (800d1e8 <_dtoa_r+0x650>)
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	4639      	mov	r1, r7
 800cfa8:	f7f3 fb36 	bl	8000618 <__aeabi_dmul>
 800cfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cfb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f7f3 fac2 	bl	8000544 <__aeabi_i2d>
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	f7f3 fb28 	bl	8000618 <__aeabi_dmul>
 800cfc8:	4b88      	ldr	r3, [pc, #544]	; (800d1ec <_dtoa_r+0x654>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f7f3 f96e 	bl	80002ac <__adddf3>
 800cfd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cfd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfd8:	9303      	str	r3, [sp, #12]
 800cfda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d15c      	bne.n	800d09a <_dtoa_r+0x502>
 800cfe0:	4b83      	ldr	r3, [pc, #524]	; (800d1f0 <_dtoa_r+0x658>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f7f3 f95e 	bl	80002a8 <__aeabi_dsub>
 800cfec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cff0:	4606      	mov	r6, r0
 800cff2:	460f      	mov	r7, r1
 800cff4:	f7f3 fda0 	bl	8000b38 <__aeabi_dcmpgt>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	f040 8296 	bne.w	800d52a <_dtoa_r+0x992>
 800cffe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d002:	4630      	mov	r0, r6
 800d004:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d008:	4639      	mov	r1, r7
 800d00a:	f7f3 fd77 	bl	8000afc <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8288 	bne.w	800d524 <_dtoa_r+0x98c>
 800d014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d01c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f2c0 8158 	blt.w	800d2d4 <_dtoa_r+0x73c>
 800d024:	f1ba 0f0e 	cmp.w	sl, #14
 800d028:	f300 8154 	bgt.w	800d2d4 <_dtoa_r+0x73c>
 800d02c:	4b6b      	ldr	r3, [pc, #428]	; (800d1dc <_dtoa_r+0x644>)
 800d02e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d032:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f280 80e3 	bge.w	800d204 <_dtoa_r+0x66c>
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f300 80df 	bgt.w	800d204 <_dtoa_r+0x66c>
 800d046:	f040 826d 	bne.w	800d524 <_dtoa_r+0x98c>
 800d04a:	4b69      	ldr	r3, [pc, #420]	; (800d1f0 <_dtoa_r+0x658>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	4640      	mov	r0, r8
 800d050:	4649      	mov	r1, r9
 800d052:	f7f3 fae1 	bl	8000618 <__aeabi_dmul>
 800d056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d05a:	f7f3 fd63 	bl	8000b24 <__aeabi_dcmpge>
 800d05e:	9e01      	ldr	r6, [sp, #4]
 800d060:	4637      	mov	r7, r6
 800d062:	2800      	cmp	r0, #0
 800d064:	f040 8243 	bne.w	800d4ee <_dtoa_r+0x956>
 800d068:	9d00      	ldr	r5, [sp, #0]
 800d06a:	2331      	movs	r3, #49	; 0x31
 800d06c:	f805 3b01 	strb.w	r3, [r5], #1
 800d070:	f10a 0a01 	add.w	sl, sl, #1
 800d074:	e23f      	b.n	800d4f6 <_dtoa_r+0x95e>
 800d076:	07f2      	lsls	r2, r6, #31
 800d078:	d505      	bpl.n	800d086 <_dtoa_r+0x4ee>
 800d07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07e:	f7f3 facb 	bl	8000618 <__aeabi_dmul>
 800d082:	3501      	adds	r5, #1
 800d084:	2301      	movs	r3, #1
 800d086:	1076      	asrs	r6, r6, #1
 800d088:	3708      	adds	r7, #8
 800d08a:	e76c      	b.n	800cf66 <_dtoa_r+0x3ce>
 800d08c:	2502      	movs	r5, #2
 800d08e:	e76f      	b.n	800cf70 <_dtoa_r+0x3d8>
 800d090:	9b01      	ldr	r3, [sp, #4]
 800d092:	f8cd a01c 	str.w	sl, [sp, #28]
 800d096:	930c      	str	r3, [sp, #48]	; 0x30
 800d098:	e78d      	b.n	800cfb6 <_dtoa_r+0x41e>
 800d09a:	9900      	ldr	r1, [sp, #0]
 800d09c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0a0:	4b4e      	ldr	r3, [pc, #312]	; (800d1dc <_dtoa_r+0x644>)
 800d0a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0a6:	4401      	add	r1, r0
 800d0a8:	9102      	str	r1, [sp, #8]
 800d0aa:	9908      	ldr	r1, [sp, #32]
 800d0ac:	eeb0 8a47 	vmov.f32	s16, s14
 800d0b0:	eef0 8a67 	vmov.f32	s17, s15
 800d0b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	d045      	beq.n	800d14c <_dtoa_r+0x5b4>
 800d0c0:	494c      	ldr	r1, [pc, #304]	; (800d1f4 <_dtoa_r+0x65c>)
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f7f3 fbd2 	bl	800086c <__aeabi_ddiv>
 800d0c8:	ec53 2b18 	vmov	r2, r3, d8
 800d0cc:	f7f3 f8ec 	bl	80002a8 <__aeabi_dsub>
 800d0d0:	9d00      	ldr	r5, [sp, #0]
 800d0d2:	ec41 0b18 	vmov	d8, r0, r1
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f7f3 fd4d 	bl	8000b78 <__aeabi_d2iz>
 800d0de:	900c      	str	r0, [sp, #48]	; 0x30
 800d0e0:	f7f3 fa30 	bl	8000544 <__aeabi_i2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	f7f3 f8dc 	bl	80002a8 <__aeabi_dsub>
 800d0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0f2:	3330      	adds	r3, #48	; 0x30
 800d0f4:	f805 3b01 	strb.w	r3, [r5], #1
 800d0f8:	ec53 2b18 	vmov	r2, r3, d8
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460f      	mov	r7, r1
 800d100:	f7f3 fcfc 	bl	8000afc <__aeabi_dcmplt>
 800d104:	2800      	cmp	r0, #0
 800d106:	d165      	bne.n	800d1d4 <_dtoa_r+0x63c>
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	4935      	ldr	r1, [pc, #212]	; (800d1e4 <_dtoa_r+0x64c>)
 800d10e:	2000      	movs	r0, #0
 800d110:	f7f3 f8ca 	bl	80002a8 <__aeabi_dsub>
 800d114:	ec53 2b18 	vmov	r2, r3, d8
 800d118:	f7f3 fcf0 	bl	8000afc <__aeabi_dcmplt>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f040 80b9 	bne.w	800d294 <_dtoa_r+0x6fc>
 800d122:	9b02      	ldr	r3, [sp, #8]
 800d124:	429d      	cmp	r5, r3
 800d126:	f43f af75 	beq.w	800d014 <_dtoa_r+0x47c>
 800d12a:	4b2f      	ldr	r3, [pc, #188]	; (800d1e8 <_dtoa_r+0x650>)
 800d12c:	ec51 0b18 	vmov	r0, r1, d8
 800d130:	2200      	movs	r2, #0
 800d132:	f7f3 fa71 	bl	8000618 <__aeabi_dmul>
 800d136:	4b2c      	ldr	r3, [pc, #176]	; (800d1e8 <_dtoa_r+0x650>)
 800d138:	ec41 0b18 	vmov	d8, r0, r1
 800d13c:	2200      	movs	r2, #0
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	f7f3 fa69 	bl	8000618 <__aeabi_dmul>
 800d146:	4606      	mov	r6, r0
 800d148:	460f      	mov	r7, r1
 800d14a:	e7c4      	b.n	800d0d6 <_dtoa_r+0x53e>
 800d14c:	ec51 0b17 	vmov	r0, r1, d7
 800d150:	f7f3 fa62 	bl	8000618 <__aeabi_dmul>
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	9d00      	ldr	r5, [sp, #0]
 800d158:	930c      	str	r3, [sp, #48]	; 0x30
 800d15a:	ec41 0b18 	vmov	d8, r0, r1
 800d15e:	4639      	mov	r1, r7
 800d160:	4630      	mov	r0, r6
 800d162:	f7f3 fd09 	bl	8000b78 <__aeabi_d2iz>
 800d166:	9011      	str	r0, [sp, #68]	; 0x44
 800d168:	f7f3 f9ec 	bl	8000544 <__aeabi_i2d>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4630      	mov	r0, r6
 800d172:	4639      	mov	r1, r7
 800d174:	f7f3 f898 	bl	80002a8 <__aeabi_dsub>
 800d178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d17a:	3330      	adds	r3, #48	; 0x30
 800d17c:	f805 3b01 	strb.w	r3, [r5], #1
 800d180:	9b02      	ldr	r3, [sp, #8]
 800d182:	429d      	cmp	r5, r3
 800d184:	4606      	mov	r6, r0
 800d186:	460f      	mov	r7, r1
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	d134      	bne.n	800d1f8 <_dtoa_r+0x660>
 800d18e:	4b19      	ldr	r3, [pc, #100]	; (800d1f4 <_dtoa_r+0x65c>)
 800d190:	ec51 0b18 	vmov	r0, r1, d8
 800d194:	f7f3 f88a 	bl	80002ac <__adddf3>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4630      	mov	r0, r6
 800d19e:	4639      	mov	r1, r7
 800d1a0:	f7f3 fcca 	bl	8000b38 <__aeabi_dcmpgt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d175      	bne.n	800d294 <_dtoa_r+0x6fc>
 800d1a8:	ec53 2b18 	vmov	r2, r3, d8
 800d1ac:	4911      	ldr	r1, [pc, #68]	; (800d1f4 <_dtoa_r+0x65c>)
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f7f3 f87a 	bl	80002a8 <__aeabi_dsub>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fc9e 	bl	8000afc <__aeabi_dcmplt>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	f43f af27 	beq.w	800d014 <_dtoa_r+0x47c>
 800d1c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1c8:	1e6b      	subs	r3, r5, #1
 800d1ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d1cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1d0:	2b30      	cmp	r3, #48	; 0x30
 800d1d2:	d0f8      	beq.n	800d1c6 <_dtoa_r+0x62e>
 800d1d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d1d8:	e04a      	b.n	800d270 <_dtoa_r+0x6d8>
 800d1da:	bf00      	nop
 800d1dc:	0800fb80 	.word	0x0800fb80
 800d1e0:	0800fb58 	.word	0x0800fb58
 800d1e4:	3ff00000 	.word	0x3ff00000
 800d1e8:	40240000 	.word	0x40240000
 800d1ec:	401c0000 	.word	0x401c0000
 800d1f0:	40140000 	.word	0x40140000
 800d1f4:	3fe00000 	.word	0x3fe00000
 800d1f8:	4baf      	ldr	r3, [pc, #700]	; (800d4b8 <_dtoa_r+0x920>)
 800d1fa:	f7f3 fa0d 	bl	8000618 <__aeabi_dmul>
 800d1fe:	4606      	mov	r6, r0
 800d200:	460f      	mov	r7, r1
 800d202:	e7ac      	b.n	800d15e <_dtoa_r+0x5c6>
 800d204:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d208:	9d00      	ldr	r5, [sp, #0]
 800d20a:	4642      	mov	r2, r8
 800d20c:	464b      	mov	r3, r9
 800d20e:	4630      	mov	r0, r6
 800d210:	4639      	mov	r1, r7
 800d212:	f7f3 fb2b 	bl	800086c <__aeabi_ddiv>
 800d216:	f7f3 fcaf 	bl	8000b78 <__aeabi_d2iz>
 800d21a:	9002      	str	r0, [sp, #8]
 800d21c:	f7f3 f992 	bl	8000544 <__aeabi_i2d>
 800d220:	4642      	mov	r2, r8
 800d222:	464b      	mov	r3, r9
 800d224:	f7f3 f9f8 	bl	8000618 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 f83a 	bl	80002a8 <__aeabi_dsub>
 800d234:	9e02      	ldr	r6, [sp, #8]
 800d236:	9f01      	ldr	r7, [sp, #4]
 800d238:	3630      	adds	r6, #48	; 0x30
 800d23a:	f805 6b01 	strb.w	r6, [r5], #1
 800d23e:	9e00      	ldr	r6, [sp, #0]
 800d240:	1bae      	subs	r6, r5, r6
 800d242:	42b7      	cmp	r7, r6
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	d137      	bne.n	800d2ba <_dtoa_r+0x722>
 800d24a:	f7f3 f82f 	bl	80002ac <__adddf3>
 800d24e:	4642      	mov	r2, r8
 800d250:	464b      	mov	r3, r9
 800d252:	4606      	mov	r6, r0
 800d254:	460f      	mov	r7, r1
 800d256:	f7f3 fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 800d25a:	b9c8      	cbnz	r0, 800d290 <_dtoa_r+0x6f8>
 800d25c:	4642      	mov	r2, r8
 800d25e:	464b      	mov	r3, r9
 800d260:	4630      	mov	r0, r6
 800d262:	4639      	mov	r1, r7
 800d264:	f7f3 fc40 	bl	8000ae8 <__aeabi_dcmpeq>
 800d268:	b110      	cbz	r0, 800d270 <_dtoa_r+0x6d8>
 800d26a:	9b02      	ldr	r3, [sp, #8]
 800d26c:	07d9      	lsls	r1, r3, #31
 800d26e:	d40f      	bmi.n	800d290 <_dtoa_r+0x6f8>
 800d270:	4620      	mov	r0, r4
 800d272:	4659      	mov	r1, fp
 800d274:	f000 ff34 	bl	800e0e0 <_Bfree>
 800d278:	2300      	movs	r3, #0
 800d27a:	702b      	strb	r3, [r5, #0]
 800d27c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d27e:	f10a 0001 	add.w	r0, sl, #1
 800d282:	6018      	str	r0, [r3, #0]
 800d284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d286:	2b00      	cmp	r3, #0
 800d288:	f43f acd8 	beq.w	800cc3c <_dtoa_r+0xa4>
 800d28c:	601d      	str	r5, [r3, #0]
 800d28e:	e4d5      	b.n	800cc3c <_dtoa_r+0xa4>
 800d290:	f8cd a01c 	str.w	sl, [sp, #28]
 800d294:	462b      	mov	r3, r5
 800d296:	461d      	mov	r5, r3
 800d298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d29c:	2a39      	cmp	r2, #57	; 0x39
 800d29e:	d108      	bne.n	800d2b2 <_dtoa_r+0x71a>
 800d2a0:	9a00      	ldr	r2, [sp, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d1f7      	bne.n	800d296 <_dtoa_r+0x6fe>
 800d2a6:	9a07      	ldr	r2, [sp, #28]
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	3201      	adds	r2, #1
 800d2ac:	9207      	str	r2, [sp, #28]
 800d2ae:	2230      	movs	r2, #48	; 0x30
 800d2b0:	700a      	strb	r2, [r1, #0]
 800d2b2:	781a      	ldrb	r2, [r3, #0]
 800d2b4:	3201      	adds	r2, #1
 800d2b6:	701a      	strb	r2, [r3, #0]
 800d2b8:	e78c      	b.n	800d1d4 <_dtoa_r+0x63c>
 800d2ba:	4b7f      	ldr	r3, [pc, #508]	; (800d4b8 <_dtoa_r+0x920>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f7f3 f9ab 	bl	8000618 <__aeabi_dmul>
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460f      	mov	r7, r1
 800d2ca:	f7f3 fc0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d09b      	beq.n	800d20a <_dtoa_r+0x672>
 800d2d2:	e7cd      	b.n	800d270 <_dtoa_r+0x6d8>
 800d2d4:	9a08      	ldr	r2, [sp, #32]
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	f000 80c4 	beq.w	800d464 <_dtoa_r+0x8cc>
 800d2dc:	9a05      	ldr	r2, [sp, #20]
 800d2de:	2a01      	cmp	r2, #1
 800d2e0:	f300 80a8 	bgt.w	800d434 <_dtoa_r+0x89c>
 800d2e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2e6:	2a00      	cmp	r2, #0
 800d2e8:	f000 80a0 	beq.w	800d42c <_dtoa_r+0x894>
 800d2ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2f0:	9e06      	ldr	r6, [sp, #24]
 800d2f2:	4645      	mov	r5, r8
 800d2f4:	9a04      	ldr	r2, [sp, #16]
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	441a      	add	r2, r3
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	4498      	add	r8, r3
 800d2fe:	9204      	str	r2, [sp, #16]
 800d300:	f000 fff4 	bl	800e2ec <__i2b>
 800d304:	4607      	mov	r7, r0
 800d306:	2d00      	cmp	r5, #0
 800d308:	dd0b      	ble.n	800d322 <_dtoa_r+0x78a>
 800d30a:	9b04      	ldr	r3, [sp, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dd08      	ble.n	800d322 <_dtoa_r+0x78a>
 800d310:	42ab      	cmp	r3, r5
 800d312:	9a04      	ldr	r2, [sp, #16]
 800d314:	bfa8      	it	ge
 800d316:	462b      	movge	r3, r5
 800d318:	eba8 0803 	sub.w	r8, r8, r3
 800d31c:	1aed      	subs	r5, r5, r3
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	9b06      	ldr	r3, [sp, #24]
 800d324:	b1fb      	cbz	r3, 800d366 <_dtoa_r+0x7ce>
 800d326:	9b08      	ldr	r3, [sp, #32]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 809f 	beq.w	800d46c <_dtoa_r+0x8d4>
 800d32e:	2e00      	cmp	r6, #0
 800d330:	dd11      	ble.n	800d356 <_dtoa_r+0x7be>
 800d332:	4639      	mov	r1, r7
 800d334:	4632      	mov	r2, r6
 800d336:	4620      	mov	r0, r4
 800d338:	f001 f894 	bl	800e464 <__pow5mult>
 800d33c:	465a      	mov	r2, fp
 800d33e:	4601      	mov	r1, r0
 800d340:	4607      	mov	r7, r0
 800d342:	4620      	mov	r0, r4
 800d344:	f000 ffe8 	bl	800e318 <__multiply>
 800d348:	4659      	mov	r1, fp
 800d34a:	9007      	str	r0, [sp, #28]
 800d34c:	4620      	mov	r0, r4
 800d34e:	f000 fec7 	bl	800e0e0 <_Bfree>
 800d352:	9b07      	ldr	r3, [sp, #28]
 800d354:	469b      	mov	fp, r3
 800d356:	9b06      	ldr	r3, [sp, #24]
 800d358:	1b9a      	subs	r2, r3, r6
 800d35a:	d004      	beq.n	800d366 <_dtoa_r+0x7ce>
 800d35c:	4659      	mov	r1, fp
 800d35e:	4620      	mov	r0, r4
 800d360:	f001 f880 	bl	800e464 <__pow5mult>
 800d364:	4683      	mov	fp, r0
 800d366:	2101      	movs	r1, #1
 800d368:	4620      	mov	r0, r4
 800d36a:	f000 ffbf 	bl	800e2ec <__i2b>
 800d36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d370:	2b00      	cmp	r3, #0
 800d372:	4606      	mov	r6, r0
 800d374:	dd7c      	ble.n	800d470 <_dtoa_r+0x8d8>
 800d376:	461a      	mov	r2, r3
 800d378:	4601      	mov	r1, r0
 800d37a:	4620      	mov	r0, r4
 800d37c:	f001 f872 	bl	800e464 <__pow5mult>
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	2b01      	cmp	r3, #1
 800d384:	4606      	mov	r6, r0
 800d386:	dd76      	ble.n	800d476 <_dtoa_r+0x8de>
 800d388:	2300      	movs	r3, #0
 800d38a:	9306      	str	r3, [sp, #24]
 800d38c:	6933      	ldr	r3, [r6, #16]
 800d38e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d392:	6918      	ldr	r0, [r3, #16]
 800d394:	f000 ff5a 	bl	800e24c <__hi0bits>
 800d398:	f1c0 0020 	rsb	r0, r0, #32
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	4418      	add	r0, r3
 800d3a0:	f010 001f 	ands.w	r0, r0, #31
 800d3a4:	f000 8086 	beq.w	800d4b4 <_dtoa_r+0x91c>
 800d3a8:	f1c0 0320 	rsb	r3, r0, #32
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	dd7f      	ble.n	800d4b0 <_dtoa_r+0x918>
 800d3b0:	f1c0 001c 	rsb	r0, r0, #28
 800d3b4:	9b04      	ldr	r3, [sp, #16]
 800d3b6:	4403      	add	r3, r0
 800d3b8:	4480      	add	r8, r0
 800d3ba:	4405      	add	r5, r0
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	f1b8 0f00 	cmp.w	r8, #0
 800d3c2:	dd05      	ble.n	800d3d0 <_dtoa_r+0x838>
 800d3c4:	4659      	mov	r1, fp
 800d3c6:	4642      	mov	r2, r8
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f001 f8a5 	bl	800e518 <__lshift>
 800d3ce:	4683      	mov	fp, r0
 800d3d0:	9b04      	ldr	r3, [sp, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd05      	ble.n	800d3e2 <_dtoa_r+0x84a>
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f001 f89c 	bl	800e518 <__lshift>
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d069      	beq.n	800d4bc <_dtoa_r+0x924>
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4658      	mov	r0, fp
 800d3ec:	f001 f900 	bl	800e5f0 <__mcmp>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	da63      	bge.n	800d4bc <_dtoa_r+0x924>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4659      	mov	r1, fp
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f000 fe92 	bl	800e124 <__multadd>
 800d400:	9b08      	ldr	r3, [sp, #32]
 800d402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d406:	4683      	mov	fp, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 818f 	beq.w	800d72c <_dtoa_r+0xb94>
 800d40e:	4639      	mov	r1, r7
 800d410:	2300      	movs	r3, #0
 800d412:	220a      	movs	r2, #10
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fe85 	bl	800e124 <__multadd>
 800d41a:	f1b9 0f00 	cmp.w	r9, #0
 800d41e:	4607      	mov	r7, r0
 800d420:	f300 808e 	bgt.w	800d540 <_dtoa_r+0x9a8>
 800d424:	9b05      	ldr	r3, [sp, #20]
 800d426:	2b02      	cmp	r3, #2
 800d428:	dc50      	bgt.n	800d4cc <_dtoa_r+0x934>
 800d42a:	e089      	b.n	800d540 <_dtoa_r+0x9a8>
 800d42c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d432:	e75d      	b.n	800d2f0 <_dtoa_r+0x758>
 800d434:	9b01      	ldr	r3, [sp, #4]
 800d436:	1e5e      	subs	r6, r3, #1
 800d438:	9b06      	ldr	r3, [sp, #24]
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	bfbf      	itttt	lt
 800d43e:	9b06      	ldrlt	r3, [sp, #24]
 800d440:	9606      	strlt	r6, [sp, #24]
 800d442:	1af2      	sublt	r2, r6, r3
 800d444:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d446:	bfb6      	itet	lt
 800d448:	189b      	addlt	r3, r3, r2
 800d44a:	1b9e      	subge	r6, r3, r6
 800d44c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d44e:	9b01      	ldr	r3, [sp, #4]
 800d450:	bfb8      	it	lt
 800d452:	2600      	movlt	r6, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfb5      	itete	lt
 800d458:	eba8 0503 	sublt.w	r5, r8, r3
 800d45c:	9b01      	ldrge	r3, [sp, #4]
 800d45e:	2300      	movlt	r3, #0
 800d460:	4645      	movge	r5, r8
 800d462:	e747      	b.n	800d2f4 <_dtoa_r+0x75c>
 800d464:	9e06      	ldr	r6, [sp, #24]
 800d466:	9f08      	ldr	r7, [sp, #32]
 800d468:	4645      	mov	r5, r8
 800d46a:	e74c      	b.n	800d306 <_dtoa_r+0x76e>
 800d46c:	9a06      	ldr	r2, [sp, #24]
 800d46e:	e775      	b.n	800d35c <_dtoa_r+0x7c4>
 800d470:	9b05      	ldr	r3, [sp, #20]
 800d472:	2b01      	cmp	r3, #1
 800d474:	dc18      	bgt.n	800d4a8 <_dtoa_r+0x910>
 800d476:	9b02      	ldr	r3, [sp, #8]
 800d478:	b9b3      	cbnz	r3, 800d4a8 <_dtoa_r+0x910>
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d480:	b9a3      	cbnz	r3, 800d4ac <_dtoa_r+0x914>
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	b12b      	cbz	r3, 800d49a <_dtoa_r+0x902>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	f108 0801 	add.w	r8, r8, #1
 800d498:	2301      	movs	r3, #1
 800d49a:	9306      	str	r3, [sp, #24]
 800d49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f47f af74 	bne.w	800d38c <_dtoa_r+0x7f4>
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e779      	b.n	800d39c <_dtoa_r+0x804>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e7f6      	b.n	800d49a <_dtoa_r+0x902>
 800d4ac:	9b02      	ldr	r3, [sp, #8]
 800d4ae:	e7f4      	b.n	800d49a <_dtoa_r+0x902>
 800d4b0:	d085      	beq.n	800d3be <_dtoa_r+0x826>
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	301c      	adds	r0, #28
 800d4b6:	e77d      	b.n	800d3b4 <_dtoa_r+0x81c>
 800d4b8:	40240000 	.word	0x40240000
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	dc38      	bgt.n	800d534 <_dtoa_r+0x99c>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	dd35      	ble.n	800d534 <_dtoa_r+0x99c>
 800d4c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d4cc:	f1b9 0f00 	cmp.w	r9, #0
 800d4d0:	d10d      	bne.n	800d4ee <_dtoa_r+0x956>
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	464b      	mov	r3, r9
 800d4d6:	2205      	movs	r2, #5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f000 fe23 	bl	800e124 <__multadd>
 800d4de:	4601      	mov	r1, r0
 800d4e0:	4606      	mov	r6, r0
 800d4e2:	4658      	mov	r0, fp
 800d4e4:	f001 f884 	bl	800e5f0 <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f73f adbd 	bgt.w	800d068 <_dtoa_r+0x4d0>
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	9d00      	ldr	r5, [sp, #0]
 800d4f2:	ea6f 0a03 	mvn.w	sl, r3
 800d4f6:	f04f 0800 	mov.w	r8, #0
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fdef 	bl	800e0e0 <_Bfree>
 800d502:	2f00      	cmp	r7, #0
 800d504:	f43f aeb4 	beq.w	800d270 <_dtoa_r+0x6d8>
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	d005      	beq.n	800d51a <_dtoa_r+0x982>
 800d50e:	45b8      	cmp	r8, r7
 800d510:	d003      	beq.n	800d51a <_dtoa_r+0x982>
 800d512:	4641      	mov	r1, r8
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fde3 	bl	800e0e0 <_Bfree>
 800d51a:	4639      	mov	r1, r7
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fddf 	bl	800e0e0 <_Bfree>
 800d522:	e6a5      	b.n	800d270 <_dtoa_r+0x6d8>
 800d524:	2600      	movs	r6, #0
 800d526:	4637      	mov	r7, r6
 800d528:	e7e1      	b.n	800d4ee <_dtoa_r+0x956>
 800d52a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d52c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d530:	4637      	mov	r7, r6
 800d532:	e599      	b.n	800d068 <_dtoa_r+0x4d0>
 800d534:	9b08      	ldr	r3, [sp, #32]
 800d536:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f000 80fd 	beq.w	800d73a <_dtoa_r+0xba2>
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd05      	ble.n	800d550 <_dtoa_r+0x9b8>
 800d544:	4639      	mov	r1, r7
 800d546:	462a      	mov	r2, r5
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 ffe5 	bl	800e518 <__lshift>
 800d54e:	4607      	mov	r7, r0
 800d550:	9b06      	ldr	r3, [sp, #24]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d05c      	beq.n	800d610 <_dtoa_r+0xa78>
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fd81 	bl	800e060 <_Balloc>
 800d55e:	4605      	mov	r5, r0
 800d560:	b928      	cbnz	r0, 800d56e <_dtoa_r+0x9d6>
 800d562:	4b80      	ldr	r3, [pc, #512]	; (800d764 <_dtoa_r+0xbcc>)
 800d564:	4602      	mov	r2, r0
 800d566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d56a:	f7ff bb2e 	b.w	800cbca <_dtoa_r+0x32>
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	f107 010c 	add.w	r1, r7, #12
 800d578:	300c      	adds	r0, #12
 800d57a:	f7fd fb67 	bl	800ac4c <memcpy>
 800d57e:	2201      	movs	r2, #1
 800d580:	4629      	mov	r1, r5
 800d582:	4620      	mov	r0, r4
 800d584:	f000 ffc8 	bl	800e518 <__lshift>
 800d588:	9b00      	ldr	r3, [sp, #0]
 800d58a:	3301      	adds	r3, #1
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	9b00      	ldr	r3, [sp, #0]
 800d590:	444b      	add	r3, r9
 800d592:	9307      	str	r3, [sp, #28]
 800d594:	9b02      	ldr	r3, [sp, #8]
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	46b8      	mov	r8, r7
 800d59c:	9306      	str	r3, [sp, #24]
 800d59e:	4607      	mov	r7, r0
 800d5a0:	9b01      	ldr	r3, [sp, #4]
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	4658      	mov	r0, fp
 800d5a8:	9302      	str	r3, [sp, #8]
 800d5aa:	f7ff fa67 	bl	800ca7c <quorem>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	3330      	adds	r3, #48	; 0x30
 800d5b2:	9004      	str	r0, [sp, #16]
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	4658      	mov	r0, fp
 800d5b8:	9308      	str	r3, [sp, #32]
 800d5ba:	f001 f819 	bl	800e5f0 <__mcmp>
 800d5be:	463a      	mov	r2, r7
 800d5c0:	4681      	mov	r9, r0
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f001 f82f 	bl	800e628 <__mdiff>
 800d5ca:	68c2      	ldr	r2, [r0, #12]
 800d5cc:	9b08      	ldr	r3, [sp, #32]
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	bb02      	cbnz	r2, 800d614 <_dtoa_r+0xa7c>
 800d5d2:	4601      	mov	r1, r0
 800d5d4:	4658      	mov	r0, fp
 800d5d6:	f001 f80b 	bl	800e5f0 <__mcmp>
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	4602      	mov	r2, r0
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d5e6:	f000 fd7b 	bl	800e0e0 <_Bfree>
 800d5ea:	9b05      	ldr	r3, [sp, #20]
 800d5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5ee:	9d01      	ldr	r5, [sp, #4]
 800d5f0:	ea43 0102 	orr.w	r1, r3, r2
 800d5f4:	9b06      	ldr	r3, [sp, #24]
 800d5f6:	430b      	orrs	r3, r1
 800d5f8:	9b08      	ldr	r3, [sp, #32]
 800d5fa:	d10d      	bne.n	800d618 <_dtoa_r+0xa80>
 800d5fc:	2b39      	cmp	r3, #57	; 0x39
 800d5fe:	d029      	beq.n	800d654 <_dtoa_r+0xabc>
 800d600:	f1b9 0f00 	cmp.w	r9, #0
 800d604:	dd01      	ble.n	800d60a <_dtoa_r+0xa72>
 800d606:	9b04      	ldr	r3, [sp, #16]
 800d608:	3331      	adds	r3, #49	; 0x31
 800d60a:	9a02      	ldr	r2, [sp, #8]
 800d60c:	7013      	strb	r3, [r2, #0]
 800d60e:	e774      	b.n	800d4fa <_dtoa_r+0x962>
 800d610:	4638      	mov	r0, r7
 800d612:	e7b9      	b.n	800d588 <_dtoa_r+0x9f0>
 800d614:	2201      	movs	r2, #1
 800d616:	e7e2      	b.n	800d5de <_dtoa_r+0xa46>
 800d618:	f1b9 0f00 	cmp.w	r9, #0
 800d61c:	db06      	blt.n	800d62c <_dtoa_r+0xa94>
 800d61e:	9905      	ldr	r1, [sp, #20]
 800d620:	ea41 0909 	orr.w	r9, r1, r9
 800d624:	9906      	ldr	r1, [sp, #24]
 800d626:	ea59 0101 	orrs.w	r1, r9, r1
 800d62a:	d120      	bne.n	800d66e <_dtoa_r+0xad6>
 800d62c:	2a00      	cmp	r2, #0
 800d62e:	ddec      	ble.n	800d60a <_dtoa_r+0xa72>
 800d630:	4659      	mov	r1, fp
 800d632:	2201      	movs	r2, #1
 800d634:	4620      	mov	r0, r4
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	f000 ff6e 	bl	800e518 <__lshift>
 800d63c:	4631      	mov	r1, r6
 800d63e:	4683      	mov	fp, r0
 800d640:	f000 ffd6 	bl	800e5f0 <__mcmp>
 800d644:	2800      	cmp	r0, #0
 800d646:	9b01      	ldr	r3, [sp, #4]
 800d648:	dc02      	bgt.n	800d650 <_dtoa_r+0xab8>
 800d64a:	d1de      	bne.n	800d60a <_dtoa_r+0xa72>
 800d64c:	07da      	lsls	r2, r3, #31
 800d64e:	d5dc      	bpl.n	800d60a <_dtoa_r+0xa72>
 800d650:	2b39      	cmp	r3, #57	; 0x39
 800d652:	d1d8      	bne.n	800d606 <_dtoa_r+0xa6e>
 800d654:	9a02      	ldr	r2, [sp, #8]
 800d656:	2339      	movs	r3, #57	; 0x39
 800d658:	7013      	strb	r3, [r2, #0]
 800d65a:	462b      	mov	r3, r5
 800d65c:	461d      	mov	r5, r3
 800d65e:	3b01      	subs	r3, #1
 800d660:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d664:	2a39      	cmp	r2, #57	; 0x39
 800d666:	d050      	beq.n	800d70a <_dtoa_r+0xb72>
 800d668:	3201      	adds	r2, #1
 800d66a:	701a      	strb	r2, [r3, #0]
 800d66c:	e745      	b.n	800d4fa <_dtoa_r+0x962>
 800d66e:	2a00      	cmp	r2, #0
 800d670:	dd03      	ble.n	800d67a <_dtoa_r+0xae2>
 800d672:	2b39      	cmp	r3, #57	; 0x39
 800d674:	d0ee      	beq.n	800d654 <_dtoa_r+0xabc>
 800d676:	3301      	adds	r3, #1
 800d678:	e7c7      	b.n	800d60a <_dtoa_r+0xa72>
 800d67a:	9a01      	ldr	r2, [sp, #4]
 800d67c:	9907      	ldr	r1, [sp, #28]
 800d67e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d682:	428a      	cmp	r2, r1
 800d684:	d02a      	beq.n	800d6dc <_dtoa_r+0xb44>
 800d686:	4659      	mov	r1, fp
 800d688:	2300      	movs	r3, #0
 800d68a:	220a      	movs	r2, #10
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fd49 	bl	800e124 <__multadd>
 800d692:	45b8      	cmp	r8, r7
 800d694:	4683      	mov	fp, r0
 800d696:	f04f 0300 	mov.w	r3, #0
 800d69a:	f04f 020a 	mov.w	r2, #10
 800d69e:	4641      	mov	r1, r8
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	d107      	bne.n	800d6b4 <_dtoa_r+0xb1c>
 800d6a4:	f000 fd3e 	bl	800e124 <__multadd>
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	9b01      	ldr	r3, [sp, #4]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	e775      	b.n	800d5a0 <_dtoa_r+0xa08>
 800d6b4:	f000 fd36 	bl	800e124 <__multadd>
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	4680      	mov	r8, r0
 800d6bc:	2300      	movs	r3, #0
 800d6be:	220a      	movs	r2, #10
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fd2f 	bl	800e124 <__multadd>
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	e7f0      	b.n	800d6ac <_dtoa_r+0xb14>
 800d6ca:	f1b9 0f00 	cmp.w	r9, #0
 800d6ce:	9a00      	ldr	r2, [sp, #0]
 800d6d0:	bfcc      	ite	gt
 800d6d2:	464d      	movgt	r5, r9
 800d6d4:	2501      	movle	r5, #1
 800d6d6:	4415      	add	r5, r2
 800d6d8:	f04f 0800 	mov.w	r8, #0
 800d6dc:	4659      	mov	r1, fp
 800d6de:	2201      	movs	r2, #1
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	f000 ff18 	bl	800e518 <__lshift>
 800d6e8:	4631      	mov	r1, r6
 800d6ea:	4683      	mov	fp, r0
 800d6ec:	f000 ff80 	bl	800e5f0 <__mcmp>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	dcb2      	bgt.n	800d65a <_dtoa_r+0xac2>
 800d6f4:	d102      	bne.n	800d6fc <_dtoa_r+0xb64>
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	07db      	lsls	r3, r3, #31
 800d6fa:	d4ae      	bmi.n	800d65a <_dtoa_r+0xac2>
 800d6fc:	462b      	mov	r3, r5
 800d6fe:	461d      	mov	r5, r3
 800d700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d704:	2a30      	cmp	r2, #48	; 0x30
 800d706:	d0fa      	beq.n	800d6fe <_dtoa_r+0xb66>
 800d708:	e6f7      	b.n	800d4fa <_dtoa_r+0x962>
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d1a5      	bne.n	800d65c <_dtoa_r+0xac4>
 800d710:	f10a 0a01 	add.w	sl, sl, #1
 800d714:	2331      	movs	r3, #49	; 0x31
 800d716:	e779      	b.n	800d60c <_dtoa_r+0xa74>
 800d718:	4b13      	ldr	r3, [pc, #76]	; (800d768 <_dtoa_r+0xbd0>)
 800d71a:	f7ff baaf 	b.w	800cc7c <_dtoa_r+0xe4>
 800d71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d720:	2b00      	cmp	r3, #0
 800d722:	f47f aa86 	bne.w	800cc32 <_dtoa_r+0x9a>
 800d726:	4b11      	ldr	r3, [pc, #68]	; (800d76c <_dtoa_r+0xbd4>)
 800d728:	f7ff baa8 	b.w	800cc7c <_dtoa_r+0xe4>
 800d72c:	f1b9 0f00 	cmp.w	r9, #0
 800d730:	dc03      	bgt.n	800d73a <_dtoa_r+0xba2>
 800d732:	9b05      	ldr	r3, [sp, #20]
 800d734:	2b02      	cmp	r3, #2
 800d736:	f73f aec9 	bgt.w	800d4cc <_dtoa_r+0x934>
 800d73a:	9d00      	ldr	r5, [sp, #0]
 800d73c:	4631      	mov	r1, r6
 800d73e:	4658      	mov	r0, fp
 800d740:	f7ff f99c 	bl	800ca7c <quorem>
 800d744:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d748:	f805 3b01 	strb.w	r3, [r5], #1
 800d74c:	9a00      	ldr	r2, [sp, #0]
 800d74e:	1aaa      	subs	r2, r5, r2
 800d750:	4591      	cmp	r9, r2
 800d752:	ddba      	ble.n	800d6ca <_dtoa_r+0xb32>
 800d754:	4659      	mov	r1, fp
 800d756:	2300      	movs	r3, #0
 800d758:	220a      	movs	r2, #10
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fce2 	bl	800e124 <__multadd>
 800d760:	4683      	mov	fp, r0
 800d762:	e7eb      	b.n	800d73c <_dtoa_r+0xba4>
 800d764:	0800fa68 	.word	0x0800fa68
 800d768:	0800f82c 	.word	0x0800f82c
 800d76c:	0800f9e5 	.word	0x0800f9e5

0800d770 <__sflush_r>:
 800d770:	898a      	ldrh	r2, [r1, #12]
 800d772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d776:	4605      	mov	r5, r0
 800d778:	0710      	lsls	r0, r2, #28
 800d77a:	460c      	mov	r4, r1
 800d77c:	d458      	bmi.n	800d830 <__sflush_r+0xc0>
 800d77e:	684b      	ldr	r3, [r1, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	dc05      	bgt.n	800d790 <__sflush_r+0x20>
 800d784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d786:	2b00      	cmp	r3, #0
 800d788:	dc02      	bgt.n	800d790 <__sflush_r+0x20>
 800d78a:	2000      	movs	r0, #0
 800d78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d792:	2e00      	cmp	r6, #0
 800d794:	d0f9      	beq.n	800d78a <__sflush_r+0x1a>
 800d796:	2300      	movs	r3, #0
 800d798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d79c:	682f      	ldr	r7, [r5, #0]
 800d79e:	602b      	str	r3, [r5, #0]
 800d7a0:	d032      	beq.n	800d808 <__sflush_r+0x98>
 800d7a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	075a      	lsls	r2, r3, #29
 800d7a8:	d505      	bpl.n	800d7b6 <__sflush_r+0x46>
 800d7aa:	6863      	ldr	r3, [r4, #4]
 800d7ac:	1ac0      	subs	r0, r0, r3
 800d7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7b0:	b10b      	cbz	r3, 800d7b6 <__sflush_r+0x46>
 800d7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7b4:	1ac0      	subs	r0, r0, r3
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7bc:	6a21      	ldr	r1, [r4, #32]
 800d7be:	4628      	mov	r0, r5
 800d7c0:	47b0      	blx	r6
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	d106      	bne.n	800d7d6 <__sflush_r+0x66>
 800d7c8:	6829      	ldr	r1, [r5, #0]
 800d7ca:	291d      	cmp	r1, #29
 800d7cc:	d82c      	bhi.n	800d828 <__sflush_r+0xb8>
 800d7ce:	4a2a      	ldr	r2, [pc, #168]	; (800d878 <__sflush_r+0x108>)
 800d7d0:	40ca      	lsrs	r2, r1
 800d7d2:	07d6      	lsls	r6, r2, #31
 800d7d4:	d528      	bpl.n	800d828 <__sflush_r+0xb8>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	6062      	str	r2, [r4, #4]
 800d7da:	04d9      	lsls	r1, r3, #19
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	6022      	str	r2, [r4, #0]
 800d7e0:	d504      	bpl.n	800d7ec <__sflush_r+0x7c>
 800d7e2:	1c42      	adds	r2, r0, #1
 800d7e4:	d101      	bne.n	800d7ea <__sflush_r+0x7a>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	b903      	cbnz	r3, 800d7ec <__sflush_r+0x7c>
 800d7ea:	6560      	str	r0, [r4, #84]	; 0x54
 800d7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ee:	602f      	str	r7, [r5, #0]
 800d7f0:	2900      	cmp	r1, #0
 800d7f2:	d0ca      	beq.n	800d78a <__sflush_r+0x1a>
 800d7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7f8:	4299      	cmp	r1, r3
 800d7fa:	d002      	beq.n	800d802 <__sflush_r+0x92>
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f7fd fa55 	bl	800acac <_free_r>
 800d802:	2000      	movs	r0, #0
 800d804:	6360      	str	r0, [r4, #52]	; 0x34
 800d806:	e7c1      	b.n	800d78c <__sflush_r+0x1c>
 800d808:	6a21      	ldr	r1, [r4, #32]
 800d80a:	2301      	movs	r3, #1
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b0      	blx	r6
 800d810:	1c41      	adds	r1, r0, #1
 800d812:	d1c7      	bne.n	800d7a4 <__sflush_r+0x34>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d0c4      	beq.n	800d7a4 <__sflush_r+0x34>
 800d81a:	2b1d      	cmp	r3, #29
 800d81c:	d001      	beq.n	800d822 <__sflush_r+0xb2>
 800d81e:	2b16      	cmp	r3, #22
 800d820:	d101      	bne.n	800d826 <__sflush_r+0xb6>
 800d822:	602f      	str	r7, [r5, #0]
 800d824:	e7b1      	b.n	800d78a <__sflush_r+0x1a>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d82c:	81a3      	strh	r3, [r4, #12]
 800d82e:	e7ad      	b.n	800d78c <__sflush_r+0x1c>
 800d830:	690f      	ldr	r7, [r1, #16]
 800d832:	2f00      	cmp	r7, #0
 800d834:	d0a9      	beq.n	800d78a <__sflush_r+0x1a>
 800d836:	0793      	lsls	r3, r2, #30
 800d838:	680e      	ldr	r6, [r1, #0]
 800d83a:	bf08      	it	eq
 800d83c:	694b      	ldreq	r3, [r1, #20]
 800d83e:	600f      	str	r7, [r1, #0]
 800d840:	bf18      	it	ne
 800d842:	2300      	movne	r3, #0
 800d844:	eba6 0807 	sub.w	r8, r6, r7
 800d848:	608b      	str	r3, [r1, #8]
 800d84a:	f1b8 0f00 	cmp.w	r8, #0
 800d84e:	dd9c      	ble.n	800d78a <__sflush_r+0x1a>
 800d850:	6a21      	ldr	r1, [r4, #32]
 800d852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d854:	4643      	mov	r3, r8
 800d856:	463a      	mov	r2, r7
 800d858:	4628      	mov	r0, r5
 800d85a:	47b0      	blx	r6
 800d85c:	2800      	cmp	r0, #0
 800d85e:	dc06      	bgt.n	800d86e <__sflush_r+0xfe>
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d866:	81a3      	strh	r3, [r4, #12]
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	e78e      	b.n	800d78c <__sflush_r+0x1c>
 800d86e:	4407      	add	r7, r0
 800d870:	eba8 0800 	sub.w	r8, r8, r0
 800d874:	e7e9      	b.n	800d84a <__sflush_r+0xda>
 800d876:	bf00      	nop
 800d878:	20400001 	.word	0x20400001

0800d87c <_fflush_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	690b      	ldr	r3, [r1, #16]
 800d880:	4605      	mov	r5, r0
 800d882:	460c      	mov	r4, r1
 800d884:	b913      	cbnz	r3, 800d88c <_fflush_r+0x10>
 800d886:	2500      	movs	r5, #0
 800d888:	4628      	mov	r0, r5
 800d88a:	bd38      	pop	{r3, r4, r5, pc}
 800d88c:	b118      	cbz	r0, 800d896 <_fflush_r+0x1a>
 800d88e:	6983      	ldr	r3, [r0, #24]
 800d890:	b90b      	cbnz	r3, 800d896 <_fflush_r+0x1a>
 800d892:	f7fd f905 	bl	800aaa0 <__sinit>
 800d896:	4b14      	ldr	r3, [pc, #80]	; (800d8e8 <_fflush_r+0x6c>)
 800d898:	429c      	cmp	r4, r3
 800d89a:	d11b      	bne.n	800d8d4 <_fflush_r+0x58>
 800d89c:	686c      	ldr	r4, [r5, #4]
 800d89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0ef      	beq.n	800d886 <_fflush_r+0xa>
 800d8a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8a8:	07d0      	lsls	r0, r2, #31
 800d8aa:	d404      	bmi.n	800d8b6 <_fflush_r+0x3a>
 800d8ac:	0599      	lsls	r1, r3, #22
 800d8ae:	d402      	bmi.n	800d8b6 <_fflush_r+0x3a>
 800d8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8b2:	f7fd f9b8 	bl	800ac26 <__retarget_lock_acquire_recursive>
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	f7ff ff59 	bl	800d770 <__sflush_r>
 800d8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c0:	07da      	lsls	r2, r3, #31
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	d4e0      	bmi.n	800d888 <_fflush_r+0xc>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	059b      	lsls	r3, r3, #22
 800d8ca:	d4dd      	bmi.n	800d888 <_fflush_r+0xc>
 800d8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ce:	f7fd f9ab 	bl	800ac28 <__retarget_lock_release_recursive>
 800d8d2:	e7d9      	b.n	800d888 <_fflush_r+0xc>
 800d8d4:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <_fflush_r+0x70>)
 800d8d6:	429c      	cmp	r4, r3
 800d8d8:	d101      	bne.n	800d8de <_fflush_r+0x62>
 800d8da:	68ac      	ldr	r4, [r5, #8]
 800d8dc:	e7df      	b.n	800d89e <_fflush_r+0x22>
 800d8de:	4b04      	ldr	r3, [pc, #16]	; (800d8f0 <_fflush_r+0x74>)
 800d8e0:	429c      	cmp	r4, r3
 800d8e2:	bf08      	it	eq
 800d8e4:	68ec      	ldreq	r4, [r5, #12]
 800d8e6:	e7da      	b.n	800d89e <_fflush_r+0x22>
 800d8e8:	0800f7d8 	.word	0x0800f7d8
 800d8ec:	0800f7f8 	.word	0x0800f7f8
 800d8f0:	0800f7b8 	.word	0x0800f7b8

0800d8f4 <fiprintf>:
 800d8f4:	b40e      	push	{r1, r2, r3}
 800d8f6:	b503      	push	{r0, r1, lr}
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	ab03      	add	r3, sp, #12
 800d8fc:	4805      	ldr	r0, [pc, #20]	; (800d914 <fiprintf+0x20>)
 800d8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d902:	6800      	ldr	r0, [r0, #0]
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	f001 fa21 	bl	800ed4c <_vfiprintf_r>
 800d90a:	b002      	add	sp, #8
 800d90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d910:	b003      	add	sp, #12
 800d912:	4770      	bx	lr
 800d914:	20000034 	.word	0x20000034

0800d918 <rshift>:
 800d918:	6903      	ldr	r3, [r0, #16]
 800d91a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d91e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d922:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d926:	f100 0414 	add.w	r4, r0, #20
 800d92a:	dd45      	ble.n	800d9b8 <rshift+0xa0>
 800d92c:	f011 011f 	ands.w	r1, r1, #31
 800d930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d938:	d10c      	bne.n	800d954 <rshift+0x3c>
 800d93a:	f100 0710 	add.w	r7, r0, #16
 800d93e:	4629      	mov	r1, r5
 800d940:	42b1      	cmp	r1, r6
 800d942:	d334      	bcc.n	800d9ae <rshift+0x96>
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	1eea      	subs	r2, r5, #3
 800d94a:	4296      	cmp	r6, r2
 800d94c:	bf38      	it	cc
 800d94e:	2300      	movcc	r3, #0
 800d950:	4423      	add	r3, r4
 800d952:	e015      	b.n	800d980 <rshift+0x68>
 800d954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d958:	f1c1 0820 	rsb	r8, r1, #32
 800d95c:	40cf      	lsrs	r7, r1
 800d95e:	f105 0e04 	add.w	lr, r5, #4
 800d962:	46a1      	mov	r9, r4
 800d964:	4576      	cmp	r6, lr
 800d966:	46f4      	mov	ip, lr
 800d968:	d815      	bhi.n	800d996 <rshift+0x7e>
 800d96a:	1a9b      	subs	r3, r3, r2
 800d96c:	009a      	lsls	r2, r3, #2
 800d96e:	3a04      	subs	r2, #4
 800d970:	3501      	adds	r5, #1
 800d972:	42ae      	cmp	r6, r5
 800d974:	bf38      	it	cc
 800d976:	2200      	movcc	r2, #0
 800d978:	18a3      	adds	r3, r4, r2
 800d97a:	50a7      	str	r7, [r4, r2]
 800d97c:	b107      	cbz	r7, 800d980 <rshift+0x68>
 800d97e:	3304      	adds	r3, #4
 800d980:	1b1a      	subs	r2, r3, r4
 800d982:	42a3      	cmp	r3, r4
 800d984:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d988:	bf08      	it	eq
 800d98a:	2300      	moveq	r3, #0
 800d98c:	6102      	str	r2, [r0, #16]
 800d98e:	bf08      	it	eq
 800d990:	6143      	streq	r3, [r0, #20]
 800d992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d996:	f8dc c000 	ldr.w	ip, [ip]
 800d99a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d99e:	ea4c 0707 	orr.w	r7, ip, r7
 800d9a2:	f849 7b04 	str.w	r7, [r9], #4
 800d9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9aa:	40cf      	lsrs	r7, r1
 800d9ac:	e7da      	b.n	800d964 <rshift+0x4c>
 800d9ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9b6:	e7c3      	b.n	800d940 <rshift+0x28>
 800d9b8:	4623      	mov	r3, r4
 800d9ba:	e7e1      	b.n	800d980 <rshift+0x68>

0800d9bc <__hexdig_fun>:
 800d9bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9c0:	2b09      	cmp	r3, #9
 800d9c2:	d802      	bhi.n	800d9ca <__hexdig_fun+0xe>
 800d9c4:	3820      	subs	r0, #32
 800d9c6:	b2c0      	uxtb	r0, r0
 800d9c8:	4770      	bx	lr
 800d9ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9ce:	2b05      	cmp	r3, #5
 800d9d0:	d801      	bhi.n	800d9d6 <__hexdig_fun+0x1a>
 800d9d2:	3847      	subs	r0, #71	; 0x47
 800d9d4:	e7f7      	b.n	800d9c6 <__hexdig_fun+0xa>
 800d9d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9da:	2b05      	cmp	r3, #5
 800d9dc:	d801      	bhi.n	800d9e2 <__hexdig_fun+0x26>
 800d9de:	3827      	subs	r0, #39	; 0x27
 800d9e0:	e7f1      	b.n	800d9c6 <__hexdig_fun+0xa>
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <__gethex>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	ed2d 8b02 	vpush	{d8}
 800d9f0:	b089      	sub	sp, #36	; 0x24
 800d9f2:	ee08 0a10 	vmov	s16, r0
 800d9f6:	9304      	str	r3, [sp, #16]
 800d9f8:	4bbc      	ldr	r3, [pc, #752]	; (800dcec <__gethex+0x304>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	9301      	str	r3, [sp, #4]
 800d9fe:	4618      	mov	r0, r3
 800da00:	468b      	mov	fp, r1
 800da02:	4690      	mov	r8, r2
 800da04:	f7f2 fbf4 	bl	80001f0 <strlen>
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	f8db 2000 	ldr.w	r2, [fp]
 800da0e:	4403      	add	r3, r0
 800da10:	4682      	mov	sl, r0
 800da12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da16:	9305      	str	r3, [sp, #20]
 800da18:	1c93      	adds	r3, r2, #2
 800da1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800da1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800da22:	32fe      	adds	r2, #254	; 0xfe
 800da24:	18d1      	adds	r1, r2, r3
 800da26:	461f      	mov	r7, r3
 800da28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da2c:	9100      	str	r1, [sp, #0]
 800da2e:	2830      	cmp	r0, #48	; 0x30
 800da30:	d0f8      	beq.n	800da24 <__gethex+0x3c>
 800da32:	f7ff ffc3 	bl	800d9bc <__hexdig_fun>
 800da36:	4604      	mov	r4, r0
 800da38:	2800      	cmp	r0, #0
 800da3a:	d13a      	bne.n	800dab2 <__gethex+0xca>
 800da3c:	9901      	ldr	r1, [sp, #4]
 800da3e:	4652      	mov	r2, sl
 800da40:	4638      	mov	r0, r7
 800da42:	f7fe f914 	bl	800bc6e <strncmp>
 800da46:	4605      	mov	r5, r0
 800da48:	2800      	cmp	r0, #0
 800da4a:	d168      	bne.n	800db1e <__gethex+0x136>
 800da4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800da50:	eb07 060a 	add.w	r6, r7, sl
 800da54:	f7ff ffb2 	bl	800d9bc <__hexdig_fun>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d062      	beq.n	800db22 <__gethex+0x13a>
 800da5c:	4633      	mov	r3, r6
 800da5e:	7818      	ldrb	r0, [r3, #0]
 800da60:	2830      	cmp	r0, #48	; 0x30
 800da62:	461f      	mov	r7, r3
 800da64:	f103 0301 	add.w	r3, r3, #1
 800da68:	d0f9      	beq.n	800da5e <__gethex+0x76>
 800da6a:	f7ff ffa7 	bl	800d9bc <__hexdig_fun>
 800da6e:	2301      	movs	r3, #1
 800da70:	fab0 f480 	clz	r4, r0
 800da74:	0964      	lsrs	r4, r4, #5
 800da76:	4635      	mov	r5, r6
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	463a      	mov	r2, r7
 800da7c:	4616      	mov	r6, r2
 800da7e:	3201      	adds	r2, #1
 800da80:	7830      	ldrb	r0, [r6, #0]
 800da82:	f7ff ff9b 	bl	800d9bc <__hexdig_fun>
 800da86:	2800      	cmp	r0, #0
 800da88:	d1f8      	bne.n	800da7c <__gethex+0x94>
 800da8a:	9901      	ldr	r1, [sp, #4]
 800da8c:	4652      	mov	r2, sl
 800da8e:	4630      	mov	r0, r6
 800da90:	f7fe f8ed 	bl	800bc6e <strncmp>
 800da94:	b980      	cbnz	r0, 800dab8 <__gethex+0xd0>
 800da96:	b94d      	cbnz	r5, 800daac <__gethex+0xc4>
 800da98:	eb06 050a 	add.w	r5, r6, sl
 800da9c:	462a      	mov	r2, r5
 800da9e:	4616      	mov	r6, r2
 800daa0:	3201      	adds	r2, #1
 800daa2:	7830      	ldrb	r0, [r6, #0]
 800daa4:	f7ff ff8a 	bl	800d9bc <__hexdig_fun>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d1f8      	bne.n	800da9e <__gethex+0xb6>
 800daac:	1bad      	subs	r5, r5, r6
 800daae:	00ad      	lsls	r5, r5, #2
 800dab0:	e004      	b.n	800dabc <__gethex+0xd4>
 800dab2:	2400      	movs	r4, #0
 800dab4:	4625      	mov	r5, r4
 800dab6:	e7e0      	b.n	800da7a <__gethex+0x92>
 800dab8:	2d00      	cmp	r5, #0
 800daba:	d1f7      	bne.n	800daac <__gethex+0xc4>
 800dabc:	7833      	ldrb	r3, [r6, #0]
 800dabe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dac2:	2b50      	cmp	r3, #80	; 0x50
 800dac4:	d13b      	bne.n	800db3e <__gethex+0x156>
 800dac6:	7873      	ldrb	r3, [r6, #1]
 800dac8:	2b2b      	cmp	r3, #43	; 0x2b
 800daca:	d02c      	beq.n	800db26 <__gethex+0x13e>
 800dacc:	2b2d      	cmp	r3, #45	; 0x2d
 800dace:	d02e      	beq.n	800db2e <__gethex+0x146>
 800dad0:	1c71      	adds	r1, r6, #1
 800dad2:	f04f 0900 	mov.w	r9, #0
 800dad6:	7808      	ldrb	r0, [r1, #0]
 800dad8:	f7ff ff70 	bl	800d9bc <__hexdig_fun>
 800dadc:	1e43      	subs	r3, r0, #1
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b18      	cmp	r3, #24
 800dae2:	d82c      	bhi.n	800db3e <__gethex+0x156>
 800dae4:	f1a0 0210 	sub.w	r2, r0, #16
 800dae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800daec:	f7ff ff66 	bl	800d9bc <__hexdig_fun>
 800daf0:	1e43      	subs	r3, r0, #1
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b18      	cmp	r3, #24
 800daf6:	d91d      	bls.n	800db34 <__gethex+0x14c>
 800daf8:	f1b9 0f00 	cmp.w	r9, #0
 800dafc:	d000      	beq.n	800db00 <__gethex+0x118>
 800dafe:	4252      	negs	r2, r2
 800db00:	4415      	add	r5, r2
 800db02:	f8cb 1000 	str.w	r1, [fp]
 800db06:	b1e4      	cbz	r4, 800db42 <__gethex+0x15a>
 800db08:	9b00      	ldr	r3, [sp, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bf14      	ite	ne
 800db0e:	2700      	movne	r7, #0
 800db10:	2706      	moveq	r7, #6
 800db12:	4638      	mov	r0, r7
 800db14:	b009      	add	sp, #36	; 0x24
 800db16:	ecbd 8b02 	vpop	{d8}
 800db1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1e:	463e      	mov	r6, r7
 800db20:	4625      	mov	r5, r4
 800db22:	2401      	movs	r4, #1
 800db24:	e7ca      	b.n	800dabc <__gethex+0xd4>
 800db26:	f04f 0900 	mov.w	r9, #0
 800db2a:	1cb1      	adds	r1, r6, #2
 800db2c:	e7d3      	b.n	800dad6 <__gethex+0xee>
 800db2e:	f04f 0901 	mov.w	r9, #1
 800db32:	e7fa      	b.n	800db2a <__gethex+0x142>
 800db34:	230a      	movs	r3, #10
 800db36:	fb03 0202 	mla	r2, r3, r2, r0
 800db3a:	3a10      	subs	r2, #16
 800db3c:	e7d4      	b.n	800dae8 <__gethex+0x100>
 800db3e:	4631      	mov	r1, r6
 800db40:	e7df      	b.n	800db02 <__gethex+0x11a>
 800db42:	1bf3      	subs	r3, r6, r7
 800db44:	3b01      	subs	r3, #1
 800db46:	4621      	mov	r1, r4
 800db48:	2b07      	cmp	r3, #7
 800db4a:	dc0b      	bgt.n	800db64 <__gethex+0x17c>
 800db4c:	ee18 0a10 	vmov	r0, s16
 800db50:	f000 fa86 	bl	800e060 <_Balloc>
 800db54:	4604      	mov	r4, r0
 800db56:	b940      	cbnz	r0, 800db6a <__gethex+0x182>
 800db58:	4b65      	ldr	r3, [pc, #404]	; (800dcf0 <__gethex+0x308>)
 800db5a:	4602      	mov	r2, r0
 800db5c:	21de      	movs	r1, #222	; 0xde
 800db5e:	4865      	ldr	r0, [pc, #404]	; (800dcf4 <__gethex+0x30c>)
 800db60:	f7fe ff5e 	bl	800ca20 <__assert_func>
 800db64:	3101      	adds	r1, #1
 800db66:	105b      	asrs	r3, r3, #1
 800db68:	e7ee      	b.n	800db48 <__gethex+0x160>
 800db6a:	f100 0914 	add.w	r9, r0, #20
 800db6e:	f04f 0b00 	mov.w	fp, #0
 800db72:	f1ca 0301 	rsb	r3, sl, #1
 800db76:	f8cd 9008 	str.w	r9, [sp, #8]
 800db7a:	f8cd b000 	str.w	fp, [sp]
 800db7e:	9306      	str	r3, [sp, #24]
 800db80:	42b7      	cmp	r7, r6
 800db82:	d340      	bcc.n	800dc06 <__gethex+0x21e>
 800db84:	9802      	ldr	r0, [sp, #8]
 800db86:	9b00      	ldr	r3, [sp, #0]
 800db88:	f840 3b04 	str.w	r3, [r0], #4
 800db8c:	eba0 0009 	sub.w	r0, r0, r9
 800db90:	1080      	asrs	r0, r0, #2
 800db92:	0146      	lsls	r6, r0, #5
 800db94:	6120      	str	r0, [r4, #16]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fb58 	bl	800e24c <__hi0bits>
 800db9c:	1a30      	subs	r0, r6, r0
 800db9e:	f8d8 6000 	ldr.w	r6, [r8]
 800dba2:	42b0      	cmp	r0, r6
 800dba4:	dd63      	ble.n	800dc6e <__gethex+0x286>
 800dba6:	1b87      	subs	r7, r0, r6
 800dba8:	4639      	mov	r1, r7
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f000 fef2 	bl	800e994 <__any_on>
 800dbb0:	4682      	mov	sl, r0
 800dbb2:	b1a8      	cbz	r0, 800dbe0 <__gethex+0x1f8>
 800dbb4:	1e7b      	subs	r3, r7, #1
 800dbb6:	1159      	asrs	r1, r3, #5
 800dbb8:	f003 021f 	and.w	r2, r3, #31
 800dbbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dbc0:	f04f 0a01 	mov.w	sl, #1
 800dbc4:	fa0a f202 	lsl.w	r2, sl, r2
 800dbc8:	420a      	tst	r2, r1
 800dbca:	d009      	beq.n	800dbe0 <__gethex+0x1f8>
 800dbcc:	4553      	cmp	r3, sl
 800dbce:	dd05      	ble.n	800dbdc <__gethex+0x1f4>
 800dbd0:	1eb9      	subs	r1, r7, #2
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fede 	bl	800e994 <__any_on>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d145      	bne.n	800dc68 <__gethex+0x280>
 800dbdc:	f04f 0a02 	mov.w	sl, #2
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f7ff fe98 	bl	800d918 <rshift>
 800dbe8:	443d      	add	r5, r7
 800dbea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbee:	42ab      	cmp	r3, r5
 800dbf0:	da4c      	bge.n	800dc8c <__gethex+0x2a4>
 800dbf2:	ee18 0a10 	vmov	r0, s16
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	f000 fa72 	bl	800e0e0 <_Bfree>
 800dbfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	27a3      	movs	r7, #163	; 0xa3
 800dc04:	e785      	b.n	800db12 <__gethex+0x12a>
 800dc06:	1e73      	subs	r3, r6, #1
 800dc08:	9a05      	ldr	r2, [sp, #20]
 800dc0a:	9303      	str	r3, [sp, #12]
 800dc0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d019      	beq.n	800dc48 <__gethex+0x260>
 800dc14:	f1bb 0f20 	cmp.w	fp, #32
 800dc18:	d107      	bne.n	800dc2a <__gethex+0x242>
 800dc1a:	9b02      	ldr	r3, [sp, #8]
 800dc1c:	9a00      	ldr	r2, [sp, #0]
 800dc1e:	f843 2b04 	str.w	r2, [r3], #4
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	2300      	movs	r3, #0
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	469b      	mov	fp, r3
 800dc2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dc2e:	f7ff fec5 	bl	800d9bc <__hexdig_fun>
 800dc32:	9b00      	ldr	r3, [sp, #0]
 800dc34:	f000 000f 	and.w	r0, r0, #15
 800dc38:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc3c:	4303      	orrs	r3, r0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	f10b 0b04 	add.w	fp, fp, #4
 800dc44:	9b03      	ldr	r3, [sp, #12]
 800dc46:	e00d      	b.n	800dc64 <__gethex+0x27c>
 800dc48:	9b03      	ldr	r3, [sp, #12]
 800dc4a:	9a06      	ldr	r2, [sp, #24]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	42bb      	cmp	r3, r7
 800dc50:	d3e0      	bcc.n	800dc14 <__gethex+0x22c>
 800dc52:	4618      	mov	r0, r3
 800dc54:	9901      	ldr	r1, [sp, #4]
 800dc56:	9307      	str	r3, [sp, #28]
 800dc58:	4652      	mov	r2, sl
 800dc5a:	f7fe f808 	bl	800bc6e <strncmp>
 800dc5e:	9b07      	ldr	r3, [sp, #28]
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d1d7      	bne.n	800dc14 <__gethex+0x22c>
 800dc64:	461e      	mov	r6, r3
 800dc66:	e78b      	b.n	800db80 <__gethex+0x198>
 800dc68:	f04f 0a03 	mov.w	sl, #3
 800dc6c:	e7b8      	b.n	800dbe0 <__gethex+0x1f8>
 800dc6e:	da0a      	bge.n	800dc86 <__gethex+0x29e>
 800dc70:	1a37      	subs	r7, r6, r0
 800dc72:	4621      	mov	r1, r4
 800dc74:	ee18 0a10 	vmov	r0, s16
 800dc78:	463a      	mov	r2, r7
 800dc7a:	f000 fc4d 	bl	800e518 <__lshift>
 800dc7e:	1bed      	subs	r5, r5, r7
 800dc80:	4604      	mov	r4, r0
 800dc82:	f100 0914 	add.w	r9, r0, #20
 800dc86:	f04f 0a00 	mov.w	sl, #0
 800dc8a:	e7ae      	b.n	800dbea <__gethex+0x202>
 800dc8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc90:	42a8      	cmp	r0, r5
 800dc92:	dd72      	ble.n	800dd7a <__gethex+0x392>
 800dc94:	1b45      	subs	r5, r0, r5
 800dc96:	42ae      	cmp	r6, r5
 800dc98:	dc36      	bgt.n	800dd08 <__gethex+0x320>
 800dc9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d02a      	beq.n	800dcf8 <__gethex+0x310>
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d02c      	beq.n	800dd00 <__gethex+0x318>
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d115      	bne.n	800dcd6 <__gethex+0x2ee>
 800dcaa:	42ae      	cmp	r6, r5
 800dcac:	d113      	bne.n	800dcd6 <__gethex+0x2ee>
 800dcae:	2e01      	cmp	r6, #1
 800dcb0:	d10b      	bne.n	800dcca <__gethex+0x2e2>
 800dcb2:	9a04      	ldr	r2, [sp, #16]
 800dcb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	6123      	str	r3, [r4, #16]
 800dcbe:	f8c9 3000 	str.w	r3, [r9]
 800dcc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcc4:	2762      	movs	r7, #98	; 0x62
 800dcc6:	601c      	str	r4, [r3, #0]
 800dcc8:	e723      	b.n	800db12 <__gethex+0x12a>
 800dcca:	1e71      	subs	r1, r6, #1
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 fe61 	bl	800e994 <__any_on>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d1ed      	bne.n	800dcb2 <__gethex+0x2ca>
 800dcd6:	ee18 0a10 	vmov	r0, s16
 800dcda:	4621      	mov	r1, r4
 800dcdc:	f000 fa00 	bl	800e0e0 <_Bfree>
 800dce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dce2:	2300      	movs	r3, #0
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	2750      	movs	r7, #80	; 0x50
 800dce8:	e713      	b.n	800db12 <__gethex+0x12a>
 800dcea:	bf00      	nop
 800dcec:	0800fae4 	.word	0x0800fae4
 800dcf0:	0800fa68 	.word	0x0800fa68
 800dcf4:	0800fa79 	.word	0x0800fa79
 800dcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1eb      	bne.n	800dcd6 <__gethex+0x2ee>
 800dcfe:	e7d8      	b.n	800dcb2 <__gethex+0x2ca>
 800dd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1d5      	bne.n	800dcb2 <__gethex+0x2ca>
 800dd06:	e7e6      	b.n	800dcd6 <__gethex+0x2ee>
 800dd08:	1e6f      	subs	r7, r5, #1
 800dd0a:	f1ba 0f00 	cmp.w	sl, #0
 800dd0e:	d131      	bne.n	800dd74 <__gethex+0x38c>
 800dd10:	b127      	cbz	r7, 800dd1c <__gethex+0x334>
 800dd12:	4639      	mov	r1, r7
 800dd14:	4620      	mov	r0, r4
 800dd16:	f000 fe3d 	bl	800e994 <__any_on>
 800dd1a:	4682      	mov	sl, r0
 800dd1c:	117b      	asrs	r3, r7, #5
 800dd1e:	2101      	movs	r1, #1
 800dd20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dd24:	f007 071f 	and.w	r7, r7, #31
 800dd28:	fa01 f707 	lsl.w	r7, r1, r7
 800dd2c:	421f      	tst	r7, r3
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4620      	mov	r0, r4
 800dd32:	bf18      	it	ne
 800dd34:	f04a 0a02 	orrne.w	sl, sl, #2
 800dd38:	1b76      	subs	r6, r6, r5
 800dd3a:	f7ff fded 	bl	800d918 <rshift>
 800dd3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd42:	2702      	movs	r7, #2
 800dd44:	f1ba 0f00 	cmp.w	sl, #0
 800dd48:	d048      	beq.n	800dddc <__gethex+0x3f4>
 800dd4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d015      	beq.n	800dd7e <__gethex+0x396>
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d017      	beq.n	800dd86 <__gethex+0x39e>
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d109      	bne.n	800dd6e <__gethex+0x386>
 800dd5a:	f01a 0f02 	tst.w	sl, #2
 800dd5e:	d006      	beq.n	800dd6e <__gethex+0x386>
 800dd60:	f8d9 0000 	ldr.w	r0, [r9]
 800dd64:	ea4a 0a00 	orr.w	sl, sl, r0
 800dd68:	f01a 0f01 	tst.w	sl, #1
 800dd6c:	d10e      	bne.n	800dd8c <__gethex+0x3a4>
 800dd6e:	f047 0710 	orr.w	r7, r7, #16
 800dd72:	e033      	b.n	800dddc <__gethex+0x3f4>
 800dd74:	f04f 0a01 	mov.w	sl, #1
 800dd78:	e7d0      	b.n	800dd1c <__gethex+0x334>
 800dd7a:	2701      	movs	r7, #1
 800dd7c:	e7e2      	b.n	800dd44 <__gethex+0x35c>
 800dd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd80:	f1c3 0301 	rsb	r3, r3, #1
 800dd84:	9315      	str	r3, [sp, #84]	; 0x54
 800dd86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d0f0      	beq.n	800dd6e <__gethex+0x386>
 800dd8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd90:	f104 0314 	add.w	r3, r4, #20
 800dd94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd9c:	f04f 0c00 	mov.w	ip, #0
 800dda0:	4618      	mov	r0, r3
 800dda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ddaa:	d01c      	beq.n	800dde6 <__gethex+0x3fe>
 800ddac:	3201      	adds	r2, #1
 800ddae:	6002      	str	r2, [r0, #0]
 800ddb0:	2f02      	cmp	r7, #2
 800ddb2:	f104 0314 	add.w	r3, r4, #20
 800ddb6:	d13f      	bne.n	800de38 <__gethex+0x450>
 800ddb8:	f8d8 2000 	ldr.w	r2, [r8]
 800ddbc:	3a01      	subs	r2, #1
 800ddbe:	42b2      	cmp	r2, r6
 800ddc0:	d10a      	bne.n	800ddd8 <__gethex+0x3f0>
 800ddc2:	1171      	asrs	r1, r6, #5
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddca:	f006 061f 	and.w	r6, r6, #31
 800ddce:	fa02 f606 	lsl.w	r6, r2, r6
 800ddd2:	421e      	tst	r6, r3
 800ddd4:	bf18      	it	ne
 800ddd6:	4617      	movne	r7, r2
 800ddd8:	f047 0720 	orr.w	r7, r7, #32
 800dddc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddde:	601c      	str	r4, [r3, #0]
 800dde0:	9b04      	ldr	r3, [sp, #16]
 800dde2:	601d      	str	r5, [r3, #0]
 800dde4:	e695      	b.n	800db12 <__gethex+0x12a>
 800dde6:	4299      	cmp	r1, r3
 800dde8:	f843 cc04 	str.w	ip, [r3, #-4]
 800ddec:	d8d8      	bhi.n	800dda0 <__gethex+0x3b8>
 800ddee:	68a3      	ldr	r3, [r4, #8]
 800ddf0:	459b      	cmp	fp, r3
 800ddf2:	db19      	blt.n	800de28 <__gethex+0x440>
 800ddf4:	6861      	ldr	r1, [r4, #4]
 800ddf6:	ee18 0a10 	vmov	r0, s16
 800ddfa:	3101      	adds	r1, #1
 800ddfc:	f000 f930 	bl	800e060 <_Balloc>
 800de00:	4681      	mov	r9, r0
 800de02:	b918      	cbnz	r0, 800de0c <__gethex+0x424>
 800de04:	4b1a      	ldr	r3, [pc, #104]	; (800de70 <__gethex+0x488>)
 800de06:	4602      	mov	r2, r0
 800de08:	2184      	movs	r1, #132	; 0x84
 800de0a:	e6a8      	b.n	800db5e <__gethex+0x176>
 800de0c:	6922      	ldr	r2, [r4, #16]
 800de0e:	3202      	adds	r2, #2
 800de10:	f104 010c 	add.w	r1, r4, #12
 800de14:	0092      	lsls	r2, r2, #2
 800de16:	300c      	adds	r0, #12
 800de18:	f7fc ff18 	bl	800ac4c <memcpy>
 800de1c:	4621      	mov	r1, r4
 800de1e:	ee18 0a10 	vmov	r0, s16
 800de22:	f000 f95d 	bl	800e0e0 <_Bfree>
 800de26:	464c      	mov	r4, r9
 800de28:	6923      	ldr	r3, [r4, #16]
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de30:	6122      	str	r2, [r4, #16]
 800de32:	2201      	movs	r2, #1
 800de34:	615a      	str	r2, [r3, #20]
 800de36:	e7bb      	b.n	800ddb0 <__gethex+0x3c8>
 800de38:	6922      	ldr	r2, [r4, #16]
 800de3a:	455a      	cmp	r2, fp
 800de3c:	dd0b      	ble.n	800de56 <__gethex+0x46e>
 800de3e:	2101      	movs	r1, #1
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff fd69 	bl	800d918 <rshift>
 800de46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de4a:	3501      	adds	r5, #1
 800de4c:	42ab      	cmp	r3, r5
 800de4e:	f6ff aed0 	blt.w	800dbf2 <__gethex+0x20a>
 800de52:	2701      	movs	r7, #1
 800de54:	e7c0      	b.n	800ddd8 <__gethex+0x3f0>
 800de56:	f016 061f 	ands.w	r6, r6, #31
 800de5a:	d0fa      	beq.n	800de52 <__gethex+0x46a>
 800de5c:	449a      	add	sl, r3
 800de5e:	f1c6 0620 	rsb	r6, r6, #32
 800de62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800de66:	f000 f9f1 	bl	800e24c <__hi0bits>
 800de6a:	42b0      	cmp	r0, r6
 800de6c:	dbe7      	blt.n	800de3e <__gethex+0x456>
 800de6e:	e7f0      	b.n	800de52 <__gethex+0x46a>
 800de70:	0800fa68 	.word	0x0800fa68

0800de74 <L_shift>:
 800de74:	f1c2 0208 	rsb	r2, r2, #8
 800de78:	0092      	lsls	r2, r2, #2
 800de7a:	b570      	push	{r4, r5, r6, lr}
 800de7c:	f1c2 0620 	rsb	r6, r2, #32
 800de80:	6843      	ldr	r3, [r0, #4]
 800de82:	6804      	ldr	r4, [r0, #0]
 800de84:	fa03 f506 	lsl.w	r5, r3, r6
 800de88:	432c      	orrs	r4, r5
 800de8a:	40d3      	lsrs	r3, r2
 800de8c:	6004      	str	r4, [r0, #0]
 800de8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800de92:	4288      	cmp	r0, r1
 800de94:	d3f4      	bcc.n	800de80 <L_shift+0xc>
 800de96:	bd70      	pop	{r4, r5, r6, pc}

0800de98 <__match>:
 800de98:	b530      	push	{r4, r5, lr}
 800de9a:	6803      	ldr	r3, [r0, #0]
 800de9c:	3301      	adds	r3, #1
 800de9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dea2:	b914      	cbnz	r4, 800deaa <__match+0x12>
 800dea4:	6003      	str	r3, [r0, #0]
 800dea6:	2001      	movs	r0, #1
 800dea8:	bd30      	pop	{r4, r5, pc}
 800deaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800deb2:	2d19      	cmp	r5, #25
 800deb4:	bf98      	it	ls
 800deb6:	3220      	addls	r2, #32
 800deb8:	42a2      	cmp	r2, r4
 800deba:	d0f0      	beq.n	800de9e <__match+0x6>
 800debc:	2000      	movs	r0, #0
 800debe:	e7f3      	b.n	800dea8 <__match+0x10>

0800dec0 <__hexnan>:
 800dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec4:	680b      	ldr	r3, [r1, #0]
 800dec6:	6801      	ldr	r1, [r0, #0]
 800dec8:	115e      	asrs	r6, r3, #5
 800deca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dece:	f013 031f 	ands.w	r3, r3, #31
 800ded2:	b087      	sub	sp, #28
 800ded4:	bf18      	it	ne
 800ded6:	3604      	addne	r6, #4
 800ded8:	2500      	movs	r5, #0
 800deda:	1f37      	subs	r7, r6, #4
 800dedc:	4682      	mov	sl, r0
 800dede:	4690      	mov	r8, r2
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	f846 5c04 	str.w	r5, [r6, #-4]
 800dee6:	46b9      	mov	r9, r7
 800dee8:	463c      	mov	r4, r7
 800deea:	9502      	str	r5, [sp, #8]
 800deec:	46ab      	mov	fp, r5
 800deee:	784a      	ldrb	r2, [r1, #1]
 800def0:	1c4b      	adds	r3, r1, #1
 800def2:	9303      	str	r3, [sp, #12]
 800def4:	b342      	cbz	r2, 800df48 <__hexnan+0x88>
 800def6:	4610      	mov	r0, r2
 800def8:	9105      	str	r1, [sp, #20]
 800defa:	9204      	str	r2, [sp, #16]
 800defc:	f7ff fd5e 	bl	800d9bc <__hexdig_fun>
 800df00:	2800      	cmp	r0, #0
 800df02:	d14f      	bne.n	800dfa4 <__hexnan+0xe4>
 800df04:	9a04      	ldr	r2, [sp, #16]
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	2a20      	cmp	r2, #32
 800df0a:	d818      	bhi.n	800df3e <__hexnan+0x7e>
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	459b      	cmp	fp, r3
 800df10:	dd13      	ble.n	800df3a <__hexnan+0x7a>
 800df12:	454c      	cmp	r4, r9
 800df14:	d206      	bcs.n	800df24 <__hexnan+0x64>
 800df16:	2d07      	cmp	r5, #7
 800df18:	dc04      	bgt.n	800df24 <__hexnan+0x64>
 800df1a:	462a      	mov	r2, r5
 800df1c:	4649      	mov	r1, r9
 800df1e:	4620      	mov	r0, r4
 800df20:	f7ff ffa8 	bl	800de74 <L_shift>
 800df24:	4544      	cmp	r4, r8
 800df26:	d950      	bls.n	800dfca <__hexnan+0x10a>
 800df28:	2300      	movs	r3, #0
 800df2a:	f1a4 0904 	sub.w	r9, r4, #4
 800df2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800df32:	f8cd b008 	str.w	fp, [sp, #8]
 800df36:	464c      	mov	r4, r9
 800df38:	461d      	mov	r5, r3
 800df3a:	9903      	ldr	r1, [sp, #12]
 800df3c:	e7d7      	b.n	800deee <__hexnan+0x2e>
 800df3e:	2a29      	cmp	r2, #41	; 0x29
 800df40:	d156      	bne.n	800dff0 <__hexnan+0x130>
 800df42:	3102      	adds	r1, #2
 800df44:	f8ca 1000 	str.w	r1, [sl]
 800df48:	f1bb 0f00 	cmp.w	fp, #0
 800df4c:	d050      	beq.n	800dff0 <__hexnan+0x130>
 800df4e:	454c      	cmp	r4, r9
 800df50:	d206      	bcs.n	800df60 <__hexnan+0xa0>
 800df52:	2d07      	cmp	r5, #7
 800df54:	dc04      	bgt.n	800df60 <__hexnan+0xa0>
 800df56:	462a      	mov	r2, r5
 800df58:	4649      	mov	r1, r9
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7ff ff8a 	bl	800de74 <L_shift>
 800df60:	4544      	cmp	r4, r8
 800df62:	d934      	bls.n	800dfce <__hexnan+0x10e>
 800df64:	f1a8 0204 	sub.w	r2, r8, #4
 800df68:	4623      	mov	r3, r4
 800df6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800df6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800df72:	429f      	cmp	r7, r3
 800df74:	d2f9      	bcs.n	800df6a <__hexnan+0xaa>
 800df76:	1b3b      	subs	r3, r7, r4
 800df78:	f023 0303 	bic.w	r3, r3, #3
 800df7c:	3304      	adds	r3, #4
 800df7e:	3401      	adds	r4, #1
 800df80:	3e03      	subs	r6, #3
 800df82:	42b4      	cmp	r4, r6
 800df84:	bf88      	it	hi
 800df86:	2304      	movhi	r3, #4
 800df88:	4443      	add	r3, r8
 800df8a:	2200      	movs	r2, #0
 800df8c:	f843 2b04 	str.w	r2, [r3], #4
 800df90:	429f      	cmp	r7, r3
 800df92:	d2fb      	bcs.n	800df8c <__hexnan+0xcc>
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	b91b      	cbnz	r3, 800dfa0 <__hexnan+0xe0>
 800df98:	4547      	cmp	r7, r8
 800df9a:	d127      	bne.n	800dfec <__hexnan+0x12c>
 800df9c:	2301      	movs	r3, #1
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	2005      	movs	r0, #5
 800dfa2:	e026      	b.n	800dff2 <__hexnan+0x132>
 800dfa4:	3501      	adds	r5, #1
 800dfa6:	2d08      	cmp	r5, #8
 800dfa8:	f10b 0b01 	add.w	fp, fp, #1
 800dfac:	dd06      	ble.n	800dfbc <__hexnan+0xfc>
 800dfae:	4544      	cmp	r4, r8
 800dfb0:	d9c3      	bls.n	800df3a <__hexnan+0x7a>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfb8:	2501      	movs	r5, #1
 800dfba:	3c04      	subs	r4, #4
 800dfbc:	6822      	ldr	r2, [r4, #0]
 800dfbe:	f000 000f 	and.w	r0, r0, #15
 800dfc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	e7b7      	b.n	800df3a <__hexnan+0x7a>
 800dfca:	2508      	movs	r5, #8
 800dfcc:	e7b5      	b.n	800df3a <__hexnan+0x7a>
 800dfce:	9b01      	ldr	r3, [sp, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d0df      	beq.n	800df94 <__hexnan+0xd4>
 800dfd4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd8:	f1c3 0320 	rsb	r3, r3, #32
 800dfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfe4:	401a      	ands	r2, r3
 800dfe6:	f846 2c04 	str.w	r2, [r6, #-4]
 800dfea:	e7d3      	b.n	800df94 <__hexnan+0xd4>
 800dfec:	3f04      	subs	r7, #4
 800dfee:	e7d1      	b.n	800df94 <__hexnan+0xd4>
 800dff0:	2004      	movs	r0, #4
 800dff2:	b007      	add	sp, #28
 800dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dff8 <_localeconv_r>:
 800dff8:	4800      	ldr	r0, [pc, #0]	; (800dffc <_localeconv_r+0x4>)
 800dffa:	4770      	bx	lr
 800dffc:	2000018c 	.word	0x2000018c

0800e000 <_lseek_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d07      	ldr	r5, [pc, #28]	; (800e020 <_lseek_r+0x20>)
 800e004:	4604      	mov	r4, r0
 800e006:	4608      	mov	r0, r1
 800e008:	4611      	mov	r1, r2
 800e00a:	2200      	movs	r2, #0
 800e00c:	602a      	str	r2, [r5, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	f7f4 fcc8 	bl	80029a4 <_lseek>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d102      	bne.n	800e01e <_lseek_r+0x1e>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	b103      	cbz	r3, 800e01e <_lseek_r+0x1e>
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	20001180 	.word	0x20001180

0800e024 <__ascii_mbtowc>:
 800e024:	b082      	sub	sp, #8
 800e026:	b901      	cbnz	r1, 800e02a <__ascii_mbtowc+0x6>
 800e028:	a901      	add	r1, sp, #4
 800e02a:	b142      	cbz	r2, 800e03e <__ascii_mbtowc+0x1a>
 800e02c:	b14b      	cbz	r3, 800e042 <__ascii_mbtowc+0x1e>
 800e02e:	7813      	ldrb	r3, [r2, #0]
 800e030:	600b      	str	r3, [r1, #0]
 800e032:	7812      	ldrb	r2, [r2, #0]
 800e034:	1e10      	subs	r0, r2, #0
 800e036:	bf18      	it	ne
 800e038:	2001      	movne	r0, #1
 800e03a:	b002      	add	sp, #8
 800e03c:	4770      	bx	lr
 800e03e:	4610      	mov	r0, r2
 800e040:	e7fb      	b.n	800e03a <__ascii_mbtowc+0x16>
 800e042:	f06f 0001 	mvn.w	r0, #1
 800e046:	e7f8      	b.n	800e03a <__ascii_mbtowc+0x16>

0800e048 <__malloc_lock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_lock+0x8>)
 800e04a:	f7fc bdec 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	20001178 	.word	0x20001178

0800e054 <__malloc_unlock>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__malloc_unlock+0x8>)
 800e056:	f7fc bde7 	b.w	800ac28 <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	20001178 	.word	0x20001178

0800e060 <_Balloc>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	b976      	cbnz	r6, 800e088 <_Balloc+0x28>
 800e06a:	2010      	movs	r0, #16
 800e06c:	f7fc fdde 	bl	800ac2c <malloc>
 800e070:	4602      	mov	r2, r0
 800e072:	6260      	str	r0, [r4, #36]	; 0x24
 800e074:	b920      	cbnz	r0, 800e080 <_Balloc+0x20>
 800e076:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <_Balloc+0x78>)
 800e078:	4818      	ldr	r0, [pc, #96]	; (800e0dc <_Balloc+0x7c>)
 800e07a:	2166      	movs	r1, #102	; 0x66
 800e07c:	f7fe fcd0 	bl	800ca20 <__assert_func>
 800e080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e084:	6006      	str	r6, [r0, #0]
 800e086:	60c6      	str	r6, [r0, #12]
 800e088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e08a:	68f3      	ldr	r3, [r6, #12]
 800e08c:	b183      	cbz	r3, 800e0b0 <_Balloc+0x50>
 800e08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e096:	b9b8      	cbnz	r0, 800e0c8 <_Balloc+0x68>
 800e098:	2101      	movs	r1, #1
 800e09a:	fa01 f605 	lsl.w	r6, r1, r5
 800e09e:	1d72      	adds	r2, r6, #5
 800e0a0:	0092      	lsls	r2, r2, #2
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 fc97 	bl	800e9d6 <_calloc_r>
 800e0a8:	b160      	cbz	r0, 800e0c4 <_Balloc+0x64>
 800e0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0ae:	e00e      	b.n	800e0ce <_Balloc+0x6e>
 800e0b0:	2221      	movs	r2, #33	; 0x21
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fc8e 	bl	800e9d6 <_calloc_r>
 800e0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0bc:	60f0      	str	r0, [r6, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e4      	bne.n	800e08e <_Balloc+0x2e>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	bd70      	pop	{r4, r5, r6, pc}
 800e0c8:	6802      	ldr	r2, [r0, #0]
 800e0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0d4:	e7f7      	b.n	800e0c6 <_Balloc+0x66>
 800e0d6:	bf00      	nop
 800e0d8:	0800f9f2 	.word	0x0800f9f2
 800e0dc:	0800faf8 	.word	0x0800faf8

0800e0e0 <_Bfree>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	b976      	cbnz	r6, 800e108 <_Bfree+0x28>
 800e0ea:	2010      	movs	r0, #16
 800e0ec:	f7fc fd9e 	bl	800ac2c <malloc>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	6268      	str	r0, [r5, #36]	; 0x24
 800e0f4:	b920      	cbnz	r0, 800e100 <_Bfree+0x20>
 800e0f6:	4b09      	ldr	r3, [pc, #36]	; (800e11c <_Bfree+0x3c>)
 800e0f8:	4809      	ldr	r0, [pc, #36]	; (800e120 <_Bfree+0x40>)
 800e0fa:	218a      	movs	r1, #138	; 0x8a
 800e0fc:	f7fe fc90 	bl	800ca20 <__assert_func>
 800e100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e104:	6006      	str	r6, [r0, #0]
 800e106:	60c6      	str	r6, [r0, #12]
 800e108:	b13c      	cbz	r4, 800e11a <_Bfree+0x3a>
 800e10a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e10c:	6862      	ldr	r2, [r4, #4]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e114:	6021      	str	r1, [r4, #0]
 800e116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	0800f9f2 	.word	0x0800f9f2
 800e120:	0800faf8 	.word	0x0800faf8

0800e124 <__multadd>:
 800e124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e128:	690e      	ldr	r6, [r1, #16]
 800e12a:	4607      	mov	r7, r0
 800e12c:	4698      	mov	r8, r3
 800e12e:	460c      	mov	r4, r1
 800e130:	f101 0014 	add.w	r0, r1, #20
 800e134:	2300      	movs	r3, #0
 800e136:	6805      	ldr	r5, [r0, #0]
 800e138:	b2a9      	uxth	r1, r5
 800e13a:	fb02 8101 	mla	r1, r2, r1, r8
 800e13e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e142:	0c2d      	lsrs	r5, r5, #16
 800e144:	fb02 c505 	mla	r5, r2, r5, ip
 800e148:	b289      	uxth	r1, r1
 800e14a:	3301      	adds	r3, #1
 800e14c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e150:	429e      	cmp	r6, r3
 800e152:	f840 1b04 	str.w	r1, [r0], #4
 800e156:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e15a:	dcec      	bgt.n	800e136 <__multadd+0x12>
 800e15c:	f1b8 0f00 	cmp.w	r8, #0
 800e160:	d022      	beq.n	800e1a8 <__multadd+0x84>
 800e162:	68a3      	ldr	r3, [r4, #8]
 800e164:	42b3      	cmp	r3, r6
 800e166:	dc19      	bgt.n	800e19c <__multadd+0x78>
 800e168:	6861      	ldr	r1, [r4, #4]
 800e16a:	4638      	mov	r0, r7
 800e16c:	3101      	adds	r1, #1
 800e16e:	f7ff ff77 	bl	800e060 <_Balloc>
 800e172:	4605      	mov	r5, r0
 800e174:	b928      	cbnz	r0, 800e182 <__multadd+0x5e>
 800e176:	4602      	mov	r2, r0
 800e178:	4b0d      	ldr	r3, [pc, #52]	; (800e1b0 <__multadd+0x8c>)
 800e17a:	480e      	ldr	r0, [pc, #56]	; (800e1b4 <__multadd+0x90>)
 800e17c:	21b5      	movs	r1, #181	; 0xb5
 800e17e:	f7fe fc4f 	bl	800ca20 <__assert_func>
 800e182:	6922      	ldr	r2, [r4, #16]
 800e184:	3202      	adds	r2, #2
 800e186:	f104 010c 	add.w	r1, r4, #12
 800e18a:	0092      	lsls	r2, r2, #2
 800e18c:	300c      	adds	r0, #12
 800e18e:	f7fc fd5d 	bl	800ac4c <memcpy>
 800e192:	4621      	mov	r1, r4
 800e194:	4638      	mov	r0, r7
 800e196:	f7ff ffa3 	bl	800e0e0 <_Bfree>
 800e19a:	462c      	mov	r4, r5
 800e19c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e1a0:	3601      	adds	r6, #1
 800e1a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e1a6:	6126      	str	r6, [r4, #16]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ae:	bf00      	nop
 800e1b0:	0800fa68 	.word	0x0800fa68
 800e1b4:	0800faf8 	.word	0x0800faf8

0800e1b8 <__s2b>:
 800e1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1bc:	460c      	mov	r4, r1
 800e1be:	4615      	mov	r5, r2
 800e1c0:	461f      	mov	r7, r3
 800e1c2:	2209      	movs	r2, #9
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	db09      	blt.n	800e1e8 <__s2b+0x30>
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f7ff ff43 	bl	800e060 <_Balloc>
 800e1da:	b940      	cbnz	r0, 800e1ee <__s2b+0x36>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	4b19      	ldr	r3, [pc, #100]	; (800e244 <__s2b+0x8c>)
 800e1e0:	4819      	ldr	r0, [pc, #100]	; (800e248 <__s2b+0x90>)
 800e1e2:	21ce      	movs	r1, #206	; 0xce
 800e1e4:	f7fe fc1c 	bl	800ca20 <__assert_func>
 800e1e8:	0052      	lsls	r2, r2, #1
 800e1ea:	3101      	adds	r1, #1
 800e1ec:	e7f0      	b.n	800e1d0 <__s2b+0x18>
 800e1ee:	9b08      	ldr	r3, [sp, #32]
 800e1f0:	6143      	str	r3, [r0, #20]
 800e1f2:	2d09      	cmp	r5, #9
 800e1f4:	f04f 0301 	mov.w	r3, #1
 800e1f8:	6103      	str	r3, [r0, #16]
 800e1fa:	dd16      	ble.n	800e22a <__s2b+0x72>
 800e1fc:	f104 0909 	add.w	r9, r4, #9
 800e200:	46c8      	mov	r8, r9
 800e202:	442c      	add	r4, r5
 800e204:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e208:	4601      	mov	r1, r0
 800e20a:	3b30      	subs	r3, #48	; 0x30
 800e20c:	220a      	movs	r2, #10
 800e20e:	4630      	mov	r0, r6
 800e210:	f7ff ff88 	bl	800e124 <__multadd>
 800e214:	45a0      	cmp	r8, r4
 800e216:	d1f5      	bne.n	800e204 <__s2b+0x4c>
 800e218:	f1a5 0408 	sub.w	r4, r5, #8
 800e21c:	444c      	add	r4, r9
 800e21e:	1b2d      	subs	r5, r5, r4
 800e220:	1963      	adds	r3, r4, r5
 800e222:	42bb      	cmp	r3, r7
 800e224:	db04      	blt.n	800e230 <__s2b+0x78>
 800e226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22a:	340a      	adds	r4, #10
 800e22c:	2509      	movs	r5, #9
 800e22e:	e7f6      	b.n	800e21e <__s2b+0x66>
 800e230:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e234:	4601      	mov	r1, r0
 800e236:	3b30      	subs	r3, #48	; 0x30
 800e238:	220a      	movs	r2, #10
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7ff ff72 	bl	800e124 <__multadd>
 800e240:	e7ee      	b.n	800e220 <__s2b+0x68>
 800e242:	bf00      	nop
 800e244:	0800fa68 	.word	0x0800fa68
 800e248:	0800faf8 	.word	0x0800faf8

0800e24c <__hi0bits>:
 800e24c:	0c03      	lsrs	r3, r0, #16
 800e24e:	041b      	lsls	r3, r3, #16
 800e250:	b9d3      	cbnz	r3, 800e288 <__hi0bits+0x3c>
 800e252:	0400      	lsls	r0, r0, #16
 800e254:	2310      	movs	r3, #16
 800e256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e25a:	bf04      	itt	eq
 800e25c:	0200      	lsleq	r0, r0, #8
 800e25e:	3308      	addeq	r3, #8
 800e260:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e264:	bf04      	itt	eq
 800e266:	0100      	lsleq	r0, r0, #4
 800e268:	3304      	addeq	r3, #4
 800e26a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e26e:	bf04      	itt	eq
 800e270:	0080      	lsleq	r0, r0, #2
 800e272:	3302      	addeq	r3, #2
 800e274:	2800      	cmp	r0, #0
 800e276:	db05      	blt.n	800e284 <__hi0bits+0x38>
 800e278:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e27c:	f103 0301 	add.w	r3, r3, #1
 800e280:	bf08      	it	eq
 800e282:	2320      	moveq	r3, #32
 800e284:	4618      	mov	r0, r3
 800e286:	4770      	bx	lr
 800e288:	2300      	movs	r3, #0
 800e28a:	e7e4      	b.n	800e256 <__hi0bits+0xa>

0800e28c <__lo0bits>:
 800e28c:	6803      	ldr	r3, [r0, #0]
 800e28e:	f013 0207 	ands.w	r2, r3, #7
 800e292:	4601      	mov	r1, r0
 800e294:	d00b      	beq.n	800e2ae <__lo0bits+0x22>
 800e296:	07da      	lsls	r2, r3, #31
 800e298:	d424      	bmi.n	800e2e4 <__lo0bits+0x58>
 800e29a:	0798      	lsls	r0, r3, #30
 800e29c:	bf49      	itett	mi
 800e29e:	085b      	lsrmi	r3, r3, #1
 800e2a0:	089b      	lsrpl	r3, r3, #2
 800e2a2:	2001      	movmi	r0, #1
 800e2a4:	600b      	strmi	r3, [r1, #0]
 800e2a6:	bf5c      	itt	pl
 800e2a8:	600b      	strpl	r3, [r1, #0]
 800e2aa:	2002      	movpl	r0, #2
 800e2ac:	4770      	bx	lr
 800e2ae:	b298      	uxth	r0, r3
 800e2b0:	b9b0      	cbnz	r0, 800e2e0 <__lo0bits+0x54>
 800e2b2:	0c1b      	lsrs	r3, r3, #16
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e2ba:	bf04      	itt	eq
 800e2bc:	0a1b      	lsreq	r3, r3, #8
 800e2be:	3008      	addeq	r0, #8
 800e2c0:	071a      	lsls	r2, r3, #28
 800e2c2:	bf04      	itt	eq
 800e2c4:	091b      	lsreq	r3, r3, #4
 800e2c6:	3004      	addeq	r0, #4
 800e2c8:	079a      	lsls	r2, r3, #30
 800e2ca:	bf04      	itt	eq
 800e2cc:	089b      	lsreq	r3, r3, #2
 800e2ce:	3002      	addeq	r0, #2
 800e2d0:	07da      	lsls	r2, r3, #31
 800e2d2:	d403      	bmi.n	800e2dc <__lo0bits+0x50>
 800e2d4:	085b      	lsrs	r3, r3, #1
 800e2d6:	f100 0001 	add.w	r0, r0, #1
 800e2da:	d005      	beq.n	800e2e8 <__lo0bits+0x5c>
 800e2dc:	600b      	str	r3, [r1, #0]
 800e2de:	4770      	bx	lr
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	e7e8      	b.n	800e2b6 <__lo0bits+0x2a>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	4770      	bx	lr
 800e2e8:	2020      	movs	r0, #32
 800e2ea:	4770      	bx	lr

0800e2ec <__i2b>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	f7ff feb5 	bl	800e060 <_Balloc>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	b928      	cbnz	r0, 800e306 <__i2b+0x1a>
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <__i2b+0x24>)
 800e2fc:	4805      	ldr	r0, [pc, #20]	; (800e314 <__i2b+0x28>)
 800e2fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e302:	f7fe fb8d 	bl	800ca20 <__assert_func>
 800e306:	2301      	movs	r3, #1
 800e308:	6144      	str	r4, [r0, #20]
 800e30a:	6103      	str	r3, [r0, #16]
 800e30c:	bd10      	pop	{r4, pc}
 800e30e:	bf00      	nop
 800e310:	0800fa68 	.word	0x0800fa68
 800e314:	0800faf8 	.word	0x0800faf8

0800e318 <__multiply>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	4614      	mov	r4, r2
 800e31e:	690a      	ldr	r2, [r1, #16]
 800e320:	6923      	ldr	r3, [r4, #16]
 800e322:	429a      	cmp	r2, r3
 800e324:	bfb8      	it	lt
 800e326:	460b      	movlt	r3, r1
 800e328:	460d      	mov	r5, r1
 800e32a:	bfbc      	itt	lt
 800e32c:	4625      	movlt	r5, r4
 800e32e:	461c      	movlt	r4, r3
 800e330:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e334:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e338:	68ab      	ldr	r3, [r5, #8]
 800e33a:	6869      	ldr	r1, [r5, #4]
 800e33c:	eb0a 0709 	add.w	r7, sl, r9
 800e340:	42bb      	cmp	r3, r7
 800e342:	b085      	sub	sp, #20
 800e344:	bfb8      	it	lt
 800e346:	3101      	addlt	r1, #1
 800e348:	f7ff fe8a 	bl	800e060 <_Balloc>
 800e34c:	b930      	cbnz	r0, 800e35c <__multiply+0x44>
 800e34e:	4602      	mov	r2, r0
 800e350:	4b42      	ldr	r3, [pc, #264]	; (800e45c <__multiply+0x144>)
 800e352:	4843      	ldr	r0, [pc, #268]	; (800e460 <__multiply+0x148>)
 800e354:	f240 115d 	movw	r1, #349	; 0x15d
 800e358:	f7fe fb62 	bl	800ca20 <__assert_func>
 800e35c:	f100 0614 	add.w	r6, r0, #20
 800e360:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e364:	4633      	mov	r3, r6
 800e366:	2200      	movs	r2, #0
 800e368:	4543      	cmp	r3, r8
 800e36a:	d31e      	bcc.n	800e3aa <__multiply+0x92>
 800e36c:	f105 0c14 	add.w	ip, r5, #20
 800e370:	f104 0314 	add.w	r3, r4, #20
 800e374:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e378:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e37c:	9202      	str	r2, [sp, #8]
 800e37e:	ebac 0205 	sub.w	r2, ip, r5
 800e382:	3a15      	subs	r2, #21
 800e384:	f022 0203 	bic.w	r2, r2, #3
 800e388:	3204      	adds	r2, #4
 800e38a:	f105 0115 	add.w	r1, r5, #21
 800e38e:	458c      	cmp	ip, r1
 800e390:	bf38      	it	cc
 800e392:	2204      	movcc	r2, #4
 800e394:	9201      	str	r2, [sp, #4]
 800e396:	9a02      	ldr	r2, [sp, #8]
 800e398:	9303      	str	r3, [sp, #12]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d808      	bhi.n	800e3b0 <__multiply+0x98>
 800e39e:	2f00      	cmp	r7, #0
 800e3a0:	dc55      	bgt.n	800e44e <__multiply+0x136>
 800e3a2:	6107      	str	r7, [r0, #16]
 800e3a4:	b005      	add	sp, #20
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	f843 2b04 	str.w	r2, [r3], #4
 800e3ae:	e7db      	b.n	800e368 <__multiply+0x50>
 800e3b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3b4:	f1ba 0f00 	cmp.w	sl, #0
 800e3b8:	d020      	beq.n	800e3fc <__multiply+0xe4>
 800e3ba:	f105 0e14 	add.w	lr, r5, #20
 800e3be:	46b1      	mov	r9, r6
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e3c6:	f8d9 b000 	ldr.w	fp, [r9]
 800e3ca:	b2a1      	uxth	r1, r4
 800e3cc:	fa1f fb8b 	uxth.w	fp, fp
 800e3d0:	fb0a b101 	mla	r1, sl, r1, fp
 800e3d4:	4411      	add	r1, r2
 800e3d6:	f8d9 2000 	ldr.w	r2, [r9]
 800e3da:	0c24      	lsrs	r4, r4, #16
 800e3dc:	0c12      	lsrs	r2, r2, #16
 800e3de:	fb0a 2404 	mla	r4, sl, r4, r2
 800e3e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e3e6:	b289      	uxth	r1, r1
 800e3e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e3ec:	45f4      	cmp	ip, lr
 800e3ee:	f849 1b04 	str.w	r1, [r9], #4
 800e3f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e3f6:	d8e4      	bhi.n	800e3c2 <__multiply+0xaa>
 800e3f8:	9901      	ldr	r1, [sp, #4]
 800e3fa:	5072      	str	r2, [r6, r1]
 800e3fc:	9a03      	ldr	r2, [sp, #12]
 800e3fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e402:	3304      	adds	r3, #4
 800e404:	f1b9 0f00 	cmp.w	r9, #0
 800e408:	d01f      	beq.n	800e44a <__multiply+0x132>
 800e40a:	6834      	ldr	r4, [r6, #0]
 800e40c:	f105 0114 	add.w	r1, r5, #20
 800e410:	46b6      	mov	lr, r6
 800e412:	f04f 0a00 	mov.w	sl, #0
 800e416:	880a      	ldrh	r2, [r1, #0]
 800e418:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e41c:	fb09 b202 	mla	r2, r9, r2, fp
 800e420:	4492      	add	sl, r2
 800e422:	b2a4      	uxth	r4, r4
 800e424:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e428:	f84e 4b04 	str.w	r4, [lr], #4
 800e42c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e430:	f8be 2000 	ldrh.w	r2, [lr]
 800e434:	0c24      	lsrs	r4, r4, #16
 800e436:	fb09 2404 	mla	r4, r9, r4, r2
 800e43a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e43e:	458c      	cmp	ip, r1
 800e440:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e444:	d8e7      	bhi.n	800e416 <__multiply+0xfe>
 800e446:	9a01      	ldr	r2, [sp, #4]
 800e448:	50b4      	str	r4, [r6, r2]
 800e44a:	3604      	adds	r6, #4
 800e44c:	e7a3      	b.n	800e396 <__multiply+0x7e>
 800e44e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1a5      	bne.n	800e3a2 <__multiply+0x8a>
 800e456:	3f01      	subs	r7, #1
 800e458:	e7a1      	b.n	800e39e <__multiply+0x86>
 800e45a:	bf00      	nop
 800e45c:	0800fa68 	.word	0x0800fa68
 800e460:	0800faf8 	.word	0x0800faf8

0800e464 <__pow5mult>:
 800e464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e468:	4615      	mov	r5, r2
 800e46a:	f012 0203 	ands.w	r2, r2, #3
 800e46e:	4606      	mov	r6, r0
 800e470:	460f      	mov	r7, r1
 800e472:	d007      	beq.n	800e484 <__pow5mult+0x20>
 800e474:	4c25      	ldr	r4, [pc, #148]	; (800e50c <__pow5mult+0xa8>)
 800e476:	3a01      	subs	r2, #1
 800e478:	2300      	movs	r3, #0
 800e47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e47e:	f7ff fe51 	bl	800e124 <__multadd>
 800e482:	4607      	mov	r7, r0
 800e484:	10ad      	asrs	r5, r5, #2
 800e486:	d03d      	beq.n	800e504 <__pow5mult+0xa0>
 800e488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e48a:	b97c      	cbnz	r4, 800e4ac <__pow5mult+0x48>
 800e48c:	2010      	movs	r0, #16
 800e48e:	f7fc fbcd 	bl	800ac2c <malloc>
 800e492:	4602      	mov	r2, r0
 800e494:	6270      	str	r0, [r6, #36]	; 0x24
 800e496:	b928      	cbnz	r0, 800e4a4 <__pow5mult+0x40>
 800e498:	4b1d      	ldr	r3, [pc, #116]	; (800e510 <__pow5mult+0xac>)
 800e49a:	481e      	ldr	r0, [pc, #120]	; (800e514 <__pow5mult+0xb0>)
 800e49c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e4a0:	f7fe fabe 	bl	800ca20 <__assert_func>
 800e4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4a8:	6004      	str	r4, [r0, #0]
 800e4aa:	60c4      	str	r4, [r0, #12]
 800e4ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4b4:	b94c      	cbnz	r4, 800e4ca <__pow5mult+0x66>
 800e4b6:	f240 2171 	movw	r1, #625	; 0x271
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f7ff ff16 	bl	800e2ec <__i2b>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	6003      	str	r3, [r0, #0]
 800e4ca:	f04f 0900 	mov.w	r9, #0
 800e4ce:	07eb      	lsls	r3, r5, #31
 800e4d0:	d50a      	bpl.n	800e4e8 <__pow5mult+0x84>
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff ff1e 	bl	800e318 <__multiply>
 800e4dc:	4639      	mov	r1, r7
 800e4de:	4680      	mov	r8, r0
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff fdfd 	bl	800e0e0 <_Bfree>
 800e4e6:	4647      	mov	r7, r8
 800e4e8:	106d      	asrs	r5, r5, #1
 800e4ea:	d00b      	beq.n	800e504 <__pow5mult+0xa0>
 800e4ec:	6820      	ldr	r0, [r4, #0]
 800e4ee:	b938      	cbnz	r0, 800e500 <__pow5mult+0x9c>
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f7ff ff0f 	bl	800e318 <__multiply>
 800e4fa:	6020      	str	r0, [r4, #0]
 800e4fc:	f8c0 9000 	str.w	r9, [r0]
 800e500:	4604      	mov	r4, r0
 800e502:	e7e4      	b.n	800e4ce <__pow5mult+0x6a>
 800e504:	4638      	mov	r0, r7
 800e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e50a:	bf00      	nop
 800e50c:	0800fc48 	.word	0x0800fc48
 800e510:	0800f9f2 	.word	0x0800f9f2
 800e514:	0800faf8 	.word	0x0800faf8

0800e518 <__lshift>:
 800e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e51c:	460c      	mov	r4, r1
 800e51e:	6849      	ldr	r1, [r1, #4]
 800e520:	6923      	ldr	r3, [r4, #16]
 800e522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e526:	68a3      	ldr	r3, [r4, #8]
 800e528:	4607      	mov	r7, r0
 800e52a:	4691      	mov	r9, r2
 800e52c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e530:	f108 0601 	add.w	r6, r8, #1
 800e534:	42b3      	cmp	r3, r6
 800e536:	db0b      	blt.n	800e550 <__lshift+0x38>
 800e538:	4638      	mov	r0, r7
 800e53a:	f7ff fd91 	bl	800e060 <_Balloc>
 800e53e:	4605      	mov	r5, r0
 800e540:	b948      	cbnz	r0, 800e556 <__lshift+0x3e>
 800e542:	4602      	mov	r2, r0
 800e544:	4b28      	ldr	r3, [pc, #160]	; (800e5e8 <__lshift+0xd0>)
 800e546:	4829      	ldr	r0, [pc, #164]	; (800e5ec <__lshift+0xd4>)
 800e548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e54c:	f7fe fa68 	bl	800ca20 <__assert_func>
 800e550:	3101      	adds	r1, #1
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	e7ee      	b.n	800e534 <__lshift+0x1c>
 800e556:	2300      	movs	r3, #0
 800e558:	f100 0114 	add.w	r1, r0, #20
 800e55c:	f100 0210 	add.w	r2, r0, #16
 800e560:	4618      	mov	r0, r3
 800e562:	4553      	cmp	r3, sl
 800e564:	db33      	blt.n	800e5ce <__lshift+0xb6>
 800e566:	6920      	ldr	r0, [r4, #16]
 800e568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e56c:	f104 0314 	add.w	r3, r4, #20
 800e570:	f019 091f 	ands.w	r9, r9, #31
 800e574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e57c:	d02b      	beq.n	800e5d6 <__lshift+0xbe>
 800e57e:	f1c9 0e20 	rsb	lr, r9, #32
 800e582:	468a      	mov	sl, r1
 800e584:	2200      	movs	r2, #0
 800e586:	6818      	ldr	r0, [r3, #0]
 800e588:	fa00 f009 	lsl.w	r0, r0, r9
 800e58c:	4302      	orrs	r2, r0
 800e58e:	f84a 2b04 	str.w	r2, [sl], #4
 800e592:	f853 2b04 	ldr.w	r2, [r3], #4
 800e596:	459c      	cmp	ip, r3
 800e598:	fa22 f20e 	lsr.w	r2, r2, lr
 800e59c:	d8f3      	bhi.n	800e586 <__lshift+0x6e>
 800e59e:	ebac 0304 	sub.w	r3, ip, r4
 800e5a2:	3b15      	subs	r3, #21
 800e5a4:	f023 0303 	bic.w	r3, r3, #3
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	f104 0015 	add.w	r0, r4, #21
 800e5ae:	4584      	cmp	ip, r0
 800e5b0:	bf38      	it	cc
 800e5b2:	2304      	movcc	r3, #4
 800e5b4:	50ca      	str	r2, [r1, r3]
 800e5b6:	b10a      	cbz	r2, 800e5bc <__lshift+0xa4>
 800e5b8:	f108 0602 	add.w	r6, r8, #2
 800e5bc:	3e01      	subs	r6, #1
 800e5be:	4638      	mov	r0, r7
 800e5c0:	612e      	str	r6, [r5, #16]
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	f7ff fd8c 	bl	800e0e0 <_Bfree>
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	e7c5      	b.n	800e562 <__lshift+0x4a>
 800e5d6:	3904      	subs	r1, #4
 800e5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5e0:	459c      	cmp	ip, r3
 800e5e2:	d8f9      	bhi.n	800e5d8 <__lshift+0xc0>
 800e5e4:	e7ea      	b.n	800e5bc <__lshift+0xa4>
 800e5e6:	bf00      	nop
 800e5e8:	0800fa68 	.word	0x0800fa68
 800e5ec:	0800faf8 	.word	0x0800faf8

0800e5f0 <__mcmp>:
 800e5f0:	b530      	push	{r4, r5, lr}
 800e5f2:	6902      	ldr	r2, [r0, #16]
 800e5f4:	690c      	ldr	r4, [r1, #16]
 800e5f6:	1b12      	subs	r2, r2, r4
 800e5f8:	d10e      	bne.n	800e618 <__mcmp+0x28>
 800e5fa:	f100 0314 	add.w	r3, r0, #20
 800e5fe:	3114      	adds	r1, #20
 800e600:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e608:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e60c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e610:	42a5      	cmp	r5, r4
 800e612:	d003      	beq.n	800e61c <__mcmp+0x2c>
 800e614:	d305      	bcc.n	800e622 <__mcmp+0x32>
 800e616:	2201      	movs	r2, #1
 800e618:	4610      	mov	r0, r2
 800e61a:	bd30      	pop	{r4, r5, pc}
 800e61c:	4283      	cmp	r3, r0
 800e61e:	d3f3      	bcc.n	800e608 <__mcmp+0x18>
 800e620:	e7fa      	b.n	800e618 <__mcmp+0x28>
 800e622:	f04f 32ff 	mov.w	r2, #4294967295
 800e626:	e7f7      	b.n	800e618 <__mcmp+0x28>

0800e628 <__mdiff>:
 800e628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	460c      	mov	r4, r1
 800e62e:	4606      	mov	r6, r0
 800e630:	4611      	mov	r1, r2
 800e632:	4620      	mov	r0, r4
 800e634:	4617      	mov	r7, r2
 800e636:	f7ff ffdb 	bl	800e5f0 <__mcmp>
 800e63a:	1e05      	subs	r5, r0, #0
 800e63c:	d110      	bne.n	800e660 <__mdiff+0x38>
 800e63e:	4629      	mov	r1, r5
 800e640:	4630      	mov	r0, r6
 800e642:	f7ff fd0d 	bl	800e060 <_Balloc>
 800e646:	b930      	cbnz	r0, 800e656 <__mdiff+0x2e>
 800e648:	4b39      	ldr	r3, [pc, #228]	; (800e730 <__mdiff+0x108>)
 800e64a:	4602      	mov	r2, r0
 800e64c:	f240 2132 	movw	r1, #562	; 0x232
 800e650:	4838      	ldr	r0, [pc, #224]	; (800e734 <__mdiff+0x10c>)
 800e652:	f7fe f9e5 	bl	800ca20 <__assert_func>
 800e656:	2301      	movs	r3, #1
 800e658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e65c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e660:	bfa4      	itt	ge
 800e662:	463b      	movge	r3, r7
 800e664:	4627      	movge	r7, r4
 800e666:	4630      	mov	r0, r6
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	bfa6      	itte	ge
 800e66c:	461c      	movge	r4, r3
 800e66e:	2500      	movge	r5, #0
 800e670:	2501      	movlt	r5, #1
 800e672:	f7ff fcf5 	bl	800e060 <_Balloc>
 800e676:	b920      	cbnz	r0, 800e682 <__mdiff+0x5a>
 800e678:	4b2d      	ldr	r3, [pc, #180]	; (800e730 <__mdiff+0x108>)
 800e67a:	4602      	mov	r2, r0
 800e67c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e680:	e7e6      	b.n	800e650 <__mdiff+0x28>
 800e682:	693e      	ldr	r6, [r7, #16]
 800e684:	60c5      	str	r5, [r0, #12]
 800e686:	6925      	ldr	r5, [r4, #16]
 800e688:	f107 0114 	add.w	r1, r7, #20
 800e68c:	f104 0914 	add.w	r9, r4, #20
 800e690:	f100 0e14 	add.w	lr, r0, #20
 800e694:	f107 0210 	add.w	r2, r7, #16
 800e698:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e69c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e6a0:	46f2      	mov	sl, lr
 800e6a2:	2700      	movs	r7, #0
 800e6a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6ac:	fa1f f883 	uxth.w	r8, r3
 800e6b0:	fa17 f78b 	uxtah	r7, r7, fp
 800e6b4:	0c1b      	lsrs	r3, r3, #16
 800e6b6:	eba7 0808 	sub.w	r8, r7, r8
 800e6ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6c2:	fa1f f888 	uxth.w	r8, r8
 800e6c6:	141f      	asrs	r7, r3, #16
 800e6c8:	454d      	cmp	r5, r9
 800e6ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6ce:	f84a 3b04 	str.w	r3, [sl], #4
 800e6d2:	d8e7      	bhi.n	800e6a4 <__mdiff+0x7c>
 800e6d4:	1b2b      	subs	r3, r5, r4
 800e6d6:	3b15      	subs	r3, #21
 800e6d8:	f023 0303 	bic.w	r3, r3, #3
 800e6dc:	3304      	adds	r3, #4
 800e6de:	3415      	adds	r4, #21
 800e6e0:	42a5      	cmp	r5, r4
 800e6e2:	bf38      	it	cc
 800e6e4:	2304      	movcc	r3, #4
 800e6e6:	4419      	add	r1, r3
 800e6e8:	4473      	add	r3, lr
 800e6ea:	469e      	mov	lr, r3
 800e6ec:	460d      	mov	r5, r1
 800e6ee:	4565      	cmp	r5, ip
 800e6f0:	d30e      	bcc.n	800e710 <__mdiff+0xe8>
 800e6f2:	f10c 0203 	add.w	r2, ip, #3
 800e6f6:	1a52      	subs	r2, r2, r1
 800e6f8:	f022 0203 	bic.w	r2, r2, #3
 800e6fc:	3903      	subs	r1, #3
 800e6fe:	458c      	cmp	ip, r1
 800e700:	bf38      	it	cc
 800e702:	2200      	movcc	r2, #0
 800e704:	441a      	add	r2, r3
 800e706:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e70a:	b17b      	cbz	r3, 800e72c <__mdiff+0x104>
 800e70c:	6106      	str	r6, [r0, #16]
 800e70e:	e7a5      	b.n	800e65c <__mdiff+0x34>
 800e710:	f855 8b04 	ldr.w	r8, [r5], #4
 800e714:	fa17 f488 	uxtah	r4, r7, r8
 800e718:	1422      	asrs	r2, r4, #16
 800e71a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e71e:	b2a4      	uxth	r4, r4
 800e720:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e724:	f84e 4b04 	str.w	r4, [lr], #4
 800e728:	1417      	asrs	r7, r2, #16
 800e72a:	e7e0      	b.n	800e6ee <__mdiff+0xc6>
 800e72c:	3e01      	subs	r6, #1
 800e72e:	e7ea      	b.n	800e706 <__mdiff+0xde>
 800e730:	0800fa68 	.word	0x0800fa68
 800e734:	0800faf8 	.word	0x0800faf8

0800e738 <__ulp>:
 800e738:	b082      	sub	sp, #8
 800e73a:	ed8d 0b00 	vstr	d0, [sp]
 800e73e:	9b01      	ldr	r3, [sp, #4]
 800e740:	4912      	ldr	r1, [pc, #72]	; (800e78c <__ulp+0x54>)
 800e742:	4019      	ands	r1, r3
 800e744:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e748:	2900      	cmp	r1, #0
 800e74a:	dd05      	ble.n	800e758 <__ulp+0x20>
 800e74c:	2200      	movs	r2, #0
 800e74e:	460b      	mov	r3, r1
 800e750:	ec43 2b10 	vmov	d0, r2, r3
 800e754:	b002      	add	sp, #8
 800e756:	4770      	bx	lr
 800e758:	4249      	negs	r1, r1
 800e75a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e75e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e762:	f04f 0200 	mov.w	r2, #0
 800e766:	f04f 0300 	mov.w	r3, #0
 800e76a:	da04      	bge.n	800e776 <__ulp+0x3e>
 800e76c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e770:	fa41 f300 	asr.w	r3, r1, r0
 800e774:	e7ec      	b.n	800e750 <__ulp+0x18>
 800e776:	f1a0 0114 	sub.w	r1, r0, #20
 800e77a:	291e      	cmp	r1, #30
 800e77c:	bfda      	itte	le
 800e77e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e782:	fa20 f101 	lsrle.w	r1, r0, r1
 800e786:	2101      	movgt	r1, #1
 800e788:	460a      	mov	r2, r1
 800e78a:	e7e1      	b.n	800e750 <__ulp+0x18>
 800e78c:	7ff00000 	.word	0x7ff00000

0800e790 <__b2d>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	6905      	ldr	r5, [r0, #16]
 800e794:	f100 0714 	add.w	r7, r0, #20
 800e798:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e79c:	1f2e      	subs	r6, r5, #4
 800e79e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7ff fd52 	bl	800e24c <__hi0bits>
 800e7a8:	f1c0 0320 	rsb	r3, r0, #32
 800e7ac:	280a      	cmp	r0, #10
 800e7ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e82c <__b2d+0x9c>
 800e7b2:	600b      	str	r3, [r1, #0]
 800e7b4:	dc14      	bgt.n	800e7e0 <__b2d+0x50>
 800e7b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e7ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800e7be:	42b7      	cmp	r7, r6
 800e7c0:	ea41 030c 	orr.w	r3, r1, ip
 800e7c4:	bf34      	ite	cc
 800e7c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7ca:	2100      	movcs	r1, #0
 800e7cc:	3015      	adds	r0, #21
 800e7ce:	fa04 f000 	lsl.w	r0, r4, r0
 800e7d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e7d6:	ea40 0201 	orr.w	r2, r0, r1
 800e7da:	ec43 2b10 	vmov	d0, r2, r3
 800e7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e0:	42b7      	cmp	r7, r6
 800e7e2:	bf3a      	itte	cc
 800e7e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7e8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e7ec:	2100      	movcs	r1, #0
 800e7ee:	380b      	subs	r0, #11
 800e7f0:	d017      	beq.n	800e822 <__b2d+0x92>
 800e7f2:	f1c0 0c20 	rsb	ip, r0, #32
 800e7f6:	fa04 f500 	lsl.w	r5, r4, r0
 800e7fa:	42be      	cmp	r6, r7
 800e7fc:	fa21 f40c 	lsr.w	r4, r1, ip
 800e800:	ea45 0504 	orr.w	r5, r5, r4
 800e804:	bf8c      	ite	hi
 800e806:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e80a:	2400      	movls	r4, #0
 800e80c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e810:	fa01 f000 	lsl.w	r0, r1, r0
 800e814:	fa24 f40c 	lsr.w	r4, r4, ip
 800e818:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e81c:	ea40 0204 	orr.w	r2, r0, r4
 800e820:	e7db      	b.n	800e7da <__b2d+0x4a>
 800e822:	ea44 030c 	orr.w	r3, r4, ip
 800e826:	460a      	mov	r2, r1
 800e828:	e7d7      	b.n	800e7da <__b2d+0x4a>
 800e82a:	bf00      	nop
 800e82c:	3ff00000 	.word	0x3ff00000

0800e830 <__d2b>:
 800e830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e834:	4689      	mov	r9, r1
 800e836:	2101      	movs	r1, #1
 800e838:	ec57 6b10 	vmov	r6, r7, d0
 800e83c:	4690      	mov	r8, r2
 800e83e:	f7ff fc0f 	bl	800e060 <_Balloc>
 800e842:	4604      	mov	r4, r0
 800e844:	b930      	cbnz	r0, 800e854 <__d2b+0x24>
 800e846:	4602      	mov	r2, r0
 800e848:	4b25      	ldr	r3, [pc, #148]	; (800e8e0 <__d2b+0xb0>)
 800e84a:	4826      	ldr	r0, [pc, #152]	; (800e8e4 <__d2b+0xb4>)
 800e84c:	f240 310a 	movw	r1, #778	; 0x30a
 800e850:	f7fe f8e6 	bl	800ca20 <__assert_func>
 800e854:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e85c:	bb35      	cbnz	r5, 800e8ac <__d2b+0x7c>
 800e85e:	2e00      	cmp	r6, #0
 800e860:	9301      	str	r3, [sp, #4]
 800e862:	d028      	beq.n	800e8b6 <__d2b+0x86>
 800e864:	4668      	mov	r0, sp
 800e866:	9600      	str	r6, [sp, #0]
 800e868:	f7ff fd10 	bl	800e28c <__lo0bits>
 800e86c:	9900      	ldr	r1, [sp, #0]
 800e86e:	b300      	cbz	r0, 800e8b2 <__d2b+0x82>
 800e870:	9a01      	ldr	r2, [sp, #4]
 800e872:	f1c0 0320 	rsb	r3, r0, #32
 800e876:	fa02 f303 	lsl.w	r3, r2, r3
 800e87a:	430b      	orrs	r3, r1
 800e87c:	40c2      	lsrs	r2, r0
 800e87e:	6163      	str	r3, [r4, #20]
 800e880:	9201      	str	r2, [sp, #4]
 800e882:	9b01      	ldr	r3, [sp, #4]
 800e884:	61a3      	str	r3, [r4, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	bf14      	ite	ne
 800e88a:	2202      	movne	r2, #2
 800e88c:	2201      	moveq	r2, #1
 800e88e:	6122      	str	r2, [r4, #16]
 800e890:	b1d5      	cbz	r5, 800e8c8 <__d2b+0x98>
 800e892:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e896:	4405      	add	r5, r0
 800e898:	f8c9 5000 	str.w	r5, [r9]
 800e89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8a0:	f8c8 0000 	str.w	r0, [r8]
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	b003      	add	sp, #12
 800e8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8b0:	e7d5      	b.n	800e85e <__d2b+0x2e>
 800e8b2:	6161      	str	r1, [r4, #20]
 800e8b4:	e7e5      	b.n	800e882 <__d2b+0x52>
 800e8b6:	a801      	add	r0, sp, #4
 800e8b8:	f7ff fce8 	bl	800e28c <__lo0bits>
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	6163      	str	r3, [r4, #20]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	6122      	str	r2, [r4, #16]
 800e8c4:	3020      	adds	r0, #32
 800e8c6:	e7e3      	b.n	800e890 <__d2b+0x60>
 800e8c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8d0:	f8c9 0000 	str.w	r0, [r9]
 800e8d4:	6918      	ldr	r0, [r3, #16]
 800e8d6:	f7ff fcb9 	bl	800e24c <__hi0bits>
 800e8da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8de:	e7df      	b.n	800e8a0 <__d2b+0x70>
 800e8e0:	0800fa68 	.word	0x0800fa68
 800e8e4:	0800faf8 	.word	0x0800faf8

0800e8e8 <__ratio>:
 800e8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	4688      	mov	r8, r1
 800e8ee:	4669      	mov	r1, sp
 800e8f0:	4681      	mov	r9, r0
 800e8f2:	f7ff ff4d 	bl	800e790 <__b2d>
 800e8f6:	a901      	add	r1, sp, #4
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	ec55 4b10 	vmov	r4, r5, d0
 800e8fe:	f7ff ff47 	bl	800e790 <__b2d>
 800e902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e906:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e90a:	eba3 0c02 	sub.w	ip, r3, r2
 800e90e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e918:	ec51 0b10 	vmov	r0, r1, d0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	bfd6      	itet	le
 800e920:	460a      	movle	r2, r1
 800e922:	462a      	movgt	r2, r5
 800e924:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e928:	468b      	mov	fp, r1
 800e92a:	462f      	mov	r7, r5
 800e92c:	bfd4      	ite	le
 800e92e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e932:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e936:	4620      	mov	r0, r4
 800e938:	ee10 2a10 	vmov	r2, s0
 800e93c:	465b      	mov	r3, fp
 800e93e:	4639      	mov	r1, r7
 800e940:	f7f1 ff94 	bl	800086c <__aeabi_ddiv>
 800e944:	ec41 0b10 	vmov	d0, r0, r1
 800e948:	b003      	add	sp, #12
 800e94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e94e <__copybits>:
 800e94e:	3901      	subs	r1, #1
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	1149      	asrs	r1, r1, #5
 800e954:	6914      	ldr	r4, [r2, #16]
 800e956:	3101      	adds	r1, #1
 800e958:	f102 0314 	add.w	r3, r2, #20
 800e95c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e964:	1f05      	subs	r5, r0, #4
 800e966:	42a3      	cmp	r3, r4
 800e968:	d30c      	bcc.n	800e984 <__copybits+0x36>
 800e96a:	1aa3      	subs	r3, r4, r2
 800e96c:	3b11      	subs	r3, #17
 800e96e:	f023 0303 	bic.w	r3, r3, #3
 800e972:	3211      	adds	r2, #17
 800e974:	42a2      	cmp	r2, r4
 800e976:	bf88      	it	hi
 800e978:	2300      	movhi	r3, #0
 800e97a:	4418      	add	r0, r3
 800e97c:	2300      	movs	r3, #0
 800e97e:	4288      	cmp	r0, r1
 800e980:	d305      	bcc.n	800e98e <__copybits+0x40>
 800e982:	bd70      	pop	{r4, r5, r6, pc}
 800e984:	f853 6b04 	ldr.w	r6, [r3], #4
 800e988:	f845 6f04 	str.w	r6, [r5, #4]!
 800e98c:	e7eb      	b.n	800e966 <__copybits+0x18>
 800e98e:	f840 3b04 	str.w	r3, [r0], #4
 800e992:	e7f4      	b.n	800e97e <__copybits+0x30>

0800e994 <__any_on>:
 800e994:	f100 0214 	add.w	r2, r0, #20
 800e998:	6900      	ldr	r0, [r0, #16]
 800e99a:	114b      	asrs	r3, r1, #5
 800e99c:	4298      	cmp	r0, r3
 800e99e:	b510      	push	{r4, lr}
 800e9a0:	db11      	blt.n	800e9c6 <__any_on+0x32>
 800e9a2:	dd0a      	ble.n	800e9ba <__any_on+0x26>
 800e9a4:	f011 011f 	ands.w	r1, r1, #31
 800e9a8:	d007      	beq.n	800e9ba <__any_on+0x26>
 800e9aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9ae:	fa24 f001 	lsr.w	r0, r4, r1
 800e9b2:	fa00 f101 	lsl.w	r1, r0, r1
 800e9b6:	428c      	cmp	r4, r1
 800e9b8:	d10b      	bne.n	800e9d2 <__any_on+0x3e>
 800e9ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d803      	bhi.n	800e9ca <__any_on+0x36>
 800e9c2:	2000      	movs	r0, #0
 800e9c4:	bd10      	pop	{r4, pc}
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	e7f7      	b.n	800e9ba <__any_on+0x26>
 800e9ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9ce:	2900      	cmp	r1, #0
 800e9d0:	d0f5      	beq.n	800e9be <__any_on+0x2a>
 800e9d2:	2001      	movs	r0, #1
 800e9d4:	e7f6      	b.n	800e9c4 <__any_on+0x30>

0800e9d6 <_calloc_r>:
 800e9d6:	b513      	push	{r0, r1, r4, lr}
 800e9d8:	434a      	muls	r2, r1
 800e9da:	4611      	mov	r1, r2
 800e9dc:	9201      	str	r2, [sp, #4]
 800e9de:	f7fc f9b5 	bl	800ad4c <_malloc_r>
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	b118      	cbz	r0, 800e9ee <_calloc_r+0x18>
 800e9e6:	9a01      	ldr	r2, [sp, #4]
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	f7fc f957 	bl	800ac9c <memset>
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	b002      	add	sp, #8
 800e9f2:	bd10      	pop	{r4, pc}

0800e9f4 <_realloc_r>:
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	4614      	mov	r4, r2
 800e9fa:	460e      	mov	r6, r1
 800e9fc:	b921      	cbnz	r1, 800ea08 <_realloc_r+0x14>
 800e9fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ea02:	4611      	mov	r1, r2
 800ea04:	f7fc b9a2 	b.w	800ad4c <_malloc_r>
 800ea08:	b922      	cbnz	r2, 800ea14 <_realloc_r+0x20>
 800ea0a:	f7fc f94f 	bl	800acac <_free_r>
 800ea0e:	4625      	mov	r5, r4
 800ea10:	4628      	mov	r0, r5
 800ea12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea14:	f000 fc16 	bl	800f244 <_malloc_usable_size_r>
 800ea18:	42a0      	cmp	r0, r4
 800ea1a:	d20f      	bcs.n	800ea3c <_realloc_r+0x48>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f7fc f994 	bl	800ad4c <_malloc_r>
 800ea24:	4605      	mov	r5, r0
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d0f2      	beq.n	800ea10 <_realloc_r+0x1c>
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4622      	mov	r2, r4
 800ea2e:	f7fc f90d 	bl	800ac4c <memcpy>
 800ea32:	4631      	mov	r1, r6
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7fc f939 	bl	800acac <_free_r>
 800ea3a:	e7e9      	b.n	800ea10 <_realloc_r+0x1c>
 800ea3c:	4635      	mov	r5, r6
 800ea3e:	e7e7      	b.n	800ea10 <_realloc_r+0x1c>

0800ea40 <__ssputs_r>:
 800ea40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea44:	688e      	ldr	r6, [r1, #8]
 800ea46:	429e      	cmp	r6, r3
 800ea48:	4682      	mov	sl, r0
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	4690      	mov	r8, r2
 800ea4e:	461f      	mov	r7, r3
 800ea50:	d838      	bhi.n	800eac4 <__ssputs_r+0x84>
 800ea52:	898a      	ldrh	r2, [r1, #12]
 800ea54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea58:	d032      	beq.n	800eac0 <__ssputs_r+0x80>
 800ea5a:	6825      	ldr	r5, [r4, #0]
 800ea5c:	6909      	ldr	r1, [r1, #16]
 800ea5e:	eba5 0901 	sub.w	r9, r5, r1
 800ea62:	6965      	ldr	r5, [r4, #20]
 800ea64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	444b      	add	r3, r9
 800ea70:	106d      	asrs	r5, r5, #1
 800ea72:	429d      	cmp	r5, r3
 800ea74:	bf38      	it	cc
 800ea76:	461d      	movcc	r5, r3
 800ea78:	0553      	lsls	r3, r2, #21
 800ea7a:	d531      	bpl.n	800eae0 <__ssputs_r+0xa0>
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7fc f965 	bl	800ad4c <_malloc_r>
 800ea82:	4606      	mov	r6, r0
 800ea84:	b950      	cbnz	r0, 800ea9c <__ssputs_r+0x5c>
 800ea86:	230c      	movs	r3, #12
 800ea88:	f8ca 3000 	str.w	r3, [sl]
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea92:	81a3      	strh	r3, [r4, #12]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9c:	6921      	ldr	r1, [r4, #16]
 800ea9e:	464a      	mov	r2, r9
 800eaa0:	f7fc f8d4 	bl	800ac4c <memcpy>
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eaaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaae:	81a3      	strh	r3, [r4, #12]
 800eab0:	6126      	str	r6, [r4, #16]
 800eab2:	6165      	str	r5, [r4, #20]
 800eab4:	444e      	add	r6, r9
 800eab6:	eba5 0509 	sub.w	r5, r5, r9
 800eaba:	6026      	str	r6, [r4, #0]
 800eabc:	60a5      	str	r5, [r4, #8]
 800eabe:	463e      	mov	r6, r7
 800eac0:	42be      	cmp	r6, r7
 800eac2:	d900      	bls.n	800eac6 <__ssputs_r+0x86>
 800eac4:	463e      	mov	r6, r7
 800eac6:	4632      	mov	r2, r6
 800eac8:	6820      	ldr	r0, [r4, #0]
 800eaca:	4641      	mov	r1, r8
 800eacc:	f7fc f8cc 	bl	800ac68 <memmove>
 800ead0:	68a3      	ldr	r3, [r4, #8]
 800ead2:	6822      	ldr	r2, [r4, #0]
 800ead4:	1b9b      	subs	r3, r3, r6
 800ead6:	4432      	add	r2, r6
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	6022      	str	r2, [r4, #0]
 800eadc:	2000      	movs	r0, #0
 800eade:	e7db      	b.n	800ea98 <__ssputs_r+0x58>
 800eae0:	462a      	mov	r2, r5
 800eae2:	f7ff ff87 	bl	800e9f4 <_realloc_r>
 800eae6:	4606      	mov	r6, r0
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d1e1      	bne.n	800eab0 <__ssputs_r+0x70>
 800eaec:	6921      	ldr	r1, [r4, #16]
 800eaee:	4650      	mov	r0, sl
 800eaf0:	f7fc f8dc 	bl	800acac <_free_r>
 800eaf4:	e7c7      	b.n	800ea86 <__ssputs_r+0x46>
	...

0800eaf8 <_svfiprintf_r>:
 800eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafc:	4698      	mov	r8, r3
 800eafe:	898b      	ldrh	r3, [r1, #12]
 800eb00:	061b      	lsls	r3, r3, #24
 800eb02:	b09d      	sub	sp, #116	; 0x74
 800eb04:	4607      	mov	r7, r0
 800eb06:	460d      	mov	r5, r1
 800eb08:	4614      	mov	r4, r2
 800eb0a:	d50e      	bpl.n	800eb2a <_svfiprintf_r+0x32>
 800eb0c:	690b      	ldr	r3, [r1, #16]
 800eb0e:	b963      	cbnz	r3, 800eb2a <_svfiprintf_r+0x32>
 800eb10:	2140      	movs	r1, #64	; 0x40
 800eb12:	f7fc f91b 	bl	800ad4c <_malloc_r>
 800eb16:	6028      	str	r0, [r5, #0]
 800eb18:	6128      	str	r0, [r5, #16]
 800eb1a:	b920      	cbnz	r0, 800eb26 <_svfiprintf_r+0x2e>
 800eb1c:	230c      	movs	r3, #12
 800eb1e:	603b      	str	r3, [r7, #0]
 800eb20:	f04f 30ff 	mov.w	r0, #4294967295
 800eb24:	e0d1      	b.n	800ecca <_svfiprintf_r+0x1d2>
 800eb26:	2340      	movs	r3, #64	; 0x40
 800eb28:	616b      	str	r3, [r5, #20]
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb2e:	2320      	movs	r3, #32
 800eb30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb34:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb38:	2330      	movs	r3, #48	; 0x30
 800eb3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ece4 <_svfiprintf_r+0x1ec>
 800eb3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb42:	f04f 0901 	mov.w	r9, #1
 800eb46:	4623      	mov	r3, r4
 800eb48:	469a      	mov	sl, r3
 800eb4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb4e:	b10a      	cbz	r2, 800eb54 <_svfiprintf_r+0x5c>
 800eb50:	2a25      	cmp	r2, #37	; 0x25
 800eb52:	d1f9      	bne.n	800eb48 <_svfiprintf_r+0x50>
 800eb54:	ebba 0b04 	subs.w	fp, sl, r4
 800eb58:	d00b      	beq.n	800eb72 <_svfiprintf_r+0x7a>
 800eb5a:	465b      	mov	r3, fp
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	4629      	mov	r1, r5
 800eb60:	4638      	mov	r0, r7
 800eb62:	f7ff ff6d 	bl	800ea40 <__ssputs_r>
 800eb66:	3001      	adds	r0, #1
 800eb68:	f000 80aa 	beq.w	800ecc0 <_svfiprintf_r+0x1c8>
 800eb6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb6e:	445a      	add	r2, fp
 800eb70:	9209      	str	r2, [sp, #36]	; 0x24
 800eb72:	f89a 3000 	ldrb.w	r3, [sl]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f000 80a2 	beq.w	800ecc0 <_svfiprintf_r+0x1c8>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb86:	f10a 0a01 	add.w	sl, sl, #1
 800eb8a:	9304      	str	r3, [sp, #16]
 800eb8c:	9307      	str	r3, [sp, #28]
 800eb8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb92:	931a      	str	r3, [sp, #104]	; 0x68
 800eb94:	4654      	mov	r4, sl
 800eb96:	2205      	movs	r2, #5
 800eb98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb9c:	4851      	ldr	r0, [pc, #324]	; (800ece4 <_svfiprintf_r+0x1ec>)
 800eb9e:	f7f1 fb2f 	bl	8000200 <memchr>
 800eba2:	9a04      	ldr	r2, [sp, #16]
 800eba4:	b9d8      	cbnz	r0, 800ebde <_svfiprintf_r+0xe6>
 800eba6:	06d0      	lsls	r0, r2, #27
 800eba8:	bf44      	itt	mi
 800ebaa:	2320      	movmi	r3, #32
 800ebac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebb0:	0711      	lsls	r1, r2, #28
 800ebb2:	bf44      	itt	mi
 800ebb4:	232b      	movmi	r3, #43	; 0x2b
 800ebb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebba:	f89a 3000 	ldrb.w	r3, [sl]
 800ebbe:	2b2a      	cmp	r3, #42	; 0x2a
 800ebc0:	d015      	beq.n	800ebee <_svfiprintf_r+0xf6>
 800ebc2:	9a07      	ldr	r2, [sp, #28]
 800ebc4:	4654      	mov	r4, sl
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f04f 0c0a 	mov.w	ip, #10
 800ebcc:	4621      	mov	r1, r4
 800ebce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebd2:	3b30      	subs	r3, #48	; 0x30
 800ebd4:	2b09      	cmp	r3, #9
 800ebd6:	d94e      	bls.n	800ec76 <_svfiprintf_r+0x17e>
 800ebd8:	b1b0      	cbz	r0, 800ec08 <_svfiprintf_r+0x110>
 800ebda:	9207      	str	r2, [sp, #28]
 800ebdc:	e014      	b.n	800ec08 <_svfiprintf_r+0x110>
 800ebde:	eba0 0308 	sub.w	r3, r0, r8
 800ebe2:	fa09 f303 	lsl.w	r3, r9, r3
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	46a2      	mov	sl, r4
 800ebec:	e7d2      	b.n	800eb94 <_svfiprintf_r+0x9c>
 800ebee:	9b03      	ldr	r3, [sp, #12]
 800ebf0:	1d19      	adds	r1, r3, #4
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	9103      	str	r1, [sp, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bfbb      	ittet	lt
 800ebfa:	425b      	neglt	r3, r3
 800ebfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ec00:	9307      	strge	r3, [sp, #28]
 800ec02:	9307      	strlt	r3, [sp, #28]
 800ec04:	bfb8      	it	lt
 800ec06:	9204      	strlt	r2, [sp, #16]
 800ec08:	7823      	ldrb	r3, [r4, #0]
 800ec0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec0c:	d10c      	bne.n	800ec28 <_svfiprintf_r+0x130>
 800ec0e:	7863      	ldrb	r3, [r4, #1]
 800ec10:	2b2a      	cmp	r3, #42	; 0x2a
 800ec12:	d135      	bne.n	800ec80 <_svfiprintf_r+0x188>
 800ec14:	9b03      	ldr	r3, [sp, #12]
 800ec16:	1d1a      	adds	r2, r3, #4
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	9203      	str	r2, [sp, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	bfb8      	it	lt
 800ec20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec24:	3402      	adds	r4, #2
 800ec26:	9305      	str	r3, [sp, #20]
 800ec28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecf4 <_svfiprintf_r+0x1fc>
 800ec2c:	7821      	ldrb	r1, [r4, #0]
 800ec2e:	2203      	movs	r2, #3
 800ec30:	4650      	mov	r0, sl
 800ec32:	f7f1 fae5 	bl	8000200 <memchr>
 800ec36:	b140      	cbz	r0, 800ec4a <_svfiprintf_r+0x152>
 800ec38:	2340      	movs	r3, #64	; 0x40
 800ec3a:	eba0 000a 	sub.w	r0, r0, sl
 800ec3e:	fa03 f000 	lsl.w	r0, r3, r0
 800ec42:	9b04      	ldr	r3, [sp, #16]
 800ec44:	4303      	orrs	r3, r0
 800ec46:	3401      	adds	r4, #1
 800ec48:	9304      	str	r3, [sp, #16]
 800ec4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec4e:	4826      	ldr	r0, [pc, #152]	; (800ece8 <_svfiprintf_r+0x1f0>)
 800ec50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec54:	2206      	movs	r2, #6
 800ec56:	f7f1 fad3 	bl	8000200 <memchr>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d038      	beq.n	800ecd0 <_svfiprintf_r+0x1d8>
 800ec5e:	4b23      	ldr	r3, [pc, #140]	; (800ecec <_svfiprintf_r+0x1f4>)
 800ec60:	bb1b      	cbnz	r3, 800ecaa <_svfiprintf_r+0x1b2>
 800ec62:	9b03      	ldr	r3, [sp, #12]
 800ec64:	3307      	adds	r3, #7
 800ec66:	f023 0307 	bic.w	r3, r3, #7
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	9303      	str	r3, [sp, #12]
 800ec6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec70:	4433      	add	r3, r6
 800ec72:	9309      	str	r3, [sp, #36]	; 0x24
 800ec74:	e767      	b.n	800eb46 <_svfiprintf_r+0x4e>
 800ec76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	e7a5      	b.n	800ebcc <_svfiprintf_r+0xd4>
 800ec80:	2300      	movs	r3, #0
 800ec82:	3401      	adds	r4, #1
 800ec84:	9305      	str	r3, [sp, #20]
 800ec86:	4619      	mov	r1, r3
 800ec88:	f04f 0c0a 	mov.w	ip, #10
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec92:	3a30      	subs	r2, #48	; 0x30
 800ec94:	2a09      	cmp	r2, #9
 800ec96:	d903      	bls.n	800eca0 <_svfiprintf_r+0x1a8>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0c5      	beq.n	800ec28 <_svfiprintf_r+0x130>
 800ec9c:	9105      	str	r1, [sp, #20]
 800ec9e:	e7c3      	b.n	800ec28 <_svfiprintf_r+0x130>
 800eca0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eca4:	4604      	mov	r4, r0
 800eca6:	2301      	movs	r3, #1
 800eca8:	e7f0      	b.n	800ec8c <_svfiprintf_r+0x194>
 800ecaa:	ab03      	add	r3, sp, #12
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	462a      	mov	r2, r5
 800ecb0:	4b0f      	ldr	r3, [pc, #60]	; (800ecf0 <_svfiprintf_r+0x1f8>)
 800ecb2:	a904      	add	r1, sp, #16
 800ecb4:	4638      	mov	r0, r7
 800ecb6:	f7fc f943 	bl	800af40 <_printf_float>
 800ecba:	1c42      	adds	r2, r0, #1
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	d1d6      	bne.n	800ec6e <_svfiprintf_r+0x176>
 800ecc0:	89ab      	ldrh	r3, [r5, #12]
 800ecc2:	065b      	lsls	r3, r3, #25
 800ecc4:	f53f af2c 	bmi.w	800eb20 <_svfiprintf_r+0x28>
 800ecc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecca:	b01d      	add	sp, #116	; 0x74
 800eccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd0:	ab03      	add	r3, sp, #12
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	4b06      	ldr	r3, [pc, #24]	; (800ecf0 <_svfiprintf_r+0x1f8>)
 800ecd8:	a904      	add	r1, sp, #16
 800ecda:	4638      	mov	r0, r7
 800ecdc:	f7fc fbd4 	bl	800b488 <_printf_i>
 800ece0:	e7eb      	b.n	800ecba <_svfiprintf_r+0x1c2>
 800ece2:	bf00      	nop
 800ece4:	0800fc54 	.word	0x0800fc54
 800ece8:	0800fc5e 	.word	0x0800fc5e
 800ecec:	0800af41 	.word	0x0800af41
 800ecf0:	0800ea41 	.word	0x0800ea41
 800ecf4:	0800fc5a 	.word	0x0800fc5a

0800ecf8 <__sfputc_r>:
 800ecf8:	6893      	ldr	r3, [r2, #8]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	b410      	push	{r4}
 800ed00:	6093      	str	r3, [r2, #8]
 800ed02:	da08      	bge.n	800ed16 <__sfputc_r+0x1e>
 800ed04:	6994      	ldr	r4, [r2, #24]
 800ed06:	42a3      	cmp	r3, r4
 800ed08:	db01      	blt.n	800ed0e <__sfputc_r+0x16>
 800ed0a:	290a      	cmp	r1, #10
 800ed0c:	d103      	bne.n	800ed16 <__sfputc_r+0x1e>
 800ed0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed12:	f000 b965 	b.w	800efe0 <__swbuf_r>
 800ed16:	6813      	ldr	r3, [r2, #0]
 800ed18:	1c58      	adds	r0, r3, #1
 800ed1a:	6010      	str	r0, [r2, #0]
 800ed1c:	7019      	strb	r1, [r3, #0]
 800ed1e:	4608      	mov	r0, r1
 800ed20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <__sfputs_r>:
 800ed26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed28:	4606      	mov	r6, r0
 800ed2a:	460f      	mov	r7, r1
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	18d5      	adds	r5, r2, r3
 800ed30:	42ac      	cmp	r4, r5
 800ed32:	d101      	bne.n	800ed38 <__sfputs_r+0x12>
 800ed34:	2000      	movs	r0, #0
 800ed36:	e007      	b.n	800ed48 <__sfputs_r+0x22>
 800ed38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3c:	463a      	mov	r2, r7
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f7ff ffda 	bl	800ecf8 <__sfputc_r>
 800ed44:	1c43      	adds	r3, r0, #1
 800ed46:	d1f3      	bne.n	800ed30 <__sfputs_r+0xa>
 800ed48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed4c <_vfiprintf_r>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	460d      	mov	r5, r1
 800ed52:	b09d      	sub	sp, #116	; 0x74
 800ed54:	4614      	mov	r4, r2
 800ed56:	4698      	mov	r8, r3
 800ed58:	4606      	mov	r6, r0
 800ed5a:	b118      	cbz	r0, 800ed64 <_vfiprintf_r+0x18>
 800ed5c:	6983      	ldr	r3, [r0, #24]
 800ed5e:	b90b      	cbnz	r3, 800ed64 <_vfiprintf_r+0x18>
 800ed60:	f7fb fe9e 	bl	800aaa0 <__sinit>
 800ed64:	4b89      	ldr	r3, [pc, #548]	; (800ef8c <_vfiprintf_r+0x240>)
 800ed66:	429d      	cmp	r5, r3
 800ed68:	d11b      	bne.n	800eda2 <_vfiprintf_r+0x56>
 800ed6a:	6875      	ldr	r5, [r6, #4]
 800ed6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed6e:	07d9      	lsls	r1, r3, #31
 800ed70:	d405      	bmi.n	800ed7e <_vfiprintf_r+0x32>
 800ed72:	89ab      	ldrh	r3, [r5, #12]
 800ed74:	059a      	lsls	r2, r3, #22
 800ed76:	d402      	bmi.n	800ed7e <_vfiprintf_r+0x32>
 800ed78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed7a:	f7fb ff54 	bl	800ac26 <__retarget_lock_acquire_recursive>
 800ed7e:	89ab      	ldrh	r3, [r5, #12]
 800ed80:	071b      	lsls	r3, r3, #28
 800ed82:	d501      	bpl.n	800ed88 <_vfiprintf_r+0x3c>
 800ed84:	692b      	ldr	r3, [r5, #16]
 800ed86:	b9eb      	cbnz	r3, 800edc4 <_vfiprintf_r+0x78>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f000 f988 	bl	800f0a0 <__swsetup_r>
 800ed90:	b1c0      	cbz	r0, 800edc4 <_vfiprintf_r+0x78>
 800ed92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed94:	07dc      	lsls	r4, r3, #31
 800ed96:	d50e      	bpl.n	800edb6 <_vfiprintf_r+0x6a>
 800ed98:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9c:	b01d      	add	sp, #116	; 0x74
 800ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda2:	4b7b      	ldr	r3, [pc, #492]	; (800ef90 <_vfiprintf_r+0x244>)
 800eda4:	429d      	cmp	r5, r3
 800eda6:	d101      	bne.n	800edac <_vfiprintf_r+0x60>
 800eda8:	68b5      	ldr	r5, [r6, #8]
 800edaa:	e7df      	b.n	800ed6c <_vfiprintf_r+0x20>
 800edac:	4b79      	ldr	r3, [pc, #484]	; (800ef94 <_vfiprintf_r+0x248>)
 800edae:	429d      	cmp	r5, r3
 800edb0:	bf08      	it	eq
 800edb2:	68f5      	ldreq	r5, [r6, #12]
 800edb4:	e7da      	b.n	800ed6c <_vfiprintf_r+0x20>
 800edb6:	89ab      	ldrh	r3, [r5, #12]
 800edb8:	0598      	lsls	r0, r3, #22
 800edba:	d4ed      	bmi.n	800ed98 <_vfiprintf_r+0x4c>
 800edbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edbe:	f7fb ff33 	bl	800ac28 <__retarget_lock_release_recursive>
 800edc2:	e7e9      	b.n	800ed98 <_vfiprintf_r+0x4c>
 800edc4:	2300      	movs	r3, #0
 800edc6:	9309      	str	r3, [sp, #36]	; 0x24
 800edc8:	2320      	movs	r3, #32
 800edca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edce:	f8cd 800c 	str.w	r8, [sp, #12]
 800edd2:	2330      	movs	r3, #48	; 0x30
 800edd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef98 <_vfiprintf_r+0x24c>
 800edd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eddc:	f04f 0901 	mov.w	r9, #1
 800ede0:	4623      	mov	r3, r4
 800ede2:	469a      	mov	sl, r3
 800ede4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede8:	b10a      	cbz	r2, 800edee <_vfiprintf_r+0xa2>
 800edea:	2a25      	cmp	r2, #37	; 0x25
 800edec:	d1f9      	bne.n	800ede2 <_vfiprintf_r+0x96>
 800edee:	ebba 0b04 	subs.w	fp, sl, r4
 800edf2:	d00b      	beq.n	800ee0c <_vfiprintf_r+0xc0>
 800edf4:	465b      	mov	r3, fp
 800edf6:	4622      	mov	r2, r4
 800edf8:	4629      	mov	r1, r5
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff ff93 	bl	800ed26 <__sfputs_r>
 800ee00:	3001      	adds	r0, #1
 800ee02:	f000 80aa 	beq.w	800ef5a <_vfiprintf_r+0x20e>
 800ee06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee08:	445a      	add	r2, fp
 800ee0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 80a2 	beq.w	800ef5a <_vfiprintf_r+0x20e>
 800ee16:	2300      	movs	r3, #0
 800ee18:	f04f 32ff 	mov.w	r2, #4294967295
 800ee1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee20:	f10a 0a01 	add.w	sl, sl, #1
 800ee24:	9304      	str	r3, [sp, #16]
 800ee26:	9307      	str	r3, [sp, #28]
 800ee28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ee2e:	4654      	mov	r4, sl
 800ee30:	2205      	movs	r2, #5
 800ee32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee36:	4858      	ldr	r0, [pc, #352]	; (800ef98 <_vfiprintf_r+0x24c>)
 800ee38:	f7f1 f9e2 	bl	8000200 <memchr>
 800ee3c:	9a04      	ldr	r2, [sp, #16]
 800ee3e:	b9d8      	cbnz	r0, 800ee78 <_vfiprintf_r+0x12c>
 800ee40:	06d1      	lsls	r1, r2, #27
 800ee42:	bf44      	itt	mi
 800ee44:	2320      	movmi	r3, #32
 800ee46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee4a:	0713      	lsls	r3, r2, #28
 800ee4c:	bf44      	itt	mi
 800ee4e:	232b      	movmi	r3, #43	; 0x2b
 800ee50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee54:	f89a 3000 	ldrb.w	r3, [sl]
 800ee58:	2b2a      	cmp	r3, #42	; 0x2a
 800ee5a:	d015      	beq.n	800ee88 <_vfiprintf_r+0x13c>
 800ee5c:	9a07      	ldr	r2, [sp, #28]
 800ee5e:	4654      	mov	r4, sl
 800ee60:	2000      	movs	r0, #0
 800ee62:	f04f 0c0a 	mov.w	ip, #10
 800ee66:	4621      	mov	r1, r4
 800ee68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee6c:	3b30      	subs	r3, #48	; 0x30
 800ee6e:	2b09      	cmp	r3, #9
 800ee70:	d94e      	bls.n	800ef10 <_vfiprintf_r+0x1c4>
 800ee72:	b1b0      	cbz	r0, 800eea2 <_vfiprintf_r+0x156>
 800ee74:	9207      	str	r2, [sp, #28]
 800ee76:	e014      	b.n	800eea2 <_vfiprintf_r+0x156>
 800ee78:	eba0 0308 	sub.w	r3, r0, r8
 800ee7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee80:	4313      	orrs	r3, r2
 800ee82:	9304      	str	r3, [sp, #16]
 800ee84:	46a2      	mov	sl, r4
 800ee86:	e7d2      	b.n	800ee2e <_vfiprintf_r+0xe2>
 800ee88:	9b03      	ldr	r3, [sp, #12]
 800ee8a:	1d19      	adds	r1, r3, #4
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	9103      	str	r1, [sp, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	bfbb      	ittet	lt
 800ee94:	425b      	neglt	r3, r3
 800ee96:	f042 0202 	orrlt.w	r2, r2, #2
 800ee9a:	9307      	strge	r3, [sp, #28]
 800ee9c:	9307      	strlt	r3, [sp, #28]
 800ee9e:	bfb8      	it	lt
 800eea0:	9204      	strlt	r2, [sp, #16]
 800eea2:	7823      	ldrb	r3, [r4, #0]
 800eea4:	2b2e      	cmp	r3, #46	; 0x2e
 800eea6:	d10c      	bne.n	800eec2 <_vfiprintf_r+0x176>
 800eea8:	7863      	ldrb	r3, [r4, #1]
 800eeaa:	2b2a      	cmp	r3, #42	; 0x2a
 800eeac:	d135      	bne.n	800ef1a <_vfiprintf_r+0x1ce>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	1d1a      	adds	r2, r3, #4
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	9203      	str	r2, [sp, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	bfb8      	it	lt
 800eeba:	f04f 33ff 	movlt.w	r3, #4294967295
 800eebe:	3402      	adds	r4, #2
 800eec0:	9305      	str	r3, [sp, #20]
 800eec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800efa8 <_vfiprintf_r+0x25c>
 800eec6:	7821      	ldrb	r1, [r4, #0]
 800eec8:	2203      	movs	r2, #3
 800eeca:	4650      	mov	r0, sl
 800eecc:	f7f1 f998 	bl	8000200 <memchr>
 800eed0:	b140      	cbz	r0, 800eee4 <_vfiprintf_r+0x198>
 800eed2:	2340      	movs	r3, #64	; 0x40
 800eed4:	eba0 000a 	sub.w	r0, r0, sl
 800eed8:	fa03 f000 	lsl.w	r0, r3, r0
 800eedc:	9b04      	ldr	r3, [sp, #16]
 800eede:	4303      	orrs	r3, r0
 800eee0:	3401      	adds	r4, #1
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee8:	482c      	ldr	r0, [pc, #176]	; (800ef9c <_vfiprintf_r+0x250>)
 800eeea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeee:	2206      	movs	r2, #6
 800eef0:	f7f1 f986 	bl	8000200 <memchr>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d03f      	beq.n	800ef78 <_vfiprintf_r+0x22c>
 800eef8:	4b29      	ldr	r3, [pc, #164]	; (800efa0 <_vfiprintf_r+0x254>)
 800eefa:	bb1b      	cbnz	r3, 800ef44 <_vfiprintf_r+0x1f8>
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	3307      	adds	r3, #7
 800ef00:	f023 0307 	bic.w	r3, r3, #7
 800ef04:	3308      	adds	r3, #8
 800ef06:	9303      	str	r3, [sp, #12]
 800ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0a:	443b      	add	r3, r7
 800ef0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef0e:	e767      	b.n	800ede0 <_vfiprintf_r+0x94>
 800ef10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef14:	460c      	mov	r4, r1
 800ef16:	2001      	movs	r0, #1
 800ef18:	e7a5      	b.n	800ee66 <_vfiprintf_r+0x11a>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	3401      	adds	r4, #1
 800ef1e:	9305      	str	r3, [sp, #20]
 800ef20:	4619      	mov	r1, r3
 800ef22:	f04f 0c0a 	mov.w	ip, #10
 800ef26:	4620      	mov	r0, r4
 800ef28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef2c:	3a30      	subs	r2, #48	; 0x30
 800ef2e:	2a09      	cmp	r2, #9
 800ef30:	d903      	bls.n	800ef3a <_vfiprintf_r+0x1ee>
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d0c5      	beq.n	800eec2 <_vfiprintf_r+0x176>
 800ef36:	9105      	str	r1, [sp, #20]
 800ef38:	e7c3      	b.n	800eec2 <_vfiprintf_r+0x176>
 800ef3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef3e:	4604      	mov	r4, r0
 800ef40:	2301      	movs	r3, #1
 800ef42:	e7f0      	b.n	800ef26 <_vfiprintf_r+0x1da>
 800ef44:	ab03      	add	r3, sp, #12
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	462a      	mov	r2, r5
 800ef4a:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <_vfiprintf_r+0x258>)
 800ef4c:	a904      	add	r1, sp, #16
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f7fb fff6 	bl	800af40 <_printf_float>
 800ef54:	4607      	mov	r7, r0
 800ef56:	1c78      	adds	r0, r7, #1
 800ef58:	d1d6      	bne.n	800ef08 <_vfiprintf_r+0x1bc>
 800ef5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef5c:	07d9      	lsls	r1, r3, #31
 800ef5e:	d405      	bmi.n	800ef6c <_vfiprintf_r+0x220>
 800ef60:	89ab      	ldrh	r3, [r5, #12]
 800ef62:	059a      	lsls	r2, r3, #22
 800ef64:	d402      	bmi.n	800ef6c <_vfiprintf_r+0x220>
 800ef66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef68:	f7fb fe5e 	bl	800ac28 <__retarget_lock_release_recursive>
 800ef6c:	89ab      	ldrh	r3, [r5, #12]
 800ef6e:	065b      	lsls	r3, r3, #25
 800ef70:	f53f af12 	bmi.w	800ed98 <_vfiprintf_r+0x4c>
 800ef74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef76:	e711      	b.n	800ed9c <_vfiprintf_r+0x50>
 800ef78:	ab03      	add	r3, sp, #12
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <_vfiprintf_r+0x258>)
 800ef80:	a904      	add	r1, sp, #16
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7fc fa80 	bl	800b488 <_printf_i>
 800ef88:	e7e4      	b.n	800ef54 <_vfiprintf_r+0x208>
 800ef8a:	bf00      	nop
 800ef8c:	0800f7d8 	.word	0x0800f7d8
 800ef90:	0800f7f8 	.word	0x0800f7f8
 800ef94:	0800f7b8 	.word	0x0800f7b8
 800ef98:	0800fc54 	.word	0x0800fc54
 800ef9c:	0800fc5e 	.word	0x0800fc5e
 800efa0:	0800af41 	.word	0x0800af41
 800efa4:	0800ed27 	.word	0x0800ed27
 800efa8:	0800fc5a 	.word	0x0800fc5a

0800efac <_read_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4d07      	ldr	r5, [pc, #28]	; (800efcc <_read_r+0x20>)
 800efb0:	4604      	mov	r4, r0
 800efb2:	4608      	mov	r0, r1
 800efb4:	4611      	mov	r1, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	602a      	str	r2, [r5, #0]
 800efba:	461a      	mov	r2, r3
 800efbc:	f7f3 fc92 	bl	80028e4 <_read>
 800efc0:	1c43      	adds	r3, r0, #1
 800efc2:	d102      	bne.n	800efca <_read_r+0x1e>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	b103      	cbz	r3, 800efca <_read_r+0x1e>
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	20001180 	.word	0x20001180

0800efd0 <nan>:
 800efd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efd8 <nan+0x8>
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	00000000 	.word	0x00000000
 800efdc:	7ff80000 	.word	0x7ff80000

0800efe0 <__swbuf_r>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	460e      	mov	r6, r1
 800efe4:	4614      	mov	r4, r2
 800efe6:	4605      	mov	r5, r0
 800efe8:	b118      	cbz	r0, 800eff2 <__swbuf_r+0x12>
 800efea:	6983      	ldr	r3, [r0, #24]
 800efec:	b90b      	cbnz	r3, 800eff2 <__swbuf_r+0x12>
 800efee:	f7fb fd57 	bl	800aaa0 <__sinit>
 800eff2:	4b21      	ldr	r3, [pc, #132]	; (800f078 <__swbuf_r+0x98>)
 800eff4:	429c      	cmp	r4, r3
 800eff6:	d12b      	bne.n	800f050 <__swbuf_r+0x70>
 800eff8:	686c      	ldr	r4, [r5, #4]
 800effa:	69a3      	ldr	r3, [r4, #24]
 800effc:	60a3      	str	r3, [r4, #8]
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	071a      	lsls	r2, r3, #28
 800f002:	d52f      	bpl.n	800f064 <__swbuf_r+0x84>
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	b36b      	cbz	r3, 800f064 <__swbuf_r+0x84>
 800f008:	6923      	ldr	r3, [r4, #16]
 800f00a:	6820      	ldr	r0, [r4, #0]
 800f00c:	1ac0      	subs	r0, r0, r3
 800f00e:	6963      	ldr	r3, [r4, #20]
 800f010:	b2f6      	uxtb	r6, r6
 800f012:	4283      	cmp	r3, r0
 800f014:	4637      	mov	r7, r6
 800f016:	dc04      	bgt.n	800f022 <__swbuf_r+0x42>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f7fe fc2e 	bl	800d87c <_fflush_r>
 800f020:	bb30      	cbnz	r0, 800f070 <__swbuf_r+0x90>
 800f022:	68a3      	ldr	r3, [r4, #8]
 800f024:	3b01      	subs	r3, #1
 800f026:	60a3      	str	r3, [r4, #8]
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	6022      	str	r2, [r4, #0]
 800f02e:	701e      	strb	r6, [r3, #0]
 800f030:	6963      	ldr	r3, [r4, #20]
 800f032:	3001      	adds	r0, #1
 800f034:	4283      	cmp	r3, r0
 800f036:	d004      	beq.n	800f042 <__swbuf_r+0x62>
 800f038:	89a3      	ldrh	r3, [r4, #12]
 800f03a:	07db      	lsls	r3, r3, #31
 800f03c:	d506      	bpl.n	800f04c <__swbuf_r+0x6c>
 800f03e:	2e0a      	cmp	r6, #10
 800f040:	d104      	bne.n	800f04c <__swbuf_r+0x6c>
 800f042:	4621      	mov	r1, r4
 800f044:	4628      	mov	r0, r5
 800f046:	f7fe fc19 	bl	800d87c <_fflush_r>
 800f04a:	b988      	cbnz	r0, 800f070 <__swbuf_r+0x90>
 800f04c:	4638      	mov	r0, r7
 800f04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f050:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <__swbuf_r+0x9c>)
 800f052:	429c      	cmp	r4, r3
 800f054:	d101      	bne.n	800f05a <__swbuf_r+0x7a>
 800f056:	68ac      	ldr	r4, [r5, #8]
 800f058:	e7cf      	b.n	800effa <__swbuf_r+0x1a>
 800f05a:	4b09      	ldr	r3, [pc, #36]	; (800f080 <__swbuf_r+0xa0>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	bf08      	it	eq
 800f060:	68ec      	ldreq	r4, [r5, #12]
 800f062:	e7ca      	b.n	800effa <__swbuf_r+0x1a>
 800f064:	4621      	mov	r1, r4
 800f066:	4628      	mov	r0, r5
 800f068:	f000 f81a 	bl	800f0a0 <__swsetup_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d0cb      	beq.n	800f008 <__swbuf_r+0x28>
 800f070:	f04f 37ff 	mov.w	r7, #4294967295
 800f074:	e7ea      	b.n	800f04c <__swbuf_r+0x6c>
 800f076:	bf00      	nop
 800f078:	0800f7d8 	.word	0x0800f7d8
 800f07c:	0800f7f8 	.word	0x0800f7f8
 800f080:	0800f7b8 	.word	0x0800f7b8

0800f084 <__ascii_wctomb>:
 800f084:	b149      	cbz	r1, 800f09a <__ascii_wctomb+0x16>
 800f086:	2aff      	cmp	r2, #255	; 0xff
 800f088:	bf85      	ittet	hi
 800f08a:	238a      	movhi	r3, #138	; 0x8a
 800f08c:	6003      	strhi	r3, [r0, #0]
 800f08e:	700a      	strbls	r2, [r1, #0]
 800f090:	f04f 30ff 	movhi.w	r0, #4294967295
 800f094:	bf98      	it	ls
 800f096:	2001      	movls	r0, #1
 800f098:	4770      	bx	lr
 800f09a:	4608      	mov	r0, r1
 800f09c:	4770      	bx	lr
	...

0800f0a0 <__swsetup_r>:
 800f0a0:	4b32      	ldr	r3, [pc, #200]	; (800f16c <__swsetup_r+0xcc>)
 800f0a2:	b570      	push	{r4, r5, r6, lr}
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	b125      	cbz	r5, 800f0b6 <__swsetup_r+0x16>
 800f0ac:	69ab      	ldr	r3, [r5, #24]
 800f0ae:	b913      	cbnz	r3, 800f0b6 <__swsetup_r+0x16>
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	f7fb fcf5 	bl	800aaa0 <__sinit>
 800f0b6:	4b2e      	ldr	r3, [pc, #184]	; (800f170 <__swsetup_r+0xd0>)
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d10f      	bne.n	800f0dc <__swsetup_r+0x3c>
 800f0bc:	686c      	ldr	r4, [r5, #4]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0c4:	0719      	lsls	r1, r3, #28
 800f0c6:	d42c      	bmi.n	800f122 <__swsetup_r+0x82>
 800f0c8:	06dd      	lsls	r5, r3, #27
 800f0ca:	d411      	bmi.n	800f0f0 <__swsetup_r+0x50>
 800f0cc:	2309      	movs	r3, #9
 800f0ce:	6033      	str	r3, [r6, #0]
 800f0d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0da:	e03e      	b.n	800f15a <__swsetup_r+0xba>
 800f0dc:	4b25      	ldr	r3, [pc, #148]	; (800f174 <__swsetup_r+0xd4>)
 800f0de:	429c      	cmp	r4, r3
 800f0e0:	d101      	bne.n	800f0e6 <__swsetup_r+0x46>
 800f0e2:	68ac      	ldr	r4, [r5, #8]
 800f0e4:	e7eb      	b.n	800f0be <__swsetup_r+0x1e>
 800f0e6:	4b24      	ldr	r3, [pc, #144]	; (800f178 <__swsetup_r+0xd8>)
 800f0e8:	429c      	cmp	r4, r3
 800f0ea:	bf08      	it	eq
 800f0ec:	68ec      	ldreq	r4, [r5, #12]
 800f0ee:	e7e6      	b.n	800f0be <__swsetup_r+0x1e>
 800f0f0:	0758      	lsls	r0, r3, #29
 800f0f2:	d512      	bpl.n	800f11a <__swsetup_r+0x7a>
 800f0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0f6:	b141      	cbz	r1, 800f10a <__swsetup_r+0x6a>
 800f0f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0fc:	4299      	cmp	r1, r3
 800f0fe:	d002      	beq.n	800f106 <__swsetup_r+0x66>
 800f100:	4630      	mov	r0, r6
 800f102:	f7fb fdd3 	bl	800acac <_free_r>
 800f106:	2300      	movs	r3, #0
 800f108:	6363      	str	r3, [r4, #52]	; 0x34
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f110:	81a3      	strh	r3, [r4, #12]
 800f112:	2300      	movs	r3, #0
 800f114:	6063      	str	r3, [r4, #4]
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f043 0308 	orr.w	r3, r3, #8
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	6923      	ldr	r3, [r4, #16]
 800f124:	b94b      	cbnz	r3, 800f13a <__swsetup_r+0x9a>
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f130:	d003      	beq.n	800f13a <__swsetup_r+0x9a>
 800f132:	4621      	mov	r1, r4
 800f134:	4630      	mov	r0, r6
 800f136:	f000 f845 	bl	800f1c4 <__smakebuf_r>
 800f13a:	89a0      	ldrh	r0, [r4, #12]
 800f13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f140:	f010 0301 	ands.w	r3, r0, #1
 800f144:	d00a      	beq.n	800f15c <__swsetup_r+0xbc>
 800f146:	2300      	movs	r3, #0
 800f148:	60a3      	str	r3, [r4, #8]
 800f14a:	6963      	ldr	r3, [r4, #20]
 800f14c:	425b      	negs	r3, r3
 800f14e:	61a3      	str	r3, [r4, #24]
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	b943      	cbnz	r3, 800f166 <__swsetup_r+0xc6>
 800f154:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f158:	d1ba      	bne.n	800f0d0 <__swsetup_r+0x30>
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	0781      	lsls	r1, r0, #30
 800f15e:	bf58      	it	pl
 800f160:	6963      	ldrpl	r3, [r4, #20]
 800f162:	60a3      	str	r3, [r4, #8]
 800f164:	e7f4      	b.n	800f150 <__swsetup_r+0xb0>
 800f166:	2000      	movs	r0, #0
 800f168:	e7f7      	b.n	800f15a <__swsetup_r+0xba>
 800f16a:	bf00      	nop
 800f16c:	20000034 	.word	0x20000034
 800f170:	0800f7d8 	.word	0x0800f7d8
 800f174:	0800f7f8 	.word	0x0800f7f8
 800f178:	0800f7b8 	.word	0x0800f7b8

0800f17c <__swhatbuf_r>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	460e      	mov	r6, r1
 800f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f184:	2900      	cmp	r1, #0
 800f186:	b096      	sub	sp, #88	; 0x58
 800f188:	4614      	mov	r4, r2
 800f18a:	461d      	mov	r5, r3
 800f18c:	da07      	bge.n	800f19e <__swhatbuf_r+0x22>
 800f18e:	2300      	movs	r3, #0
 800f190:	602b      	str	r3, [r5, #0]
 800f192:	89b3      	ldrh	r3, [r6, #12]
 800f194:	061a      	lsls	r2, r3, #24
 800f196:	d410      	bmi.n	800f1ba <__swhatbuf_r+0x3e>
 800f198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f19c:	e00e      	b.n	800f1bc <__swhatbuf_r+0x40>
 800f19e:	466a      	mov	r2, sp
 800f1a0:	f000 f858 	bl	800f254 <_fstat_r>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	dbf2      	blt.n	800f18e <__swhatbuf_r+0x12>
 800f1a8:	9a01      	ldr	r2, [sp, #4]
 800f1aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1b2:	425a      	negs	r2, r3
 800f1b4:	415a      	adcs	r2, r3
 800f1b6:	602a      	str	r2, [r5, #0]
 800f1b8:	e7ee      	b.n	800f198 <__swhatbuf_r+0x1c>
 800f1ba:	2340      	movs	r3, #64	; 0x40
 800f1bc:	2000      	movs	r0, #0
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	b016      	add	sp, #88	; 0x58
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}

0800f1c4 <__smakebuf_r>:
 800f1c4:	898b      	ldrh	r3, [r1, #12]
 800f1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1c8:	079d      	lsls	r5, r3, #30
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	d507      	bpl.n	800f1e0 <__smakebuf_r+0x1c>
 800f1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	6123      	str	r3, [r4, #16]
 800f1d8:	2301      	movs	r3, #1
 800f1da:	6163      	str	r3, [r4, #20]
 800f1dc:	b002      	add	sp, #8
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	ab01      	add	r3, sp, #4
 800f1e2:	466a      	mov	r2, sp
 800f1e4:	f7ff ffca 	bl	800f17c <__swhatbuf_r>
 800f1e8:	9900      	ldr	r1, [sp, #0]
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7fb fdad 	bl	800ad4c <_malloc_r>
 800f1f2:	b948      	cbnz	r0, 800f208 <__smakebuf_r+0x44>
 800f1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f8:	059a      	lsls	r2, r3, #22
 800f1fa:	d4ef      	bmi.n	800f1dc <__smakebuf_r+0x18>
 800f1fc:	f023 0303 	bic.w	r3, r3, #3
 800f200:	f043 0302 	orr.w	r3, r3, #2
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	e7e3      	b.n	800f1d0 <__smakebuf_r+0xc>
 800f208:	4b0d      	ldr	r3, [pc, #52]	; (800f240 <__smakebuf_r+0x7c>)
 800f20a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	6020      	str	r0, [r4, #0]
 800f210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	9b00      	ldr	r3, [sp, #0]
 800f218:	6163      	str	r3, [r4, #20]
 800f21a:	9b01      	ldr	r3, [sp, #4]
 800f21c:	6120      	str	r0, [r4, #16]
 800f21e:	b15b      	cbz	r3, 800f238 <__smakebuf_r+0x74>
 800f220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f224:	4630      	mov	r0, r6
 800f226:	f000 f827 	bl	800f278 <_isatty_r>
 800f22a:	b128      	cbz	r0, 800f238 <__smakebuf_r+0x74>
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f023 0303 	bic.w	r3, r3, #3
 800f232:	f043 0301 	orr.w	r3, r3, #1
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	89a0      	ldrh	r0, [r4, #12]
 800f23a:	4305      	orrs	r5, r0
 800f23c:	81a5      	strh	r5, [r4, #12]
 800f23e:	e7cd      	b.n	800f1dc <__smakebuf_r+0x18>
 800f240:	0800aa39 	.word	0x0800aa39

0800f244 <_malloc_usable_size_r>:
 800f244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f248:	1f18      	subs	r0, r3, #4
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	bfbc      	itt	lt
 800f24e:	580b      	ldrlt	r3, [r1, r0]
 800f250:	18c0      	addlt	r0, r0, r3
 800f252:	4770      	bx	lr

0800f254 <_fstat_r>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4d07      	ldr	r5, [pc, #28]	; (800f274 <_fstat_r+0x20>)
 800f258:	2300      	movs	r3, #0
 800f25a:	4604      	mov	r4, r0
 800f25c:	4608      	mov	r0, r1
 800f25e:	4611      	mov	r1, r2
 800f260:	602b      	str	r3, [r5, #0]
 800f262:	f7f3 fb84 	bl	800296e <_fstat>
 800f266:	1c43      	adds	r3, r0, #1
 800f268:	d102      	bne.n	800f270 <_fstat_r+0x1c>
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	b103      	cbz	r3, 800f270 <_fstat_r+0x1c>
 800f26e:	6023      	str	r3, [r4, #0]
 800f270:	bd38      	pop	{r3, r4, r5, pc}
 800f272:	bf00      	nop
 800f274:	20001180 	.word	0x20001180

0800f278 <_isatty_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d06      	ldr	r5, [pc, #24]	; (800f294 <_isatty_r+0x1c>)
 800f27c:	2300      	movs	r3, #0
 800f27e:	4604      	mov	r4, r0
 800f280:	4608      	mov	r0, r1
 800f282:	602b      	str	r3, [r5, #0]
 800f284:	f7f3 fb83 	bl	800298e <_isatty>
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	d102      	bne.n	800f292 <_isatty_r+0x1a>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	b103      	cbz	r3, 800f292 <_isatty_r+0x1a>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	20001180 	.word	0x20001180

0800f298 <_init>:
 800f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29a:	bf00      	nop
 800f29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f29e:	bc08      	pop	{r3}
 800f2a0:	469e      	mov	lr, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_fini>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr
