
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002288  0801f558  0801f558  0002f558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080217e0  080217e0  000403cc  2**0
                  CONTENTS
  4 .ARM          00000008  080217e0  080217e0  000317e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080217e8  080217e8  000403cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080217e8  080217e8  000317e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080217f0  080217f0  000317f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  080217f4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403cc  2**0
                  CONTENTS
 10 .bss          00008bec  200003cc  200003cc  000403cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20008fb8  20008fb8  000403cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00074db6  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aecb  00000000  00000000  000b51b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041f8  00000000  00000000  000c0080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000389ed  00000000  00000000  000c4278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a75e  00000000  00000000  000fcc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001199df  00000000  00000000  001473c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260da2  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec8  00000000  00000000  00260df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00013508  00000000  00000000  00264cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f53c 	.word	0x0801f53c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d0 	.word	0x200003d0
 80001ec:	0801f53c 	.word	0x0801f53c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 ff06 	bl	8008e48 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 ffe3 	bl	800903c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00d f828 	bl	800e0f2 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f006 ffe6 	bl	8008080 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fa36 	bl	800752c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00d f811 	bl	800e0f2 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00d f805 	bl	800e0f2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00c fffd 	bl	800e0f2 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f01a fa17 	bl	801b538 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00c ffe3 	bl	800e0f2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00c ffdb 	bl	800e0f2 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00c ffd2 	bl	800e0f2 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f006 f9fa 	bl	800754e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f006 ff8f 	bl	8008080 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fa16 	bl	800759a <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f006 f885 	bl	800728c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fe61 	bl	8006e50 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f005 ff7d 	bl	8007094 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fe2f 	bl	8006e04 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 ff4b 	bl	8007048 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00c ff98 	bl	800e0f2 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005f08 	.word	0x20005f08
 80011e0:	0801f558 	.word	0x0801f558
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003f8 	.word	0x200003f8
 80011f0:	0801f570 	.word	0x0801f570
 80011f4:	0801f588 	.word	0x0801f588
 80011f8:	0801f594 	.word	0x0801f594
 80011fc:	0801f5a8 	.word	0x0801f5a8
 8001200:	0801f5b0 	.word	0x0801f5b0
 8001204:	0801f5c8 	.word	0x0801f5c8
 8001208:	200003f9 	.word	0x200003f9
 800120c:	0801f5d0 	.word	0x0801f5d0

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f006 f856 	bl	80072d8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f019 f900 	bl	801a43c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 f902 	bl	800744a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fd8d 	bl	8006d6c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f005 fd80 	bl	8006d6c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f005 fd73 	bl	8006d6c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003e8 	.word	0x200003e8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 f842 	bl	800733c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f850 	bl	800736e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fd79 	bl	8006dcc <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003f6 	.word	0x200003f6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f005 ffff 	bl	800730a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f019 f890 	bl	801a43c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f006 f847 	bl	80073b4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 fd35 	bl	8006d9c <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f005 fd28 	bl	8006d9c <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f005 fd1b 	bl	8006d9c <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f0 	.word	0x200003f0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00c feaa 	bl	800e0f2 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f006 fe68 	bl	8008080 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fc54 	bl	8006c6a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00c fe90 	bl	800e0f2 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00c fe84 	bl	800e0f2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00c fe7c 	bl	800e0f2 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f01a f896 	bl	801b538 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00c fe63 	bl	800e0f2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00c fe5b 	bl	800e0f2 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00c fe52 	bl	800e0f2 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fc19 	bl	8006c8c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f006 fe0f 	bl	8008080 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fc35 	bl	8006cd8 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fb1b 	bl	8006ab8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fb3b 	bl	8006b04 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00c fe2a 	bl	800e0f2 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005f08 	.word	0x20005f08
 80014bc:	0801f5e8 	.word	0x0801f5e8
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000402 	.word	0x20000402
 80014cc:	0801f570 	.word	0x0801f570
 80014d0:	0801f588 	.word	0x0801f588
 80014d4:	0801f594 	.word	0x0801f594
 80014d8:	0801f5a8 	.word	0x0801f5a8
 80014dc:	0801f5b0 	.word	0x0801f5b0
 80014e0:	0801f5c8 	.word	0x0801f5c8
 80014e4:	20000403 	.word	0x20000403
 80014e8:	0801f600 	.word	0x0801f600

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f005 fa76 	bl	80069f4 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fb57 	bl	8006bd2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fa93 	bl	8006a54 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003fc 	.word	0x200003fc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fb20 	bl	8006ba0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fb57 	bl	8006c24 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fa81 	bl	8006a84 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000400 	.word	0x20000400

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f007 fc40 	bl	8008e48 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f007 fd1d 	bl	800903c <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b09d      	sub	sp, #116	; 0x74
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f006 fcdd 	bl	8007ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f9ad 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd47 	bl	80020d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 fa15 	bl	8001a78 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa65 	bl	8001b1c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 faa3 	bl	8001b9c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fae1 	bl	8001c1c <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fbc5 	bl	8001de8 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbf9 	bl	8001e54 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fc2d 	bl	8001ec0 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc61 	bl	8001f2c <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fcb7 	bl	8001fdc <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fcdf 	bl	8002030 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fd07 	bl	8002084 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fb2b 	bl	8001cd0 <MX_RTC_Init>
  //MX_IWDG_Init(); //TODO remove
  MX_FATFS_Init();
 800167a:	f00e fc8f 	bl	800ff9c <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	489d      	ldr	r0, [pc, #628]	; (80018f8 <main+0x2c0>)
 8001684:	f007 fa6a 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	489a      	ldr	r0, [pc, #616]	; (80018f8 <main+0x2c0>)
 800168e:	f007 fa65 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	4898      	ldr	r0, [pc, #608]	; (80018f8 <main+0x2c0>)
 8001698:	f007 fa60 	bl	8008b5c <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4896      	ldr	r0, [pc, #600]	; (80018fc <main+0x2c4>)
 80016a4:	f007 fa5a 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4893      	ldr	r0, [pc, #588]	; (80018fc <main+0x2c4>)
 80016b0:	f007 fa54 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4890      	ldr	r0, [pc, #576]	; (80018fc <main+0x2c4>)
 80016bc:	f007 fa4e 	bl	8008b5c <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	488d      	ldr	r0, [pc, #564]	; (80018fc <main+0x2c4>)
 80016c6:	f007 fa49 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	488b      	ldr	r0, [pc, #556]	; (8001900 <main+0x2c8>)
 80016d2:	f007 fa43 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4888      	ldr	r0, [pc, #544]	; (8001900 <main+0x2c8>)
 80016de:	f007 fa3d 	bl	8008b5c <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4887      	ldr	r0, [pc, #540]	; (8001904 <main+0x2cc>)
 80016e8:	f007 fa38 	bl	8008b5c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4884      	ldr	r0, [pc, #528]	; (8001904 <main+0x2cc>)
 80016f4:	f007 fa32 	bl	8008b5c <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	487f      	ldr	r0, [pc, #508]	; (80018fc <main+0x2c4>)
 8001700:	f007 fa2c 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	487f      	ldr	r0, [pc, #508]	; (8001908 <main+0x2d0>)
 800170a:	f007 fa27 	bl	8008b5c <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	487d      	ldr	r0, [pc, #500]	; (8001908 <main+0x2d0>)
 8001714:	f007 fa22 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	487a      	ldr	r0, [pc, #488]	; (8001908 <main+0x2d0>)
 800171e:	f007 fa1d 	bl	8008b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4878      	ldr	r0, [pc, #480]	; (8001908 <main+0x2d0>)
 8001728:	f007 fa18 	bl	8008b5c <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	4976      	ldr	r1, [pc, #472]	; (800190c <main+0x2d4>)
 8001734:	4876      	ldr	r0, [pc, #472]	; (8001910 <main+0x2d8>)
 8001736:	f00c fcdc 	bl	800e0f2 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e75      	ldr	r6, [pc, #468]	; (8001910 <main+0x2d8>)
 800173c:	2305      	movs	r3, #5
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
 8001740:	466d      	mov	r5, sp
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175e:	486d      	ldr	r0, [pc, #436]	; (8001914 <main+0x2dc>)
 8001760:	f005 ffc0 	bl	80076e4 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001764:	486a      	ldr	r0, [pc, #424]	; (8001910 <main+0x2d8>)
 8001766:	f001 fef9 	bl	800355c <MRT_externalFlashSetup>
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */

//TODO doesn't work on wakeup (in the thread it seems)
  char tmp_buffer[20];
  sprintf(tmp_buffer,"Prev_Sec %i\r\n",prev_sec);
 800176a:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <main+0x2e0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4969      	ldr	r1, [pc, #420]	; (800191c <main+0x2e4>)
 8001776:	4618      	mov	r0, r3
 8001778:	f019 fede 	bl	801b538 <siprintf>
  HAL_UART_Transmit(&DEBUG_UART,tmp_buffer,strlen(tmp_buffer),HAL_MAX_DELAY);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fd35 	bl	80001f0 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	f107 0110 	add.w	r1, r7, #16
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	485f      	ldr	r0, [pc, #380]	; (8001910 <main+0x2d8>)
 8001794:	f00c fcad 	bl	800e0f2 <HAL_UART_Transmit>
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 8001798:	4b61      	ldr	r3, [pc, #388]	; (8001920 <main+0x2e8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4a61      	ldr	r2, [pc, #388]	; (8001924 <main+0x2ec>)
 800179e:	7811      	ldrb	r1, [r2, #0]
 80017a0:	4a5d      	ldr	r2, [pc, #372]	; (8001918 <main+0x2e0>)
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 f91b 	bl	80079e0 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 80017aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ae:	f006 fc67 	bl	8008080 <HAL_Delay>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 80017b2:	220f      	movs	r2, #15
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f006 f8ca 	bl	8007950 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	4850      	ldr	r0, [pc, #320]	; (8001904 <main+0x2cc>)
 80017c4:	f007 f9ca 	bl	8008b5c <HAL_GPIO_WritePin>
    uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 80017c8:	4e51      	ldr	r6, [pc, #324]	; (8001910 <main+0x2d8>)
 80017ca:	466d      	mov	r5, sp
 80017cc:	f106 0410 	add.w	r4, r6, #16
 80017d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017e4:	f004 fb6c 	bl	8005ec0 <MRT_Static_Iridium_Setup>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ee:	4c4e      	ldr	r4, [pc, #312]	; (8001928 <main+0x2f0>)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <main+0x2d8>)
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <main+0x2f4>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc42 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017fc:	463b      	mov	r3, r7
 80017fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001802:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 8001806:	4c4a      	ldr	r4, [pc, #296]	; (8001930 <main+0x2f8>)
 8001808:	463b      	mov	r3, r7
 800180a:	4a41      	ldr	r2, [pc, #260]	; (8001910 <main+0x2d8>)
 800180c:	4947      	ldr	r1, [pc, #284]	; (800192c <main+0x2f4>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fdb4 	bl	800137c <MRT_LPS22HH_Setup>
 8001814:	463b      	mov	r3, r7
 8001816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800181a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
   GPS_init(&GPS_UART, &DEBUG_UART);
 800181e:	493c      	ldr	r1, [pc, #240]	; (8001910 <main+0x2d8>)
 8001820:	4844      	ldr	r0, [pc, #272]	; (8001934 <main+0x2fc>)
 8001822:	f001 fe67 	bl	80034f4 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001830:	f007 f994 	bl	8008b5c <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 8001834:	4c40      	ldr	r4, [pc, #256]	; (8001938 <main+0x300>)
 8001836:	4668      	mov	r0, sp
 8001838:	f104 0310 	add.w	r3, r4, #16
 800183c:	2248      	movs	r2, #72	; 0x48
 800183e:	4619      	mov	r1, r3
 8001840:	f018 fdd4 	bl	801a3ec <memcpy>
 8001844:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001848:	f00e fb90 	bl	800ff6c <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	483a      	ldr	r0, [pc, #232]	; (800193c <main+0x304>)
 8001852:	f00e fb33 	bl	800febc <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001856:	2108      	movs	r1, #8
 8001858:	4828      	ldr	r0, [pc, #160]	; (80018fc <main+0x2c4>)
 800185a:	f00e fb45 	bl	800fee8 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800185e:	2104      	movs	r1, #4
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <main+0x2c4>)
 8001862:	f00e fb57 	bl	800ff14 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001866:	2110      	movs	r1, #16
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <main+0x2c4>)
 800186a:	f00e fb69 	bl	800ff40 <set_DIO1_pin>

	/*
	* For the SD card
	*
	*/
	sd_init_dynamic_filename("FC", "", filename);
 800186e:	4a34      	ldr	r2, [pc, #208]	; (8001940 <main+0x308>)
 8001870:	4934      	ldr	r1, [pc, #208]	; (8001944 <main+0x30c>)
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <main+0x310>)
 8001874:	f006 f9b4 	bl	8007be0 <sd_init_dynamic_filename>
   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
   *amount of resets?
   *Solution : We use the external IN_Button has an external reset that resets the board from
   *the beginning using the callback function (defined in MRT_Helpers.c)
   */
  MX_IWDG_Init();
 8001878:	f000 fa10 	bl	8001c9c <MX_IWDG_Init>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED (or find other way to completely reset the board)

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800187c:	f013 fc2c 	bl	80150d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001880:	4a32      	ldr	r2, [pc, #200]	; (800194c <main+0x314>)
 8001882:	2100      	movs	r1, #0
 8001884:	4832      	ldr	r0, [pc, #200]	; (8001950 <main+0x318>)
 8001886:	f013 fc71 	bl	801516c <osThreadNew>
 800188a:	4603      	mov	r3, r0
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <main+0x31c>)
 800188e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001890:	4a31      	ldr	r2, [pc, #196]	; (8001958 <main+0x320>)
 8001892:	2100      	movs	r1, #0
 8001894:	4831      	ldr	r0, [pc, #196]	; (800195c <main+0x324>)
 8001896:	f013 fc69 	bl	801516c <osThreadNew>
 800189a:	4603      	mov	r3, r0
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <main+0x328>)
 800189e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <main+0x32c>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4830      	ldr	r0, [pc, #192]	; (8001968 <main+0x330>)
 80018a6:	f013 fc61 	bl	801516c <osThreadNew>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a2f      	ldr	r2, [pc, #188]	; (800196c <main+0x334>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018b0:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <main+0x338>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	482f      	ldr	r0, [pc, #188]	; (8001974 <main+0x33c>)
 80018b6:	f013 fc59 	bl	801516c <osThreadNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <main+0x340>)
 80018be:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018c0:	4a2e      	ldr	r2, [pc, #184]	; (800197c <main+0x344>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	482e      	ldr	r0, [pc, #184]	; (8001980 <main+0x348>)
 80018c6:	f013 fc51 	bl	801516c <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <main+0x34c>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018d0:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <main+0x350>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	482d      	ldr	r0, [pc, #180]	; (800198c <main+0x354>)
 80018d6:	f013 fc49 	bl	801516c <osThreadNew>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <main+0x358>)
 80018de:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <main+0x35c>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	482c      	ldr	r0, [pc, #176]	; (8001998 <main+0x360>)
 80018e6:	f013 fc41 	bl	801516c <osThreadNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a2b      	ldr	r2, [pc, #172]	; (800199c <main+0x364>)
 80018ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018f0:	f013 fc16 	bl	8015120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <main+0x2bc>
 80018f6:	bf00      	nop
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40021800 	.word	0x40021800
 8001900:	40021400 	.word	0x40021400
 8001904:	40021000 	.word	0x40021000
 8001908:	40020c00 	.word	0x40020c00
 800190c:	0801f668 	.word	0x0801f668
 8001910:	20005ec4 	.word	0x20005ec4
 8001914:	20006920 	.word	0x20006920
 8001918:	20000436 	.word	0x20000436
 800191c:	0801f67c 	.word	0x0801f67c
 8001920:	20000434 	.word	0x20000434
 8001924:	20000435 	.word	0x20000435
 8001928:	20006a60 	.word	0x20006a60
 800192c:	20005f0c 	.word	0x20005f0c
 8001930:	20006a50 	.word	0x20006a50
 8001934:	200069b8 	.word	0x200069b8
 8001938:	20005f60 	.word	0x20005f60
 800193c:	40020400 	.word	0x40020400
 8001940:	20006370 	.word	0x20006370
 8001944:	0801f68c 	.word	0x0801f68c
 8001948:	0801f690 	.word	0x0801f690
 800194c:	080210e8 	.word	0x080210e8
 8001950:	080023fd 	.word	0x080023fd
 8001954:	2000636c 	.word	0x2000636c
 8001958:	0802110c 	.word	0x0802110c
 800195c:	08002421 	.word	0x08002421
 8001960:	200069b0 	.word	0x200069b0
 8001964:	08021130 	.word	0x08021130
 8001968:	08002431 	.word	0x08002431
 800196c:	200069b4 	.word	0x200069b4
 8001970:	08021154 	.word	0x08021154
 8001974:	0800244d 	.word	0x0800244d
 8001978:	20006a4c 	.word	0x20006a4c
 800197c:	08021178 	.word	0x08021178
 8001980:	08002509 	.word	0x08002509
 8001984:	20006a6c 	.word	0x20006a6c
 8001988:	0802119c 	.word	0x0802119c
 800198c:	08002515 	.word	0x08002515
 8001990:	20006940 	.word	0x20006940
 8001994:	080211c0 	.word	0x080211c0
 8001998:	08002525 	.word	0x08002525
 800199c:	20006358 	.word	0x20006358

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f018 fd44 	bl	801a43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <SystemClock_Config+0xd0>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <SystemClock_Config+0xd0>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <SystemClock_Config+0xd0>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <SystemClock_Config+0xd4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SystemClock_Config+0xd4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a00:	2309      	movs	r3, #9
 8001a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a1c:	2348      	movs	r3, #72	; 0x48
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a24:	2303      	movs	r3, #3
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f009 fb4b 	bl	800b0c8 <HAL_RCC_OscConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a38:	f000 fe18 	bl	800266c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f009 fdad 	bl	800b5b8 <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a64:	f000 fe02 	bl	800266c <Error_Handler>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3750      	adds	r7, #80	; 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001a8c:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <MX_ADC1_Init+0x9c>)
 8001a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <MX_ADC1_Init+0xa0>)
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001ad8:	f006 faf6 	bl	80080c8 <HAL_ADC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ae2:	f000 fdc3 	bl	800266c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_ADC1_Init+0x98>)
 8001af8:	f006 fb2a 	bl	8008150 <HAL_ADC_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b02:	f000 fdb3 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000676c 	.word	0x2000676c
 8001b14:	40012000 	.word	0x40012000
 8001b18:	0f000001 	.word	0x0f000001

08001b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <MX_I2C1_Init+0x78>)
 8001b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <MX_I2C1_Init+0x7c>)
 8001b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b5a:	f007 f831 	bl	8008bc0 <HAL_I2C_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b64:	f000 fd82 	bl	800266c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b6c:	f008 f81d 	bl	8009baa <HAL_I2CEx_ConfigAnalogFilter>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f000 fd79 	bl	800266c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_I2C1_Init+0x74>)
 8001b7e:	f008 f850 	bl	8009c22 <HAL_I2CEx_ConfigDigitalFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b88:	f000 fd70 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200062a4 	.word	0x200062a4
 8001b94:	40005400 	.word	0x40005400
 8001b98:	000186a0 	.word	0x000186a0

08001b9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <MX_I2C2_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <MX_I2C2_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bda:	f006 fff1 	bl	8008bc0 <HAL_I2C_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f000 fd42 	bl	800266c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bec:	f007 ffdd 	bl	8009baa <HAL_I2CEx_ConfigAnalogFilter>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bf6:	f000 fd39 	bl	800266c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_I2C2_Init+0x74>)
 8001bfe:	f008 f810 	bl	8009c22 <HAL_I2CEx_ConfigDigitalFilter>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c08:	f000 fd30 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20006304 	.word	0x20006304
 8001c14:	40005800 	.word	0x40005800
 8001c18:	000186a0 	.word	0x000186a0

08001c1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C3_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MX_I2C3_Init+0x7c>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c5a:	f006 ffb1 	bl	8008bc0 <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f000 fd02 	bl	800266c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c6c:	f007 ff9d 	bl	8009baa <HAL_I2CEx_ConfigAnalogFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f000 fcf9 	bl	800266c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C3_Init+0x74>)
 8001c7e:	f007 ffd0 	bl	8009c22 <HAL_I2CEx_ConfigDigitalFilter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c88:	f000 fcf0 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20005f0c 	.word	0x20005f0c
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_IWDG_Init+0x2c>)
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <MX_IWDG_Init+0x30>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_IWDG_Init+0x2c>)
 8001ca8:	2204      	movs	r2, #4
 8001caa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_IWDG_Init+0x2c>)
 8001cae:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001cb2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_IWDG_Init+0x2c>)
 8001cb6:	f007 fff3 	bl	8009ca0 <HAL_IWDG_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001cc0:	f000 fcd4 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200062f8 	.word	0x200062f8
 8001ccc:	40003000 	.word	0x40003000

08001cd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b090      	sub	sp, #64	; 0x40
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2228      	movs	r2, #40	; 0x28
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f018 fba3 	bl	801a43c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <MX_RTC_Init+0x110>)
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <MX_RTC_Init+0x114>)
 8001cfa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <MX_RTC_Init+0x110>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d04:	227f      	movs	r2, #127	; 0x7f
 8001d06:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d0a:	22ff      	movs	r2, #255	; 0xff
 8001d0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d1a:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d20:	482f      	ldr	r0, [pc, #188]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d22:	f00a f833 	bl	800bd8c <HAL_RTC_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d2c:	f000 fc9e 	bl	800266c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d54:	f00a f8ab 	bl	800beae <HAL_RTC_SetTime>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d5e:	f000 fc85 	bl	800266c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4619      	mov	r1, r3
 8001d82:	4817      	ldr	r0, [pc, #92]	; (8001de0 <MX_RTC_Init+0x110>)
 8001d84:	f00a f9ae 	bl	800c0e4 <HAL_RTC_SetDate>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d8e:	f000 fc6d 	bl	800266c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_RTC_Init+0x110>)
 8001dca:	f00a fa81 	bl	800c2d0 <HAL_RTC_SetAlarm_IT>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001dd4:	f000 fc4a 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3740      	adds	r7, #64	; 0x40
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20006920 	.word	0x20006920
 8001de4:	40002800 	.word	0x40002800

08001de8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI2_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e3a:	f00a fd79 	bl	800c930 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 fc12 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20005f60 	.word	0x20005f60
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI4_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI4_Init+0x64>)
 8001ea6:	f00a fd43 	bl	800c930 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f000 fbdc 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200068c4 	.word	0x200068c4
 8001ebc:	40013400 	.word	0x40013400

08001ec0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <MX_SPI5_Init+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001f0c:	220a      	movs	r2, #10
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_SPI5_Init+0x64>)
 8001f12:	f00a fd0d 	bl	800c930 <HAL_SPI_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f1c:	f000 fba6 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20005fbc 	.word	0x20005fbc
 8001f28:	40015000 	.word	0x40015000

08001f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f76:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f78:	f00b fb4c 	bl	800d614 <HAL_TIM_PWM_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f82:	f000 fb73 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001f96:	f00b ffcf 	bl	800df38 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fa0:	f000 fb64 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa4:	2360      	movs	r3, #96	; 0x60
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001fbc:	f00b fc82 	bl	800d8c4 <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001fc6:	f000 fb51 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <MX_TIM2_Init+0xac>)
 8001fcc:	f000 fda4 	bl	8002b18 <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20006a04 	.word	0x20006a04

08001fdc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_UART8_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_UART8_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_UART8_Init+0x4c>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_UART8_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_UART8_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_UART8_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_UART8_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_UART8_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_UART8_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_UART8_Init+0x4c>)
 8002014:	f00c f820 	bl	800e058 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800201e:	f000 fb25 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20005ec4 	.word	0x20005ec4
 800202c:	40007c00 	.word	0x40007c00

08002030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <MX_USART3_UART_Init+0x50>)
 8002038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_USART3_UART_Init+0x4c>)
 800203c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_USART3_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_USART3_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USART3_UART_Init+0x4c>)
 8002068:	f00b fff6 	bl	800e058 <HAL_UART_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002072:	f000 fafb 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20006014 	.word	0x20006014
 8002080:	40004800 	.word	0x40004800

08002084 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <MX_USART6_UART_Init+0x50>)
 800208c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 8002090:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002094:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_USART6_UART_Init+0x4c>)
 80020bc:	f00b ffcc 	bl	800e058 <HAL_UART_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020c6:	f000 fad1 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200069b8 	.word	0x200069b8
 80020d4:	40011400 	.word	0x40011400

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	4bb5      	ldr	r3, [pc, #724]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4ab4      	ldr	r2, [pc, #720]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80020f8:	f043 0310 	orr.w	r3, r3, #16
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4bb2      	ldr	r3, [pc, #712]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	4bae      	ldr	r3, [pc, #696]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4aad      	ldr	r2, [pc, #692]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4bab      	ldr	r3, [pc, #684]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4ba7      	ldr	r3, [pc, #668]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4aa6      	ldr	r2, [pc, #664]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4ba4      	ldr	r3, [pc, #656]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a9f      	ldr	r2, [pc, #636]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b9d      	ldr	r3, [pc, #628]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b99      	ldr	r3, [pc, #612]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a91      	ldr	r2, [pc, #580]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80021a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a83      	ldr	r2, [pc, #524]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <MX_GPIO_Init+0x2f0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f248 4184 	movw	r1, #33924	; 0x8484
 80021d4:	487d      	ldr	r0, [pc, #500]	; (80023cc <MX_GPIO_Init+0x2f4>)
 80021d6:	f006 fcc1 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021e0:	487b      	ldr	r0, [pc, #492]	; (80023d0 <MX_GPIO_Init+0x2f8>)
 80021e2:	f006 fcbb 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021ec:	4879      	ldr	r0, [pc, #484]	; (80023d4 <MX_GPIO_Init+0x2fc>)
 80021ee:	f006 fcb5 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2108      	movs	r1, #8
 80021f6:	4878      	ldr	r0, [pc, #480]	; (80023d8 <MX_GPIO_Init+0x300>)
 80021f8:	f006 fcb0 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021fc:	2200      	movs	r2, #0
 80021fe:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002202:	4876      	ldr	r0, [pc, #472]	; (80023dc <MX_GPIO_Init+0x304>)
 8002204:	f006 fcaa 	bl	8008b5c <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220e:	4874      	ldr	r0, [pc, #464]	; (80023e0 <MX_GPIO_Init+0x308>)
 8002210:	f006 fca4 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002214:	2200      	movs	r2, #0
 8002216:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800221a:	4872      	ldr	r0, [pc, #456]	; (80023e4 <MX_GPIO_Init+0x30c>)
 800221c:	f006 fc9e 	bl	8008b5c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002220:	f248 4384 	movw	r3, #33924	; 0x8484
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	4619      	mov	r1, r3
 8002238:	4864      	ldr	r0, [pc, #400]	; (80023cc <MX_GPIO_Init+0x2f4>)
 800223a:	f006 facb 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800223e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	485e      	ldr	r0, [pc, #376]	; (80023d0 <MX_GPIO_Init+0x2f8>)
 8002258:	f006 fabc 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800225c:	2301      	movs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002260:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4858      	ldr	r0, [pc, #352]	; (80023d4 <MX_GPIO_Init+0x2fc>)
 8002272:	f006 faaf 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8002276:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	4851      	ldr	r0, [pc, #324]	; (80023d4 <MX_GPIO_Init+0x2fc>)
 8002290:	f006 faa0 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002294:	2308      	movs	r3, #8
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	484b      	ldr	r0, [pc, #300]	; (80023d8 <MX_GPIO_Init+0x300>)
 80022ac:	f006 fa92 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80022b0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4843      	ldr	r0, [pc, #268]	; (80023d4 <MX_GPIO_Init+0x2fc>)
 80022c6:	f006 fa85 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022ca:	2302      	movs	r3, #2
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4840      	ldr	r0, [pc, #256]	; (80023e0 <MX_GPIO_Init+0x308>)
 80022de:	f006 fa79 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4836      	ldr	r0, [pc, #216]	; (80023d0 <MX_GPIO_Init+0x2f8>)
 80022f8:	f006 fa6c 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80022fc:	f242 4319 	movw	r3, #9241	; 0x2419
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800230a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230e:	4619      	mov	r1, r3
 8002310:	4832      	ldr	r0, [pc, #200]	; (80023dc <MX_GPIO_Init+0x304>)
 8002312:	f006 fa5f 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002316:	f645 2326 	movw	r3, #23078	; 0x5a26
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	2301      	movs	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	482b      	ldr	r0, [pc, #172]	; (80023dc <MX_GPIO_Init+0x304>)
 8002330:	f006 fa50 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002334:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4820      	ldr	r0, [pc, #128]	; (80023cc <MX_GPIO_Init+0x2f4>)
 800234a:	f006 fa43 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002364:	4619      	mov	r1, r3
 8002366:	481e      	ldr	r0, [pc, #120]	; (80023e0 <MX_GPIO_Init+0x308>)
 8002368:	f006 fa34 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800236c:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	4817      	ldr	r0, [pc, #92]	; (80023e4 <MX_GPIO_Init+0x30c>)
 8002386:	f006 fa25 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800238a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <MX_GPIO_Init+0x30c>)
 80023a0:	f006 fa18 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80023a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <MX_GPIO_Init+0x304>)
 80023bc:	f006 fa0a 	bl	80087d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2105      	movs	r1, #5
 80023c4:	2006      	movs	r0, #6
 80023c6:	e00f      	b.n	80023e8 <MX_GPIO_Init+0x310>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	f006 f9bc 	bl	8008764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023ec:	2006      	movs	r0, #6
 80023ee:	f006 f9d5 	bl	800879c <HAL_NVIC_EnableIRQ>

}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop

080023fc <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002404:	f016 f9da 	bl	80187bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8002408:	f012 ff42 	bl	8015290 <osThreadGetId>
 800240c:	4603      	mov	r3, r0
 800240e:	4a03      	ldr	r2, [pc, #12]	; (800241c <StartMemory0+0x20>)
 8002410:	6013      	str	r3, [r2, #0]
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
		  sd_write(&fil, writeBuf);
		  f_close(&fil);
		  */

		  osDelay(1000/DATA_FREQ);
 8002412:	2064      	movs	r0, #100	; 0x64
 8002414:	f012 ff4d 	bl	80152b2 <osDelay>
 8002418:	e7fb      	b.n	8002412 <StartMemory0+0x16>
 800241a:	bf00      	nop
 800241c:	2000605c 	.word	0x2000605c

08002420 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0c2      	sub	sp, #264	; 0x108
 8002424:	af00      	add	r7, sp, #0
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 800242a:	f012 ff3c 	bl	80152a6 <osThreadExit>
	...

08002430 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8002438:	f012 ff2a 	bl	8015290 <osThreadGetId>
 800243c:	4603      	mov	r3, r0
 800243e:	4a02      	ldr	r2, [pc, #8]	; (8002448 <StartTelemetry2+0x18>)
 8002440:	6093      	str	r3, [r2, #8]

	osThreadExit();
 8002442:	f012 ff30 	bl	80152a6 <osThreadExit>
 8002446:	bf00      	nop
 8002448:	2000605c 	.word	0x2000605c

0800244c <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002454:	f012 ff1c 	bl	8015290 <osThreadGetId>
 8002458:	4603      	mov	r3, r0
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <StartSensors3+0x88>)
 800245c:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2102      	movs	r1, #2
 8002462:	481d      	ldr	r0, [pc, #116]	; (80024d8 <StartSensors3+0x8c>)
 8002464:	f006 fb7a 	bl	8008b5c <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <StartSensors3+0x90>)
 800246a:	491d      	ldr	r1, [pc, #116]	; (80024e0 <StartSensors3+0x94>)
 800246c:	481d      	ldr	r0, [pc, #116]	; (80024e4 <StartSensors3+0x98>)
 800246e:	f000 fddf 	bl	8003030 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 8002472:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <StartSensors3+0x9c>)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <StartSensors3+0xa0>)
 8002476:	ca07      	ldmia	r2, {r0, r1, r2}
 8002478:	f7fe feca 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <StartSensors3+0x9c>)
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <StartSensors3+0xa4>)
 8002480:	ca07      	ldmia	r2, {r0, r1, r2}
 8002482:	f7fe ff35 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <StartSensors3+0x9c>)
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <StartSensors3+0xa8>)
 800248a:	ca07      	ldmia	r2, {r0, r1, r2}
 800248c:	f7fe ff06 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <StartSensors3+0xac>)
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <StartSensors3+0xb0>)
 8002494:	ca07      	ldmia	r2, {r0, r1, r2}
 8002496:	f7ff f829 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <StartSensors3+0xac>)
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <StartSensors3+0xb4>)
 800249e:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a0:	f7ff f850 	bl	8001544 <MRT_LPS22HH_getTemperature>
	  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <StartSensors3+0xb0>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	f001 faa3 	bl	80039f8 <MRT_getAltitude>
 80024b2:	eef0 7a40 	vmov.f32	s15, s0
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <StartSensors3+0xb8>)
 80024b8:	edc3 7a00 	vstr	s15, [r3]

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 80024bc:	f005 fad8 	bl	8007a70 <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2102      	movs	r1, #2
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <StartSensors3+0x8c>)
 80024c6:	f006 fb49 	bl	8008b5c <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 80024ca:	2032      	movs	r0, #50	; 0x32
 80024cc:	f012 fef1 	bl	80152b2 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024d0:	e7c5      	b.n	800245e <StartSensors3+0x12>
 80024d2:	bf00      	nop
 80024d4:	2000605c 	.word	0x2000605c
 80024d8:	40020800 	.word	0x40020800
 80024dc:	200069a8 	.word	0x200069a8
 80024e0:	200067b4 	.word	0x200067b4
 80024e4:	2000691c 	.word	0x2000691c
 80024e8:	20006a60 	.word	0x20006a60
 80024ec:	2000040c 	.word	0x2000040c
 80024f0:	20000418 	.word	0x20000418
 80024f4:	20000424 	.word	0x20000424
 80024f8:	20006a50 	.word	0x20006a50
 80024fc:	20000404 	.word	0x20000404
 8002500:	20000408 	.word	0x20000408
 8002504:	20000428 	.word	0x20000428

08002508 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002510:	f012 fec9 	bl	80152a6 <osThreadExit>

08002514 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0c2      	sub	sp, #264	; 0x108
 8002518:	af00      	add	r7, sp, #0
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 800251e:	f012 fec2 	bl	80152a6 <osThreadExit>
	...

08002524 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b0c7      	sub	sp, #284	; 0x11c
 8002528:	af04      	add	r7, sp, #16
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2104      	movs	r1, #4
 8002532:	4837      	ldr	r0, [pc, #220]	; (8002610 <StartWatchDog+0xec>)
 8002534:	f006 fb12 	bl	8008b5c <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 8002538:	4836      	ldr	r0, [pc, #216]	; (8002614 <StartWatchDog+0xf0>)
 800253a:	f007 fbf3 	bl	8009d24 <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800253e:	2200      	movs	r2, #0
 8002540:	4935      	ldr	r1, [pc, #212]	; (8002618 <StartWatchDog+0xf4>)
 8002542:	4836      	ldr	r0, [pc, #216]	; (800261c <StartWatchDog+0xf8>)
 8002544:	f009 fd70 	bl	800c028 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002548:	2200      	movs	r2, #0
 800254a:	4935      	ldr	r1, [pc, #212]	; (8002620 <StartWatchDog+0xfc>)
 800254c:	4833      	ldr	r0, [pc, #204]	; (800261c <StartWatchDog+0xf8>)
 800254e:	f009 fe70 	bl	800c232 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <StartWatchDog+0xf4>)
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <StartWatchDog+0x100>)
 8002558:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <StartWatchDog+0xf4>)
 800255c:	785a      	ldrb	r2, [r3, #1]
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <StartWatchDog+0x104>)
 8002560:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <StartWatchDog+0xf4>)
 8002564:	789a      	ldrb	r2, [r3, #2]
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <StartWatchDog+0x108>)
 8002568:	701a      	strb	r2, [r3, #0]

	  memset(buffer, 0, TX_BUF_DIM);
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f017 ff61 	bl	801a43c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <StartWatchDog+0x100>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461d      	mov	r5, r3
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <StartWatchDog+0x104>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461e      	mov	r6, r3
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <StartWatchDog+0x108>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461c      	mov	r4, r3
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <StartWatchDog+0x10c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ffe9 	bl	8000568 <__aeabi_f2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	f107 0008 	add.w	r0, r7, #8
 800259e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025a2:	9400      	str	r4, [sp, #0]
 80025a4:	4633      	mov	r3, r6
 80025a6:	462a      	mov	r2, r5
 80025a8:	4922      	ldr	r1, [pc, #136]	; (8002634 <StartWatchDog+0x110>)
 80025aa:	f018 ffc5 	bl	801b538 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fe1c 	bl	80001f0 <strlen>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 0108 	add.w	r1, r7, #8
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	481c      	ldr	r0, [pc, #112]	; (8002638 <StartWatchDog+0x114>)
 80025c6:	f00b fd94 	bl	800e0f2 <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80025ca:	f001 fa03 	bl	80039d4 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <StartWatchDog+0x118>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d111      	bne.n	80025fa <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <StartWatchDog+0x11c>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <StartWatchDog+0x11c>)
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <StartWatchDog+0x120>)
 80025e2:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f001 fcaf 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80025ea:	2303      	movs	r3, #3
 80025ec:	2200      	movs	r2, #0
 80025ee:	2101      	movs	r1, #1
 80025f0:	4814      	ldr	r0, [pc, #80]	; (8002644 <StartWatchDog+0x120>)
 80025f2:	f001 fdf3 	bl	80041dc <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 80025f6:	f7ff f809 	bl	800160c <__NVIC_SystemReset>
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2104      	movs	r1, #4
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <StartWatchDog+0xec>)
 8002600:	f006 faac 	bl	8008b5c <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002608:	f012 fe53 	bl	80152b2 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800260c:	e78f      	b.n	800252e <StartWatchDog+0xa>
 800260e:	bf00      	nop
 8002610:	40020800 	.word	0x40020800
 8002614:	200062f8 	.word	0x200062f8
 8002618:	20000668 	.word	0x20000668
 800261c:	20006920 	.word	0x20006920
 8002620:	2000067c 	.word	0x2000067c
 8002624:	20000434 	.word	0x20000434
 8002628:	20000435 	.word	0x20000435
 800262c:	20000436 	.word	0x20000436
 8002630:	20000428 	.word	0x20000428
 8002634:	0801f694 	.word	0x0801f694
 8002638:	20005ec4 	.word	0x20005ec4
 800263c:	200006a8 	.word	0x200006a8
 8002640:	20000433 	.word	0x20000433
 8002644:	20006058 	.word	0x20006058

08002648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800265a:	f005 fcf1 	bl	8008040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40001000 	.word	0x40001000

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_MspInit+0x54>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_MspInit+0x54>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_MspInit+0x54>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_MspInit+0x54>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_MspInit+0x54>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_MspInit+0x54>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	210f      	movs	r1, #15
 80026be:	f06f 0001 	mvn.w	r0, #1
 80026c2:	f006 f84f 	bl	8008764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_ADC_MspInit+0x7c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_ADC_MspInit+0x80>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_ADC_MspInit+0x80>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_ADC_MspInit+0x80>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_ADC_MspInit+0x80>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_ADC_MspInit+0x80>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_ADC_MspInit+0x80>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800272e:	2340      	movs	r3, #64	; 0x40
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002732:	2303      	movs	r3, #3
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_ADC_MspInit+0x84>)
 8002742:	f006 f847 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40012000 	.word	0x40012000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_I2C_MspInit+0x190>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12d      	bne.n	80027da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a0:	2312      	movs	r3, #18
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ac:	2304      	movs	r3, #4
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	484f      	ldr	r0, [pc, #316]	; (80028f4 <HAL_I2C_MspInit+0x198>)
 80027b8:	f006 f80c 	bl	80087d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
 80027cc:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027d8:	e083      	b.n	80028e2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_I2C_MspInit+0x19c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d12d      	bne.n	8002840 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002806:	2312      	movs	r3, #18
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280a:	2301      	movs	r3, #1
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002812:	2304      	movs	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281a:	4619      	mov	r1, r3
 800281c:	4835      	ldr	r0, [pc, #212]	; (80028f4 <HAL_I2C_MspInit+0x198>)
 800281e:	f005 ffd9 	bl	80087d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a31      	ldr	r2, [pc, #196]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 800282c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]
}
 800283e:	e050      	b.n	80028e2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_I2C_MspInit+0x1a0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d14b      	bne.n	80028e2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002888:	2312      	movs	r3, #18
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288c:	2301      	movs	r3, #1
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002894:	2304      	movs	r3, #4
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	4619      	mov	r1, r3
 800289e:	4818      	ldr	r0, [pc, #96]	; (8002900 <HAL_I2C_MspInit+0x1a4>)
 80028a0:	f005 ff98 	bl	80087d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028aa:	2312      	movs	r3, #18
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b6:	2304      	movs	r3, #4
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028be:	4619      	mov	r1, r3
 80028c0:	4810      	ldr	r0, [pc, #64]	; (8002904 <HAL_I2C_MspInit+0x1a8>)
 80028c2:	f005 ff87 	bl	80087d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80028d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_I2C_MspInit+0x194>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3738      	adds	r7, #56	; 0x38
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40005800 	.word	0x40005800
 80028fc:	40005c00 	.word	0x40005c00
 8002900:	40020800 	.word	0x40020800
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	; 0x38
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2230      	movs	r2, #48	; 0x30
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f017 fd8f 	bl	801a43c <memset>
  if(hrtc->Instance==RTC)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_RTC_MspInit+0x5c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d119      	bne.n	800295c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002928:	2320      	movs	r3, #32
 800292a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800292c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	4618      	mov	r0, r3
 8002938:	f009 f86a 	bl	800ba10 <HAL_RCCEx_PeriphCLKConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002942:	f7ff fe93 	bl	800266c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RTC_MspInit+0x60>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2105      	movs	r1, #5
 8002950:	2029      	movs	r0, #41	; 0x29
 8002952:	f005 ff07 	bl	8008764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002956:	2029      	movs	r0, #41	; 0x29
 8002958:	f005 ff20 	bl	800879c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3738      	adds	r7, #56	; 0x38
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	42470e3c 	.word	0x42470e3c

0800296c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_SPI_MspInit+0x150>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12d      	bne.n	80029ea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	4b44      	ldr	r3, [pc, #272]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a43      	ldr	r2, [pc, #268]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029d8:	2305      	movs	r3, #5
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	4619      	mov	r1, r3
 80029e2:	4838      	ldr	r0, [pc, #224]	; (8002ac4 <HAL_SPI_MspInit+0x158>)
 80029e4:	f005 fef6 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80029e8:	e064      	b.n	8002ab4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <HAL_SPI_MspInit+0x15c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12d      	bne.n	8002a50 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	4a30      	ldr	r2, [pc, #192]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 80029fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a02:	6453      	str	r3, [r2, #68]	; 0x44
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a1a:	f043 0310 	orr.w	r3, r3, #16
 8002a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002a2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4619      	mov	r1, r3
 8002a48:	4820      	ldr	r0, [pc, #128]	; (8002acc <HAL_SPI_MspInit+0x160>)
 8002a4a:	f005 fec3 	bl	80087d4 <HAL_GPIO_Init>
}
 8002a4e:	e031      	b.n	8002ab4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_SPI_MspInit+0x164>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a80:	f043 0320 	orr.w	r3, r3, #32
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_SPI_MspInit+0x154>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a92:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <HAL_SPI_MspInit+0x168>)
 8002ab0:	f005 fe90 	bl	80087d4 <HAL_GPIO_Init>
}
 8002ab4:	bf00      	nop
 8002ab6:	3738      	adds	r7, #56	; 0x38
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40003800 	.word	0x40003800
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40013400 	.word	0x40013400
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40015000 	.word	0x40015000
 8002ad4:	40021400 	.word	0x40021400

08002ad8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d10d      	bne.n	8002b06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d11d      	bne.n	8002b76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_TIM_MspPostInit+0x68>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_TIM_MspPostInit+0x68>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_TIM_MspPostInit+0x68>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002b56:	2304      	movs	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <HAL_TIM_MspPostInit+0x6c>)
 8002b72:	f005 fe2f 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12c      	bne.n	8002c04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a49      	ldr	r2, [pc, #292]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a42      	ldr	r2, [pc, #264]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002be2:	2303      	movs	r3, #3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4837      	ldr	r0, [pc, #220]	; (8002cdc <HAL_UART_MspInit+0x154>)
 8002bfe:	f005 fde9 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c02:	e063      	b.n	8002ccc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a35      	ldr	r2, [pc, #212]	; (8002ce0 <HAL_UART_MspInit+0x158>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12d      	bne.n	8002c6a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c60:	4619      	mov	r1, r3
 8002c62:	4820      	ldr	r0, [pc, #128]	; (8002ce4 <HAL_UART_MspInit+0x15c>)
 8002c64:	f005 fdb6 	bl	80087d4 <HAL_GPIO_Init>
}
 8002c68:	e030      	b.n	8002ccc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_UART_MspInit+0x160>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12b      	bne.n	8002ccc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	6453      	str	r3, [r2, #68]	; 0x44
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002cac:	23c0      	movs	r3, #192	; 0xc0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <HAL_UART_MspInit+0x164>)
 8002cc8:	f005 fd84 	bl	80087d4 <HAL_GPIO_Init>
}
 8002ccc:	bf00      	nop
 8002cce:	3738      	adds	r7, #56	; 0x38
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40007c00 	.word	0x40007c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	40020800 	.word	0x40020800

08002cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	2036      	movs	r0, #54	; 0x36
 8002d06:	f005 fd2d 	bl	8008764 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d0a:	2036      	movs	r0, #54	; 0x36
 8002d0c:	f005 fd46 	bl	800879c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <HAL_InitTick+0xa4>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_InitTick+0xa4>)
 8002d1a:	f043 0310 	orr.w	r3, r3, #16
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_InitTick+0xa4>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d2c:	f107 0210 	add.w	r2, r7, #16
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f008 fe38 	bl	800b9ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d3c:	f008 fe0e 	bl	800b95c <HAL_RCC_GetPCLK1Freq>
 8002d40:	4603      	mov	r3, r0
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_InitTick+0xa8>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0c9b      	lsrs	r3, r3, #18
 8002d50:	3b01      	subs	r3, #1
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_InitTick+0xac>)
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_InitTick+0xb0>)
 8002d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_InitTick+0xac>)
 8002d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d60:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_InitTick+0xac>)
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_InitTick+0xac>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_InitTick+0xac>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d74:	4809      	ldr	r0, [pc, #36]	; (8002d9c <HAL_InitTick+0xac>)
 8002d76:	f00a fb83 	bl	800d480 <HAL_TIM_Base_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d80:	4806      	ldr	r0, [pc, #24]	; (8002d9c <HAL_InitTick+0xac>)
 8002d82:	f00a fbd7 	bl	800d534 <HAL_TIM_Base_Start_IT>
 8002d86:	4603      	mov	r3, r0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3730      	adds	r7, #48	; 0x30
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	431bde83 	.word	0x431bde83
 8002d9c:	20006cac 	.word	0x20006cac
 8002da0:	40001000 	.word	0x40001000

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f005 fed7 	bl	8008b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <RTC_Alarm_IRQHandler+0x10>)
 8002dee:	f009 fba7 	bl	800c540 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20006920 	.word	0x20006920

08002dfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <TIM6_DAC_IRQHandler+0x10>)
 8002e02:	f00a fc56 	bl	800d6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20006cac 	.word	0x20006cac

08002e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <OTG_FS_IRQHandler+0x10>)
 8002e16:	f007 f8e5 	bl	8009fe4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20008ba0 	.word	0x20008ba0

08002e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return 1;
 8002e28:	2301      	movs	r3, #1
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_kill>:

int _kill(int pid, int sig)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e3e:	f017 f9a9 	bl	801a194 <__errno>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2216      	movs	r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
	return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_exit>:

void _exit (int status)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffe7 	bl	8002e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e66:	e7fe      	b.n	8002e66 <_exit+0x12>

08002e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e7a:	f3af 8000 	nop.w
 8002e7e:	4601      	mov	r1, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	b2ca      	uxtb	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf0      	blt.n	8002e7a <_read+0x12>
	}

return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e009      	b.n	8002ec8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	60ba      	str	r2, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbf1      	blt.n	8002eb4 <_write+0x12>
	}
	return len;
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_close>:

int _close(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f02:	605a      	str	r2, [r3, #4]
	return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_isatty>:

int _isatty(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <_sbrk+0x5c>)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_sbrk+0x60>)
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_sbrk+0x64>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <_sbrk+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d207      	bcs.n	8002f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f74:	f017 f90e 	bl	801a194 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20030000 	.word	0x20030000
 8002fa4:	00000400 	.word	0x00000400
 8002fa8:	2000042c 	.word	0x2000042c
 8002fac:	20008fb8 	.word	0x20008fb8

08002fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <SystemInit+0x28>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <SystemInit+0x28>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SystemInit+0x28>)
 8002fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fca:	609a      	str	r2, [r3, #8]
#endif
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fe2:	e003      	b.n	8002fec <LoopCopyDataInit>

08002fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fea:	3104      	adds	r1, #4

08002fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ff4:	d3f6      	bcc.n	8002fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ff8:	e002      	b.n	8003000 <LoopFillZerobss>

08002ffa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ffc:	f842 3b04 	str.w	r3, [r2], #4

08003000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003004:	d3f9      	bcc.n	8002ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003006:	f7ff ffd3 	bl	8002fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f017 f9bf 	bl	801a38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7fe fb13 	bl	8001638 <main>
  bx  lr    
 8003012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003014:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003018:	080217f4 	.word	0x080217f4
  ldr  r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003020:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003024:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 8003028:	20008fb8 	.word	0x20008fb8

0800302c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC_IRQHandler>
	...

08003030 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 800303c:	2364      	movs	r3, #100	; 0x64
 800303e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003048:	e073      	b.n	8003132 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <GPS_Poll+0x118>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	2364      	movs	r3, #100	; 0x64
 8003050:	2201      	movs	r2, #1
 8003052:	493e      	ldr	r1, [pc, #248]	; (800314c <GPS_Poll+0x11c>)
 8003054:	f00b f8df 	bl	800e216 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <GPS_Poll+0x11c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b0a      	cmp	r3, #10
 800305e:	d00f      	beq.n	8003080 <GPS_Poll+0x50>
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <GPS_Poll+0x120>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b63      	cmp	r3, #99	; 0x63
 8003066:	d80b      	bhi.n	8003080 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <GPS_Poll+0x120>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	b2d1      	uxtb	r1, r2
 8003070:	4a37      	ldr	r2, [pc, #220]	; (8003150 <GPS_Poll+0x120>)
 8003072:	7011      	strb	r1, [r2, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <GPS_Poll+0x11c>)
 8003078:	7819      	ldrb	r1, [r3, #0]
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <GPS_Poll+0x124>)
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	e021      	b.n	80030c4 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003080:	4834      	ldr	r0, [pc, #208]	; (8003154 <GPS_Poll+0x124>)
 8003082:	f000 f86b 	bl	800315c <GPS_validate>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 800308c:	4831      	ldr	r0, [pc, #196]	; (8003154 <GPS_Poll+0x124>)
 800308e:	f000 f8c7 	bl	8003220 <GPS_parse>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <GPS_Poll+0x128>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <GPS_Poll+0x128>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <GPS_Poll+0x128>)
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
					done = 1;
 80030b0:	2301      	movs	r3, #1
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80030b4:	4b26      	ldr	r3, [pc, #152]	; (8003150 <GPS_Poll+0x120>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80030ba:	2264      	movs	r2, #100	; 0x64
 80030bc:	2100      	movs	r1, #0
 80030be:	4825      	ldr	r0, [pc, #148]	; (8003154 <GPS_Poll+0x124>)
 80030c0:	f017 f9bc 	bl	801a43c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <GPS_Poll+0x118>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <GPS_Poll+0x118>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <GPS_Poll+0x118>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <GPS_Poll+0x118>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <GPS_Poll+0x118>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <GPS_Poll+0x118>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <GPS_Poll+0x118>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <GPS_Poll+0x118>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 800312c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800312e:	3301      	adds	r3, #1
 8003130:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003132:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003136:	429a      	cmp	r2, r3
 8003138:	d202      	bcs.n	8003140 <GPS_Poll+0x110>
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d084      	beq.n	800304a <GPS_Poll+0x1a>
	}
}
 8003140:	bf00      	nop
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20005fb8 	.word	0x20005fb8
 800314c:	20000430 	.word	0x20000430
 8003150:	20000431 	.word	0x20000431
 8003154:	20006d4c 	.word	0x20006d4c
 8003158:	20006cf4 	.word	0x20006cf4

0800315c <GPS_validate>:

int GPS_validate(char *nmeastr){
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b24      	cmp	r3, #36	; 0x24
 8003176:	d103      	bne.n	8003180 <GPS_validate+0x24>
        i++;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800317e:	e00c      	b.n	800319a <GPS_validate+0x3e>
        return 0;
 8003180:	2300      	movs	r3, #0
 8003182:	e047      	b.n	8003214 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4053      	eors	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        i++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <GPS_validate+0x5c>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b2a      	cmp	r3, #42	; 0x2a
 80031b0:	d002      	beq.n	80031b8 <GPS_validate+0x5c>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b4a      	cmp	r3, #74	; 0x4a
 80031b6:	dde5      	ble.n	8003184 <GPS_validate+0x28>
    }

    if(i >= 75){
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b4a      	cmp	r3, #74	; 0x4a
 80031bc:	dd01      	ble.n	80031c2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80031be:	2300      	movs	r3, #0
 80031c0:	e028      	b.n	8003214 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b2a      	cmp	r3, #42	; 0x2a
 80031cc:	d119      	bne.n	8003202 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3302      	adds	r3, #2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	490a      	ldr	r1, [pc, #40]	; (800321c <GPS_validate+0xc0>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f018 f9a0 	bl	801b538 <siprintf>
    return((checkcalcstr[0] == check[0])
 80031f8:	7a3a      	ldrb	r2, [r7, #8]
 80031fa:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d108      	bne.n	8003212 <GPS_validate+0xb6>
 8003200:	e001      	b.n	8003206 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003202:	2300      	movs	r3, #0
 8003204:	e006      	b.n	8003214 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003206:	7a7a      	ldrb	r2, [r7, #9]
 8003208:	7b7b      	ldrb	r3, [r7, #13]
 800320a:	429a      	cmp	r2, r3
 800320c:	d101      	bne.n	8003212 <GPS_validate+0xb6>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <GPS_validate+0xb8>
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	0801f6b4 	.word	0x0801f6b4

08003220 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af08      	add	r7, sp, #32
 8003226:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003228:	2206      	movs	r2, #6
 800322a:	496d      	ldr	r1, [pc, #436]	; (80033e0 <GPS_parse+0x1c0>)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f018 fa1c 	bl	801b66a <strncmp>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d139      	bne.n	80032ac <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <GPS_parse+0x1c4>)
 800323a:	9307      	str	r3, [sp, #28]
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <GPS_parse+0x1c8>)
 800323e:	9306      	str	r3, [sp, #24]
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <GPS_parse+0x1cc>)
 8003242:	9305      	str	r3, [sp, #20]
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <GPS_parse+0x1d0>)
 8003246:	9304      	str	r3, [sp, #16]
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <GPS_parse+0x1d4>)
 800324a:	9303      	str	r3, [sp, #12]
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <GPS_parse+0x1d8>)
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <GPS_parse+0x1dc>)
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <GPS_parse+0x1e0>)
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <GPS_parse+0x1e4>)
 800325a:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <GPS_parse+0x1e8>)
 800325c:	496b      	ldr	r1, [pc, #428]	; (800340c <GPS_parse+0x1ec>)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f018 f98a 	bl	801b578 <siscanf>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f340 80b5 	ble.w	80033d6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <GPS_parse+0x1f0>)
 800326e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003272:	4b67      	ldr	r3, [pc, #412]	; (8003410 <GPS_parse+0x1f0>)
 8003274:	7e1b      	ldrb	r3, [r3, #24]
 8003276:	4618      	mov	r0, r3
 8003278:	eeb0 0a67 	vmov.f32	s0, s15
 800327c:	f000 f8ec 	bl	8003458 <GPS_nmea_to_dec>
 8003280:	eef0 7a40 	vmov.f32	s15, s0
 8003284:	4b62      	ldr	r3, [pc, #392]	; (8003410 <GPS_parse+0x1f0>)
 8003286:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800328a:	4b61      	ldr	r3, [pc, #388]	; (8003410 <GPS_parse+0x1f0>)
 800328c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003290:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <GPS_parse+0x1f0>)
 8003292:	7e5b      	ldrb	r3, [r3, #25]
 8003294:	4618      	mov	r0, r3
 8003296:	eeb0 0a67 	vmov.f32	s0, s15
 800329a:	f000 f8dd 	bl	8003458 <GPS_nmea_to_dec>
 800329e:	eef0 7a40 	vmov.f32	s15, s0
 80032a2:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <GPS_parse+0x1f0>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e095      	b.n	80033d8 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80032ac:	2206      	movs	r2, #6
 80032ae:	4959      	ldr	r1, [pc, #356]	; (8003414 <GPS_parse+0x1f4>)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f018 f9da 	bl	801b66a <strncmp>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d134      	bne.n	8003326 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <GPS_parse+0x1f8>)
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <GPS_parse+0x1fc>)
 80032c2:	9304      	str	r3, [sp, #16]
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <GPS_parse+0x200>)
 80032c6:	9303      	str	r3, [sp, #12]
 80032c8:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <GPS_parse+0x1d8>)
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <GPS_parse+0x1dc>)
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <GPS_parse+0x1e0>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <GPS_parse+0x1e4>)
 80032d6:	4a4c      	ldr	r2, [pc, #304]	; (8003408 <GPS_parse+0x1e8>)
 80032d8:	4952      	ldr	r1, [pc, #328]	; (8003424 <GPS_parse+0x204>)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f018 f94c 	bl	801b578 <siscanf>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dd77      	ble.n	80033d6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <GPS_parse+0x1f0>)
 80032e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80032ec:	4b48      	ldr	r3, [pc, #288]	; (8003410 <GPS_parse+0x1f0>)
 80032ee:	7e1b      	ldrb	r3, [r3, #24]
 80032f0:	4618      	mov	r0, r3
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	f000 f8af 	bl	8003458 <GPS_nmea_to_dec>
 80032fa:	eef0 7a40 	vmov.f32	s15, s0
 80032fe:	4b44      	ldr	r3, [pc, #272]	; (8003410 <GPS_parse+0x1f0>)
 8003300:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003304:	4b42      	ldr	r3, [pc, #264]	; (8003410 <GPS_parse+0x1f0>)
 8003306:	edd3 7a03 	vldr	s15, [r3, #12]
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <GPS_parse+0x1f0>)
 800330c:	7e5b      	ldrb	r3, [r3, #25]
 800330e:	4618      	mov	r0, r3
 8003310:	eeb0 0a67 	vmov.f32	s0, s15
 8003314:	f000 f8a0 	bl	8003458 <GPS_nmea_to_dec>
 8003318:	eef0 7a40 	vmov.f32	s15, s0
 800331c:	4b3c      	ldr	r3, [pc, #240]	; (8003410 <GPS_parse+0x1f0>)
 800331e:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003322:	2301      	movs	r3, #1
 8003324:	e058      	b.n	80033d8 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003326:	2206      	movs	r2, #6
 8003328:	493f      	ldr	r1, [pc, #252]	; (8003428 <GPS_parse+0x208>)
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f018 f99d 	bl	801b66a <strncmp>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d130      	bne.n	8003398 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <GPS_parse+0x20c>)
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <GPS_parse+0x1e8>)
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <GPS_parse+0x1d8>)
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <GPS_parse+0x1dc>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <GPS_parse+0x1e0>)
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <GPS_parse+0x1e4>)
 800334a:	4939      	ldr	r1, [pc, #228]	; (8003430 <GPS_parse+0x210>)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f018 f913 	bl	801b578 <siscanf>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	dd3e      	ble.n	80033d6 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <GPS_parse+0x1f0>)
 800335a:	edd3 7a04 	vldr	s15, [r3, #16]
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <GPS_parse+0x1f0>)
 8003360:	7e1b      	ldrb	r3, [r3, #24]
 8003362:	4618      	mov	r0, r3
 8003364:	eeb0 0a67 	vmov.f32	s0, s15
 8003368:	f000 f876 	bl	8003458 <GPS_nmea_to_dec>
 800336c:	eef0 7a40 	vmov.f32	s15, s0
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <GPS_parse+0x1f0>)
 8003372:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <GPS_parse+0x1f0>)
 8003378:	edd3 7a03 	vldr	s15, [r3, #12]
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <GPS_parse+0x1f0>)
 800337e:	7e5b      	ldrb	r3, [r3, #25]
 8003380:	4618      	mov	r0, r3
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	f000 f867 	bl	8003458 <GPS_nmea_to_dec>
 800338a:	eef0 7a40 	vmov.f32	s15, s0
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <GPS_parse+0x1f0>)
 8003390:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003394:	2301      	movs	r3, #1
 8003396:	e01f      	b.n	80033d8 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003398:	2206      	movs	r2, #6
 800339a:	4926      	ldr	r1, [pc, #152]	; (8003434 <GPS_parse+0x214>)
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f018 f964 	bl	801b66a <strncmp>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <GPS_parse+0x218>)
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <GPS_parse+0x21c>)
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <GPS_parse+0x220>)
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <GPS_parse+0x200>)
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <GPS_parse+0x224>)
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <GPS_parse+0x228>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <GPS_parse+0x22c>)
 80033c2:	4a23      	ldr	r2, [pc, #140]	; (8003450 <GPS_parse+0x230>)
 80033c4:	4923      	ldr	r1, [pc, #140]	; (8003454 <GPS_parse+0x234>)
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f018 f8d6 	bl	801b578 <siscanf>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dd01      	ble.n	80033d6 <GPS_parse+0x1b6>
            return 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <GPS_parse+0x1b8>
    }
    return 0;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	0801f6bc 	.word	0x0801f6bc
 80033e4:	20006d20 	.word	0x20006d20
 80033e8:	20006d1c 	.word	0x20006d1c
 80033ec:	20006d18 	.word	0x20006d18
 80033f0:	20006d14 	.word	0x20006d14
 80033f4:	20006d10 	.word	0x20006d10
 80033f8:	20006d0d 	.word	0x20006d0d
 80033fc:	20006d00 	.word	0x20006d00
 8003400:	20006d0c 	.word	0x20006d0c
 8003404:	20006d04 	.word	0x20006d04
 8003408:	20006d08 	.word	0x20006d08
 800340c:	0801f6c4 	.word	0x0801f6c4
 8003410:	20006cf4 	.word	0x20006cf4
 8003414:	0801f6ec 	.word	0x0801f6ec
 8003418:	20006d2c 	.word	0x20006d2c
 800341c:	20006d28 	.word	0x20006d28
 8003420:	20006d24 	.word	0x20006d24
 8003424:	0801f6f4 	.word	0x0801f6f4
 8003428:	0801f714 	.word	0x0801f714
 800342c:	20006d30 	.word	0x20006d30
 8003430:	0801f71c 	.word	0x0801f71c
 8003434:	0801f738 	.word	0x0801f738
 8003438:	20006d48 	.word	0x20006d48
 800343c:	20006d44 	.word	0x20006d44
 8003440:	20006d41 	.word	0x20006d41
 8003444:	20006d40 	.word	0x20006d40
 8003448:	20006d3c 	.word	0x20006d3c
 800344c:	20006d38 	.word	0x20006d38
 8003450:	20006d34 	.word	0x20006d34
 8003454:	0801f740 	.word	0x0801f740

08003458 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003462:	4603      	mov	r3, r0
 8003464:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003466:	ed97 7a01 	vldr	s14, [r7, #4]
 800346a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80034ec <GPS_nmea_to_dec+0x94>
 800346e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003476:	ee17 3a90 	vmov	r3, s15
 800347a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2264      	movs	r2, #100	; 0x64
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800348c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003494:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003498:	ed97 7a03 	vldr	s14, [r7, #12]
 800349c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80034f0 <GPS_nmea_to_dec+0x98>
 80034a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a4:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80034b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ba:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	2b53      	cmp	r3, #83	; 0x53
 80034c2:	d002      	beq.n	80034ca <GPS_nmea_to_dec+0x72>
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	2b57      	cmp	r3, #87	; 0x57
 80034c8:	d105      	bne.n	80034d6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80034ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ce:	eef1 7a67 	vneg.f32	s15, s15
 80034d2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	ee07 3a90 	vmov	s15, r3
}
 80034dc:	eeb0 0a67 	vmov.f32	s0, s15
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	42700000 	.word	0x42700000

080034f4 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <GPS_init+0x30>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <GPS_init+0x34>)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <GPS_init+0x34>)
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	2210      	movs	r2, #16
 8003514:	4905      	ldr	r1, [pc, #20]	; (800352c <GPS_init+0x38>)
 8003516:	f00a fdec 	bl	800e0f2 <HAL_UART_Transmit>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20005fb8 	.word	0x20005fb8
 8003528:	20006db0 	.word	0x20006db0
 800352c:	0801f760 	.word	0x0801f760

08003530 <__NVIC_SystemReset>:
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003534:	f3bf 8f4f 	dsb	sy
}
 8003538:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <__NVIC_SystemReset+0x24>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003542:	4904      	ldr	r1, [pc, #16]	; (8003554 <__NVIC_SystemReset+0x24>)
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <__NVIC_SystemReset+0x28>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800354a:	f3bf 8f4f 	dsb	sy
}
 800354e:	bf00      	nop
    __NOP();
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <__NVIC_SystemReset+0x20>
 8003554:	e000ed00 	.word	0xe000ed00
 8003558:	05fa0004 	.word	0x05fa0004

0800355c <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e007      	b.n	800357a <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <MRT_externalFlashSetup+0x50>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b02      	cmp	r3, #2
 800357e:	ddf4      	ble.n	800356a <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003580:	f000 fb90 	bl	8003ca4 <W25qxx_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 8003590:	f7ff f86c 	bl	800266c <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 8003594:	f004 f8d4 	bl	8007740 <MRT_WUProcedure>
	MRT_getFlags();
 8003598:	f000 f86c 	bl	8003674 <MRT_getFlags>
	MRT_resetInfo(uart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f94f 	bl	8003840 <MRT_resetInfo>
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20006db4 	.word	0x20006db4

080035b0 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80035c0:	f000 f804 	bl	80035cc <MRT_resetFromStart>
	}

}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80035d0:	2001      	movs	r0, #1
 80035d2:	f000 fcb9 	bl	8003f48 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80035d6:	2303      	movs	r3, #3
 80035d8:	2200      	movs	r2, #0
 80035da:	2101      	movs	r1, #1
 80035dc:	4807      	ldr	r0, [pc, #28]	; (80035fc <MRT_resetFromStart+0x30>)
 80035de:	f000 fdfd 	bl	80041dc <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 80035e2:	2002      	movs	r0, #2
 80035e4:	f000 fcb0 	bl	8003f48 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 80035e8:	2303      	movs	r3, #3
 80035ea:	2200      	movs	r2, #0
 80035ec:	2102      	movs	r1, #2
 80035ee:	4804      	ldr	r0, [pc, #16]	; (8003600 <MRT_resetFromStart+0x34>)
 80035f0:	f000 fdf4 	bl	80041dc <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 80035f4:	f002 fc8e 	bl	8005f14 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 80035f8:	f7ff ff9a 	bl	8003530 <__NVIC_SystemReset>
 80035fc:	20006db4 	.word	0x20006db4
 8003600:	20000438 	.word	0x20000438

08003604 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	e00c      	b.n	800362a <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <MRT_updateExternalFlashBuffers+0x60>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	7819      	ldrb	r1, [r3, #0]
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <MRT_updateExternalFlashBuffers+0x64>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	460a      	mov	r2, r1
 8003622:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3301      	adds	r3, #1
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	ddef      	ble.n	8003610 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003630:	2300      	movs	r3, #0
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	e00c      	b.n	8003650 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 8003636:	4a0d      	ldr	r2, [pc, #52]	; (800366c <MRT_updateExternalFlashBuffers+0x68>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363e:	7819      	ldrb	r1, [r3, #0]
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <MRT_updateExternalFlashBuffers+0x6c>)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4413      	add	r3, r2
 8003646:	460a      	mov	r2, r1
 8003648:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	ddef      	ble.n	8003636 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20000004 	.word	0x20000004
 8003668:	20006058 	.word	0x20006058
 800366c:	20000010 	.word	0x20000010
 8003670:	200067b8 	.word	0x200067b8

08003674 <MRT_getFlags>:


void MRT_getFlags(void){
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800367a:	2303      	movs	r3, #3
 800367c:	2200      	movs	r2, #0
 800367e:	2101      	movs	r1, #1
 8003680:	4865      	ldr	r0, [pc, #404]	; (8003818 <MRT_getFlags+0x1a4>)
 8003682:	f000 fee9 	bl	8004458 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003686:	2303      	movs	r3, #3
 8003688:	2200      	movs	r2, #0
 800368a:	2102      	movs	r1, #2
 800368c:	4863      	ldr	r0, [pc, #396]	; (800381c <MRT_getFlags+0x1a8>)
 800368e:	f000 fee3 	bl	8004458 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <MRT_getFlags+0x1ac>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10e      	bne.n	80036b8 <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 800369a:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <MRT_getFlags+0x1a4>)
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <MRT_getFlags+0x1a4>)
 80036a4:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f000 fc4e 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80036ac:	2303      	movs	r3, #3
 80036ae:	2200      	movs	r2, #0
 80036b0:	2101      	movs	r1, #1
 80036b2:	4859      	ldr	r0, [pc, #356]	; (8003818 <MRT_getFlags+0x1a4>)
 80036b4:	f000 fd92 	bl	80041dc <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80036b8:	2300      	movs	r3, #0
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	e00b      	b.n	80036d6 <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 80036be:	4a59      	ldr	r2, [pc, #356]	; (8003824 <MRT_getFlags+0x1b0>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	4954      	ldr	r1, [pc, #336]	; (8003818 <MRT_getFlags+0x1a4>)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	440a      	add	r2, r1
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3301      	adds	r3, #1
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	ddf0      	ble.n	80036be <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 80036dc:	2300      	movs	r3, #0
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	e00b      	b.n	80036fa <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 80036e2:	4a51      	ldr	r2, [pc, #324]	; (8003828 <MRT_getFlags+0x1b4>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	494c      	ldr	r1, [pc, #304]	; (800381c <MRT_getFlags+0x1a8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	440a      	add	r2, r1
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	ddf0      	ble.n	80036e2 <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <MRT_getFlags+0x1b8>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <MRT_getFlags+0xbc>
 8003708:	4b48      	ldr	r3, [pc, #288]	; (800382c <MRT_getFlags+0x1b8>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d00f      	beq.n	8003730 <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003710:	4b46      	ldr	r3, [pc, #280]	; (800382c <MRT_getFlags+0x1b8>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003716:	4b45      	ldr	r3, [pc, #276]	; (800382c <MRT_getFlags+0x1b8>)
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <MRT_getFlags+0x1a4>)
 800371c:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 800371e:	2001      	movs	r0, #1
 8003720:	f000 fc12 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003724:	2303      	movs	r3, #3
 8003726:	2200      	movs	r2, #0
 8003728:	2101      	movs	r1, #1
 800372a:	483b      	ldr	r0, [pc, #236]	; (8003818 <MRT_getFlags+0x1a4>)
 800372c:	f000 fd56 	bl	80041dc <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <MRT_getFlags+0x1ac>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <MRT_getFlags+0xf4>
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <MRT_getFlags+0x1ac>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d013      	beq.n	8003768 <MRT_getFlags+0xf4>
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <MRT_getFlags+0x1ac>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d00f      	beq.n	8003768 <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <MRT_getFlags+0x1ac>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <MRT_getFlags+0x1ac>)
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <MRT_getFlags+0x1a4>)
 8003754:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f000 fbf6 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800375c:	2303      	movs	r3, #3
 800375e:	2200      	movs	r2, #0
 8003760:	2101      	movs	r1, #1
 8003762:	482d      	ldr	r0, [pc, #180]	; (8003818 <MRT_getFlags+0x1a4>)
 8003764:	f000 fd3a 	bl	80041dc <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003768:	4b31      	ldr	r3, [pc, #196]	; (8003830 <MRT_getFlags+0x1bc>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <MRT_getFlags+0x124>
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <MRT_getFlags+0x1bc>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d00f      	beq.n	8003798 <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <MRT_getFlags+0x1bc>)
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <MRT_getFlags+0x1bc>)
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <MRT_getFlags+0x1a4>)
 8003784:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003786:	2001      	movs	r0, #1
 8003788:	f000 fbde 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800378c:	2303      	movs	r3, #3
 800378e:	2200      	movs	r2, #0
 8003790:	2101      	movs	r1, #1
 8003792:	4821      	ldr	r0, [pc, #132]	; (8003818 <MRT_getFlags+0x1a4>)
 8003794:	f000 fd22 	bl	80041dc <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003798:	4b26      	ldr	r3, [pc, #152]	; (8003834 <MRT_getFlags+0x1c0>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b17      	cmp	r3, #23
 800379e:	d90f      	bls.n	80037c0 <MRT_getFlags+0x14c>
		prev_hours = 0;
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <MRT_getFlags+0x1c0>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <MRT_getFlags+0x1c0>)
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	4b1c      	ldr	r3, [pc, #112]	; (800381c <MRT_getFlags+0x1a8>)
 80037ac:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 80037ae:	2002      	movs	r0, #2
 80037b0:	f000 fbca 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80037b4:	2303      	movs	r3, #3
 80037b6:	2200      	movs	r2, #0
 80037b8:	2102      	movs	r1, #2
 80037ba:	4818      	ldr	r0, [pc, #96]	; (800381c <MRT_getFlags+0x1a8>)
 80037bc:	f000 fd0e 	bl	80041dc <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <MRT_getFlags+0x1c4>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b3b      	cmp	r3, #59	; 0x3b
 80037c6:	d90f      	bls.n	80037e8 <MRT_getFlags+0x174>
		prev_min = 0;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <MRT_getFlags+0x1c4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <MRT_getFlags+0x1c4>)
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <MRT_getFlags+0x1a8>)
 80037d4:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 80037d6:	2002      	movs	r0, #2
 80037d8:	f000 fbb6 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80037dc:	2303      	movs	r3, #3
 80037de:	2200      	movs	r2, #0
 80037e0:	2102      	movs	r1, #2
 80037e2:	480e      	ldr	r0, [pc, #56]	; (800381c <MRT_getFlags+0x1a8>)
 80037e4:	f000 fcfa 	bl	80041dc <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <MRT_getFlags+0x1c8>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b3b      	cmp	r3, #59	; 0x3b
 80037ee:	d90f      	bls.n	8003810 <MRT_getFlags+0x19c>
		prev_sec = 0;
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <MRT_getFlags+0x1c8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <MRT_getFlags+0x1c8>)
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <MRT_getFlags+0x1a8>)
 80037fc:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 80037fe:	2002      	movs	r0, #2
 8003800:	f000 fba2 	bl	8003f48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003804:	2303      	movs	r3, #3
 8003806:	2200      	movs	r2, #0
 8003808:	2102      	movs	r1, #2
 800380a:	4804      	ldr	r0, [pc, #16]	; (800381c <MRT_getFlags+0x1a8>)
 800380c:	f000 fce6 	bl	80041dc <W25qxx_WriteSector>
	}
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20006058 	.word	0x20006058
 800381c:	200067b8 	.word	0x200067b8
 8003820:	200006a9 	.word	0x200006a9
 8003824:	20000004 	.word	0x20000004
 8003828:	20000010 	.word	0x20000010
 800382c:	20000432 	.word	0x20000432
 8003830:	20000433 	.word	0x20000433
 8003834:	20000434 	.word	0x20000434
 8003838:	20000435 	.word	0x20000435
 800383c:	20000436 	.word	0x20000436

08003840 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	b0a7      	sub	sp, #156	; 0x9c
 8003844:	af04      	add	r7, sp, #16
 8003846:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003848:	4b54      	ldr	r3, [pc, #336]	; (800399c <MRT_resetInfo+0x15c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461d      	mov	r5, r3
 800384e:	4b54      	ldr	r3, [pc, #336]	; (80039a0 <MRT_resetInfo+0x160>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461e      	mov	r6, r3
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <MRT_resetInfo+0x164>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <MRT_resetInfo+0x168>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <MRT_resetInfo+0x16c>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461c      	mov	r4, r3
 8003866:	4b52      	ldr	r3, [pc, #328]	; (80039b0 <MRT_resetInfo+0x170>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	f107 0020 	add.w	r0, r7, #32
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	9402      	str	r4, [sp, #8]
 8003872:	9101      	str	r1, [sp, #4]
 8003874:	9200      	str	r2, [sp, #0]
 8003876:	4633      	mov	r3, r6
 8003878:	462a      	mov	r2, r5
 800387a:	494e      	ldr	r1, [pc, #312]	; (80039b4 <MRT_resetInfo+0x174>)
 800387c:	f017 fe5c 	bl	801b538 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003880:	f107 0320 	add.w	r3, r7, #32
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fcb3 	bl	80001f0 <strlen>
 800388a:	4603      	mov	r3, r0
 800388c:	b29a      	uxth	r2, r3
 800388e:	f107 0120 	add.w	r1, r7, #32
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f00a fc2b 	bl	800e0f2 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 800389c:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <MRT_resetInfo+0x164>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d11d      	bne.n	80038e0 <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	2213      	movs	r2, #19
 80038aa:	4943      	ldr	r1, [pc, #268]	; (80039b8 <MRT_resetInfo+0x178>)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f00a fc20 	bl	800e0f2 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 80038b2:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <MRT_resetInfo+0x164>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80038b8:	4b3a      	ldr	r3, [pc, #232]	; (80039a4 <MRT_resetInfo+0x164>)
 80038ba:	781a      	ldrb	r2, [r3, #0]
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <MRT_resetInfo+0x17c>)
 80038be:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f000 fb41 	bl	8003f48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038c6:	2303      	movs	r3, #3
 80038c8:	2200      	movs	r2, #0
 80038ca:	2101      	movs	r1, #1
 80038cc:	483b      	ldr	r0, [pc, #236]	; (80039bc <MRT_resetInfo+0x17c>)
 80038ce:	f000 fc85 	bl	80041dc <W25qxx_WriteSector>

		  HAL_Delay(1000);
 80038d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d6:	f004 fbd3 	bl	8008080 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80038da:	2005      	movs	r0, #5
 80038dc:	f003 ffee 	bl	80078bc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 80038e0:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <MRT_resetInfo+0x160>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03a      	beq.n	800395e <MRT_resetInfo+0x11e>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <MRT_resetInfo+0x160>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	4933      	ldr	r1, [pc, #204]	; (80039c0 <MRT_resetInfo+0x180>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f017 fe1f 	bl	801b538 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fc76 	bl	80001f0 <strlen>
 8003904:	4603      	mov	r3, r0
 8003906:	b29a      	uxth	r2, r3
 8003908:	f107 010c 	add.w	r1, r7, #12
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f00a fbee 	bl	800e0f2 <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	2214      	movs	r2, #20
 800391c:	4929      	ldr	r1, [pc, #164]	; (80039c4 <MRT_resetInfo+0x184>)
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f00a fbe7 	bl	800e0f2 <HAL_UART_Transmit>


		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003924:	2002      	movs	r0, #2
 8003926:	f000 fb0f 	bl	8003f48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 800392a:	2303      	movs	r3, #3
 800392c:	2200      	movs	r2, #0
 800392e:	2102      	movs	r1, #2
 8003930:	4825      	ldr	r0, [pc, #148]	; (80039c8 <MRT_resetInfo+0x188>)
 8003932:	f000 fc53 	bl	80041dc <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800393c:	e00b      	b.n	8003956 <MRT_resetInfo+0x116>
			  *flash_time[i] = 0x0;
 800393e:	4a23      	ldr	r2, [pc, #140]	; (80039cc <MRT_resetInfo+0x18c>)
 8003940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 800394c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003950:	3301      	adds	r3, #1
 8003952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395a:	2b02      	cmp	r3, #2
 800395c:	ddef      	ble.n	800393e <MRT_resetInfo+0xfe>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MRT_resetInfo+0x15c>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <MRT_resetInfo+0x154>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	220e      	movs	r2, #14
 800396c:	4918      	ldr	r1, [pc, #96]	; (80039d0 <MRT_resetInfo+0x190>)
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00a fbbf 	bl	800e0f2 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <MRT_resetInfo+0x15c>)
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <MRT_resetInfo+0x15c>)
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MRT_resetInfo+0x17c>)
 8003980:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003982:	2001      	movs	r0, #1
 8003984:	f000 fae0 	bl	8003f48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003988:	2303      	movs	r3, #3
 800398a:	2200      	movs	r2, #0
 800398c:	2101      	movs	r1, #1
 800398e:	480b      	ldr	r0, [pc, #44]	; (80039bc <MRT_resetInfo+0x17c>)
 8003990:	f000 fc24 	bl	80041dc <W25qxx_WriteSector>
	  }
}
 8003994:	bf00      	nop
 8003996:	378c      	adds	r7, #140	; 0x8c
 8003998:	46bd      	mov	sp, r7
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399c:	20000432 	.word	0x20000432
 80039a0:	200006a9 	.word	0x200006a9
 80039a4:	20000433 	.word	0x20000433
 80039a8:	20000434 	.word	0x20000434
 80039ac:	20000435 	.word	0x20000435
 80039b0:	20000436 	.word	0x20000436
 80039b4:	0801f7a4 	.word	0x0801f7a4
 80039b8:	0801f7e4 	.word	0x0801f7e4
 80039bc:	20006058 	.word	0x20006058
 80039c0:	0801f7f8 	.word	0x0801f7f8
 80039c4:	0801f808 	.word	0x0801f808
 80039c8:	20000438 	.word	0x20000438
 80039cc:	20000010 	.word	0x20000010
 80039d0:	0801f820 	.word	0x0801f820

080039d4 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 80039d8:	f7ff fe14 	bl	8003604 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 80039dc:	2002      	movs	r0, #2
 80039de:	f000 fab3 	bl	8003f48 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80039e2:	2303      	movs	r3, #3
 80039e4:	2200      	movs	r2, #0
 80039e6:	2102      	movs	r1, #2
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <MRT_saveRTCTime+0x20>)
 80039ea:	f000 fbf7 	bl	80041dc <W25qxx_WriteSector>
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200067b8 	.word	0x200067b8

080039f8 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003a02:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a06:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003a88 <MRT_getAltitude+0x90>
 8003a0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a0e:	ee16 0a90 	vmov	r0, s13
 8003a12:	f7fc fda9 	bl	8000568 <__aeabi_f2d>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003a78 <MRT_getAltitude+0x80>
 8003a1e:	ec43 2b10 	vmov	d0, r2, r3
 8003a22:	f015 fbfb 	bl	801921c <pow>
 8003a26:	ec51 0b10 	vmov	r0, r1, d0
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <MRT_getAltitude+0x94>)
 8003a30:	f7fc fc3a 	bl	80002a8 <__aeabi_dsub>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	a310      	add	r3, pc, #64	; (adr r3, 8003a80 <MRT_getAltitude+0x88>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fde9 	bl	8000618 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <MRT_getAltitude+0x98>)
 8003a54:	f7fc fc2a 	bl	80002ac <__adddf3>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fd f8d2 	bl	8000c08 <__aeabi_d2f>
 8003a64:	4603      	mov	r3, r0
 8003a66:	ee07 3a90 	vmov	s15, r3
}
 8003a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	f3af 8000 	nop.w
 8003a78:	b537afba 	.word	0xb537afba
 8003a7c:	3fc85a8b 	.word	0x3fc85a8b
 8003a80:	76276276 	.word	0x76276276
 8003a84:	c0e481c2 	.word	0xc0e481c2
 8003a88:	447d8000 	.word	0x447d8000
 8003a8c:	3ff00000 	.word	0x3ff00000
 8003a90:	40590000 	.word	0x40590000

08003a94 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003a9e:	f107 020f 	add.w	r2, r7, #15
 8003aa2:	1df9      	adds	r1, r7, #7
 8003aa4:	2364      	movs	r3, #100	; 0x64
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4804      	ldr	r0, [pc, #16]	; (8003abc <W25qxx_Spi+0x28>)
 8003aac:	f009 fa16 	bl	800cedc <HAL_SPI_TransmitReceive>
	return ret;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20005fbc 	.word	0x20005fbc

08003ac0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	4813      	ldr	r0, [pc, #76]	; (8003b28 <W25qxx_ReadID+0x68>)
 8003adc:	f005 f83e 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003ae0:	209f      	movs	r0, #159	; 0x9f
 8003ae2:	f7ff ffd7 	bl	8003a94 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ae6:	20a5      	movs	r0, #165	; 0xa5
 8003ae8:	f7ff ffd4 	bl	8003a94 <W25qxx_Spi>
 8003aec:	4603      	mov	r3, r0
 8003aee:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003af0:	20a5      	movs	r0, #165	; 0xa5
 8003af2:	f7ff ffcf 	bl	8003a94 <W25qxx_Spi>
 8003af6:	4603      	mov	r3, r0
 8003af8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003afa:	20a5      	movs	r0, #165	; 0xa5
 8003afc:	f7ff ffca 	bl	8003a94 <W25qxx_Spi>
 8003b00:	4603      	mov	r3, r0
 8003b02:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b04:	2201      	movs	r2, #1
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	4807      	ldr	r0, [pc, #28]	; (8003b28 <W25qxx_ReadID+0x68>)
 8003b0a:	f005 f827 	bl	8008b5c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	4313      	orrs	r3, r2
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40020c00 	.word	0x40020c00

08003b2c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	4816      	ldr	r0, [pc, #88]	; (8003b90 <W25qxx_ReadUniqID+0x64>)
 8003b38:	f005 f810 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003b3c:	204b      	movs	r0, #75	; 0x4b
 8003b3e:	f7ff ffa9 	bl	8003a94 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	e005      	b.n	8003b54 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b48:	20a5      	movs	r0, #165	; 0xa5
 8003b4a:	f7ff ffa3 	bl	8003a94 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	3301      	adds	r3, #1
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d9f6      	bls.n	8003b48 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	71bb      	strb	r3, [r7, #6]
 8003b5e:	e00b      	b.n	8003b78 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b60:	79bc      	ldrb	r4, [r7, #6]
 8003b62:	20a5      	movs	r0, #165	; 0xa5
 8003b64:	f7ff ff96 	bl	8003a94 <W25qxx_Spi>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <W25qxx_ReadUniqID+0x68>)
 8003b6e:	4423      	add	r3, r4
 8003b70:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003b72:	79bb      	ldrb	r3, [r7, #6]
 8003b74:	3301      	adds	r3, #1
 8003b76:	71bb      	strb	r3, [r7, #6]
 8003b78:	79bb      	ldrb	r3, [r7, #6]
 8003b7a:	2b07      	cmp	r3, #7
 8003b7c:	d9f0      	bls.n	8003b60 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	4803      	ldr	r0, [pc, #12]	; (8003b90 <W25qxx_ReadUniqID+0x64>)
 8003b84:	f004 ffea 	bl	8008b5c <HAL_GPIO_WritePin>
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	20006db8 	.word	0x20006db8

08003b98 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <W25qxx_WriteEnable+0x28>)
 8003ba2:	f004 ffdb 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003ba6:	2006      	movs	r0, #6
 8003ba8:	f7ff ff74 	bl	8003a94 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bac:	2201      	movs	r2, #1
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <W25qxx_WriteEnable+0x28>)
 8003bb2:	f004 ffd3 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f011 fb7b 	bl	80152b2 <osDelay>
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020c00 	.word	0x40020c00

08003bc4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	481c      	ldr	r0, [pc, #112]	; (8003c48 <W25qxx_ReadStatusRegister+0x84>)
 8003bd8:	f004 ffc0 	bl	8008b5c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10c      	bne.n	8003bfc <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003be2:	2005      	movs	r0, #5
 8003be4:	f7ff ff56 	bl	8003a94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003be8:	20a5      	movs	r0, #165	; 0xa5
 8003bea:	f7ff ff53 	bl	8003a94 <W25qxx_Spi>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <W25qxx_ReadStatusRegister+0x88>)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003bfa:	e01b      	b.n	8003c34 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d10c      	bne.n	8003c1c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003c02:	2035      	movs	r0, #53	; 0x35
 8003c04:	f7ff ff46 	bl	8003a94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c08:	20a5      	movs	r0, #165	; 0xa5
 8003c0a:	f7ff ff43 	bl	8003a94 <W25qxx_Spi>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <W25qxx_ReadStatusRegister+0x88>)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003c1a:	e00b      	b.n	8003c34 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003c1c:	2015      	movs	r0, #21
 8003c1e:	f7ff ff39 	bl	8003a94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c22:	20a5      	movs	r0, #165	; 0xa5
 8003c24:	f7ff ff36 	bl	8003a94 <W25qxx_Spi>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <W25qxx_ReadStatusRegister+0x88>)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c34:	2201      	movs	r2, #1
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	4803      	ldr	r0, [pc, #12]	; (8003c48 <W25qxx_ReadStatusRegister+0x84>)
 8003c3a:	f004 ff8f 	bl	8008b5c <HAL_GPIO_WritePin>
	return status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	20006db8 	.word	0x20006db8

08003c50 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f011 fb2c 	bl	80152b2 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2140      	movs	r1, #64	; 0x40
 8003c5e:	480f      	ldr	r0, [pc, #60]	; (8003c9c <W25qxx_WaitForWriteEnd+0x4c>)
 8003c60:	f004 ff7c 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003c64:	2005      	movs	r0, #5
 8003c66:	f7ff ff15 	bl	8003a94 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c6a:	20a5      	movs	r0, #165	; 0xa5
 8003c6c:	f7ff ff12 	bl	8003a94 <W25qxx_Spi>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <W25qxx_WaitForWriteEnd+0x50>)
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f011 fb19 	bl	80152b2 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <W25qxx_WaitForWriteEnd+0x50>)
 8003c82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ed      	bne.n	8003c6a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	4802      	ldr	r0, [pc, #8]	; (8003c9c <W25qxx_WaitForWriteEnd+0x4c>)
 8003c94:	f004 ff62 	bl	8008b5c <HAL_GPIO_WritePin>
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40020c00 	.word	0x40020c00
 8003ca0:	20006db8 	.word	0x20006db8

08003ca4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003caa:	4b90      	ldr	r3, [pc, #576]	; (8003eec <W25qxx_Init+0x248>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003cb2:	e002      	b.n	8003cba <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f011 fafc 	bl	80152b2 <osDelay>
	while (HAL_GetTick() < 100)
 8003cba:	f004 f9d5 	bl	8008068 <HAL_GetTick>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b63      	cmp	r3, #99	; 0x63
 8003cc2:	d9f7      	bls.n	8003cb4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	4889      	ldr	r0, [pc, #548]	; (8003ef0 <W25qxx_Init+0x24c>)
 8003cca:	f004 ff47 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003cce:	2064      	movs	r0, #100	; 0x64
 8003cd0:	f011 faef 	bl	80152b2 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003cd4:	4887      	ldr	r0, [pc, #540]	; (8003ef4 <W25qxx_Init+0x250>)
 8003cd6:	f017 fb63 	bl	801b3a0 <puts>
#endif
	id = W25qxx_ReadID();
 8003cda:	f7ff fef1 	bl	8003ac0 <W25qxx_ReadID>
 8003cde:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4885      	ldr	r0, [pc, #532]	; (8003ef8 <W25qxx_Init+0x254>)
 8003ce4:	f017 fad6 	bl	801b294 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3b11      	subs	r3, #17
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	f200 808b 	bhi.w	8003e0a <W25qxx_Init+0x166>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <W25qxx_Init+0x58>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003df7 	.word	0x08003df7
 8003d00:	08003de3 	.word	0x08003de3
 8003d04:	08003dcf 	.word	0x08003dcf
 8003d08:	08003dbb 	.word	0x08003dbb
 8003d0c:	08003da7 	.word	0x08003da7
 8003d10:	08003d93 	.word	0x08003d93
 8003d14:	08003d7f 	.word	0x08003d7f
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d53 	.word	0x08003d53
 8003d20:	08003e0b 	.word	0x08003e0b
 8003d24:	08003e0b 	.word	0x08003e0b
 8003d28:	08003e0b 	.word	0x08003e0b
 8003d2c:	08003e0b 	.word	0x08003e0b
 8003d30:	08003e0b 	.word	0x08003e0b
 8003d34:	08003e0b 	.word	0x08003e0b
 8003d38:	08003d3d 	.word	0x08003d3d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003d3c:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <W25qxx_Init+0x248>)
 8003d3e:	220a      	movs	r2, #10
 8003d40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003d42:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <W25qxx_Init+0x248>)
 8003d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003d4a:	486c      	ldr	r0, [pc, #432]	; (8003efc <W25qxx_Init+0x258>)
 8003d4c:	f017 fb28 	bl	801b3a0 <puts>
#endif
		break;
 8003d50:	e064      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003d52:	4b66      	ldr	r3, [pc, #408]	; (8003eec <W25qxx_Init+0x248>)
 8003d54:	2209      	movs	r2, #9
 8003d56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003d58:	4b64      	ldr	r3, [pc, #400]	; (8003eec <W25qxx_Init+0x248>)
 8003d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003d60:	4867      	ldr	r0, [pc, #412]	; (8003f00 <W25qxx_Init+0x25c>)
 8003d62:	f017 fb1d 	bl	801b3a0 <puts>
#endif
		break;
 8003d66:	e059      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003d68:	4b60      	ldr	r3, [pc, #384]	; (8003eec <W25qxx_Init+0x248>)
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <W25qxx_Init+0x248>)
 8003d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003d76:	4863      	ldr	r0, [pc, #396]	; (8003f04 <W25qxx_Init+0x260>)
 8003d78:	f017 fb12 	bl	801b3a0 <puts>
#endif
		break;
 8003d7c:	e04e      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003d7e:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <W25qxx_Init+0x248>)
 8003d80:	2207      	movs	r2, #7
 8003d82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <W25qxx_Init+0x248>)
 8003d86:	2280      	movs	r2, #128	; 0x80
 8003d88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003d8a:	485f      	ldr	r0, [pc, #380]	; (8003f08 <W25qxx_Init+0x264>)
 8003d8c:	f017 fb08 	bl	801b3a0 <puts>
#endif
		break;
 8003d90:	e044      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <W25qxx_Init+0x248>)
 8003d94:	2206      	movs	r2, #6
 8003d96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003d98:	4b54      	ldr	r3, [pc, #336]	; (8003eec <W25qxx_Init+0x248>)
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003d9e:	485b      	ldr	r0, [pc, #364]	; (8003f0c <W25qxx_Init+0x268>)
 8003da0:	f017 fafe 	bl	801b3a0 <puts>
#endif
		break;
 8003da4:	e03a      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <W25qxx_Init+0x248>)
 8003da8:	2205      	movs	r2, #5
 8003daa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <W25qxx_Init+0x248>)
 8003dae:	2220      	movs	r2, #32
 8003db0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003db2:	4857      	ldr	r0, [pc, #348]	; (8003f10 <W25qxx_Init+0x26c>)
 8003db4:	f017 faf4 	bl	801b3a0 <puts>
#endif
		break;
 8003db8:	e030      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003dba:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <W25qxx_Init+0x248>)
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003dc0:	4b4a      	ldr	r3, [pc, #296]	; (8003eec <W25qxx_Init+0x248>)
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003dc6:	4853      	ldr	r0, [pc, #332]	; (8003f14 <W25qxx_Init+0x270>)
 8003dc8:	f017 faea 	bl	801b3a0 <puts>
#endif
		break;
 8003dcc:	e026      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <W25qxx_Init+0x248>)
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <W25qxx_Init+0x248>)
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003dda:	484f      	ldr	r0, [pc, #316]	; (8003f18 <W25qxx_Init+0x274>)
 8003ddc:	f017 fae0 	bl	801b3a0 <puts>
#endif
		break;
 8003de0:	e01c      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003de2:	4b42      	ldr	r3, [pc, #264]	; (8003eec <W25qxx_Init+0x248>)
 8003de4:	2202      	movs	r2, #2
 8003de6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <W25qxx_Init+0x248>)
 8003dea:	2204      	movs	r2, #4
 8003dec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003dee:	484b      	ldr	r0, [pc, #300]	; (8003f1c <W25qxx_Init+0x278>)
 8003df0:	f017 fad6 	bl	801b3a0 <puts>
#endif
		break;
 8003df4:	e012      	b.n	8003e1c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003df6:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <W25qxx_Init+0x248>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <W25qxx_Init+0x248>)
 8003dfe:	2202      	movs	r2, #2
 8003e00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003e02:	4847      	ldr	r0, [pc, #284]	; (8003f20 <W25qxx_Init+0x27c>)
 8003e04:	f017 facc 	bl	801b3a0 <puts>
#endif
		break;
 8003e08:	e008      	b.n	8003e1c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003e0a:	4846      	ldr	r0, [pc, #280]	; (8003f24 <W25qxx_Init+0x280>)
 8003e0c:	f017 fac8 	bl	801b3a0 <puts>
#endif
		w25qxx.Lock = 0;
 8003e10:	4b36      	ldr	r3, [pc, #216]	; (8003eec <W25qxx_Init+0x248>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e063      	b.n	8003ee4 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <W25qxx_Init+0x248>)
 8003e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e22:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003e24:	4b31      	ldr	r3, [pc, #196]	; (8003eec <W25qxx_Init+0x248>)
 8003e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e2a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <W25qxx_Init+0x248>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <W25qxx_Init+0x248>)
 8003e34:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003e36:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <W25qxx_Init+0x248>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <W25qxx_Init+0x248>)
 8003e3c:	6912      	ldr	r2, [r2, #16]
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <W25qxx_Init+0x248>)
 8003e44:	8952      	ldrh	r2, [r2, #10]
 8003e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e4a:	4a28      	ldr	r2, [pc, #160]	; (8003eec <W25qxx_Init+0x248>)
 8003e4c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003e4e:	4b27      	ldr	r3, [pc, #156]	; (8003eec <W25qxx_Init+0x248>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	4a25      	ldr	r2, [pc, #148]	; (8003eec <W25qxx_Init+0x248>)
 8003e56:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <W25qxx_Init+0x248>)
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	; (8003eec <W25qxx_Init+0x248>)
 8003e5e:	6912      	ldr	r2, [r2, #16]
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	0a9b      	lsrs	r3, r3, #10
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <W25qxx_Init+0x248>)
 8003e68:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003e6a:	f7ff fe5f 	bl	8003b2c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff fea8 	bl	8003bc4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003e74:	2002      	movs	r0, #2
 8003e76:	f7ff fea5 	bl	8003bc4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	f7ff fea2 	bl	8003bc4 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <W25qxx_Init+0x248>)
 8003e82:	895b      	ldrh	r3, [r3, #10]
 8003e84:	4619      	mov	r1, r3
 8003e86:	4828      	ldr	r0, [pc, #160]	; (8003f28 <W25qxx_Init+0x284>)
 8003e88:	f017 fa04 	bl	801b294 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <W25qxx_Init+0x248>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4619      	mov	r1, r3
 8003e92:	4826      	ldr	r0, [pc, #152]	; (8003f2c <W25qxx_Init+0x288>)
 8003e94:	f017 f9fe 	bl	801b294 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <W25qxx_Init+0x248>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4824      	ldr	r0, [pc, #144]	; (8003f30 <W25qxx_Init+0x28c>)
 8003ea0:	f017 f9f8 	bl	801b294 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <W25qxx_Init+0x248>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4822      	ldr	r0, [pc, #136]	; (8003f34 <W25qxx_Init+0x290>)
 8003eac:	f017 f9f2 	bl	801b294 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <W25qxx_Init+0x248>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4820      	ldr	r0, [pc, #128]	; (8003f38 <W25qxx_Init+0x294>)
 8003eb8:	f017 f9ec 	bl	801b294 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <W25qxx_Init+0x248>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	481e      	ldr	r0, [pc, #120]	; (8003f3c <W25qxx_Init+0x298>)
 8003ec4:	f017 f9e6 	bl	801b294 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <W25qxx_Init+0x248>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	481c      	ldr	r0, [pc, #112]	; (8003f40 <W25qxx_Init+0x29c>)
 8003ed0:	f017 f9e0 	bl	801b294 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003ed4:	481b      	ldr	r0, [pc, #108]	; (8003f44 <W25qxx_Init+0x2a0>)
 8003ed6:	f017 fa63 	bl	801b3a0 <puts>
#endif
	w25qxx.Lock = 0;
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <W25qxx_Init+0x248>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20006db8 	.word	0x20006db8
 8003ef0:	40020c00 	.word	0x40020c00
 8003ef4:	0801f830 	.word	0x0801f830
 8003ef8:	0801f848 	.word	0x0801f848
 8003efc:	0801f85c 	.word	0x0801f85c
 8003f00:	0801f874 	.word	0x0801f874
 8003f04:	0801f88c 	.word	0x0801f88c
 8003f08:	0801f8a4 	.word	0x0801f8a4
 8003f0c:	0801f8bc 	.word	0x0801f8bc
 8003f10:	0801f8d4 	.word	0x0801f8d4
 8003f14:	0801f8ec 	.word	0x0801f8ec
 8003f18:	0801f904 	.word	0x0801f904
 8003f1c:	0801f91c 	.word	0x0801f91c
 8003f20:	0801f934 	.word	0x0801f934
 8003f24:	0801f94c 	.word	0x0801f94c
 8003f28:	0801f960 	.word	0x0801f960
 8003f2c:	0801f980 	.word	0x0801f980
 8003f30:	0801f998 	.word	0x0801f998
 8003f34:	0801f9b8 	.word	0x0801f9b8
 8003f38:	0801f9d4 	.word	0x0801f9d4
 8003f3c:	0801f9f4 	.word	0x0801f9f4
 8003f40:	0801fa10 	.word	0x0801fa10
 8003f44:	0801fa30 	.word	0x0801fa30

08003f48 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003f50:	e002      	b.n	8003f58 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003f52:	2001      	movs	r0, #1
 8003f54:	f011 f9ad 	bl	80152b2 <osDelay>
	while (w25qxx.Lock == 1)
 8003f58:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <W25qxx_EraseSector+0xc8>)
 8003f5a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d0f7      	beq.n	8003f52 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <W25qxx_EraseSector+0xc8>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003f6a:	f004 f87d 	bl	8008068 <HAL_GetTick>
 8003f6e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4828      	ldr	r0, [pc, #160]	; (8004014 <W25qxx_EraseSector+0xcc>)
 8003f74:	f017 f98e 	bl	801b294 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003f78:	f7ff fe6a 	bl	8003c50 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <W25qxx_EraseSector+0xc8>)
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003f88:	f7ff fe06 	bl	8003b98 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2140      	movs	r1, #64	; 0x40
 8003f90:	4821      	ldr	r0, [pc, #132]	; (8004018 <W25qxx_EraseSector+0xd0>)
 8003f92:	f004 fde3 	bl	8008b5c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <W25qxx_EraseSector+0xc8>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d909      	bls.n	8003fb2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003f9e:	2021      	movs	r0, #33	; 0x21
 8003fa0:	f7ff fd78 	bl	8003a94 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0e1b      	lsrs	r3, r3, #24
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fd72 	bl	8003a94 <W25qxx_Spi>
 8003fb0:	e002      	b.n	8003fb8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003fb2:	2020      	movs	r0, #32
 8003fb4:	f7ff fd6e 	bl	8003a94 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fd68 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fd62 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fd5d 	bl	8003a94 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	480e      	ldr	r0, [pc, #56]	; (8004018 <W25qxx_EraseSector+0xd0>)
 8003fe0:	f004 fdbc 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003fe4:	f7ff fe34 	bl	8003c50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003fe8:	f004 f83e 	bl	8008068 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4809      	ldr	r0, [pc, #36]	; (800401c <W25qxx_EraseSector+0xd4>)
 8003ff6:	f017 f94d 	bl	801b294 <iprintf>
#endif
	W25qxx_Delay(1);
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f011 f959 	bl	80152b2 <osDelay>
	w25qxx.Lock = 0;
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <W25qxx_EraseSector+0xc8>)
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20006db8 	.word	0x20006db8
 8004014:	0801fa88 	.word	0x0801fa88
 8004018:	40020c00 	.word	0x40020c00
 800401c:	0801faac 	.word	0x0801faac

08004020 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <W25qxx_SectorToPage+0x28>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <W25qxx_SectorToPage+0x28>)
 8004034:	8952      	ldrh	r2, [r2, #10]
 8004036:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20006db8 	.word	0x20006db8

0800404c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800405a:	e002      	b.n	8004062 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800405c:	2001      	movs	r0, #1
 800405e:	f011 f928 	bl	80152b2 <osDelay>
	while (w25qxx.Lock == 1)
 8004062:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <W25qxx_WritePage+0x174>)
 8004064:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004068:	2b01      	cmp	r3, #1
 800406a:	d0f7      	beq.n	800405c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800406c:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <W25qxx_WritePage+0x174>)
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <W25qxx_WritePage+0x174>)
 800407c:	8952      	ldrh	r2, [r2, #10]
 800407e:	4293      	cmp	r3, r2
 8004080:	d802      	bhi.n	8004088 <W25qxx_WritePage+0x3c>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004088:	4b4d      	ldr	r3, [pc, #308]	; (80041c0 <W25qxx_WritePage+0x174>)
 800408a:	895b      	ldrh	r3, [r3, #10]
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	4413      	add	r3, r2
 800409a:	4a49      	ldr	r2, [pc, #292]	; (80041c0 <W25qxx_WritePage+0x174>)
 800409c:	8952      	ldrh	r2, [r2, #10]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d905      	bls.n	80040ae <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <W25qxx_WritePage+0x174>)
 80040a4:	895b      	ldrh	r3, [r3, #10]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4843      	ldr	r0, [pc, #268]	; (80041c4 <W25qxx_WritePage+0x178>)
 80040b6:	f017 f8ed 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 80040ba:	2064      	movs	r0, #100	; 0x64
 80040bc:	f011 f8f9 	bl	80152b2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80040c0:	f003 ffd2 	bl	8008068 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80040c6:	f7ff fdc3 	bl	8003c50 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80040ca:	f7ff fd65 	bl	8003b98 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	483d      	ldr	r0, [pc, #244]	; (80041c8 <W25qxx_WritePage+0x17c>)
 80040d4:	f004 fd42 	bl	8008b5c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <W25qxx_WritePage+0x174>)
 80040da:	895b      	ldrh	r3, [r3, #10]
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	fb03 f302 	mul.w	r3, r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <W25qxx_WritePage+0x174>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d909      	bls.n	8004106 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80040f2:	2012      	movs	r0, #18
 80040f4:	f7ff fcce 	bl	8003a94 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	0e1b      	lsrs	r3, r3, #24
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fcc8 	bl	8003a94 <W25qxx_Spi>
 8004104:	e002      	b.n	800410c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004106:	2002      	movs	r0, #2
 8004108:	f7ff fcc4 	bl	8003a94 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fcbe 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fcb8 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fcb3 	bl	8003a94 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	b29a      	uxth	r2, r3
 8004132:	2364      	movs	r3, #100	; 0x64
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4825      	ldr	r0, [pc, #148]	; (80041cc <W25qxx_WritePage+0x180>)
 8004138:	f008 fc83 	bl	800ca42 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800413c:	2201      	movs	r2, #1
 800413e:	2140      	movs	r1, #64	; 0x40
 8004140:	4821      	ldr	r0, [pc, #132]	; (80041c8 <W25qxx_WritePage+0x17c>)
 8004142:	f004 fd0b 	bl	8008b5c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004146:	f7ff fd83 	bl	8003c50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800414a:	f003 ff8d 	bl	8008068 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e018      	b.n	800418e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <W25qxx_WritePage+0x12c>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d905      	bls.n	8004178 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800416c:	4818      	ldr	r0, [pc, #96]	; (80041d0 <W25qxx_WritePage+0x184>)
 800416e:	f017 f917 	bl	801b3a0 <puts>
			W25qxx_Delay(10);
 8004172:	200a      	movs	r0, #10
 8004174:	f011 f89d 	bl	80152b2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	4814      	ldr	r0, [pc, #80]	; (80041d4 <W25qxx_WritePage+0x188>)
 8004184:	f017 f886 	bl	801b294 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3301      	adds	r3, #1
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3e2      	bcc.n	800415c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004196:	480e      	ldr	r0, [pc, #56]	; (80041d0 <W25qxx_WritePage+0x184>)
 8004198:	f017 f902 	bl	801b3a0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	480e      	ldr	r0, [pc, #56]	; (80041d8 <W25qxx_WritePage+0x18c>)
 80041a0:	f017 f878 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 80041a4:	2064      	movs	r0, #100	; 0x64
 80041a6:	f011 f884 	bl	80152b2 <osDelay>
#endif
	W25qxx_Delay(1);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f011 f881 	bl	80152b2 <osDelay>
	w25qxx.Lock = 0;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <W25qxx_WritePage+0x174>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20006db8 	.word	0x20006db8
 80041c4:	0801fd10 	.word	0x0801fd10
 80041c8:	40020c00 	.word	0x40020c00
 80041cc:	20005fbc 	.word	0x20005fbc
 80041d0:	0801fd4c 	.word	0x0801fd4c
 80041d4:	0801fd50 	.word	0x0801fd50
 80041d8:	0801fd58 	.word	0x0801fd58

080041dc <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d802      	bhi.n	80041fa <W25qxx_WriteSector+0x1e>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80041fa:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4830      	ldr	r0, [pc, #192]	; (80042c8 <W25qxx_WriteSector+0xec>)
 8004208:	f017 f844 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 800420c:	2064      	movs	r0, #100	; 0x64
 800420e:	f011 f850 	bl	80152b2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d306      	bcc.n	800422a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800421c:	482b      	ldr	r0, [pc, #172]	; (80042cc <W25qxx_WriteSector+0xf0>)
 800421e:	f017 f8bf 	bl	801b3a0 <puts>
		W25qxx_Delay(100);
 8004222:	2064      	movs	r0, #100	; 0x64
 8004224:	f011 f845 	bl	80152b2 <osDelay>
#endif
		return;
 8004228:	e048      	b.n	80042bc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	441a      	add	r2, r3
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	d905      	bls.n	8004244 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e001      	b.n	8004248 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004248:	68b8      	ldr	r0, [r7, #8]
 800424a:	f7ff fee9 	bl	8004020 <W25qxx_SectorToPage>
 800424e:	4602      	mov	r2, r0
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004252:	895b      	ldrh	r3, [r3, #10]
 8004254:	4619      	mov	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	fbb3 f3f1 	udiv	r3, r3, r1
 800425c:	4413      	add	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004262:	895b      	ldrh	r3, [r3, #10]
 8004264:	461a      	mov	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb3 f1f2 	udiv	r1, r3, r2
 800426c:	fb02 f201 	mul.w	r2, r2, r1
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fee6 	bl	800404c <W25qxx_WritePage>
		StartPage++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004288:	895b      	ldrh	r3, [r3, #10]
 800428a:	461a      	mov	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1a9a      	subs	r2, r3, r2
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <W25qxx_WriteSector+0xe8>)
 8004298:	895b      	ldrh	r3, [r3, #10]
 800429a:	461a      	mov	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	dce1      	bgt.n	8004274 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80042b0:	4807      	ldr	r0, [pc, #28]	; (80042d0 <W25qxx_WriteSector+0xf4>)
 80042b2:	f017 f875 	bl	801b3a0 <puts>
	W25qxx_Delay(100);
 80042b6:	2064      	movs	r0, #100	; 0x64
 80042b8:	f010 fffb 	bl	80152b2 <osDelay>
#endif
}
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20006db8 	.word	0x20006db8
 80042c8:	0801fd7c 	.word	0x0801fd7c
 80042cc:	0801fdbc 	.word	0x0801fdbc
 80042d0:	0801fddc 	.word	0x0801fddc

080042d4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80042e2:	e002      	b.n	80042ea <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80042e4:	2001      	movs	r0, #1
 80042e6:	f010 ffe4 	bl	80152b2 <osDelay>
	while (w25qxx.Lock == 1)
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <W25qxx_ReadPage+0x168>)
 80042ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d0f7      	beq.n	80042e4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <W25qxx_ReadPage+0x168>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80042fc:	4b4f      	ldr	r3, [pc, #316]	; (800443c <W25qxx_ReadPage+0x168>)
 80042fe:	895b      	ldrh	r3, [r3, #10]
 8004300:	461a      	mov	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	4293      	cmp	r3, r2
 8004306:	d802      	bhi.n	800430e <W25qxx_ReadPage+0x3a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800430e:	4b4b      	ldr	r3, [pc, #300]	; (800443c <W25qxx_ReadPage+0x168>)
 8004310:	895b      	ldrh	r3, [r3, #10]
 8004312:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	4413      	add	r3, r2
 800431a:	4a48      	ldr	r2, [pc, #288]	; (800443c <W25qxx_ReadPage+0x168>)
 800431c:	8952      	ldrh	r2, [r2, #10]
 800431e:	4293      	cmp	r3, r2
 8004320:	d905      	bls.n	800432e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004322:	4b46      	ldr	r3, [pc, #280]	; (800443c <W25qxx_ReadPage+0x168>)
 8004324:	895b      	ldrh	r3, [r3, #10]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4842      	ldr	r0, [pc, #264]	; (8004440 <W25qxx_ReadPage+0x16c>)
 8004336:	f016 ffad 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f010 ffb9 	bl	80152b2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004340:	f003 fe92 	bl	8008068 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <W25qxx_ReadPage+0x168>)
 8004348:	895b      	ldrh	r3, [r3, #10]
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	fb03 f302 	mul.w	r3, r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004358:	2200      	movs	r2, #0
 800435a:	2140      	movs	r1, #64	; 0x40
 800435c:	4839      	ldr	r0, [pc, #228]	; (8004444 <W25qxx_ReadPage+0x170>)
 800435e:	f004 fbfd 	bl	8008b5c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <W25qxx_ReadPage+0x168>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d909      	bls.n	800437e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800436a:	200c      	movs	r0, #12
 800436c:	f7ff fb92 	bl	8003a94 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	0e1b      	lsrs	r3, r3, #24
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fb8c 	bl	8003a94 <W25qxx_Spi>
 800437c:	e002      	b.n	8004384 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800437e:	200b      	movs	r0, #11
 8004380:	f7ff fb88 	bl	8003a94 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fb82 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fb7c 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fb77 	bl	8003a94 <W25qxx_Spi>
	W25qxx_Spi(0);
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7ff fb74 	bl	8003a94 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	2364      	movs	r3, #100	; 0x64
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	4824      	ldr	r0, [pc, #144]	; (8004448 <W25qxx_ReadPage+0x174>)
 80043b6:	f008 fc80 	bl	800ccba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80043ba:	2201      	movs	r2, #1
 80043bc:	2140      	movs	r1, #64	; 0x40
 80043be:	4821      	ldr	r0, [pc, #132]	; (8004444 <W25qxx_ReadPage+0x170>)
 80043c0:	f004 fbcc 	bl	8008b5c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80043c4:	f003 fe50 	bl	8008068 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e018      	b.n	8004408 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <W25qxx_ReadPage+0x11e>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d905      	bls.n	80043f2 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80043e6:	4819      	ldr	r0, [pc, #100]	; (800444c <W25qxx_ReadPage+0x178>)
 80043e8:	f016 ffda 	bl	801b3a0 <puts>
			W25qxx_Delay(10);
 80043ec:	200a      	movs	r0, #10
 80043ee:	f010 ff60 	bl	80152b2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4619      	mov	r1, r3
 80043fc:	4814      	ldr	r0, [pc, #80]	; (8004450 <W25qxx_ReadPage+0x17c>)
 80043fe:	f016 ff49 	bl	801b294 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3301      	adds	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3e2      	bcc.n	80043d6 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <W25qxx_ReadPage+0x178>)
 8004412:	f016 ffc5 	bl	801b3a0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004416:	6939      	ldr	r1, [r7, #16]
 8004418:	480e      	ldr	r0, [pc, #56]	; (8004454 <W25qxx_ReadPage+0x180>)
 800441a:	f016 ff3b 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 800441e:	2064      	movs	r0, #100	; 0x64
 8004420:	f010 ff47 	bl	80152b2 <osDelay>
#endif
	W25qxx_Delay(1);
 8004424:	2001      	movs	r0, #1
 8004426:	f010 ff44 	bl	80152b2 <osDelay>
	w25qxx.Lock = 0;
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <W25qxx_ReadPage+0x168>)
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20006db8 	.word	0x20006db8
 8004440:	0801ff28 	.word	0x0801ff28
 8004444:	40020c00 	.word	0x40020c00
 8004448:	20005fbc 	.word	0x20005fbc
 800444c:	0801fd4c 	.word	0x0801fd4c
 8004450:	0801fd50 	.word	0x0801fd50
 8004454:	0801ff64 	.word	0x0801ff64

08004458 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <W25qxx_ReadSector+0xe8>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d802      	bhi.n	8004476 <W25qxx_ReadSector+0x1e>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004476:	4b32      	ldr	r3, [pc, #200]	; (8004540 <W25qxx_ReadSector+0xe8>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4830      	ldr	r0, [pc, #192]	; (8004544 <W25qxx_ReadSector+0xec>)
 8004484:	f016 ff06 	bl	801b294 <iprintf>
	W25qxx_Delay(100);
 8004488:	2064      	movs	r0, #100	; 0x64
 800448a:	f010 ff12 	bl	80152b2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800448e:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <W25qxx_ReadSector+0xe8>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d306      	bcc.n	80044a6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004498:	482b      	ldr	r0, [pc, #172]	; (8004548 <W25qxx_ReadSector+0xf0>)
 800449a:	f016 ff81 	bl	801b3a0 <puts>
		W25qxx_Delay(100);
 800449e:	2064      	movs	r0, #100	; 0x64
 80044a0:	f010 ff07 	bl	80152b2 <osDelay>
#endif
		return;
 80044a4:	e048      	b.n	8004538 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	441a      	add	r2, r3
 80044ac:	4b24      	ldr	r3, [pc, #144]	; (8004540 <W25qxx_ReadSector+0xe8>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d905      	bls.n	80044c0 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <W25qxx_ReadSector+0xe8>)
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e001      	b.n	80044c4 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f7ff fdab 	bl	8004020 <W25qxx_SectorToPage>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <W25qxx_ReadSector+0xe8>)
 80044ce:	895b      	ldrh	r3, [r3, #10]
 80044d0:	4619      	mov	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80044d8:	4413      	add	r3, r2
 80044da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <W25qxx_ReadSector+0xe8>)
 80044de:	895b      	ldrh	r3, [r3, #10]
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80044e8:	fb02 f201 	mul.w	r2, r2, r1
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	69f9      	ldr	r1, [r7, #28]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7ff feec 	bl	80042d4 <W25qxx_ReadPage>
		StartPage++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <W25qxx_ReadSector+0xe8>)
 8004504:	895b      	ldrh	r3, [r3, #10]
 8004506:	461a      	mov	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1a9a      	subs	r2, r3, r2
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	4413      	add	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <W25qxx_ReadSector+0xe8>)
 8004514:	895b      	ldrh	r3, [r3, #10]
 8004516:	461a      	mov	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	dce1      	bgt.n	80044f0 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800452c:	4807      	ldr	r0, [pc, #28]	; (800454c <W25qxx_ReadSector+0xf4>)
 800452e:	f016 ff37 	bl	801b3a0 <puts>
	W25qxx_Delay(100);
 8004532:	2064      	movs	r0, #100	; 0x64
 8004534:	f010 febd 	bl	80152b2 <osDelay>
#endif
}
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20006db8 	.word	0x20006db8
 8004544:	0801ff88 	.word	0x0801ff88
 8004548:	0801ffc8 	.word	0x0801ffc8
 800454c:	0801ffe8 	.word	0x0801ffe8

08004550 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	4611      	mov	r1, r2
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
 800456a:	4603      	mov	r3, r0
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
 8004578:	2301      	movs	r3, #1
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80045c6:	2309      	movs	r3, #9
 80045c8:	e01b      	b.n	8004602 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9e6 	bl	80049a4 <_ZN10IridiumSBD13internalBeginEv>
 80045d8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fd1c 	bl	8005030 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 80045f8:	2100      	movs	r1, #0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fc66 	bl	8004ecc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004600:	68fb      	ldr	r3, [r7, #12]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 800461c:	2309      	movs	r3, #9
 800461e:	e028      	b.n	8004672 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <_ZN10IridiumSBD5sleepEv+0x30>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d101      	bne.n	800463a <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004636:	230b      	movs	r3, #11
 8004638:	e01b      	b.n	8004672 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fb38 	bl	8004cb8 <_ZN10IridiumSBD13internalSleepEv>
 8004648:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fce4 	bl	8005030 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004668:	2100      	movs	r1, #0
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fc2e 	bl	8004ecc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004670:	68fb      	ldr	r3, [r7, #12]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a2:	f083 0301 	eor.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f923 	bl	80048f8 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <_ZN10IridiumSBD18getFirmwareVersionEPcj>:
   memcpy(&tm, localtime(&now), sizeof tm);
   return ISBD_SUCCESS;
}

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b07      	cmp	r3, #7
 80046cc:	d801      	bhi.n	80046d2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80046ce:	2308      	movs	r3, #8
 80046d0:	e01e      	b.n	8004710 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80046d2:	2301      	movs	r3, #1
 80046d4:	2201      	movs	r2, #1
 80046d6:	4910      	ldr	r1, [pc, #64]	; (8004718 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fcb7 	bl	800504c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 faf7 	bl	8004cdc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f083 0301 	eor.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fbb4 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8004706:	2304      	movs	r3, #4
 8004708:	e002      	b.n	8004710 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 800470a:	2303      	movs	r3, #3
 800470c:	e000      	b.n	8004710 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	080200c4 	.word	0x080200c4
 800471c:	080200bc 	.word	0x080200bc
 8004720:	080200d0 	.word	0x080200d0

08004724 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 800473a:	4918      	ldr	r1, [pc, #96]	; (800479c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fd2d 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004742:	e028      	b.n	8004796 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 f80b 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800475c:	4313      	orrs	r3, r2
 800475e:	b2da      	uxtb	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004766:	e00f      	b.n	8004788 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800476e:	b25a      	sxtb	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004776:	b25b      	sxtb	r3, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	b25b      	sxtb	r3, r3
 800477c:	4013      	ands	r3, r2
 800477e:	b25b      	sxtb	r3, r3
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 f820 	bl	80057d6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	080200ec 	.word	0x080200ec

080047a0 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80047b2:	4912      	ldr	r1, [pc, #72]	; (80047fc <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fcf1 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80047ba:	2300      	movs	r3, #0
 80047bc:	e01a      	b.n	80047f4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ffce 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80047d0:	4013      	ands	r3, r2
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 80047f2:	2300      	movs	r3, #0
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	08020138 	.word	0x08020138

08004800 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004816:	4918      	ldr	r1, [pc, #96]	; (8004878 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fcbf 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800481e:	e028      	b.n	8004872 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 ff9d 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004838:	4313      	orrs	r3, r2
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004842:	e00f      	b.n	8004864 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800484a:	b25a      	sxtb	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004852:	b25b      	sxtb	r3, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	b25b      	sxtb	r3, r3
 8004858:	4013      	ands	r3, r2
 800485a:	b25b      	sxtb	r3, r3
 800485c:	b2da      	uxtb	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 ffb2 	bl	80057d6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	08020184 	.word	0x08020184

0800487c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004892:	4918      	ldr	r1, [pc, #96]	; (80048f4 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fc81 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800489a:	e028      	b.n	80048ee <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 ff5f 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80048b4:	4313      	orrs	r3, r2
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80048be:	e00f      	b.n	80048e0 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80048c6:	b25a      	sxtb	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	4013      	ands	r3, r2
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 ff74 	bl	80057d6 <_ZN10IridiumSBD11set9603pinsEh>
}
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	080201cc 	.word	0x080201cc

080048f8 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 800490a:	4913      	ldr	r1, [pc, #76]	; (8004958 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fc45 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004912:	e01d      	b.n	8004950 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 ff23 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004920:	b25a      	sxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004928:	b25b      	sxtb	r3, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	b25b      	sxtb	r3, r3
 800492e:	4013      	ands	r3, r2
 8004930:	b25b      	sxtb	r3, r3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 ff47 	bl	80057d6 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	0802029c 	.word	0x0802029c

0800495c <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 800496e:	2301      	movs	r3, #1
 8004970:	e013      	b.n	800499a <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f001 fbee 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	4618      	mov	r0, r3
 800498a:	f001 fc33 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
   }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b090      	sub	sp, #64	; 0x40
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 80049ac:	49b1      	ldr	r1, [pc, #708]	; (8004c74 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fbf4 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e150      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fec1 	bl	8005760 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fde6 	bl	80055b0 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa70 	bl	8004ecc <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 80049f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 80049f8:	f003 fb36 	bl	8008068 <HAL_GetTick>
 80049fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80049fe:	f003 fb33 	bl	8008068 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf8c      	ite	hi
 8004a0e:	2301      	movhi	r3, #1
 8004a10:	2300      	movls	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa25 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ec      	beq.n	80049fe <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8004a24:	2304      	movs	r3, #4
 8004a26:	e120      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 faee 	bl	8005014 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004a38:	f003 fb16 	bl	8008068 <HAL_GetTick>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a42:	f083 0301 	eor.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004a4c:	f003 fb0c 	bl	8008068 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1ad2      	subs	r2, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a62:	fb03 f301 	mul.w	r3, r3, r1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d201      	bcs.n	8004a6e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d018      	beq.n	8004aa6 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8004a74:	2301      	movs	r3, #1
 8004a76:	2201      	movs	r2, #1
 8004a78:	497f      	ldr	r1, [pc, #508]	; (8004c78 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fae6 	bl	800504c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8004a80:	4b7e      	ldr	r3, [pc, #504]	; (8004c7c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	2200      	movs	r2, #0
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f926 	bl	8004cdc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9e6 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0cd      	beq.n	8004a3e <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	e0e1      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8004aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8004ab4:	4972      	ldr	r1, [pc, #456]	; (8004c80 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fb70 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8004abc:	2305      	movs	r3, #5
 8004abe:	e0d4      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8004ac0:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8004ac2:	f107 0310 	add.w	r3, r7, #16
 8004ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ac8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004acc:	2300      	movs	r3, #0
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	dc26      	bgt.n	8004b24 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ade:	4413      	add	r3, r2
 8004ae0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb0a 	bl	8005100 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004aec:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	2200      	movs	r2, #0
 8004af4:	2100      	movs	r1, #0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8f0 	bl	8004cdc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f083 0301 	eor.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9ad 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e0a8      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0a6      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	3301      	adds	r3, #1
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
 8004b22:	e7d5      	b.n	8004ad0 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004b24:	4958      	ldr	r1, [pc, #352]	; (8004c88 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fb38 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004b36:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004b38:	e000      	b.n	8004b3c <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004b3a:	4b55      	ldr	r3, [pc, #340]	; (8004c90 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb2c 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004b44:	4953      	ldr	r1, [pc, #332]	; (8004c94 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fb28 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004b56:	2101      	movs	r1, #1
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fd8e 	bl	800467a <_ZN10IridiumSBD16enableRingAlertsEb>
 8004b5e:	e00a      	b.n	8004b76 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b66:	f083 0301 	eor.w	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fec1 	bl	80048f8 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004b80:	4945      	ldr	r1, [pc, #276]	; (8004c98 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004b82:	e000      	b.n	8004b86 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004b84:	4945      	ldr	r1, [pc, #276]	; (8004c9c <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004b86:	2301      	movs	r3, #1
 8004b88:	2201      	movs	r2, #1
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa5e 	bl	800504c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f89e 	bl	8004cdc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f083 0301 	eor.w	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f95b 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	e056      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e054      	b.n	8004c6a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fd77 	bl	80046bc <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004bce:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004bd6:	4932      	ldr	r1, [pc, #200]	; (8004ca0 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fadf 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004be6:	e027      	b.n	8004c38 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004be8:	492e      	ldr	r1, [pc, #184]	; (8004ca4 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fad6 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 faf6 	bl	80051e8 <_ZN10IridiumSBD9diagprintEPKc>
 8004bfc:	492a      	ldr	r1, [pc, #168]	; (8004ca8 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 facc 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004c04:	7a3b      	ldrb	r3, [r7, #8]
 8004c06:	2b54      	cmp	r3, #84	; 0x54
 8004c08:	d116      	bne.n	8004c38 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004c0a:	7a7b      	ldrb	r3, [r7, #9]
 8004c0c:	2b41      	cmp	r3, #65	; 0x41
 8004c0e:	d113      	bne.n	8004c38 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004c10:	f107 0308 	add.w	r3, r7, #8
 8004c14:	3302      	adds	r3, #2
 8004c16:	220a      	movs	r2, #10
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f017 fc72 	bl	801c504 <strtoul>
 8004c20:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bf94      	ite	ls
 8004c2c:	2301      	movls	r3, #1
 8004c2e:	2300      	movhi	r3, #0
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004c38:	491c      	ldr	r1, [pc, #112]	; (8004cac <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 faae 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004c4c:	e000      	b.n	8004c50 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 faa2 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004c58:	4915      	ldr	r1, [pc, #84]	; (8004cb0 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa9e 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8004c60:	4914      	ldr	r1, [pc, #80]	; (8004cb4 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa9a 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3738      	adds	r7, #56	; 0x38
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	080203bc 	.word	0x080203bc
 8004c78:	080203d4 	.word	0x080203d4
 8004c7c:	080200bc 	.word	0x080200bc
 8004c80:	080203d8 	.word	0x080203d8
 8004c84:	080204ac 	.word	0x080204ac
 8004c88:	080203f0 	.word	0x080203f0
 8004c8c:	08020400 	.word	0x08020400
 8004c90:	08020404 	.word	0x08020404
 8004c94:	0802040c 	.word	0x0802040c
 8004c98:	08020418 	.word	0x08020418
 8004c9c:	08020428 	.word	0x08020428
 8004ca0:	08020438 	.word	0x08020438
 8004ca4:	08020450 	.word	0x08020450
 8004ca8:	08020468 	.word	0x08020468
 8004cac:	0802046c 	.word	0x0802046c
 8004cb0:	08020480 	.word	0x08020480
 8004cb4:	08020490 	.word	0x08020490

08004cb8 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004cca:	230a      	movs	r3, #10
 8004ccc:	e000      	b.n	8004cd0 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8004cea:	495d      	ldr	r1, [pc, #372]	; (8004e60 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fa55 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8004cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fa77 	bl	80051e8 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 8004cfa:	68fc      	ldr	r4, [r7, #12]
 8004cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cfe:	f7fb fa77 	bl	80001f0 <strlen>
 8004d02:	4603      	mov	r3, r0
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f009 f9f0 	bl	800e0f2 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8004d12:	4954      	ldr	r1, [pc, #336]	; (8004e64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fa41 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	461a      	mov	r2, r3
 8004d24:	2100      	movs	r1, #0
 8004d26:	68b8      	ldr	r0, [r7, #8]
 8004d28:	f015 fb88 	bl	801a43c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8004d30:	2300      	movs	r3, #0
 8004d32:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8004d42:	f003 f991 	bl	8008068 <HAL_GetTick>
 8004d46:	61b8      	str	r0, [r7, #24]
 8004d48:	f003 f98e 	bl	8008068 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad2      	subs	r2, r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d5e:	fb03 f301 	mul.w	r3, r3, r1
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf34      	ite	cc
 8004d66:	2301      	movcc	r3, #1
 8004d68:	2300      	movcs	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d072      	beq.n	8004e56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f879 	bl	8004e68 <_ZN10IridiumSBD9cancelledEv>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e06b      	b.n	8004e58 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fbb3 	bl	80054ec <_ZN10IridiumSBD17filteredavailableEv>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfcc      	ite	gt
 8004d8c:	2301      	movgt	r3, #1
 8004d8e:	2300      	movle	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0d8      	beq.n	8004d48 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fbc4 	bl	8005524 <_ZN10IridiumSBD12filteredreadEv>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03b      	beq.n	8004e1e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d01d      	beq.n	8004dee <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8004db2:	e034      	b.n	8004e1e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	7dfa      	ldrb	r2, [r7, #23]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10b      	bne.n	8004dda <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d121      	bne.n	8004e18 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8004dd8:	e01e      	b.n	8004e18 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	7dfa      	ldrb	r2, [r7, #23]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d101      	bne.n	8004de8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8004dec:	e014      	b.n	8004e18 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b0d      	cmp	r3, #13
 8004df8:	d002      	beq.n	8004e00 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	dc02      	bgt.n	8004e06 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8004e00:	2302      	movs	r3, #2
 8004e02:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8004e04:	e00a      	b.n	8004e1c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	60ba      	str	r2, [r7, #8]
 8004e0c:	7dfa      	ldrb	r2, [r7, #23]
 8004e0e:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
               break;
 8004e16:	e001      	b.n	8004e1c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8004e1c:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e22:	4413      	add	r3, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	7dfa      	ldrb	r2, [r7, #23]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d10a      	bne.n	8004e42 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e36:	4413      	add	r3, r2
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1a0      	bne.n	8004d80 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e00a      	b.n	8004e58 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	7dfa      	ldrb	r2, [r7, #23]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d101      	bne.n	8004e50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8004e50:	2300      	movs	r3, #0
 8004e52:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8004e54:	e794      	b.n	8004d80 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	372c      	adds	r7, #44	; 0x2c
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	080205f0 	.word	0x080205f0
 8004e64:	08020468 	.word	0x08020468

08004e68 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d008      	beq.n	8004e98 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004e86:	2110      	movs	r1, #16
 8004e88:	480e      	ldr	r0, [pc, #56]	; (8004ec4 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8004e8a:	f003 fe4f 	bl	8008b2c <HAL_GPIO_ReadPin>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <_ZN10IridiumSBD9cancelledEv+0x32>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8004ea6:	4908      	ldr	r1, [pc, #32]	; (8004ec8 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f977 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8004eae:	f7ff fb61 	bl	8004574 <_Z12ISBDCallbackv>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020800 	.word	0x40020800
 8004ec8:	08020608 	.word	0x08020608

08004ecc <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	f083 0301 	eor.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d011      	beq.n	8004f14 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d04c      	beq.n	8004f96 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f84e 	bl	8004fa8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004f1a:	4921      	ldr	r1, [pc, #132]	; (8004fa0 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f93d 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f848 	bl	8004fc4 <_ZN10IridiumSBD11setSleepPinEh>
 8004f34:	e003      	b.n	8004f3e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004f36:	2101      	movs	r1, #1
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fc9f 	bl	800487c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004f3e:	f003 f893 	bl	8008068 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004f4a:	e025      	b.n	8004f98 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004f4c:	f003 f88c 	bl	8008068 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f62:	d205      	bcs.n	8004f70 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f888 	bl	8008080 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <_ZN10IridiumSBD5powerEb+0xd8>)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f912 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004f82:	2100      	movs	r1, #0
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f81d 	bl	8004fc4 <_ZN10IridiumSBD11setSleepPinEh>
 8004f8a:	e005      	b.n	8004f98 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fc74 	bl	800487c <_ZN10IridiumSBD10enable9603Eb>
 8004f94:	e000      	b.n	8004f98 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004f96:	bf00      	nop
      }
   }
}
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0802065c 	.word	0x0802065c
 8004fa4:	08020674 	.word	0x08020674

08004fa8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004fb0:	4903      	ldr	r1, [pc, #12]	; (8004fc0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8f2 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	0802068c 	.word	0x0802068c

08004fc4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2108      	movs	r1, #8
 8004fd4:	480b      	ldr	r0, [pc, #44]	; (8005004 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004fd6:	f003 fdc1 	bl	8008b5c <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004fda:	490b      	ldr	r1, [pc, #44]	; (8005008 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f8dd 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d104      	bne.n	8004ff2 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004fe8:	4908      	ldr	r1, [pc, #32]	; (800500c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8d6 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004ff0:	e003      	b.n	8004ffa <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004ff2:	4907      	ldr	r1, [pc, #28]	; (8005010 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8d1 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40020800 	.word	0x40020800
 8005008:	080206b8 	.word	0x080206b8
 800500c:	080206d4 	.word	0x080206d4
 8005010:	080206dc 	.word	0x080206dc

08005014 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8bc 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	080206e4 	.word	0x080206e4

08005030 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8ae 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08020704 	.word	0x08020704

0800504c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	460b      	mov	r3, r1
 800505c:	71fb      	strb	r3, [r7, #7]
 800505e:	4613      	mov	r3, r2
 8005060:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005068:	4922      	ldr	r1, [pc, #136]	; (80050f4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8de 	bl	800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f8da 	bl	800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005078:	79bb      	ldrb	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800507e:	491e      	ldr	r1, [pc, #120]	; (80050f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f8d3 	bl	800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800508c:	2b00      	cmp	r3, #0
 800508e:	d006      	beq.n	800509e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 ff96 	bl	8005fc8 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800509c:	e025      	b.n	80050ea <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f001 f858 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	21ff      	movs	r1, #255	; 0xff
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fa4a 	bl	8004550 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 ff80 	bl	8005fc8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 f891 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f859 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	08020720 	.word	0x08020720
 80050f8:	08020468 	.word	0x08020468
 80050fc:	080204e8 	.word	0x080204e8

08005100 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800510a:	4921      	ldr	r1, [pc, #132]	; (8005190 <_ZN10IridiumSBD4sendEPKc+0x90>)
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f88d 	bl	800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f8af 	bl	8005278 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800511a:	491e      	ldr	r1, [pc, #120]	; (8005194 <_ZN10IridiumSBD4sendEPKc+0x94>)
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f885 	bl	800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 ff56 	bl	8005fe4 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005138:	e025      	b.n	8005186 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f001 f80a 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	21ff      	movs	r1, #255	; 0xff
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f9fc 	bl	8004550 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 ff40 	bl	8005fe4 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	4618      	mov	r0, r3
 800516a:	f001 f843 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800517e:	4906      	ldr	r1, [pc, #24]	; (8005198 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f80b 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	08020720 	.word	0x08020720
 8005194:	08020468 	.word	0x08020468
 8005198:	080204e8 	.word	0x080204e8

0800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	60fa      	str	r2, [r7, #12]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff f9ec 	bl	800459c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80051c4:	e7f1      	b.n	80051aa <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80051c6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 80051c8:	687c      	ldr	r4, [r7, #4]
 80051ca:	6838      	ldr	r0, [r7, #0]
 80051cc:	f7fb f810 	bl	80001f0 <strlen>
 80051d0:	4603      	mov	r3, r0
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4620      	mov	r0, r4
 80051dc:	f008 ff89 	bl	800e0f2 <HAL_UART_Transmit>
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}

080051e8 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
   while (*str)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	603a      	str	r2, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff f9c9 	bl	800459c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800520a:	e7f2      	b.n	80051f2 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800520c:	687c      	ldr	r4, [r7, #4]
 800520e:	6838      	ldr	r0, [r7, #0]
 8005210:	f7fa ffee 	bl	80001f0 <strlen>
 8005214:	4603      	mov	r3, r0
 8005216:	b29a      	uxth	r2, r3
 8005218:	f04f 33ff 	mov.w	r3, #4294967295
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	4620      	mov	r0, r4
 8005220:	f008 ff67 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}

0800522c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	60fa      	str	r2, [r7, #12]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800524a:	7afb      	ldrb	r3, [r7, #11]
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff f998 	bl	8004584 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8005254:	e7f1      	b.n	800523a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005256:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005258:	687c      	ldr	r4, [r7, #4]
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f7fa ffc8 	bl	80001f0 <strlen>
 8005260:	4603      	mov	r3, r0
 8005262:	b29a      	uxth	r2, r3
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	4620      	mov	r0, r4
 800526c:	f008 ff41 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}

08005278 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
   while (*str)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	603a      	str	r2, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff f975 	bl	8004584 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800529a:	e7f2      	b.n	8005282 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800529c:	687c      	ldr	r4, [r7, #4]
 800529e:	6838      	ldr	r0, [r7, #0]
 80052a0:	f7fa ffa6 	bl	80001f0 <strlen>
 80052a4:	4603      	mov	r3, r0
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	4620      	mov	r0, r4
 80052b0:	f008 ff1f 	bl	800e0f2 <HAL_UART_Transmit>
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd90      	pop	{r4, r7, pc}

080052bc <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff f959 	bl	8004584 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff54 	bl	800519c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	08020728 	.word	0x08020728

08005300 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f949 	bl	80055b0 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4610      	mov	r0, r2
 8005338:	4798      	blx	r3
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	dc0d      	bgt.n	800535c <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005346:	f083 0301 	eor.w	r3, r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fa67 	bl	8005824 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	dd07      	ble.n	800536c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d101      	bne.n	800536c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80b6 	beq.w	80054e0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4610      	mov	r0, r2
 800538e:	4798      	blx	r3
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	e004      	b.n	80053a0 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa5e 	bl	8005858 <_ZN10IridiumSBD10i2cSerReadEv>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ff89 	bl	80052bc <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 808d 	beq.w	80054d2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	f040 8085 	bne.w	80054d2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10d      	bne.n	80053fe <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff ff7a 	bl	80052dc <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3f      	ldr	r2, [pc, #252]	; (80054e8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 80053ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80053fc:	e06e      	b.n	80054dc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 80053fe:	f002 fe33 	bl	8008068 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542c:	f083 0301 	eor.w	r3, r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9f4 	bl	8005824 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005442:	f002 fe11 	bl	8008068 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b09      	cmp	r3, #9
 800544e:	d801      	bhi.n	8005454 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d000      	beq.n	800545c <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 800545a:	e7d3      	b.n	8005404 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005462:	f083 0301 	eor.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f89f 	bl	80055b0 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3308      	adds	r3, #8
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800549a:	f083 0301 	eor.w	r3, r3, #1
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f9bd 	bl	8005824 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 80054d0:	e004      	b.n	80054dc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80054da:	e720      	b.n	800531e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80054dc:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80054de:	e71e      	b.n	800531e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	080211fc 	.word	0x080211fc

080054ec <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff03 	bl	8005300 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800550e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005512:	d001      	beq.n	8005518 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8005514:	2201      	movs	r2, #1
 8005516:	e000      	b.n	800551a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005518:	2200      	movs	r2, #0
 800551a:	4413      	add	r3, r2
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fee7 	bl	8005300 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800553e:	429a      	cmp	r2, r3
 8005540:	d91c      	bls.n	800557c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005548:	1c59      	adds	r1, r3, #1
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005560:	429a      	cmp	r2, r3
 8005562:	d109      	bne.n	8005578 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a11      	ldr	r2, [pc, #68]	; (80055ac <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005568:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	e012      	b.n	80055a2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d00a      	beq.n	800559e <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800558e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f04f 32ff 	mov.w	r2, #4294967295
 8005596:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	e001      	b.n	80055a2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	080211fc 	.word	0x080211fc

080055b0 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80055b8:	f002 fd56 	bl	8008068 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80055cc:	4293      	cmp	r3, r2
 80055ce:	bf2c      	ite	cs
 80055d0:	2301      	movcs	r3, #1
 80055d2:	2300      	movcc	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80be 	beq.w	8005758 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fdb7 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	21fd      	movs	r1, #253	; 0xfd
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe ffa9 	bl	8004550 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fdf6 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005612:	2202      	movs	r2, #2
 8005614:	4619      	mov	r1, r3
 8005616:	f000 fd90 	bl	800613a <_ZN7TwoWire11requestFromEhh>
 800561a:	4603      	mov	r3, r0
 800561c:	2b02      	cmp	r3, #2
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01d      	beq.n	8005666 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4610      	mov	r0, r2
 800563a:	4798      	blx	r3
 800563c:	4603      	mov	r3, r0
 800563e:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4610      	mov	r0, r2
 8005650:	4798      	blx	r3
 8005652:	4603      	mov	r3, r0
 8005654:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8005656:	7b7b      	ldrb	r3, [r7, #13]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	b21a      	sxth	r2, r3
 800565c:	7b3b      	ldrb	r3, [r7, #12]
 800565e:	b21b      	sxth	r3, r3
 8005660:	4313      	orrs	r3, r2
 8005662:	b21b      	sxth	r3, r3
 8005664:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d06f      	beq.n	800574c <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f000 fd71 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005682:	21ff      	movs	r1, #255	; 0xff
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe ff63 	bl	8004550 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fdb0 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d92d      	bls.n	80056f6 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80056a4:	2300      	movs	r3, #0
 80056a6:	2208      	movs	r2, #8
 80056a8:	f000 fd0c 	bl	80060c4 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00f      	beq.n	80056ee <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8e2 	bl	80058b0 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 80056ec:	e7de      	b.n	80056ac <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 80056ee:	89fb      	ldrh	r3, [r7, #14]
 80056f0:	3b08      	subs	r3, #8
 80056f2:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80056f4:	e7ce      	b.n	8005694 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005700:	89fa      	ldrh	r2, [r7, #14]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f000 fd18 	bl	800613a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4610      	mov	r0, r2
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8b3 	bl	80058b0 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 800574a:	e7de      	b.n	800570a <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 800574c:	f002 fc8c 	bl	8008068 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005772:	4619      	mov	r1, r3
 8005774:	4610      	mov	r0, r2
 8005776:	f000 fcf3 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577e:	2110      	movs	r1, #16
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe fee5 	bl	8004550 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fd32 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800579a:	2201      	movs	r2, #1
 800579c:	4619      	mov	r1, r3
 800579e:	f000 fccc 	bl	800613a <_ZN7TwoWire11requestFromEhh>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 fcb6 	bl	8006160 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	2110      	movs	r1, #16
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fea8 	bl	8004550 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	78f9      	ldrb	r1, [r7, #3]
 800580e:	4610      	mov	r0, r2
 8005810:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fcec 	bl	80061f4 <_ZN7TwoWire15endTransmissionEv>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005832:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	425a      	negs	r2, r3
 8005840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005844:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005848:	bf58      	it	pl
 800584a:	4253      	negpl	r3, r2
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586c:	429a      	cmp	r2, r3
 800586e:	d102      	bne.n	8005876 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	e016      	b.n	80058a4 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005884:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800588c:	3301      	adds	r3, #1
 800588e:	425a      	negs	r2, r3
 8005890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005894:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005898:	bf58      	it	pl
 800589a:	4253      	negpl	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c2:	3301      	adds	r3, #1
 80058c4:	425a      	negs	r2, r3
 80058c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80058ce:	bf58      	it	pl
 80058d0:	4253      	negpl	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d00b      	beq.n	80058f8 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8005904:	b084      	sub	sp, #16
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	f107 001c 	add.w	r0, r7, #28
 8005912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	f107 031c 	add.w	r3, r7, #28
 800591e:	2244      	movs	r2, #68	; 0x44
 8005920:	4619      	mov	r1, r3
 8005922:	f014 fd63 	bl	801a3ec <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	2220      	movs	r2, #32
 800592e:	4962      	ldr	r1, [pc, #392]	; (8005ab8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005930:	f008 fbdf 	bl	800e0f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	221c      	movs	r2, #28
 800593c:	495f      	ldr	r1, [pc, #380]	; (8005abc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 800593e:	f008 fbd8 	bl	800e0f2 <HAL_UART_Transmit>
	while(!this->isConnected()){
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff f80a 	bl	800495c <_ZN10IridiumSBD11isConnectedEv>
 8005948:	4603      	mov	r3, r0
 800594a:	f083 0301 	eor.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d02c      	beq.n	80059ae <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	2235      	movs	r2, #53	; 0x35
 800595c:	4958      	ldr	r1, [pc, #352]	; (8005ac0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 800595e:	f008 fbc8 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_Delay(500);
 8005962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005966:	f002 fb8b 	bl	8008080 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f04f 33ff 	mov.w	r3, #4294967295
 8005970:	2203      	movs	r2, #3
 8005972:	4954      	ldr	r1, [pc, #336]	; (8005ac4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8005974:	f008 fbbd 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800597c:	f002 fb80 	bl	8008080 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	2203      	movs	r2, #3
 8005988:	494f      	ldr	r1, [pc, #316]	; (8005ac8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 800598a:	f008 fbb2 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800598e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005992:	f002 fb75 	bl	8008080 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	2207      	movs	r2, #7
 800599e:	494b      	ldr	r1, [pc, #300]	; (8005acc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 80059a0:	f008 fba7 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80059a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a8:	f002 fb6a 	bl	8008080 <HAL_Delay>
	while(!this->isConnected()){
 80059ac:	e7c9      	b.n	8005942 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	2206      	movs	r2, #6
 80059b6:	4946      	ldr	r1, [pc, #280]	; (8005ad0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 80059b8:	f008 fb9b 	bl	800e0f2 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	221f      	movs	r2, #31
 80059c4:	4943      	ldr	r1, [pc, #268]	; (8005ad4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 80059c6:	f008 fb94 	bl	800e0f2 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 80059ca:	2101      	movs	r1, #1
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fea9 	bl	8004724 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	2206      	movs	r2, #6
 80059da:	493d      	ldr	r1, [pc, #244]	; (8005ad0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 80059dc:	f008 fb89 	bl	800e0f2 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	222c      	movs	r2, #44	; 0x2c
 80059e8:	493b      	ldr	r1, [pc, #236]	; (8005ad8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 80059ea:	f008 fb82 	bl	800e0f2 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fe fed6 	bl	80047a0 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f083 0301 	eor.w	r3, r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005a00:	f240 104d 	movw	r0, #333	; 0x14d
 8005a04:	f002 fb3c 	bl	8008080 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005a08:	e7f1      	b.n	80059ee <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a10:	2206      	movs	r2, #6
 8005a12:	492f      	ldr	r1, [pc, #188]	; (8005ad0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005a14:	f008 fb6d 	bl	800e0f2 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1e:	2217      	movs	r2, #23
 8005a20:	492e      	ldr	r1, [pc, #184]	; (8005adc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8005a22:	f008 fb66 	bl	800e0f2 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8005a26:	2101      	movs	r1, #1
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fe fee9 	bl	8004800 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	2206      	movs	r2, #6
 8005a36:	4926      	ldr	r1, [pc, #152]	; (8005ad0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005a38:	f008 fb5b 	bl	800e0f2 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	2211      	movs	r2, #17
 8005a44:	4926      	ldr	r1, [pc, #152]	; (8005ae0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8005a46:	f008 fb54 	bl	800e0f2 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fe fdb2 	bl	80045b4 <_ZN10IridiumSBD5beginEv>
 8005a50:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	2208      	movs	r2, #8
 8005a60:	4920      	ldr	r1, [pc, #128]	; (8005ae4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8005a62:	f008 fb46 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	2204      	movs	r2, #4
 8005a70:	f008 fb3f 	bl	800e0f2 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8b0 	bl	8005be0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e011      	b.n	8005aa8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	2207      	movs	r2, #7
 8005a8c:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8005a8e:	f008 fb30 	bl	800e0f2 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	4913      	ldr	r1, [pc, #76]	; (8005af0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8005aa2:	f008 fb26 	bl	800e0f2 <HAL_UART_Transmit>

	return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ab2:	b004      	add	sp, #16
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	080207a8 	.word	0x080207a8
 8005abc:	080207cc 	.word	0x080207cc
 8005ac0:	080207e8 	.word	0x080207e8
 8005ac4:	0802081c 	.word	0x0802081c
 8005ac8:	08020820 	.word	0x08020820
 8005acc:	08020824 	.word	0x08020824
 8005ad0:	080200bc 	.word	0x080200bc
 8005ad4:	0802082c 	.word	0x0802082c
 8005ad8:	0802084c 	.word	0x0802084c
 8005adc:	0802087c 	.word	0x0802087c
 8005ae0:	08020894 	.word	0x08020894
 8005ae4:	080208a8 	.word	0x080208a8
 8005ae8:	080208b4 	.word	0x080208b4
 8005aec:	080208bc 	.word	0x080208bc
 8005af0:	080208cc 	.word	0x080208cc

08005af4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b08b      	sub	sp, #44	; 0x2c
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	221d      	movs	r2, #29
 8005b04:	492f      	ldr	r1, [pc, #188]	; (8005bc4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005b06:	f008 faf4 	bl	800e0f2 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	221d      	movs	r2, #29
 8005b12:	492d      	ldr	r1, [pc, #180]	; (8005bc8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005b14:	f008 faed 	bl	800e0f2 <HAL_UART_Transmit>
	int err = this->sleep();
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fe fd76 	bl	800460a <_ZN10IridiumSBD5sleepEv>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2c:	4927      	ldr	r1, [pc, #156]	; (8005bcc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f015 fd02 	bl	801b538 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005b34:	687c      	ldr	r4, [r7, #4]
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fb58 	bl	80001f0 <strlen>
 8005b40:	4603      	mov	r3, r0
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f008 fad0 	bl	800e0f2 <HAL_UART_Transmit>
		return false;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e032      	b.n	8005bbc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	491c      	ldr	r1, [pc, #112]	; (8005bd0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005b60:	f008 fac7 	bl	800e0f2 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	2218      	movs	r2, #24
 8005b6c:	4919      	ldr	r1, [pc, #100]	; (8005bd4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005b6e:	f008 fac0 	bl	800e0f2 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fe fe43 	bl	8004800 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	2204      	movs	r2, #4
 8005b82:	4913      	ldr	r1, [pc, #76]	; (8005bd0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005b84:	f008 fab5 	bl	800e0f2 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	2227      	movs	r2, #39	; 0x27
 8005b90:	4911      	ldr	r1, [pc, #68]	; (8005bd8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005b92:	f008 faae 	bl	800e0f2 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005b96:	2100      	movs	r1, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fe fdc3 	bl	8004724 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005ba8:	f008 faa3 	bl	800e0f2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	4909      	ldr	r1, [pc, #36]	; (8005bdc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005bb6:	f008 fa9c 	bl	800e0f2 <HAL_UART_Transmit>
	return true;
 8005bba:	2301      	movs	r3, #1
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	372c      	adds	r7, #44	; 0x2c
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd90      	pop	{r4, r7, pc}
 8005bc4:	080208e0 	.word	0x080208e0
 8005bc8:	08020900 	.word	0x08020900
 8005bcc:	08020920 	.word	0x08020920
 8005bd0:	080200bc 	.word	0x080200bc
 8005bd4:	0802093c 	.word	0x0802093c
 8005bd8:	08020958 	.word	0x08020958
 8005bdc:	08020980 	.word	0x08020980

08005be0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	4948      	ldr	r1, [pc, #288]	; (8005d18 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005bf6:	f008 fa7c 	bl	800e0f2 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d107      	bne.n	8005c10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	2211      	movs	r2, #17
 8005c08:	4944      	ldr	r1, [pc, #272]	; (8005d1c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005c0a:	f008 fa72 	bl	800e0f2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005c0e:	e07f      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d107      	bne.n	8005c26 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1c:	2212      	movs	r2, #18
 8005c1e:	4940      	ldr	r1, [pc, #256]	; (8005d20 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005c20:	f008 fa67 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c24:	e074      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d107      	bne.n	8005c3c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	2212      	movs	r2, #18
 8005c34:	493b      	ldr	r1, [pc, #236]	; (8005d24 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005c36:	f008 fa5c 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c3a:	e069      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d107      	bne.n	8005c52 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	220d      	movs	r2, #13
 8005c4a:	4937      	ldr	r1, [pc, #220]	; (8005d28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005c4c:	f008 fa51 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c50:	e05e      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d107      	bne.n	8005c68 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	2224      	movs	r2, #36	; 0x24
 8005c60:	4932      	ldr	r1, [pc, #200]	; (8005d2c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8005c62:	f008 fa46 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c66:	e053      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d107      	bne.n	8005c7e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	2215      	movs	r2, #21
 8005c76:	492e      	ldr	r1, [pc, #184]	; (8005d30 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8005c78:	f008 fa3b 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c7c:	e048      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d107      	bne.n	8005c94 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	2218      	movs	r2, #24
 8005c8c:	4929      	ldr	r1, [pc, #164]	; (8005d34 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8005c8e:	f008 fa30 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005c92:	e03d      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d107      	bne.n	8005caa <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	4925      	ldr	r1, [pc, #148]	; (8005d38 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8005ca4:	f008 fa25 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005ca8:	e032      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	2b09      	cmp	r3, #9
 8005cae:	d107      	bne.n	8005cc0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb6:	220d      	movs	r2, #13
 8005cb8:	4920      	ldr	r1, [pc, #128]	; (8005d3c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8005cba:	f008 fa1a 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005cbe:	e027      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	2b0a      	cmp	r3, #10
 8005cc4:	d107      	bne.n	8005cd6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	220d      	movs	r2, #13
 8005cce:	491c      	ldr	r1, [pc, #112]	; (8005d40 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8005cd0:	f008 fa0f 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005cd4:	e01c      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2b0b      	cmp	r3, #11
 8005cda:	d107      	bne.n	8005cec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	4917      	ldr	r1, [pc, #92]	; (8005d44 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8005ce6:	f008 fa04 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005cea:	e011      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b14      	cmp	r3, #20
 8005cf0:	d107      	bne.n	8005d02 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	2216      	movs	r2, #22
 8005cfa:	4913      	ldr	r1, [pc, #76]	; (8005d48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8005cfc:	f008 f9f9 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005d00:	e006      	b.n	8005d10 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	220b      	movs	r2, #11
 8005d0a:	4910      	ldr	r1, [pc, #64]	; (8005d4c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8005d0c:	f008 f9f1 	bl	800e0f2 <HAL_UART_Transmit>
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	080209a0 	.word	0x080209a0
 8005d1c:	080209ac 	.word	0x080209ac
 8005d20:	080209bc 	.word	0x080209bc
 8005d24:	080209d0 	.word	0x080209d0
 8005d28:	080209e4 	.word	0x080209e4
 8005d2c:	080209f0 	.word	0x080209f0
 8005d30:	08020a14 	.word	0x08020a14
 8005d34:	08020a28 	.word	0x08020a28
 8005d38:	08020a40 	.word	0x08020a40
 8005d3c:	08020a50 	.word	0x08020a50
 8005d40:	08020a5c 	.word	0x08020a5c
 8005d44:	08020a68 	.word	0x08020a68
 8005d48:	08020a78 	.word	0x08020a78
 8005d4c:	08020a90 	.word	0x08020a90

08005d50 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	71fb      	strb	r3, [r7, #7]
   {
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2204      	movs	r2, #4
 8005d82:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2210      	movs	r2, #16
 8005d92:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2240      	movs	r2, #64	; 0x40
 8005da2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	79fa      	ldrb	r2, [r7, #7]
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	221e      	movs	r2, #30
 8005dc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	221e      	movs	r2, #30
 8005dc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005dd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	22f0      	movs	r2, #240	; 0xf0
 8005dda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e10:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005e38:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005e40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	080211fc 	.word	0x080211fc

08005e70 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8005e70:	b598      	push	{r3, r4, r7, lr}
 8005e72:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <MRT_Static_Iridium_Constructor+0x28>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8005e7c:	20e4      	movs	r0, #228	; 0xe4
 8005e7e:	f013 f99f 	bl	80191c0 <_Znwj>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461c      	mov	r4, r3
 8005e86:	2263      	movs	r2, #99	; 0x63
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <MRT_Static_Iridium_Constructor+0x2c>)
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff ff60 	bl	8005d50 <_ZN10IridiumSBDC1ER7TwoWireh>
 8005e90:	4b01      	ldr	r3, [pc, #4]	; (8005e98 <MRT_Static_Iridium_Constructor+0x28>)
 8005e92:	601c      	str	r4, [r3, #0]
	}
}
 8005e94:	bf00      	nop
 8005e96:	bd98      	pop	{r3, r4, r7, pc}
 8005e98:	2000043c 	.word	0x2000043c
 8005e9c:	200004f8 	.word	0x200004f8

08005ea0 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <MRT_Static_Iridium_Destructor+0x1c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <MRT_Static_Iridium_Destructor+0x1c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
	}
}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000043c 	.word	0x2000043c

08005ec0 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec4:	b08f      	sub	sp, #60	; 0x3c
 8005ec6:	af0e      	add	r7, sp, #56	; 0x38
 8005ec8:	f107 0418 	add.w	r4, r7, #24
 8005ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8005ed0:	f7ff ffce 	bl	8005e70 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <MRT_Static_Iridium_Setup+0x50>)
 8005ed6:	681e      	ldr	r6, [r3, #0]
 8005ed8:	466d      	mov	r5, sp
 8005eda:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ef2:	f107 0318 	add.w	r3, r7, #24
 8005ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff fd03 	bl	8005904 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 8005efe:	4603      	mov	r3, r0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3704      	adds	r7, #4
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f0a:	b004      	add	sp, #16
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	2000043c 	.word	0x2000043c

08005f14 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <MRT_Static_Iridium_Shutdown+0x2c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fde8 	bl	8005af4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8005f30:	f7ff ffb6 	bl	8005ea0 <MRT_Static_Iridium_Destructor>
	return b;
 8005f34:	79fb      	ldrb	r3, [r7, #7]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000043c 	.word	0x2000043c

08005f44 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <_ZN5Print5writeEPKc+0x14>
 8005f54:	2300      	movs	r3, #0
 8005f56:	e00d      	b.n	8005f74 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	681c      	ldr	r4, [r3, #0]
 8005f60:	6838      	ldr	r0, [r7, #0]
 8005f62:	f7fa f945 	bl	80001f0 <strlen>
 8005f66:	4603      	mov	r3, r0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	47a0      	blx	r4
 8005f70:	4603      	mov	r3, r0
 8005f72:	bf00      	nop
    }
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd90      	pop	{r4, r7, pc}

08005f7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1e5a      	subs	r2, r3, #1
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	4790      	blx	r2
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005fbc:	e7e6      	b.n	8005f8c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8005fbe:	697b      	ldr	r3, [r7, #20]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f805 	bl	8005fe4 <_ZN5Print5printEPKc>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  return write(str);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ffa7 	bl	8005f44 <_ZN5Print5writeEPKc>
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	4a06      	ldr	r2, [pc, #24]	; (8006024 <_ZN5PrintC1Ev+0x24>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	08021210 	.word	0x08021210

08006028 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff ffe4 	bl	8006000 <_ZN5PrintC1Ev>
 8006038:	4a05      	ldr	r2, [pc, #20]	; (8006050 <_ZN6StreamC1Ev+0x28>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006044:	609a      	str	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	08021240 	.word	0x08021240

08006054 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ffe1 	bl	8006028 <_ZN6StreamC1Ev>
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3390      	adds	r3, #144	; 0x90
 8006076:	2220      	movs	r2, #32
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f014 f9de 	bl	801a43c <memset>
  rxBufferIndex = 0;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08021220 	.word	0x08021220

080060c4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	70fb      	strb	r3, [r7, #3]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70bb      	strb	r3, [r7, #2]
 80060da:	4613      	mov	r3, r2
 80060dc:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fc24 	bl	800692c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80060e4:	78bb      	ldrb	r3, [r7, #2]
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d901      	bls.n	80060ee <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80060ea:	2320      	movs	r3, #32
 80060ec:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	b2d9      	uxtb	r1, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80060fa:	78b8      	ldrb	r0, [r7, #2]
 80060fc:	787b      	ldrb	r3, [r7, #1]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4603      	mov	r3, r0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f9cf 	bl	80064a6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8006108:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da02      	bge.n	8006116 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	e001      	b.n	800611a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fbcc 	bl	80068c8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
 8006146:	4613      	mov	r3, r2
 8006148:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800614a:	78ba      	ldrb	r2, [r7, #2]
 800614c:	78f9      	ldrb	r1, [r7, #3]
 800614e:	2301      	movs	r3, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ffb7 	bl	80060c4 <_ZN7TwoWire11requestFromEhhh>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af02      	add	r7, sp, #8
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fbc2 	bl	800692c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7c1b      	ldrb	r3, [r3, #16]
 80061ac:	0059      	lsls	r1, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f103 0211 	add.w	r2, r3, #17
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061ba:	4618      	mov	r0, r3
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa00 	bl	80065c8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb6f 	bl	80068c8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80061fc:	2101      	movs	r1, #1
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ffc9 	bl	8006196 <_ZN7TwoWire15endTransmissionEh>
 8006204:	4603      	mov	r3, r0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01d      	beq.n	8006260 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800622a:	2b1f      	cmp	r3, #31
 800622c:	d901      	bls.n	8006232 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800622e:	2300      	movs	r3, #0
 8006230:	e028      	b.n	8006284 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006238:	4619      	mov	r1, r3
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	440b      	add	r3, r1
 8006240:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006248:	3301      	adds	r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800625e:	e010      	b.n	8006282 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb63 	bl	800692c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006266:	1cfb      	adds	r3, r7, #3
 8006268:	2201      	movs	r2, #1
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fa95 	bl	800679c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb28 	bl	80068c8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	333c      	adds	r3, #60	; 0x3c
 800627c:	4618      	mov	r0, r3
 800627e:	f003 f903 	bl	8009488 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006282:	2301      	movs	r3, #1
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d013      	beq.n	80062ca <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d21e      	bcs.n	80062ec <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	440a      	add	r2, r1
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	4611      	mov	r1, r2
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	3301      	adds	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e7ed      	b.n	80062a6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fb2e 	bl	800692c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fa60 	bl	800679c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 faf3 	bl	80068c8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	333c      	adds	r3, #60	; 0x3c
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 f8ce 	bl	8009488 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80062ec:	687b      	ldr	r3, [r7, #4]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	1ad3      	subs	r3, r2, r3
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006326:	f04f 33ff 	mov.w	r3, #4294967295
 800632a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006332:	b2da      	uxtb	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800633a:	b2db      	uxtb	r3, r3
 800633c:	429a      	cmp	r2, r3
 800633e:	bf34      	ite	cc
 8006340:	2301      	movcc	r3, #1
 8006342:	2300      	movcs	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800635c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006392:	b2da      	uxtb	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	429a      	cmp	r2, r3
 800639e:	bf34      	ite	cc
 80063a0:	2301      	movcc	r3, #1
 80063a2:	2300      	movcs	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063f6:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80063f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063fc:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0e9      	beq.n	80063fe <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800642a:	2301      	movs	r3, #1
 800642c:	e021      	b.n	8006472 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800643a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800643e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1e5a      	subs	r2, r3, #1
 800645c:	60fa      	str	r2, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0e9      	beq.n	8006440 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

    return 0;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b08a      	sub	sp, #40	; 0x28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	461a      	mov	r2, r3
 80064b2:	460b      	mov	r3, r1
 80064b4:	72fb      	strb	r3, [r7, #11]
 80064b6:	4613      	mov	r3, r2
 80064b8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ff8d 	bl	80063e0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80064c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	bf14      	ite	ne
 80064da:	2301      	movne	r3, #1
 80064dc:	2300      	moveq	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	3b01      	subs	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ed      	bne.n	80064cc <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	e064      	b.n	80065c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b02      	cmp	r3, #2
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	3b01      	subs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1ed      	bne.n	800650a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	e045      	b.n	80065c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800654a:	2300      	movs	r3, #0
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	7abb      	ldrb	r3, [r7, #10]
 8006550:	3b01      	subs	r3, #1
 8006552:	6a3a      	ldr	r2, [r7, #32]
 8006554:	429a      	cmp	r2, r3
 8006556:	da17      	bge.n	8006588 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	2200      	movs	r2, #0
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f8a4 	bl	80066ae <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006566:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295
 8006572:	e025      	b.n	80065c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	b2ca      	uxtb	r2, r1
 800657e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	3301      	adds	r3, #1
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	e7e2      	b.n	800654e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8006588:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7ff ff74 	bl	800647e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8006596:	f107 0314 	add.w	r3, r7, #20
 800659a:	2201      	movs	r2, #1
 800659c:	4619      	mov	r1, r3
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f885 	bl	80066ae <_ZN7TwoWire20i2c_master_byte_readEPii>
 80065a4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	e006      	b.n	80065c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	b2ca      	uxtb	r2, r1
 80065bc:	701a      	strb	r2, [r3, #0]

    return length;
 80065be:	7abb      	ldrb	r3, [r7, #10]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3728      	adds	r7, #40	; 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff feff 	bl	80063e0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80065e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065e6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	3b01      	subs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ed      	bne.n	80065e8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800660c:	2304      	movs	r3, #4
 800660e:	e04a      	b.n	80066a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800661c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006620:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3b01      	subs	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ed      	bne.n	8006622 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8006646:	2302      	movs	r3, #2
 8006648:	e02d      	b.n	80066a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	da15      	bge.n	8006698 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4619      	mov	r1, r3
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f85a 	bl	8006730 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	bf14      	ite	ne
 8006682:	2301      	movne	r3, #1
 8006684:	2300      	moveq	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800668c:	2303      	movs	r3, #3
 800668e:	e00a      	b.n	80066a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3301      	adds	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e7e5      	b.n	8006664 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff feed 	bl	800647e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d006      	beq.n	80066d4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e005      	b.n	80066e0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80066e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	1e5a      	subs	r2, r3, #1
 8006702:	617a      	str	r2, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0e9      	beq.n	80066e6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	e005      	b.n	8006724 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	461a      	mov	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	601a      	str	r2, [r3, #0]

    return 0;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800674a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d008      	beq.n	8006770 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006768:	2b04      	cmp	r3, #4
 800676a:	d001      	beq.n	8006770 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	60fa      	str	r2, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0e2      	beq.n	8006750 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800678a:	2300      	movs	r3, #0
 800678c:	e000      	b.n	8006790 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800678e:	2301      	movs	r3, #1
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800679c:	b480      	push	{r7}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dd41      	ble.n	800683c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80067b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067bc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3b01      	subs	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ed      	bne.n	80067be <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	e068      	b.n	80068ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	60ba      	str	r2, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	611a      	str	r2, [r3, #16]
        length--;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	607b      	str	r3, [r7, #4]
        size++;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	3301      	adds	r3, #1
 8006800:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b04      	cmp	r3, #4
 800680e:	d104      	bne.n	800681a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0c8      	beq.n	80067b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	60ba      	str	r2, [r7, #8]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	611a      	str	r2, [r3, #16]
            length--;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3b01      	subs	r3, #1
 8006832:	607b      	str	r3, [r7, #4]
            size++;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	3301      	adds	r3, #1
 8006838:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800683a:	e7ba      	b.n	80067b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800683c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006840:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3b01      	subs	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ec      	bne.n	8006842 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006868:	f04f 33ff 	mov.w	r3, #4294967295
 800686c:	e025      	b.n	80068ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006876:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800687c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3b01      	subs	r3, #1
 800689a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ed      	bne.n	800687e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	e008      	b.n	80068ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80068b8:	69bb      	ldr	r3, [r7, #24]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	4a12      	ldr	r2, [pc, #72]	; (8006920 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d106      	bne.n	80068e8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80068da:	2049      	movs	r0, #73	; 0x49
 80068dc:	f001 ff5e 	bl	800879c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80068e0:	2048      	movs	r0, #72	; 0x48
 80068e2:	f001 ff5b 	bl	800879c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80068e6:	e016      	b.n	8006916 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	4a0d      	ldr	r2, [pc, #52]	; (8006924 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d106      	bne.n	8006900 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80068f2:	2022      	movs	r0, #34	; 0x22
 80068f4:	f001 ff52 	bl	800879c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80068f8:	2021      	movs	r0, #33	; 0x21
 80068fa:	f001 ff4f 	bl	800879c <HAL_NVIC_EnableIRQ>
}
 80068fe:	e00a      	b.n	8006916 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	4a08      	ldr	r2, [pc, #32]	; (8006928 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d105      	bne.n	8006916 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800690a:	2020      	movs	r0, #32
 800690c:	f001 ff46 	bl	800879c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006910:	201f      	movs	r0, #31
 8006912:	f001 ff43 	bl	800879c <HAL_NVIC_EnableIRQ>
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40005c00 	.word	0x40005c00
 8006924:	40005800 	.word	0x40005800
 8006928:	40005400 	.word	0x40005400

0800692c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	4a12      	ldr	r2, [pc, #72]	; (8006984 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d106      	bne.n	800694c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800693e:	2049      	movs	r0, #73	; 0x49
 8006940:	f001 ff3a 	bl	80087b8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006944:	2048      	movs	r0, #72	; 0x48
 8006946:	f001 ff37 	bl	80087b8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800694a:	e016      	b.n	800697a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	4a0d      	ldr	r2, [pc, #52]	; (8006988 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d106      	bne.n	8006964 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8006956:	2022      	movs	r0, #34	; 0x22
 8006958:	f001 ff2e 	bl	80087b8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800695c:	2021      	movs	r0, #33	; 0x21
 800695e:	f001 ff2b 	bl	80087b8 <HAL_NVIC_DisableIRQ>
}
 8006962:	e00a      	b.n	800697a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <_ZN7TwoWire16disableInterruptEv+0x60>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d105      	bne.n	800697a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800696e:	2020      	movs	r0, #32
 8006970:	f001 ff22 	bl	80087b8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006974:	201f      	movs	r0, #31
 8006976:	f001 ff1f 	bl	80087b8 <HAL_NVIC_DisableIRQ>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40005c00 	.word	0x40005c00
 8006988:	40005800 	.word	0x40005800
 800698c:	40005400 	.word	0x40005400

08006990 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d110      	bne.n	80069c2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10b      	bne.n	80069c2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80069aa:	4908      	ldr	r1, [pc, #32]	; (80069cc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80069ac:	4808      	ldr	r0, [pc, #32]	; (80069d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80069ae:	f7ff fb51 	bl	8006054 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80069b2:	4908      	ldr	r1, [pc, #32]	; (80069d4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80069b4:	4808      	ldr	r0, [pc, #32]	; (80069d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80069b6:	f7ff fb4d 	bl	8006054 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80069ba:	4908      	ldr	r1, [pc, #32]	; (80069dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80069bc:	4808      	ldr	r0, [pc, #32]	; (80069e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80069be:	f7ff fb49 	bl	8006054 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40005400 	.word	0x40005400
 80069d0:	20000440 	.word	0x20000440
 80069d4:	40005800 	.word	0x40005800
 80069d8:	200004f8 	.word	0x200004f8
 80069dc:	40005c00 	.word	0x40005c00
 80069e0:	200005b0 	.word	0x200005b0

080069e4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7ff ffcf 	bl	8006990 <_Z41__static_initialization_and_destruction_0ii>
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	461a      	mov	r2, r3
 8006a00:	460b      	mov	r3, r1
 8006a02:	72fb      	strb	r3, [r7, #11]
 8006a04:	4613      	mov	r3, r2
 8006a06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685c      	ldr	r4, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6898      	ldr	r0, [r3, #8]
 8006a10:	893b      	ldrh	r3, [r7, #8]
 8006a12:	7af9      	ldrb	r1, [r7, #11]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	47a0      	blx	r4
 8006a18:	6178      	str	r0, [r7, #20]

  return ret;
 8006a1a:	697b      	ldr	r3, [r7, #20]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}

08006a24 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	460b      	mov	r3, r1
 8006a32:	72fb      	strb	r3, [r7, #11]
 8006a34:	4613      	mov	r3, r2
 8006a36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681c      	ldr	r4, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6898      	ldr	r0, [r3, #8]
 8006a40:	893b      	ldrh	r3, [r7, #8]
 8006a42:	7af9      	ldrb	r1, [r7, #11]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	47a0      	blx	r4
 8006a48:	6178      	str	r0, [r7, #20]

  return ret;
 8006a4a:	697b      	ldr	r3, [r7, #20]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}

08006a54 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006a80 <lps22hh_from_lsb_to_hpa+0x2c>
 8006a6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006a72:	eeb0 0a67 	vmov.f32	s0, s15
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	49800000 	.word	0x49800000

08006a84 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006ab4 <lps22hh_from_lsb_to_celsius+0x30>
 8006a9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006aa2:	eef0 7a66 	vmov.f32	s15, s13
}
 8006aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	42c80000 	.word	0x42c80000

08006ab8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006ac4:	f107 0208 	add.w	r2, r7, #8
 8006ac8:	2301      	movs	r3, #1
 8006aca:	2110      	movs	r1, #16
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff ff91 	bl	80069f4 <lps22hh_read_reg>
 8006ad2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	7a3b      	ldrb	r3, [r7, #8]
 8006ae4:	f362 0341 	bfi	r3, r2, #1, #1
 8006ae8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006aea:	f107 0208 	add.w	r2, r7, #8
 8006aee:	2301      	movs	r3, #1
 8006af0:	2110      	movs	r1, #16
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ff96 	bl	8006a24 <lps22hh_write_reg>
 8006af8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006afa:	68fb      	ldr	r3, [r7, #12]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006b10:	f107 0210 	add.w	r2, r7, #16
 8006b14:	2301      	movs	r3, #1
 8006b16:	2110      	movs	r1, #16
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff6b 	bl	80069f4 <lps22hh_read_reg>
 8006b1e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006b26:	f107 020c 	add.w	r2, r7, #12
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	2111      	movs	r1, #17
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff60 	bl	80069f4 <lps22hh_read_reg>
 8006b34:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10f      	bne.n	8006b5c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	7c3b      	ldrb	r3, [r7, #16]
 8006b46:	f362 1306 	bfi	r3, r2, #4, #3
 8006b4a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006b4c:	f107 0210 	add.w	r2, r7, #16
 8006b50:	2301      	movs	r3, #1
 8006b52:	2110      	movs	r1, #16
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff65 	bl	8006a24 <lps22hh_write_reg>
 8006b5a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d119      	bne.n	8006b96 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	7b3b      	ldrb	r3, [r7, #12]
 8006b6e:	f362 0341 	bfi	r3, r2, #1, #1
 8006b72:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	08db      	lsrs	r3, r3, #3
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	7b3b      	ldrb	r3, [r7, #12]
 8006b80:	f362 0300 	bfi	r3, r2, #0, #1
 8006b84:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006b86:	f107 020c 	add.w	r2, r7, #12
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	2111      	movs	r1, #17
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff ff48 	bl	8006a24 <lps22hh_write_reg>
 8006b94:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006b96:	697b      	ldr	r3, [r7, #20]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006baa:	f107 0208 	add.w	r2, r7, #8
 8006bae:	2301      	movs	r3, #1
 8006bb0:	2127      	movs	r1, #39	; 0x27
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ff1e 	bl	80069f4 <lps22hh_read_reg>
 8006bb8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006bba:	7a3b      	ldrb	r3, [r7, #8]
 8006bbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	701a      	strb	r2, [r3, #0]

  return ret;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006bdc:	f107 0208 	add.w	r2, r7, #8
 8006be0:	2303      	movs	r3, #3
 8006be2:	2128      	movs	r1, #40	; 0x28
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff05 	bl	80069f4 <lps22hh_read_reg>
 8006bea:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006bec:	7abb      	ldrb	r3, [r7, #10]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	7a7a      	ldrb	r2, [r7, #9]
 8006bfc:	441a      	add	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	7a3a      	ldrb	r2, [r7, #8]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	601a      	str	r2, [r3, #0]

  return ret;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006c2e:	f107 0208 	add.w	r2, r7, #8
 8006c32:	2302      	movs	r3, #2
 8006c34:	212b      	movs	r1, #43	; 0x2b
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fedc 	bl	80069f4 <lps22hh_read_reg>
 8006c3c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006c3e:	7a7b      	ldrb	r3, [r7, #9]
 8006c40:	b21a      	sxth	r2, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	7a3b      	ldrb	r3, [r7, #8]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b21a      	sxth	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006c60:	68fb      	ldr	r3, [r7, #12]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006c74:	2301      	movs	r3, #1
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	210f      	movs	r1, #15
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff feba 	bl	80069f4 <lps22hh_read_reg>
 8006c80:	60f8      	str	r0, [r7, #12]

  return ret;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006c98:	f107 0208 	add.w	r2, r7, #8
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	2111      	movs	r1, #17
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fea7 	bl	80069f4 <lps22hh_read_reg>
 8006ca6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10f      	bne.n	8006cce <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	7a3b      	ldrb	r3, [r7, #8]
 8006cb8:	f362 0382 	bfi	r3, r2, #2, #1
 8006cbc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006cbe:	f107 0208 	add.w	r2, r7, #8
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	2111      	movs	r1, #17
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff feac 	bl	8006a24 <lps22hh_write_reg>
 8006ccc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006ce2:	f107 0208 	add.w	r2, r7, #8
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	2111      	movs	r1, #17
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe82 	bl	80069f4 <lps22hh_read_reg>
 8006cf0:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006cf2:	7a3b      	ldrb	r3, [r7, #8]
 8006cf4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	701a      	strb	r2, [r3, #0]

  return ret;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006d0a:	b590      	push	{r4, r7, lr}
 8006d0c:	b087      	sub	sp, #28
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	461a      	mov	r2, r3
 8006d16:	460b      	mov	r3, r1
 8006d18:	72fb      	strb	r3, [r7, #11]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685c      	ldr	r4, [r3, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6898      	ldr	r0, [r3, #8]
 8006d26:	893b      	ldrh	r3, [r7, #8]
 8006d28:	7af9      	ldrb	r1, [r7, #11]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	47a0      	blx	r4
 8006d2e:	6178      	str	r0, [r7, #20]

  return ret;
 8006d30:	697b      	ldr	r3, [r7, #20]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd90      	pop	{r4, r7, pc}

08006d3a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006d3a:	b590      	push	{r4, r7, lr}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	461a      	mov	r2, r3
 8006d46:	460b      	mov	r3, r1
 8006d48:	72fb      	strb	r3, [r7, #11]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681c      	ldr	r4, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6898      	ldr	r0, [r3, #8]
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	7af9      	ldrb	r1, [r7, #11]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	47a0      	blx	r4
 8006d5e:	6178      	str	r0, [r7, #20]

  return ret;
 8006d60:	697b      	ldr	r3, [r7, #20]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}
	...

08006d6c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006d98 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8006d86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	3d79db23 	.word	0x3d79db23

08006d9c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006dc8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8006db6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006dba:	eeb0 0a67 	vmov.f32	s0, s15
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	428c0000 	.word	0x428c0000

08006dcc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006de2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006e00 <lsm6dsr_from_lsb_to_celsius+0x34>
 8006de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006dee:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006df2:	eeb0 0a67 	vmov.f32	s0, s15
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	43800000 	.word	0x43800000

08006e04 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006e10:	f107 0208 	add.w	r2, r7, #8
 8006e14:	2301      	movs	r3, #1
 8006e16:	2110      	movs	r1, #16
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff76 	bl	8006d0a <lsm6dsr_read_reg>
 8006e1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	7a3b      	ldrb	r3, [r7, #8]
 8006e30:	f362 0383 	bfi	r3, r2, #2, #2
 8006e34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006e36:	f107 0208 	add.w	r2, r7, #8
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff7b 	bl	8006d3a <lsm6dsr_write_reg>
 8006e44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006e46:	68fb      	ldr	r3, [r7, #12]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006e60:	f107 030c 	add.w	r3, r7, #12
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fbb0 	bl	80075cc <lsm6dsr_fsm_enable_get>
 8006e6c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 80c4 	bne.w	8006ffe <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e76:	7b3b      	ldrb	r3, [r7, #12]
 8006e78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006e7e:	7b3b      	ldrb	r3, [r7, #12]
 8006e80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e84:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006e8a:	7b3b      	ldrb	r3, [r7, #12]
 8006e8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006e92:	4313      	orrs	r3, r2
 8006e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006e96:	7b3b      	ldrb	r3, [r7, #12]
 8006e98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006ea2:	7b3b      	ldrb	r3, [r7, #12]
 8006ea4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006eae:	7b3b      	ldrb	r3, [r7, #12]
 8006eb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006eba:	7b3b      	ldrb	r3, [r7, #12]
 8006ebc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006ec6:	7b3b      	ldrb	r3, [r7, #12]
 8006ec8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ed2:	7b7b      	ldrb	r3, [r7, #13]
 8006ed4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006eda:	4313      	orrs	r3, r2
 8006edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006ede:	7b7b      	ldrb	r3, [r7, #13]
 8006ee0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006eea:	7b7b      	ldrb	r3, [r7, #13]
 8006eec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ef0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006ef6:	7b7b      	ldrb	r3, [r7, #13]
 8006ef8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006efc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006f02:	7b7b      	ldrb	r3, [r7, #13]
 8006f04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006f0e:	7b7b      	ldrb	r3, [r7, #13]
 8006f10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006f16:	4313      	orrs	r3, r2
 8006f18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006f1a:	7b7b      	ldrb	r3, [r7, #13]
 8006f1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006f20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006f26:	7b7b      	ldrb	r3, [r7, #13]
 8006f28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006f2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d163      	bne.n	8006ffe <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006f36:	f107 030b 	add.w	r3, r7, #11
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fb71 	bl	8007624 <lsm6dsr_fsm_data_rate_get>
 8006f42:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d159      	bne.n	8006ffe <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006f4a:	7afb      	ldrb	r3, [r7, #11]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d853      	bhi.n	8006ff8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <lsm6dsr_xl_data_rate_set+0x108>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f7b 	.word	0x08006f7b
 8006f60:	08006f99 	.word	0x08006f99
 8006f64:	08006fc3 	.word	0x08006fc3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006f72:	e045      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	75fb      	strb	r3, [r7, #23]
            break;
 8006f78:	e042      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006f80:	2302      	movs	r3, #2
 8006f82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006f84:	e03c      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d102      	bne.n	8006f92 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8006f90:	e036      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	75fb      	strb	r3, [r7, #23]
            break;
 8006f96:	e033      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006fa2:	e02d      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d102      	bne.n	8006fb0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006faa:	2303      	movs	r3, #3
 8006fac:	75fb      	strb	r3, [r7, #23]
            break;
 8006fae:	e027      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d102      	bne.n	8006fbc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
            break;
 8006fba:	e021      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8006fc0:	e01e      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006fcc:	e018      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d102      	bne.n	8006fda <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	75fb      	strb	r3, [r7, #23]
            break;
 8006fd8:	e012      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d102      	bne.n	8006fe6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	75fb      	strb	r3, [r7, #23]
            break;
 8006fe4:	e00c      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d102      	bne.n	8006ff2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006fec:	2304      	movs	r3, #4
 8006fee:	75fb      	strb	r3, [r7, #23]
            break;
 8006ff0:	e006      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	75fb      	strb	r3, [r7, #23]
            break;
 8006ff6:	e003      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	75fb      	strb	r3, [r7, #23]
            break;
 8006ffc:	e000      	b.n	8007000 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006ffe:	bf00      	nop
    }
  }

  if (ret == 0)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d107      	bne.n	8007016 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007006:	f107 0208 	add.w	r2, r7, #8
 800700a:	2301      	movs	r3, #1
 800700c:	2110      	movs	r1, #16
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fe7b 	bl	8006d0a <lsm6dsr_read_reg>
 8007014:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10f      	bne.n	800703c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	b2da      	uxtb	r2, r3
 8007024:	7a3b      	ldrb	r3, [r7, #8]
 8007026:	f362 1307 	bfi	r3, r2, #4, #4
 800702a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800702c:	f107 0208 	add.w	r2, r7, #8
 8007030:	2301      	movs	r3, #1
 8007032:	2110      	movs	r1, #16
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fe80 	bl	8006d3a <lsm6dsr_write_reg>
 800703a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800703c:	693b      	ldr	r3, [r7, #16]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop

08007048 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	2301      	movs	r3, #1
 800705a:	2111      	movs	r1, #17
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fe54 	bl	8006d0a <lsm6dsr_read_reg>
 8007062:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10f      	bne.n	800708a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	b2da      	uxtb	r2, r3
 8007072:	7a3b      	ldrb	r3, [r7, #8]
 8007074:	f362 0303 	bfi	r3, r2, #0, #4
 8007078:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800707a:	f107 0208 	add.w	r2, r7, #8
 800707e:	2301      	movs	r3, #1
 8007080:	2111      	movs	r1, #17
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff fe59 	bl	8006d3a <lsm6dsr_write_reg>
 8007088:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800708a:	68fb      	ldr	r3, [r7, #12]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa8e 	bl	80075cc <lsm6dsr_fsm_enable_get>
 80070b0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 80c4 	bne.w	8007242 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070ba:	7b3b      	ldrb	r3, [r7, #12]
 80070bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80070c2:	7b3b      	ldrb	r3, [r7, #12]
 80070c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80070ce:	7b3b      	ldrb	r3, [r7, #12]
 80070d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80070d6:	4313      	orrs	r3, r2
 80070d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80070da:	7b3b      	ldrb	r3, [r7, #12]
 80070dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80070e6:	7b3b      	ldrb	r3, [r7, #12]
 80070e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80070ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80070f2:	7b3b      	ldrb	r3, [r7, #12]
 80070f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80070fe:	7b3b      	ldrb	r3, [r7, #12]
 8007100:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007106:	4313      	orrs	r3, r2
 8007108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800710a:	7b3b      	ldrb	r3, [r7, #12]
 800710c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007112:	4313      	orrs	r3, r2
 8007114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007116:	7b7b      	ldrb	r3, [r7, #13]
 8007118:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800711c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800711e:	4313      	orrs	r3, r2
 8007120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007122:	7b7b      	ldrb	r3, [r7, #13]
 8007124:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800712a:	4313      	orrs	r3, r2
 800712c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800712e:	7b7b      	ldrb	r3, [r7, #13]
 8007130:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007136:	4313      	orrs	r3, r2
 8007138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800713a:	7b7b      	ldrb	r3, [r7, #13]
 800713c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007142:	4313      	orrs	r3, r2
 8007144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007146:	7b7b      	ldrb	r3, [r7, #13]
 8007148:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800714c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800714e:	4313      	orrs	r3, r2
 8007150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007152:	7b7b      	ldrb	r3, [r7, #13]
 8007154:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800715a:	4313      	orrs	r3, r2
 800715c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800715e:	7b7b      	ldrb	r3, [r7, #13]
 8007160:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007166:	4313      	orrs	r3, r2
 8007168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800716a:	7b7b      	ldrb	r3, [r7, #13]
 800716c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007172:	4313      	orrs	r3, r2
 8007174:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007176:	2b01      	cmp	r3, #1
 8007178:	d163      	bne.n	8007242 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800717a:	f107 030b 	add.w	r3, r7, #11
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa4f 	bl	8007624 <lsm6dsr_fsm_data_rate_get>
 8007186:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d159      	bne.n	8007242 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d853      	bhi.n	800723c <lsm6dsr_gy_data_rate_set+0x1a8>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <lsm6dsr_gy_data_rate_set+0x108>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071bf 	.word	0x080071bf
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	08007207 	.word	0x08007207
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80071b6:	e045      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	75fb      	strb	r3, [r7, #23]
            break;
 80071bc:	e042      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80071c4:	2302      	movs	r3, #2
 80071c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80071c8:	e03c      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d102      	bne.n	80071d6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80071d0:	2302      	movs	r3, #2
 80071d2:	75fb      	strb	r3, [r7, #23]
            break;
 80071d4:	e036      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	75fb      	strb	r3, [r7, #23]
            break;
 80071da:	e033      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80071e2:	2303      	movs	r3, #3
 80071e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80071e6:	e02d      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d102      	bne.n	80071f4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80071ee:	2303      	movs	r3, #3
 80071f0:	75fb      	strb	r3, [r7, #23]
            break;
 80071f2:	e027      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d102      	bne.n	8007200 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80071fa:	2303      	movs	r3, #3
 80071fc:	75fb      	strb	r3, [r7, #23]
            break;
 80071fe:	e021      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	75fb      	strb	r3, [r7, #23]
            break;
 8007204:	e01e      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800720c:	2304      	movs	r3, #4
 800720e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007210:	e018      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d102      	bne.n	800721e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007218:	2304      	movs	r3, #4
 800721a:	75fb      	strb	r3, [r7, #23]
            break;
 800721c:	e012      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d102      	bne.n	800722a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007224:	2304      	movs	r3, #4
 8007226:	75fb      	strb	r3, [r7, #23]
            break;
 8007228:	e00c      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d102      	bne.n	8007236 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007230:	2304      	movs	r3, #4
 8007232:	75fb      	strb	r3, [r7, #23]
            break;
 8007234:	e006      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	75fb      	strb	r3, [r7, #23]
            break;
 800723a:	e003      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	75fb      	strb	r3, [r7, #23]
            break;
 8007240:	e000      	b.n	8007244 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007242:	bf00      	nop
    }
  }

  if (ret == 0)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d107      	bne.n	800725a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800724a:	f107 0208 	add.w	r2, r7, #8
 800724e:	2301      	movs	r3, #1
 8007250:	2111      	movs	r1, #17
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fd59 	bl	8006d0a <lsm6dsr_read_reg>
 8007258:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10f      	bne.n	8007280 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	b2da      	uxtb	r2, r3
 8007268:	7a3b      	ldrb	r3, [r7, #8]
 800726a:	f362 1307 	bfi	r3, r2, #4, #4
 800726e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007270:	f107 0208 	add.w	r2, r7, #8
 8007274:	2301      	movs	r3, #1
 8007276:	2111      	movs	r1, #17
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff fd5e 	bl	8006d3a <lsm6dsr_write_reg>
 800727e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007280:	693b      	ldr	r3, [r7, #16]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop

0800728c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	2301      	movs	r3, #1
 800729e:	2112      	movs	r1, #18
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fd32 	bl	8006d0a <lsm6dsr_read_reg>
 80072a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10f      	bne.n	80072ce <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	7a3b      	ldrb	r3, [r7, #8]
 80072b8:	f362 1386 	bfi	r3, r2, #6, #1
 80072bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80072be:	f107 0208 	add.w	r2, r7, #8
 80072c2:	2301      	movs	r3, #1
 80072c4:	2112      	movs	r1, #18
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fd37 	bl	8006d3a <lsm6dsr_write_reg>
 80072cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072ce:	68fb      	ldr	r3, [r7, #12]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80072e2:	f107 0208 	add.w	r2, r7, #8
 80072e6:	2301      	movs	r3, #1
 80072e8:	211e      	movs	r1, #30
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd0d 	bl	8006d0a <lsm6dsr_read_reg>
 80072f0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80072f2:	7a3b      	ldrb	r3, [r7, #8]
 80072f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	701a      	strb	r2, [r3, #0]

  return ret;
 8007300:	68fb      	ldr	r3, [r7, #12]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	2301      	movs	r3, #1
 800731a:	211e      	movs	r1, #30
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff fcf4 	bl	8006d0a <lsm6dsr_read_reg>
 8007322:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007324:	7a3b      	ldrb	r3, [r7, #8]
 8007326:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	701a      	strb	r2, [r3, #0]

  return ret;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007346:	f107 0208 	add.w	r2, r7, #8
 800734a:	2301      	movs	r3, #1
 800734c:	211e      	movs	r1, #30
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff fcdb 	bl	8006d0a <lsm6dsr_read_reg>
 8007354:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007356:	7a3b      	ldrb	r3, [r7, #8]
 8007358:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	701a      	strb	r2, [r3, #0]

  return ret;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007378:	f107 0208 	add.w	r2, r7, #8
 800737c:	2302      	movs	r3, #2
 800737e:	2120      	movs	r1, #32
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fcc2 	bl	8006d0a <lsm6dsr_read_reg>
 8007386:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007388:	7a7b      	ldrb	r3, [r7, #9]
 800738a:	b21a      	sxth	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007396:	b29b      	uxth	r3, r3
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	b29a      	uxth	r2, r3
 800739c:	7a3b      	ldrb	r3, [r7, #8]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80073aa:	68fb      	ldr	r3, [r7, #12]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80073be:	f107 020c 	add.w	r2, r7, #12
 80073c2:	2306      	movs	r3, #6
 80073c4:	2122      	movs	r1, #34	; 0x22
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff fc9f 	bl	8006d0a <lsm6dsr_read_reg>
 80073cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	b21a      	sxth	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	7b3b      	ldrb	r3, [r7, #12]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4413      	add	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80073f0:	7bfa      	ldrb	r2, [r7, #15]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	3302      	adds	r3, #2
 80073f6:	b212      	sxth	r2, r2
 80073f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	3302      	adds	r3, #2
 80073fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007402:	b29b      	uxth	r3, r3
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b29a      	uxth	r2, r3
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	b29b      	uxth	r3, r3
 800740c:	4413      	add	r3, r2
 800740e:	b29a      	uxth	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3302      	adds	r3, #2
 8007414:	b212      	sxth	r2, r2
 8007416:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007418:	7c7a      	ldrb	r2, [r7, #17]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	3304      	adds	r3, #4
 800741e:	b212      	sxth	r2, r2
 8007420:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	3304      	adds	r3, #4
 8007426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742a:	b29b      	uxth	r3, r3
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	b29a      	uxth	r2, r3
 8007430:	7c3b      	ldrb	r3, [r7, #16]
 8007432:	b29b      	uxth	r3, r3
 8007434:	4413      	add	r3, r2
 8007436:	b29a      	uxth	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	3304      	adds	r3, #4
 800743c:	b212      	sxth	r2, r2
 800743e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007440:	697b      	ldr	r3, [r7, #20]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b086      	sub	sp, #24
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007454:	f107 020c 	add.w	r2, r7, #12
 8007458:	2306      	movs	r3, #6
 800745a:	2128      	movs	r1, #40	; 0x28
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fc54 	bl	8006d0a <lsm6dsr_read_reg>
 8007462:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007464:	7b7b      	ldrb	r3, [r7, #13]
 8007466:	b21a      	sxth	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007472:	b29b      	uxth	r3, r3
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	b29a      	uxth	r2, r3
 8007478:	7b3b      	ldrb	r3, [r7, #12]
 800747a:	b29b      	uxth	r3, r3
 800747c:	4413      	add	r3, r2
 800747e:	b29b      	uxth	r3, r3
 8007480:	b21a      	sxth	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	3302      	adds	r3, #2
 800748c:	b212      	sxth	r2, r2
 800748e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	3302      	adds	r3, #2
 8007494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007498:	b29b      	uxth	r3, r3
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	b29a      	uxth	r2, r3
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	3302      	adds	r3, #2
 80074aa:	b212      	sxth	r2, r2
 80074ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80074ae:	7c7a      	ldrb	r2, [r7, #17]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	3304      	adds	r3, #4
 80074b4:	b212      	sxth	r2, r2
 80074b6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	3304      	adds	r3, #4
 80074bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	7c3b      	ldrb	r3, [r7, #16]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	3304      	adds	r3, #4
 80074d2:	b212      	sxth	r2, r2
 80074d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80074d6:	697b      	ldr	r3, [r7, #20]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80074ec:	f107 0208 	add.w	r2, r7, #8
 80074f0:	2301      	movs	r3, #1
 80074f2:	2101      	movs	r1, #1
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fc08 	bl	8006d0a <lsm6dsr_read_reg>
 80074fa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10f      	bne.n	8007522 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	b2da      	uxtb	r2, r3
 800750a:	7a3b      	ldrb	r3, [r7, #8]
 800750c:	f362 1387 	bfi	r3, r2, #6, #2
 8007510:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007512:	f107 0208 	add.w	r2, r7, #8
 8007516:	2301      	movs	r3, #1
 8007518:	2101      	movs	r1, #1
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fc0d 	bl	8006d3a <lsm6dsr_write_reg>
 8007520:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007536:	2301      	movs	r3, #1
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	210f      	movs	r1, #15
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fbe4 	bl	8006d0a <lsm6dsr_read_reg>
 8007542:	60f8      	str	r0, [r7, #12]

  return ret;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800755a:	f107 0208 	add.w	r2, r7, #8
 800755e:	2301      	movs	r3, #1
 8007560:	2112      	movs	r1, #18
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fbd1 	bl	8006d0a <lsm6dsr_read_reg>
 8007568:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10f      	bne.n	8007590 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	b2da      	uxtb	r2, r3
 8007578:	7a3b      	ldrb	r3, [r7, #8]
 800757a:	f362 0300 	bfi	r3, r2, #0, #1
 800757e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007580:	f107 0208 	add.w	r2, r7, #8
 8007584:	2301      	movs	r3, #1
 8007586:	2112      	movs	r1, #18
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fbd6 	bl	8006d3a <lsm6dsr_write_reg>
 800758e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80075a4:	f107 0208 	add.w	r2, r7, #8
 80075a8:	2301      	movs	r3, #1
 80075aa:	2112      	movs	r1, #18
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff fbac 	bl	8006d0a <lsm6dsr_read_reg>
 80075b2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80075b4:	7a3b      	ldrb	r3, [r7, #8]
 80075b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	701a      	strb	r2, [r3, #0]

  return ret;
 80075c2:	68fb      	ldr	r3, [r7, #12]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80075d6:	2102      	movs	r1, #2
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ff81 	bl	80074e0 <lsm6dsr_mem_bank_set>
 80075de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80075e6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80075e8:	2301      	movs	r3, #1
 80075ea:	2146      	movs	r1, #70	; 0x46
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fb8c 	bl	8006d0a <lsm6dsr_read_reg>
 80075f2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80075fe:	2301      	movs	r3, #1
 8007600:	2147      	movs	r1, #71	; 0x47
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fb81 	bl	8006d0a <lsm6dsr_read_reg>
 8007608:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff ff64 	bl	80074e0 <lsm6dsr_mem_bank_set>
 8007618:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800761a:	68fb      	ldr	r3, [r7, #12]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800762e:	2102      	movs	r1, #2
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff ff55 	bl	80074e0 <lsm6dsr_mem_bank_set>
 8007636:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800763e:	f107 0208 	add.w	r2, r7, #8
 8007642:	2301      	movs	r3, #1
 8007644:	215f      	movs	r1, #95	; 0x5f
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff fb5f 	bl	8006d0a <lsm6dsr_read_reg>
 800764c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007654:	2100      	movs	r1, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff ff42 	bl	80074e0 <lsm6dsr_mem_bank_set>
 800765c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800765e:	7a3b      	ldrb	r3, [r7, #8]
 8007660:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b03      	cmp	r3, #3
 8007668:	d81a      	bhi.n	80076a0 <lsm6dsr_fsm_data_rate_get+0x7c>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007681 	.word	0x08007681
 8007674:	08007689 	.word	0x08007689
 8007678:	08007691 	.word	0x08007691
 800767c:	08007699 	.word	0x08007699
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e00f      	b.n	80076a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	e00b      	b.n	80076a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2202      	movs	r2, #2
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e007      	b.n	80076a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2203      	movs	r2, #3
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e003      	b.n	80076a8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
      break;
 80076a6:	bf00      	nop
  }

  return ret;
 80076a8:	68fb      	ldr	r3, [r7, #12]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	2208      	movs	r2, #8
 80076c2:	4905      	ldr	r1, [pc, #20]	; (80076d8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80076c4:	4805      	ldr	r0, [pc, #20]	; (80076dc <HAL_RTC_AlarmAEventCallback+0x28>)
 80076c6:	f006 fd14 	bl	800e0f2 <HAL_UART_Transmit>
	flagA = 1;
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	08020e98 	.word	0x08020e98
 80076dc:	20006de0 	.word	0x20006de0
 80076e0:	200006a8 	.word	0x200006a8

080076e4 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 80076e4:	b084      	sub	sp, #16
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	f107 0014 	add.w	r0, r7, #20
 80076f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 80076f6:	4a0f      	ldr	r2, [pc, #60]	; (8007734 <MRT_SetupRTOS+0x50>)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <MRT_SetupRTOS+0x54>)
 80076fe:	4618      	mov	r0, r3
 8007700:	f107 0314 	add.w	r3, r7, #20
 8007704:	2244      	movs	r2, #68	; 0x44
 8007706:	4619      	mov	r1, r3
 8007708:	f012 fe70 	bl	801a3ec <memcpy>
	rtos.sleepTime = sleepT;
 800770c:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <MRT_SetupRTOS+0x54>)
 800770e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007712:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8007716:	f04f 33ff 	mov.w	r3, #4294967295
 800771a:	2211      	movs	r2, #17
 800771c:	4907      	ldr	r1, [pc, #28]	; (800773c <MRT_SetupRTOS+0x58>)
 800771e:	4806      	ldr	r0, [pc, #24]	; (8007738 <MRT_SetupRTOS+0x54>)
 8007720:	f006 fce7 	bl	800e0f2 <HAL_UART_Transmit>
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772e:	b004      	add	sp, #16
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20006e28 	.word	0x20006e28
 8007738:	20006de0 	.word	0x20006de0
 800773c:	08020eb0 	.word	0x08020eb0

08007740 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8007746:	4b15      	ldr	r3, [pc, #84]	; (800779c <MRT_WUProcedure+0x5c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d11e      	bne.n	8007790 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <MRT_WUProcedure+0x60>)
 8007754:	2201      	movs	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8007758:	4b10      	ldr	r3, [pc, #64]	; (800779c <MRT_WUProcedure+0x5c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a0f      	ldr	r2, [pc, #60]	; (800779c <MRT_WUProcedure+0x5c>)
 800775e:	f043 0308 	orr.w	r3, r3, #8
 8007762:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <MRT_WUProcedure+0x64>)
 8007766:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f8 fd41 	bl	80001f0 <strlen>
 800776e:	4603      	mov	r3, r0
 8007770:	b29a      	uxth	r2, r3
 8007772:	f04f 33ff 	mov.w	r3, #4294967295
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	480b      	ldr	r0, [pc, #44]	; (80077a8 <MRT_WUProcedure+0x68>)
 800777a:	f006 fcba 	bl	800e0f2 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800777e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007782:	f003 fc75 	bl	800b070 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <MRT_WUProcedure+0x6c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f005 f86e 	bl	800c86c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8007790:	f000 f80e 	bl	80077b0 <MRT_ClearFlags>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40007000 	.word	0x40007000
 80077a0:	200006a9 	.word	0x200006a9
 80077a4:	08020ec4 	.word	0x08020ec4
 80077a8:	20006de0 	.word	0x20006de0
 80077ac:	20006e28 	.word	0x20006e28

080077b0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295
 80077b8:	2214      	movs	r2, #20
 80077ba:	4939      	ldr	r1, [pc, #228]	; (80078a0 <MRT_ClearFlags+0xf0>)
 80077bc:	4839      	ldr	r0, [pc, #228]	; (80078a4 <MRT_ClearFlags+0xf4>)
 80077be:	f006 fc98 	bl	800e0f2 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 80077c2:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <MRT_ClearFlags+0xf8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	22ca      	movs	r2, #202	; 0xca
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <MRT_ClearFlags+0xf8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2253      	movs	r2, #83	; 0x53
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80077d6:	e011      	b.n	80077fc <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	2217      	movs	r2, #23
 80077de:	4933      	ldr	r1, [pc, #204]	; (80078ac <MRT_ClearFlags+0xfc>)
 80077e0:	4830      	ldr	r0, [pc, #192]	; (80078a4 <MRT_ClearFlags+0xf4>)
 80077e2:	f006 fc86 	bl	800e0f2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 80077e6:	4b30      	ldr	r3, [pc, #192]	; (80078a8 <MRT_ClearFlags+0xf8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	4b2d      	ldr	r3, [pc, #180]	; (80078a8 <MRT_ClearFlags+0xf8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80077fa:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <MRT_ClearFlags+0xf8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 800780c:	4b26      	ldr	r3, [pc, #152]	; (80078a8 <MRT_ClearFlags+0xf8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	22ff      	movs	r2, #255	; 0xff
 8007814:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007816:	4b26      	ldr	r3, [pc, #152]	; (80078b0 <MRT_ClearFlags+0x100>)
 8007818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800781c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 800781e:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <MRT_ClearFlags+0xf8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	22ca      	movs	r2, #202	; 0xca
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
 8007828:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <MRT_ClearFlags+0xf8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2253      	movs	r2, #83	; 0x53
 8007830:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007832:	e011      	b.n	8007858 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8007834:	f04f 33ff 	mov.w	r3, #4294967295
 8007838:	2217      	movs	r2, #23
 800783a:	491e      	ldr	r1, [pc, #120]	; (80078b4 <MRT_ClearFlags+0x104>)
 800783c:	4819      	ldr	r0, [pc, #100]	; (80078a4 <MRT_ClearFlags+0xf4>)
 800783e:	f006 fc58 	bl	800e0f2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8007842:	4b19      	ldr	r3, [pc, #100]	; (80078a8 <MRT_ClearFlags+0xf8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	b2da      	uxtb	r2, r3
 800784c:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <MRT_ClearFlags+0xf8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007856:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007858:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <MRT_ClearFlags+0xf8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e5      	bne.n	8007834 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <MRT_ClearFlags+0xf8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	22ff      	movs	r2, #255	; 0xff
 8007870:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <MRT_ClearFlags+0x100>)
 8007874:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007878:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800787a:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <MRT_ClearFlags+0x108>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a0e      	ldr	r2, [pc, #56]	; (80078b8 <MRT_ClearFlags+0x108>)
 8007880:	f043 0304 	orr.w	r3, r3, #4
 8007884:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <MRT_ClearFlags+0xf8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	b2da      	uxtb	r2, r3
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <MRT_ClearFlags+0xf8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800789a:	60da      	str	r2, [r3, #12]
}
 800789c:	bf00      	nop
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08020ee4 	.word	0x08020ee4
 80078a4:	20006de0 	.word	0x20006de0
 80078a8:	20006e28 	.word	0x20006e28
 80078ac:	08020efc 	.word	0x08020efc
 80078b0:	40013c00 	.word	0x40013c00
 80078b4:	08020f14 	.word	0x08020f14
 80078b8:	40007000 	.word	0x40007000

080078bc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b0a4      	sub	sp, #144	; 0x90
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
 80078c8:	220f      	movs	r2, #15
 80078ca:	491c      	ldr	r1, [pc, #112]	; (800793c <MRT_StandByMode+0x80>)
 80078cc:	481c      	ldr	r0, [pc, #112]	; (8007940 <MRT_StandByMode+0x84>)
 80078ce:	f006 fc10 	bl	800e0f2 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80078d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078d6:	f003 fbb9 	bl	800b04c <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 80078da:	f7ff ff69 	bl	80077b0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	2211      	movs	r2, #17
 80078e4:	4917      	ldr	r1, [pc, #92]	; (8007944 <MRT_StandByMode+0x88>)
 80078e6:	4816      	ldr	r0, [pc, #88]	; (8007940 <MRT_StandByMode+0x84>)
 80078e8:	f006 fc03 	bl	800e0f2 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4915      	ldr	r1, [pc, #84]	; (8007948 <MRT_StandByMode+0x8c>)
 80078f4:	4618      	mov	r0, r3
 80078f6:	f013 fe1f 	bl	801b538 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	4618      	mov	r0, r3
 8007900:	f7f8 fc76 	bl	80001f0 <strlen>
 8007904:	4603      	mov	r3, r0
 8007906:	b29a      	uxth	r2, r3
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	480b      	ldr	r0, [pc, #44]	; (8007940 <MRT_StandByMode+0x84>)
 8007912:	f006 fbee 	bl	800e0f2 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8007916:	4b0d      	ldr	r3, [pc, #52]	; (800794c <MRT_StandByMode+0x90>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2204      	movs	r2, #4
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4618      	mov	r0, r3
 8007920:	f004 fee4 	bl	800c6ec <HAL_RTCEx_SetWakeUpTimer_IT>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 800792a:	f7fa fe9f 	bl	800266c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 800792e:	f003 fbb3 	bl	800b098 <HAL_PWR_EnterSTANDBYMode>
}
 8007932:	bf00      	nop
 8007934:	3790      	adds	r7, #144	; 0x90
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	08020f2c 	.word	0x08020f2c
 8007940:	20006de0 	.word	0x20006de0
 8007944:	08020f3c 	.word	0x08020f3c
 8007948:	08020f50 	.word	0x08020f50
 800794c:	20006e28 	.word	0x20006e28

08007950 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	71fb      	strb	r3, [r7, #7]
 800795a:	460b      	mov	r3, r1
 800795c:	71bb      	strb	r3, [r7, #6]
 800795e:	4613      	mov	r3, r2
 8007960:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <MRT_setAlarmA+0x84>)
 8007966:	5cd2      	ldrb	r2, [r2, r3]
 8007968:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <MRT_setAlarmA+0x88>)
 800796a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 800796c:	79bb      	ldrb	r3, [r7, #6]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <MRT_setAlarmA+0x84>)
 8007970:	5cd2      	ldrb	r2, [r2, r3]
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <MRT_setAlarmA+0x88>)
 8007974:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8007976:	797b      	ldrb	r3, [r7, #5]
 8007978:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <MRT_setAlarmA+0x84>)
 800797a:	5cd2      	ldrb	r2, [r2, r3]
 800797c:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <MRT_setAlarmA+0x88>)
 800797e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007980:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <MRT_setAlarmA+0x88>)
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <MRT_setAlarmA+0x88>)
 8007988:	2200      	movs	r2, #0
 800798a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800798c:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <MRT_setAlarmA+0x88>)
 800798e:	2200      	movs	r2, #0
 8007990:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <MRT_setAlarmA+0x88>)
 8007994:	2200      	movs	r2, #0
 8007996:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <MRT_setAlarmA+0x88>)
 800799a:	2200      	movs	r2, #0
 800799c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800799e:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <MRT_setAlarmA+0x88>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <MRT_setAlarmA+0x88>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <MRT_setAlarmA+0x88>)
 80079ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80079b4:	4b09      	ldr	r3, [pc, #36]	; (80079dc <MRT_setAlarmA+0x8c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2201      	movs	r2, #1
 80079ba:	4907      	ldr	r1, [pc, #28]	; (80079d8 <MRT_setAlarmA+0x88>)
 80079bc:	4618      	mov	r0, r3
 80079be:	f004 fc87 	bl	800c2d0 <HAL_RTC_SetAlarm_IT>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 80079c8:	f7fa fe50 	bl	800266c <Error_Handler>
	  }
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	2000001c 	.word	0x2000001c
 80079d8:	20000680 	.word	0x20000680
 80079dc:	20006e28 	.word	0x20006e28

080079e0 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	71fb      	strb	r3, [r7, #7]
 80079ea:	460b      	mov	r3, r1
 80079ec:	71bb      	strb	r3, [r7, #6]
 80079ee:	4613      	mov	r3, r2
 80079f0:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <MRT_setRTC+0x84>)
 80079f6:	5cd3      	ldrb	r3, [r2, r3]
 80079f8:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 80079fa:	79bb      	ldrb	r3, [r7, #6]
 80079fc:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <MRT_setRTC+0x84>)
 80079fe:	5cd3      	ldrb	r3, [r2, r3]
 8007a00:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8007a02:	797b      	ldrb	r3, [r7, #5]
 8007a04:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <MRT_setRTC+0x84>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <MRT_setRTC+0x88>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f107 010c 	add.w	r1, r7, #12
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f004 fa46 	bl	800beae <HAL_RTC_SetTime>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8007a28:	f7fa fe20 	bl	800266c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <MRT_setRTC+0x8c>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <MRT_setRTC+0x8c>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <MRT_setRTC+0x8c>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <MRT_setRTC+0x8c>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007a44:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <MRT_setRTC+0x88>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4908      	ldr	r1, [pc, #32]	; (8007a6c <MRT_setRTC+0x8c>)
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f004 fb49 	bl	800c0e4 <HAL_RTC_SetDate>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8007a58:	f7fa fe08 	bl	800266c <Error_Handler>
	  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	2000001c 	.word	0x2000001c
 8007a68:	20006e28 	.word	0x20006e28
 8007a6c:	2000067c 	.word	0x2000067c

08007a70 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a80:	483f      	ldr	r0, [pc, #252]	; (8007b80 <Max31855_Read_Temp+0x110>)
 8007a82:	f001 f86b 	bl	8008b5c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	493d      	ldr	r1, [pc, #244]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007a8e:	483e      	ldr	r0, [pc, #248]	; (8007b88 <Max31855_Read_Temp+0x118>)
 8007a90:	f005 f913 	bl	800ccba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007a94:	2201      	movs	r2, #1
 8007a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a9a:	4839      	ldr	r0, [pc, #228]	; (8007b80 <Max31855_Read_Temp+0x110>)
 8007a9c:	f001 f85e 	bl	8008b5c <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8007aa0:	4b38      	ldr	r3, [pc, #224]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007aa2:	78db      	ldrb	r3, [r3, #3]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b37      	ldr	r3, [pc, #220]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007aa8:	789b      	ldrb	r3, [r3, #2]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	431a      	orrs	r2, r3
 8007aae:	4b35      	ldr	r3, [pc, #212]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	041b      	lsls	r3, r3, #16
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	4b33      	ldr	r3, [pc, #204]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	4313      	orrs	r3, r2
 8007abe:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <Max31855_Read_Temp+0x11c>)
 8007acc:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8007ace:	4b2d      	ldr	r3, [pc, #180]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	09db      	lsrs	r3, r3, #7
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4b2d      	ldr	r3, [pc, #180]	; (8007b90 <Max31855_Read_Temp+0x120>)
 8007ada:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8007adc:	4b29      	ldr	r3, [pc, #164]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007ade:	78db      	ldrb	r3, [r3, #3]
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8007ae8:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007aea:	78db      	ldrb	r3, [r3, #3]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	425b      	negs	r3, r3
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007afa:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <Max31855_Read_Temp+0x124>)
 8007afc:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8007b00:	e039      	b.n	8007b76 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <Max31855_Read_Temp+0x120>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d120      	bne.n	8007b4c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	019b      	lsls	r3, r3, #6
 8007b10:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007b12:	7852      	ldrb	r2, [r2, #1]
 8007b14:	0892      	lsrs	r2, r2, #2
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b22:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007b2a:	f083 031f 	eor.w	r3, r3, #31
 8007b2e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	425b      	negs	r3, r3
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b3c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <Max31855_Read_Temp+0x124>)
 8007b46:	edc3 7a00 	vstr	s15, [r3]
}
 8007b4a:	e014      	b.n	8007b76 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <Max31855_Read_Temp+0x114>)
 8007b54:	7852      	ldrb	r2, [r2, #1]
 8007b56:	0892      	lsrs	r2, r2, #2
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b68:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b70:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <Max31855_Read_Temp+0x124>)
 8007b72:	edc3 7a00 	vstr	s15, [r3]
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40021000 	.word	0x40021000
 8007b84:	20006e2c 	.word	0x20006e2c
 8007b88:	200068c4 	.word	0x200068c4
 8007b8c:	200006aa 	.word	0x200006aa
 8007b90:	200006ac 	.word	0x200006ac
 8007b94:	20006a00 	.word	0x20006a00

08007b98 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8007b98:	b40f      	push	{r0, r1, r2, r3}
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <myprintf+0x40>)
 8007bb0:	f014 fcde 	bl	801c570 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8007bb4:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <myprintf+0x40>)
 8007bb6:	f7f8 fb1b 	bl	80001f0 <strlen>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc2:	4905      	ldr	r1, [pc, #20]	; (8007bd8 <myprintf+0x40>)
 8007bc4:	4805      	ldr	r0, [pc, #20]	; (8007bdc <myprintf+0x44>)
 8007bc6:	f006 fa94 	bl	800e0f2 <HAL_UART_Transmit>

}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr
 8007bd8:	200006b0 	.word	0x200006b0
 8007bdc:	20005ec4 	.word	0x20005ec4

08007be0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08a      	sub	sp, #40	; 0x28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8007bec:	2201      	movs	r2, #1
 8007bee:	4932      	ldr	r1, [pc, #200]	; (8007cb8 <sd_init_dynamic_filename+0xd8>)
 8007bf0:	4832      	ldr	r0, [pc, #200]	; (8007cbc <sd_init_dynamic_filename+0xdc>)
 8007bf2:	f00c f9cb 	bl	8013f8c <f_mount>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d008      	beq.n	8007c16 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c08:	4619      	mov	r1, r3
 8007c0a:	482d      	ldr	r0, [pc, #180]	; (8007cc0 <sd_init_dynamic_filename+0xe0>)
 8007c0c:	f7ff ffc4 	bl	8007b98 <myprintf>
		return fres;
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	e04b      	b.n	8007cae <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8007c1a:	f107 0320 	add.w	r3, r7, #32
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	4825      	ldr	r0, [pc, #148]	; (8007cb8 <sd_init_dynamic_filename+0xd8>)
 8007c24:	f000 f884 	bl	8007d30 <scan_files>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	4923      	ldr	r1, [pc, #140]	; (8007cc4 <sd_init_dynamic_filename+0xe4>)
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f013 fc7d 	bl	801b538 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f013 fd08 	bl	801b65a <strcpy>
 8007c4a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8007c4c:	f107 0310 	add.w	r3, r7, #16
 8007c50:	221a      	movs	r2, #26
 8007c52:	4619      	mov	r1, r3
 8007c54:	481c      	ldr	r0, [pc, #112]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c56:	f00c f9fd 	bl	8014054 <f_open>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8007c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11a      	bne.n	8007c9e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8007c68:	4818      	ldr	r0, [pc, #96]	; (8007ccc <sd_init_dynamic_filename+0xec>)
 8007c6a:	f7ff ff95 	bl	8007b98 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4814      	ldr	r0, [pc, #80]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c76:	f00c fe0e 	bl	8014896 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8007c7a:	4915      	ldr	r1, [pc, #84]	; (8007cd0 <sd_init_dynamic_filename+0xf0>)
 8007c7c:	4815      	ldr	r0, [pc, #84]	; (8007cd4 <sd_init_dynamic_filename+0xf4>)
 8007c7e:	f013 fc5b 	bl	801b538 <siprintf>
	sd_write(&fil, msg_buffer);
 8007c82:	4914      	ldr	r1, [pc, #80]	; (8007cd4 <sd_init_dynamic_filename+0xf4>)
 8007c84:	4810      	ldr	r0, [pc, #64]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c86:	f000 f829 	bl	8007cdc <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	480e      	ldr	r0, [pc, #56]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c8e:	f000 f825 	bl	8007cdc <sd_write>
	f_close(&fil);
 8007c92:	480d      	ldr	r0, [pc, #52]	; (8007cc8 <sd_init_dynamic_filename+0xe8>)
 8007c94:	f00c fdd0 	bl	8014838 <f_close>

	return fres;
 8007c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c9c:	e007      	b.n	8007cae <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8007c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	480c      	ldr	r0, [pc, #48]	; (8007cd8 <sd_init_dynamic_filename+0xf8>)
 8007ca6:	f7ff ff77 	bl	8007b98 <myprintf>
		return fres;
 8007caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08020f70 	.word	0x08020f70
 8007cbc:	20006070 	.word	0x20006070
 8007cc0:	08020f74 	.word	0x08020f74
 8007cc4:	08020ff0 	.word	0x08020ff0
 8007cc8:	20006a74 	.word	0x20006a74
 8007ccc:	08020f8c 	.word	0x08020f8c
 8007cd0:	08020fd0 	.word	0x08020fd0
 8007cd4:	20006e30 	.word	0x20006e30
 8007cd8:	08020fbc 	.word	0x08020fbc

08007cdc <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8007ce6:	6838      	ldr	r0, [r7, #0]
 8007ce8:	f7f8 fa82 	bl	80001f0 <strlen>
 8007cec:	4602      	mov	r2, r0
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f00c fb72 	bl	80143de <f_write>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4619      	mov	r1, r3
 8007d08:	4807      	ldr	r0, [pc, #28]	; (8007d28 <sd_write+0x4c>)
 8007d0a:	f7ff ff45 	bl	8007b98 <myprintf>
		return bytesWrote;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	e004      	b.n	8007d1e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <sd_write+0x50>)
 8007d16:	f7ff ff3f 	bl	8007b98 <myprintf>
		return -1;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08020ffc 	.word	0x08020ffc
 8007d2c:	08021020 	.word	0x08021020

08007d30 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d32:	b099      	sub	sp, #100	; 0x64
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	466b      	mov	r3, sp
 8007d3e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f7f8 fa55 	bl	80001f0 <strlen>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8007d4c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8007d50:	4623      	mov	r3, r4
 8007d52:	3b01      	subs	r3, #1
 8007d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d56:	b2e0      	uxtb	r0, r4
 8007d58:	f04f 0100 	mov.w	r1, #0
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	00cb      	lsls	r3, r1, #3
 8007d66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007d6a:	00c2      	lsls	r2, r0, #3
 8007d6c:	b2e0      	uxtb	r0, r4
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	00cb      	lsls	r3, r1, #3
 8007d7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007d80:	00c2      	lsls	r2, r0, #3
 8007d82:	4623      	mov	r3, r4
 8007d84:	3307      	adds	r3, #7
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8007d8e:	466b      	mov	r3, sp
 8007d90:	3300      	adds	r3, #0
 8007d92:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8007d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d96:	4619      	mov	r1, r3
 8007d98:	68b8      	ldr	r0, [r7, #8]
 8007d9a:	f000 f8ff 	bl	8007f9c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8007da8:	f107 0318 	add.w	r3, r7, #24
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f00c ffc4 	bl	8014d3c <f_opendir>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8007dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d16c      	bne.n	8007e9c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4939      	ldr	r1, [pc, #228]	; (8007eac <scan_files+0x17c>)
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f00d f85b 	bl	8014e84 <f_readdir>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8007dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d15a      	bne.n	8007e92 <scan_files+0x162>
 8007ddc:	4b33      	ldr	r3, [pc, #204]	; (8007eac <scan_files+0x17c>)
 8007dde:	7a5b      	ldrb	r3, [r3, #9]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d056      	beq.n	8007e92 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8007de4:	4b31      	ldr	r3, [pc, #196]	; (8007eac <scan_files+0x17c>)
 8007de6:	7a1b      	ldrb	r3, [r3, #8]
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d14e      	bne.n	8007e8e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8007df0:	466b      	mov	r3, sp
 8007df2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8007df4:	482e      	ldr	r0, [pc, #184]	; (8007eb0 <scan_files+0x180>)
 8007df6:	f7f8 f9fb 	bl	80001f0 <strlen>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	653b      	str	r3, [r7, #80]	; 0x50
 8007e02:	4620      	mov	r0, r4
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	00cb      	lsls	r3, r1, #3
 8007e12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007e16:	00c2      	lsls	r2, r0, #3
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	00cb      	lsls	r3, r1, #3
 8007e28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007e2c:	00c2      	lsls	r2, r0, #3
 8007e2e:	1de3      	adds	r3, r4, #7
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	ebad 0d03 	sub.w	sp, sp, r3
 8007e38:	466b      	mov	r3, sp
 8007e3a:	3300      	adds	r3, #0
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	4619      	mov	r1, r3
 8007e42:	481b      	ldr	r0, [pc, #108]	; (8007eb0 <scan_files+0x180>)
 8007e44:	f000 f8aa 	bl	8007f9c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8007e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4817      	ldr	r0, [pc, #92]	; (8007eb0 <scan_files+0x180>)
 8007e52:	f013 fc0a 	bl	801b66a <strncmp>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8007e5c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d112      	bne.n	8007e8a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8007e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e66:	f107 0214 	add.w	r2, r7, #20
 8007e6a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f820 	bl	8007eb4 <extract_filename_suffix>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d202      	bcs.n	8007e8a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	46b5      	mov	sp, r6
 8007e8c:	e799      	b.n	8007dc2 <scan_files+0x92>
            	continue; // don't enter directory
 8007e8e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8007e90:	e797      	b.n	8007dc2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f00c ffc9 	bl	8014e2e <f_closedir>
    }

    return res;
 8007e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ea0:	46ad      	mov	sp, r5
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3764      	adds	r7, #100	; 0x64
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	200007b0 	.word	0x200007b0
 8007eb0:	200007b9 	.word	0x200007b9

08007eb4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8007eb4:	b5b0      	push	{r4, r5, r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	72fb      	strb	r3, [r7, #11]
 8007ec2:	466b      	mov	r3, sp
 8007ec4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7f8 f992 	bl	80001f0 <strlen>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8007ed4:	7f7c      	ldrb	r4, [r7, #29]
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	b2e0      	uxtb	r0, r4
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	00cb      	lsls	r3, r1, #3
 8007eec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007ef0:	00c2      	lsls	r2, r0, #3
 8007ef2:	b2e0      	uxtb	r0, r4
 8007ef4:	f04f 0100 	mov.w	r1, #0
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	00cb      	lsls	r3, r1, #3
 8007f02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007f06:	00c2      	lsls	r2, r0, #3
 8007f08:	4623      	mov	r3, r4
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	08db      	lsrs	r3, r3, #3
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	ebad 0d03 	sub.w	sp, sp, r3
 8007f14:	466b      	mov	r3, sp
 8007f16:	3300      	adds	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e014      	b.n	8007f4a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	1e5a      	subs	r2, r3, #1
 8007f24:	7ffb      	ldrb	r3, [r7, #31]
 8007f26:	441a      	add	r2, r3
 8007f28:	7fbb      	ldrb	r3, [r7, #30]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	da11      	bge.n	8007f54 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8007f30:	7afa      	ldrb	r2, [r7, #11]
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
 8007f34:	4413      	add	r3, r2
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	441a      	add	r2, r3
 8007f3c:	7ffb      	ldrb	r3, [r7, #31]
 8007f3e:	7811      	ldrb	r1, [r2, #0]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8007f44:	7ffb      	ldrb	r3, [r7, #31]
 8007f46:	3301      	adds	r3, #1
 8007f48:	77fb      	strb	r3, [r7, #31]
 8007f4a:	7ffa      	ldrb	r2, [r7, #31]
 8007f4c:	7f7b      	ldrb	r3, [r7, #29]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d3e6      	bcc.n	8007f20 <extract_filename_suffix+0x6c>
 8007f52:	e000      	b.n	8007f56 <extract_filename_suffix+0xa2>
		}
		else break;
 8007f54:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f107 0110 	add.w	r1, r7, #16
 8007f5c:	220a      	movs	r2, #10
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f014 fa48 	bl	801c3f4 <strtol>
 8007f64:	4603      	mov	r3, r0
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d00a      	beq.n	8007f8a <extract_filename_suffix+0xd6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f7c:	d005      	beq.n	8007f8a <extract_filename_suffix+0xd6>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d101      	bne.n	8007f8e <extract_filename_suffix+0xda>
	{
		return 1;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <extract_filename_suffix+0xdc>
	}

	return 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	46ad      	mov	sp, r5
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f9c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
 8007faa:	e019      	b.n	8007fe0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	73bb      	strb	r3, [r7, #14]
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	4a0f      	ldr	r2, [pc, #60]	; (8007ff8 <str2upper+0x5c>)
 8007fbc:	4413      	add	r3, r2
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d102      	bne.n	8007fce <str2upper+0x32>
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	3b20      	subs	r3, #32
 8007fcc:	e000      	b.n	8007fd0 <str2upper+0x34>
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	7bfa      	ldrb	r2, [r7, #15]
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	7bfc      	ldrb	r4, [r7, #15]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7f8 f904 	bl	80001f0 <strlen>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	429c      	cmp	r4, r3
 8007fec:	d3de      	bcc.n	8007fac <str2upper+0x10>
	}
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}
 8007ff8:	08021318 	.word	0x08021318

08007ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008000:	4b0e      	ldr	r3, [pc, #56]	; (800803c <HAL_Init+0x40>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0d      	ldr	r2, [pc, #52]	; (800803c <HAL_Init+0x40>)
 8008006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800800a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <HAL_Init+0x40>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0a      	ldr	r2, [pc, #40]	; (800803c <HAL_Init+0x40>)
 8008012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008018:	4b08      	ldr	r3, [pc, #32]	; (800803c <HAL_Init+0x40>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a07      	ldr	r2, [pc, #28]	; (800803c <HAL_Init+0x40>)
 800801e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008024:	2003      	movs	r0, #3
 8008026:	f000 fb92 	bl	800874e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800802a:	2000      	movs	r0, #0
 800802c:	f7fa fe60 	bl	8002cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008030:	f7fa fb24 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40023c00 	.word	0x40023c00

08008040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <HAL_IncTick+0x20>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <HAL_IncTick+0x24>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4413      	add	r3, r2
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <HAL_IncTick+0x24>)
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	2000005c 	.word	0x2000005c
 8008064:	20007218 	.word	0x20007218

08008068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
  return uwTick;
 800806c:	4b03      	ldr	r3, [pc, #12]	; (800807c <HAL_GetTick+0x14>)
 800806e:	681b      	ldr	r3, [r3, #0]
}
 8008070:	4618      	mov	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	20007218 	.word	0x20007218

08008080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008088:	f7ff ffee 	bl	8008068 <HAL_GetTick>
 800808c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d005      	beq.n	80080a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800809a:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <HAL_Delay+0x44>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80080a6:	bf00      	nop
 80080a8:	f7ff ffde 	bl	8008068 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d8f7      	bhi.n	80080a8 <HAL_Delay+0x28>
  {
  }
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000005c 	.word	0x2000005c

080080c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e033      	b.n	8008146 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d109      	bne.n	80080fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa faf4 	bl	80026d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	f003 0310 	and.w	r3, r3, #16
 8008102:	2b00      	cmp	r3, #0
 8008104:	d118      	bne.n	8008138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800810e:	f023 0302 	bic.w	r3, r3, #2
 8008112:	f043 0202 	orr.w	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f94a 	bl	80083b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	f043 0201 	orr.w	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	641a      	str	r2, [r3, #64]	; 0x40
 8008136:	e001      	b.n	800813c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_ADC_ConfigChannel+0x1c>
 8008168:	2302      	movs	r3, #2
 800816a:	e113      	b.n	8008394 <HAL_ADC_ConfigChannel+0x244>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b09      	cmp	r3, #9
 800817a:	d925      	bls.n	80081c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68d9      	ldr	r1, [r3, #12]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	4613      	mov	r3, r2
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4413      	add	r3, r2
 8008190:	3b1e      	subs	r3, #30
 8008192:	2207      	movs	r2, #7
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	43da      	mvns	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	400a      	ands	r2, r1
 80081a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68d9      	ldr	r1, [r3, #12]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4618      	mov	r0, r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4403      	add	r3, r0
 80081ba:	3b1e      	subs	r3, #30
 80081bc:	409a      	lsls	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	e022      	b.n	800820e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6919      	ldr	r1, [r3, #16]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	4613      	mov	r3, r2
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	4413      	add	r3, r2
 80081dc:	2207      	movs	r2, #7
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	43da      	mvns	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	400a      	ands	r2, r1
 80081ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6919      	ldr	r1, [r3, #16]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4618      	mov	r0, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4403      	add	r3, r0
 8008204:	409a      	lsls	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b06      	cmp	r3, #6
 8008214:	d824      	bhi.n	8008260 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	3b05      	subs	r3, #5
 8008228:	221f      	movs	r2, #31
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	43da      	mvns	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	400a      	ands	r2, r1
 8008236:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	4618      	mov	r0, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	3b05      	subs	r3, #5
 8008252:	fa00 f203 	lsl.w	r2, r0, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	635a      	str	r2, [r3, #52]	; 0x34
 800825e:	e04c      	b.n	80082fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b0c      	cmp	r3, #12
 8008266:	d824      	bhi.n	80082b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	3b23      	subs	r3, #35	; 0x23
 800827a:	221f      	movs	r2, #31
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	43da      	mvns	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	400a      	ands	r2, r1
 8008288:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	4618      	mov	r0, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	3b23      	subs	r3, #35	; 0x23
 80082a4:	fa00 f203 	lsl.w	r2, r0, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
 80082b0:	e023      	b.n	80082fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	3b41      	subs	r3, #65	; 0x41
 80082c4:	221f      	movs	r2, #31
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	43da      	mvns	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	400a      	ands	r2, r1
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	4618      	mov	r0, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	3b41      	subs	r3, #65	; 0x41
 80082ee:	fa00 f203 	lsl.w	r2, r0, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80082fa:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <HAL_ADC_ConfigChannel+0x250>)
 80082fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <HAL_ADC_ConfigChannel+0x254>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d10f      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x1d8>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b12      	cmp	r3, #18
 800830e:	d10b      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <HAL_ADC_ConfigChannel+0x254>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d12b      	bne.n	800838a <HAL_ADC_ConfigChannel+0x23a>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1c      	ldr	r2, [pc, #112]	; (80083a8 <HAL_ADC_ConfigChannel+0x258>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <HAL_ADC_ConfigChannel+0x1f4>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b11      	cmp	r3, #17
 8008342:	d122      	bne.n	800838a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <HAL_ADC_ConfigChannel+0x258>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d111      	bne.n	800838a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <HAL_ADC_ConfigChannel+0x25c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <HAL_ADC_ConfigChannel+0x260>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	0c9a      	lsrs	r2, r3, #18
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800837c:	e002      	b.n	8008384 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f9      	bne.n	800837e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40012300 	.word	0x40012300
 80083a4:	40012000 	.word	0x40012000
 80083a8:	10000012 	.word	0x10000012
 80083ac:	20000000 	.word	0x20000000
 80083b0:	431bde83 	.word	0x431bde83

080083b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083bc:	4b79      	ldr	r3, [pc, #484]	; (80085a4 <ADC_Init+0x1f0>)
 80083be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6859      	ldr	r1, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	021a      	lsls	r2, r3, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800840c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800842e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6899      	ldr	r1, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	4a58      	ldr	r2, [pc, #352]	; (80085a8 <ADC_Init+0x1f4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d022      	beq.n	8008492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800845a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6899      	ldr	r1, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800847c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6899      	ldr	r1, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	609a      	str	r2, [r3, #8]
 8008490:	e00f      	b.n	80084b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80084b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0202 	bic.w	r2, r2, #2
 80084c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6899      	ldr	r1, [r3, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7e1b      	ldrb	r3, [r3, #24]
 80084cc:	005a      	lsls	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01b      	beq.n	8008518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80084fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6859      	ldr	r1, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	3b01      	subs	r3, #1
 800850c:	035a      	lsls	r2, r3, #13
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	e007      	b.n	8008528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	3b01      	subs	r3, #1
 8008544:	051a      	lsls	r2, r3, #20
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800855c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6899      	ldr	r1, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800856a:	025a      	lsls	r2, r3, #9
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6899      	ldr	r1, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	029a      	lsls	r2, r3, #10
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40012300 	.word	0x40012300
 80085a8:	0f000001 	.word	0x0f000001

080085ac <__NVIC_SetPriorityGrouping>:
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085bc:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <__NVIC_SetPriorityGrouping+0x44>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085c8:	4013      	ands	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085de:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <__NVIC_SetPriorityGrouping+0x44>)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	60d3      	str	r3, [r2, #12]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	e000ed00 	.word	0xe000ed00

080085f4 <__NVIC_GetPriorityGrouping>:
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <__NVIC_GetPriorityGrouping+0x18>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	f003 0307 	and.w	r3, r3, #7
}
 8008602:	4618      	mov	r0, r3
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <__NVIC_EnableIRQ>:
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800861a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861e:	2b00      	cmp	r3, #0
 8008620:	db0b      	blt.n	800863a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f003 021f 	and.w	r2, r3, #31
 8008628:	4907      	ldr	r1, [pc, #28]	; (8008648 <__NVIC_EnableIRQ+0x38>)
 800862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	2001      	movs	r0, #1
 8008632:	fa00 f202 	lsl.w	r2, r0, r2
 8008636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	e000e100 	.word	0xe000e100

0800864c <__NVIC_DisableIRQ>:
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	2b00      	cmp	r3, #0
 800865c:	db12      	blt.n	8008684 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	f003 021f 	and.w	r2, r3, #31
 8008664:	490a      	ldr	r1, [pc, #40]	; (8008690 <__NVIC_DisableIRQ+0x44>)
 8008666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2001      	movs	r0, #1
 800866e:	fa00 f202 	lsl.w	r2, r0, r2
 8008672:	3320      	adds	r3, #32
 8008674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008678:	f3bf 8f4f 	dsb	sy
}
 800867c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800867e:	f3bf 8f6f 	isb	sy
}
 8008682:	bf00      	nop
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	e000e100 	.word	0xe000e100

08008694 <__NVIC_SetPriority>:
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	db0a      	blt.n	80086be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	490c      	ldr	r1, [pc, #48]	; (80086e0 <__NVIC_SetPriority+0x4c>)
 80086ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086b2:	0112      	lsls	r2, r2, #4
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	440b      	add	r3, r1
 80086b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086bc:	e00a      	b.n	80086d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	4908      	ldr	r1, [pc, #32]	; (80086e4 <__NVIC_SetPriority+0x50>)
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	3b04      	subs	r3, #4
 80086cc:	0112      	lsls	r2, r2, #4
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	440b      	add	r3, r1
 80086d2:	761a      	strb	r2, [r3, #24]
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	e000e100 	.word	0xe000e100
 80086e4:	e000ed00 	.word	0xe000ed00

080086e8 <NVIC_EncodePriority>:
{
 80086e8:	b480      	push	{r7}
 80086ea:	b089      	sub	sp, #36	; 0x24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	f1c3 0307 	rsb	r3, r3, #7
 8008702:	2b04      	cmp	r3, #4
 8008704:	bf28      	it	cs
 8008706:	2304      	movcs	r3, #4
 8008708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	3304      	adds	r3, #4
 800870e:	2b06      	cmp	r3, #6
 8008710:	d902      	bls.n	8008718 <NVIC_EncodePriority+0x30>
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	3b03      	subs	r3, #3
 8008716:	e000      	b.n	800871a <NVIC_EncodePriority+0x32>
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800871c:	f04f 32ff 	mov.w	r2, #4294967295
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	43da      	mvns	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	401a      	ands	r2, r3
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008730:	f04f 31ff 	mov.w	r1, #4294967295
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	43d9      	mvns	r1, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008740:	4313      	orrs	r3, r2
}
 8008742:	4618      	mov	r0, r3
 8008744:	3724      	adds	r7, #36	; 0x24
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff ff28 	bl	80085ac <__NVIC_SetPriorityGrouping>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008776:	f7ff ff3d 	bl	80085f4 <__NVIC_GetPriorityGrouping>
 800877a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	6978      	ldr	r0, [r7, #20]
 8008782:	f7ff ffb1 	bl	80086e8 <NVIC_EncodePriority>
 8008786:	4602      	mov	r2, r0
 8008788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff ff80 	bl	8008694 <__NVIC_SetPriority>
}
 8008794:	bf00      	nop
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80087a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff ff30 	bl	8008610 <__NVIC_EnableIRQ>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff ff40 	bl	800864c <__NVIC_DisableIRQ>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b089      	sub	sp, #36	; 0x24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80087de:	2300      	movs	r3, #0
 80087e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	e177      	b.n	8008ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087f0:	2201      	movs	r2, #1
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4013      	ands	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	429a      	cmp	r2, r3
 800880a:	f040 8166 	bne.w	8008ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d005      	beq.n	8008826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008822:	2b02      	cmp	r3, #2
 8008824:	d130      	bne.n	8008888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	2203      	movs	r2, #3
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	43db      	mvns	r3, r3
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	4013      	ands	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	4313      	orrs	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800885c:	2201      	movs	r2, #1
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	43db      	mvns	r3, r3
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	4013      	ands	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	091b      	lsrs	r3, r3, #4
 8008872:	f003 0201 	and.w	r2, r3, #1
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	fa02 f303 	lsl.w	r3, r2, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4313      	orrs	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	2b03      	cmp	r3, #3
 8008892:	d017      	beq.n	80088c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	2203      	movs	r2, #3
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	43db      	mvns	r3, r3
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4013      	ands	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d123      	bne.n	8008918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	08da      	lsrs	r2, r3, #3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3208      	adds	r2, #8
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	220f      	movs	r2, #15
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	43db      	mvns	r3, r3
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	4013      	ands	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4313      	orrs	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	08da      	lsrs	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3208      	adds	r2, #8
 8008912:	69b9      	ldr	r1, [r7, #24]
 8008914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	2203      	movs	r2, #3
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	4013      	ands	r3, r2
 800892e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 0203 	and.w	r2, r3, #3
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	4313      	orrs	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80c0 	beq.w	8008ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <HAL_GPIO_Init+0x324>)
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	4a65      	ldr	r2, [pc, #404]	; (8008af8 <HAL_GPIO_Init+0x324>)
 8008964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008968:	6453      	str	r3, [r2, #68]	; 0x44
 800896a:	4b63      	ldr	r3, [pc, #396]	; (8008af8 <HAL_GPIO_Init+0x324>)
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008976:	4a61      	ldr	r2, [pc, #388]	; (8008afc <HAL_GPIO_Init+0x328>)
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	089b      	lsrs	r3, r3, #2
 800897c:	3302      	adds	r3, #2
 800897e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	220f      	movs	r2, #15
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	43db      	mvns	r3, r3
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	4013      	ands	r3, r2
 8008998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a58      	ldr	r2, [pc, #352]	; (8008b00 <HAL_GPIO_Init+0x32c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d037      	beq.n	8008a12 <HAL_GPIO_Init+0x23e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a57      	ldr	r2, [pc, #348]	; (8008b04 <HAL_GPIO_Init+0x330>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d031      	beq.n	8008a0e <HAL_GPIO_Init+0x23a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a56      	ldr	r2, [pc, #344]	; (8008b08 <HAL_GPIO_Init+0x334>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d02b      	beq.n	8008a0a <HAL_GPIO_Init+0x236>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a55      	ldr	r2, [pc, #340]	; (8008b0c <HAL_GPIO_Init+0x338>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d025      	beq.n	8008a06 <HAL_GPIO_Init+0x232>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a54      	ldr	r2, [pc, #336]	; (8008b10 <HAL_GPIO_Init+0x33c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d01f      	beq.n	8008a02 <HAL_GPIO_Init+0x22e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a53      	ldr	r2, [pc, #332]	; (8008b14 <HAL_GPIO_Init+0x340>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d019      	beq.n	80089fe <HAL_GPIO_Init+0x22a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a52      	ldr	r2, [pc, #328]	; (8008b18 <HAL_GPIO_Init+0x344>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_GPIO_Init+0x226>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a51      	ldr	r2, [pc, #324]	; (8008b1c <HAL_GPIO_Init+0x348>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00d      	beq.n	80089f6 <HAL_GPIO_Init+0x222>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a50      	ldr	r2, [pc, #320]	; (8008b20 <HAL_GPIO_Init+0x34c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <HAL_GPIO_Init+0x21e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a4f      	ldr	r2, [pc, #316]	; (8008b24 <HAL_GPIO_Init+0x350>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <HAL_GPIO_Init+0x21a>
 80089ea:	2309      	movs	r3, #9
 80089ec:	e012      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 80089ee:	230a      	movs	r3, #10
 80089f0:	e010      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 80089f2:	2308      	movs	r3, #8
 80089f4:	e00e      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 80089f6:	2307      	movs	r3, #7
 80089f8:	e00c      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 80089fa:	2306      	movs	r3, #6
 80089fc:	e00a      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 80089fe:	2305      	movs	r3, #5
 8008a00:	e008      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 8008a02:	2304      	movs	r3, #4
 8008a04:	e006      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 8008a06:	2303      	movs	r3, #3
 8008a08:	e004      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e002      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <HAL_GPIO_Init+0x240>
 8008a12:	2300      	movs	r3, #0
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	f002 0203 	and.w	r2, r2, #3
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	4093      	lsls	r3, r2
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a24:	4935      	ldr	r1, [pc, #212]	; (8008afc <HAL_GPIO_Init+0x328>)
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	089b      	lsrs	r3, r3, #2
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a32:	4b3d      	ldr	r3, [pc, #244]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a56:	4a34      	ldr	r2, [pc, #208]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a5c:	4b32      	ldr	r3, [pc, #200]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	43db      	mvns	r3, r3
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a80:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a86:	4b28      	ldr	r3, [pc, #160]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4013      	ands	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aaa:	4a1f      	ldr	r2, [pc, #124]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4013      	ands	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ad4:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <HAL_GPIO_Init+0x354>)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	3301      	adds	r3, #1
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	f67f ae84 	bls.w	80087f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3724      	adds	r7, #36	; 0x24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40023800 	.word	0x40023800
 8008afc:	40013800 	.word	0x40013800
 8008b00:	40020000 	.word	0x40020000
 8008b04:	40020400 	.word	0x40020400
 8008b08:	40020800 	.word	0x40020800
 8008b0c:	40020c00 	.word	0x40020c00
 8008b10:	40021000 	.word	0x40021000
 8008b14:	40021400 	.word	0x40021400
 8008b18:	40021800 	.word	0x40021800
 8008b1c:	40021c00 	.word	0x40021c00
 8008b20:	40022000 	.word	0x40022000
 8008b24:	40022400 	.word	0x40022400
 8008b28:	40013c00 	.word	0x40013c00

08008b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	887b      	ldrh	r3, [r7, #2]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e001      	b.n	8008b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b6c:	787b      	ldrb	r3, [r7, #1]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b72:	887a      	ldrh	r2, [r7, #2]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b78:	e003      	b.n	8008b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b7a:	887b      	ldrh	r3, [r7, #2]
 8008b7c:	041a      	lsls	r2, r3, #16
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	619a      	str	r2, [r3, #24]
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008b9a:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d006      	beq.n	8008bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ba6:	4a05      	ldr	r2, [pc, #20]	; (8008bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bac:	88fb      	ldrh	r3, [r7, #6]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fa fcfe 	bl	80035b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40013c00 	.word	0x40013c00

08008bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e12b      	b.n	8008e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7f9 fdb8 	bl	800275c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2224      	movs	r2, #36	; 0x24
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0201 	bic.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c24:	f002 fe9a 	bl	800b95c <HAL_RCC_GetPCLK1Freq>
 8008c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4a81      	ldr	r2, [pc, #516]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d807      	bhi.n	8008c44 <HAL_I2C_Init+0x84>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4a80      	ldr	r2, [pc, #512]	; (8008e38 <HAL_I2C_Init+0x278>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bf94      	ite	ls
 8008c3c:	2301      	movls	r3, #1
 8008c3e:	2300      	movhi	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e006      	b.n	8008c52 <HAL_I2C_Init+0x92>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a7d      	ldr	r2, [pc, #500]	; (8008e3c <HAL_I2C_Init+0x27c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bf94      	ite	ls
 8008c4c:	2301      	movls	r3, #1
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e0e7      	b.n	8008e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a78      	ldr	r2, [pc, #480]	; (8008e40 <HAL_I2C_Init+0x280>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	0c9b      	lsrs	r3, r3, #18
 8008c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a6a      	ldr	r2, [pc, #424]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d802      	bhi.n	8008c94 <HAL_I2C_Init+0xd4>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	e009      	b.n	8008ca8 <HAL_I2C_Init+0xe8>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	4a69      	ldr	r2, [pc, #420]	; (8008e44 <HAL_I2C_Init+0x284>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	099b      	lsrs	r3, r3, #6
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	430b      	orrs	r3, r1
 8008cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	495c      	ldr	r1, [pc, #368]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	d819      	bhi.n	8008cfc <HAL_I2C_Init+0x13c>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1e59      	subs	r1, r3, #1
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cd6:	1c59      	adds	r1, r3, #1
 8008cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008cdc:	400b      	ands	r3, r1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <HAL_I2C_Init+0x138>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1e59      	subs	r1, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf6:	e051      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	e04f      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d111      	bne.n	8008d28 <HAL_I2C_Init+0x168>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	1e58      	subs	r0, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6859      	ldr	r1, [r3, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	440b      	add	r3, r1
 8008d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d16:	3301      	adds	r3, #1
 8008d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e012      	b.n	8008d4e <HAL_I2C_Init+0x18e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	1e58      	subs	r0, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6859      	ldr	r1, [r3, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	0099      	lsls	r1, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d3e:	3301      	adds	r3, #1
 8008d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_I2C_Init+0x196>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e022      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10e      	bne.n	8008d7c <HAL_I2C_Init+0x1bc>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1e58      	subs	r0, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	440b      	add	r3, r1
 8008d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d70:	3301      	adds	r3, #1
 8008d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7a:	e00f      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1e58      	subs	r0, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6859      	ldr	r1, [r3, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	0099      	lsls	r1, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d92:	3301      	adds	r3, #1
 8008d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	6809      	ldr	r1, [r1, #0]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6911      	ldr	r1, [r2, #16]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68d2      	ldr	r2, [r2, #12]
 8008dd6:	4311      	orrs	r1, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695a      	ldr	r2, [r3, #20]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	000186a0 	.word	0x000186a0
 8008e38:	001e847f 	.word	0x001e847f
 8008e3c:	003d08ff 	.word	0x003d08ff
 8008e40:	431bde83 	.word	0x431bde83
 8008e44:	10624dd3 	.word	0x10624dd3

08008e48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	461a      	mov	r2, r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	817b      	strh	r3, [r7, #10]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	813b      	strh	r3, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e62:	f7ff f901 	bl	8008068 <HAL_GetTick>
 8008e66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	f040 80d9 	bne.w	8009028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	2319      	movs	r3, #25
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	496d      	ldr	r1, [pc, #436]	; (8009034 <HAL_I2C_Mem_Write+0x1ec>)
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fcb5 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e0cc      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_I2C_Mem_Write+0x56>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e0c5      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d007      	beq.n	8008ec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2221      	movs	r2, #33	; 0x21
 8008ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2240      	movs	r2, #64	; 0x40
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a3a      	ldr	r2, [r7, #32]
 8008eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a4d      	ldr	r2, [pc, #308]	; (8009038 <HAL_I2C_Mem_Write+0x1f0>)
 8008f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f06:	88f8      	ldrh	r0, [r7, #6]
 8008f08:	893a      	ldrh	r2, [r7, #8]
 8008f0a:	8979      	ldrh	r1, [r7, #10]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4603      	mov	r3, r0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 faec 	bl	80094f4 <I2C_RequestMemoryWrite>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d052      	beq.n	8008fc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e081      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fd36 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00d      	beq.n	8008f52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d107      	bne.n	8008f4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e06b      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d11b      	bne.n	8008fc8 <HAL_I2C_Mem_Write+0x180>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d017      	beq.n	8008fc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1aa      	bne.n	8008f26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fd22 	bl	8009a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d107      	bne.n	8008ff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e016      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800900a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	e000      	b.n	800902a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009028:	2302      	movs	r3, #2
  }
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	00100002 	.word	0x00100002
 8009038:	ffff0000 	.word	0xffff0000

0800903c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08c      	sub	sp, #48	; 0x30
 8009040:	af02      	add	r7, sp, #8
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	4603      	mov	r3, r0
 800904c:	817b      	strh	r3, [r7, #10]
 800904e:	460b      	mov	r3, r1
 8009050:	813b      	strh	r3, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009056:	f7ff f807 	bl	8008068 <HAL_GetTick>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b20      	cmp	r3, #32
 8009066:	f040 8208 	bne.w	800947a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	2319      	movs	r3, #25
 8009070:	2201      	movs	r2, #1
 8009072:	497b      	ldr	r1, [pc, #492]	; (8009260 <HAL_I2C_Mem_Read+0x224>)
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fbbb 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009080:	2302      	movs	r3, #2
 8009082:	e1fb      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <HAL_I2C_Mem_Read+0x56>
 800908e:	2302      	movs	r3, #2
 8009090:	e1f4      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d007      	beq.n	80090b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2222      	movs	r2, #34	; 0x22
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2240      	movs	r2, #64	; 0x40
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80090e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a5b      	ldr	r2, [pc, #364]	; (8009264 <HAL_I2C_Mem_Read+0x228>)
 80090f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090fa:	88f8      	ldrh	r0, [r7, #6]
 80090fc:	893a      	ldrh	r2, [r7, #8]
 80090fe:	8979      	ldrh	r1, [r7, #10]
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	4603      	mov	r3, r0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fa88 	bl	8009620 <I2C_RequestMemoryRead>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e1b0      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d113      	bne.n	800914a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009122:	2300      	movs	r3, #0
 8009124:	623b      	str	r3, [r7, #32]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	623b      	str	r3, [r7, #32]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	623b      	str	r3, [r7, #32]
 8009136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e184      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800914e:	2b01      	cmp	r3, #1
 8009150:	d11b      	bne.n	800918a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e164      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918e:	2b02      	cmp	r3, #2
 8009190:	d11b      	bne.n	80091ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091b2:	2300      	movs	r3, #0
 80091b4:	61bb      	str	r3, [r7, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	61bb      	str	r3, [r7, #24]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	e144      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80091e0:	e138      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	f200 80f1 	bhi.w	80093ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d123      	bne.n	800923c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fc51 	bl	8009aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e139      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009224:	3b01      	subs	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800923a:	e10b      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009240:	2b02      	cmp	r3, #2
 8009242:	d14e      	bne.n	80092e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	2200      	movs	r2, #0
 800924c:	4906      	ldr	r1, [pc, #24]	; (8009268 <HAL_I2C_Mem_Read+0x22c>)
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 face 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e10e      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
 800925e:	bf00      	nop
 8009260:	00100002 	.word	0x00100002
 8009264:	ffff0000 	.word	0xffff0000
 8009268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092e0:	e0b8      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	2200      	movs	r2, #0
 80092ea:	4966      	ldr	r1, [pc, #408]	; (8009484 <HAL_I2C_Mem_Read+0x448>)
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fa7f 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0bf      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691a      	ldr	r2, [r3, #16]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2200      	movs	r2, #0
 8009346:	494f      	ldr	r1, [pc, #316]	; (8009484 <HAL_I2C_Mem_Read+0x448>)
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fa51 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e091      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093cc:	e042      	b.n	8009454 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fb64 	bl	8009aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e04c      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	b2d2      	uxtb	r2, r2
 80093ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b04      	cmp	r3, #4
 8009420:	d118      	bne.n	8009454 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	b2d2      	uxtb	r2, r2
 800942e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f aec2 	bne.w	80091e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	e000      	b.n	800947c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800947a:	2302      	movs	r3, #2
  }
}
 800947c:	4618      	mov	r0, r3
 800947e:	3728      	adds	r7, #40	; 0x28
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	00010004 	.word	0x00010004

08009488 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b20      	cmp	r3, #32
 800949a:	d124      	bne.n	80094e6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2228      	movs	r2, #40	; 0x28
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d007      	beq.n	80094c2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094d0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80094e0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e000      	b.n	80094e8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80094e6:	2302      	movs	r3, #2
  }
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	4608      	mov	r0, r1
 80094fe:	4611      	mov	r1, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4603      	mov	r3, r0
 8009504:	817b      	strh	r3, [r7, #10]
 8009506:	460b      	mov	r3, r1
 8009508:	813b      	strh	r3, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800951c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	2200      	movs	r2, #0
 8009526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f960 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00d      	beq.n	8009552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009544:	d103      	bne.n	800954e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e05f      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009552:	897b      	ldrh	r3, [r7, #10]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	492d      	ldr	r1, [pc, #180]	; (800961c <I2C_RequestMemoryWrite+0x128>)
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 f998 	bl	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e04c      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800958e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009590:	6a39      	ldr	r1, [r7, #32]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fa02 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d107      	bne.n	80095b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e02b      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d105      	bne.n	80095cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c0:	893b      	ldrh	r3, [r7, #8]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	611a      	str	r2, [r3, #16]
 80095ca:	e021      	b.n	8009610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095cc:	893b      	ldrh	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095dc:	6a39      	ldr	r1, [r7, #32]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f9dc 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d107      	bne.n	8009602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e005      	b.n	8009612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009606:	893b      	ldrh	r3, [r7, #8]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	00010002 	.word	0x00010002

08009620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	4603      	mov	r3, r0
 8009630:	817b      	strh	r3, [r7, #10]
 8009632:	460b      	mov	r3, r1
 8009634:	813b      	strh	r3, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	2200      	movs	r2, #0
 8009662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f8c2 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009680:	d103      	bne.n	800968a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e0aa      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800968e:	897b      	ldrh	r3, [r7, #10]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800969c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	4952      	ldr	r1, [pc, #328]	; (80097ec <I2C_RequestMemoryRead+0x1cc>)
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 f8fa 	bl	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e097      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096cc:	6a39      	ldr	r1, [r7, #32]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f964 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d107      	bne.n	80096f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e076      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d105      	bne.n	8009708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096fc:	893b      	ldrh	r3, [r7, #8]
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	611a      	str	r2, [r3, #16]
 8009706:	e021      	b.n	800974c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009708:	893b      	ldrh	r3, [r7, #8]
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	b29b      	uxth	r3, r3
 800970e:	b2da      	uxtb	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009718:	6a39      	ldr	r1, [r7, #32]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f93e 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00d      	beq.n	8009742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	2b04      	cmp	r3, #4
 800972c:	d107      	bne.n	800973e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e050      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009742:	893b      	ldrh	r3, [r7, #8]
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	6a39      	ldr	r1, [r7, #32]
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f923 	bl	800999c <I2C_WaitOnTXEFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	2b04      	cmp	r3, #4
 8009762:	d107      	bne.n	8009774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e035      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	2200      	movs	r2, #0
 8009790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f82b 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00d      	beq.n	80097bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ae:	d103      	bne.n	80097b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e013      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097bc:	897b      	ldrh	r3, [r7, #10]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	6a3a      	ldr	r2, [r7, #32]
 80097d0:	4906      	ldr	r1, [pc, #24]	; (80097ec <I2C_RequestMemoryRead+0x1cc>)
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f863 	bl	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	00010002 	.word	0x00010002

080097f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009800:	e025      	b.n	800984e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009808:	d021      	beq.n	800984e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800980a:	f7fe fc2d 	bl	8008068 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d302      	bcc.n	8009820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d116      	bne.n	800984e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2220      	movs	r2, #32
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	f043 0220 	orr.w	r2, r3, #32
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e023      	b.n	8009896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	0c1b      	lsrs	r3, r3, #16
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d10d      	bne.n	8009874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	43da      	mvns	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4013      	ands	r3, r2
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf0c      	ite	eq
 800986a:	2301      	moveq	r3, #1
 800986c:	2300      	movne	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	e00c      	b.n	800988e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	43da      	mvns	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4013      	ands	r3, r2
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf0c      	ite	eq
 8009886:	2301      	moveq	r3, #1
 8009888:	2300      	movne	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	461a      	mov	r2, r3
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	429a      	cmp	r2, r3
 8009892:	d0b6      	beq.n	8009802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098ac:	e051      	b.n	8009952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098bc:	d123      	bne.n	8009906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	f043 0204 	orr.w	r2, r3, #4
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e046      	b.n	8009994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d021      	beq.n	8009952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7fe fbab 	bl	8008068 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d116      	bne.n	8009952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f043 0220 	orr.w	r2, r3, #32
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e020      	b.n	8009994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	0c1b      	lsrs	r3, r3, #16
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b01      	cmp	r3, #1
 800995a:	d10c      	bne.n	8009976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	43da      	mvns	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4013      	ands	r3, r2
 8009968:	b29b      	uxth	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	bf14      	ite	ne
 800996e:	2301      	movne	r3, #1
 8009970:	2300      	moveq	r3, #0
 8009972:	b2db      	uxtb	r3, r3
 8009974:	e00b      	b.n	800998e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	43da      	mvns	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4013      	ands	r3, r2
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	bf14      	ite	ne
 8009988:	2301      	movne	r3, #1
 800998a:	2300      	moveq	r3, #0
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d18d      	bne.n	80098ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099a8:	e02d      	b.n	8009a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f8ce 	bl	8009b4c <I2C_IsAcknowledgeFailed>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e02d      	b.n	8009a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d021      	beq.n	8009a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c2:	f7fe fb51 	bl	8008068 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d116      	bne.n	8009a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e007      	b.n	8009a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a10:	2b80      	cmp	r3, #128	; 0x80
 8009a12:	d1ca      	bne.n	80099aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a2a:	e02d      	b.n	8009a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f88d 	bl	8009b4c <I2C_IsAcknowledgeFailed>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e02d      	b.n	8009a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a42:	d021      	beq.n	8009a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a44:	f7fe fb10 	bl	8008068 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d116      	bne.n	8009a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	f043 0220 	orr.w	r2, r3, #32
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e007      	b.n	8009a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d1ca      	bne.n	8009a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009aac:	e042      	b.n	8009b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2b10      	cmp	r3, #16
 8009aba:	d119      	bne.n	8009af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0210 	mvn.w	r2, #16
 8009ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e029      	b.n	8009b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af0:	f7fe faba 	bl	8008068 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d302      	bcc.n	8009b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d116      	bne.n	8009b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	f043 0220 	orr.w	r2, r3, #32
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e007      	b.n	8009b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3e:	2b40      	cmp	r3, #64	; 0x40
 8009b40:	d1b5      	bne.n	8009aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b62:	d11b      	bne.n	8009b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	f043 0204 	orr.w	r2, r3, #4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d129      	bne.n	8009c14 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	; 0x24
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0210 	bic.w	r2, r2, #16
 8009be6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0201 	orr.w	r2, r2, #1
 8009c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e000      	b.n	8009c16 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009c14:	2302      	movs	r3, #2
  }
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b085      	sub	sp, #20
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d12a      	bne.n	8009c92 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2224      	movs	r2, #36	; 0x24
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
 8009c5e:	f023 030f 	bic.w	r3, r3, #15
 8009c62:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	89fa      	ldrh	r2, [r7, #14]
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0201 	orr.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e000      	b.n	8009c94 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009c92:	2302      	movs	r3, #2
  }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e034      	b.n	8009d1c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009cba:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f245 5255 	movw	r2, #21845	; 0x5555
 8009cc4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6852      	ldr	r2, [r2, #4]
 8009cce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	6892      	ldr	r2, [r2, #8]
 8009cd8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009cda:	f7fe f9c5 	bl	8008068 <HAL_GetTick>
 8009cde:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009ce0:	e00f      	b.n	8009d02 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009ce2:	f7fe f9c1 	bl	8008068 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b31      	cmp	r3, #49	; 0x31
 8009cee:	d908      	bls.n	8009d02 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e00c      	b.n	8009d1c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e8      	bne.n	8009ce2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009d34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d46:	b08f      	sub	sp, #60	; 0x3c
 8009d48:	af0a      	add	r7, sp, #40	; 0x28
 8009d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e10f      	b.n	8009f76 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f00e ff03 	bl	8018b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2203      	movs	r2, #3
 8009d7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f004 fe2c 	bl	800e9f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	687e      	ldr	r6, [r7, #4]
 8009da2:	466d      	mov	r5, sp
 8009da4:	f106 0410 	add.w	r4, r6, #16
 8009da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009db8:	1d33      	adds	r3, r6, #4
 8009dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dbc:	6838      	ldr	r0, [r7, #0]
 8009dbe:	f004 fd03 	bl	800e7c8 <USB_CoreInit>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0d0      	b.n	8009f76 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f004 fe1a 	bl	800ea14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
 8009de4:	e04a      	b.n	8009e7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009de6:	7bfa      	ldrb	r2, [r7, #15]
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4613      	mov	r3, r2
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	1a9b      	subs	r3, r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	440b      	add	r3, r1
 8009df4:	333d      	adds	r3, #61	; 0x3d
 8009df6:	2201      	movs	r2, #1
 8009df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009dfa:	7bfa      	ldrb	r2, [r7, #15]
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	440b      	add	r3, r1
 8009e08:	333c      	adds	r3, #60	; 0x3c
 8009e0a:	7bfa      	ldrb	r2, [r7, #15]
 8009e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e0e:	7bfa      	ldrb	r2, [r7, #15]
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	b298      	uxth	r0, r3
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	3342      	adds	r3, #66	; 0x42
 8009e22:	4602      	mov	r2, r0
 8009e24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e26:	7bfa      	ldrb	r2, [r7, #15]
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	00db      	lsls	r3, r3, #3
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	333f      	adds	r3, #63	; 0x3f
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e3a:	7bfa      	ldrb	r2, [r7, #15]
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	3344      	adds	r3, #68	; 0x44
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e4e:	7bfa      	ldrb	r2, [r7, #15]
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	4613      	mov	r3, r2
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3348      	adds	r3, #72	; 0x48
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e62:	7bfa      	ldrb	r2, [r7, #15]
 8009e64:	6879      	ldr	r1, [r7, #4]
 8009e66:	4613      	mov	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	1a9b      	subs	r3, r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	440b      	add	r3, r1
 8009e70:	3350      	adds	r3, #80	; 0x50
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
 8009e7c:	7bfa      	ldrb	r2, [r7, #15]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d3af      	bcc.n	8009de6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
 8009e8a:	e044      	b.n	8009f16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009e8c:	7bfa      	ldrb	r2, [r7, #15]
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	4613      	mov	r3, r2
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	1a9b      	subs	r3, r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009eb8:	7bfa      	ldrb	r2, [r7, #15]
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ece:	7bfa      	ldrb	r2, [r7, #15]
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	00db      	lsls	r3, r3, #3
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009ee4:	7bfa      	ldrb	r2, [r7, #15]
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009efa:	7bfa      	ldrb	r2, [r7, #15]
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	4613      	mov	r3, r2
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	440b      	add	r3, r1
 8009f08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	3301      	adds	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]
 8009f16:	7bfa      	ldrb	r2, [r7, #15]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d3b5      	bcc.n	8009e8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	603b      	str	r3, [r7, #0]
 8009f26:	687e      	ldr	r6, [r7, #4]
 8009f28:	466d      	mov	r5, sp
 8009f2a:	f106 0410 	add.w	r4, r6, #16
 8009f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009f3e:	1d33      	adds	r3, r6, #4
 8009f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f42:	6838      	ldr	r0, [r7, #0]
 8009f44:	f004 fdb2 	bl	800eaac <USB_DevInit>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e00d      	b.n	8009f76 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f005 fe2e 	bl	800fbd0 <USB_DevDisconnect>

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d101      	bne.n	8009f9a <HAL_PCD_Start+0x1c>
 8009f96:	2302      	movs	r3, #2
 8009f98:	e020      	b.n	8009fdc <HAL_PCD_Start+0x5e>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d109      	bne.n	8009fbe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d005      	beq.n	8009fbe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f004 fd04 	bl	800e9d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f005 fdde 	bl	800fb8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b08d      	sub	sp, #52	; 0x34
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f005 fe9c 	bl	800fd38 <USB_GetMode>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	f040 839d 	bne.w	800a742 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f005 fe00 	bl	800fc12 <USB_ReadInterrupts>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 8393 	beq.w	800a740 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f005 fdf7 	bl	800fc12 <USB_ReadInterrupts>
 800a024:	4603      	mov	r3, r0
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d107      	bne.n	800a03e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695a      	ldr	r2, [r3, #20]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f002 0202 	and.w	r2, r2, #2
 800a03c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f005 fde5 	bl	800fc12 <USB_ReadInterrupts>
 800a048:	4603      	mov	r3, r0
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d161      	bne.n	800a116 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	699a      	ldr	r2, [r3, #24]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0210 	bic.w	r2, r2, #16
 800a060:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	f003 020f 	and.w	r2, r3, #15
 800a06e:	4613      	mov	r3, r2
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	1a9b      	subs	r3, r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	3304      	adds	r3, #4
 800a080:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	0c5b      	lsrs	r3, r3, #17
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d124      	bne.n	800a0d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a094:	4013      	ands	r3, r2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d035      	beq.n	800a106 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a0a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	6a38      	ldr	r0, [r7, #32]
 800a0ae:	f005 fc1c 	bl	800f8ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	091b      	lsrs	r3, r3, #4
 800a0ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0be:	441a      	add	r2, r3
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	699a      	ldr	r2, [r3, #24]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	091b      	lsrs	r3, r3, #4
 800a0cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0d0:	441a      	add	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	619a      	str	r2, [r3, #24]
 800a0d6:	e016      	b.n	800a106 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	0c5b      	lsrs	r3, r3, #17
 800a0dc:	f003 030f 	and.w	r3, r3, #15
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d110      	bne.n	800a106 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6a38      	ldr	r0, [r7, #32]
 800a0f0:	f005 fbfb 	bl	800f8ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	699a      	ldr	r2, [r3, #24]
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	091b      	lsrs	r3, r3, #4
 800a0fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a100:	441a      	add	r2, r3
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f042 0210 	orr.w	r2, r2, #16
 800a114:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f005 fd79 	bl	800fc12 <USB_ReadInterrupts>
 800a120:	4603      	mov	r3, r0
 800a122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a126:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a12a:	d16e      	bne.n	800a20a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4618      	mov	r0, r3
 800a136:	f005 fd7f 	bl	800fc38 <USB_ReadDevAllOutEpInterrupt>
 800a13a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a13c:	e062      	b.n	800a204 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d057      	beq.n	800a1f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f005 fda4 	bl	800fca0 <USB_ReadDevOutEPInterrupt>
 800a158:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00c      	beq.n	800a17e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a170:	461a      	mov	r2, r3
 800a172:	2301      	movs	r3, #1
 800a174:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fdb1 	bl	800ace0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00c      	beq.n	800a1a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a194:	461a      	mov	r2, r3
 800a196:	2308      	movs	r3, #8
 800a198:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a19a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 feab 	bl	800aef8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d008      	beq.n	800a1be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f003 0320 	and.w	r3, r3, #32
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	2320      	movs	r3, #32
 800a1d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d009      	beq.n	800a1f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	085b      	lsrs	r3, r3, #1
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	2b00      	cmp	r3, #0
 800a208:	d199      	bne.n	800a13e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f005 fcff 	bl	800fc12 <USB_ReadInterrupts>
 800a214:	4603      	mov	r3, r0
 800a216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a21a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a21e:	f040 80c0 	bne.w	800a3a2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f005 fd20 	bl	800fc6c <USB_ReadDevAllInEpInterrupt>
 800a22c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a232:	e0b2      	b.n	800a39a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 80a7 	beq.w	800a38e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f005 fd46 	bl	800fcdc <USB_ReadDevInEPInterrupt>
 800a250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d057      	beq.n	800a30c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	2201      	movs	r2, #1
 800a264:	fa02 f303 	lsl.w	r3, r2, r3
 800a268:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	43db      	mvns	r3, r3
 800a276:	69f9      	ldr	r1, [r7, #28]
 800a278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a27c:	4013      	ands	r3, r2
 800a27e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28c:	461a      	mov	r2, r3
 800a28e:	2301      	movs	r3, #1
 800a290:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d132      	bne.n	800a300 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29e:	4613      	mov	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3348      	adds	r3, #72	; 0x48
 800a2aa:	6819      	ldr	r1, [r3, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4403      	add	r3, r0
 800a2ba:	3344      	adds	r3, #68	; 0x44
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4419      	add	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	1a9b      	subs	r3, r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4403      	add	r3, r0
 800a2ce:	3348      	adds	r3, #72	; 0x48
 800a2d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d113      	bne.n	800a300 <HAL_PCD_IRQHandler+0x31c>
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2dc:	4613      	mov	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	440b      	add	r3, r1
 800a2e6:	3350      	adds	r3, #80	; 0x50
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d108      	bne.n	800a300 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	f005 fd4e 	bl	800fd9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	b2db      	uxtb	r3, r3
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f00e fcc7 	bl	8018c9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f003 0308 	and.w	r3, r3, #8
 800a312:	2b00      	cmp	r3, #0
 800a314:	d008      	beq.n	800a328 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a322:	461a      	mov	r2, r3
 800a324:	2308      	movs	r3, #8
 800a326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33e:	461a      	mov	r2, r3
 800a340:	2310      	movs	r3, #16
 800a342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d008      	beq.n	800a360 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35a:	461a      	mov	r2, r3
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d008      	beq.n	800a37c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a376:	461a      	mov	r2, r3
 800a378:	2302      	movs	r3, #2
 800a37a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fc1b 	bl	800abc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	3301      	adds	r3, #1
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f47f af49 	bne.w	800a234 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f005 fc33 	bl	800fc12 <USB_ReadInterrupts>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3b6:	d122      	bne.n	800a3fe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3c6:	f023 0301 	bic.w	r3, r3, #1
 800a3ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d108      	bne.n	800a3e8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fe27 	bl	800b034 <HAL_PCDEx_LPM_Callback>
 800a3e6:	e002      	b.n	800a3ee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f00e fccd 	bl	8018d88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695a      	ldr	r2, [r3, #20]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a3fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f005 fc05 	bl	800fc12 <USB_ReadInterrupts>
 800a408:	4603      	mov	r3, r0
 800a40a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a40e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a412:	d112      	bne.n	800a43a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b01      	cmp	r3, #1
 800a422:	d102      	bne.n	800a42a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f00e fc89 	bl	8018d3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	695a      	ldr	r2, [r3, #20]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a438:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f005 fbe7 	bl	800fc12 <USB_ReadInterrupts>
 800a444:	4603      	mov	r3, r0
 800a446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	f040 80c7 	bne.w	800a5e0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2110      	movs	r1, #16
 800a46c:	4618      	mov	r0, r3
 800a46e:	f004 fc81 	bl	800ed74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a472:	2300      	movs	r3, #0
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a476:	e056      	b.n	800a526 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	461a      	mov	r2, r3
 800a486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a48a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a49c:	0151      	lsls	r1, r2, #5
 800a49e:	69fa      	ldr	r2, [r7, #28]
 800a4a0:	440a      	add	r2, r1
 800a4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4aa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a51a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a51e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	3301      	adds	r3, #1
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d3a3      	bcc.n	800a478 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a53e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a542:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d016      	beq.n	800a57a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a55c:	f043 030b 	orr.w	r3, r3, #11
 800a560:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a572:	f043 030b 	orr.w	r3, r3, #11
 800a576:	6453      	str	r3, [r2, #68]	; 0x44
 800a578:	e015      	b.n	800a5a6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a58c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a590:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5a0:	f043 030b 	orr.w	r3, r3, #11
 800a5a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a5b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f005 fbe6 	bl	800fd9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	695a      	ldr	r2, [r3, #20]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a5de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f005 fb14 	bl	800fc12 <USB_ReadInterrupts>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f4:	d124      	bne.n	800a640 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f005 fbaa 	bl	800fd54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4618      	mov	r0, r3
 800a606:	f004 fc12 	bl	800ee2e <USB_GetDevSpeed>
 800a60a:	4603      	mov	r3, r0
 800a60c:	461a      	mov	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681c      	ldr	r4, [r3, #0]
 800a616:	f001 f995 	bl	800b944 <HAL_RCC_GetHCLKFreq>
 800a61a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a620:	b2db      	uxtb	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	4620      	mov	r0, r4
 800a626:	f004 f931 	bl	800e88c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f00e fb5d 	bl	8018cea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695a      	ldr	r2, [r3, #20]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a63e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4618      	mov	r0, r3
 800a646:	f005 fae4 	bl	800fc12 <USB_ReadInterrupts>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b08      	cmp	r3, #8
 800a652:	d10a      	bne.n	800a66a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f00e fb3a 	bl	8018cce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	695a      	ldr	r2, [r3, #20]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f002 0208 	and.w	r2, r2, #8
 800a668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f005 facf 	bl	800fc12 <USB_ReadInterrupts>
 800a674:	4603      	mov	r3, r0
 800a676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67e:	d10f      	bne.n	800a6a0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	b2db      	uxtb	r3, r3
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f00e fb9c 	bl	8018dc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a69e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f005 fab4 	bl	800fc12 <USB_ReadInterrupts>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6b4:	d10f      	bne.n	800a6d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f00e fb6f 	bl	8018da4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695a      	ldr	r2, [r3, #20]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a6d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f005 fa99 	bl	800fc12 <USB_ReadInterrupts>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ea:	d10a      	bne.n	800a702 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f00e fb7d 	bl	8018dec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	695a      	ldr	r2, [r3, #20]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f005 fa83 	bl	800fc12 <USB_ReadInterrupts>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b04      	cmp	r3, #4
 800a714:	d115      	bne.n	800a742 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f00e fb6d 	bl	8018e08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6859      	ldr	r1, [r3, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	e000      	b.n	800a742 <HAL_PCD_IRQHandler+0x75e>
      return;
 800a740:	bf00      	nop
    }
  }
}
 800a742:	3734      	adds	r7, #52	; 0x34
 800a744:	46bd      	mov	sp, r7
 800a746:	bd90      	pop	{r4, r7, pc}

0800a748 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <HAL_PCD_SetAddress+0x1a>
 800a75e:	2302      	movs	r3, #2
 800a760:	e013      	b.n	800a78a <HAL_PCD_SetAddress+0x42>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f005 f9e1 	bl	800fb42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	70fb      	strb	r3, [r7, #3]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	803b      	strh	r3, [r7, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da0f      	bge.n	800a7d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	f003 020f 	and.w	r2, r3, #15
 800a7be:	4613      	mov	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	3338      	adds	r3, #56	; 0x38
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	705a      	strb	r2, [r3, #1]
 800a7d6:	e00f      	b.n	800a7f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	f003 020f 	and.w	r2, r3, #15
 800a7de:	4613      	mov	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a804:	883a      	ldrh	r2, [r7, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	78ba      	ldrb	r2, [r7, #2]
 800a80e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a822:	78bb      	ldrb	r3, [r7, #2]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d102      	bne.n	800a82e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_PCD_EP_Open+0xaa>
 800a838:	2302      	movs	r3, #2
 800a83a:	e00e      	b.n	800a85a <HAL_PCD_EP_Open+0xc8>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f004 fb14 	bl	800ee78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a858:	7afb      	ldrb	r3, [r7, #11]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a86e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a872:	2b00      	cmp	r3, #0
 800a874:	da0f      	bge.n	800a896 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a876:	78fb      	ldrb	r3, [r7, #3]
 800a878:	f003 020f 	and.w	r2, r3, #15
 800a87c:	4613      	mov	r3, r2
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	1a9b      	subs	r3, r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	3338      	adds	r3, #56	; 0x38
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	3304      	adds	r3, #4
 800a88c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	705a      	strb	r2, [r3, #1]
 800a894:	e00f      	b.n	800a8b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	f003 020f 	and.w	r2, r3, #15
 800a89c:	4613      	mov	r3, r2
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	1a9b      	subs	r3, r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d101      	bne.n	800a8d0 <HAL_PCD_EP_Close+0x6e>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e00e      	b.n	800a8ee <HAL_PCD_EP_Close+0x8c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68f9      	ldr	r1, [r7, #12]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f004 fb52 	bl	800ef88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b086      	sub	sp, #24
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
 800a902:	460b      	mov	r3, r1
 800a904:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a906:	7afb      	ldrb	r3, [r7, #11]
 800a908:	f003 020f 	and.w	r2, r3, #15
 800a90c:	4613      	mov	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	3304      	adds	r3, #4
 800a91e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2200      	movs	r2, #0
 800a930:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2200      	movs	r2, #0
 800a936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d102      	bne.n	800a952 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d109      	bne.n	800a970 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	6979      	ldr	r1, [r7, #20]
 800a96a:	f004 fe2d 	bl	800f5c8 <USB_EP0StartXfer>
 800a96e:	e008      	b.n	800a982 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	461a      	mov	r2, r3
 800a97c:	6979      	ldr	r1, [r7, #20]
 800a97e:	f004 fbdf 	bl	800f140 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	f003 020f 	and.w	r2, r3, #15
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	440b      	add	r3, r1
 800a9aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9ae:	681b      	ldr	r3, [r3, #0]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	607a      	str	r2, [r7, #4]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	f003 020f 	and.w	r2, r3, #15
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	1a9b      	subs	r3, r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	3338      	adds	r3, #56	; 0x38
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d102      	bne.n	800aa16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aa16:	7afb      	ldrb	r3, [r7, #11]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d109      	bne.n	800aa34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6818      	ldr	r0, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	6979      	ldr	r1, [r7, #20]
 800aa2e:	f004 fdcb 	bl	800f5c8 <USB_EP0StartXfer>
 800aa32:	e008      	b.n	800aa46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	461a      	mov	r2, r3
 800aa40:	6979      	ldr	r1, [r7, #20]
 800aa42:	f004 fb7d 	bl	800f140 <USB_EPStartXfer>
  }

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 020f 	and.w	r2, r3, #15
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d901      	bls.n	800aa6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e050      	b.n	800ab10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aa6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	da0f      	bge.n	800aa96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	f003 020f 	and.w	r2, r3, #15
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	1a9b      	subs	r3, r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	3338      	adds	r3, #56	; 0x38
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	4413      	add	r3, r2
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2201      	movs	r2, #1
 800aa92:	705a      	strb	r2, [r3, #1]
 800aa94:	e00d      	b.n	800aab2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	f003 030f 	and.w	r3, r3, #15
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_PCD_EP_SetStall+0x82>
 800aace:	2302      	movs	r3, #2
 800aad0:	e01e      	b.n	800ab10 <HAL_PCD_EP_SetStall+0xc0>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f004 ff5a 	bl	800f99a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	b2d9      	uxtb	r1, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab00:	461a      	mov	r2, r3
 800ab02:	f005 f94b 	bl	800fd9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	f003 020f 	and.w	r2, r3, #15
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d901      	bls.n	800ab36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e042      	b.n	800abbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da0f      	bge.n	800ab5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab3e:	78fb      	ldrb	r3, [r7, #3]
 800ab40:	f003 020f 	and.w	r2, r3, #15
 800ab44:	4613      	mov	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	3338      	adds	r3, #56	; 0x38
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	3304      	adds	r3, #4
 800ab54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	705a      	strb	r2, [r3, #1]
 800ab5c:	e00f      	b.n	800ab7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	f003 020f 	and.w	r2, r3, #15
 800ab64:	4613      	mov	r3, r2
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	3304      	adds	r3, #4
 800ab76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <HAL_PCD_EP_ClrStall+0x86>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e00e      	b.n	800abbc <HAL_PCD_EP_ClrStall+0xa4>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	4618      	mov	r0, r3
 800abae:	f004 ff62 	bl	800fa76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	; 0x28
 800abc8:	af02      	add	r7, sp, #8
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	4613      	mov	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	3338      	adds	r3, #56	; 0x38
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4413      	add	r3, r2
 800abe8:	3304      	adds	r3, #4
 800abea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	699a      	ldr	r2, [r3, #24]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d901      	bls.n	800abfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e06c      	b.n	800acd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	695a      	ldr	r2, [r3, #20]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	69fa      	ldr	r2, [r7, #28]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d902      	bls.n	800ac18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	3303      	adds	r3, #3
 800ac1c:	089b      	lsrs	r3, r3, #2
 800ac1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ac20:	e02b      	b.n	800ac7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	695a      	ldr	r2, [r3, #20]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d902      	bls.n	800ac3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	3303      	adds	r3, #3
 800ac42:	089b      	lsrs	r3, r3, #2
 800ac44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	68d9      	ldr	r1, [r3, #12]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6978      	ldr	r0, [r7, #20]
 800ac5e:	f004 fe06 	bl	800f86e <USB_WritePacket>

    ep->xfer_buff  += len;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d809      	bhi.n	800aca4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	699a      	ldr	r2, [r3, #24]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d203      	bcs.n	800aca4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1be      	bne.n	800ac22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	695a      	ldr	r2, [r3, #20]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d811      	bhi.n	800acd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	2201      	movs	r2, #1
 800acb8:	fa02 f303 	lsl.w	r3, r2, r3
 800acbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	43db      	mvns	r3, r3
 800acca:	6939      	ldr	r1, [r7, #16]
 800accc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acd0:	4013      	ands	r3, r2
 800acd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	333c      	adds	r3, #60	; 0x3c
 800acf8:	3304      	adds	r3, #4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	f040 80a0 	bne.w	800ae58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f003 0308 	and.w	r3, r3, #8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d015      	beq.n	800ad4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4a72      	ldr	r2, [pc, #456]	; (800aef0 <PCD_EP_OutXfrComplete_int+0x210>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	f240 80dd 	bls.w	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80d7 	beq.w	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad44:	461a      	mov	r2, r3
 800ad46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad4a:	6093      	str	r3, [r2, #8]
 800ad4c:	e0cb      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f003 0320 	and.w	r3, r3, #32
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	461a      	mov	r2, r3
 800ad66:	2320      	movs	r3, #32
 800ad68:	6093      	str	r3, [r2, #8]
 800ad6a:	e0bc      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 80b7 	bne.w	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4a5d      	ldr	r2, [pc, #372]	; (800aef0 <PCD_EP_OutXfrComplete_int+0x210>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d90f      	bls.n	800ada0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad96:	461a      	mov	r2, r3
 800ad98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad9c:	6093      	str	r3, [r2, #8]
 800ad9e:	e0a2      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	440b      	add	r3, r1
 800adae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800adb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	0159      	lsls	r1, r3, #5
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	440b      	add	r3, r1
 800adbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800adc6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	4613      	mov	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4403      	add	r3, r0
 800add6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800adda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	4613      	mov	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	1a9b      	subs	r3, r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	440b      	add	r3, r1
 800adea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800adee:	6819      	ldr	r1, [r3, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4403      	add	r3, r0
 800adfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4419      	add	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4403      	add	r3, r0
 800ae14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d114      	bne.n	800ae4a <PCD_EP_OutXfrComplete_int+0x16a>
 800ae20:	6879      	ldr	r1, [r7, #4]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	4613      	mov	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d108      	bne.n	800ae4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae42:	461a      	mov	r2, r3
 800ae44:	2101      	movs	r1, #1
 800ae46:	f004 ffa9 	bl	800fd9c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f00d ff07 	bl	8018c64 <HAL_PCD_DataOutStageCallback>
 800ae56:	e046      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4a26      	ldr	r2, [pc, #152]	; (800aef4 <PCD_EP_OutXfrComplete_int+0x214>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d124      	bne.n	800aeaa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae76:	461a      	mov	r2, r3
 800ae78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae7c:	6093      	str	r3, [r2, #8]
 800ae7e:	e032      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d008      	beq.n	800ae9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae96:	461a      	mov	r2, r3
 800ae98:	2320      	movs	r3, #32
 800ae9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f00d fede 	bl	8018c64 <HAL_PCD_DataOutStageCallback>
 800aea8:	e01d      	b.n	800aee6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d114      	bne.n	800aeda <PCD_EP_OutXfrComplete_int+0x1fa>
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d108      	bne.n	800aeda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6818      	ldr	r0, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aed2:	461a      	mov	r2, r3
 800aed4:	2100      	movs	r1, #0
 800aed6:	f004 ff61 	bl	800fd9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f00d febf 	bl	8018c64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	4f54300a 	.word	0x4f54300a
 800aef4:	4f54310a 	.word	0x4f54310a

0800aef8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	333c      	adds	r3, #60	; 0x3c
 800af10:	3304      	adds	r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <PCD_EP_OutSetupPacket_int+0x88>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d90e      	bls.n	800af4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	461a      	mov	r2, r3
 800af46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f00d fe77 	bl	8018c40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <PCD_EP_OutSetupPacket_int+0x88>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d90c      	bls.n	800af74 <PCD_EP_OutSetupPacket_int+0x7c>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d108      	bne.n	800af74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af6c:	461a      	mov	r2, r3
 800af6e:	2101      	movs	r1, #1
 800af70:	f004 ff14 	bl	800fd9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	4f54300a 	.word	0x4f54300a

0800af84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
 800af90:	4613      	mov	r3, r2
 800af92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d107      	bne.n	800afb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800afa2:	883b      	ldrh	r3, [r7, #0]
 800afa4:	0419      	lsls	r1, r3, #16
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	430a      	orrs	r2, r1
 800afae:	629a      	str	r2, [r3, #40]	; 0x28
 800afb0:	e028      	b.n	800b004 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	0c1b      	lsrs	r3, r3, #16
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	4413      	add	r3, r2
 800afbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
 800afc4:	e00d      	b.n	800afe2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	3340      	adds	r3, #64	; 0x40
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	0c1b      	lsrs	r3, r3, #16
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	4413      	add	r3, r2
 800afda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	3301      	adds	r3, #1
 800afe0:	73fb      	strb	r3, [r7, #15]
 800afe2:	7bfa      	ldrb	r2, [r7, #15]
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	429a      	cmp	r2, r3
 800afea:	d3ec      	bcc.n	800afc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800afec:	883b      	ldrh	r3, [r7, #0]
 800afee:	0418      	lsls	r0, r3, #16
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	4302      	orrs	r2, r0
 800affc:	3340      	adds	r3, #64	; 0x40
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	440b      	add	r3, r1
 800b002:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	887a      	ldrh	r2, [r7, #2]
 800b024:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <HAL_PWR_EnableWakeUpPin+0x20>)
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	4904      	ldr	r1, [pc, #16]	; (800b06c <HAL_PWR_EnableWakeUpPin+0x20>)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	604b      	str	r3, [r1, #4]
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	40007000 	.word	0x40007000

0800b070 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	43db      	mvns	r3, r3
 800b080:	4904      	ldr	r1, [pc, #16]	; (800b094 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b082:	4013      	ands	r3, r2
 800b084:	604b      	str	r3, [r1, #4]
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	40007000 	.word	0x40007000

0800b098 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b09c:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b0a2:	f043 0302 	orr.w	r3, r3, #2
 800b0a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b0a8:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	4a05      	ldr	r2, [pc, #20]	; (800b0c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b0ae:	f043 0304 	orr.w	r3, r3, #4
 800b0b2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b0b4:	bf30      	wfi
}
 800b0b6:	bf00      	nop
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	40007000 	.word	0x40007000
 800b0c4:	e000ed00 	.word	0xe000ed00

0800b0c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e264      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d075      	beq.n	800b1d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b0e6:	4ba3      	ldr	r3, [pc, #652]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f003 030c 	and.w	r3, r3, #12
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d00c      	beq.n	800b10c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b0f2:	4ba0      	ldr	r3, [pc, #640]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	d112      	bne.n	800b124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b0fe:	4b9d      	ldr	r3, [pc, #628]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b10a:	d10b      	bne.n	800b124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b10c:	4b99      	ldr	r3, [pc, #612]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d05b      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x108>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d157      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e23f      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b12c:	d106      	bne.n	800b13c <HAL_RCC_OscConfig+0x74>
 800b12e:	4b91      	ldr	r3, [pc, #580]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a90      	ldr	r2, [pc, #576]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e01d      	b.n	800b178 <HAL_RCC_OscConfig+0xb0>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b144:	d10c      	bne.n	800b160 <HAL_RCC_OscConfig+0x98>
 800b146:	4b8b      	ldr	r3, [pc, #556]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a8a      	ldr	r2, [pc, #552]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b14c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	4b88      	ldr	r3, [pc, #544]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a87      	ldr	r2, [pc, #540]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	e00b      	b.n	800b178 <HAL_RCC_OscConfig+0xb0>
 800b160:	4b84      	ldr	r3, [pc, #528]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a83      	ldr	r2, [pc, #524]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	4b81      	ldr	r3, [pc, #516]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a80      	ldr	r2, [pc, #512]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d013      	beq.n	800b1a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b180:	f7fc ff72 	bl	8008068 <HAL_GetTick>
 800b184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b186:	e008      	b.n	800b19a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b188:	f7fc ff6e 	bl	8008068 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b64      	cmp	r3, #100	; 0x64
 800b194:	d901      	bls.n	800b19a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e204      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b19a:	4b76      	ldr	r3, [pc, #472]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0f0      	beq.n	800b188 <HAL_RCC_OscConfig+0xc0>
 800b1a6:	e014      	b.n	800b1d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1a8:	f7fc ff5e 	bl	8008068 <HAL_GetTick>
 800b1ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1ae:	e008      	b.n	800b1c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b1b0:	f7fc ff5a 	bl	8008068 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b64      	cmp	r3, #100	; 0x64
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e1f0      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1c2:	4b6c      	ldr	r3, [pc, #432]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f0      	bne.n	800b1b0 <HAL_RCC_OscConfig+0xe8>
 800b1ce:	e000      	b.n	800b1d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0302 	and.w	r3, r3, #2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d063      	beq.n	800b2a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b1de:	4b65      	ldr	r3, [pc, #404]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f003 030c 	and.w	r3, r3, #12
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00b      	beq.n	800b202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b1ea:	4b62      	ldr	r3, [pc, #392]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d11c      	bne.n	800b230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b1f6:	4b5f      	ldr	r3, [pc, #380]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d116      	bne.n	800b230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b202:	4b5c      	ldr	r3, [pc, #368]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <HAL_RCC_OscConfig+0x152>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d001      	beq.n	800b21a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e1c4      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b21a:	4b56      	ldr	r3, [pc, #344]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	4952      	ldr	r1, [pc, #328]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b22e:	e03a      	b.n	800b2a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d020      	beq.n	800b27a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b238:	4b4f      	ldr	r3, [pc, #316]	; (800b378 <HAL_RCC_OscConfig+0x2b0>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b23e:	f7fc ff13 	bl	8008068 <HAL_GetTick>
 800b242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b244:	e008      	b.n	800b258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b246:	f7fc ff0f 	bl	8008068 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	2b02      	cmp	r3, #2
 800b252:	d901      	bls.n	800b258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e1a5      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b258:	4b46      	ldr	r3, [pc, #280]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0f0      	beq.n	800b246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b264:	4b43      	ldr	r3, [pc, #268]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	4940      	ldr	r1, [pc, #256]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b274:	4313      	orrs	r3, r2
 800b276:	600b      	str	r3, [r1, #0]
 800b278:	e015      	b.n	800b2a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b27a:	4b3f      	ldr	r3, [pc, #252]	; (800b378 <HAL_RCC_OscConfig+0x2b0>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b280:	f7fc fef2 	bl	8008068 <HAL_GetTick>
 800b284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b286:	e008      	b.n	800b29a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b288:	f7fc feee 	bl	8008068 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d901      	bls.n	800b29a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e184      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b29a:	4b36      	ldr	r3, [pc, #216]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f0      	bne.n	800b288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d030      	beq.n	800b314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d016      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2ba:	4b30      	ldr	r3, [pc, #192]	; (800b37c <HAL_RCC_OscConfig+0x2b4>)
 800b2bc:	2201      	movs	r2, #1
 800b2be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c0:	f7fc fed2 	bl	8008068 <HAL_GetTick>
 800b2c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2c6:	e008      	b.n	800b2da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b2c8:	f7fc fece 	bl	8008068 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e164      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2da:	4b26      	ldr	r3, [pc, #152]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d0f0      	beq.n	800b2c8 <HAL_RCC_OscConfig+0x200>
 800b2e6:	e015      	b.n	800b314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2e8:	4b24      	ldr	r3, [pc, #144]	; (800b37c <HAL_RCC_OscConfig+0x2b4>)
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2ee:	f7fc febb 	bl	8008068 <HAL_GetTick>
 800b2f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b2f4:	e008      	b.n	800b308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b2f6:	f7fc feb7 	bl	8008068 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b02      	cmp	r3, #2
 800b302:	d901      	bls.n	800b308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e14d      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b308:	4b1a      	ldr	r3, [pc, #104]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f0      	bne.n	800b2f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80a0 	beq.w	800b462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b322:	2300      	movs	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b326:	4b13      	ldr	r3, [pc, #76]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10f      	bne.n	800b352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b332:	2300      	movs	r3, #0
 800b334:	60bb      	str	r3, [r7, #8]
 800b336:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	4a0e      	ldr	r2, [pc, #56]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b340:	6413      	str	r3, [r2, #64]	; 0x40
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <HAL_RCC_OscConfig+0x2ac>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b34a:	60bb      	str	r3, [r7, #8]
 800b34c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b34e:	2301      	movs	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b352:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <HAL_RCC_OscConfig+0x2b8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d121      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b35e:	4b08      	ldr	r3, [pc, #32]	; (800b380 <HAL_RCC_OscConfig+0x2b8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a07      	ldr	r2, [pc, #28]	; (800b380 <HAL_RCC_OscConfig+0x2b8>)
 800b364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b36a:	f7fc fe7d 	bl	8008068 <HAL_GetTick>
 800b36e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b370:	e011      	b.n	800b396 <HAL_RCC_OscConfig+0x2ce>
 800b372:	bf00      	nop
 800b374:	40023800 	.word	0x40023800
 800b378:	42470000 	.word	0x42470000
 800b37c:	42470e80 	.word	0x42470e80
 800b380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b384:	f7fc fe70 	bl	8008068 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d901      	bls.n	800b396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e106      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b396:	4b85      	ldr	r3, [pc, #532]	; (800b5ac <HAL_RCC_OscConfig+0x4e4>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f0      	beq.n	800b384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d106      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x2f0>
 800b3aa:	4b81      	ldr	r3, [pc, #516]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ae:	4a80      	ldr	r2, [pc, #512]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3b0:	f043 0301 	orr.w	r3, r3, #1
 800b3b4:	6713      	str	r3, [r2, #112]	; 0x70
 800b3b6:	e01c      	b.n	800b3f2 <HAL_RCC_OscConfig+0x32a>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	2b05      	cmp	r3, #5
 800b3be:	d10c      	bne.n	800b3da <HAL_RCC_OscConfig+0x312>
 800b3c0:	4b7b      	ldr	r3, [pc, #492]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c4:	4a7a      	ldr	r2, [pc, #488]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3c6:	f043 0304 	orr.w	r3, r3, #4
 800b3ca:	6713      	str	r3, [r2, #112]	; 0x70
 800b3cc:	4b78      	ldr	r3, [pc, #480]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d0:	4a77      	ldr	r2, [pc, #476]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3d2:	f043 0301 	orr.w	r3, r3, #1
 800b3d6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3d8:	e00b      	b.n	800b3f2 <HAL_RCC_OscConfig+0x32a>
 800b3da:	4b75      	ldr	r3, [pc, #468]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3de:	4a74      	ldr	r2, [pc, #464]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	6713      	str	r3, [r2, #112]	; 0x70
 800b3e6:	4b72      	ldr	r3, [pc, #456]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ea:	4a71      	ldr	r2, [pc, #452]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b3ec:	f023 0304 	bic.w	r3, r3, #4
 800b3f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d015      	beq.n	800b426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3fa:	f7fc fe35 	bl	8008068 <HAL_GetTick>
 800b3fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b400:	e00a      	b.n	800b418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b402:	f7fc fe31 	bl	8008068 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b410:	4293      	cmp	r3, r2
 800b412:	d901      	bls.n	800b418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b414:	2303      	movs	r3, #3
 800b416:	e0c5      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b418:	4b65      	ldr	r3, [pc, #404]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0ee      	beq.n	800b402 <HAL_RCC_OscConfig+0x33a>
 800b424:	e014      	b.n	800b450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b426:	f7fc fe1f 	bl	8008068 <HAL_GetTick>
 800b42a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b42c:	e00a      	b.n	800b444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b42e:	f7fc fe1b 	bl	8008068 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d901      	bls.n	800b444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e0af      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b444:	4b5a      	ldr	r3, [pc, #360]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1ee      	bne.n	800b42e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d105      	bne.n	800b462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b456:	4b56      	ldr	r3, [pc, #344]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45a:	4a55      	ldr	r2, [pc, #340]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b45c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 809b 	beq.w	800b5a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b46c:	4b50      	ldr	r3, [pc, #320]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f003 030c 	and.w	r3, r3, #12
 800b474:	2b08      	cmp	r3, #8
 800b476:	d05c      	beq.n	800b532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d141      	bne.n	800b504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b480:	4b4c      	ldr	r3, [pc, #304]	; (800b5b4 <HAL_RCC_OscConfig+0x4ec>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b486:	f7fc fdef 	bl	8008068 <HAL_GetTick>
 800b48a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b48c:	e008      	b.n	800b4a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b48e:	f7fc fdeb 	bl	8008068 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d901      	bls.n	800b4a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e081      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4a0:	4b43      	ldr	r3, [pc, #268]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f0      	bne.n	800b48e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	69da      	ldr	r2, [r3, #28]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	019b      	lsls	r3, r3, #6
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	041b      	lsls	r3, r3, #16
 800b4c8:	431a      	orrs	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ce:	061b      	lsls	r3, r3, #24
 800b4d0:	4937      	ldr	r1, [pc, #220]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4d6:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <HAL_RCC_OscConfig+0x4ec>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4dc:	f7fc fdc4 	bl	8008068 <HAL_GetTick>
 800b4e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4e2:	e008      	b.n	800b4f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4e4:	f7fc fdc0 	bl	8008068 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d901      	bls.n	800b4f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e056      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0f0      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x41c>
 800b502:	e04e      	b.n	800b5a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b504:	4b2b      	ldr	r3, [pc, #172]	; (800b5b4 <HAL_RCC_OscConfig+0x4ec>)
 800b506:	2200      	movs	r2, #0
 800b508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b50a:	f7fc fdad 	bl	8008068 <HAL_GetTick>
 800b50e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b510:	e008      	b.n	800b524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b512:	f7fc fda9 	bl	8008068 <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d901      	bls.n	800b524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e03f      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b524:	4b22      	ldr	r3, [pc, #136]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1f0      	bne.n	800b512 <HAL_RCC_OscConfig+0x44a>
 800b530:	e037      	b.n	800b5a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e032      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b53e:	4b1c      	ldr	r3, [pc, #112]	; (800b5b0 <HAL_RCC_OscConfig+0x4e8>)
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d028      	beq.n	800b59e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b556:	429a      	cmp	r2, r3
 800b558:	d121      	bne.n	800b59e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b564:	429a      	cmp	r2, r3
 800b566:	d11a      	bne.n	800b59e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b56e:	4013      	ands	r3, r2
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b574:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b576:	4293      	cmp	r3, r2
 800b578:	d111      	bne.n	800b59e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b584:	085b      	lsrs	r3, r3, #1
 800b586:	3b01      	subs	r3, #1
 800b588:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d107      	bne.n	800b59e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d001      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	40007000 	.word	0x40007000
 800b5b0:	40023800 	.word	0x40023800
 800b5b4:	42470060 	.word	0x42470060

0800b5b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e0cc      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b5cc:	4b68      	ldr	r3, [pc, #416]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d90c      	bls.n	800b5f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5da:	4b65      	ldr	r3, [pc, #404]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5e2:	4b63      	ldr	r3, [pc, #396]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d001      	beq.n	800b5f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e0b8      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d020      	beq.n	800b642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d005      	beq.n	800b618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b60c:	4b59      	ldr	r3, [pc, #356]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	4a58      	ldr	r2, [pc, #352]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0308 	and.w	r3, r3, #8
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b624:	4b53      	ldr	r3, [pc, #332]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	4a52      	ldr	r2, [pc, #328]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b62a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b62e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b630:	4b50      	ldr	r3, [pc, #320]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	494d      	ldr	r1, [pc, #308]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b63e:	4313      	orrs	r3, r2
 800b640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d044      	beq.n	800b6d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d107      	bne.n	800b666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b656:	4b47      	ldr	r3, [pc, #284]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d119      	bne.n	800b696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e07f      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d003      	beq.n	800b676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b672:	2b03      	cmp	r3, #3
 800b674:	d107      	bne.n	800b686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b676:	4b3f      	ldr	r3, [pc, #252]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e06f      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b686:	4b3b      	ldr	r3, [pc, #236]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e067      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b696:	4b37      	ldr	r3, [pc, #220]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f023 0203 	bic.w	r2, r3, #3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4934      	ldr	r1, [pc, #208]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b6a8:	f7fc fcde 	bl	8008068 <HAL_GetTick>
 800b6ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6ae:	e00a      	b.n	800b6c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6b0:	f7fc fcda 	bl	8008068 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d901      	bls.n	800b6c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e04f      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6c6:	4b2b      	ldr	r3, [pc, #172]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f003 020c 	and.w	r2, r3, #12
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d1eb      	bne.n	800b6b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 030f 	and.w	r3, r3, #15
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d20c      	bcs.n	800b700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6e6:	4b22      	ldr	r3, [pc, #136]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6ee:	4b20      	ldr	r3, [pc, #128]	; (800b770 <HAL_RCC_ClockConfig+0x1b8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 030f 	and.w	r3, r3, #15
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d001      	beq.n	800b700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e032      	b.n	800b766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b70c:	4b19      	ldr	r3, [pc, #100]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	4916      	ldr	r1, [pc, #88]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	490e      	ldr	r1, [pc, #56]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b73e:	f000 f821 	bl	800b784 <HAL_RCC_GetSysClockFreq>
 800b742:	4602      	mov	r2, r0
 800b744:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <HAL_RCC_ClockConfig+0x1bc>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	091b      	lsrs	r3, r3, #4
 800b74a:	f003 030f 	and.w	r3, r3, #15
 800b74e:	490a      	ldr	r1, [pc, #40]	; (800b778 <HAL_RCC_ClockConfig+0x1c0>)
 800b750:	5ccb      	ldrb	r3, [r1, r3]
 800b752:	fa22 f303 	lsr.w	r3, r2, r3
 800b756:	4a09      	ldr	r2, [pc, #36]	; (800b77c <HAL_RCC_ClockConfig+0x1c4>)
 800b758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b75a:	4b09      	ldr	r3, [pc, #36]	; (800b780 <HAL_RCC_ClockConfig+0x1c8>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f7 fac6 	bl	8002cf0 <HAL_InitTick>

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40023c00 	.word	0x40023c00
 800b774:	40023800 	.word	0x40023800
 800b778:	080211e4 	.word	0x080211e4
 800b77c:	20000000 	.word	0x20000000
 800b780:	20000058 	.word	0x20000058

0800b784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	607b      	str	r3, [r7, #4]
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	2300      	movs	r3, #0
 800b796:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b79c:	4b67      	ldr	r3, [pc, #412]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f003 030c 	and.w	r3, r3, #12
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	d00d      	beq.n	800b7c4 <HAL_RCC_GetSysClockFreq+0x40>
 800b7a8:	2b08      	cmp	r3, #8
 800b7aa:	f200 80bd 	bhi.w	800b928 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <HAL_RCC_GetSysClockFreq+0x34>
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	d003      	beq.n	800b7be <HAL_RCC_GetSysClockFreq+0x3a>
 800b7b6:	e0b7      	b.n	800b928 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b7b8:	4b61      	ldr	r3, [pc, #388]	; (800b940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b7ba:	60bb      	str	r3, [r7, #8]
       break;
 800b7bc:	e0b7      	b.n	800b92e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b7be:	4b60      	ldr	r3, [pc, #384]	; (800b940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b7c0:	60bb      	str	r3, [r7, #8]
      break;
 800b7c2:	e0b4      	b.n	800b92e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7c4:	4b5d      	ldr	r3, [pc, #372]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7ce:	4b5b      	ldr	r3, [pc, #364]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d04d      	beq.n	800b876 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7da:	4b58      	ldr	r3, [pc, #352]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	099b      	lsrs	r3, r3, #6
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f04f 0300 	mov.w	r3, #0
 800b7e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b7ea:	f04f 0100 	mov.w	r1, #0
 800b7ee:	ea02 0800 	and.w	r8, r2, r0
 800b7f2:	ea03 0901 	and.w	r9, r3, r1
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	f04f 0300 	mov.w	r3, #0
 800b802:	014b      	lsls	r3, r1, #5
 800b804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b808:	0142      	lsls	r2, r0, #5
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	ebb0 0008 	subs.w	r0, r0, r8
 800b812:	eb61 0109 	sbc.w	r1, r1, r9
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	018b      	lsls	r3, r1, #6
 800b820:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b824:	0182      	lsls	r2, r0, #6
 800b826:	1a12      	subs	r2, r2, r0
 800b828:	eb63 0301 	sbc.w	r3, r3, r1
 800b82c:	f04f 0000 	mov.w	r0, #0
 800b830:	f04f 0100 	mov.w	r1, #0
 800b834:	00d9      	lsls	r1, r3, #3
 800b836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b83a:	00d0      	lsls	r0, r2, #3
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	eb12 0208 	adds.w	r2, r2, r8
 800b844:	eb43 0309 	adc.w	r3, r3, r9
 800b848:	f04f 0000 	mov.w	r0, #0
 800b84c:	f04f 0100 	mov.w	r1, #0
 800b850:	0299      	lsls	r1, r3, #10
 800b852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b856:	0290      	lsls	r0, r2, #10
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4610      	mov	r0, r2
 800b85e:	4619      	mov	r1, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	461a      	mov	r2, r3
 800b864:	f04f 0300 	mov.w	r3, #0
 800b868:	f7f5 fa1e 	bl	8000ca8 <__aeabi_uldivmod>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4613      	mov	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	e04a      	b.n	800b90c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b876:	4b31      	ldr	r3, [pc, #196]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	099b      	lsrs	r3, r3, #6
 800b87c:	461a      	mov	r2, r3
 800b87e:	f04f 0300 	mov.w	r3, #0
 800b882:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b886:	f04f 0100 	mov.w	r1, #0
 800b88a:	ea02 0400 	and.w	r4, r2, r0
 800b88e:	ea03 0501 	and.w	r5, r3, r1
 800b892:	4620      	mov	r0, r4
 800b894:	4629      	mov	r1, r5
 800b896:	f04f 0200 	mov.w	r2, #0
 800b89a:	f04f 0300 	mov.w	r3, #0
 800b89e:	014b      	lsls	r3, r1, #5
 800b8a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b8a4:	0142      	lsls	r2, r0, #5
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	1b00      	subs	r0, r0, r4
 800b8ac:	eb61 0105 	sbc.w	r1, r1, r5
 800b8b0:	f04f 0200 	mov.w	r2, #0
 800b8b4:	f04f 0300 	mov.w	r3, #0
 800b8b8:	018b      	lsls	r3, r1, #6
 800b8ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b8be:	0182      	lsls	r2, r0, #6
 800b8c0:	1a12      	subs	r2, r2, r0
 800b8c2:	eb63 0301 	sbc.w	r3, r3, r1
 800b8c6:	f04f 0000 	mov.w	r0, #0
 800b8ca:	f04f 0100 	mov.w	r1, #0
 800b8ce:	00d9      	lsls	r1, r3, #3
 800b8d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8d4:	00d0      	lsls	r0, r2, #3
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	1912      	adds	r2, r2, r4
 800b8dc:	eb45 0303 	adc.w	r3, r5, r3
 800b8e0:	f04f 0000 	mov.w	r0, #0
 800b8e4:	f04f 0100 	mov.w	r1, #0
 800b8e8:	0299      	lsls	r1, r3, #10
 800b8ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b8ee:	0290      	lsls	r0, r2, #10
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	f7f5 f9d2 	bl	8000ca8 <__aeabi_uldivmod>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4613      	mov	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b90c:	4b0b      	ldr	r3, [pc, #44]	; (800b93c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	0c1b      	lsrs	r3, r3, #16
 800b912:	f003 0303 	and.w	r3, r3, #3
 800b916:	3301      	adds	r3, #1
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	fbb2 f3f3 	udiv	r3, r2, r3
 800b924:	60bb      	str	r3, [r7, #8]
      break;
 800b926:	e002      	b.n	800b92e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b92a:	60bb      	str	r3, [r7, #8]
      break;
 800b92c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b92e:	68bb      	ldr	r3, [r7, #8]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b93a:	bf00      	nop
 800b93c:	40023800 	.word	0x40023800
 800b940:	00f42400 	.word	0x00f42400

0800b944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b948:	4b03      	ldr	r3, [pc, #12]	; (800b958 <HAL_RCC_GetHCLKFreq+0x14>)
 800b94a:	681b      	ldr	r3, [r3, #0]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20000000 	.word	0x20000000

0800b95c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b960:	f7ff fff0 	bl	800b944 <HAL_RCC_GetHCLKFreq>
 800b964:	4602      	mov	r2, r0
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	0a9b      	lsrs	r3, r3, #10
 800b96c:	f003 0307 	and.w	r3, r3, #7
 800b970:	4903      	ldr	r1, [pc, #12]	; (800b980 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b972:	5ccb      	ldrb	r3, [r1, r3]
 800b974:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b978:	4618      	mov	r0, r3
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	40023800 	.word	0x40023800
 800b980:	080211f4 	.word	0x080211f4

0800b984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b988:	f7ff ffdc 	bl	800b944 <HAL_RCC_GetHCLKFreq>
 800b98c:	4602      	mov	r2, r0
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	0b5b      	lsrs	r3, r3, #13
 800b994:	f003 0307 	and.w	r3, r3, #7
 800b998:	4903      	ldr	r1, [pc, #12]	; (800b9a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b99a:	5ccb      	ldrb	r3, [r1, r3]
 800b99c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	080211f4 	.word	0x080211f4

0800b9ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	220f      	movs	r2, #15
 800b9ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b9bc:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <HAL_RCC_GetClockConfig+0x5c>)
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f003 0203 	and.w	r2, r3, #3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <HAL_RCC_GetClockConfig+0x5c>)
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <HAL_RCC_GetClockConfig+0x5c>)
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b9e0:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <HAL_RCC_GetClockConfig+0x5c>)
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	08db      	lsrs	r3, r3, #3
 800b9e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <HAL_RCC_GetClockConfig+0x60>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 020f 	and.w	r2, r3, #15
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	40023800 	.word	0x40023800
 800ba0c:	40023c00 	.word	0x40023c00

0800ba10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10b      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d105      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d075      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ba44:	4bad      	ldr	r3, [pc, #692]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba4a:	f7fc fb0d 	bl	8008068 <HAL_GetTick>
 800ba4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba50:	e008      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ba52:	f7fc fb09 	bl	8008068 <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d901      	bls.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e18b      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba64:	4ba6      	ldr	r3, [pc, #664]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f0      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	019a      	lsls	r2, r3, #6
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	071b      	lsls	r3, r3, #28
 800ba88:	499d      	ldr	r1, [pc, #628]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01f      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba9c:	4b98      	ldr	r3, [pc, #608]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa2:	0f1b      	lsrs	r3, r3, #28
 800baa4:	f003 0307 	and.w	r3, r3, #7
 800baa8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	019a      	lsls	r2, r3, #6
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	061b      	lsls	r3, r3, #24
 800bab6:	431a      	orrs	r2, r3
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	071b      	lsls	r3, r3, #28
 800babc:	4990      	ldr	r1, [pc, #576]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bac4:	4b8e      	ldr	r3, [pc, #568]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baca:	f023 021f 	bic.w	r2, r3, #31
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	69db      	ldr	r3, [r3, #28]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	498a      	ldr	r1, [pc, #552]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00d      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	019a      	lsls	r2, r3, #6
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	061b      	lsls	r3, r3, #24
 800baf4:	431a      	orrs	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	071b      	lsls	r3, r3, #28
 800bafc:	4980      	ldr	r1, [pc, #512]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bb04:	4b7d      	ldr	r3, [pc, #500]	; (800bcfc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb0a:	f7fc faad 	bl	8008068 <HAL_GetTick>
 800bb0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb10:	e008      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bb12:	f7fc faa9 	bl	8008068 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e12b      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb24:	4b76      	ldr	r3, [pc, #472]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0f0      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d105      	bne.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d079      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bb48:	4b6e      	ldr	r3, [pc, #440]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb4e:	f7fc fa8b 	bl	8008068 <HAL_GetTick>
 800bb52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bb54:	e008      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bb56:	f7fc fa87 	bl	8008068 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d901      	bls.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e109      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bb68:	4b65      	ldr	r3, [pc, #404]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb74:	d0ef      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0304 	and.w	r3, r3, #4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d020      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bb82:	4b5f      	ldr	r3, [pc, #380]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb88:	0f1b      	lsrs	r3, r3, #28
 800bb8a:	f003 0307 	and.w	r3, r3, #7
 800bb8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	019a      	lsls	r2, r3, #6
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	061b      	lsls	r3, r3, #24
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	071b      	lsls	r3, r3, #28
 800bba2:	4957      	ldr	r1, [pc, #348]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bbaa:	4b55      	ldr	r3, [pc, #340]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	4950      	ldr	r1, [pc, #320]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01e      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bbd0:	4b4b      	ldr	r3, [pc, #300]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd6:	0e1b      	lsrs	r3, r3, #24
 800bbd8:	f003 030f 	and.w	r3, r3, #15
 800bbdc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	019a      	lsls	r2, r3, #6
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	061b      	lsls	r3, r3, #24
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	071b      	lsls	r3, r3, #28
 800bbf0:	4943      	ldr	r1, [pc, #268]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bbf8:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	493e      	ldr	r1, [pc, #248]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bc0e:	4b3d      	ldr	r3, [pc, #244]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bc14:	f7fc fa28 	bl	8008068 <HAL_GetTick>
 800bc18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bc1a:	e008      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bc1c:	f7fc fa24 	bl	8008068 <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d901      	bls.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e0a6      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bc2e:	4b34      	ldr	r3, [pc, #208]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc3a:	d1ef      	bne.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0320 	and.w	r3, r3, #32
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 808d 	beq.w	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	4a2b      	ldr	r2, [pc, #172]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc58:	6413      	str	r3, [r2, #64]	; 0x40
 800bc5a:	4b29      	ldr	r3, [pc, #164]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bc66:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a27      	ldr	r2, [pc, #156]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc72:	f7fc f9f9 	bl	8008068 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc78:	e008      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bc7a:	f7fc f9f5 	bl	8008068 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d901      	bls.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e077      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc8c:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0f0      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bc98:	4b19      	ldr	r3, [pc, #100]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bca0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d039      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d032      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bcb6:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bcc0:	4b12      	ldr	r3, [pc, #72]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bcc6:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bccc:	4a0c      	ldr	r2, [pc, #48]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d11e      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bcde:	f7fc f9c3 	bl	8008068 <HAL_GetTick>
 800bce2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bce4:	e014      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bce6:	f7fc f9bf 	bl	8008068 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d90b      	bls.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e03f      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800bcfc:	42470068 	.word	0x42470068
 800bd00:	40023800 	.word	0x40023800
 800bd04:	42470070 	.word	0x42470070
 800bd08:	40007000 	.word	0x40007000
 800bd0c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd10:	4b1c      	ldr	r3, [pc, #112]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0e4      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd28:	d10d      	bne.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bd2a:	4b16      	ldr	r3, [pc, #88]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd3e:	4911      	ldr	r1, [pc, #68]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	608b      	str	r3, [r1, #8]
 800bd44:	e005      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bd46:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	4a0e      	ldr	r2, [pc, #56]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bd50:	6093      	str	r3, [r2, #8]
 800bd52:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd5e:	4909      	ldr	r1, [pc, #36]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800bd76:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800bd78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40023800 	.word	0x40023800
 800bd88:	424711e0 	.word	0x424711e0

0800bd8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e083      	b.n	800bea6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	7f5b      	ldrb	r3, [r3, #29]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7f6 fdaa 	bl	8002908 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	22ca      	movs	r2, #202	; 0xca
 800bdc0:	625a      	str	r2, [r3, #36]	; 0x24
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2253      	movs	r2, #83	; 0x53
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fc26 	bl	800c61c <RTC_EnterInitMode>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d008      	beq.n	800bde8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	22ff      	movs	r2, #255	; 0xff
 800bddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2204      	movs	r2, #4
 800bde2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e05e      	b.n	800bea6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6812      	ldr	r2, [r2, #0]
 800bdf2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdfa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6899      	ldr	r1, [r3, #8]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	431a      	orrs	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	68d2      	ldr	r2, [r2, #12]
 800be22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6919      	ldr	r1, [r3, #16]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	041a      	lsls	r2, r3, #16
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68da      	ldr	r2, [r3, #12]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f003 0320 	and.w	r3, r3, #32
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10e      	bne.n	800be74 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fbb8 	bl	800c5cc <HAL_RTC_WaitForSynchro>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	22ff      	movs	r2, #255	; 0xff
 800be68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2204      	movs	r2, #4
 800be6e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	e018      	b.n	800bea6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800be82:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699a      	ldr	r2, [r3, #24]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	22ff      	movs	r2, #255	; 0xff
 800be9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bea4:	2300      	movs	r3, #0
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800beae:	b590      	push	{r4, r7, lr}
 800beb0:	b087      	sub	sp, #28
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	7f1b      	ldrb	r3, [r3, #28]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d101      	bne.n	800beca <HAL_RTC_SetTime+0x1c>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e0aa      	b.n	800c020 <HAL_RTC_SetTime+0x172>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2201      	movs	r2, #1
 800bece:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d126      	bne.n	800bf2a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d102      	bne.n	800bef0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2200      	movs	r2, #0
 800beee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 fbbd 	bl	800c674 <RTC_ByteToBcd2>
 800befa:	4603      	mov	r3, r0
 800befc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	785b      	ldrb	r3, [r3, #1]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 fbb6 	bl	800c674 <RTC_ByteToBcd2>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bf0c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	789b      	ldrb	r3, [r3, #2]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fbae 	bl	800c674 <RTC_ByteToBcd2>
 800bf18:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bf1a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	78db      	ldrb	r3, [r3, #3]
 800bf22:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bf24:	4313      	orrs	r3, r2
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e018      	b.n	800bf5c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	785b      	ldrb	r3, [r3, #1]
 800bf48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf4a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf50:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	78db      	ldrb	r3, [r3, #3]
 800bf56:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	22ca      	movs	r2, #202	; 0xca
 800bf62:	625a      	str	r2, [r3, #36]	; 0x24
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2253      	movs	r2, #83	; 0x53
 800bf6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 fb55 	bl	800c61c <RTC_EnterInitMode>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00b      	beq.n	800bf90 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2204      	movs	r2, #4
 800bf84:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e047      	b.n	800c020 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf9e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bfae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6899      	ldr	r1, [r3, #8]
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfd6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f003 0320 	and.w	r3, r3, #32
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d111      	bne.n	800c00a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 faf0 	bl	800c5cc <HAL_RTC_WaitForSynchro>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00b      	beq.n	800c00a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	22ff      	movs	r2, #255	; 0xff
 800bff8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2204      	movs	r2, #4
 800bffe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e00a      	b.n	800c020 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	22ff      	movs	r2, #255	; 0xff
 800c010:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c01e:	2300      	movs	r3, #0
  }
}
 800c020:	4618      	mov	r0, r3
 800c022:	371c      	adds	r7, #28
 800c024:	46bd      	mov	sp, r7
 800c026:	bd90      	pop	{r4, r7, pc}

0800c028 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c05a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c05e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	b2db      	uxtb	r3, r3
 800c066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	0a1b      	lsrs	r3, r3, #8
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	0c1b      	lsrs	r3, r3, #16
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d11a      	bne.n	800c0da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fb01 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	785b      	ldrb	r3, [r3, #1]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 faf8 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	789b      	ldrb	r3, [r3, #2]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 faef 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	7f1b      	ldrb	r3, [r3, #28]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <HAL_RTC_SetDate+0x1c>
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	e094      	b.n	800c22a <HAL_RTC_SetDate+0x146>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2202      	movs	r2, #2
 800c10a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10e      	bne.n	800c130 <HAL_RTC_SetDate+0x4c>
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	785b      	ldrb	r3, [r3, #1]
 800c116:	f003 0310 	and.w	r3, r3, #16
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d008      	beq.n	800c130 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	785b      	ldrb	r3, [r3, #1]
 800c122:	f023 0310 	bic.w	r3, r3, #16
 800c126:	b2db      	uxtb	r3, r3
 800c128:	330a      	adds	r3, #10
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d11c      	bne.n	800c170 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	78db      	ldrb	r3, [r3, #3]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fa9a 	bl	800c674 <RTC_ByteToBcd2>
 800c140:	4603      	mov	r3, r0
 800c142:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	785b      	ldrb	r3, [r3, #1]
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fa93 	bl	800c674 <RTC_ByteToBcd2>
 800c14e:	4603      	mov	r3, r0
 800c150:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c152:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	789b      	ldrb	r3, [r3, #2]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fa8b 	bl	800c674 <RTC_ByteToBcd2>
 800c15e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c160:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]
 800c16e:	e00e      	b.n	800c18e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	78db      	ldrb	r3, [r3, #3]
 800c174:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	785b      	ldrb	r3, [r3, #1]
 800c17a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c17c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c182:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c18a:	4313      	orrs	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	22ca      	movs	r2, #202	; 0xca
 800c194:	625a      	str	r2, [r3, #36]	; 0x24
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2253      	movs	r2, #83	; 0x53
 800c19c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f000 fa3c 	bl	800c61c <RTC_EnterInitMode>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00b      	beq.n	800c1c2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	22ff      	movs	r2, #255	; 0xff
 800c1b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e033      	b.n	800c22a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c1d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68da      	ldr	r2, [r3, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f003 0320 	and.w	r3, r3, #32
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d111      	bne.n	800c214 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 f9eb 	bl	800c5cc <HAL_RTC_WaitForSynchro>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	22ff      	movs	r2, #255	; 0xff
 800c202:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2204      	movs	r2, #4
 800c208:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e00a      	b.n	800c22a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	22ff      	movs	r2, #255	; 0xff
 800c21a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c228:	2300      	movs	r3, #0
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	371c      	adds	r7, #28
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd90      	pop	{r4, r7, pc}

0800c232 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b086      	sub	sp, #24
 800c236:	af00      	add	r7, sp, #0
 800c238:	60f8      	str	r0, [r7, #12]
 800c23a:	60b9      	str	r1, [r7, #8]
 800c23c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c24c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c250:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	0c1b      	lsrs	r3, r3, #16
 800c256:	b2da      	uxtb	r2, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	0a1b      	lsrs	r3, r3, #8
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 031f 	and.w	r3, r3, #31
 800c266:	b2da      	uxtb	r2, r3
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c274:	b2da      	uxtb	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	0b5b      	lsrs	r3, r3, #13
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0307 	and.w	r3, r3, #7
 800c284:	b2da      	uxtb	r2, r3
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d11a      	bne.n	800c2c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	78db      	ldrb	r3, [r3, #3]
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fa0b 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fa02 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	789b      	ldrb	r3, [r3, #2]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f9f9 	bl	800c6b0 <RTC_Bcd2ToByte>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b089      	sub	sp, #36	; 0x24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c2e4:	4b93      	ldr	r3, [pc, #588]	; (800c534 <HAL_RTC_SetAlarm_IT+0x264>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a93      	ldr	r2, [pc, #588]	; (800c538 <HAL_RTC_SetAlarm_IT+0x268>)
 800c2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ee:	0adb      	lsrs	r3, r3, #11
 800c2f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	7f1b      	ldrb	r3, [r3, #28]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d101      	bne.n	800c306 <HAL_RTC_SetAlarm_IT+0x36>
 800c302:	2302      	movs	r3, #2
 800c304:	e111      	b.n	800c52a <HAL_RTC_SetAlarm_IT+0x25a>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2201      	movs	r2, #1
 800c30a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2202      	movs	r2, #2
 800c310:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d137      	bne.n	800c388 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2200      	movs	r2, #0
 800c32a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f000 f99f 	bl	800c674 <RTC_ByteToBcd2>
 800c336:	4603      	mov	r3, r0
 800c338:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	785b      	ldrb	r3, [r3, #1]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f998 	bl	800c674 <RTC_ByteToBcd2>
 800c344:	4603      	mov	r3, r0
 800c346:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c348:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	789b      	ldrb	r3, [r3, #2]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f990 	bl	800c674 <RTC_ByteToBcd2>
 800c354:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c356:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	78db      	ldrb	r3, [r3, #3]
 800c35e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c360:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f982 	bl	800c674 <RTC_ByteToBcd2>
 800c370:	4603      	mov	r3, r0
 800c372:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c374:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c37c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c382:	4313      	orrs	r3, r2
 800c384:	61fb      	str	r3, [r7, #28]
 800c386:	e023      	b.n	800c3d0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	d102      	bne.n	800c39c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2200      	movs	r2, #0
 800c39a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	785b      	ldrb	r3, [r3, #1]
 800c3a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c3a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c3ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	78db      	ldrb	r3, [r3, #3]
 800c3b4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c3b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c3c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c3c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	22ca      	movs	r2, #202	; 0xca
 800c3e2:	625a      	str	r2, [r3, #36]	; 0x24
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2253      	movs	r2, #83	; 0x53
 800c3ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3f4:	d141      	bne.n	800c47a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c404:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c416:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	1e5a      	subs	r2, r3, #1
 800c41c:	617a      	str	r2, [r7, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	22ff      	movs	r2, #255	; 0xff
 800c428:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2203      	movs	r2, #3
 800c42e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c436:	2303      	movs	r3, #3
 800c438:	e077      	b.n	800c52a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0e7      	beq.n	800c418 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	689a      	ldr	r2, [r3, #8]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c466:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	689a      	ldr	r2, [r3, #8]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c476:	609a      	str	r2, [r3, #8]
 800c478:	e040      	b.n	800c4fc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	689a      	ldr	r2, [r3, #8]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c488:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	b2da      	uxtb	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c49a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	1e5a      	subs	r2, r3, #1
 800c4a0:	617a      	str	r2, [r7, #20]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10b      	bne.n	800c4be <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	22ff      	movs	r2, #255	; 0xff
 800c4ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e035      	b.n	800c52a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0302 	and.w	r3, r3, #2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0e7      	beq.n	800c49c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4ea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	689a      	ldr	r2, [r3, #8]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4fa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c4fc:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a0e      	ldr	r2, [pc, #56]	; (800c53c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c506:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c508:	4b0c      	ldr	r3, [pc, #48]	; (800c53c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	4a0b      	ldr	r2, [pc, #44]	; (800c53c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c50e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c512:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	22ff      	movs	r2, #255	; 0xff
 800c51a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3724      	adds	r7, #36	; 0x24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd90      	pop	{r4, r7, pc}
 800c532:	bf00      	nop
 800c534:	20000000 	.word	0x20000000
 800c538:	10624dd3 	.word	0x10624dd3
 800c53c:	40013c00 	.word	0x40013c00

0800c540 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d012      	beq.n	800c57c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7fb f8a5 	bl	80076b4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	b2da      	uxtb	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c57a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d012      	beq.n	800c5b0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f9bf 	bl	800c91c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c5ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c5b0:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800c5b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5b6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	775a      	strb	r2, [r3, #29]
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	40013c00 	.word	0x40013c00

0800c5cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c5e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5e8:	f7fb fd3e 	bl	8008068 <HAL_GetTick>
 800c5ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c5ee:	e009      	b.n	800c604 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c5f0:	f7fb fd3a 	bl	8008068 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5fe:	d901      	bls.n	800c604 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e007      	b.n	800c614 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0ee      	beq.n	800c5f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d119      	bne.n	800c66a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f04f 32ff 	mov.w	r2, #4294967295
 800c63e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c640:	f7fb fd12 	bl	8008068 <HAL_GetTick>
 800c644:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c646:	e009      	b.n	800c65c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c648:	f7fb fd0e 	bl	8008068 <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c656:	d901      	bls.n	800c65c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c658:	2303      	movs	r3, #3
 800c65a:	e007      	b.n	800c66c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0ee      	beq.n	800c648 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c682:	e005      	b.n	800c690 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3301      	adds	r3, #1
 800c688:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	3b0a      	subs	r3, #10
 800c68e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b09      	cmp	r3, #9
 800c694:	d8f6      	bhi.n	800c684 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	011b      	lsls	r3, r3, #4
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	b2db      	uxtb	r3, r3
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	091b      	lsrs	r3, r3, #4
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c6d0:	79fb      	ldrb	r3, [r7, #7]
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	4413      	add	r3, r2
 800c6de:	b2db      	uxtb	r3, r3
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	7f1b      	ldrb	r3, [r3, #28]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800c700:	2302      	movs	r3, #2
 800c702:	e0a6      	b.n	800c852 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2201      	movs	r2, #1
 800c708:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2202      	movs	r2, #2
 800c70e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	22ca      	movs	r2, #202	; 0xca
 800c716:	625a      	str	r2, [r3, #36]	; 0x24
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2253      	movs	r2, #83	; 0x53
 800c71e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d022      	beq.n	800c774 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c72e:	4b4c      	ldr	r3, [pc, #304]	; (800c860 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a4c      	ldr	r2, [pc, #304]	; (800c864 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c734:	fba2 2303 	umull	r2, r3, r2, r3
 800c738:	0adb      	lsrs	r3, r3, #11
 800c73a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c73e:	fb02 f303 	mul.w	r3, r2, r3
 800c742:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	1e5a      	subs	r2, r3, #1
 800c748:	617a      	str	r2, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	22ff      	movs	r2, #255	; 0xff
 800c754:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2203      	movs	r2, #3
 800c75a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e075      	b.n	800c852 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e7      	bne.n	800c744 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689a      	ldr	r2, [r3, #8]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c782:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c784:	4b36      	ldr	r3, [pc, #216]	; (800c860 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a36      	ldr	r2, [pc, #216]	; (800c864 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c78a:	fba2 2303 	umull	r2, r3, r2, r3
 800c78e:	0adb      	lsrs	r3, r3, #11
 800c790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c794:	fb02 f303 	mul.w	r3, r2, r3
 800c798:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	1e5a      	subs	r2, r3, #1
 800c79e:	617a      	str	r2, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10b      	bne.n	800c7bc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	22ff      	movs	r2, #255	; 0xff
 800c7aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2203      	movs	r2, #3
 800c7b0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e04a      	b.n	800c852 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f003 0304 	and.w	r3, r3, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0e7      	beq.n	800c79a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	689a      	ldr	r2, [r3, #8]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 0207 	bic.w	r2, r2, #7
 800c7e0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6899      	ldr	r1, [r3, #8]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a1c      	ldr	r2, [pc, #112]	; (800c868 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c7f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7fc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	4a19      	ldr	r2, [pc, #100]	; (800c868 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c808:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	b2da      	uxtb	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800c81a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c82a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c83a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	22ff      	movs	r2, #255	; 0xff
 800c842:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2201      	movs	r2, #1
 800c848:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20000000 	.word	0x20000000
 800c864:	10624dd3 	.word	0x10624dd3
 800c868:	40013c00 	.word	0x40013c00

0800c86c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7f1b      	ldrb	r3, [r3, #28]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800c880:	2302      	movs	r3, #2
 800c882:	e047      	b.n	800c914 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2202      	movs	r2, #2
 800c88e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	22ca      	movs	r2, #202	; 0xca
 800c896:	625a      	str	r2, [r3, #36]	; 0x24
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2253      	movs	r2, #83	; 0x53
 800c89e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689a      	ldr	r2, [r3, #8]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8ae:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	689a      	ldr	r2, [r3, #8]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8be:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c8c0:	f7fb fbd2 	bl	8008068 <HAL_GetTick>
 800c8c4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c8c6:	e013      	b.n	800c8f0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c8c8:	f7fb fbce 	bl	8008068 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8d6:	d90b      	bls.n	800c8f0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	22ff      	movs	r2, #255	; 0xff
 800c8de:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e011      	b.n	800c914 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	f003 0304 	and.w	r3, r3, #4
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0e4      	beq.n	800c8c8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	22ff      	movs	r2, #255	; 0xff
 800c904:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e07b      	b.n	800ca3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	2b00      	cmp	r3, #0
 800c948:	d108      	bne.n	800c95c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c952:	d009      	beq.n	800c968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	61da      	str	r2, [r3, #28]
 800c95a:	e005      	b.n	800c968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f5 fff2 	bl	800296c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c99e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	f003 0302 	and.w	r3, r3, #2
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	695b      	ldr	r3, [r3, #20]
 800c9ca:	f003 0301 	and.w	r3, r3, #1
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ec:	ea42 0103 	orr.w	r1, r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	0c1b      	lsrs	r3, r3, #16
 800ca06:	f003 0104 	and.w	r1, r3, #4
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0e:	f003 0210 	and.w	r2, r3, #16
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	69da      	ldr	r2, [r3, #28]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b088      	sub	sp, #32
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	603b      	str	r3, [r7, #0]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d101      	bne.n	800ca64 <HAL_SPI_Transmit+0x22>
 800ca60:	2302      	movs	r3, #2
 800ca62:	e126      	b.n	800ccb2 <HAL_SPI_Transmit+0x270>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca6c:	f7fb fafc 	bl	8008068 <HAL_GetTick>
 800ca70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d002      	beq.n	800ca88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ca82:	2302      	movs	r3, #2
 800ca84:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca86:	e10b      	b.n	800cca0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <HAL_SPI_Transmit+0x52>
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca98:	e102      	b.n	800cca0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	88fa      	ldrh	r2, [r7, #6]
 800cab2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	88fa      	ldrh	r2, [r7, #6]
 800cab8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cae0:	d10f      	bne.n	800cb02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb0c:	2b40      	cmp	r3, #64	; 0x40
 800cb0e:	d007      	beq.n	800cb20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb28:	d14b      	bne.n	800cbc2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <HAL_SPI_Transmit+0xf6>
 800cb32:	8afb      	ldrh	r3, [r7, #22]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d13e      	bne.n	800cbb6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3c:	881a      	ldrh	r2, [r3, #0]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb48:	1c9a      	adds	r2, r3, #2
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3b01      	subs	r3, #1
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cb5c:	e02b      	b.n	800cbb6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f003 0302 	and.w	r3, r3, #2
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d112      	bne.n	800cb92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	881a      	ldrh	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7c:	1c9a      	adds	r2, r3, #2
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	86da      	strh	r2, [r3, #54]	; 0x36
 800cb90:	e011      	b.n	800cbb6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb92:	f7fb fa69 	bl	8008068 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d803      	bhi.n	800cbaa <HAL_SPI_Transmit+0x168>
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba8:	d102      	bne.n	800cbb0 <HAL_SPI_Transmit+0x16e>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cbb4:	e074      	b.n	800cca0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1ce      	bne.n	800cb5e <HAL_SPI_Transmit+0x11c>
 800cbc0:	e04c      	b.n	800cc5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <HAL_SPI_Transmit+0x18e>
 800cbca:	8afb      	ldrh	r3, [r7, #22]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d140      	bne.n	800cc52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	330c      	adds	r3, #12
 800cbda:	7812      	ldrb	r2, [r2, #0]
 800cbdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cbf6:	e02c      	b.n	800cc52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d113      	bne.n	800cc2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	330c      	adds	r3, #12
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc18:	1c5a      	adds	r2, r3, #1
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	3b01      	subs	r3, #1
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	86da      	strh	r2, [r3, #54]	; 0x36
 800cc2c:	e011      	b.n	800cc52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc2e:	f7fb fa1b 	bl	8008068 <HAL_GetTick>
 800cc32:	4602      	mov	r2, r0
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d803      	bhi.n	800cc46 <HAL_SPI_Transmit+0x204>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc44:	d102      	bne.n	800cc4c <HAL_SPI_Transmit+0x20a>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cc50:	e026      	b.n	800cca0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1cd      	bne.n	800cbf8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc5c:	69ba      	ldr	r2, [r7, #24]
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 fbcb 	bl	800d3fc <SPI_EndRxTxTransaction>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	613b      	str	r3, [r7, #16]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	613b      	str	r3, [r7, #16]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	613b      	str	r3, [r7, #16]
 800cc8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	77fb      	strb	r3, [r7, #31]
 800cc9c:	e000      	b.n	800cca0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cc9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ccb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3720      	adds	r7, #32
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b088      	sub	sp, #32
 800ccbe:	af02      	add	r7, sp, #8
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	603b      	str	r3, [r7, #0]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccd6:	d112      	bne.n	800ccfe <HAL_SPI_Receive+0x44>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10e      	bne.n	800ccfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2204      	movs	r2, #4
 800cce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cce8:	88fa      	ldrh	r2, [r7, #6]
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 f8f1 	bl	800cedc <HAL_SPI_TransmitReceive>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	e0ea      	b.n	800ced4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_SPI_Receive+0x52>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e0e3      	b.n	800ced4 <HAL_SPI_Receive+0x21a>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd14:	f7fb f9a8 	bl	8008068 <HAL_GetTick>
 800cd18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d002      	beq.n	800cd2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cd26:	2302      	movs	r3, #2
 800cd28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd2a:	e0ca      	b.n	800cec2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <HAL_SPI_Receive+0x7e>
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d102      	bne.n	800cd3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd3c:	e0c1      	b.n	800cec2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2204      	movs	r2, #4
 800cd42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	88fa      	ldrh	r2, [r7, #6]
 800cd56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	88fa      	ldrh	r2, [r7, #6]
 800cd5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd84:	d10f      	bne.n	800cda6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cda4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b40      	cmp	r3, #64	; 0x40
 800cdb2:	d007      	beq.n	800cdc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d162      	bne.n	800ce92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cdcc:	e02e      	b.n	800ce2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d115      	bne.n	800ce08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f103 020c 	add.w	r2, r3, #12
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde8:	7812      	ldrb	r2, [r2, #0]
 800cdea:	b2d2      	uxtb	r2, r2
 800cdec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	1c5a      	adds	r2, r3, #1
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce06:	e011      	b.n	800ce2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce08:	f7fb f92e 	bl	8008068 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d803      	bhi.n	800ce20 <HAL_SPI_Receive+0x166>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1e:	d102      	bne.n	800ce26 <HAL_SPI_Receive+0x16c>
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800ce26:	2303      	movs	r3, #3
 800ce28:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce2a:	e04a      	b.n	800cec2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1cb      	bne.n	800cdce <HAL_SPI_Receive+0x114>
 800ce36:	e031      	b.n	800ce9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d113      	bne.n	800ce6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68da      	ldr	r2, [r3, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce50:	b292      	uxth	r2, r2
 800ce52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce58:	1c9a      	adds	r2, r3, #2
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3b01      	subs	r3, #1
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce6c:	e011      	b.n	800ce92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce6e:	f7fb f8fb 	bl	8008068 <HAL_GetTick>
 800ce72:	4602      	mov	r2, r0
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d803      	bhi.n	800ce86 <HAL_SPI_Receive+0x1cc>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d102      	bne.n	800ce8c <HAL_SPI_Receive+0x1d2>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce90:	e017      	b.n	800cec2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1cd      	bne.n	800ce38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 fa45 	bl	800d330 <SPI_EndRxTransaction>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2220      	movs	r2, #32
 800ceb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e000      	b.n	800cec2 <HAL_SPI_Receive+0x208>
  }

error :
 800cec0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08c      	sub	sp, #48	; 0x30
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ceea:	2301      	movs	r3, #1
 800ceec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d101      	bne.n	800cf02 <HAL_SPI_TransmitReceive+0x26>
 800cefe:	2302      	movs	r3, #2
 800cf00:	e18a      	b.n	800d218 <HAL_SPI_TransmitReceive+0x33c>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf0a:	f7fb f8ad 	bl	8008068 <HAL_GetTick>
 800cf0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cf20:	887b      	ldrh	r3, [r7, #2]
 800cf22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cf24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d00f      	beq.n	800cf4c <HAL_SPI_TransmitReceive+0x70>
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf32:	d107      	bne.n	800cf44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <HAL_SPI_TransmitReceive+0x68>
 800cf3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf40:	2b04      	cmp	r3, #4
 800cf42:	d003      	beq.n	800cf4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cf44:	2302      	movs	r3, #2
 800cf46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cf4a:	e15b      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <HAL_SPI_TransmitReceive+0x82>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <HAL_SPI_TransmitReceive+0x82>
 800cf58:	887b      	ldrh	r3, [r7, #2]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cf64:	e14e      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d003      	beq.n	800cf7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2205      	movs	r2, #5
 800cf76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	887a      	ldrh	r2, [r7, #2]
 800cf8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	887a      	ldrh	r2, [r7, #2]
 800cf90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	887a      	ldrh	r2, [r7, #2]
 800cf9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	887a      	ldrh	r2, [r7, #2]
 800cfa2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfba:	2b40      	cmp	r3, #64	; 0x40
 800cfbc:	d007      	beq.n	800cfce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfd6:	d178      	bne.n	800d0ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <HAL_SPI_TransmitReceive+0x10a>
 800cfe0:	8b7b      	ldrh	r3, [r7, #26]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d166      	bne.n	800d0b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfea:	881a      	ldrh	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	1c9a      	adds	r2, r3, #2
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d000:	b29b      	uxth	r3, r3
 800d002:	3b01      	subs	r3, #1
 800d004:	b29a      	uxth	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d00a:	e053      	b.n	800d0b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f003 0302 	and.w	r3, r3, #2
 800d016:	2b02      	cmp	r3, #2
 800d018:	d11b      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x176>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d01e:	b29b      	uxth	r3, r3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d016      	beq.n	800d052 <HAL_SPI_TransmitReceive+0x176>
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	2b01      	cmp	r3, #1
 800d028:	d113      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02e:	881a      	ldrh	r2, [r3, #0]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03a:	1c9a      	adds	r2, r3, #2
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d044:	b29b      	uxth	r3, r3
 800d046:	3b01      	subs	r3, #1
 800d048:	b29a      	uxth	r2, r3
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d04e:	2300      	movs	r3, #0
 800d050:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d119      	bne.n	800d094 <HAL_SPI_TransmitReceive+0x1b8>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d064:	b29b      	uxth	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d014      	beq.n	800d094 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68da      	ldr	r2, [r3, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d074:	b292      	uxth	r2, r2
 800d076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07c:	1c9a      	adds	r2, r3, #2
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d086:	b29b      	uxth	r3, r3
 800d088:	3b01      	subs	r3, #1
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d090:	2301      	movs	r3, #1
 800d092:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d094:	f7fa ffe8 	bl	8008068 <HAL_GetTick>
 800d098:	4602      	mov	r2, r0
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d807      	bhi.n	800d0b4 <HAL_SPI_TransmitReceive+0x1d8>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0aa:	d003      	beq.n	800d0b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d0ac:	2303      	movs	r3, #3
 800d0ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d0b2:	e0a7      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1a6      	bne.n	800d00c <HAL_SPI_TransmitReceive+0x130>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1a1      	bne.n	800d00c <HAL_SPI_TransmitReceive+0x130>
 800d0c8:	e07c      	b.n	800d1c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <HAL_SPI_TransmitReceive+0x1fc>
 800d0d2:	8b7b      	ldrh	r3, [r7, #26]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d16b      	bne.n	800d1b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	330c      	adds	r3, #12
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0fe:	e057      	b.n	800d1b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f003 0302 	and.w	r3, r3, #2
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d11c      	bne.n	800d148 <HAL_SPI_TransmitReceive+0x26c>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d112:	b29b      	uxth	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	d017      	beq.n	800d148 <HAL_SPI_TransmitReceive+0x26c>
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d114      	bne.n	800d148 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	330c      	adds	r3, #12
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	b29a      	uxth	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d144:	2300      	movs	r3, #0
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	2b01      	cmp	r3, #1
 800d154:	d119      	bne.n	800d18a <HAL_SPI_TransmitReceive+0x2ae>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d014      	beq.n	800d18a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68da      	ldr	r2, [r3, #12]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	3b01      	subs	r3, #1
 800d180:	b29a      	uxth	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d186:	2301      	movs	r3, #1
 800d188:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d18a:	f7fa ff6d 	bl	8008068 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d196:	429a      	cmp	r2, r3
 800d198:	d803      	bhi.n	800d1a2 <HAL_SPI_TransmitReceive+0x2c6>
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a0:	d102      	bne.n	800d1a8 <HAL_SPI_TransmitReceive+0x2cc>
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d1ae:	e029      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1a2      	bne.n	800d100 <HAL_SPI_TransmitReceive+0x224>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d19d      	bne.n	800d100 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 f917 	bl	800d3fc <SPI_EndRxTxTransaction>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d006      	beq.n	800d1e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2220      	movs	r2, #32
 800d1de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d1e0:	e010      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10b      	bne.n	800d202 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	617b      	str	r3, [r7, #20]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	e000      	b.n	800d204 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3730      	adds	r7, #48	; 0x30
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	603b      	str	r3, [r7, #0]
 800d22c:	4613      	mov	r3, r2
 800d22e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d230:	f7fa ff1a 	bl	8008068 <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	1a9b      	subs	r3, r3, r2
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	4413      	add	r3, r2
 800d23e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d240:	f7fa ff12 	bl	8008068 <HAL_GetTick>
 800d244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d246:	4b39      	ldr	r3, [pc, #228]	; (800d32c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	015b      	lsls	r3, r3, #5
 800d24c:	0d1b      	lsrs	r3, r3, #20
 800d24e:	69fa      	ldr	r2, [r7, #28]
 800d250:	fb02 f303 	mul.w	r3, r2, r3
 800d254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d256:	e054      	b.n	800d302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25e:	d050      	beq.n	800d302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d260:	f7fa ff02 	bl	8008068 <HAL_GetTick>
 800d264:	4602      	mov	r2, r0
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	69fa      	ldr	r2, [r7, #28]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d902      	bls.n	800d276 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d13d      	bne.n	800d2f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d28e:	d111      	bne.n	800d2b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d298:	d004      	beq.n	800d2a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a2:	d107      	bne.n	800d2b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2bc:	d10f      	bne.n	800d2de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e017      	b.n	800d322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689a      	ldr	r2, [r3, #8]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	4013      	ands	r3, r2
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	bf0c      	ite	eq
 800d312:	2301      	moveq	r3, #1
 800d314:	2300      	movne	r3, #0
 800d316:	b2db      	uxtb	r3, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d19b      	bne.n	800d258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3720      	adds	r7, #32
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000000 	.word	0x20000000

0800d330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af02      	add	r7, sp, #8
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d344:	d111      	bne.n	800d36a <SPI_EndRxTransaction+0x3a>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d34e:	d004      	beq.n	800d35a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d358:	d107      	bne.n	800d36a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d368:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d372:	d12a      	bne.n	800d3ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d37c:	d012      	beq.n	800d3a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2200      	movs	r2, #0
 800d386:	2180      	movs	r1, #128	; 0x80
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f7ff ff49 	bl	800d220 <SPI_WaitFlagStateUntilTimeout>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d02d      	beq.n	800d3f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d398:	f043 0220 	orr.w	r2, r3, #32
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	e026      	b.n	800d3f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f7ff ff36 	bl	800d220 <SPI_WaitFlagStateUntilTimeout>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01a      	beq.n	800d3f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3be:	f043 0220 	orr.w	r2, r3, #32
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e013      	b.n	800d3f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff ff23 	bl	800d220 <SPI_WaitFlagStateUntilTimeout>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d007      	beq.n	800d3f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e4:	f043 0220 	orr.w	r2, r3, #32
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e000      	b.n	800d3f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b088      	sub	sp, #32
 800d400:	af02      	add	r7, sp, #8
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d408:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <SPI_EndRxTxTransaction+0x7c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a1b      	ldr	r2, [pc, #108]	; (800d47c <SPI_EndRxTxTransaction+0x80>)
 800d40e:	fba2 2303 	umull	r2, r3, r2, r3
 800d412:	0d5b      	lsrs	r3, r3, #21
 800d414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d418:	fb02 f303 	mul.w	r3, r2, r3
 800d41c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d426:	d112      	bne.n	800d44e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2200      	movs	r2, #0
 800d430:	2180      	movs	r1, #128	; 0x80
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fef4 	bl	800d220 <SPI_WaitFlagStateUntilTimeout>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d016      	beq.n	800d46c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d442:	f043 0220 	orr.w	r2, r3, #32
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d44a:	2303      	movs	r3, #3
 800d44c:	e00f      	b.n	800d46e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	3b01      	subs	r3, #1
 800d458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d464:	2b80      	cmp	r3, #128	; 0x80
 800d466:	d0f2      	beq.n	800d44e <SPI_EndRxTxTransaction+0x52>
 800d468:	e000      	b.n	800d46c <SPI_EndRxTxTransaction+0x70>
        break;
 800d46a:	bf00      	nop
  }

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000000 	.word	0x20000000
 800d47c:	165e9f81 	.word	0x165e9f81

0800d480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e041      	b.n	800d516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f839 	bl	800d51e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f000 faea 	bl	800da98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
	...

0800d534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b01      	cmp	r3, #1
 800d546:	d001      	beq.n	800d54c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e04e      	b.n	800d5ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2202      	movs	r2, #2
 800d550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f042 0201 	orr.w	r2, r2, #1
 800d562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a23      	ldr	r2, [pc, #140]	; (800d5f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d022      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d576:	d01d      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a1f      	ldr	r2, [pc, #124]	; (800d5fc <HAL_TIM_Base_Start_IT+0xc8>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d018      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <HAL_TIM_Base_Start_IT+0xcc>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d013      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a1c      	ldr	r2, [pc, #112]	; (800d604 <HAL_TIM_Base_Start_IT+0xd0>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d00e      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a1b      	ldr	r2, [pc, #108]	; (800d608 <HAL_TIM_Base_Start_IT+0xd4>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d009      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a19      	ldr	r2, [pc, #100]	; (800d60c <HAL_TIM_Base_Start_IT+0xd8>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d004      	beq.n	800d5b4 <HAL_TIM_Base_Start_IT+0x80>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a18      	ldr	r2, [pc, #96]	; (800d610 <HAL_TIM_Base_Start_IT+0xdc>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d111      	bne.n	800d5d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	f003 0307 	and.w	r3, r3, #7
 800d5be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b06      	cmp	r3, #6
 800d5c4:	d010      	beq.n	800d5e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f042 0201 	orr.w	r2, r2, #1
 800d5d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d6:	e007      	b.n	800d5e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f042 0201 	orr.w	r2, r2, #1
 800d5e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3714      	adds	r7, #20
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	40010000 	.word	0x40010000
 800d5fc:	40000400 	.word	0x40000400
 800d600:	40000800 	.word	0x40000800
 800d604:	40000c00 	.word	0x40000c00
 800d608:	40010400 	.word	0x40010400
 800d60c:	40014000 	.word	0x40014000
 800d610:	40001800 	.word	0x40001800

0800d614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e041      	b.n	800d6aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7f5 fa4c 	bl	8002ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2202      	movs	r2, #2
 800d644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3304      	adds	r3, #4
 800d650:	4619      	mov	r1, r3
 800d652:	4610      	mov	r0, r2
 800d654:	f000 fa20 	bl	800da98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b082      	sub	sp, #8
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	f003 0302 	and.w	r3, r3, #2
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d122      	bne.n	800d70e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	f003 0302 	and.w	r3, r3, #2
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d11b      	bne.n	800d70e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f06f 0202 	mvn.w	r2, #2
 800d6de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	f003 0303 	and.w	r3, r3, #3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d003      	beq.n	800d6fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f9b1 	bl	800da5c <HAL_TIM_IC_CaptureCallback>
 800d6fa:	e005      	b.n	800d708 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f9a3 	bl	800da48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f9b4 	bl	800da70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	f003 0304 	and.w	r3, r3, #4
 800d718:	2b04      	cmp	r3, #4
 800d71a:	d122      	bne.n	800d762 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	f003 0304 	and.w	r3, r3, #4
 800d726:	2b04      	cmp	r3, #4
 800d728:	d11b      	bne.n	800d762 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f06f 0204 	mvn.w	r2, #4
 800d732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d744:	2b00      	cmp	r3, #0
 800d746:	d003      	beq.n	800d750 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f987 	bl	800da5c <HAL_TIM_IC_CaptureCallback>
 800d74e:	e005      	b.n	800d75c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f979 	bl	800da48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f98a 	bl	800da70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	f003 0308 	and.w	r3, r3, #8
 800d76c:	2b08      	cmp	r3, #8
 800d76e:	d122      	bne.n	800d7b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f003 0308 	and.w	r3, r3, #8
 800d77a:	2b08      	cmp	r3, #8
 800d77c:	d11b      	bne.n	800d7b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f06f 0208 	mvn.w	r2, #8
 800d786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2204      	movs	r2, #4
 800d78c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	f003 0303 	and.w	r3, r3, #3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f95d 	bl	800da5c <HAL_TIM_IC_CaptureCallback>
 800d7a2:	e005      	b.n	800d7b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f94f 	bl	800da48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f960 	bl	800da70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	f003 0310 	and.w	r3, r3, #16
 800d7c0:	2b10      	cmp	r3, #16
 800d7c2:	d122      	bne.n	800d80a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	f003 0310 	and.w	r3, r3, #16
 800d7ce:	2b10      	cmp	r3, #16
 800d7d0:	d11b      	bne.n	800d80a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f06f 0210 	mvn.w	r2, #16
 800d7da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2208      	movs	r2, #8
 800d7e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	69db      	ldr	r3, [r3, #28]
 800d7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f933 	bl	800da5c <HAL_TIM_IC_CaptureCallback>
 800d7f6:	e005      	b.n	800d804 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f925 	bl	800da48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f936 	bl	800da70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b01      	cmp	r3, #1
 800d816:	d10e      	bne.n	800d836 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	f003 0301 	and.w	r3, r3, #1
 800d822:	2b01      	cmp	r3, #1
 800d824:	d107      	bne.n	800d836 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f06f 0201 	mvn.w	r2, #1
 800d82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7f4 ff09 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d840:	2b80      	cmp	r3, #128	; 0x80
 800d842:	d10e      	bne.n	800d862 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d84e:	2b80      	cmp	r3, #128	; 0x80
 800d850:	d107      	bne.n	800d862 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fbf1 	bl	800e044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86c:	2b40      	cmp	r3, #64	; 0x40
 800d86e:	d10e      	bne.n	800d88e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87a:	2b40      	cmp	r3, #64	; 0x40
 800d87c:	d107      	bne.n	800d88e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f8fb 	bl	800da84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	f003 0320 	and.w	r3, r3, #32
 800d898:	2b20      	cmp	r3, #32
 800d89a:	d10e      	bne.n	800d8ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	f003 0320 	and.w	r3, r3, #32
 800d8a6:	2b20      	cmp	r3, #32
 800d8a8:	d107      	bne.n	800d8ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f06f 0220 	mvn.w	r2, #32
 800d8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fbbb 	bl	800e030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8de:	2302      	movs	r3, #2
 800d8e0:	e0ae      	b.n	800da40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b0c      	cmp	r3, #12
 800d8ee:	f200 809f 	bhi.w	800da30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d8f2:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d92d 	.word	0x0800d92d
 800d8fc:	0800da31 	.word	0x0800da31
 800d900:	0800da31 	.word	0x0800da31
 800d904:	0800da31 	.word	0x0800da31
 800d908:	0800d96d 	.word	0x0800d96d
 800d90c:	0800da31 	.word	0x0800da31
 800d910:	0800da31 	.word	0x0800da31
 800d914:	0800da31 	.word	0x0800da31
 800d918:	0800d9af 	.word	0x0800d9af
 800d91c:	0800da31 	.word	0x0800da31
 800d920:	0800da31 	.word	0x0800da31
 800d924:	0800da31 	.word	0x0800da31
 800d928:	0800d9ef 	.word	0x0800d9ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68b9      	ldr	r1, [r7, #8]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 f950 	bl	800dbd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	699a      	ldr	r2, [r3, #24]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f042 0208 	orr.w	r2, r2, #8
 800d946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699a      	ldr	r2, [r3, #24]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 0204 	bic.w	r2, r2, #4
 800d956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6999      	ldr	r1, [r3, #24]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	691a      	ldr	r2, [r3, #16]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	430a      	orrs	r2, r1
 800d968:	619a      	str	r2, [r3, #24]
      break;
 800d96a:	e064      	b.n	800da36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	4618      	mov	r0, r3
 800d974:	f000 f9a0 	bl	800dcb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	699a      	ldr	r2, [r3, #24]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	699a      	ldr	r2, [r3, #24]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6999      	ldr	r1, [r3, #24]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	021a      	lsls	r2, r3, #8
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	430a      	orrs	r2, r1
 800d9aa:	619a      	str	r2, [r3, #24]
      break;
 800d9ac:	e043      	b.n	800da36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 f9f5 	bl	800dda4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	69da      	ldr	r2, [r3, #28]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f042 0208 	orr.w	r2, r2, #8
 800d9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69da      	ldr	r2, [r3, #28]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f022 0204 	bic.w	r2, r2, #4
 800d9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69d9      	ldr	r1, [r3, #28]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	691a      	ldr	r2, [r3, #16]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	61da      	str	r2, [r3, #28]
      break;
 800d9ec:	e023      	b.n	800da36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68b9      	ldr	r1, [r7, #8]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 fa49 	bl	800de8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69da      	ldr	r2, [r3, #28]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	69da      	ldr	r2, [r3, #28]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	69d9      	ldr	r1, [r3, #28]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	021a      	lsls	r2, r3, #8
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	61da      	str	r2, [r3, #28]
      break;
 800da2e:	e002      	b.n	800da36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	75fb      	strb	r3, [r7, #23]
      break;
 800da34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a40      	ldr	r2, [pc, #256]	; (800dbac <TIM_Base_SetConfig+0x114>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d013      	beq.n	800dad8 <TIM_Base_SetConfig+0x40>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab6:	d00f      	beq.n	800dad8 <TIM_Base_SetConfig+0x40>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4a3d      	ldr	r2, [pc, #244]	; (800dbb0 <TIM_Base_SetConfig+0x118>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d00b      	beq.n	800dad8 <TIM_Base_SetConfig+0x40>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	4a3c      	ldr	r2, [pc, #240]	; (800dbb4 <TIM_Base_SetConfig+0x11c>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d007      	beq.n	800dad8 <TIM_Base_SetConfig+0x40>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4a3b      	ldr	r2, [pc, #236]	; (800dbb8 <TIM_Base_SetConfig+0x120>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d003      	beq.n	800dad8 <TIM_Base_SetConfig+0x40>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a3a      	ldr	r2, [pc, #232]	; (800dbbc <TIM_Base_SetConfig+0x124>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d108      	bne.n	800daea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4a2f      	ldr	r2, [pc, #188]	; (800dbac <TIM_Base_SetConfig+0x114>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d02b      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daf8:	d027      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4a2c      	ldr	r2, [pc, #176]	; (800dbb0 <TIM_Base_SetConfig+0x118>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d023      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a2b      	ldr	r2, [pc, #172]	; (800dbb4 <TIM_Base_SetConfig+0x11c>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d01f      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a2a      	ldr	r2, [pc, #168]	; (800dbb8 <TIM_Base_SetConfig+0x120>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d01b      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a29      	ldr	r2, [pc, #164]	; (800dbbc <TIM_Base_SetConfig+0x124>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d017      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a28      	ldr	r2, [pc, #160]	; (800dbc0 <TIM_Base_SetConfig+0x128>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d013      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a27      	ldr	r2, [pc, #156]	; (800dbc4 <TIM_Base_SetConfig+0x12c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d00f      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a26      	ldr	r2, [pc, #152]	; (800dbc8 <TIM_Base_SetConfig+0x130>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d00b      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a25      	ldr	r2, [pc, #148]	; (800dbcc <TIM_Base_SetConfig+0x134>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d007      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a24      	ldr	r2, [pc, #144]	; (800dbd0 <TIM_Base_SetConfig+0x138>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d003      	beq.n	800db4a <TIM_Base_SetConfig+0xb2>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a23      	ldr	r2, [pc, #140]	; (800dbd4 <TIM_Base_SetConfig+0x13c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d108      	bne.n	800db5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4313      	orrs	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	4313      	orrs	r3, r2
 800db68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	689a      	ldr	r2, [r3, #8]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a0a      	ldr	r2, [pc, #40]	; (800dbac <TIM_Base_SetConfig+0x114>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d003      	beq.n	800db90 <TIM_Base_SetConfig+0xf8>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4a0c      	ldr	r2, [pc, #48]	; (800dbbc <TIM_Base_SetConfig+0x124>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d103      	bne.n	800db98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	691a      	ldr	r2, [r3, #16]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	615a      	str	r2, [r3, #20]
}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	40010000 	.word	0x40010000
 800dbb0:	40000400 	.word	0x40000400
 800dbb4:	40000800 	.word	0x40000800
 800dbb8:	40000c00 	.word	0x40000c00
 800dbbc:	40010400 	.word	0x40010400
 800dbc0:	40014000 	.word	0x40014000
 800dbc4:	40014400 	.word	0x40014400
 800dbc8:	40014800 	.word	0x40014800
 800dbcc:	40001800 	.word	0x40001800
 800dbd0:	40001c00 	.word	0x40001c00
 800dbd4:	40002000 	.word	0x40002000

0800dbd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	f023 0201 	bic.w	r2, r3, #1
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f023 0303 	bic.w	r3, r3, #3
 800dc0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f023 0302 	bic.w	r3, r3, #2
 800dc20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a20      	ldr	r2, [pc, #128]	; (800dcb0 <TIM_OC1_SetConfig+0xd8>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d003      	beq.n	800dc3c <TIM_OC1_SetConfig+0x64>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a1f      	ldr	r2, [pc, #124]	; (800dcb4 <TIM_OC1_SetConfig+0xdc>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d10c      	bne.n	800dc56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	f023 0308 	bic.w	r3, r3, #8
 800dc42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f023 0304 	bic.w	r3, r3, #4
 800dc54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4a15      	ldr	r2, [pc, #84]	; (800dcb0 <TIM_OC1_SetConfig+0xd8>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d003      	beq.n	800dc66 <TIM_OC1_SetConfig+0x8e>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4a14      	ldr	r2, [pc, #80]	; (800dcb4 <TIM_OC1_SetConfig+0xdc>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d111      	bne.n	800dc8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	693a      	ldr	r2, [r7, #16]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	693a      	ldr	r2, [r7, #16]
 800dc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685a      	ldr	r2, [r3, #4]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	621a      	str	r2, [r3, #32]
}
 800dca4:	bf00      	nop
 800dca6:	371c      	adds	r7, #28
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	40010000 	.word	0x40010000
 800dcb4:	40010400 	.word	0x40010400

0800dcb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	f023 0210 	bic.w	r2, r3, #16
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	021b      	lsls	r3, r3, #8
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	f023 0320 	bic.w	r3, r3, #32
 800dd02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	011b      	lsls	r3, r3, #4
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a22      	ldr	r2, [pc, #136]	; (800dd9c <TIM_OC2_SetConfig+0xe4>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d003      	beq.n	800dd20 <TIM_OC2_SetConfig+0x68>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a21      	ldr	r2, [pc, #132]	; (800dda0 <TIM_OC2_SetConfig+0xe8>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d10d      	bne.n	800dd3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a17      	ldr	r2, [pc, #92]	; (800dd9c <TIM_OC2_SetConfig+0xe4>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d003      	beq.n	800dd4c <TIM_OC2_SetConfig+0x94>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a16      	ldr	r2, [pc, #88]	; (800dda0 <TIM_OC2_SetConfig+0xe8>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d113      	bne.n	800dd74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	693a      	ldr	r2, [r7, #16]
 800dd78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	621a      	str	r2, [r3, #32]
}
 800dd8e:	bf00      	nop
 800dd90:	371c      	adds	r7, #28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	40010000 	.word	0x40010000
 800dda0:	40010400 	.word	0x40010400

0800dda4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b087      	sub	sp, #28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	69db      	ldr	r3, [r3, #28]
 800ddca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 0303 	bic.w	r3, r3, #3
 800ddda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	021b      	lsls	r3, r3, #8
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a21      	ldr	r2, [pc, #132]	; (800de84 <TIM_OC3_SetConfig+0xe0>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d003      	beq.n	800de0a <TIM_OC3_SetConfig+0x66>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a20      	ldr	r2, [pc, #128]	; (800de88 <TIM_OC3_SetConfig+0xe4>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d10d      	bne.n	800de26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	021b      	lsls	r3, r3, #8
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a16      	ldr	r2, [pc, #88]	; (800de84 <TIM_OC3_SetConfig+0xe0>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d003      	beq.n	800de36 <TIM_OC3_SetConfig+0x92>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a15      	ldr	r2, [pc, #84]	; (800de88 <TIM_OC3_SetConfig+0xe4>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d113      	bne.n	800de5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	011b      	lsls	r3, r3, #4
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	4313      	orrs	r3, r2
 800de50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	011b      	lsls	r3, r3, #4
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	621a      	str	r2, [r3, #32]
}
 800de78:	bf00      	nop
 800de7a:	371c      	adds	r7, #28
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	40010000 	.word	0x40010000
 800de88:	40010400 	.word	0x40010400

0800de8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800deba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	021b      	lsls	r3, r3, #8
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4313      	orrs	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ded6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	031b      	lsls	r3, r3, #12
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a12      	ldr	r2, [pc, #72]	; (800df30 <TIM_OC4_SetConfig+0xa4>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d003      	beq.n	800def4 <TIM_OC4_SetConfig+0x68>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a11      	ldr	r2, [pc, #68]	; (800df34 <TIM_OC4_SetConfig+0xa8>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d109      	bne.n	800df08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800defa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	019b      	lsls	r3, r3, #6
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	4313      	orrs	r3, r2
 800df06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	621a      	str	r2, [r3, #32]
}
 800df22:	bf00      	nop
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	40010000 	.word	0x40010000
 800df34:	40010400 	.word	0x40010400

0800df38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d101      	bne.n	800df50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df4c:	2302      	movs	r3, #2
 800df4e:	e05a      	b.n	800e006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2202      	movs	r2, #2
 800df5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	4313      	orrs	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a21      	ldr	r2, [pc, #132]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d022      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df9c:	d01d      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a1d      	ldr	r2, [pc, #116]	; (800e018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d018      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a1b      	ldr	r2, [pc, #108]	; (800e01c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d013      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a1a      	ldr	r2, [pc, #104]	; (800e020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00e      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a18      	ldr	r2, [pc, #96]	; (800e024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d009      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a17      	ldr	r2, [pc, #92]	; (800e028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d004      	beq.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a15      	ldr	r2, [pc, #84]	; (800e02c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d10c      	bne.n	800dff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	40010000 	.word	0x40010000
 800e018:	40000400 	.word	0x40000400
 800e01c:	40000800 	.word	0x40000800
 800e020:	40000c00 	.word	0x40000c00
 800e024:	40010400 	.word	0x40010400
 800e028:	40014000 	.word	0x40014000
 800e02c:	40001800 	.word	0x40001800

0800e030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	e03f      	b.n	800e0ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7f4 fd82 	bl	8002b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2224      	movs	r2, #36	; 0x24
 800e088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e09a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f9cb 	bl	800e438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	691a      	ldr	r2, [r3, #16]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	695a      	ldr	r2, [r3, #20]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68da      	ldr	r2, [r3, #12]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2220      	movs	r2, #32
 800e0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2220      	movs	r2, #32
 800e0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b08a      	sub	sp, #40	; 0x28
 800e0f6:	af02      	add	r7, sp, #8
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	603b      	str	r3, [r7, #0]
 800e0fe:	4613      	mov	r3, r2
 800e100:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b20      	cmp	r3, #32
 800e110:	d17c      	bne.n	800e20c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <HAL_UART_Transmit+0x2c>
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	e075      	b.n	800e20e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d101      	bne.n	800e130 <HAL_UART_Transmit+0x3e>
 800e12c:	2302      	movs	r3, #2
 800e12e:	e06e      	b.n	800e20e <HAL_UART_Transmit+0x11c>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2221      	movs	r2, #33	; 0x21
 800e142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e146:	f7f9 ff8f 	bl	8008068 <HAL_GetTick>
 800e14a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	88fa      	ldrh	r2, [r7, #6]
 800e150:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	88fa      	ldrh	r2, [r7, #6]
 800e156:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e160:	d108      	bne.n	800e174 <HAL_UART_Transmit+0x82>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d104      	bne.n	800e174 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	61bb      	str	r3, [r7, #24]
 800e172:	e003      	b.n	800e17c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e184:	e02a      	b.n	800e1dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2200      	movs	r2, #0
 800e18e:	2180      	movs	r1, #128	; 0x80
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f000 f8e2 	bl	800e35a <UART_WaitOnFlagUntilTimeout>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e036      	b.n	800e20e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10b      	bne.n	800e1be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	e007      	b.n	800e1ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	781a      	ldrb	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1cf      	bne.n	800e186 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	2140      	movs	r1, #64	; 0x40
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f8b2 	bl	800e35a <UART_WaitOnFlagUntilTimeout>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e006      	b.n	800e20e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2220      	movs	r2, #32
 800e204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e208:	2300      	movs	r3, #0
 800e20a:	e000      	b.n	800e20e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e20c:	2302      	movs	r3, #2
  }
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3720      	adds	r7, #32
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b08a      	sub	sp, #40	; 0x28
 800e21a:	af02      	add	r7, sp, #8
 800e21c:	60f8      	str	r0, [r7, #12]
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	603b      	str	r3, [r7, #0]
 800e222:	4613      	mov	r3, r2
 800e224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b20      	cmp	r3, #32
 800e234:	f040 808c 	bne.w	800e350 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <HAL_UART_Receive+0x2e>
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e084      	b.n	800e352 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d101      	bne.n	800e256 <HAL_UART_Receive+0x40>
 800e252:	2302      	movs	r3, #2
 800e254:	e07d      	b.n	800e352 <HAL_UART_Receive+0x13c>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2222      	movs	r2, #34	; 0x22
 800e268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e272:	f7f9 fef9 	bl	8008068 <HAL_GetTick>
 800e276:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	88fa      	ldrh	r2, [r7, #6]
 800e27c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	88fa      	ldrh	r2, [r7, #6]
 800e282:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e28c:	d108      	bne.n	800e2a0 <HAL_UART_Receive+0x8a>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d104      	bne.n	800e2a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e296:	2300      	movs	r3, #0
 800e298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e003      	b.n	800e2a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e2b0:	e043      	b.n	800e33a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	2120      	movs	r1, #32
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f84c 	bl	800e35a <UART_WaitOnFlagUntilTimeout>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e042      	b.n	800e352 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10c      	bne.n	800e2ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	3302      	adds	r3, #2
 800e2e8:	61bb      	str	r3, [r7, #24]
 800e2ea:	e01f      	b.n	800e32c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2f4:	d007      	beq.n	800e306 <HAL_UART_Receive+0xf0>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10a      	bne.n	800e314 <HAL_UART_Receive+0xfe>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	701a      	strb	r2, [r3, #0]
 800e312:	e008      	b.n	800e326 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e320:	b2da      	uxtb	r2, r3
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	3301      	adds	r3, #1
 800e32a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e330:	b29b      	uxth	r3, r3
 800e332:	3b01      	subs	r3, #1
 800e334:	b29a      	uxth	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e33e:	b29b      	uxth	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1b6      	bne.n	800e2b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2220      	movs	r2, #32
 800e348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	e000      	b.n	800e352 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e350:	2302      	movs	r3, #2
  }
}
 800e352:	4618      	mov	r0, r3
 800e354:	3720      	adds	r7, #32
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b090      	sub	sp, #64	; 0x40
 800e35e:	af00      	add	r7, sp, #0
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	4613      	mov	r3, r2
 800e368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e36a:	e050      	b.n	800e40e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e372:	d04c      	beq.n	800e40e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e376:	2b00      	cmp	r3, #0
 800e378:	d007      	beq.n	800e38a <UART_WaitOnFlagUntilTimeout+0x30>
 800e37a:	f7f9 fe75 	bl	8008068 <HAL_GetTick>
 800e37e:	4602      	mov	r2, r0
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e386:	429a      	cmp	r2, r3
 800e388:	d241      	bcs.n	800e40e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	330c      	adds	r3, #12
 800e390:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e394:	e853 3f00 	ldrex	r3, [r3]
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	330c      	adds	r3, #12
 800e3a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3aa:	637a      	str	r2, [r7, #52]	; 0x34
 800e3ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3b2:	e841 2300 	strex	r3, r2, [r1]
 800e3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1e5      	bne.n	800e38a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3314      	adds	r3, #20
 800e3c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	e853 3f00 	ldrex	r3, [r3]
 800e3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	f023 0301 	bic.w	r3, r3, #1
 800e3d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3314      	adds	r3, #20
 800e3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3de:	623a      	str	r2, [r7, #32]
 800e3e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e2:	69f9      	ldr	r1, [r7, #28]
 800e3e4:	6a3a      	ldr	r2, [r7, #32]
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1e5      	bne.n	800e3be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2220      	movs	r2, #32
 800e3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2220      	movs	r2, #32
 800e3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e40a:	2303      	movs	r3, #3
 800e40c:	e00f      	b.n	800e42e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4013      	ands	r3, r2
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	bf0c      	ite	eq
 800e41e:	2301      	moveq	r3, #1
 800e420:	2300      	movne	r3, #0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	461a      	mov	r2, r3
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d09f      	beq.n	800e36c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3740      	adds	r7, #64	; 0x40
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	b09f      	sub	sp, #124	; 0x7c
 800e43e:	af00      	add	r7, sp, #0
 800e440:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e44e:	68d9      	ldr	r1, [r3, #12]
 800e450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	ea40 0301 	orr.w	r3, r0, r1
 800e458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e45c:	689a      	ldr	r2, [r3, #8]
 800e45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	431a      	orrs	r2, r3
 800e464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	431a      	orrs	r2, r3
 800e46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	4313      	orrs	r3, r2
 800e470:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e47c:	f021 010c 	bic.w	r1, r1, #12
 800e480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e486:	430b      	orrs	r3, r1
 800e488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e496:	6999      	ldr	r1, [r3, #24]
 800e498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	ea40 0301 	orr.w	r3, r0, r1
 800e4a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	4bc5      	ldr	r3, [pc, #788]	; (800e7bc <UART_SetConfig+0x384>)
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d004      	beq.n	800e4b6 <UART_SetConfig+0x7e>
 800e4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	4bc3      	ldr	r3, [pc, #780]	; (800e7c0 <UART_SetConfig+0x388>)
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d103      	bne.n	800e4be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e4b6:	f7fd fa65 	bl	800b984 <HAL_RCC_GetPCLK2Freq>
 800e4ba:	6778      	str	r0, [r7, #116]	; 0x74
 800e4bc:	e002      	b.n	800e4c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e4be:	f7fd fa4d 	bl	800b95c <HAL_RCC_GetPCLK1Freq>
 800e4c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4cc:	f040 80b6 	bne.w	800e63c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4d2:	461c      	mov	r4, r3
 800e4d4:	f04f 0500 	mov.w	r5, #0
 800e4d8:	4622      	mov	r2, r4
 800e4da:	462b      	mov	r3, r5
 800e4dc:	1891      	adds	r1, r2, r2
 800e4de:	6439      	str	r1, [r7, #64]	; 0x40
 800e4e0:	415b      	adcs	r3, r3
 800e4e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e4e8:	1912      	adds	r2, r2, r4
 800e4ea:	eb45 0303 	adc.w	r3, r5, r3
 800e4ee:	f04f 0000 	mov.w	r0, #0
 800e4f2:	f04f 0100 	mov.w	r1, #0
 800e4f6:	00d9      	lsls	r1, r3, #3
 800e4f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e4fc:	00d0      	lsls	r0, r2, #3
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	1911      	adds	r1, r2, r4
 800e504:	6639      	str	r1, [r7, #96]	; 0x60
 800e506:	416b      	adcs	r3, r5
 800e508:	667b      	str	r3, [r7, #100]	; 0x64
 800e50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	461a      	mov	r2, r3
 800e510:	f04f 0300 	mov.w	r3, #0
 800e514:	1891      	adds	r1, r2, r2
 800e516:	63b9      	str	r1, [r7, #56]	; 0x38
 800e518:	415b      	adcs	r3, r3
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e51c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e520:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e524:	f7f2 fbc0 	bl	8000ca8 <__aeabi_uldivmod>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4ba5      	ldr	r3, [pc, #660]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e52e:	fba3 2302 	umull	r2, r3, r3, r2
 800e532:	095b      	lsrs	r3, r3, #5
 800e534:	011e      	lsls	r6, r3, #4
 800e536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e538:	461c      	mov	r4, r3
 800e53a:	f04f 0500 	mov.w	r5, #0
 800e53e:	4622      	mov	r2, r4
 800e540:	462b      	mov	r3, r5
 800e542:	1891      	adds	r1, r2, r2
 800e544:	6339      	str	r1, [r7, #48]	; 0x30
 800e546:	415b      	adcs	r3, r3
 800e548:	637b      	str	r3, [r7, #52]	; 0x34
 800e54a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e54e:	1912      	adds	r2, r2, r4
 800e550:	eb45 0303 	adc.w	r3, r5, r3
 800e554:	f04f 0000 	mov.w	r0, #0
 800e558:	f04f 0100 	mov.w	r1, #0
 800e55c:	00d9      	lsls	r1, r3, #3
 800e55e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e562:	00d0      	lsls	r0, r2, #3
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	1911      	adds	r1, r2, r4
 800e56a:	65b9      	str	r1, [r7, #88]	; 0x58
 800e56c:	416b      	adcs	r3, r5
 800e56e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	461a      	mov	r2, r3
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	1891      	adds	r1, r2, r2
 800e57c:	62b9      	str	r1, [r7, #40]	; 0x28
 800e57e:	415b      	adcs	r3, r3
 800e580:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e586:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e58a:	f7f2 fb8d 	bl	8000ca8 <__aeabi_uldivmod>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4b8c      	ldr	r3, [pc, #560]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e594:	fba3 1302 	umull	r1, r3, r3, r2
 800e598:	095b      	lsrs	r3, r3, #5
 800e59a:	2164      	movs	r1, #100	; 0x64
 800e59c:	fb01 f303 	mul.w	r3, r1, r3
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	00db      	lsls	r3, r3, #3
 800e5a4:	3332      	adds	r3, #50	; 0x32
 800e5a6:	4a87      	ldr	r2, [pc, #540]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ac:	095b      	lsrs	r3, r3, #5
 800e5ae:	005b      	lsls	r3, r3, #1
 800e5b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e5b4:	441e      	add	r6, r3
 800e5b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f04f 0100 	mov.w	r1, #0
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	1894      	adds	r4, r2, r2
 800e5c4:	623c      	str	r4, [r7, #32]
 800e5c6:	415b      	adcs	r3, r3
 800e5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e5ce:	1812      	adds	r2, r2, r0
 800e5d0:	eb41 0303 	adc.w	r3, r1, r3
 800e5d4:	f04f 0400 	mov.w	r4, #0
 800e5d8:	f04f 0500 	mov.w	r5, #0
 800e5dc:	00dd      	lsls	r5, r3, #3
 800e5de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e5e2:	00d4      	lsls	r4, r2, #3
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	462b      	mov	r3, r5
 800e5e8:	1814      	adds	r4, r2, r0
 800e5ea:	653c      	str	r4, [r7, #80]	; 0x50
 800e5ec:	414b      	adcs	r3, r1
 800e5ee:	657b      	str	r3, [r7, #84]	; 0x54
 800e5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	f04f 0300 	mov.w	r3, #0
 800e5fa:	1891      	adds	r1, r2, r2
 800e5fc:	61b9      	str	r1, [r7, #24]
 800e5fe:	415b      	adcs	r3, r3
 800e600:	61fb      	str	r3, [r7, #28]
 800e602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e606:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e60a:	f7f2 fb4d 	bl	8000ca8 <__aeabi_uldivmod>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4b6c      	ldr	r3, [pc, #432]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e614:	fba3 1302 	umull	r1, r3, r3, r2
 800e618:	095b      	lsrs	r3, r3, #5
 800e61a:	2164      	movs	r1, #100	; 0x64
 800e61c:	fb01 f303 	mul.w	r3, r1, r3
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	3332      	adds	r3, #50	; 0x32
 800e626:	4a67      	ldr	r2, [pc, #412]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e628:	fba2 2303 	umull	r2, r3, r2, r3
 800e62c:	095b      	lsrs	r3, r3, #5
 800e62e:	f003 0207 	and.w	r2, r3, #7
 800e632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4432      	add	r2, r6
 800e638:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e63a:	e0b9      	b.n	800e7b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e63e:	461c      	mov	r4, r3
 800e640:	f04f 0500 	mov.w	r5, #0
 800e644:	4622      	mov	r2, r4
 800e646:	462b      	mov	r3, r5
 800e648:	1891      	adds	r1, r2, r2
 800e64a:	6139      	str	r1, [r7, #16]
 800e64c:	415b      	adcs	r3, r3
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e654:	1912      	adds	r2, r2, r4
 800e656:	eb45 0303 	adc.w	r3, r5, r3
 800e65a:	f04f 0000 	mov.w	r0, #0
 800e65e:	f04f 0100 	mov.w	r1, #0
 800e662:	00d9      	lsls	r1, r3, #3
 800e664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e668:	00d0      	lsls	r0, r2, #3
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	eb12 0804 	adds.w	r8, r2, r4
 800e672:	eb43 0905 	adc.w	r9, r3, r5
 800e676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f04f 0100 	mov.w	r1, #0
 800e680:	f04f 0200 	mov.w	r2, #0
 800e684:	f04f 0300 	mov.w	r3, #0
 800e688:	008b      	lsls	r3, r1, #2
 800e68a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e68e:	0082      	lsls	r2, r0, #2
 800e690:	4640      	mov	r0, r8
 800e692:	4649      	mov	r1, r9
 800e694:	f7f2 fb08 	bl	8000ca8 <__aeabi_uldivmod>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4b49      	ldr	r3, [pc, #292]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e69e:	fba3 2302 	umull	r2, r3, r3, r2
 800e6a2:	095b      	lsrs	r3, r3, #5
 800e6a4:	011e      	lsls	r6, r3, #4
 800e6a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f04f 0100 	mov.w	r1, #0
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	1894      	adds	r4, r2, r2
 800e6b4:	60bc      	str	r4, [r7, #8]
 800e6b6:	415b      	adcs	r3, r3
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6be:	1812      	adds	r2, r2, r0
 800e6c0:	eb41 0303 	adc.w	r3, r1, r3
 800e6c4:	f04f 0400 	mov.w	r4, #0
 800e6c8:	f04f 0500 	mov.w	r5, #0
 800e6cc:	00dd      	lsls	r5, r3, #3
 800e6ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e6d2:	00d4      	lsls	r4, r2, #3
 800e6d4:	4622      	mov	r2, r4
 800e6d6:	462b      	mov	r3, r5
 800e6d8:	1814      	adds	r4, r2, r0
 800e6da:	64bc      	str	r4, [r7, #72]	; 0x48
 800e6dc:	414b      	adcs	r3, r1
 800e6de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f04f 0100 	mov.w	r1, #0
 800e6ea:	f04f 0200 	mov.w	r2, #0
 800e6ee:	f04f 0300 	mov.w	r3, #0
 800e6f2:	008b      	lsls	r3, r1, #2
 800e6f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e6f8:	0082      	lsls	r2, r0, #2
 800e6fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e6fe:	f7f2 fad3 	bl	8000ca8 <__aeabi_uldivmod>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4b2f      	ldr	r3, [pc, #188]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e708:	fba3 1302 	umull	r1, r3, r3, r2
 800e70c:	095b      	lsrs	r3, r3, #5
 800e70e:	2164      	movs	r1, #100	; 0x64
 800e710:	fb01 f303 	mul.w	r3, r1, r3
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	011b      	lsls	r3, r3, #4
 800e718:	3332      	adds	r3, #50	; 0x32
 800e71a:	4a2a      	ldr	r2, [pc, #168]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e71c:	fba2 2303 	umull	r2, r3, r2, r3
 800e720:	095b      	lsrs	r3, r3, #5
 800e722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e726:	441e      	add	r6, r3
 800e728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e72a:	4618      	mov	r0, r3
 800e72c:	f04f 0100 	mov.w	r1, #0
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	1894      	adds	r4, r2, r2
 800e736:	603c      	str	r4, [r7, #0]
 800e738:	415b      	adcs	r3, r3
 800e73a:	607b      	str	r3, [r7, #4]
 800e73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e740:	1812      	adds	r2, r2, r0
 800e742:	eb41 0303 	adc.w	r3, r1, r3
 800e746:	f04f 0400 	mov.w	r4, #0
 800e74a:	f04f 0500 	mov.w	r5, #0
 800e74e:	00dd      	lsls	r5, r3, #3
 800e750:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e754:	00d4      	lsls	r4, r2, #3
 800e756:	4622      	mov	r2, r4
 800e758:	462b      	mov	r3, r5
 800e75a:	eb12 0a00 	adds.w	sl, r2, r0
 800e75e:	eb43 0b01 	adc.w	fp, r3, r1
 800e762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	4618      	mov	r0, r3
 800e768:	f04f 0100 	mov.w	r1, #0
 800e76c:	f04f 0200 	mov.w	r2, #0
 800e770:	f04f 0300 	mov.w	r3, #0
 800e774:	008b      	lsls	r3, r1, #2
 800e776:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e77a:	0082      	lsls	r2, r0, #2
 800e77c:	4650      	mov	r0, sl
 800e77e:	4659      	mov	r1, fp
 800e780:	f7f2 fa92 	bl	8000ca8 <__aeabi_uldivmod>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4b0e      	ldr	r3, [pc, #56]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e78a:	fba3 1302 	umull	r1, r3, r3, r2
 800e78e:	095b      	lsrs	r3, r3, #5
 800e790:	2164      	movs	r1, #100	; 0x64
 800e792:	fb01 f303 	mul.w	r3, r1, r3
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	011b      	lsls	r3, r3, #4
 800e79a:	3332      	adds	r3, #50	; 0x32
 800e79c:	4a09      	ldr	r2, [pc, #36]	; (800e7c4 <UART_SetConfig+0x38c>)
 800e79e:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a2:	095b      	lsrs	r3, r3, #5
 800e7a4:	f003 020f 	and.w	r2, r3, #15
 800e7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4432      	add	r2, r6
 800e7ae:	609a      	str	r2, [r3, #8]
}
 800e7b0:	bf00      	nop
 800e7b2:	377c      	adds	r7, #124	; 0x7c
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ba:	bf00      	nop
 800e7bc:	40011000 	.word	0x40011000
 800e7c0:	40011400 	.word	0x40011400
 800e7c4:	51eb851f 	.word	0x51eb851f

0800e7c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	f107 001c 	add.w	r0, r7, #28
 800e7d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d122      	bne.n	800e826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e7f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d105      	bne.n	800e81a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f001 fb1c 	bl	800fe58 <USB_CoreReset>
 800e820:	4603      	mov	r3, r0
 800e822:	73fb      	strb	r3, [r7, #15]
 800e824:	e01a      	b.n	800e85c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f001 fb10 	bl	800fe58 <USB_CoreReset>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38
 800e84e:	e005      	b.n	800e85c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d10b      	bne.n	800e87a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f043 0206 	orr.w	r2, r3, #6
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f043 0220 	orr.w	r2, r3, #32
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e886:	b004      	add	sp, #16
 800e888:	4770      	bx	lr
	...

0800e88c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b087      	sub	sp, #28
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	4613      	mov	r3, r2
 800e898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d165      	bne.n	800e96c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	4a41      	ldr	r2, [pc, #260]	; (800e9a8 <USB_SetTurnaroundTime+0x11c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d906      	bls.n	800e8b6 <USB_SetTurnaroundTime+0x2a>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	4a40      	ldr	r2, [pc, #256]	; (800e9ac <USB_SetTurnaroundTime+0x120>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d202      	bcs.n	800e8b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e8b0:	230f      	movs	r3, #15
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e062      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	4a3c      	ldr	r2, [pc, #240]	; (800e9ac <USB_SetTurnaroundTime+0x120>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d306      	bcc.n	800e8cc <USB_SetTurnaroundTime+0x40>
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	4a3b      	ldr	r2, [pc, #236]	; (800e9b0 <USB_SetTurnaroundTime+0x124>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d202      	bcs.n	800e8cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e8c6:	230e      	movs	r3, #14
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e057      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	4a38      	ldr	r2, [pc, #224]	; (800e9b0 <USB_SetTurnaroundTime+0x124>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d306      	bcc.n	800e8e2 <USB_SetTurnaroundTime+0x56>
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4a37      	ldr	r2, [pc, #220]	; (800e9b4 <USB_SetTurnaroundTime+0x128>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d202      	bcs.n	800e8e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e8dc:	230d      	movs	r3, #13
 800e8de:	617b      	str	r3, [r7, #20]
 800e8e0:	e04c      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	4a33      	ldr	r2, [pc, #204]	; (800e9b4 <USB_SetTurnaroundTime+0x128>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d306      	bcc.n	800e8f8 <USB_SetTurnaroundTime+0x6c>
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	4a32      	ldr	r2, [pc, #200]	; (800e9b8 <USB_SetTurnaroundTime+0x12c>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d802      	bhi.n	800e8f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	617b      	str	r3, [r7, #20]
 800e8f6:	e041      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	4a2f      	ldr	r2, [pc, #188]	; (800e9b8 <USB_SetTurnaroundTime+0x12c>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d906      	bls.n	800e90e <USB_SetTurnaroundTime+0x82>
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4a2e      	ldr	r2, [pc, #184]	; (800e9bc <USB_SetTurnaroundTime+0x130>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d802      	bhi.n	800e90e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e908:	230b      	movs	r3, #11
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	e036      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	4a2a      	ldr	r2, [pc, #168]	; (800e9bc <USB_SetTurnaroundTime+0x130>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d906      	bls.n	800e924 <USB_SetTurnaroundTime+0x98>
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	4a29      	ldr	r2, [pc, #164]	; (800e9c0 <USB_SetTurnaroundTime+0x134>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d802      	bhi.n	800e924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e91e:	230a      	movs	r3, #10
 800e920:	617b      	str	r3, [r7, #20]
 800e922:	e02b      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	4a26      	ldr	r2, [pc, #152]	; (800e9c0 <USB_SetTurnaroundTime+0x134>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d906      	bls.n	800e93a <USB_SetTurnaroundTime+0xae>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4a25      	ldr	r2, [pc, #148]	; (800e9c4 <USB_SetTurnaroundTime+0x138>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d202      	bcs.n	800e93a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e934:	2309      	movs	r3, #9
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e020      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	4a21      	ldr	r2, [pc, #132]	; (800e9c4 <USB_SetTurnaroundTime+0x138>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d306      	bcc.n	800e950 <USB_SetTurnaroundTime+0xc4>
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <USB_SetTurnaroundTime+0x13c>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d802      	bhi.n	800e950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e94a:	2308      	movs	r3, #8
 800e94c:	617b      	str	r3, [r7, #20]
 800e94e:	e015      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	4a1d      	ldr	r2, [pc, #116]	; (800e9c8 <USB_SetTurnaroundTime+0x13c>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d906      	bls.n	800e966 <USB_SetTurnaroundTime+0xda>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4a1c      	ldr	r2, [pc, #112]	; (800e9cc <USB_SetTurnaroundTime+0x140>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d202      	bcs.n	800e966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e960:	2307      	movs	r3, #7
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	e00a      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e966:	2306      	movs	r3, #6
 800e968:	617b      	str	r3, [r7, #20]
 800e96a:	e007      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d102      	bne.n	800e978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e972:	2309      	movs	r3, #9
 800e974:	617b      	str	r3, [r7, #20]
 800e976:	e001      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e978:	2309      	movs	r3, #9
 800e97a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	68da      	ldr	r2, [r3, #12]
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	029b      	lsls	r3, r3, #10
 800e990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e994:	431a      	orrs	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	00d8acbf 	.word	0x00d8acbf
 800e9ac:	00e4e1c0 	.word	0x00e4e1c0
 800e9b0:	00f42400 	.word	0x00f42400
 800e9b4:	01067380 	.word	0x01067380
 800e9b8:	011a499f 	.word	0x011a499f
 800e9bc:	01312cff 	.word	0x01312cff
 800e9c0:	014ca43f 	.word	0x014ca43f
 800e9c4:	016e3600 	.word	0x016e3600
 800e9c8:	01a6ab1f 	.word	0x01a6ab1f
 800e9cc:	01e84800 	.word	0x01e84800

0800e9d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	f043 0201 	orr.w	r2, r3, #1
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f023 0201 	bic.w	r2, r3, #1
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ea20:	2300      	movs	r3, #0
 800ea22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea30:	78fb      	ldrb	r3, [r7, #3]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d115      	bne.n	800ea62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ea42:	2001      	movs	r0, #1
 800ea44:	f7f9 fb1c 	bl	8008080 <HAL_Delay>
      ms++;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f001 f972 	bl	800fd38 <USB_GetMode>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d01e      	beq.n	800ea98 <USB_SetCurrentMode+0x84>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2b31      	cmp	r3, #49	; 0x31
 800ea5e:	d9f0      	bls.n	800ea42 <USB_SetCurrentMode+0x2e>
 800ea60:	e01a      	b.n	800ea98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea62:	78fb      	ldrb	r3, [r7, #3]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d115      	bne.n	800ea94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ea74:	2001      	movs	r0, #1
 800ea76:	f7f9 fb03 	bl	8008080 <HAL_Delay>
      ms++;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f001 f959 	bl	800fd38 <USB_GetMode>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d005      	beq.n	800ea98 <USB_SetCurrentMode+0x84>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2b31      	cmp	r3, #49	; 0x31
 800ea90:	d9f0      	bls.n	800ea74 <USB_SetCurrentMode+0x60>
 800ea92:	e001      	b.n	800ea98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ea94:	2301      	movs	r3, #1
 800ea96:	e005      	b.n	800eaa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2b32      	cmp	r3, #50	; 0x32
 800ea9c:	d101      	bne.n	800eaa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e000      	b.n	800eaa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eaac:	b084      	sub	sp, #16
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eaba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eac6:	2300      	movs	r3, #0
 800eac8:	613b      	str	r3, [r7, #16]
 800eaca:	e009      	b.n	800eae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	3340      	adds	r3, #64	; 0x40
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	4413      	add	r3, r2
 800ead6:	2200      	movs	r2, #0
 800ead8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	3301      	adds	r3, #1
 800eade:	613b      	str	r3, [r7, #16]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b0e      	cmp	r3, #14
 800eae4:	d9f2      	bls.n	800eacc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d11c      	bne.n	800eb26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eafa:	f043 0302 	orr.w	r3, r3, #2
 800eafe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	639a      	str	r2, [r3, #56]	; 0x38
 800eb24:	e00b      	b.n	800eb3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb44:	461a      	mov	r2, r3
 800eb46:	2300      	movs	r3, #0
 800eb48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb50:	4619      	mov	r1, r3
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb58:	461a      	mov	r2, r3
 800eb5a:	680b      	ldr	r3, [r1, #0]
 800eb5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d10c      	bne.n	800eb7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 f945 	bl	800edfc <USB_SetDevSpeed>
 800eb72:	e008      	b.n	800eb86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb74:	2101      	movs	r1, #1
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f940 	bl	800edfc <USB_SetDevSpeed>
 800eb7c:	e003      	b.n	800eb86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eb7e:	2103      	movs	r1, #3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 f93b 	bl	800edfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eb86:	2110      	movs	r1, #16
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f8f3 	bl	800ed74 <USB_FlushTxFifo>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f90f 	bl	800edbc <USB_FlushRxFifo>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d001      	beq.n	800eba8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eba4:	2301      	movs	r3, #1
 800eba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebae:	461a      	mov	r2, r3
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebba:	461a      	mov	r2, r3
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	2300      	movs	r3, #0
 800ebca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebcc:	2300      	movs	r3, #0
 800ebce:	613b      	str	r3, [r7, #16]
 800ebd0:	e043      	b.n	800ec5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	015a      	lsls	r2, r3, #5
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	4413      	add	r3, r2
 800ebda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebe8:	d118      	bne.n	800ec1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10a      	bne.n	800ec06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec02:	6013      	str	r3, [r2, #0]
 800ec04:	e013      	b.n	800ec2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	015a      	lsls	r2, r3, #5
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec12:	461a      	mov	r2, r3
 800ec14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	e008      	b.n	800ec2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec28:	461a      	mov	r2, r3
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	015a      	lsls	r2, r3, #5
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	3301      	adds	r3, #1
 800ec58:	613b      	str	r3, [r7, #16]
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5c:	693a      	ldr	r2, [r7, #16]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d3b7      	bcc.n	800ebd2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec62:	2300      	movs	r3, #0
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	e043      	b.n	800ecf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec7e:	d118      	bne.n	800ecb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10a      	bne.n	800ec9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec92:	461a      	mov	r2, r3
 800ec94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec98:	6013      	str	r3, [r2, #0]
 800ec9a:	e013      	b.n	800ecc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	015a      	lsls	r2, r3, #5
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4413      	add	r3, r2
 800eca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca8:	461a      	mov	r2, r3
 800ecaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	e008      	b.n	800ecc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	015a      	lsls	r2, r3, #5
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	4413      	add	r3, r2
 800ecba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	015a      	lsls	r2, r3, #5
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	4413      	add	r3, r2
 800eccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ece2:	461a      	mov	r2, r3
 800ece4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ece8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	3301      	adds	r3, #1
 800ecee:	613b      	str	r3, [r7, #16]
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	693a      	ldr	r2, [r7, #16]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d3b7      	bcc.n	800ec68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ed18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d105      	bne.n	800ed2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	699b      	ldr	r3, [r3, #24]
 800ed24:	f043 0210 	orr.w	r2, r3, #16
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	699a      	ldr	r2, [r3, #24]
 800ed30:	4b0f      	ldr	r3, [pc, #60]	; (800ed70 <USB_DevInit+0x2c4>)
 800ed32:	4313      	orrs	r3, r2
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d005      	beq.n	800ed4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	f043 0208 	orr.w	r2, r3, #8
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d107      	bne.n	800ed60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed58:	f043 0304 	orr.w	r3, r3, #4
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3718      	adds	r7, #24
 800ed66:	46bd      	mov	sp, r7
 800ed68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed6c:	b004      	add	sp, #16
 800ed6e:	4770      	bx	lr
 800ed70:	803c3800 	.word	0x803c3800

0800ed74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	019b      	lsls	r3, r3, #6
 800ed86:	f043 0220 	orr.w	r2, r3, #32
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3301      	adds	r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	4a08      	ldr	r2, [pc, #32]	; (800edb8 <USB_FlushTxFifo+0x44>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d901      	bls.n	800ed9e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	e006      	b.n	800edac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	f003 0320 	and.w	r3, r3, #32
 800eda6:	2b20      	cmp	r3, #32
 800eda8:	d0f1      	beq.n	800ed8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	00030d40 	.word	0x00030d40

0800edbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edc4:	2300      	movs	r3, #0
 800edc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2210      	movs	r2, #16
 800edcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3301      	adds	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	4a08      	ldr	r2, [pc, #32]	; (800edf8 <USB_FlushRxFifo+0x3c>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d901      	bls.n	800edde <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800edda:	2303      	movs	r3, #3
 800eddc:	e006      	b.n	800edec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	f003 0310 	and.w	r3, r3, #16
 800ede6:	2b10      	cmp	r3, #16
 800ede8:	d0f1      	beq.n	800edce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3714      	adds	r7, #20
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	00030d40 	.word	0x00030d40

0800edfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	78fb      	ldrb	r3, [r7, #3]
 800ee16:	68f9      	ldr	r1, [r7, #12]
 800ee18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b087      	sub	sp, #28
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	f003 0306 	and.w	r3, r3, #6
 800ee46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d102      	bne.n	800ee54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	75fb      	strb	r3, [r7, #23]
 800ee52:	e00a      	b.n	800ee6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d002      	beq.n	800ee60 <USB_GetDevSpeed+0x32>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b06      	cmp	r3, #6
 800ee5e:	d102      	bne.n	800ee66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ee60:	2302      	movs	r3, #2
 800ee62:	75fb      	strb	r3, [r7, #23]
 800ee64:	e001      	b.n	800ee6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ee66:	230f      	movs	r3, #15
 800ee68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	371c      	adds	r7, #28
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	785b      	ldrb	r3, [r3, #1]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d13a      	bne.n	800ef0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee9a:	69da      	ldr	r2, [r3, #28]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 030f 	and.w	r3, r3, #15
 800eea4:	2101      	movs	r1, #1
 800eea6:	fa01 f303 	lsl.w	r3, r1, r3
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	68f9      	ldr	r1, [r7, #12]
 800eeae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	015a      	lsls	r2, r3, #5
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d155      	bne.n	800ef78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	015a      	lsls	r2, r3, #5
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	78db      	ldrb	r3, [r3, #3]
 800eee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	059b      	lsls	r3, r3, #22
 800eeee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eef0:	4313      	orrs	r3, r2
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	0151      	lsls	r1, r2, #5
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	440a      	add	r2, r1
 800eefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eefe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e036      	b.n	800ef78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef10:	69da      	ldr	r2, [r3, #28]
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ef20:	041b      	lsls	r3, r3, #16
 800ef22:	68f9      	ldr	r1, [r7, #12]
 800ef24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	015a      	lsls	r2, r3, #5
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4413      	add	r3, r2
 800ef34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d11a      	bne.n	800ef78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	015a      	lsls	r2, r3, #5
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	4413      	add	r3, r2
 800ef4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	78db      	ldrb	r3, [r3, #3]
 800ef5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef5e:	430b      	orrs	r3, r1
 800ef60:	4313      	orrs	r3, r2
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	0151      	lsls	r1, r2, #5
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	440a      	add	r2, r1
 800ef6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
	...

0800ef88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	785b      	ldrb	r3, [r3, #1]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d161      	bne.n	800f068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efba:	d11f      	bne.n	800effc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	015a      	lsls	r2, r3, #5
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4413      	add	r3, r2
 800efc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	0151      	lsls	r1, r2, #5
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	440a      	add	r2, r1
 800efd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800efda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	015a      	lsls	r2, r3, #5
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	0151      	lsls	r1, r2, #5
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	440a      	add	r2, r1
 800eff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800effa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	f003 030f 	and.w	r3, r3, #15
 800f00c:	2101      	movs	r1, #1
 800f00e:	fa01 f303 	lsl.w	r3, r1, r3
 800f012:	b29b      	uxth	r3, r3
 800f014:	43db      	mvns	r3, r3
 800f016:	68f9      	ldr	r1, [r7, #12]
 800f018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f01c:	4013      	ands	r3, r2
 800f01e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f026:	69da      	ldr	r2, [r3, #28]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 030f 	and.w	r3, r3, #15
 800f030:	2101      	movs	r1, #1
 800f032:	fa01 f303 	lsl.w	r3, r1, r3
 800f036:	b29b      	uxth	r3, r3
 800f038:	43db      	mvns	r3, r3
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f040:	4013      	ands	r3, r2
 800f042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	015a      	lsls	r2, r3, #5
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	0159      	lsls	r1, r3, #5
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	440b      	add	r3, r1
 800f05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05e:	4619      	mov	r1, r3
 800f060:	4b35      	ldr	r3, [pc, #212]	; (800f138 <USB_DeactivateEndpoint+0x1b0>)
 800f062:	4013      	ands	r3, r2
 800f064:	600b      	str	r3, [r1, #0]
 800f066:	e060      	b.n	800f12a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f07a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f07e:	d11f      	bne.n	800f0c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	015a      	lsls	r2, r3, #5
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	4413      	add	r3, r2
 800f088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	68ba      	ldr	r2, [r7, #8]
 800f090:	0151      	lsls	r1, r2, #5
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	440a      	add	r2, r1
 800f096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f09a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f09e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	015a      	lsls	r2, r3, #5
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	0151      	lsls	r1, r2, #5
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	440a      	add	r2, r1
 800f0b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 030f 	and.w	r3, r3, #15
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f0d6:	041b      	lsls	r3, r3, #16
 800f0d8:	43db      	mvns	r3, r3
 800f0da:	68f9      	ldr	r1, [r7, #12]
 800f0dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ea:	69da      	ldr	r2, [r3, #28]
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	f003 030f 	and.w	r3, r3, #15
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f0fa:	041b      	lsls	r3, r3, #16
 800f0fc:	43db      	mvns	r3, r3
 800f0fe:	68f9      	ldr	r1, [r7, #12]
 800f100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f104:	4013      	ands	r3, r2
 800f106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	015a      	lsls	r2, r3, #5
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	4413      	add	r3, r2
 800f110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	0159      	lsls	r1, r3, #5
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	440b      	add	r3, r1
 800f11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f122:	4619      	mov	r1, r3
 800f124:	4b05      	ldr	r3, [pc, #20]	; (800f13c <USB_DeactivateEndpoint+0x1b4>)
 800f126:	4013      	ands	r3, r2
 800f128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr
 800f138:	ec337800 	.word	0xec337800
 800f13c:	eff37800 	.word	0xeff37800

0800f140 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b08a      	sub	sp, #40	; 0x28
 800f144:	af02      	add	r7, sp, #8
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	4613      	mov	r3, r2
 800f14c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	785b      	ldrb	r3, [r3, #1]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	f040 815c 	bne.w	800f41a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d132      	bne.n	800f1d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	015a      	lsls	r2, r3, #5
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	4413      	add	r3, r2
 800f172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	0151      	lsls	r1, r2, #5
 800f17c:	69fa      	ldr	r2, [r7, #28]
 800f17e:	440a      	add	r2, r1
 800f180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f18c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	69ba      	ldr	r2, [r7, #24]
 800f19e:	0151      	lsls	r1, r2, #5
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	440a      	add	r2, r1
 800f1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	015a      	lsls	r2, r3, #5
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	0151      	lsls	r1, r2, #5
 800f1c0:	69fa      	ldr	r2, [r7, #28]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1c8:	0cdb      	lsrs	r3, r3, #19
 800f1ca:	04db      	lsls	r3, r3, #19
 800f1cc:	6113      	str	r3, [r2, #16]
 800f1ce:	e074      	b.n	800f2ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	0151      	lsls	r1, r2, #5
 800f1e2:	69fa      	ldr	r2, [r7, #28]
 800f1e4:	440a      	add	r2, r1
 800f1e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ea:	0cdb      	lsrs	r3, r3, #19
 800f1ec:	04db      	lsls	r3, r3, #19
 800f1ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	015a      	lsls	r2, r3, #5
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	0151      	lsls	r1, r2, #5
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	440a      	add	r2, r1
 800f206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f20a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f20e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	015a      	lsls	r2, r3, #5
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	4413      	add	r3, r2
 800f21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f220:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	6959      	ldr	r1, [r3, #20]
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	440b      	add	r3, r1
 800f22c:	1e59      	subs	r1, r3, #1
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	fbb1 f3f3 	udiv	r3, r1, r3
 800f236:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f238:	4b9d      	ldr	r3, [pc, #628]	; (800f4b0 <USB_EPStartXfer+0x370>)
 800f23a:	400b      	ands	r3, r1
 800f23c:	69b9      	ldr	r1, [r7, #24]
 800f23e:	0148      	lsls	r0, r1, #5
 800f240:	69f9      	ldr	r1, [r7, #28]
 800f242:	4401      	add	r1, r0
 800f244:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f248:	4313      	orrs	r3, r2
 800f24a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	015a      	lsls	r2, r3, #5
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	4413      	add	r3, r2
 800f254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f258:	691a      	ldr	r2, [r3, #16]
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	695b      	ldr	r3, [r3, #20]
 800f25e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f262:	69b9      	ldr	r1, [r7, #24]
 800f264:	0148      	lsls	r0, r1, #5
 800f266:	69f9      	ldr	r1, [r7, #28]
 800f268:	4401      	add	r1, r0
 800f26a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f26e:	4313      	orrs	r3, r2
 800f270:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	78db      	ldrb	r3, [r3, #3]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d11f      	bne.n	800f2ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	015a      	lsls	r2, r3, #5
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	4413      	add	r3, r2
 800f282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	69ba      	ldr	r2, [r7, #24]
 800f28a:	0151      	lsls	r1, r2, #5
 800f28c:	69fa      	ldr	r2, [r7, #28]
 800f28e:	440a      	add	r2, r1
 800f290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f294:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f298:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	0151      	lsls	r1, r2, #5
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	440a      	add	r2, r1
 800f2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d14b      	bne.n	800f358 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d009      	beq.n	800f2dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	015a      	lsls	r2, r3, #5
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	78db      	ldrb	r3, [r3, #3]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d128      	bne.n	800f336 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d110      	bne.n	800f316 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	0151      	lsls	r1, r2, #5
 800f306:	69fa      	ldr	r2, [r7, #28]
 800f308:	440a      	add	r2, r1
 800f30a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f30e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	e00f      	b.n	800f336 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	0151      	lsls	r1, r2, #5
 800f328:	69fa      	ldr	r2, [r7, #28]
 800f32a:	440a      	add	r2, r1
 800f32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f334:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	015a      	lsls	r2, r3, #5
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	4413      	add	r3, r2
 800f33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	69ba      	ldr	r2, [r7, #24]
 800f346:	0151      	lsls	r1, r2, #5
 800f348:	69fa      	ldr	r2, [r7, #28]
 800f34a:	440a      	add	r2, r1
 800f34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	e12f      	b.n	800f5b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	015a      	lsls	r2, r3, #5
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	0151      	lsls	r1, r2, #5
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	440a      	add	r2, r1
 800f36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f376:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	78db      	ldrb	r3, [r3, #3]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d015      	beq.n	800f3ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	695b      	ldr	r3, [r3, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	f000 8117 	beq.w	800f5b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	f003 030f 	and.w	r3, r3, #15
 800f39a:	2101      	movs	r1, #1
 800f39c:	fa01 f303 	lsl.w	r3, r1, r3
 800f3a0:	69f9      	ldr	r1, [r7, #28]
 800f3a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	634b      	str	r3, [r1, #52]	; 0x34
 800f3aa:	e105      	b.n	800f5b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d110      	bne.n	800f3de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	69ba      	ldr	r2, [r7, #24]
 800f3cc:	0151      	lsls	r1, r2, #5
 800f3ce:	69fa      	ldr	r2, [r7, #28]
 800f3d0:	440a      	add	r2, r1
 800f3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3da:	6013      	str	r3, [r2, #0]
 800f3dc:	e00f      	b.n	800f3fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	015a      	lsls	r2, r3, #5
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	69ba      	ldr	r2, [r7, #24]
 800f3ee:	0151      	lsls	r1, r2, #5
 800f3f0:	69fa      	ldr	r2, [r7, #28]
 800f3f2:	440a      	add	r2, r1
 800f3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	68d9      	ldr	r1, [r3, #12]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	781a      	ldrb	r2, [r3, #0]
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	b298      	uxth	r0, r3
 800f40c:	79fb      	ldrb	r3, [r7, #7]
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	4603      	mov	r3, r0
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f000 fa2b 	bl	800f86e <USB_WritePacket>
 800f418:	e0ce      	b.n	800f5b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	015a      	lsls	r2, r3, #5
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	69ba      	ldr	r2, [r7, #24]
 800f42a:	0151      	lsls	r1, r2, #5
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	440a      	add	r2, r1
 800f430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f434:	0cdb      	lsrs	r3, r3, #19
 800f436:	04db      	lsls	r3, r3, #19
 800f438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	015a      	lsls	r2, r3, #5
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	4413      	add	r3, r2
 800f442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	69ba      	ldr	r2, [r7, #24]
 800f44a:	0151      	lsls	r1, r2, #5
 800f44c:	69fa      	ldr	r2, [r7, #28]
 800f44e:	440a      	add	r2, r1
 800f450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f45c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d126      	bne.n	800f4b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	015a      	lsls	r2, r3, #5
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	4413      	add	r3, r2
 800f46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f472:	691a      	ldr	r2, [r3, #16]
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f47c:	69b9      	ldr	r1, [r7, #24]
 800f47e:	0148      	lsls	r0, r1, #5
 800f480:	69f9      	ldr	r1, [r7, #28]
 800f482:	4401      	add	r1, r0
 800f484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f488:	4313      	orrs	r3, r2
 800f48a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	015a      	lsls	r2, r3, #5
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	4413      	add	r3, r2
 800f494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	69ba      	ldr	r2, [r7, #24]
 800f49c:	0151      	lsls	r1, r2, #5
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	440a      	add	r2, r1
 800f4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4aa:	6113      	str	r3, [r2, #16]
 800f4ac:	e036      	b.n	800f51c <USB_EPStartXfer+0x3dc>
 800f4ae:	bf00      	nop
 800f4b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	695a      	ldr	r2, [r3, #20]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	4413      	add	r3, r2
 800f4be:	1e5a      	subs	r2, r3, #1
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d6:	691a      	ldr	r2, [r3, #16]
 800f4d8:	8afb      	ldrh	r3, [r7, #22]
 800f4da:	04d9      	lsls	r1, r3, #19
 800f4dc:	4b39      	ldr	r3, [pc, #228]	; (800f5c4 <USB_EPStartXfer+0x484>)
 800f4de:	400b      	ands	r3, r1
 800f4e0:	69b9      	ldr	r1, [r7, #24]
 800f4e2:	0148      	lsls	r0, r1, #5
 800f4e4:	69f9      	ldr	r1, [r7, #28]
 800f4e6:	4401      	add	r1, r0
 800f4e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	015a      	lsls	r2, r3, #5
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fc:	691a      	ldr	r2, [r3, #16]
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	8af9      	ldrh	r1, [r7, #22]
 800f504:	fb01 f303 	mul.w	r3, r1, r3
 800f508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f50c:	69b9      	ldr	r1, [r7, #24]
 800f50e:	0148      	lsls	r0, r1, #5
 800f510:	69f9      	ldr	r1, [r7, #28]
 800f512:	4401      	add	r1, r0
 800f514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f518:	4313      	orrs	r3, r2
 800f51a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f51c:	79fb      	ldrb	r3, [r7, #7]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d10d      	bne.n	800f53e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d009      	beq.n	800f53e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	68d9      	ldr	r1, [r3, #12]
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53a:	460a      	mov	r2, r1
 800f53c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	78db      	ldrb	r3, [r3, #3]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d128      	bne.n	800f598 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f552:	2b00      	cmp	r3, #0
 800f554:	d110      	bne.n	800f578 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	015a      	lsls	r2, r3, #5
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	4413      	add	r3, r2
 800f55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	69ba      	ldr	r2, [r7, #24]
 800f566:	0151      	lsls	r1, r2, #5
 800f568:	69fa      	ldr	r2, [r7, #28]
 800f56a:	440a      	add	r2, r1
 800f56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	e00f      	b.n	800f598 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	69ba      	ldr	r2, [r7, #24]
 800f588:	0151      	lsls	r1, r2, #5
 800f58a:	69fa      	ldr	r2, [r7, #28]
 800f58c:	440a      	add	r2, r1
 800f58e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f596:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	0151      	lsls	r1, r2, #5
 800f5aa:	69fa      	ldr	r2, [r7, #28]
 800f5ac:	440a      	add	r2, r1
 800f5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3720      	adds	r7, #32
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	1ff80000 	.word	0x1ff80000

0800f5c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	785b      	ldrb	r3, [r3, #1]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	f040 80cd 	bne.w	800f784 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d132      	bne.n	800f658 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	015a      	lsls	r2, r3, #5
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	0151      	lsls	r1, r2, #5
 800f604:	697a      	ldr	r2, [r7, #20]
 800f606:	440a      	add	r2, r1
 800f608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f60c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f610:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	0151      	lsls	r1, r2, #5
 800f628:	697a      	ldr	r2, [r7, #20]
 800f62a:	440a      	add	r2, r1
 800f62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	015a      	lsls	r2, r3, #5
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	4413      	add	r3, r2
 800f63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	693a      	ldr	r2, [r7, #16]
 800f646:	0151      	lsls	r1, r2, #5
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	440a      	add	r2, r1
 800f64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f650:	0cdb      	lsrs	r3, r3, #19
 800f652:	04db      	lsls	r3, r3, #19
 800f654:	6113      	str	r3, [r2, #16]
 800f656:	e04e      	b.n	800f6f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	0151      	lsls	r1, r2, #5
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	440a      	add	r2, r1
 800f66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f672:	0cdb      	lsrs	r3, r3, #19
 800f674:	04db      	lsls	r3, r3, #19
 800f676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	015a      	lsls	r2, r3, #5
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	4413      	add	r3, r2
 800f680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	693a      	ldr	r2, [r7, #16]
 800f688:	0151      	lsls	r1, r2, #5
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	440a      	add	r2, r1
 800f68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f692:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f696:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f69a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	695a      	ldr	r2, [r3, #20]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d903      	bls.n	800f6b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	689a      	ldr	r2, [r3, #8]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6bc:	691b      	ldr	r3, [r3, #16]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	0151      	lsls	r1, r2, #5
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	440a      	add	r2, r1
 800f6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f6ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	015a      	lsls	r2, r3, #5
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6dc:	691a      	ldr	r2, [r3, #16]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6e6:	6939      	ldr	r1, [r7, #16]
 800f6e8:	0148      	lsls	r0, r1, #5
 800f6ea:	6979      	ldr	r1, [r7, #20]
 800f6ec:	4401      	add	r1, r0
 800f6ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d11e      	bne.n	800f73a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d009      	beq.n	800f718 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	015a      	lsls	r2, r3, #5
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f710:	461a      	mov	r2, r3
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	015a      	lsls	r2, r3, #5
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	4413      	add	r3, r2
 800f720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	0151      	lsls	r1, r2, #5
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	440a      	add	r2, r1
 800f72e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	e092      	b.n	800f860 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	015a      	lsls	r2, r3, #5
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	4413      	add	r3, r2
 800f742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	0151      	lsls	r1, r2, #5
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	440a      	add	r2, r1
 800f750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f758:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	695b      	ldr	r3, [r3, #20]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d07e      	beq.n	800f860 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 030f 	and.w	r3, r3, #15
 800f772:	2101      	movs	r1, #1
 800f774:	fa01 f303 	lsl.w	r3, r1, r3
 800f778:	6979      	ldr	r1, [r7, #20]
 800f77a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f77e:	4313      	orrs	r3, r2
 800f780:	634b      	str	r3, [r1, #52]	; 0x34
 800f782:	e06d      	b.n	800f860 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	015a      	lsls	r2, r3, #5
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	4413      	add	r3, r2
 800f78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	0151      	lsls	r1, r2, #5
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	440a      	add	r2, r1
 800f79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f79e:	0cdb      	lsrs	r3, r3, #19
 800f7a0:	04db      	lsls	r3, r3, #19
 800f7a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	015a      	lsls	r2, r3, #5
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	0151      	lsls	r1, r2, #5
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	440a      	add	r2, r1
 800f7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d003      	beq.n	800f7d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	689a      	ldr	r2, [r3, #8]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	015a      	lsls	r2, r3, #5
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	0151      	lsls	r1, r2, #5
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	440a      	add	r2, r1
 800f7ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	015a      	lsls	r2, r3, #5
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	4413      	add	r3, r2
 800f800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f804:	691a      	ldr	r2, [r3, #16]
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f80e:	6939      	ldr	r1, [r7, #16]
 800f810:	0148      	lsls	r0, r1, #5
 800f812:	6979      	ldr	r1, [r7, #20]
 800f814:	4401      	add	r1, r0
 800f816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f81a:	4313      	orrs	r3, r2
 800f81c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d10d      	bne.n	800f840 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d009      	beq.n	800f840 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	68d9      	ldr	r1, [r3, #12]
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	015a      	lsls	r2, r3, #5
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	4413      	add	r3, r2
 800f838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83c:	460a      	mov	r2, r1
 800f83e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	0151      	lsls	r1, r2, #5
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	440a      	add	r2, r1
 800f856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f85a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f85e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f86e:	b480      	push	{r7}
 800f870:	b089      	sub	sp, #36	; 0x24
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	60b9      	str	r1, [r7, #8]
 800f878:	4611      	mov	r1, r2
 800f87a:	461a      	mov	r2, r3
 800f87c:	460b      	mov	r3, r1
 800f87e:	71fb      	strb	r3, [r7, #7]
 800f880:	4613      	mov	r3, r2
 800f882:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f88c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f890:	2b00      	cmp	r3, #0
 800f892:	d123      	bne.n	800f8dc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f894:	88bb      	ldrh	r3, [r7, #4]
 800f896:	3303      	adds	r3, #3
 800f898:	089b      	lsrs	r3, r3, #2
 800f89a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f89c:	2300      	movs	r3, #0
 800f89e:	61bb      	str	r3, [r7, #24]
 800f8a0:	e018      	b.n	800f8d4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	031a      	lsls	r2, r3, #12
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	61bb      	str	r3, [r7, #24]
 800f8d4:	69ba      	ldr	r2, [r7, #24]
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d3e2      	bcc.n	800f8a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3724      	adds	r7, #36	; 0x24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b08b      	sub	sp, #44	; 0x2c
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	60b9      	str	r1, [r7, #8]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f900:	88fb      	ldrh	r3, [r7, #6]
 800f902:	089b      	lsrs	r3, r3, #2
 800f904:	b29b      	uxth	r3, r3
 800f906:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f908:	88fb      	ldrh	r3, [r7, #6]
 800f90a:	f003 0303 	and.w	r3, r3, #3
 800f90e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f910:	2300      	movs	r3, #0
 800f912:	623b      	str	r3, [r7, #32]
 800f914:	e014      	b.n	800f940 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	601a      	str	r2, [r3, #0]
    pDest++;
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	3301      	adds	r3, #1
 800f926:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	3301      	adds	r3, #1
 800f92c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f930:	3301      	adds	r3, #1
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	3301      	adds	r3, #1
 800f938:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	3301      	adds	r3, #1
 800f93e:	623b      	str	r3, [r7, #32]
 800f940:	6a3a      	ldr	r2, [r7, #32]
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	429a      	cmp	r2, r3
 800f946:	d3e6      	bcc.n	800f916 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f948:	8bfb      	ldrh	r3, [r7, #30]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01e      	beq.n	800f98c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f94e:	2300      	movs	r3, #0
 800f950:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f958:	461a      	mov	r2, r3
 800f95a:	f107 0310 	add.w	r3, r7, #16
 800f95e:	6812      	ldr	r2, [r2, #0]
 800f960:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	6a3b      	ldr	r3, [r7, #32]
 800f966:	b2db      	uxtb	r3, r3
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	fa22 f303 	lsr.w	r3, r2, r3
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	701a      	strb	r2, [r3, #0]
      i++;
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	3301      	adds	r3, #1
 800f978:	623b      	str	r3, [r7, #32]
      pDest++;
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97c:	3301      	adds	r3, #1
 800f97e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f980:	8bfb      	ldrh	r3, [r7, #30]
 800f982:	3b01      	subs	r3, #1
 800f984:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f986:	8bfb      	ldrh	r3, [r7, #30]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1ea      	bne.n	800f962 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f98e:	4618      	mov	r0, r3
 800f990:	372c      	adds	r7, #44	; 0x2c
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b085      	sub	sp, #20
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	785b      	ldrb	r3, [r3, #1]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d12c      	bne.n	800fa10 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	015a      	lsls	r2, r3, #5
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	4413      	add	r3, r2
 800f9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	db12      	blt.n	800f9ee <USB_EPSetStall+0x54>
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00f      	beq.n	800f9ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	015a      	lsls	r2, r3, #5
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	0151      	lsls	r1, r2, #5
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	440a      	add	r2, r1
 800f9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f9ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	015a      	lsls	r2, r3, #5
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	0151      	lsls	r1, r2, #5
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	440a      	add	r2, r1
 800fa04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa0c:	6013      	str	r3, [r2, #0]
 800fa0e:	e02b      	b.n	800fa68 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	db12      	blt.n	800fa48 <USB_EPSetStall+0xae>
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00f      	beq.n	800fa48 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	015a      	lsls	r2, r3, #5
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	4413      	add	r3, r2
 800fa30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	0151      	lsls	r1, r2, #5
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	440a      	add	r2, r1
 800fa3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa46:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	0151      	lsls	r1, r2, #5
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	440a      	add	r2, r1
 800fa5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3714      	adds	r7, #20
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr

0800fa76 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa76:	b480      	push	{r7}
 800fa78:	b085      	sub	sp, #20
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	785b      	ldrb	r3, [r3, #1]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d128      	bne.n	800fae4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	015a      	lsls	r2, r3, #5
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	0151      	lsls	r1, r2, #5
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	440a      	add	r2, r1
 800faa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fab0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	78db      	ldrb	r3, [r3, #3]
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	d003      	beq.n	800fac2 <USB_EPClearStall+0x4c>
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	78db      	ldrb	r3, [r3, #3]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d138      	bne.n	800fb34 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	015a      	lsls	r2, r3, #5
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	4413      	add	r3, r2
 800faca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	0151      	lsls	r1, r2, #5
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	440a      	add	r2, r1
 800fad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fae0:	6013      	str	r3, [r2, #0]
 800fae2:	e027      	b.n	800fb34 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	015a      	lsls	r2, r3, #5
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	4413      	add	r3, r2
 800faec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	0151      	lsls	r1, r2, #5
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	440a      	add	r2, r1
 800fafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fafe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	78db      	ldrb	r3, [r3, #3]
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	d003      	beq.n	800fb14 <USB_EPClearStall+0x9e>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	78db      	ldrb	r3, [r3, #3]
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d10f      	bne.n	800fb34 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	015a      	lsls	r2, r3, #5
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	0151      	lsls	r1, r2, #5
 800fb26:	68fa      	ldr	r2, [r7, #12]
 800fb28:	440a      	add	r2, r1
 800fb2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb32:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fb42:	b480      	push	{r7}
 800fb44:	b085      	sub	sp, #20
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fb64:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	78fb      	ldrb	r3, [r7, #3]
 800fb70:	011b      	lsls	r3, r3, #4
 800fb72:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fb76:	68f9      	ldr	r1, [r7, #12]
 800fb78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b085      	sub	sp, #20
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fba8:	f023 0303 	bic.w	r3, r3, #3
 800fbac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	68fa      	ldr	r2, [r7, #12]
 800fbb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbbc:	f023 0302 	bic.w	r3, r3, #2
 800fbc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fbea:	f023 0303 	bic.w	r3, r3, #3
 800fbee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbfe:	f043 0302 	orr.w	r3, r3, #2
 800fc02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b085      	sub	sp, #20
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4013      	ands	r3, r2
 800fc28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3714      	adds	r7, #20
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc54:	69db      	ldr	r3, [r3, #28]
 800fc56:	68ba      	ldr	r2, [r7, #8]
 800fc58:	4013      	ands	r3, r2
 800fc5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	0c1b      	lsrs	r3, r3, #16
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3714      	adds	r7, #20
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc7e:	699b      	ldr	r3, [r3, #24]
 800fc80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc88:	69db      	ldr	r3, [r3, #28]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	4013      	ands	r3, r2
 800fc8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	b29b      	uxth	r3, r3
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3714      	adds	r7, #20
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc6:	695b      	ldr	r3, [r3, #20]
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	4013      	ands	r3, r2
 800fccc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fcce:	68bb      	ldr	r3, [r7, #8]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	460b      	mov	r3, r1
 800fce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf2:	691b      	ldr	r3, [r3, #16]
 800fcf4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcfe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	f003 030f 	and.w	r3, r3, #15
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	fa22 f303 	lsr.w	r3, r2, r3
 800fd0c:	01db      	lsls	r3, r3, #7
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fd16:	78fb      	ldrb	r3, [r7, #3]
 800fd18:	015a      	lsls	r2, r3, #5
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	693a      	ldr	r2, [r7, #16]
 800fd26:	4013      	ands	r3, r2
 800fd28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fd2a:	68bb      	ldr	r3, [r7, #8]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	371c      	adds	r7, #28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	695b      	ldr	r3, [r3, #20]
 800fd44:	f003 0301 	and.w	r3, r3, #1
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fd72:	f023 0307 	bic.w	r3, r3, #7
 800fd76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
	...

0800fd9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	460b      	mov	r3, r1
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	333c      	adds	r3, #60	; 0x3c
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	4a26      	ldr	r2, [pc, #152]	; (800fe54 <USB_EP0_OutStart+0xb8>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d90a      	bls.n	800fdd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdd0:	d101      	bne.n	800fdd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e037      	b.n	800fe46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fddc:	461a      	mov	r2, r3
 800fdde:	2300      	movs	r3, #0
 800fde0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	691b      	ldr	r3, [r3, #16]
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	697a      	ldr	r2, [r7, #20]
 800fe00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe04:	f043 0318 	orr.w	r3, r3, #24
 800fe08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fe1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fe1e:	7afb      	ldrb	r3, [r7, #11]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d10f      	bne.n	800fe44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fe42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	371c      	adds	r7, #28
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	4f54300a 	.word	0x4f54300a

0800fe58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe60:	2300      	movs	r3, #0
 800fe62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	3301      	adds	r3, #1
 800fe68:	60fb      	str	r3, [r7, #12]
 800fe6a:	4a13      	ldr	r2, [pc, #76]	; (800feb8 <USB_CoreReset+0x60>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d901      	bls.n	800fe74 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800fe70:	2303      	movs	r3, #3
 800fe72:	e01a      	b.n	800feaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	daf3      	bge.n	800fe64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	f043 0201 	orr.w	r2, r3, #1
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	60fb      	str	r3, [r7, #12]
 800fe92:	4a09      	ldr	r2, [pc, #36]	; (800feb8 <USB_CoreReset+0x60>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d901      	bls.n	800fe9c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	e006      	b.n	800feaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d0f1      	beq.n	800fe8c <USB_CoreReset+0x34>

  return HAL_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	00030d40 	.word	0x00030d40

0800febc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800fec8:	4a05      	ldr	r2, [pc, #20]	; (800fee0 <set_NSS_pin+0x24>)
 800feca:	887b      	ldrh	r3, [r7, #2]
 800fecc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800fece:	4a05      	ldr	r2, [pc, #20]	; (800fee4 <set_NSS_pin+0x28>)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6013      	str	r3, [r2, #0]
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	200007c8 	.word	0x200007c8
 800fee4:	200007cc 	.word	0x200007cc

0800fee8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800fef4:	4a05      	ldr	r2, [pc, #20]	; (800ff0c <set_BUSY_pin+0x24>)
 800fef6:	887b      	ldrh	r3, [r7, #2]
 800fef8:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800fefa:	4a05      	ldr	r2, [pc, #20]	; (800ff10 <set_BUSY_pin+0x28>)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6013      	str	r3, [r2, #0]
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	200007d8 	.word	0x200007d8
 800ff10:	200007dc 	.word	0x200007dc

0800ff14 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800ff20:	4a05      	ldr	r2, [pc, #20]	; (800ff38 <set_NRESET_pin+0x24>)
 800ff22:	887b      	ldrh	r3, [r7, #2]
 800ff24:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800ff26:	4a05      	ldr	r2, [pc, #20]	; (800ff3c <set_NRESET_pin+0x28>)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6013      	str	r3, [r2, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	200007d0 	.word	0x200007d0
 800ff3c:	200007d4 	.word	0x200007d4

0800ff40 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800ff4c:	4a05      	ldr	r2, [pc, #20]	; (800ff64 <set_DIO1_pin+0x24>)
 800ff4e:	887b      	ldrh	r3, [r7, #2]
 800ff50:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800ff52:	4a05      	ldr	r2, [pc, #20]	; (800ff68 <set_DIO1_pin+0x28>)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6013      	str	r3, [r2, #0]
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	200007e0 	.word	0x200007e0
 800ff68:	200007e4 	.word	0x200007e4

0800ff6c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	f107 0c08 	add.w	ip, r7, #8
 800ff76:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800ff7a:	4b07      	ldr	r3, [pc, #28]	; (800ff98 <set_hspi+0x2c>)
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f107 0308 	add.w	r3, r7, #8
 800ff82:	2258      	movs	r2, #88	; 0x58
 800ff84:	4619      	mov	r1, r3
 800ff86:	f00a fa31 	bl	801a3ec <memcpy>
}
 800ff8a:	bf00      	nop
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff92:	b004      	add	sp, #16
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	200007e8 	.word	0x200007e8

0800ff9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ffa0:	4904      	ldr	r1, [pc, #16]	; (800ffb4 <MX_FATFS_Init+0x18>)
 800ffa2:	4805      	ldr	r0, [pc, #20]	; (800ffb8 <MX_FATFS_Init+0x1c>)
 800ffa4:	f004 fffe 	bl	8014fa4 <FATFS_LinkDriver>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4b03      	ldr	r3, [pc, #12]	; (800ffbc <MX_FATFS_Init+0x20>)
 800ffae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ffb0:	bf00      	nop
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	2000721c 	.word	0x2000721c
 800ffb8:	20000060 	.word	0x20000060
 800ffbc:	20007220 	.word	0x20007220

0800ffc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ffc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f000 f9dd 	bl	801039c <USER_SPI_initialize>
 800ffe2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 fab9 	bl	8010570 <USER_SPI_status>
 800fffe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60b9      	str	r1, [r7, #8]
 8010010:	607a      	str	r2, [r7, #4]
 8010012:	603b      	str	r3, [r7, #0]
 8010014:	4603      	mov	r3, r0
 8010016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010018:	7bf8      	ldrb	r0, [r7, #15]
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	68b9      	ldr	r1, [r7, #8]
 8010020:	f000 fabc 	bl	801059c <USER_SPI_read>
 8010024:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b084      	sub	sp, #16
 8010032:	af00      	add	r7, sp, #0
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]
 801003a:	4603      	mov	r3, r0
 801003c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 801003e:	7bf8      	ldrb	r0, [r7, #15]
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	68b9      	ldr	r1, [r7, #8]
 8010046:	f000 fb0f 	bl	8010668 <USER_SPI_write>
 801004a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	603a      	str	r2, [r7, #0]
 801005e:	71fb      	strb	r3, [r7, #7]
 8010060:	460b      	mov	r3, r1
 8010062:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8010064:	79b9      	ldrb	r1, [r7, #6]
 8010066:	79fb      	ldrb	r3, [r7, #7]
 8010068:	683a      	ldr	r2, [r7, #0]
 801006a:	4618      	mov	r0, r3
 801006c:	f000 fb78 	bl	8010760 <USER_SPI_ioctl>
 8010070:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010072:	4618      	mov	r0, r3
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
	...

0801007c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010084:	f7f7 fff0 	bl	8008068 <HAL_GetTick>
 8010088:	4603      	mov	r3, r0
 801008a:	4a04      	ldr	r2, [pc, #16]	; (801009c <SPI_Timer_On+0x20>)
 801008c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 801008e:	4a04      	ldr	r2, [pc, #16]	; (80100a0 <SPI_Timer_On+0x24>)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6013      	str	r3, [r2, #0]
}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	20007688 	.word	0x20007688
 80100a0:	2000768c 	.word	0x2000768c

080100a4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80100a4:	b580      	push	{r7, lr}
 80100a6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80100a8:	f7f7 ffde 	bl	8008068 <HAL_GetTick>
 80100ac:	4602      	mov	r2, r0
 80100ae:	4b06      	ldr	r3, [pc, #24]	; (80100c8 <SPI_Timer_Status+0x24>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	1ad2      	subs	r2, r2, r3
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <SPI_Timer_Status+0x28>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	bf34      	ite	cc
 80100bc:	2301      	movcc	r3, #1
 80100be:	2300      	movcs	r3, #0
 80100c0:	b2db      	uxtb	r3, r3
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	20007688 	.word	0x20007688
 80100cc:	2000768c 	.word	0x2000768c

080100d0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af02      	add	r7, sp, #8
 80100d6:	4603      	mov	r3, r0
 80100d8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80100da:	f107 020f 	add.w	r2, r7, #15
 80100de:	1df9      	adds	r1, r7, #7
 80100e0:	2332      	movs	r3, #50	; 0x32
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	2301      	movs	r3, #1
 80100e6:	4804      	ldr	r0, [pc, #16]	; (80100f8 <xchg_spi+0x28>)
 80100e8:	f7fc fef8 	bl	800cedc <HAL_SPI_TransmitReceive>
    return rxDat;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20005fbc 	.word	0x20005fbc

080100fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80100fc:	b590      	push	{r4, r7, lr}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010106:	2300      	movs	r3, #0
 8010108:	60fb      	str	r3, [r7, #12]
 801010a:	e00a      	b.n	8010122 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	18d4      	adds	r4, r2, r3
 8010112:	20ff      	movs	r0, #255	; 0xff
 8010114:	f7ff ffdc 	bl	80100d0 <xchg_spi>
 8010118:	4603      	mov	r3, r0
 801011a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3301      	adds	r3, #1
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	429a      	cmp	r2, r3
 8010128:	d3f0      	bcc.n	801010c <rcvr_spi_multi+0x10>
	}
}
 801012a:	bf00      	nop
 801012c:	bf00      	nop
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	bd90      	pop	{r4, r7, pc}

08010134 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	e009      	b.n	8010158 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	4413      	add	r3, r2
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff ffbf 	bl	80100d0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3301      	adds	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	429a      	cmp	r2, r3
 801015e:	d3f1      	bcc.n	8010144 <xmit_spi_multi+0x10>
	}
}
 8010160:	bf00      	nop
 8010162:	bf00      	nop
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b086      	sub	sp, #24
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010172:	f7f7 ff79 	bl	8008068 <HAL_GetTick>
 8010176:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 801017c:	20ff      	movs	r0, #255	; 0xff
 801017e:	f7ff ffa7 	bl	80100d0 <xchg_spi>
 8010182:	4603      	mov	r3, r0
 8010184:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010186:	7bfb      	ldrb	r3, [r7, #15]
 8010188:	2bff      	cmp	r3, #255	; 0xff
 801018a:	d007      	beq.n	801019c <wait_ready+0x32>
 801018c:	f7f7 ff6c 	bl	8008068 <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	429a      	cmp	r2, r3
 801019a:	d8ef      	bhi.n	801017c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	2bff      	cmp	r3, #255	; 0xff
 80101a0:	bf0c      	ite	eq
 80101a2:	2301      	moveq	r3, #1
 80101a4:	2300      	movne	r3, #0
 80101a6:	b2db      	uxtb	r3, r3
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3718      	adds	r7, #24
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80101b4:	2201      	movs	r2, #1
 80101b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80101ba:	4804      	ldr	r0, [pc, #16]	; (80101cc <despiselect+0x1c>)
 80101bc:	f7f8 fcce 	bl	8008b5c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80101c0:	20ff      	movs	r0, #255	; 0xff
 80101c2:	f7ff ff85 	bl	80100d0 <xchg_spi>

}
 80101c6:	bf00      	nop
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	40021400 	.word	0x40021400

080101d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80101d4:	2200      	movs	r2, #0
 80101d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80101da:	480a      	ldr	r0, [pc, #40]	; (8010204 <spiselect+0x34>)
 80101dc:	f7f8 fcbe 	bl	8008b5c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80101e0:	20ff      	movs	r0, #255	; 0xff
 80101e2:	f7ff ff75 	bl	80100d0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80101e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80101ea:	f7ff ffbe 	bl	801016a <wait_ready>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <spiselect+0x28>
 80101f4:	2301      	movs	r3, #1
 80101f6:	e002      	b.n	80101fe <spiselect+0x2e>

	despiselect();
 80101f8:	f7ff ffda 	bl	80101b0 <despiselect>
	return 0;	/* Timeout */
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	40021400 	.word	0x40021400

08010208 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8010212:	20c8      	movs	r0, #200	; 0xc8
 8010214:	f7ff ff32 	bl	801007c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010218:	20ff      	movs	r0, #255	; 0xff
 801021a:	f7ff ff59 	bl	80100d0 <xchg_spi>
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8010222:	7bfb      	ldrb	r3, [r7, #15]
 8010224:	2bff      	cmp	r3, #255	; 0xff
 8010226:	d104      	bne.n	8010232 <rcvr_datablock+0x2a>
 8010228:	f7ff ff3c 	bl	80100a4 <SPI_Timer_Status>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1f2      	bne.n	8010218 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010232:	7bfb      	ldrb	r3, [r7, #15]
 8010234:	2bfe      	cmp	r3, #254	; 0xfe
 8010236:	d001      	beq.n	801023c <rcvr_datablock+0x34>
 8010238:	2300      	movs	r3, #0
 801023a:	e00a      	b.n	8010252 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 801023c:	6839      	ldr	r1, [r7, #0]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff ff5c 	bl	80100fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010244:	20ff      	movs	r0, #255	; 0xff
 8010246:	f7ff ff43 	bl	80100d0 <xchg_spi>
 801024a:	20ff      	movs	r0, #255	; 0xff
 801024c:	f7ff ff40 	bl	80100d0 <xchg_spi>

	return 1;						/* Function succeeded */
 8010250:	2301      	movs	r3, #1
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	460b      	mov	r3, r1
 8010264:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8010266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801026a:	f7ff ff7e 	bl	801016a <wait_ready>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <xmit_datablock+0x1e>
 8010274:	2300      	movs	r3, #0
 8010276:	e01e      	b.n	80102b6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8010278:	78fb      	ldrb	r3, [r7, #3]
 801027a:	4618      	mov	r0, r3
 801027c:	f7ff ff28 	bl	80100d0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8010280:	78fb      	ldrb	r3, [r7, #3]
 8010282:	2bfd      	cmp	r3, #253	; 0xfd
 8010284:	d016      	beq.n	80102b4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8010286:	f44f 7100 	mov.w	r1, #512	; 0x200
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff ff52 	bl	8010134 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8010290:	20ff      	movs	r0, #255	; 0xff
 8010292:	f7ff ff1d 	bl	80100d0 <xchg_spi>
 8010296:	20ff      	movs	r0, #255	; 0xff
 8010298:	f7ff ff1a 	bl	80100d0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 801029c:	20ff      	movs	r0, #255	; 0xff
 801029e:	f7ff ff17 	bl	80100d0 <xchg_spi>
 80102a2:	4603      	mov	r3, r0
 80102a4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
 80102a8:	f003 031f 	and.w	r3, r3, #31
 80102ac:	2b05      	cmp	r3, #5
 80102ae:	d001      	beq.n	80102b4 <xmit_datablock+0x5a>
 80102b0:	2300      	movs	r3, #0
 80102b2:	e000      	b.n	80102b6 <xmit_datablock+0x5c>
	}
	return 1;
 80102b4:	2301      	movs	r3, #1
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	4603      	mov	r3, r0
 80102c6:	6039      	str	r1, [r7, #0]
 80102c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80102ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	da0e      	bge.n	80102f0 <send_cmd+0x32>
		cmd &= 0x7F;
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102d8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80102da:	2100      	movs	r1, #0
 80102dc:	2037      	movs	r0, #55	; 0x37
 80102de:	f7ff ffee 	bl	80102be <send_cmd>
 80102e2:	4603      	mov	r3, r0
 80102e4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d901      	bls.n	80102f0 <send_cmd+0x32>
 80102ec:	7bbb      	ldrb	r3, [r7, #14]
 80102ee:	e051      	b.n	8010394 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	2b0c      	cmp	r3, #12
 80102f4:	d008      	beq.n	8010308 <send_cmd+0x4a>
		despiselect();
 80102f6:	f7ff ff5b 	bl	80101b0 <despiselect>
		if (!spiselect()) return 0xFF;
 80102fa:	f7ff ff69 	bl	80101d0 <spiselect>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <send_cmd+0x4a>
 8010304:	23ff      	movs	r3, #255	; 0xff
 8010306:	e045      	b.n	8010394 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801030e:	b2db      	uxtb	r3, r3
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fedd 	bl	80100d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	0e1b      	lsrs	r3, r3, #24
 801031a:	b2db      	uxtb	r3, r3
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff fed7 	bl	80100d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	0c1b      	lsrs	r3, r3, #16
 8010326:	b2db      	uxtb	r3, r3
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff fed1 	bl	80100d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	0a1b      	lsrs	r3, r3, #8
 8010332:	b2db      	uxtb	r3, r3
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff fecb 	bl	80100d0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	b2db      	uxtb	r3, r3
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff fec6 	bl	80100d0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010344:	2301      	movs	r3, #1
 8010346:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d101      	bne.n	8010352 <send_cmd+0x94>
 801034e:	2395      	movs	r3, #149	; 0x95
 8010350:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010352:	79fb      	ldrb	r3, [r7, #7]
 8010354:	2b08      	cmp	r3, #8
 8010356:	d101      	bne.n	801035c <send_cmd+0x9e>
 8010358:	2387      	movs	r3, #135	; 0x87
 801035a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 801035c:	7bfb      	ldrb	r3, [r7, #15]
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff feb6 	bl	80100d0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	2b0c      	cmp	r3, #12
 8010368:	d102      	bne.n	8010370 <send_cmd+0xb2>
 801036a:	20ff      	movs	r0, #255	; 0xff
 801036c:	f7ff feb0 	bl	80100d0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010370:	230a      	movs	r3, #10
 8010372:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8010374:	20ff      	movs	r0, #255	; 0xff
 8010376:	f7ff feab 	bl	80100d0 <xchg_spi>
 801037a:	4603      	mov	r3, r0
 801037c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 801037e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010382:	2b00      	cmp	r3, #0
 8010384:	da05      	bge.n	8010392 <send_cmd+0xd4>
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	3b01      	subs	r3, #1
 801038a:	73fb      	strb	r3, [r7, #15]
 801038c:	7bfb      	ldrb	r3, [r7, #15]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1f0      	bne.n	8010374 <send_cmd+0xb6>

	return res;							/* Return received response */
 8010392:	7bbb      	ldrb	r3, [r7, #14]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 801039c:	b590      	push	{r4, r7, lr}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <USER_SPI_initialize+0x14>
 80103ac:	2301      	movs	r3, #1
 80103ae:	e0d4      	b.n	801055a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80103b0:	4b6c      	ldr	r3, [pc, #432]	; (8010564 <USER_SPI_initialize+0x1c8>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	f003 0302 	and.w	r3, r3, #2
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <USER_SPI_initialize+0x2a>
 80103be:	4b69      	ldr	r3, [pc, #420]	; (8010564 <USER_SPI_initialize+0x1c8>)
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	e0c9      	b.n	801055a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80103c6:	4b68      	ldr	r3, [pc, #416]	; (8010568 <USER_SPI_initialize+0x1cc>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	4b66      	ldr	r3, [pc, #408]	; (8010568 <USER_SPI_initialize+0x1cc>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80103d4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80103d6:	230a      	movs	r3, #10
 80103d8:	73fb      	strb	r3, [r7, #15]
 80103da:	e005      	b.n	80103e8 <USER_SPI_initialize+0x4c>
 80103dc:	20ff      	movs	r0, #255	; 0xff
 80103de:	f7ff fe77 	bl	80100d0 <xchg_spi>
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	73fb      	strb	r3, [r7, #15]
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d1f6      	bne.n	80103dc <USER_SPI_initialize+0x40>

	ty = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80103f2:	2100      	movs	r1, #0
 80103f4:	2000      	movs	r0, #0
 80103f6:	f7ff ff62 	bl	80102be <send_cmd>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	f040 808b 	bne.w	8010518 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010406:	f7ff fe39 	bl	801007c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 801040a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801040e:	2008      	movs	r0, #8
 8010410:	f7ff ff55 	bl	80102be <send_cmd>
 8010414:	4603      	mov	r3, r0
 8010416:	2b01      	cmp	r3, #1
 8010418:	d151      	bne.n	80104be <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 801041a:	2300      	movs	r3, #0
 801041c:	73fb      	strb	r3, [r7, #15]
 801041e:	e00d      	b.n	801043c <USER_SPI_initialize+0xa0>
 8010420:	7bfc      	ldrb	r4, [r7, #15]
 8010422:	20ff      	movs	r0, #255	; 0xff
 8010424:	f7ff fe54 	bl	80100d0 <xchg_spi>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	f107 0310 	add.w	r3, r7, #16
 8010430:	4423      	add	r3, r4
 8010432:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010436:	7bfb      	ldrb	r3, [r7, #15]
 8010438:	3301      	adds	r3, #1
 801043a:	73fb      	strb	r3, [r7, #15]
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	2b03      	cmp	r3, #3
 8010440:	d9ee      	bls.n	8010420 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010442:	7abb      	ldrb	r3, [r7, #10]
 8010444:	2b01      	cmp	r3, #1
 8010446:	d167      	bne.n	8010518 <USER_SPI_initialize+0x17c>
 8010448:	7afb      	ldrb	r3, [r7, #11]
 801044a:	2baa      	cmp	r3, #170	; 0xaa
 801044c:	d164      	bne.n	8010518 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801044e:	bf00      	nop
 8010450:	f7ff fe28 	bl	80100a4 <SPI_Timer_Status>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d007      	beq.n	801046a <USER_SPI_initialize+0xce>
 801045a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801045e:	20a9      	movs	r0, #169	; 0xa9
 8010460:	f7ff ff2d 	bl	80102be <send_cmd>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1f2      	bne.n	8010450 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 801046a:	f7ff fe1b 	bl	80100a4 <SPI_Timer_Status>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d051      	beq.n	8010518 <USER_SPI_initialize+0x17c>
 8010474:	2100      	movs	r1, #0
 8010476:	203a      	movs	r0, #58	; 0x3a
 8010478:	f7ff ff21 	bl	80102be <send_cmd>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d14a      	bne.n	8010518 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8010482:	2300      	movs	r3, #0
 8010484:	73fb      	strb	r3, [r7, #15]
 8010486:	e00d      	b.n	80104a4 <USER_SPI_initialize+0x108>
 8010488:	7bfc      	ldrb	r4, [r7, #15]
 801048a:	20ff      	movs	r0, #255	; 0xff
 801048c:	f7ff fe20 	bl	80100d0 <xchg_spi>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	f107 0310 	add.w	r3, r7, #16
 8010498:	4423      	add	r3, r4
 801049a:	f803 2c08 	strb.w	r2, [r3, #-8]
 801049e:	7bfb      	ldrb	r3, [r7, #15]
 80104a0:	3301      	adds	r3, #1
 80104a2:	73fb      	strb	r3, [r7, #15]
 80104a4:	7bfb      	ldrb	r3, [r7, #15]
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	d9ee      	bls.n	8010488 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80104aa:	7a3b      	ldrb	r3, [r7, #8]
 80104ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <USER_SPI_initialize+0x11c>
 80104b4:	230c      	movs	r3, #12
 80104b6:	e000      	b.n	80104ba <USER_SPI_initialize+0x11e>
 80104b8:	2304      	movs	r3, #4
 80104ba:	737b      	strb	r3, [r7, #13]
 80104bc:	e02c      	b.n	8010518 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80104be:	2100      	movs	r1, #0
 80104c0:	20a9      	movs	r0, #169	; 0xa9
 80104c2:	f7ff fefc 	bl	80102be <send_cmd>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d804      	bhi.n	80104d6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80104cc:	2302      	movs	r3, #2
 80104ce:	737b      	strb	r3, [r7, #13]
 80104d0:	23a9      	movs	r3, #169	; 0xa9
 80104d2:	73bb      	strb	r3, [r7, #14]
 80104d4:	e003      	b.n	80104de <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80104d6:	2301      	movs	r3, #1
 80104d8:	737b      	strb	r3, [r7, #13]
 80104da:	2301      	movs	r3, #1
 80104dc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80104de:	bf00      	nop
 80104e0:	f7ff fde0 	bl	80100a4 <SPI_Timer_Status>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d007      	beq.n	80104fa <USER_SPI_initialize+0x15e>
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	2100      	movs	r1, #0
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff fee5 	bl	80102be <send_cmd>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1f2      	bne.n	80104e0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80104fa:	f7ff fdd3 	bl	80100a4 <SPI_Timer_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d007      	beq.n	8010514 <USER_SPI_initialize+0x178>
 8010504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010508:	2010      	movs	r0, #16
 801050a:	f7ff fed8 	bl	80102be <send_cmd>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010518:	4a14      	ldr	r2, [pc, #80]	; (801056c <USER_SPI_initialize+0x1d0>)
 801051a:	7b7b      	ldrb	r3, [r7, #13]
 801051c:	7013      	strb	r3, [r2, #0]
	despiselect();
 801051e:	f7ff fe47 	bl	80101b0 <despiselect>

	if (ty) {			/* OK */
 8010522:	7b7b      	ldrb	r3, [r7, #13]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d012      	beq.n	801054e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010528:	4b0f      	ldr	r3, [pc, #60]	; (8010568 <USER_SPI_initialize+0x1cc>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010532:	4b0d      	ldr	r3, [pc, #52]	; (8010568 <USER_SPI_initialize+0x1cc>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f042 0218 	orr.w	r2, r2, #24
 801053a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 801053c:	4b09      	ldr	r3, [pc, #36]	; (8010564 <USER_SPI_initialize+0x1c8>)
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	b2db      	uxtb	r3, r3
 8010542:	f023 0301 	bic.w	r3, r3, #1
 8010546:	b2da      	uxtb	r2, r3
 8010548:	4b06      	ldr	r3, [pc, #24]	; (8010564 <USER_SPI_initialize+0x1c8>)
 801054a:	701a      	strb	r2, [r3, #0]
 801054c:	e002      	b.n	8010554 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 801054e:	4b05      	ldr	r3, [pc, #20]	; (8010564 <USER_SPI_initialize+0x1c8>)
 8010550:	2201      	movs	r2, #1
 8010552:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8010554:	4b03      	ldr	r3, [pc, #12]	; (8010564 <USER_SPI_initialize+0x1c8>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	b2db      	uxtb	r3, r3
}
 801055a:	4618      	mov	r0, r3
 801055c:	3714      	adds	r7, #20
 801055e:	46bd      	mov	sp, r7
 8010560:	bd90      	pop	{r4, r7, pc}
 8010562:	bf00      	nop
 8010564:	20000074 	.word	0x20000074
 8010568:	20005fbc 	.word	0x20005fbc
 801056c:	20000840 	.word	0x20000840

08010570 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	4603      	mov	r3, r0
 8010578:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d001      	beq.n	8010584 <USER_SPI_status+0x14>
 8010580:	2301      	movs	r3, #1
 8010582:	e002      	b.n	801058a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8010584:	4b04      	ldr	r3, [pc, #16]	; (8010598 <USER_SPI_status+0x28>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	b2db      	uxtb	r3, r3
}
 801058a:	4618      	mov	r0, r3
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	20000074 	.word	0x20000074

0801059c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60b9      	str	r1, [r7, #8]
 80105a4:	607a      	str	r2, [r7, #4]
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	4603      	mov	r3, r0
 80105aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80105ac:	7bfb      	ldrb	r3, [r7, #15]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d102      	bne.n	80105b8 <USER_SPI_read+0x1c>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <USER_SPI_read+0x20>
 80105b8:	2304      	movs	r3, #4
 80105ba:	e04d      	b.n	8010658 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80105bc:	4b28      	ldr	r3, [pc, #160]	; (8010660 <USER_SPI_read+0xc4>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	f003 0301 	and.w	r3, r3, #1
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <USER_SPI_read+0x32>
 80105ca:	2303      	movs	r3, #3
 80105cc:	e044      	b.n	8010658 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80105ce:	4b25      	ldr	r3, [pc, #148]	; (8010664 <USER_SPI_read+0xc8>)
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 0308 	and.w	r3, r3, #8
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <USER_SPI_read+0x44>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	025b      	lsls	r3, r3, #9
 80105de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d111      	bne.n	801060a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80105e6:	6879      	ldr	r1, [r7, #4]
 80105e8:	2011      	movs	r0, #17
 80105ea:	f7ff fe68 	bl	80102be <send_cmd>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d129      	bne.n	8010648 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80105f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105f8:	68b8      	ldr	r0, [r7, #8]
 80105fa:	f7ff fe05 	bl	8010208 <rcvr_datablock>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d021      	beq.n	8010648 <USER_SPI_read+0xac>
			count = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	e01e      	b.n	8010648 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	2012      	movs	r0, #18
 801060e:	f7ff fe56 	bl	80102be <send_cmd>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d117      	bne.n	8010648 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010618:	f44f 7100 	mov.w	r1, #512	; 0x200
 801061c:	68b8      	ldr	r0, [r7, #8]
 801061e:	f7ff fdf3 	bl	8010208 <rcvr_datablock>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00a      	beq.n	801063e <USER_SPI_read+0xa2>
				buff += 512;
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801062e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	3b01      	subs	r3, #1
 8010634:	603b      	str	r3, [r7, #0]
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1ed      	bne.n	8010618 <USER_SPI_read+0x7c>
 801063c:	e000      	b.n	8010640 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 801063e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8010640:	2100      	movs	r1, #0
 8010642:	200c      	movs	r0, #12
 8010644:	f7ff fe3b 	bl	80102be <send_cmd>
		}
	}
	despiselect();
 8010648:	f7ff fdb2 	bl	80101b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	bf14      	ite	ne
 8010652:	2301      	movne	r3, #1
 8010654:	2300      	moveq	r3, #0
 8010656:	b2db      	uxtb	r3, r3
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20000074 	.word	0x20000074
 8010664:	20000840 	.word	0x20000840

08010668 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	60b9      	str	r1, [r7, #8]
 8010670:	607a      	str	r2, [r7, #4]
 8010672:	603b      	str	r3, [r7, #0]
 8010674:	4603      	mov	r3, r0
 8010676:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8010678:	7bfb      	ldrb	r3, [r7, #15]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d102      	bne.n	8010684 <USER_SPI_write+0x1c>
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <USER_SPI_write+0x20>
 8010684:	2304      	movs	r3, #4
 8010686:	e063      	b.n	8010750 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8010688:	4b33      	ldr	r3, [pc, #204]	; (8010758 <USER_SPI_write+0xf0>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	b2db      	uxtb	r3, r3
 801068e:	f003 0301 	and.w	r3, r3, #1
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <USER_SPI_write+0x32>
 8010696:	2303      	movs	r3, #3
 8010698:	e05a      	b.n	8010750 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 801069a:	4b2f      	ldr	r3, [pc, #188]	; (8010758 <USER_SPI_write+0xf0>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	f003 0304 	and.w	r3, r3, #4
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d001      	beq.n	80106ac <USER_SPI_write+0x44>
 80106a8:	2302      	movs	r3, #2
 80106aa:	e051      	b.n	8010750 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80106ac:	4b2b      	ldr	r3, [pc, #172]	; (801075c <USER_SPI_write+0xf4>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	f003 0308 	and.w	r3, r3, #8
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d102      	bne.n	80106be <USER_SPI_write+0x56>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	025b      	lsls	r3, r3, #9
 80106bc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d110      	bne.n	80106e6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80106c4:	6879      	ldr	r1, [r7, #4]
 80106c6:	2018      	movs	r0, #24
 80106c8:	f7ff fdf9 	bl	80102be <send_cmd>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d136      	bne.n	8010740 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80106d2:	21fe      	movs	r1, #254	; 0xfe
 80106d4:	68b8      	ldr	r0, [r7, #8]
 80106d6:	f7ff fdc0 	bl	801025a <xmit_datablock>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d02f      	beq.n	8010740 <USER_SPI_write+0xd8>
			count = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	e02c      	b.n	8010740 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80106e6:	4b1d      	ldr	r3, [pc, #116]	; (801075c <USER_SPI_write+0xf4>)
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	f003 0306 	and.w	r3, r3, #6
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d003      	beq.n	80106fa <USER_SPI_write+0x92>
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	2097      	movs	r0, #151	; 0x97
 80106f6:	f7ff fde2 	bl	80102be <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80106fa:	6879      	ldr	r1, [r7, #4]
 80106fc:	2019      	movs	r0, #25
 80106fe:	f7ff fdde 	bl	80102be <send_cmd>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d11b      	bne.n	8010740 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010708:	21fc      	movs	r1, #252	; 0xfc
 801070a:	68b8      	ldr	r0, [r7, #8]
 801070c:	f7ff fda5 	bl	801025a <xmit_datablock>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00a      	beq.n	801072c <USER_SPI_write+0xc4>
				buff += 512;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801071c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	3b01      	subs	r3, #1
 8010722:	603b      	str	r3, [r7, #0]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1ee      	bne.n	8010708 <USER_SPI_write+0xa0>
 801072a:	e000      	b.n	801072e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 801072c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 801072e:	21fd      	movs	r1, #253	; 0xfd
 8010730:	2000      	movs	r0, #0
 8010732:	f7ff fd92 	bl	801025a <xmit_datablock>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d101      	bne.n	8010740 <USER_SPI_write+0xd8>
 801073c:	2301      	movs	r3, #1
 801073e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010740:	f7ff fd36 	bl	80101b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	bf14      	ite	ne
 801074a:	2301      	movne	r3, #1
 801074c:	2300      	moveq	r3, #0
 801074e:	b2db      	uxtb	r3, r3
}
 8010750:	4618      	mov	r0, r3
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	20000074 	.word	0x20000074
 801075c:	20000840 	.word	0x20000840

08010760 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b08c      	sub	sp, #48	; 0x30
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	603a      	str	r2, [r7, #0]
 801076a:	71fb      	strb	r3, [r7, #7]
 801076c:	460b      	mov	r3, r1
 801076e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010770:	79fb      	ldrb	r3, [r7, #7]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <USER_SPI_ioctl+0x1a>
 8010776:	2304      	movs	r3, #4
 8010778:	e15a      	b.n	8010a30 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 801077a:	4baf      	ldr	r3, [pc, #700]	; (8010a38 <USER_SPI_ioctl+0x2d8>)
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	b2db      	uxtb	r3, r3
 8010780:	f003 0301 	and.w	r3, r3, #1
 8010784:	2b00      	cmp	r3, #0
 8010786:	d001      	beq.n	801078c <USER_SPI_ioctl+0x2c>
 8010788:	2303      	movs	r3, #3
 801078a:	e151      	b.n	8010a30 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 801078c:	2301      	movs	r3, #1
 801078e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8010792:	79bb      	ldrb	r3, [r7, #6]
 8010794:	2b04      	cmp	r3, #4
 8010796:	f200 8136 	bhi.w	8010a06 <USER_SPI_ioctl+0x2a6>
 801079a:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <USER_SPI_ioctl+0x40>)
 801079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a0:	080107b5 	.word	0x080107b5
 80107a4:	080107c9 	.word	0x080107c9
 80107a8:	08010a07 	.word	0x08010a07
 80107ac:	08010875 	.word	0x08010875
 80107b0:	0801096b 	.word	0x0801096b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80107b4:	f7ff fd0c 	bl	80101d0 <spiselect>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 8127 	beq.w	8010a0e <USER_SPI_ioctl+0x2ae>
 80107c0:	2300      	movs	r3, #0
 80107c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80107c6:	e122      	b.n	8010a0e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80107c8:	2100      	movs	r1, #0
 80107ca:	2009      	movs	r0, #9
 80107cc:	f7ff fd77 	bl	80102be <send_cmd>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f040 811d 	bne.w	8010a12 <USER_SPI_ioctl+0x2b2>
 80107d8:	f107 030c 	add.w	r3, r7, #12
 80107dc:	2110      	movs	r1, #16
 80107de:	4618      	mov	r0, r3
 80107e0:	f7ff fd12 	bl	8010208 <rcvr_datablock>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f000 8113 	beq.w	8010a12 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80107ec:	7b3b      	ldrb	r3, [r7, #12]
 80107ee:	099b      	lsrs	r3, r3, #6
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d111      	bne.n	801081a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80107f6:	7d7b      	ldrb	r3, [r7, #21]
 80107f8:	461a      	mov	r2, r3
 80107fa:	7d3b      	ldrb	r3, [r7, #20]
 80107fc:	021b      	lsls	r3, r3, #8
 80107fe:	4413      	add	r3, r2
 8010800:	461a      	mov	r2, r3
 8010802:	7cfb      	ldrb	r3, [r7, #19]
 8010804:	041b      	lsls	r3, r3, #16
 8010806:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801080a:	4413      	add	r3, r2
 801080c:	3301      	adds	r3, #1
 801080e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	029a      	lsls	r2, r3, #10
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	601a      	str	r2, [r3, #0]
 8010818:	e028      	b.n	801086c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801081a:	7c7b      	ldrb	r3, [r7, #17]
 801081c:	f003 030f 	and.w	r3, r3, #15
 8010820:	b2da      	uxtb	r2, r3
 8010822:	7dbb      	ldrb	r3, [r7, #22]
 8010824:	09db      	lsrs	r3, r3, #7
 8010826:	b2db      	uxtb	r3, r3
 8010828:	4413      	add	r3, r2
 801082a:	b2da      	uxtb	r2, r3
 801082c:	7d7b      	ldrb	r3, [r7, #21]
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	b2db      	uxtb	r3, r3
 8010832:	f003 0306 	and.w	r3, r3, #6
 8010836:	b2db      	uxtb	r3, r3
 8010838:	4413      	add	r3, r2
 801083a:	b2db      	uxtb	r3, r3
 801083c:	3302      	adds	r3, #2
 801083e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010842:	7d3b      	ldrb	r3, [r7, #20]
 8010844:	099b      	lsrs	r3, r3, #6
 8010846:	b2db      	uxtb	r3, r3
 8010848:	461a      	mov	r2, r3
 801084a:	7cfb      	ldrb	r3, [r7, #19]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	441a      	add	r2, r3
 8010850:	7cbb      	ldrb	r3, [r7, #18]
 8010852:	029b      	lsls	r3, r3, #10
 8010854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010858:	4413      	add	r3, r2
 801085a:	3301      	adds	r3, #1
 801085c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 801085e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010862:	3b09      	subs	r3, #9
 8010864:	69fa      	ldr	r2, [r7, #28]
 8010866:	409a      	lsls	r2, r3
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010872:	e0ce      	b.n	8010a12 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8010874:	4b71      	ldr	r3, [pc, #452]	; (8010a3c <USER_SPI_ioctl+0x2dc>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f003 0304 	and.w	r3, r3, #4
 801087c:	2b00      	cmp	r3, #0
 801087e:	d031      	beq.n	80108e4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8010880:	2100      	movs	r1, #0
 8010882:	208d      	movs	r0, #141	; 0x8d
 8010884:	f7ff fd1b 	bl	80102be <send_cmd>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	f040 80c3 	bne.w	8010a16 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8010890:	20ff      	movs	r0, #255	; 0xff
 8010892:	f7ff fc1d 	bl	80100d0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010896:	f107 030c 	add.w	r3, r7, #12
 801089a:	2110      	movs	r1, #16
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fcb3 	bl	8010208 <rcvr_datablock>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 80b6 	beq.w	8010a16 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80108aa:	2330      	movs	r3, #48	; 0x30
 80108ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80108b0:	e007      	b.n	80108c2 <USER_SPI_ioctl+0x162>
 80108b2:	20ff      	movs	r0, #255	; 0xff
 80108b4:	f7ff fc0c 	bl	80100d0 <xchg_spi>
 80108b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80108bc:	3b01      	subs	r3, #1
 80108be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80108c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1f3      	bne.n	80108b2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80108ca:	7dbb      	ldrb	r3, [r7, #22]
 80108cc:	091b      	lsrs	r3, r3, #4
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	461a      	mov	r2, r3
 80108d2:	2310      	movs	r3, #16
 80108d4:	fa03 f202 	lsl.w	r2, r3, r2
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80108dc:	2300      	movs	r3, #0
 80108de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80108e2:	e098      	b.n	8010a16 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80108e4:	2100      	movs	r1, #0
 80108e6:	2009      	movs	r0, #9
 80108e8:	f7ff fce9 	bl	80102be <send_cmd>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	f040 8091 	bne.w	8010a16 <USER_SPI_ioctl+0x2b6>
 80108f4:	f107 030c 	add.w	r3, r7, #12
 80108f8:	2110      	movs	r1, #16
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7ff fc84 	bl	8010208 <rcvr_datablock>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 8087 	beq.w	8010a16 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010908:	4b4c      	ldr	r3, [pc, #304]	; (8010a3c <USER_SPI_ioctl+0x2dc>)
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	f003 0302 	and.w	r3, r3, #2
 8010910:	2b00      	cmp	r3, #0
 8010912:	d012      	beq.n	801093a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010914:	7dbb      	ldrb	r3, [r7, #22]
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 801091c:	7dfa      	ldrb	r2, [r7, #23]
 801091e:	09d2      	lsrs	r2, r2, #7
 8010920:	b2d2      	uxtb	r2, r2
 8010922:	4413      	add	r3, r2
 8010924:	1c5a      	adds	r2, r3, #1
 8010926:	7e7b      	ldrb	r3, [r7, #25]
 8010928:	099b      	lsrs	r3, r3, #6
 801092a:	b2db      	uxtb	r3, r3
 801092c:	3b01      	subs	r3, #1
 801092e:	fa02 f303 	lsl.w	r3, r2, r3
 8010932:	461a      	mov	r2, r3
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	e013      	b.n	8010962 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 801093a:	7dbb      	ldrb	r3, [r7, #22]
 801093c:	109b      	asrs	r3, r3, #2
 801093e:	b29b      	uxth	r3, r3
 8010940:	f003 031f 	and.w	r3, r3, #31
 8010944:	3301      	adds	r3, #1
 8010946:	7dfa      	ldrb	r2, [r7, #23]
 8010948:	00d2      	lsls	r2, r2, #3
 801094a:	f002 0218 	and.w	r2, r2, #24
 801094e:	7df9      	ldrb	r1, [r7, #23]
 8010950:	0949      	lsrs	r1, r1, #5
 8010952:	b2c9      	uxtb	r1, r1
 8010954:	440a      	add	r2, r1
 8010956:	3201      	adds	r2, #1
 8010958:	fb02 f303 	mul.w	r3, r2, r3
 801095c:	461a      	mov	r2, r3
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8010962:	2300      	movs	r3, #0
 8010964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010968:	e055      	b.n	8010a16 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801096a:	4b34      	ldr	r3, [pc, #208]	; (8010a3c <USER_SPI_ioctl+0x2dc>)
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	f003 0306 	and.w	r3, r3, #6
 8010972:	2b00      	cmp	r3, #0
 8010974:	d051      	beq.n	8010a1a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010976:	f107 020c 	add.w	r2, r7, #12
 801097a:	79fb      	ldrb	r3, [r7, #7]
 801097c:	210b      	movs	r1, #11
 801097e:	4618      	mov	r0, r3
 8010980:	f7ff feee 	bl	8010760 <USER_SPI_ioctl>
 8010984:	4603      	mov	r3, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	d149      	bne.n	8010a1e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801098a:	7b3b      	ldrb	r3, [r7, #12]
 801098c:	099b      	lsrs	r3, r3, #6
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d104      	bne.n	801099e <USER_SPI_ioctl+0x23e>
 8010994:	7dbb      	ldrb	r3, [r7, #22]
 8010996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801099a:	2b00      	cmp	r3, #0
 801099c:	d041      	beq.n	8010a22 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	623b      	str	r3, [r7, #32]
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80109ae:	4b23      	ldr	r3, [pc, #140]	; (8010a3c <USER_SPI_ioctl+0x2dc>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	f003 0308 	and.w	r3, r3, #8
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80109ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109bc:	025b      	lsls	r3, r3, #9
 80109be:	62bb      	str	r3, [r7, #40]	; 0x28
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	025b      	lsls	r3, r3, #9
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80109c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109c8:	2020      	movs	r0, #32
 80109ca:	f7ff fc78 	bl	80102be <send_cmd>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d128      	bne.n	8010a26 <USER_SPI_ioctl+0x2c6>
 80109d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109d6:	2021      	movs	r0, #33	; 0x21
 80109d8:	f7ff fc71 	bl	80102be <send_cmd>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d121      	bne.n	8010a26 <USER_SPI_ioctl+0x2c6>
 80109e2:	2100      	movs	r1, #0
 80109e4:	2026      	movs	r0, #38	; 0x26
 80109e6:	f7ff fc6a 	bl	80102be <send_cmd>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d11a      	bne.n	8010a26 <USER_SPI_ioctl+0x2c6>
 80109f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80109f4:	f7ff fbb9 	bl	801016a <wait_ready>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d013      	beq.n	8010a26 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80109fe:	2300      	movs	r3, #0
 8010a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010a04:	e00f      	b.n	8010a26 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010a06:	2304      	movs	r3, #4
 8010a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010a0c:	e00c      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		break;
 8010a0e:	bf00      	nop
 8010a10:	e00a      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		break;
 8010a12:	bf00      	nop
 8010a14:	e008      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		break;
 8010a16:	bf00      	nop
 8010a18:	e006      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010a1a:	bf00      	nop
 8010a1c:	e004      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010a1e:	bf00      	nop
 8010a20:	e002      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010a22:	bf00      	nop
 8010a24:	e000      	b.n	8010a28 <USER_SPI_ioctl+0x2c8>
		break;
 8010a26:	bf00      	nop
	}

	despiselect();
 8010a28:	f7ff fbc2 	bl	80101b0 <despiselect>

	return res;
 8010a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3730      	adds	r7, #48	; 0x30
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	20000074 	.word	0x20000074
 8010a3c:	20000840 	.word	0x20000840

08010a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010a4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010a50:	f008 fb72 	bl	8019138 <USBD_static_malloc>
 8010a54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d105      	bne.n	8010a68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010a64:	2302      	movs	r3, #2
 8010a66:	e066      	b.n	8010b36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	7c1b      	ldrb	r3, [r3, #16]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d119      	bne.n	8010aac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	2181      	movs	r1, #129	; 0x81
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f008 fa36 	bl	8018ef2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a90:	2202      	movs	r2, #2
 8010a92:	2101      	movs	r1, #1
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f008 fa2c 	bl	8018ef2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2210      	movs	r2, #16
 8010aa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010aaa:	e016      	b.n	8010ada <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010aac:	2340      	movs	r3, #64	; 0x40
 8010aae:	2202      	movs	r2, #2
 8010ab0:	2181      	movs	r1, #129	; 0x81
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f008 fa1d 	bl	8018ef2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010abe:	2340      	movs	r3, #64	; 0x40
 8010ac0:	2202      	movs	r2, #2
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f008 fa14 	bl	8018ef2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2201      	movs	r2, #1
 8010ace:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2210      	movs	r2, #16
 8010ad6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010ada:	2308      	movs	r3, #8
 8010adc:	2203      	movs	r2, #3
 8010ade:	2182      	movs	r1, #130	; 0x82
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f008 fa06 	bl	8018ef2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7c1b      	ldrb	r3, [r3, #16]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d109      	bne.n	8010b24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b1a:	2101      	movs	r1, #1
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f008 fad7 	bl	80190d0 <USBD_LL_PrepareReceive>
 8010b22:	e007      	b.n	8010b34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b2a:	2340      	movs	r3, #64	; 0x40
 8010b2c:	2101      	movs	r1, #1
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f008 face 	bl	80190d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	460b      	mov	r3, r1
 8010b48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010b4a:	2181      	movs	r1, #129	; 0x81
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f008 f9f6 	bl	8018f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2200      	movs	r2, #0
 8010b56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010b58:	2101      	movs	r1, #1
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f008 f9ef 	bl	8018f3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010b68:	2182      	movs	r1, #130	; 0x82
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f008 f9e7 	bl	8018f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00e      	beq.n	8010ba8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f008 fada 	bl	8019154 <USBD_static_free>
    pdev->pClassData = NULL;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b086      	sub	sp, #24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	e0af      	b.n	8010d3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d03f      	beq.n	8010c68 <USBD_CDC_Setup+0xb4>
 8010be8:	2b20      	cmp	r3, #32
 8010bea:	f040 809f 	bne.w	8010d2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	88db      	ldrh	r3, [r3, #6]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d02e      	beq.n	8010c54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	b25b      	sxtb	r3, r3
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	da16      	bge.n	8010c2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010c0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	88d2      	ldrh	r2, [r2, #6]
 8010c12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	88db      	ldrh	r3, [r3, #6]
 8010c18:	2b07      	cmp	r3, #7
 8010c1a:	bf28      	it	cs
 8010c1c:	2307      	movcs	r3, #7
 8010c1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	89fa      	ldrh	r2, [r7, #14]
 8010c24:	4619      	mov	r1, r3
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f001 fae9 	bl	80121fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010c2c:	e085      	b.n	8010d3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	785a      	ldrb	r2, [r3, #1]
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	88db      	ldrh	r3, [r3, #6]
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010c44:	6939      	ldr	r1, [r7, #16]
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	88db      	ldrh	r3, [r3, #6]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f001 fb02 	bl	8012256 <USBD_CtlPrepareRx>
      break;
 8010c52:	e072      	b.n	8010d3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c5a:	689b      	ldr	r3, [r3, #8]
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	7850      	ldrb	r0, [r2, #1]
 8010c60:	2200      	movs	r2, #0
 8010c62:	6839      	ldr	r1, [r7, #0]
 8010c64:	4798      	blx	r3
      break;
 8010c66:	e068      	b.n	8010d3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	785b      	ldrb	r3, [r3, #1]
 8010c6c:	2b0b      	cmp	r3, #11
 8010c6e:	d852      	bhi.n	8010d16 <USBD_CDC_Setup+0x162>
 8010c70:	a201      	add	r2, pc, #4	; (adr r2, 8010c78 <USBD_CDC_Setup+0xc4>)
 8010c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c76:	bf00      	nop
 8010c78:	08010ca9 	.word	0x08010ca9
 8010c7c:	08010d25 	.word	0x08010d25
 8010c80:	08010d17 	.word	0x08010d17
 8010c84:	08010d17 	.word	0x08010d17
 8010c88:	08010d17 	.word	0x08010d17
 8010c8c:	08010d17 	.word	0x08010d17
 8010c90:	08010d17 	.word	0x08010d17
 8010c94:	08010d17 	.word	0x08010d17
 8010c98:	08010d17 	.word	0x08010d17
 8010c9c:	08010d17 	.word	0x08010d17
 8010ca0:	08010cd3 	.word	0x08010cd3
 8010ca4:	08010cfd 	.word	0x08010cfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d107      	bne.n	8010cc4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010cb4:	f107 030a 	add.w	r3, r7, #10
 8010cb8:	2202      	movs	r2, #2
 8010cba:	4619      	mov	r1, r3
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f001 fa9e 	bl	80121fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cc2:	e032      	b.n	8010d2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010cc4:	6839      	ldr	r1, [r7, #0]
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f001 fa28 	bl	801211c <USBD_CtlError>
            ret = USBD_FAIL;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	75fb      	strb	r3, [r7, #23]
          break;
 8010cd0:	e02b      	b.n	8010d2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b03      	cmp	r3, #3
 8010cdc:	d107      	bne.n	8010cee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010cde:	f107 030d 	add.w	r3, r7, #13
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f001 fa89 	bl	80121fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cec:	e01d      	b.n	8010d2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f001 fa13 	bl	801211c <USBD_CtlError>
            ret = USBD_FAIL;
 8010cf6:	2303      	movs	r3, #3
 8010cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8010cfa:	e016      	b.n	8010d2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b03      	cmp	r3, #3
 8010d06:	d00f      	beq.n	8010d28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f001 fa06 	bl	801211c <USBD_CtlError>
            ret = USBD_FAIL;
 8010d10:	2303      	movs	r3, #3
 8010d12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010d14:	e008      	b.n	8010d28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f001 f9ff 	bl	801211c <USBD_CtlError>
          ret = USBD_FAIL;
 8010d1e:	2303      	movs	r3, #3
 8010d20:	75fb      	strb	r3, [r7, #23]
          break;
 8010d22:	e002      	b.n	8010d2a <USBD_CDC_Setup+0x176>
          break;
 8010d24:	bf00      	nop
 8010d26:	e008      	b.n	8010d3a <USBD_CDC_Setup+0x186>
          break;
 8010d28:	bf00      	nop
      }
      break;
 8010d2a:	e006      	b.n	8010d3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f001 f9f4 	bl	801211c <USBD_CtlError>
      ret = USBD_FAIL;
 8010d34:	2303      	movs	r3, #3
 8010d36:	75fb      	strb	r3, [r7, #23]
      break;
 8010d38:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3718      	adds	r7, #24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d62:	2303      	movs	r3, #3
 8010d64:	e04f      	b.n	8010e06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010d6e:	78fa      	ldrb	r2, [r7, #3]
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	4613      	mov	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	440b      	add	r3, r1
 8010d7c:	3318      	adds	r3, #24
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d029      	beq.n	8010dd8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010d84:	78fa      	ldrb	r2, [r7, #3]
 8010d86:	6879      	ldr	r1, [r7, #4]
 8010d88:	4613      	mov	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	440b      	add	r3, r1
 8010d92:	3318      	adds	r3, #24
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	78f9      	ldrb	r1, [r7, #3]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	1a5b      	subs	r3, r3, r1
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4403      	add	r3, r0
 8010da4:	3344      	adds	r3, #68	; 0x44
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010dac:	fb03 f301 	mul.w	r3, r3, r1
 8010db0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d110      	bne.n	8010dd8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010db6:	78fa      	ldrb	r2, [r7, #3]
 8010db8:	6879      	ldr	r1, [r7, #4]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	4413      	add	r3, r2
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	440b      	add	r3, r1
 8010dc4:	3318      	adds	r3, #24
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010dca:	78f9      	ldrb	r1, [r7, #3]
 8010dcc:	2300      	movs	r3, #0
 8010dce:	2200      	movs	r2, #0
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f008 f95c 	bl	801908e <USBD_LL_Transmit>
 8010dd6:	e015      	b.n	8010e04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00b      	beq.n	8010e04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010e00:	78fa      	ldrb	r2, [r7, #3]
 8010e02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	460b      	mov	r3, r1
 8010e18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d101      	bne.n	8010e30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	e015      	b.n	8010e5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010e30:	78fb      	ldrb	r3, [r7, #3]
 8010e32:	4619      	mov	r1, r3
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f008 f96c 	bl	8019112 <USBD_LL_GetRxDataSize>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010e50:	68fa      	ldr	r2, [r7, #12]
 8010e52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010e56:	4611      	mov	r1, r2
 8010e58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d101      	bne.n	8010e7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	e01b      	b.n	8010eb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d015      	beq.n	8010eb4 <USBD_CDC_EP0_RxReady+0x50>
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010e8e:	2bff      	cmp	r3, #255	; 0xff
 8010e90:	d010      	beq.n	8010eb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e98:	689b      	ldr	r3, [r3, #8]
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010ea0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010ea8:	b292      	uxth	r2, r2
 8010eaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	22ff      	movs	r2, #255	; 0xff
 8010eb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010eb4:	2300      	movs	r3, #0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
	...

08010ec0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2243      	movs	r2, #67	; 0x43
 8010ecc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010ece:	4b03      	ldr	r3, [pc, #12]	; (8010edc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr
 8010edc:	20000100 	.word	0x20000100

08010ee0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2243      	movs	r2, #67	; 0x43
 8010eec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010eee:	4b03      	ldr	r3, [pc, #12]	; (8010efc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	200000bc 	.word	0x200000bc

08010f00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b083      	sub	sp, #12
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2243      	movs	r2, #67	; 0x43
 8010f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010f0e:	4b03      	ldr	r3, [pc, #12]	; (8010f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	20000144 	.word	0x20000144

08010f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	220a      	movs	r2, #10
 8010f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010f2e:	4b03      	ldr	r3, [pc, #12]	; (8010f3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	20000078 	.word	0x20000078

08010f40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010f50:	2303      	movs	r3, #3
 8010f52:	e004      	b.n	8010f5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	683a      	ldr	r2, [r7, #0]
 8010f58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b087      	sub	sp, #28
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	60f8      	str	r0, [r7, #12]
 8010f72:	60b9      	str	r1, [r7, #8]
 8010f74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010f84:	2303      	movs	r3, #3
 8010f86:	e008      	b.n	8010f9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	371c      	adds	r7, #28
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010fa6:	b480      	push	{r7}
 8010fa8:	b085      	sub	sp, #20
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d101      	bne.n	8010fc2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	e004      	b.n	8010fcc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	683a      	ldr	r2, [r7, #0]
 8010fc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010fca:	2300      	movs	r3, #0
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fe6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d101      	bne.n	8010ff6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e016      	b.n	8011024 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	7c1b      	ldrb	r3, [r3, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d109      	bne.n	8011012 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011008:	2101      	movs	r1, #1
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f008 f860 	bl	80190d0 <USBD_LL_PrepareReceive>
 8011010:	e007      	b.n	8011022 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011018:	2340      	movs	r3, #64	; 0x40
 801101a:	2101      	movs	r1, #1
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f008 f857 	bl	80190d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	4613      	mov	r3, r2
 8011038:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d101      	bne.n	8011044 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011040:	2303      	movs	r3, #3
 8011042:	e01f      	b.n	8011084 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2200      	movs	r2, #0
 8011058:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2201      	movs	r2, #1
 801106e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	79fa      	ldrb	r2, [r7, #7]
 8011076:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f007 fed3 	bl	8018e24 <USBD_LL_Init>
 801107e:	4603      	mov	r3, r0
 8011080:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011082:	7dfb      	ldrb	r3, [r7, #23]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011096:	2300      	movs	r3, #0
 8011098:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d101      	bne.n	80110a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e016      	b.n	80110d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00b      	beq.n	80110d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c0:	f107 020e 	add.w	r2, r7, #14
 80110c4:	4610      	mov	r0, r2
 80110c6:	4798      	blx	r3
 80110c8:	4602      	mov	r2, r0
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b082      	sub	sp, #8
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f007 feea 	bl	8018ebc <USBD_LL_Start>
 80110e8:	4603      	mov	r3, r0
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80110f2:	b480      	push	{r7}
 80110f4:	b083      	sub	sp, #12
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80110fa:	2300      	movs	r3, #0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr

08011108 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	460b      	mov	r3, r1
 8011112:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011114:	2303      	movs	r3, #3
 8011116:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801111e:	2b00      	cmp	r3, #0
 8011120:	d009      	beq.n	8011136 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	78fa      	ldrb	r2, [r7, #3]
 801112c:	4611      	mov	r1, r2
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	4798      	blx	r3
 8011132:	4603      	mov	r3, r0
 8011134:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011136:	7bfb      	ldrb	r3, [r7, #15]
}
 8011138:	4618      	mov	r0, r3
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	460b      	mov	r3, r1
 801114a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011152:	2b00      	cmp	r3, #0
 8011154:	d007      	beq.n	8011166 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	78fa      	ldrb	r2, [r7, #3]
 8011160:	4611      	mov	r1, r2
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	4798      	blx	r3
  }

  return USBD_OK;
 8011166:	2300      	movs	r3, #0
}
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	4618      	mov	r0, r3
 8011184:	f000 ff90 	bl	80120a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011196:	461a      	mov	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80111a4:	f003 031f 	and.w	r3, r3, #31
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d01a      	beq.n	80111e2 <USBD_LL_SetupStage+0x72>
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d822      	bhi.n	80111f6 <USBD_LL_SetupStage+0x86>
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d002      	beq.n	80111ba <USBD_LL_SetupStage+0x4a>
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d00a      	beq.n	80111ce <USBD_LL_SetupStage+0x5e>
 80111b8:	e01d      	b.n	80111f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80111c0:	4619      	mov	r1, r3
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fa62 	bl	801168c <USBD_StdDevReq>
 80111c8:	4603      	mov	r3, r0
 80111ca:	73fb      	strb	r3, [r7, #15]
      break;
 80111cc:	e020      	b.n	8011210 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 fac6 	bl	8011768 <USBD_StdItfReq>
 80111dc:	4603      	mov	r3, r0
 80111de:	73fb      	strb	r3, [r7, #15]
      break;
 80111e0:	e016      	b.n	8011210 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fb05 	bl	80117fa <USBD_StdEPReq>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]
      break;
 80111f4:	e00c      	b.n	8011210 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80111fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011200:	b2db      	uxtb	r3, r3
 8011202:	4619      	mov	r1, r3
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f007 feb9 	bl	8018f7c <USBD_LL_StallEP>
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]
      break;
 801120e:	bf00      	nop
  }

  return ret;
 8011210:	7bfb      	ldrb	r3, [r7, #15]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b086      	sub	sp, #24
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	460b      	mov	r3, r1
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011228:	7afb      	ldrb	r3, [r7, #11]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d138      	bne.n	80112a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011234:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801123c:	2b03      	cmp	r3, #3
 801123e:	d14a      	bne.n	80112d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	689a      	ldr	r2, [r3, #8]
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	429a      	cmp	r2, r3
 801124a:	d913      	bls.n	8011274 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	689a      	ldr	r2, [r3, #8]
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	1ad2      	subs	r2, r2, r3
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	68da      	ldr	r2, [r3, #12]
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	4293      	cmp	r3, r2
 8011264:	bf28      	it	cs
 8011266:	4613      	movcs	r3, r2
 8011268:	461a      	mov	r2, r3
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f001 f80f 	bl	8012290 <USBD_CtlContinueRx>
 8011272:	e030      	b.n	80112d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801127a:	b2db      	uxtb	r3, r3
 801127c:	2b03      	cmp	r3, #3
 801127e:	d10b      	bne.n	8011298 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d005      	beq.n	8011298 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011292:	691b      	ldr	r3, [r3, #16]
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f001 f80a 	bl	80122b2 <USBD_CtlSendStatus>
 801129e:	e01a      	b.n	80112d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	2b03      	cmp	r3, #3
 80112aa:	d114      	bne.n	80112d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112b2:	699b      	ldr	r3, [r3, #24]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00e      	beq.n	80112d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112be:	699b      	ldr	r3, [r3, #24]
 80112c0:	7afa      	ldrb	r2, [r7, #11]
 80112c2:	4611      	mov	r1, r2
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	4798      	blx	r3
 80112c8:	4603      	mov	r3, r0
 80112ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80112cc:	7dfb      	ldrb	r3, [r7, #23]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d001      	beq.n	80112d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80112d2:	7dfb      	ldrb	r3, [r7, #23]
 80112d4:	e000      	b.n	80112d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3718      	adds	r7, #24
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	460b      	mov	r3, r1
 80112ea:	607a      	str	r2, [r7, #4]
 80112ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80112ee:	7afb      	ldrb	r3, [r7, #11]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d16b      	bne.n	80113cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	3314      	adds	r3, #20
 80112f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011300:	2b02      	cmp	r3, #2
 8011302:	d156      	bne.n	80113b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	689a      	ldr	r2, [r3, #8]
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	429a      	cmp	r2, r3
 801130e:	d914      	bls.n	801133a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	689a      	ldr	r2, [r3, #8]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	1ad2      	subs	r2, r2, r3
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	461a      	mov	r2, r3
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f000 ff84 	bl	8012234 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801132c:	2300      	movs	r3, #0
 801132e:	2200      	movs	r2, #0
 8011330:	2100      	movs	r1, #0
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f007 fecc 	bl	80190d0 <USBD_LL_PrepareReceive>
 8011338:	e03b      	b.n	80113b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	68da      	ldr	r2, [r3, #12]
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	429a      	cmp	r2, r3
 8011344:	d11c      	bne.n	8011380 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	685a      	ldr	r2, [r3, #4]
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801134e:	429a      	cmp	r2, r3
 8011350:	d316      	bcc.n	8011380 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	685a      	ldr	r2, [r3, #4]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801135c:	429a      	cmp	r2, r3
 801135e:	d20f      	bcs.n	8011380 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011360:	2200      	movs	r2, #0
 8011362:	2100      	movs	r1, #0
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f000 ff65 	bl	8012234 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2200      	movs	r2, #0
 801136e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011372:	2300      	movs	r3, #0
 8011374:	2200      	movs	r2, #0
 8011376:	2100      	movs	r1, #0
 8011378:	68f8      	ldr	r0, [r7, #12]
 801137a:	f007 fea9 	bl	80190d0 <USBD_LL_PrepareReceive>
 801137e:	e018      	b.n	80113b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011386:	b2db      	uxtb	r3, r3
 8011388:	2b03      	cmp	r3, #3
 801138a:	d10b      	bne.n	80113a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d005      	beq.n	80113a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80113a4:	2180      	movs	r1, #128	; 0x80
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f007 fde8 	bl	8018f7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 ff93 	bl	80122d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d122      	bne.n	8011402 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80113bc:	68f8      	ldr	r0, [r7, #12]
 80113be:	f7ff fe98 	bl	80110f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80113ca:	e01a      	b.n	8011402 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b03      	cmp	r3, #3
 80113d6:	d114      	bne.n	8011402 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113de:	695b      	ldr	r3, [r3, #20]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00e      	beq.n	8011402 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ea:	695b      	ldr	r3, [r3, #20]
 80113ec:	7afa      	ldrb	r2, [r7, #11]
 80113ee:	4611      	mov	r1, r2
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	4798      	blx	r3
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80113f8:	7dfb      	ldrb	r3, [r7, #23]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80113fe:	7dfb      	ldrb	r3, [r7, #23]
 8011400:	e000      	b.n	8011404 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2201      	movs	r2, #1
 8011418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011438:	2b00      	cmp	r3, #0
 801143a:	d101      	bne.n	8011440 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801143c:	2303      	movs	r3, #3
 801143e:	e02f      	b.n	80114a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00f      	beq.n	801146a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d009      	beq.n	801146a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	6852      	ldr	r2, [r2, #4]
 8011462:	b2d2      	uxtb	r2, r2
 8011464:	4611      	mov	r1, r2
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801146a:	2340      	movs	r3, #64	; 0x40
 801146c:	2200      	movs	r2, #0
 801146e:	2100      	movs	r1, #0
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f007 fd3e 	bl	8018ef2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2201      	movs	r2, #1
 801147a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2240      	movs	r2, #64	; 0x40
 8011482:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011486:	2340      	movs	r3, #64	; 0x40
 8011488:	2200      	movs	r2, #0
 801148a:	2180      	movs	r1, #128	; 0x80
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f007 fd30 	bl	8018ef2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2201      	movs	r2, #1
 8011496:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2240      	movs	r2, #64	; 0x40
 801149c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	460b      	mov	r3, r1
 80114b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	78fa      	ldrb	r2, [r7, #3]
 80114b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114d6:	b2da      	uxtb	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2204      	movs	r2, #4
 80114e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80114e6:	2300      	movs	r3, #0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b04      	cmp	r3, #4
 8011506:	d106      	bne.n	8011516 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801150e:	b2da      	uxtb	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011532:	2b00      	cmp	r3, #0
 8011534:	d101      	bne.n	801153a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011536:	2303      	movs	r3, #3
 8011538:	e012      	b.n	8011560 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011540:	b2db      	uxtb	r3, r3
 8011542:	2b03      	cmp	r3, #3
 8011544:	d10b      	bne.n	801155e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801154c:	69db      	ldr	r3, [r3, #28]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d005      	beq.n	801155e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011558:	69db      	ldr	r3, [r3, #28]
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	460b      	mov	r3, r1
 8011572:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801157a:	2b00      	cmp	r3, #0
 801157c:	d101      	bne.n	8011582 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801157e:	2303      	movs	r3, #3
 8011580:	e014      	b.n	80115ac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011588:	b2db      	uxtb	r3, r3
 801158a:	2b03      	cmp	r3, #3
 801158c:	d10d      	bne.n	80115aa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d007      	beq.n	80115aa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a0:	6a1b      	ldr	r3, [r3, #32]
 80115a2:	78fa      	ldrb	r2, [r7, #3]
 80115a4:	4611      	mov	r1, r2
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80115aa:	2300      	movs	r3, #0
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	460b      	mov	r3, r1
 80115be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d101      	bne.n	80115ce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80115ca:	2303      	movs	r3, #3
 80115cc:	e014      	b.n	80115f8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	d10d      	bne.n	80115f6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d007      	beq.n	80115f6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ee:	78fa      	ldrb	r2, [r7, #3]
 80115f0:	4611      	mov	r1, r2
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80115f6:	2300      	movs	r3, #0
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	370c      	adds	r7, #12
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr

08011616 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b082      	sub	sp, #8
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2201      	movs	r2, #1
 8011622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801162c:	2b00      	cmp	r3, #0
 801162e:	d009      	beq.n	8011644 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	6852      	ldr	r2, [r2, #4]
 801163c:	b2d2      	uxtb	r2, r2
 801163e:	4611      	mov	r1, r2
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	4798      	blx	r3
  }

  return USBD_OK;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801164e:	b480      	push	{r7}
 8011650:	b087      	sub	sp, #28
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	3301      	adds	r3, #1
 8011664:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801166c:	8a3b      	ldrh	r3, [r7, #16]
 801166e:	021b      	lsls	r3, r3, #8
 8011670:	b21a      	sxth	r2, r3
 8011672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011676:	4313      	orrs	r3, r2
 8011678:	b21b      	sxth	r3, r3
 801167a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801167c:	89fb      	ldrh	r3, [r7, #14]
}
 801167e:	4618      	mov	r0, r3
 8011680:	371c      	adds	r7, #28
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
	...

0801168c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011696:	2300      	movs	r3, #0
 8011698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116a2:	2b40      	cmp	r3, #64	; 0x40
 80116a4:	d005      	beq.n	80116b2 <USBD_StdDevReq+0x26>
 80116a6:	2b40      	cmp	r3, #64	; 0x40
 80116a8:	d853      	bhi.n	8011752 <USBD_StdDevReq+0xc6>
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00b      	beq.n	80116c6 <USBD_StdDevReq+0x3a>
 80116ae:	2b20      	cmp	r3, #32
 80116b0:	d14f      	bne.n	8011752 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	6839      	ldr	r1, [r7, #0]
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	4798      	blx	r3
 80116c0:	4603      	mov	r3, r0
 80116c2:	73fb      	strb	r3, [r7, #15]
      break;
 80116c4:	e04a      	b.n	801175c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	785b      	ldrb	r3, [r3, #1]
 80116ca:	2b09      	cmp	r3, #9
 80116cc:	d83b      	bhi.n	8011746 <USBD_StdDevReq+0xba>
 80116ce:	a201      	add	r2, pc, #4	; (adr r2, 80116d4 <USBD_StdDevReq+0x48>)
 80116d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d4:	08011729 	.word	0x08011729
 80116d8:	0801173d 	.word	0x0801173d
 80116dc:	08011747 	.word	0x08011747
 80116e0:	08011733 	.word	0x08011733
 80116e4:	08011747 	.word	0x08011747
 80116e8:	08011707 	.word	0x08011707
 80116ec:	080116fd 	.word	0x080116fd
 80116f0:	08011747 	.word	0x08011747
 80116f4:	0801171f 	.word	0x0801171f
 80116f8:	08011711 	.word	0x08011711
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f9de 	bl	8011ac0 <USBD_GetDescriptor>
          break;
 8011704:	e024      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f000 fb43 	bl	8011d94 <USBD_SetAddress>
          break;
 801170e:	e01f      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011710:	6839      	ldr	r1, [r7, #0]
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 fb82 	bl	8011e1c <USBD_SetConfig>
 8011718:	4603      	mov	r3, r0
 801171a:	73fb      	strb	r3, [r7, #15]
          break;
 801171c:	e018      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801171e:	6839      	ldr	r1, [r7, #0]
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 fc21 	bl	8011f68 <USBD_GetConfig>
          break;
 8011726:	e013      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 fc52 	bl	8011fd4 <USBD_GetStatus>
          break;
 8011730:	e00e      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011732:	6839      	ldr	r1, [r7, #0]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 fc81 	bl	801203c <USBD_SetFeature>
          break;
 801173a:	e009      	b.n	8011750 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fc90 	bl	8012064 <USBD_ClrFeature>
          break;
 8011744:	e004      	b.n	8011750 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011746:	6839      	ldr	r1, [r7, #0]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fce7 	bl	801211c <USBD_CtlError>
          break;
 801174e:	bf00      	nop
      }
      break;
 8011750:	e004      	b.n	801175c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011752:	6839      	ldr	r1, [r7, #0]
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fce1 	bl	801211c <USBD_CtlError>
      break;
 801175a:	bf00      	nop
  }

  return ret;
 801175c:	7bfb      	ldrb	r3, [r7, #15]
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop

08011768 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801177e:	2b40      	cmp	r3, #64	; 0x40
 8011780:	d005      	beq.n	801178e <USBD_StdItfReq+0x26>
 8011782:	2b40      	cmp	r3, #64	; 0x40
 8011784:	d82f      	bhi.n	80117e6 <USBD_StdItfReq+0x7e>
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <USBD_StdItfReq+0x26>
 801178a:	2b20      	cmp	r3, #32
 801178c:	d12b      	bne.n	80117e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011794:	b2db      	uxtb	r3, r3
 8011796:	3b01      	subs	r3, #1
 8011798:	2b02      	cmp	r3, #2
 801179a:	d81d      	bhi.n	80117d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	889b      	ldrh	r3, [r3, #4]
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d813      	bhi.n	80117ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ac:	689b      	ldr	r3, [r3, #8]
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	4798      	blx	r3
 80117b4:	4603      	mov	r3, r0
 80117b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	88db      	ldrh	r3, [r3, #6]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d110      	bne.n	80117e2 <USBD_StdItfReq+0x7a>
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10d      	bne.n	80117e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f000 fd73 	bl	80122b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80117cc:	e009      	b.n	80117e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80117ce:	6839      	ldr	r1, [r7, #0]
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 fca3 	bl	801211c <USBD_CtlError>
          break;
 80117d6:	e004      	b.n	80117e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80117d8:	6839      	ldr	r1, [r7, #0]
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 fc9e 	bl	801211c <USBD_CtlError>
          break;
 80117e0:	e000      	b.n	80117e4 <USBD_StdItfReq+0x7c>
          break;
 80117e2:	bf00      	nop
      }
      break;
 80117e4:	e004      	b.n	80117f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fc97 	bl	801211c <USBD_CtlError>
      break;
 80117ee:	bf00      	nop
  }

  return ret;
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b084      	sub	sp, #16
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	889b      	ldrh	r3, [r3, #4]
 801180c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011816:	2b40      	cmp	r3, #64	; 0x40
 8011818:	d007      	beq.n	801182a <USBD_StdEPReq+0x30>
 801181a:	2b40      	cmp	r3, #64	; 0x40
 801181c:	f200 8145 	bhi.w	8011aaa <USBD_StdEPReq+0x2b0>
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00c      	beq.n	801183e <USBD_StdEPReq+0x44>
 8011824:	2b20      	cmp	r3, #32
 8011826:	f040 8140 	bne.w	8011aaa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	4798      	blx	r3
 8011838:	4603      	mov	r3, r0
 801183a:	73fb      	strb	r3, [r7, #15]
      break;
 801183c:	e13a      	b.n	8011ab4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	785b      	ldrb	r3, [r3, #1]
 8011842:	2b03      	cmp	r3, #3
 8011844:	d007      	beq.n	8011856 <USBD_StdEPReq+0x5c>
 8011846:	2b03      	cmp	r3, #3
 8011848:	f300 8129 	bgt.w	8011a9e <USBD_StdEPReq+0x2a4>
 801184c:	2b00      	cmp	r3, #0
 801184e:	d07f      	beq.n	8011950 <USBD_StdEPReq+0x156>
 8011850:	2b01      	cmp	r3, #1
 8011852:	d03c      	beq.n	80118ce <USBD_StdEPReq+0xd4>
 8011854:	e123      	b.n	8011a9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801185c:	b2db      	uxtb	r3, r3
 801185e:	2b02      	cmp	r3, #2
 8011860:	d002      	beq.n	8011868 <USBD_StdEPReq+0x6e>
 8011862:	2b03      	cmp	r3, #3
 8011864:	d016      	beq.n	8011894 <USBD_StdEPReq+0x9a>
 8011866:	e02c      	b.n	80118c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011868:	7bbb      	ldrb	r3, [r7, #14]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00d      	beq.n	801188a <USBD_StdEPReq+0x90>
 801186e:	7bbb      	ldrb	r3, [r7, #14]
 8011870:	2b80      	cmp	r3, #128	; 0x80
 8011872:	d00a      	beq.n	801188a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011874:	7bbb      	ldrb	r3, [r7, #14]
 8011876:	4619      	mov	r1, r3
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f007 fb7f 	bl	8018f7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801187e:	2180      	movs	r1, #128	; 0x80
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f007 fb7b 	bl	8018f7c <USBD_LL_StallEP>
 8011886:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011888:	e020      	b.n	80118cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 fc45 	bl	801211c <USBD_CtlError>
              break;
 8011892:	e01b      	b.n	80118cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	885b      	ldrh	r3, [r3, #2]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10e      	bne.n	80118ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00b      	beq.n	80118ba <USBD_StdEPReq+0xc0>
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
 80118a4:	2b80      	cmp	r3, #128	; 0x80
 80118a6:	d008      	beq.n	80118ba <USBD_StdEPReq+0xc0>
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	88db      	ldrh	r3, [r3, #6]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80118b0:	7bbb      	ldrb	r3, [r7, #14]
 80118b2:	4619      	mov	r1, r3
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f007 fb61 	bl	8018f7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 fcf9 	bl	80122b2 <USBD_CtlSendStatus>

              break;
 80118c0:	e004      	b.n	80118cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80118c2:	6839      	ldr	r1, [r7, #0]
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f000 fc29 	bl	801211c <USBD_CtlError>
              break;
 80118ca:	bf00      	nop
          }
          break;
 80118cc:	e0ec      	b.n	8011aa8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d002      	beq.n	80118e0 <USBD_StdEPReq+0xe6>
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d016      	beq.n	801190c <USBD_StdEPReq+0x112>
 80118de:	e030      	b.n	8011942 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118e0:	7bbb      	ldrb	r3, [r7, #14]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00d      	beq.n	8011902 <USBD_StdEPReq+0x108>
 80118e6:	7bbb      	ldrb	r3, [r7, #14]
 80118e8:	2b80      	cmp	r3, #128	; 0x80
 80118ea:	d00a      	beq.n	8011902 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80118ec:	7bbb      	ldrb	r3, [r7, #14]
 80118ee:	4619      	mov	r1, r3
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f007 fb43 	bl	8018f7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80118f6:	2180      	movs	r1, #128	; 0x80
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f007 fb3f 	bl	8018f7c <USBD_LL_StallEP>
 80118fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011900:	e025      	b.n	801194e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 fc09 	bl	801211c <USBD_CtlError>
              break;
 801190a:	e020      	b.n	801194e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	885b      	ldrh	r3, [r3, #2]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d11b      	bne.n	801194c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011914:	7bbb      	ldrb	r3, [r7, #14]
 8011916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801191a:	2b00      	cmp	r3, #0
 801191c:	d004      	beq.n	8011928 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801191e:	7bbb      	ldrb	r3, [r7, #14]
 8011920:	4619      	mov	r1, r3
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f007 fb49 	bl	8018fba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 fcc2 	bl	80122b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	4798      	blx	r3
 801193c:	4603      	mov	r3, r0
 801193e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011940:	e004      	b.n	801194c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 fbe9 	bl	801211c <USBD_CtlError>
              break;
 801194a:	e000      	b.n	801194e <USBD_StdEPReq+0x154>
              break;
 801194c:	bf00      	nop
          }
          break;
 801194e:	e0ab      	b.n	8011aa8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011956:	b2db      	uxtb	r3, r3
 8011958:	2b02      	cmp	r3, #2
 801195a:	d002      	beq.n	8011962 <USBD_StdEPReq+0x168>
 801195c:	2b03      	cmp	r3, #3
 801195e:	d032      	beq.n	80119c6 <USBD_StdEPReq+0x1cc>
 8011960:	e097      	b.n	8011a92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d007      	beq.n	8011978 <USBD_StdEPReq+0x17e>
 8011968:	7bbb      	ldrb	r3, [r7, #14]
 801196a:	2b80      	cmp	r3, #128	; 0x80
 801196c:	d004      	beq.n	8011978 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 fbd3 	bl	801211c <USBD_CtlError>
                break;
 8011976:	e091      	b.n	8011a9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801197c:	2b00      	cmp	r3, #0
 801197e:	da0b      	bge.n	8011998 <USBD_StdEPReq+0x19e>
 8011980:	7bbb      	ldrb	r3, [r7, #14]
 8011982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011986:	4613      	mov	r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	3310      	adds	r3, #16
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	4413      	add	r3, r2
 8011994:	3304      	adds	r3, #4
 8011996:	e00b      	b.n	80119b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011998:	7bbb      	ldrb	r3, [r7, #14]
 801199a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801199e:	4613      	mov	r3, r2
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	4413      	add	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	4413      	add	r3, r2
 80119ae:	3304      	adds	r3, #4
 80119b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2202      	movs	r2, #2
 80119bc:	4619      	mov	r1, r3
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 fc1d 	bl	80121fe <USBD_CtlSendData>
              break;
 80119c4:	e06a      	b.n	8011a9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80119c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	da11      	bge.n	80119f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119ce:	7bbb      	ldrb	r3, [r7, #14]
 80119d0:	f003 020f 	and.w	r2, r3, #15
 80119d4:	6879      	ldr	r1, [r7, #4]
 80119d6:	4613      	mov	r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	4413      	add	r3, r2
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	440b      	add	r3, r1
 80119e0:	3324      	adds	r3, #36	; 0x24
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d117      	bne.n	8011a18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 fb96 	bl	801211c <USBD_CtlError>
                  break;
 80119f0:	e054      	b.n	8011a9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119f2:	7bbb      	ldrb	r3, [r7, #14]
 80119f4:	f003 020f 	and.w	r2, r3, #15
 80119f8:	6879      	ldr	r1, [r7, #4]
 80119fa:	4613      	mov	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	4413      	add	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	440b      	add	r3, r1
 8011a04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d104      	bne.n	8011a18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fb83 	bl	801211c <USBD_CtlError>
                  break;
 8011a16:	e041      	b.n	8011a9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	da0b      	bge.n	8011a38 <USBD_StdEPReq+0x23e>
 8011a20:	7bbb      	ldrb	r3, [r7, #14]
 8011a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a26:	4613      	mov	r3, r2
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	4413      	add	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	3310      	adds	r3, #16
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	4413      	add	r3, r2
 8011a34:	3304      	adds	r3, #4
 8011a36:	e00b      	b.n	8011a50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a38:	7bbb      	ldrb	r3, [r7, #14]
 8011a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a3e:	4613      	mov	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	3304      	adds	r3, #4
 8011a50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a52:	7bbb      	ldrb	r3, [r7, #14]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <USBD_StdEPReq+0x264>
 8011a58:	7bbb      	ldrb	r3, [r7, #14]
 8011a5a:	2b80      	cmp	r3, #128	; 0x80
 8011a5c:	d103      	bne.n	8011a66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	2200      	movs	r2, #0
 8011a62:	601a      	str	r2, [r3, #0]
 8011a64:	e00e      	b.n	8011a84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a66:	7bbb      	ldrb	r3, [r7, #14]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f007 fac4 	bl	8018ff8 <USBD_LL_IsStallEP>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d003      	beq.n	8011a7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	2201      	movs	r2, #1
 8011a7a:	601a      	str	r2, [r3, #0]
 8011a7c:	e002      	b.n	8011a84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2200      	movs	r2, #0
 8011a82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	2202      	movs	r2, #2
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 fbb7 	bl	80121fe <USBD_CtlSendData>
              break;
 8011a90:	e004      	b.n	8011a9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 fb41 	bl	801211c <USBD_CtlError>
              break;
 8011a9a:	bf00      	nop
          }
          break;
 8011a9c:	e004      	b.n	8011aa8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011a9e:	6839      	ldr	r1, [r7, #0]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fb3b 	bl	801211c <USBD_CtlError>
          break;
 8011aa6:	bf00      	nop
      }
      break;
 8011aa8:	e004      	b.n	8011ab4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 fb35 	bl	801211c <USBD_CtlError>
      break;
 8011ab2:	bf00      	nop
  }

  return ret;
 8011ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011aca:	2300      	movs	r3, #0
 8011acc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	885b      	ldrh	r3, [r3, #2]
 8011ada:	0a1b      	lsrs	r3, r3, #8
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	2b06      	cmp	r3, #6
 8011ae2:	f200 8128 	bhi.w	8011d36 <USBD_GetDescriptor+0x276>
 8011ae6:	a201      	add	r2, pc, #4	; (adr r2, 8011aec <USBD_GetDescriptor+0x2c>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011b09 	.word	0x08011b09
 8011af0:	08011b21 	.word	0x08011b21
 8011af4:	08011b61 	.word	0x08011b61
 8011af8:	08011d37 	.word	0x08011d37
 8011afc:	08011d37 	.word	0x08011d37
 8011b00:	08011cd7 	.word	0x08011cd7
 8011b04:	08011d03 	.word	0x08011d03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	7c12      	ldrb	r2, [r2, #16]
 8011b14:	f107 0108 	add.w	r1, r7, #8
 8011b18:	4610      	mov	r0, r2
 8011b1a:	4798      	blx	r3
 8011b1c:	60f8      	str	r0, [r7, #12]
      break;
 8011b1e:	e112      	b.n	8011d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	7c1b      	ldrb	r3, [r3, #16]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10d      	bne.n	8011b44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b30:	f107 0208 	add.w	r2, r7, #8
 8011b34:	4610      	mov	r0, r2
 8011b36:	4798      	blx	r3
 8011b38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	2202      	movs	r2, #2
 8011b40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011b42:	e100      	b.n	8011d46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b4c:	f107 0208 	add.w	r2, r7, #8
 8011b50:	4610      	mov	r0, r2
 8011b52:	4798      	blx	r3
 8011b54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	701a      	strb	r2, [r3, #0]
      break;
 8011b5e:	e0f2      	b.n	8011d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	885b      	ldrh	r3, [r3, #2]
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b05      	cmp	r3, #5
 8011b68:	f200 80ac 	bhi.w	8011cc4 <USBD_GetDescriptor+0x204>
 8011b6c:	a201      	add	r2, pc, #4	; (adr r2, 8011b74 <USBD_GetDescriptor+0xb4>)
 8011b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b72:	bf00      	nop
 8011b74:	08011b8d 	.word	0x08011b8d
 8011b78:	08011bc1 	.word	0x08011bc1
 8011b7c:	08011bf5 	.word	0x08011bf5
 8011b80:	08011c29 	.word	0x08011c29
 8011b84:	08011c5d 	.word	0x08011c5d
 8011b88:	08011c91 	.word	0x08011c91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00b      	beq.n	8011bb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	7c12      	ldrb	r2, [r2, #16]
 8011ba4:	f107 0108 	add.w	r1, r7, #8
 8011ba8:	4610      	mov	r0, r2
 8011baa:	4798      	blx	r3
 8011bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bae:	e091      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f000 fab2 	bl	801211c <USBD_CtlError>
            err++;
 8011bb8:	7afb      	ldrb	r3, [r7, #11]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8011bbe:	e089      	b.n	8011cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bc6:	689b      	ldr	r3, [r3, #8]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d00b      	beq.n	8011be4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bd2:	689b      	ldr	r3, [r3, #8]
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	7c12      	ldrb	r2, [r2, #16]
 8011bd8:	f107 0108 	add.w	r1, r7, #8
 8011bdc:	4610      	mov	r0, r2
 8011bde:	4798      	blx	r3
 8011be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011be2:	e077      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011be4:	6839      	ldr	r1, [r7, #0]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f000 fa98 	bl	801211c <USBD_CtlError>
            err++;
 8011bec:	7afb      	ldrb	r3, [r7, #11]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8011bf2:	e06f      	b.n	8011cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00b      	beq.n	8011c18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	7c12      	ldrb	r2, [r2, #16]
 8011c0c:	f107 0108 	add.w	r1, r7, #8
 8011c10:	4610      	mov	r0, r2
 8011c12:	4798      	blx	r3
 8011c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c16:	e05d      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 fa7e 	bl	801211c <USBD_CtlError>
            err++;
 8011c20:	7afb      	ldrb	r3, [r7, #11]
 8011c22:	3301      	adds	r3, #1
 8011c24:	72fb      	strb	r3, [r7, #11]
          break;
 8011c26:	e055      	b.n	8011cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00b      	beq.n	8011c4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	7c12      	ldrb	r2, [r2, #16]
 8011c40:	f107 0108 	add.w	r1, r7, #8
 8011c44:	4610      	mov	r0, r2
 8011c46:	4798      	blx	r3
 8011c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c4a:	e043      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fa64 	bl	801211c <USBD_CtlError>
            err++;
 8011c54:	7afb      	ldrb	r3, [r7, #11]
 8011c56:	3301      	adds	r3, #1
 8011c58:	72fb      	strb	r3, [r7, #11]
          break;
 8011c5a:	e03b      	b.n	8011cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d00b      	beq.n	8011c80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c6e:	695b      	ldr	r3, [r3, #20]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	7c12      	ldrb	r2, [r2, #16]
 8011c74:	f107 0108 	add.w	r1, r7, #8
 8011c78:	4610      	mov	r0, r2
 8011c7a:	4798      	blx	r3
 8011c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c7e:	e029      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 fa4a 	bl	801211c <USBD_CtlError>
            err++;
 8011c88:	7afb      	ldrb	r3, [r7, #11]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8011c8e:	e021      	b.n	8011cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c96:	699b      	ldr	r3, [r3, #24]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00b      	beq.n	8011cb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ca2:	699b      	ldr	r3, [r3, #24]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	7c12      	ldrb	r2, [r2, #16]
 8011ca8:	f107 0108 	add.w	r1, r7, #8
 8011cac:	4610      	mov	r0, r2
 8011cae:	4798      	blx	r3
 8011cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cb2:	e00f      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fa30 	bl	801211c <USBD_CtlError>
            err++;
 8011cbc:	7afb      	ldrb	r3, [r7, #11]
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8011cc2:	e007      	b.n	8011cd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011cc4:	6839      	ldr	r1, [r7, #0]
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 fa28 	bl	801211c <USBD_CtlError>
          err++;
 8011ccc:	7afb      	ldrb	r3, [r7, #11]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011cd2:	bf00      	nop
      }
      break;
 8011cd4:	e037      	b.n	8011d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	7c1b      	ldrb	r3, [r3, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d109      	bne.n	8011cf2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ce6:	f107 0208 	add.w	r2, r7, #8
 8011cea:	4610      	mov	r0, r2
 8011cec:	4798      	blx	r3
 8011cee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cf0:	e029      	b.n	8011d46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011cf2:	6839      	ldr	r1, [r7, #0]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fa11 	bl	801211c <USBD_CtlError>
        err++;
 8011cfa:	7afb      	ldrb	r3, [r7, #11]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8011d00:	e021      	b.n	8011d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	7c1b      	ldrb	r3, [r3, #16]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10d      	bne.n	8011d26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d12:	f107 0208 	add.w	r2, r7, #8
 8011d16:	4610      	mov	r0, r2
 8011d18:	4798      	blx	r3
 8011d1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	2207      	movs	r2, #7
 8011d22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d24:	e00f      	b.n	8011d46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011d26:	6839      	ldr	r1, [r7, #0]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 f9f7 	bl	801211c <USBD_CtlError>
        err++;
 8011d2e:	7afb      	ldrb	r3, [r7, #11]
 8011d30:	3301      	adds	r3, #1
 8011d32:	72fb      	strb	r3, [r7, #11]
      break;
 8011d34:	e007      	b.n	8011d46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f9ef 	bl	801211c <USBD_CtlError>
      err++;
 8011d3e:	7afb      	ldrb	r3, [r7, #11]
 8011d40:	3301      	adds	r3, #1
 8011d42:	72fb      	strb	r3, [r7, #11]
      break;
 8011d44:	bf00      	nop
  }

  if (err != 0U)
 8011d46:	7afb      	ldrb	r3, [r7, #11]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d11e      	bne.n	8011d8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	88db      	ldrh	r3, [r3, #6]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d016      	beq.n	8011d82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011d54:	893b      	ldrh	r3, [r7, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00e      	beq.n	8011d78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	88da      	ldrh	r2, [r3, #6]
 8011d5e:	893b      	ldrh	r3, [r7, #8]
 8011d60:	4293      	cmp	r3, r2
 8011d62:	bf28      	it	cs
 8011d64:	4613      	movcs	r3, r2
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d6a:	893b      	ldrh	r3, [r7, #8]
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	68f9      	ldr	r1, [r7, #12]
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 fa44 	bl	80121fe <USBD_CtlSendData>
 8011d76:	e009      	b.n	8011d8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f9ce 	bl	801211c <USBD_CtlError>
 8011d80:	e004      	b.n	8011d8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 fa95 	bl	80122b2 <USBD_CtlSendStatus>
 8011d88:	e000      	b.n	8011d8c <USBD_GetDescriptor+0x2cc>
    return;
 8011d8a:	bf00      	nop
  }
}
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop

08011d94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	889b      	ldrh	r3, [r3, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d131      	bne.n	8011e0a <USBD_SetAddress+0x76>
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	88db      	ldrh	r3, [r3, #6]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d12d      	bne.n	8011e0a <USBD_SetAddress+0x76>
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	885b      	ldrh	r3, [r3, #2]
 8011db2:	2b7f      	cmp	r3, #127	; 0x7f
 8011db4:	d829      	bhi.n	8011e0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	885b      	ldrh	r3, [r3, #2]
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	2b03      	cmp	r3, #3
 8011dcc:	d104      	bne.n	8011dd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011dce:	6839      	ldr	r1, [r7, #0]
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 f9a3 	bl	801211c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dd6:	e01d      	b.n	8011e14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	7bfa      	ldrb	r2, [r7, #15]
 8011ddc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011de0:	7bfb      	ldrb	r3, [r7, #15]
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f007 f933 	bl	8019050 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 fa61 	bl	80122b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d004      	beq.n	8011e00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2202      	movs	r2, #2
 8011dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dfe:	e009      	b.n	8011e14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2201      	movs	r2, #1
 8011e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e08:	e004      	b.n	8011e14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e0a:	6839      	ldr	r1, [r7, #0]
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f000 f985 	bl	801211c <USBD_CtlError>
  }
}
 8011e12:	bf00      	nop
 8011e14:	bf00      	nop
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e26:	2300      	movs	r3, #0
 8011e28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	885b      	ldrh	r3, [r3, #2]
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	4b4c      	ldr	r3, [pc, #304]	; (8011f64 <USBD_SetConfig+0x148>)
 8011e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e34:	4b4b      	ldr	r3, [pc, #300]	; (8011f64 <USBD_SetConfig+0x148>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d905      	bls.n	8011e48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 f96c 	bl	801211c <USBD_CtlError>
    return USBD_FAIL;
 8011e44:	2303      	movs	r3, #3
 8011e46:	e088      	b.n	8011f5a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d002      	beq.n	8011e5a <USBD_SetConfig+0x3e>
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d025      	beq.n	8011ea4 <USBD_SetConfig+0x88>
 8011e58:	e071      	b.n	8011f3e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e5a:	4b42      	ldr	r3, [pc, #264]	; (8011f64 <USBD_SetConfig+0x148>)
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d01c      	beq.n	8011e9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011e62:	4b40      	ldr	r3, [pc, #256]	; (8011f64 <USBD_SetConfig+0x148>)
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	461a      	mov	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e6c:	4b3d      	ldr	r3, [pc, #244]	; (8011f64 <USBD_SetConfig+0x148>)
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	4619      	mov	r1, r3
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7ff f948 	bl	8011108 <USBD_SetClassConfig>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011e82:	6839      	ldr	r1, [r7, #0]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 f949 	bl	801211c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e8a:	e065      	b.n	8011f58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f000 fa10 	bl	80122b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2203      	movs	r2, #3
 8011e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011e9a:	e05d      	b.n	8011f58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fa08 	bl	80122b2 <USBD_CtlSendStatus>
      break;
 8011ea2:	e059      	b.n	8011f58 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011ea4:	4b2f      	ldr	r3, [pc, #188]	; (8011f64 <USBD_SetConfig+0x148>)
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d112      	bne.n	8011ed2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2202      	movs	r2, #2
 8011eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011eb4:	4b2b      	ldr	r3, [pc, #172]	; (8011f64 <USBD_SetConfig+0x148>)
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	461a      	mov	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ebe:	4b29      	ldr	r3, [pc, #164]	; (8011f64 <USBD_SetConfig+0x148>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7ff f93b 	bl	8011140 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 f9f1 	bl	80122b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011ed0:	e042      	b.n	8011f58 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011ed2:	4b24      	ldr	r3, [pc, #144]	; (8011f64 <USBD_SetConfig+0x148>)
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d02a      	beq.n	8011f36 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7ff f929 	bl	8011140 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011eee:	4b1d      	ldr	r3, [pc, #116]	; (8011f64 <USBD_SetConfig+0x148>)
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011ef8:	4b1a      	ldr	r3, [pc, #104]	; (8011f64 <USBD_SetConfig+0x148>)
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	4619      	mov	r1, r3
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff f902 	bl	8011108 <USBD_SetClassConfig>
 8011f04:	4603      	mov	r3, r0
 8011f06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011f08:	7bfb      	ldrb	r3, [r7, #15]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00f      	beq.n	8011f2e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011f0e:	6839      	ldr	r1, [r7, #0]
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f903 	bl	801211c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f7ff f90e 	bl	8011140 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2202      	movs	r2, #2
 8011f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011f2c:	e014      	b.n	8011f58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 f9bf 	bl	80122b2 <USBD_CtlSendStatus>
      break;
 8011f34:	e010      	b.n	8011f58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 f9bb 	bl	80122b2 <USBD_CtlSendStatus>
      break;
 8011f3c:	e00c      	b.n	8011f58 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011f3e:	6839      	ldr	r1, [r7, #0]
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 f8eb 	bl	801211c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f46:	4b07      	ldr	r3, [pc, #28]	; (8011f64 <USBD_SetConfig+0x148>)
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f7ff f8f7 	bl	8011140 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f52:	2303      	movs	r3, #3
 8011f54:	73fb      	strb	r3, [r7, #15]
      break;
 8011f56:	bf00      	nop
  }

  return ret;
 8011f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	20000841 	.word	0x20000841

08011f68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	88db      	ldrh	r3, [r3, #6]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d004      	beq.n	8011f84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f7a:	6839      	ldr	r1, [r7, #0]
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 f8cd 	bl	801211c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011f82:	e023      	b.n	8011fcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	dc02      	bgt.n	8011f96 <USBD_GetConfig+0x2e>
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	dc03      	bgt.n	8011f9c <USBD_GetConfig+0x34>
 8011f94:	e015      	b.n	8011fc2 <USBD_GetConfig+0x5a>
 8011f96:	2b03      	cmp	r3, #3
 8011f98:	d00b      	beq.n	8011fb2 <USBD_GetConfig+0x4a>
 8011f9a:	e012      	b.n	8011fc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	3308      	adds	r3, #8
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	4619      	mov	r1, r3
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 f927 	bl	80121fe <USBD_CtlSendData>
        break;
 8011fb0:	e00c      	b.n	8011fcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	4619      	mov	r1, r3
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f91f 	bl	80121fe <USBD_CtlSendData>
        break;
 8011fc0:	e004      	b.n	8011fcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 f8a9 	bl	801211c <USBD_CtlError>
        break;
 8011fca:	bf00      	nop
}
 8011fcc:	bf00      	nop
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	3b01      	subs	r3, #1
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d81e      	bhi.n	801202a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	88db      	ldrh	r3, [r3, #6]
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d004      	beq.n	8011ffe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 f890 	bl	801211c <USBD_CtlError>
        break;
 8011ffc:	e01a      	b.n	8012034 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2201      	movs	r2, #1
 8012002:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801200a:	2b00      	cmp	r3, #0
 801200c:	d005      	beq.n	801201a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	f043 0202 	orr.w	r2, r3, #2
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	330c      	adds	r3, #12
 801201e:	2202      	movs	r2, #2
 8012020:	4619      	mov	r1, r3
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f8eb 	bl	80121fe <USBD_CtlSendData>
      break;
 8012028:	e004      	b.n	8012034 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801202a:	6839      	ldr	r1, [r7, #0]
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f875 	bl	801211c <USBD_CtlError>
      break;
 8012032:	bf00      	nop
  }
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	885b      	ldrh	r3, [r3, #2]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d106      	bne.n	801205c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2201      	movs	r2, #1
 8012052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 f92b 	bl	80122b2 <USBD_CtlSendStatus>
  }
}
 801205c:	bf00      	nop
 801205e:	3708      	adds	r7, #8
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012074:	b2db      	uxtb	r3, r3
 8012076:	3b01      	subs	r3, #1
 8012078:	2b02      	cmp	r3, #2
 801207a:	d80b      	bhi.n	8012094 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	885b      	ldrh	r3, [r3, #2]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d10c      	bne.n	801209e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f910 	bl	80122b2 <USBD_CtlSendStatus>
      }
      break;
 8012092:	e004      	b.n	801209e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 f840 	bl	801211c <USBD_CtlError>
      break;
 801209c:	e000      	b.n	80120a0 <USBD_ClrFeature+0x3c>
      break;
 801209e:	bf00      	nop
  }
}
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	781a      	ldrb	r2, [r3, #0]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3301      	adds	r3, #1
 80120c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	3301      	adds	r3, #1
 80120d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f7ff fabb 	bl	801164e <SWAPBYTE>
 80120d8:	4603      	mov	r3, r0
 80120da:	461a      	mov	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	3301      	adds	r3, #1
 80120e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	3301      	adds	r3, #1
 80120ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7ff faae 	bl	801164e <SWAPBYTE>
 80120f2:	4603      	mov	r3, r0
 80120f4:	461a      	mov	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	3301      	adds	r3, #1
 80120fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	3301      	adds	r3, #1
 8012104:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f7ff faa1 	bl	801164e <SWAPBYTE>
 801210c:	4603      	mov	r3, r0
 801210e:	461a      	mov	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	80da      	strh	r2, [r3, #6]
}
 8012114:	bf00      	nop
 8012116:	3710      	adds	r7, #16
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012126:	2180      	movs	r1, #128	; 0x80
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f006 ff27 	bl	8018f7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801212e:	2100      	movs	r1, #0
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f006 ff23 	bl	8018f7c <USBD_LL_StallEP>
}
 8012136:	bf00      	nop
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b086      	sub	sp, #24
 8012142:	af00      	add	r7, sp, #0
 8012144:	60f8      	str	r0, [r7, #12]
 8012146:	60b9      	str	r1, [r7, #8]
 8012148:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801214a:	2300      	movs	r3, #0
 801214c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d036      	beq.n	80121c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012158:	6938      	ldr	r0, [r7, #16]
 801215a:	f000 f836 	bl	80121ca <USBD_GetLen>
 801215e:	4603      	mov	r3, r0
 8012160:	3301      	adds	r3, #1
 8012162:	b29b      	uxth	r3, r3
 8012164:	005b      	lsls	r3, r3, #1
 8012166:	b29a      	uxth	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	68ba      	ldr	r2, [r7, #8]
 8012170:	4413      	add	r3, r2
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	7812      	ldrb	r2, [r2, #0]
 8012176:	701a      	strb	r2, [r3, #0]
  idx++;
 8012178:	7dfb      	ldrb	r3, [r7, #23]
 801217a:	3301      	adds	r3, #1
 801217c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	4413      	add	r3, r2
 8012184:	2203      	movs	r2, #3
 8012186:	701a      	strb	r2, [r3, #0]
  idx++;
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	3301      	adds	r3, #1
 801218c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801218e:	e013      	b.n	80121b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012190:	7dfb      	ldrb	r3, [r7, #23]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	4413      	add	r3, r2
 8012196:	693a      	ldr	r2, [r7, #16]
 8012198:	7812      	ldrb	r2, [r2, #0]
 801219a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	3301      	adds	r3, #1
 80121a0:	613b      	str	r3, [r7, #16]
    idx++;
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	3301      	adds	r3, #1
 80121a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	4413      	add	r3, r2
 80121ae:	2200      	movs	r2, #0
 80121b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80121b2:	7dfb      	ldrb	r3, [r7, #23]
 80121b4:	3301      	adds	r3, #1
 80121b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1e7      	bne.n	8012190 <USBD_GetString+0x52>
 80121c0:	e000      	b.n	80121c4 <USBD_GetString+0x86>
    return;
 80121c2:	bf00      	nop
  }
}
 80121c4:	3718      	adds	r7, #24
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}

080121ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121ca:	b480      	push	{r7}
 80121cc:	b085      	sub	sp, #20
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80121d2:	2300      	movs	r3, #0
 80121d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80121da:	e005      	b.n	80121e8 <USBD_GetLen+0x1e>
  {
    len++;
 80121dc:	7bfb      	ldrb	r3, [r7, #15]
 80121de:	3301      	adds	r3, #1
 80121e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	3301      	adds	r3, #1
 80121e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d1f5      	bne.n	80121dc <USBD_GetLen+0x12>
  }

  return len;
 80121f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3714      	adds	r7, #20
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b084      	sub	sp, #16
 8012202:	af00      	add	r7, sp, #0
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2202      	movs	r2, #2
 801220e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68ba      	ldr	r2, [r7, #8]
 8012222:	2100      	movs	r1, #0
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f006 ff32 	bl	801908e <USBD_LL_Transmit>

  return USBD_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	2100      	movs	r1, #0
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f006 ff21 	bl	801908e <USBD_LL_Transmit>

  return USBD_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012256:	b580      	push	{r7, lr}
 8012258:	b084      	sub	sp, #16
 801225a:	af00      	add	r7, sp, #0
 801225c:	60f8      	str	r0, [r7, #12]
 801225e:	60b9      	str	r1, [r7, #8]
 8012260:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2203      	movs	r2, #3
 8012266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	2100      	movs	r1, #0
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f006 ff25 	bl	80190d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012286:	2300      	movs	r3, #0
}
 8012288:	4618      	mov	r0, r3
 801228a:	3710      	adds	r7, #16
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	68ba      	ldr	r2, [r7, #8]
 80122a0:	2100      	movs	r1, #0
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f006 ff14 	bl	80190d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b082      	sub	sp, #8
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2204      	movs	r2, #4
 80122be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80122c2:	2300      	movs	r3, #0
 80122c4:	2200      	movs	r2, #0
 80122c6:	2100      	movs	r1, #0
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f006 fee0 	bl	801908e <USBD_LL_Transmit>

  return USBD_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2205      	movs	r2, #5
 80122e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80122e8:	2300      	movs	r3, #0
 80122ea:	2200      	movs	r2, #0
 80122ec:	2100      	movs	r1, #0
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f006 feee 	bl	80190d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
	...

08012300 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801230a:	79fb      	ldrb	r3, [r7, #7]
 801230c:	4a08      	ldr	r2, [pc, #32]	; (8012330 <disk_status+0x30>)
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4413      	add	r3, r2
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	79fa      	ldrb	r2, [r7, #7]
 8012318:	4905      	ldr	r1, [pc, #20]	; (8012330 <disk_status+0x30>)
 801231a:	440a      	add	r2, r1
 801231c:	7a12      	ldrb	r2, [r2, #8]
 801231e:	4610      	mov	r0, r2
 8012320:	4798      	blx	r3
 8012322:	4603      	mov	r3, r0
 8012324:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012326:	7bfb      	ldrb	r3, [r7, #15]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	2000086c 	.word	0x2000086c

08012334 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012342:	79fb      	ldrb	r3, [r7, #7]
 8012344:	4a0d      	ldr	r2, [pc, #52]	; (801237c <disk_initialize+0x48>)
 8012346:	5cd3      	ldrb	r3, [r2, r3]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d111      	bne.n	8012370 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801234c:	79fb      	ldrb	r3, [r7, #7]
 801234e:	4a0b      	ldr	r2, [pc, #44]	; (801237c <disk_initialize+0x48>)
 8012350:	2101      	movs	r1, #1
 8012352:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012354:	79fb      	ldrb	r3, [r7, #7]
 8012356:	4a09      	ldr	r2, [pc, #36]	; (801237c <disk_initialize+0x48>)
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4413      	add	r3, r2
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	79fa      	ldrb	r2, [r7, #7]
 8012362:	4906      	ldr	r1, [pc, #24]	; (801237c <disk_initialize+0x48>)
 8012364:	440a      	add	r2, r1
 8012366:	7a12      	ldrb	r2, [r2, #8]
 8012368:	4610      	mov	r0, r2
 801236a:	4798      	blx	r3
 801236c:	4603      	mov	r3, r0
 801236e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012370:	7bfb      	ldrb	r3, [r7, #15]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	2000086c 	.word	0x2000086c

08012380 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012380:	b590      	push	{r4, r7, lr}
 8012382:	b087      	sub	sp, #28
 8012384:	af00      	add	r7, sp, #0
 8012386:	60b9      	str	r1, [r7, #8]
 8012388:	607a      	str	r2, [r7, #4]
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	4603      	mov	r3, r0
 801238e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012390:	7bfb      	ldrb	r3, [r7, #15]
 8012392:	4a0a      	ldr	r2, [pc, #40]	; (80123bc <disk_read+0x3c>)
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	4413      	add	r3, r2
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	689c      	ldr	r4, [r3, #8]
 801239c:	7bfb      	ldrb	r3, [r7, #15]
 801239e:	4a07      	ldr	r2, [pc, #28]	; (80123bc <disk_read+0x3c>)
 80123a0:	4413      	add	r3, r2
 80123a2:	7a18      	ldrb	r0, [r3, #8]
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	68b9      	ldr	r1, [r7, #8]
 80123aa:	47a0      	blx	r4
 80123ac:	4603      	mov	r3, r0
 80123ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80123b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	371c      	adds	r7, #28
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd90      	pop	{r4, r7, pc}
 80123ba:	bf00      	nop
 80123bc:	2000086c 	.word	0x2000086c

080123c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80123c0:	b590      	push	{r4, r7, lr}
 80123c2:	b087      	sub	sp, #28
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60b9      	str	r1, [r7, #8]
 80123c8:	607a      	str	r2, [r7, #4]
 80123ca:	603b      	str	r3, [r7, #0]
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	4a0a      	ldr	r2, [pc, #40]	; (80123fc <disk_write+0x3c>)
 80123d4:	009b      	lsls	r3, r3, #2
 80123d6:	4413      	add	r3, r2
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	68dc      	ldr	r4, [r3, #12]
 80123dc:	7bfb      	ldrb	r3, [r7, #15]
 80123de:	4a07      	ldr	r2, [pc, #28]	; (80123fc <disk_write+0x3c>)
 80123e0:	4413      	add	r3, r2
 80123e2:	7a18      	ldrb	r0, [r3, #8]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	68b9      	ldr	r1, [r7, #8]
 80123ea:	47a0      	blx	r4
 80123ec:	4603      	mov	r3, r0
 80123ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	371c      	adds	r7, #28
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd90      	pop	{r4, r7, pc}
 80123fa:	bf00      	nop
 80123fc:	2000086c 	.word	0x2000086c

08012400 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	4603      	mov	r3, r0
 8012408:	603a      	str	r2, [r7, #0]
 801240a:	71fb      	strb	r3, [r7, #7]
 801240c:	460b      	mov	r3, r1
 801240e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	4a09      	ldr	r2, [pc, #36]	; (8012438 <disk_ioctl+0x38>)
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	4413      	add	r3, r2
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	691b      	ldr	r3, [r3, #16]
 801241c:	79fa      	ldrb	r2, [r7, #7]
 801241e:	4906      	ldr	r1, [pc, #24]	; (8012438 <disk_ioctl+0x38>)
 8012420:	440a      	add	r2, r1
 8012422:	7a10      	ldrb	r0, [r2, #8]
 8012424:	79b9      	ldrb	r1, [r7, #6]
 8012426:	683a      	ldr	r2, [r7, #0]
 8012428:	4798      	blx	r3
 801242a:	4603      	mov	r3, r0
 801242c:	73fb      	strb	r3, [r7, #15]
  return res;
 801242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012430:	4618      	mov	r0, r3
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	2000086c 	.word	0x2000086c

0801243c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3301      	adds	r3, #1
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801244c:	89fb      	ldrh	r3, [r7, #14]
 801244e:	021b      	lsls	r3, r3, #8
 8012450:	b21a      	sxth	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	b21b      	sxth	r3, r3
 8012458:	4313      	orrs	r3, r2
 801245a:	b21b      	sxth	r3, r3
 801245c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801245e:	89fb      	ldrh	r3, [r7, #14]
}
 8012460:	4618      	mov	r0, r3
 8012462:	3714      	adds	r7, #20
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801246c:	b480      	push	{r7}
 801246e:	b085      	sub	sp, #20
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	3303      	adds	r3, #3
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	021b      	lsls	r3, r3, #8
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	3202      	adds	r2, #2
 8012484:	7812      	ldrb	r2, [r2, #0]
 8012486:	4313      	orrs	r3, r2
 8012488:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	021b      	lsls	r3, r3, #8
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	3201      	adds	r2, #1
 8012492:	7812      	ldrb	r2, [r2, #0]
 8012494:	4313      	orrs	r3, r2
 8012496:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	021b      	lsls	r3, r3, #8
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	7812      	ldrb	r2, [r2, #0]
 80124a0:	4313      	orrs	r3, r2
 80124a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80124a4:	68fb      	ldr	r3, [r7, #12]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3714      	adds	r7, #20
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80124b2:	b480      	push	{r7}
 80124b4:	b083      	sub	sp, #12
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	460b      	mov	r3, r1
 80124bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	1c5a      	adds	r2, r3, #1
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	887a      	ldrh	r2, [r7, #2]
 80124c6:	b2d2      	uxtb	r2, r2
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	887b      	ldrh	r3, [r7, #2]
 80124cc:	0a1b      	lsrs	r3, r3, #8
 80124ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	1c5a      	adds	r2, r3, #1
 80124d4:	607a      	str	r2, [r7, #4]
 80124d6:	887a      	ldrh	r2, [r7, #2]
 80124d8:	b2d2      	uxtb	r2, r2
 80124da:	701a      	strb	r2, [r3, #0]
}
 80124dc:	bf00      	nop
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	1c5a      	adds	r2, r3, #1
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	b2d2      	uxtb	r2, r2
 80124fc:	701a      	strb	r2, [r3, #0]
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	0a1b      	lsrs	r3, r3, #8
 8012502:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	607a      	str	r2, [r7, #4]
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	b2d2      	uxtb	r2, r2
 801250e:	701a      	strb	r2, [r3, #0]
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	0a1b      	lsrs	r3, r3, #8
 8012514:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	1c5a      	adds	r2, r3, #1
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	683a      	ldr	r2, [r7, #0]
 801251e:	b2d2      	uxtb	r2, r2
 8012520:	701a      	strb	r2, [r3, #0]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	0a1b      	lsrs	r3, r3, #8
 8012526:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	1c5a      	adds	r2, r3, #1
 801252c:	607a      	str	r2, [r7, #4]
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	b2d2      	uxtb	r2, r2
 8012532:	701a      	strb	r2, [r3, #0]
}
 8012534:	bf00      	nop
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012540:	b480      	push	{r7}
 8012542:	b087      	sub	sp, #28
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00d      	beq.n	8012576 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801255a:	693a      	ldr	r2, [r7, #16]
 801255c:	1c53      	adds	r3, r2, #1
 801255e:	613b      	str	r3, [r7, #16]
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	1c59      	adds	r1, r3, #1
 8012564:	6179      	str	r1, [r7, #20]
 8012566:	7812      	ldrb	r2, [r2, #0]
 8012568:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	3b01      	subs	r3, #1
 801256e:	607b      	str	r3, [r7, #4]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1f1      	bne.n	801255a <mem_cpy+0x1a>
	}
}
 8012576:	bf00      	nop
 8012578:	371c      	adds	r7, #28
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr

08012582 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012582:	b480      	push	{r7}
 8012584:	b087      	sub	sp, #28
 8012586:	af00      	add	r7, sp, #0
 8012588:	60f8      	str	r0, [r7, #12]
 801258a:	60b9      	str	r1, [r7, #8]
 801258c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	1c5a      	adds	r2, r3, #1
 8012596:	617a      	str	r2, [r7, #20]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	b2d2      	uxtb	r2, r2
 801259c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	607b      	str	r3, [r7, #4]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1f3      	bne.n	8012592 <mem_set+0x10>
}
 80125aa:	bf00      	nop
 80125ac:	bf00      	nop
 80125ae:	371c      	adds	r7, #28
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80125b8:	b480      	push	{r7}
 80125ba:	b089      	sub	sp, #36	; 0x24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	1c5a      	adds	r2, r3, #1
 80125d4:	61fa      	str	r2, [r7, #28]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	4619      	mov	r1, r3
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	1c5a      	adds	r2, r3, #1
 80125de:	61ba      	str	r2, [r7, #24]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	1acb      	subs	r3, r1, r3
 80125e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3b01      	subs	r3, #1
 80125ea:	607b      	str	r3, [r7, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d002      	beq.n	80125f8 <mem_cmp+0x40>
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d0eb      	beq.n	80125d0 <mem_cmp+0x18>

	return r;
 80125f8:	697b      	ldr	r3, [r7, #20]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3724      	adds	r7, #36	; 0x24
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr

08012606 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012610:	e002      	b.n	8012618 <chk_chr+0x12>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3301      	adds	r3, #1
 8012616:	607b      	str	r3, [r7, #4]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d005      	beq.n	801262c <chk_chr+0x26>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	461a      	mov	r2, r3
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	4293      	cmp	r3, r2
 801262a:	d1f2      	bne.n	8012612 <chk_chr+0xc>
	return *str;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	781b      	ldrb	r3, [r3, #0]
}
 8012630:	4618      	mov	r0, r3
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d009      	beq.n	801265e <lock_fs+0x22>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	4618      	mov	r0, r3
 8012650:	f002 fcde 	bl	8015010 <ff_req_grant>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d001      	beq.n	801265e <lock_fs+0x22>
 801265a:	2301      	movs	r3, #1
 801265c:	e000      	b.n	8012660 <lock_fs+0x24>
 801265e:	2300      	movs	r3, #0
}
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	460b      	mov	r3, r1
 8012672:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00d      	beq.n	8012696 <unlock_fs+0x2e>
 801267a:	78fb      	ldrb	r3, [r7, #3]
 801267c:	2b0c      	cmp	r3, #12
 801267e:	d00a      	beq.n	8012696 <unlock_fs+0x2e>
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	2b0b      	cmp	r3, #11
 8012684:	d007      	beq.n	8012696 <unlock_fs+0x2e>
 8012686:	78fb      	ldrb	r3, [r7, #3]
 8012688:	2b0f      	cmp	r3, #15
 801268a:	d004      	beq.n	8012696 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	4618      	mov	r0, r3
 8012692:	f002 fcd2 	bl	801503a <ff_rel_grant>
	}
}
 8012696:	bf00      	nop
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
	...

080126a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80126aa:	2300      	movs	r3, #0
 80126ac:	60bb      	str	r3, [r7, #8]
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	e029      	b.n	8012708 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80126b4:	4a27      	ldr	r2, [pc, #156]	; (8012754 <chk_lock+0xb4>)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	011b      	lsls	r3, r3, #4
 80126ba:	4413      	add	r3, r2
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d01d      	beq.n	80126fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80126c2:	4a24      	ldr	r2, [pc, #144]	; (8012754 <chk_lock+0xb4>)
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	011b      	lsls	r3, r3, #4
 80126c8:	4413      	add	r3, r2
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d116      	bne.n	8012702 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80126d4:	4a1f      	ldr	r2, [pc, #124]	; (8012754 <chk_lock+0xb4>)
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	011b      	lsls	r3, r3, #4
 80126da:	4413      	add	r3, r2
 80126dc:	3304      	adds	r3, #4
 80126de:	681a      	ldr	r2, [r3, #0]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d10c      	bne.n	8012702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80126e8:	4a1a      	ldr	r2, [pc, #104]	; (8012754 <chk_lock+0xb4>)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	011b      	lsls	r3, r3, #4
 80126ee:	4413      	add	r3, r2
 80126f0:	3308      	adds	r3, #8
 80126f2:	681a      	ldr	r2, [r3, #0]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d102      	bne.n	8012702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80126fc:	e007      	b.n	801270e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80126fe:	2301      	movs	r3, #1
 8012700:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3301      	adds	r3, #1
 8012706:	60fb      	str	r3, [r7, #12]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d9d2      	bls.n	80126b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2b02      	cmp	r3, #2
 8012712:	d109      	bne.n	8012728 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d102      	bne.n	8012720 <chk_lock+0x80>
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b02      	cmp	r3, #2
 801271e:	d101      	bne.n	8012724 <chk_lock+0x84>
 8012720:	2300      	movs	r3, #0
 8012722:	e010      	b.n	8012746 <chk_lock+0xa6>
 8012724:	2312      	movs	r3, #18
 8012726:	e00e      	b.n	8012746 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d108      	bne.n	8012740 <chk_lock+0xa0>
 801272e:	4a09      	ldr	r2, [pc, #36]	; (8012754 <chk_lock+0xb4>)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	011b      	lsls	r3, r3, #4
 8012734:	4413      	add	r3, r2
 8012736:	330c      	adds	r3, #12
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801273e:	d101      	bne.n	8012744 <chk_lock+0xa4>
 8012740:	2310      	movs	r3, #16
 8012742:	e000      	b.n	8012746 <chk_lock+0xa6>
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3714      	adds	r7, #20
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	2000084c 	.word	0x2000084c

08012758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801275e:	2300      	movs	r3, #0
 8012760:	607b      	str	r3, [r7, #4]
 8012762:	e002      	b.n	801276a <enq_lock+0x12>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	3301      	adds	r3, #1
 8012768:	607b      	str	r3, [r7, #4]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d806      	bhi.n	801277e <enq_lock+0x26>
 8012770:	4a09      	ldr	r2, [pc, #36]	; (8012798 <enq_lock+0x40>)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	011b      	lsls	r3, r3, #4
 8012776:	4413      	add	r3, r2
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1f2      	bne.n	8012764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2b02      	cmp	r3, #2
 8012782:	bf14      	ite	ne
 8012784:	2301      	movne	r3, #1
 8012786:	2300      	moveq	r3, #0
 8012788:	b2db      	uxtb	r3, r3
}
 801278a:	4618      	mov	r0, r3
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	2000084c 	.word	0x2000084c

0801279c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801279c:	b480      	push	{r7}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80127a6:	2300      	movs	r3, #0
 80127a8:	60fb      	str	r3, [r7, #12]
 80127aa:	e01f      	b.n	80127ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80127ac:	4a41      	ldr	r2, [pc, #260]	; (80128b4 <inc_lock+0x118>)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	011b      	lsls	r3, r3, #4
 80127b2:	4413      	add	r3, r2
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d113      	bne.n	80127e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80127be:	4a3d      	ldr	r2, [pc, #244]	; (80128b4 <inc_lock+0x118>)
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	011b      	lsls	r3, r3, #4
 80127c4:	4413      	add	r3, r2
 80127c6:	3304      	adds	r3, #4
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d109      	bne.n	80127e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80127d2:	4a38      	ldr	r2, [pc, #224]	; (80128b4 <inc_lock+0x118>)
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	011b      	lsls	r3, r3, #4
 80127d8:	4413      	add	r3, r2
 80127da:	3308      	adds	r3, #8
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d006      	beq.n	80127f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	3301      	adds	r3, #1
 80127ea:	60fb      	str	r3, [r7, #12]
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2b01      	cmp	r3, #1
 80127f0:	d9dc      	bls.n	80127ac <inc_lock+0x10>
 80127f2:	e000      	b.n	80127f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80127f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2b02      	cmp	r3, #2
 80127fa:	d132      	bne.n	8012862 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80127fc:	2300      	movs	r3, #0
 80127fe:	60fb      	str	r3, [r7, #12]
 8012800:	e002      	b.n	8012808 <inc_lock+0x6c>
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	3301      	adds	r3, #1
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2b01      	cmp	r3, #1
 801280c:	d806      	bhi.n	801281c <inc_lock+0x80>
 801280e:	4a29      	ldr	r2, [pc, #164]	; (80128b4 <inc_lock+0x118>)
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	011b      	lsls	r3, r3, #4
 8012814:	4413      	add	r3, r2
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d1f2      	bne.n	8012802 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2b02      	cmp	r3, #2
 8012820:	d101      	bne.n	8012826 <inc_lock+0x8a>
 8012822:	2300      	movs	r3, #0
 8012824:	e040      	b.n	80128a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	4922      	ldr	r1, [pc, #136]	; (80128b4 <inc_lock+0x118>)
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	011b      	lsls	r3, r3, #4
 8012830:	440b      	add	r3, r1
 8012832:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	689a      	ldr	r2, [r3, #8]
 8012838:	491e      	ldr	r1, [pc, #120]	; (80128b4 <inc_lock+0x118>)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	011b      	lsls	r3, r3, #4
 801283e:	440b      	add	r3, r1
 8012840:	3304      	adds	r3, #4
 8012842:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	695a      	ldr	r2, [r3, #20]
 8012848:	491a      	ldr	r1, [pc, #104]	; (80128b4 <inc_lock+0x118>)
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	011b      	lsls	r3, r3, #4
 801284e:	440b      	add	r3, r1
 8012850:	3308      	adds	r3, #8
 8012852:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012854:	4a17      	ldr	r2, [pc, #92]	; (80128b4 <inc_lock+0x118>)
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	011b      	lsls	r3, r3, #4
 801285a:	4413      	add	r3, r2
 801285c:	330c      	adds	r3, #12
 801285e:	2200      	movs	r2, #0
 8012860:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d009      	beq.n	801287c <inc_lock+0xe0>
 8012868:	4a12      	ldr	r2, [pc, #72]	; (80128b4 <inc_lock+0x118>)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	011b      	lsls	r3, r3, #4
 801286e:	4413      	add	r3, r2
 8012870:	330c      	adds	r3, #12
 8012872:	881b      	ldrh	r3, [r3, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d001      	beq.n	801287c <inc_lock+0xe0>
 8012878:	2300      	movs	r3, #0
 801287a:	e015      	b.n	80128a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d108      	bne.n	8012894 <inc_lock+0xf8>
 8012882:	4a0c      	ldr	r2, [pc, #48]	; (80128b4 <inc_lock+0x118>)
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	011b      	lsls	r3, r3, #4
 8012888:	4413      	add	r3, r2
 801288a:	330c      	adds	r3, #12
 801288c:	881b      	ldrh	r3, [r3, #0]
 801288e:	3301      	adds	r3, #1
 8012890:	b29a      	uxth	r2, r3
 8012892:	e001      	b.n	8012898 <inc_lock+0xfc>
 8012894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012898:	4906      	ldr	r1, [pc, #24]	; (80128b4 <inc_lock+0x118>)
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	011b      	lsls	r3, r3, #4
 801289e:	440b      	add	r3, r1
 80128a0:	330c      	adds	r3, #12
 80128a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	3301      	adds	r3, #1
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3714      	adds	r7, #20
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	2000084c 	.word	0x2000084c

080128b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b085      	sub	sp, #20
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3b01      	subs	r3, #1
 80128c4:	607b      	str	r3, [r7, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d825      	bhi.n	8012918 <dec_lock+0x60>
		n = Files[i].ctr;
 80128cc:	4a17      	ldr	r2, [pc, #92]	; (801292c <dec_lock+0x74>)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	011b      	lsls	r3, r3, #4
 80128d2:	4413      	add	r3, r2
 80128d4:	330c      	adds	r3, #12
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80128da:	89fb      	ldrh	r3, [r7, #14]
 80128dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128e0:	d101      	bne.n	80128e6 <dec_lock+0x2e>
 80128e2:	2300      	movs	r3, #0
 80128e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d002      	beq.n	80128f2 <dec_lock+0x3a>
 80128ec:	89fb      	ldrh	r3, [r7, #14]
 80128ee:	3b01      	subs	r3, #1
 80128f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80128f2:	4a0e      	ldr	r2, [pc, #56]	; (801292c <dec_lock+0x74>)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	011b      	lsls	r3, r3, #4
 80128f8:	4413      	add	r3, r2
 80128fa:	330c      	adds	r3, #12
 80128fc:	89fa      	ldrh	r2, [r7, #14]
 80128fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <dec_lock+0x5a>
 8012906:	4a09      	ldr	r2, [pc, #36]	; (801292c <dec_lock+0x74>)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	011b      	lsls	r3, r3, #4
 801290c:	4413      	add	r3, r2
 801290e:	2200      	movs	r2, #0
 8012910:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012912:	2300      	movs	r3, #0
 8012914:	737b      	strb	r3, [r7, #13]
 8012916:	e001      	b.n	801291c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012918:	2302      	movs	r3, #2
 801291a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801291c:	7b7b      	ldrb	r3, [r7, #13]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3714      	adds	r7, #20
 8012922:	46bd      	mov	sp, r7
 8012924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop
 801292c:	2000084c 	.word	0x2000084c

08012930 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012930:	b480      	push	{r7}
 8012932:	b085      	sub	sp, #20
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	e010      	b.n	8012960 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801293e:	4a0d      	ldr	r2, [pc, #52]	; (8012974 <clear_lock+0x44>)
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	011b      	lsls	r3, r3, #4
 8012944:	4413      	add	r3, r2
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	429a      	cmp	r2, r3
 801294c:	d105      	bne.n	801295a <clear_lock+0x2a>
 801294e:	4a09      	ldr	r2, [pc, #36]	; (8012974 <clear_lock+0x44>)
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	011b      	lsls	r3, r3, #4
 8012954:	4413      	add	r3, r2
 8012956:	2200      	movs	r2, #0
 8012958:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3301      	adds	r3, #1
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2b01      	cmp	r3, #1
 8012964:	d9eb      	bls.n	801293e <clear_lock+0xe>
	}
}
 8012966:	bf00      	nop
 8012968:	bf00      	nop
 801296a:	3714      	adds	r7, #20
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr
 8012974:	2000084c 	.word	0x2000084c

08012978 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b086      	sub	sp, #24
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012980:	2300      	movs	r3, #0
 8012982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	78db      	ldrb	r3, [r3, #3]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d034      	beq.n	80129f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012990:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	7858      	ldrb	r0, [r3, #1]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801299c:	2301      	movs	r3, #1
 801299e:	697a      	ldr	r2, [r7, #20]
 80129a0:	f7ff fd0e 	bl	80123c0 <disk_write>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80129aa:	2301      	movs	r3, #1
 80129ac:	73fb      	strb	r3, [r7, #15]
 80129ae:	e022      	b.n	80129f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ba:	697a      	ldr	r2, [r7, #20]
 80129bc:	1ad2      	subs	r2, r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	69db      	ldr	r3, [r3, #28]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d217      	bcs.n	80129f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	789b      	ldrb	r3, [r3, #2]
 80129ca:	613b      	str	r3, [r7, #16]
 80129cc:	e010      	b.n	80129f0 <sync_window+0x78>
					wsect += fs->fsize;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	69db      	ldr	r3, [r3, #28]
 80129d2:	697a      	ldr	r2, [r7, #20]
 80129d4:	4413      	add	r3, r2
 80129d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	7858      	ldrb	r0, [r3, #1]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80129e2:	2301      	movs	r3, #1
 80129e4:	697a      	ldr	r2, [r7, #20]
 80129e6:	f7ff fceb 	bl	80123c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	3b01      	subs	r3, #1
 80129ee:	613b      	str	r3, [r7, #16]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d8eb      	bhi.n	80129ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3718      	adds	r7, #24
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a12:	683a      	ldr	r2, [r7, #0]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d01b      	beq.n	8012a50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff ffad 	bl	8012978 <sync_window>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012a22:	7bfb      	ldrb	r3, [r7, #15]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d113      	bne.n	8012a50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	7858      	ldrb	r0, [r3, #1]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012a32:	2301      	movs	r3, #1
 8012a34:	683a      	ldr	r2, [r7, #0]
 8012a36:	f7ff fca3 	bl	8012380 <disk_read>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d004      	beq.n	8012a4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012a40:	f04f 33ff 	mov.w	r3, #4294967295
 8012a44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012a46:	2301      	movs	r3, #1
 8012a48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	683a      	ldr	r2, [r7, #0]
 8012a4e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
	...

08012a5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7ff ff87 	bl	8012978 <sync_window>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012a6e:	7bfb      	ldrb	r3, [r7, #15]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d158      	bne.n	8012b26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	2b03      	cmp	r3, #3
 8012a7a:	d148      	bne.n	8012b0e <sync_fs+0xb2>
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	791b      	ldrb	r3, [r3, #4]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d144      	bne.n	8012b0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3334      	adds	r3, #52	; 0x34
 8012a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ff fd77 	bl	8012582 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	3334      	adds	r3, #52	; 0x34
 8012a98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ff fd06 	bl	80124b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	3334      	adds	r3, #52	; 0x34
 8012aaa:	4921      	ldr	r1, [pc, #132]	; (8012b30 <sync_fs+0xd4>)
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7ff fd1b 	bl	80124e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	3334      	adds	r3, #52	; 0x34
 8012ab6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012aba:	491e      	ldr	r1, [pc, #120]	; (8012b34 <sync_fs+0xd8>)
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7ff fd13 	bl	80124e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	3334      	adds	r3, #52	; 0x34
 8012ac6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	695b      	ldr	r3, [r3, #20]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	4610      	mov	r0, r2
 8012ad2:	f7ff fd09 	bl	80124e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	3334      	adds	r3, #52	; 0x34
 8012ada:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	4610      	mov	r0, r2
 8012ae6:	f7ff fcff 	bl	80124e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6a1b      	ldr	r3, [r3, #32]
 8012aee:	1c5a      	adds	r2, r3, #1
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	7858      	ldrb	r0, [r3, #1]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b02:	2301      	movs	r3, #1
 8012b04:	f7ff fc5c 	bl	80123c0 <disk_write>
			fs->fsi_flag = 0;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	785b      	ldrb	r3, [r3, #1]
 8012b12:	2200      	movs	r2, #0
 8012b14:	2100      	movs	r1, #0
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7ff fc72 	bl	8012400 <disk_ioctl>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d001      	beq.n	8012b26 <sync_fs+0xca>
 8012b22:	2301      	movs	r3, #1
 8012b24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3710      	adds	r7, #16
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	41615252 	.word	0x41615252
 8012b34:	61417272 	.word	0x61417272

08012b38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	3b02      	subs	r3, #2
 8012b46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	699b      	ldr	r3, [r3, #24]
 8012b4c:	3b02      	subs	r3, #2
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d301      	bcc.n	8012b58 <clust2sect+0x20>
 8012b54:	2300      	movs	r3, #0
 8012b56:	e008      	b.n	8012b6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	895b      	ldrh	r3, [r3, #10]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	fb03 f202 	mul.w	r2, r3, r2
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b68:	4413      	add	r3, r2
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	370c      	adds	r7, #12
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr

08012b76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b086      	sub	sp, #24
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
 8012b7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d904      	bls.n	8012b96 <get_fat+0x20>
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	683a      	ldr	r2, [r7, #0]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d302      	bcc.n	8012b9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8012b96:	2301      	movs	r3, #1
 8012b98:	617b      	str	r3, [r7, #20]
 8012b9a:	e08f      	b.n	8012cbc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b03      	cmp	r3, #3
 8012ba8:	d062      	beq.n	8012c70 <get_fat+0xfa>
 8012baa:	2b03      	cmp	r3, #3
 8012bac:	dc7c      	bgt.n	8012ca8 <get_fat+0x132>
 8012bae:	2b01      	cmp	r3, #1
 8012bb0:	d002      	beq.n	8012bb8 <get_fat+0x42>
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	d042      	beq.n	8012c3c <get_fat+0xc6>
 8012bb6:	e077      	b.n	8012ca8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	60fb      	str	r3, [r7, #12]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	085b      	lsrs	r3, r3, #1
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	0a5b      	lsrs	r3, r3, #9
 8012bce:	4413      	add	r3, r2
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6938      	ldr	r0, [r7, #16]
 8012bd4:	f7ff ff14 	bl	8012a00 <move_window>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d167      	bne.n	8012cae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	1c5a      	adds	r2, r3, #1
 8012be2:	60fa      	str	r2, [r7, #12]
 8012be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012be8:	693a      	ldr	r2, [r7, #16]
 8012bea:	4413      	add	r3, r2
 8012bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	0a5b      	lsrs	r3, r3, #9
 8012bfa:	4413      	add	r3, r2
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	6938      	ldr	r0, [r7, #16]
 8012c00:	f7ff fefe 	bl	8012a00 <move_window>
 8012c04:	4603      	mov	r3, r0
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d153      	bne.n	8012cb2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c10:	693a      	ldr	r2, [r7, #16]
 8012c12:	4413      	add	r3, r2
 8012c14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c18:	021b      	lsls	r3, r3, #8
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d002      	beq.n	8012c32 <get_fat+0xbc>
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	091b      	lsrs	r3, r3, #4
 8012c30:	e002      	b.n	8012c38 <get_fat+0xc2>
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c38:	617b      	str	r3, [r7, #20]
			break;
 8012c3a:	e03f      	b.n	8012cbc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	0a1b      	lsrs	r3, r3, #8
 8012c44:	4413      	add	r3, r2
 8012c46:	4619      	mov	r1, r3
 8012c48:	6938      	ldr	r0, [r7, #16]
 8012c4a:	f7ff fed9 	bl	8012a00 <move_window>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d130      	bne.n	8012cb6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012c62:	4413      	add	r3, r2
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7ff fbe9 	bl	801243c <ld_word>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	617b      	str	r3, [r7, #20]
			break;
 8012c6e:	e025      	b.n	8012cbc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	09db      	lsrs	r3, r3, #7
 8012c78:	4413      	add	r3, r2
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	6938      	ldr	r0, [r7, #16]
 8012c7e:	f7ff febf 	bl	8012a00 <move_window>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d118      	bne.n	8012cba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012c96:	4413      	add	r3, r2
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7ff fbe7 	bl	801246c <ld_dword>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012ca4:	617b      	str	r3, [r7, #20]
			break;
 8012ca6:	e009      	b.n	8012cbc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012ca8:	2301      	movs	r3, #1
 8012caa:	617b      	str	r3, [r7, #20]
 8012cac:	e006      	b.n	8012cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012cae:	bf00      	nop
 8012cb0:	e004      	b.n	8012cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012cb2:	bf00      	nop
 8012cb4:	e002      	b.n	8012cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012cb6:	bf00      	nop
 8012cb8:	e000      	b.n	8012cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012cba:	bf00      	nop
		}
	}

	return val;
 8012cbc:	697b      	ldr	r3, [r7, #20]
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3718      	adds	r7, #24
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}

08012cc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012cc6:	b590      	push	{r4, r7, lr}
 8012cc8:	b089      	sub	sp, #36	; 0x24
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	60b9      	str	r1, [r7, #8]
 8012cd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	f240 80d2 	bls.w	8012e82 <put_fat+0x1bc>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	699b      	ldr	r3, [r3, #24]
 8012ce2:	68ba      	ldr	r2, [r7, #8]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	f080 80cc 	bcs.w	8012e82 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b03      	cmp	r3, #3
 8012cf0:	f000 8096 	beq.w	8012e20 <put_fat+0x15a>
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	f300 80cd 	bgt.w	8012e94 <put_fat+0x1ce>
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d002      	beq.n	8012d04 <put_fat+0x3e>
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	d06e      	beq.n	8012de0 <put_fat+0x11a>
 8012d02:	e0c7      	b.n	8012e94 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	61bb      	str	r3, [r7, #24]
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	085b      	lsrs	r3, r3, #1
 8012d0c:	69ba      	ldr	r2, [r7, #24]
 8012d0e:	4413      	add	r3, r2
 8012d10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	0a5b      	lsrs	r3, r3, #9
 8012d1a:	4413      	add	r3, r2
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f7ff fe6e 	bl	8012a00 <move_window>
 8012d24:	4603      	mov	r3, r0
 8012d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d28:	7ffb      	ldrb	r3, [r7, #31]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f040 80ab 	bne.w	8012e86 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	1c59      	adds	r1, r3, #1
 8012d3a:	61b9      	str	r1, [r7, #24]
 8012d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d40:	4413      	add	r3, r2
 8012d42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	f003 0301 	and.w	r3, r3, #1
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00d      	beq.n	8012d6a <put_fat+0xa4>
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	b25b      	sxtb	r3, r3
 8012d54:	f003 030f 	and.w	r3, r3, #15
 8012d58:	b25a      	sxtb	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	011b      	lsls	r3, r3, #4
 8012d60:	b25b      	sxtb	r3, r3
 8012d62:	4313      	orrs	r3, r2
 8012d64:	b25b      	sxtb	r3, r3
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	e001      	b.n	8012d6e <put_fat+0xa8>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	697a      	ldr	r2, [r7, #20]
 8012d70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2201      	movs	r2, #1
 8012d76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	0a5b      	lsrs	r3, r3, #9
 8012d80:	4413      	add	r3, r2
 8012d82:	4619      	mov	r1, r3
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	f7ff fe3b 	bl	8012a00 <move_window>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d8e:	7ffb      	ldrb	r3, [r7, #31]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d17a      	bne.n	8012e8a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012da0:	4413      	add	r3, r2
 8012da2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	f003 0301 	and.w	r3, r3, #1
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d003      	beq.n	8012db6 <put_fat+0xf0>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	091b      	lsrs	r3, r3, #4
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	e00e      	b.n	8012dd4 <put_fat+0x10e>
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	b25b      	sxtb	r3, r3
 8012dbc:	f023 030f 	bic.w	r3, r3, #15
 8012dc0:	b25a      	sxtb	r2, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	0a1b      	lsrs	r3, r3, #8
 8012dc6:	b25b      	sxtb	r3, r3
 8012dc8:	f003 030f 	and.w	r3, r3, #15
 8012dcc:	b25b      	sxtb	r3, r3
 8012dce:	4313      	orrs	r3, r2
 8012dd0:	b25b      	sxtb	r3, r3
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2201      	movs	r2, #1
 8012ddc:	70da      	strb	r2, [r3, #3]
			break;
 8012dde:	e059      	b.n	8012e94 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	0a1b      	lsrs	r3, r3, #8
 8012de8:	4413      	add	r3, r2
 8012dea:	4619      	mov	r1, r3
 8012dec:	68f8      	ldr	r0, [r7, #12]
 8012dee:	f7ff fe07 	bl	8012a00 <move_window>
 8012df2:	4603      	mov	r3, r0
 8012df4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012df6:	7ffb      	ldrb	r3, [r7, #31]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d148      	bne.n	8012e8e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012e0a:	4413      	add	r3, r2
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	b292      	uxth	r2, r2
 8012e10:	4611      	mov	r1, r2
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fb4d 	bl	80124b2 <st_word>
			fs->wflag = 1;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	70da      	strb	r2, [r3, #3]
			break;
 8012e1e:	e039      	b.n	8012e94 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	09db      	lsrs	r3, r3, #7
 8012e28:	4413      	add	r3, r2
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f7ff fde7 	bl	8012a00 <move_window>
 8012e32:	4603      	mov	r3, r0
 8012e34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012e36:	7ffb      	ldrb	r3, [r7, #31]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d12a      	bne.n	8012e92 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012e50:	4413      	add	r3, r2
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7ff fb0a 	bl	801246c <ld_dword>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012e5e:	4323      	orrs	r3, r4
 8012e60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	009b      	lsls	r3, r3, #2
 8012e6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012e70:	4413      	add	r3, r2
 8012e72:	6879      	ldr	r1, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff fb37 	bl	80124e8 <st_dword>
			fs->wflag = 1;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	70da      	strb	r2, [r3, #3]
			break;
 8012e80:	e008      	b.n	8012e94 <put_fat+0x1ce>
		}
	}
 8012e82:	bf00      	nop
 8012e84:	e006      	b.n	8012e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012e86:	bf00      	nop
 8012e88:	e004      	b.n	8012e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012e8a:	bf00      	nop
 8012e8c:	e002      	b.n	8012e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012e8e:	bf00      	nop
 8012e90:	e000      	b.n	8012e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012e92:	bf00      	nop
	return res;
 8012e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3724      	adds	r7, #36	; 0x24
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd90      	pop	{r4, r7, pc}

08012e9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b088      	sub	sp, #32
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d904      	bls.n	8012ec4 <remove_chain+0x26>
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	699b      	ldr	r3, [r3, #24]
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d301      	bcc.n	8012ec8 <remove_chain+0x2a>
 8012ec4:	2302      	movs	r3, #2
 8012ec6:	e04b      	b.n	8012f60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00c      	beq.n	8012ee8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012ece:	f04f 32ff 	mov.w	r2, #4294967295
 8012ed2:	6879      	ldr	r1, [r7, #4]
 8012ed4:	69b8      	ldr	r0, [r7, #24]
 8012ed6:	f7ff fef6 	bl	8012cc6 <put_fat>
 8012eda:	4603      	mov	r3, r0
 8012edc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012ede:	7ffb      	ldrb	r3, [r7, #31]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <remove_chain+0x4a>
 8012ee4:	7ffb      	ldrb	r3, [r7, #31]
 8012ee6:	e03b      	b.n	8012f60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012ee8:	68b9      	ldr	r1, [r7, #8]
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f7ff fe43 	bl	8012b76 <get_fat>
 8012ef0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d031      	beq.n	8012f5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d101      	bne.n	8012f02 <remove_chain+0x64>
 8012efe:	2302      	movs	r3, #2
 8012f00:	e02e      	b.n	8012f60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f08:	d101      	bne.n	8012f0e <remove_chain+0x70>
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e028      	b.n	8012f60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012f0e:	2200      	movs	r2, #0
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	69b8      	ldr	r0, [r7, #24]
 8012f14:	f7ff fed7 	bl	8012cc6 <put_fat>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012f1c:	7ffb      	ldrb	r3, [r7, #31]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <remove_chain+0x88>
 8012f22:	7ffb      	ldrb	r3, [r7, #31]
 8012f24:	e01c      	b.n	8012f60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	695a      	ldr	r2, [r3, #20]
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	699b      	ldr	r3, [r3, #24]
 8012f2e:	3b02      	subs	r3, #2
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d20b      	bcs.n	8012f4c <remove_chain+0xae>
			fs->free_clst++;
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	695b      	ldr	r3, [r3, #20]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	791b      	ldrb	r3, [r3, #4]
 8012f42:	f043 0301 	orr.w	r3, r3, #1
 8012f46:	b2da      	uxtb	r2, r3
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	699b      	ldr	r3, [r3, #24]
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d3c6      	bcc.n	8012ee8 <remove_chain+0x4a>
 8012f5a:	e000      	b.n	8012f5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012f5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012f5e:	2300      	movs	r3, #0
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3720      	adds	r7, #32
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b088      	sub	sp, #32
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10d      	bne.n	8012f9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012f84:	69bb      	ldr	r3, [r7, #24]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d004      	beq.n	8012f94 <create_chain+0x2c>
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	699b      	ldr	r3, [r3, #24]
 8012f8e:	69ba      	ldr	r2, [r7, #24]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d31b      	bcc.n	8012fcc <create_chain+0x64>
 8012f94:	2301      	movs	r3, #1
 8012f96:	61bb      	str	r3, [r7, #24]
 8012f98:	e018      	b.n	8012fcc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012f9a:	6839      	ldr	r1, [r7, #0]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7ff fdea 	bl	8012b76 <get_fat>
 8012fa2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d801      	bhi.n	8012fae <create_chain+0x46>
 8012faa:	2301      	movs	r3, #1
 8012fac:	e070      	b.n	8013090 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb4:	d101      	bne.n	8012fba <create_chain+0x52>
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	e06a      	b.n	8013090 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	699b      	ldr	r3, [r3, #24]
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d201      	bcs.n	8012fc8 <create_chain+0x60>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	e063      	b.n	8013090 <create_chain+0x128>
		scl = clst;
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	69fa      	ldr	r2, [r7, #28]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d307      	bcc.n	8012ff0 <create_chain+0x88>
				ncl = 2;
 8012fe0:	2302      	movs	r3, #2
 8012fe2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012fe4:	69fa      	ldr	r2, [r7, #28]
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d901      	bls.n	8012ff0 <create_chain+0x88>
 8012fec:	2300      	movs	r3, #0
 8012fee:	e04f      	b.n	8013090 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012ff0:	69f9      	ldr	r1, [r7, #28]
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fdbf 	bl	8012b76 <get_fat>
 8012ff8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00e      	beq.n	801301e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d003      	beq.n	801300e <create_chain+0xa6>
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801300c:	d101      	bne.n	8013012 <create_chain+0xaa>
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	e03e      	b.n	8013090 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013012:	69fa      	ldr	r2, [r7, #28]
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	429a      	cmp	r2, r3
 8013018:	d1da      	bne.n	8012fd0 <create_chain+0x68>
 801301a:	2300      	movs	r3, #0
 801301c:	e038      	b.n	8013090 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801301e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013020:	f04f 32ff 	mov.w	r2, #4294967295
 8013024:	69f9      	ldr	r1, [r7, #28]
 8013026:	6938      	ldr	r0, [r7, #16]
 8013028:	f7ff fe4d 	bl	8012cc6 <put_fat>
 801302c:	4603      	mov	r3, r0
 801302e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013030:	7dfb      	ldrb	r3, [r7, #23]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d109      	bne.n	801304a <create_chain+0xe2>
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	6839      	ldr	r1, [r7, #0]
 8013040:	6938      	ldr	r0, [r7, #16]
 8013042:	f7ff fe40 	bl	8012cc6 <put_fat>
 8013046:	4603      	mov	r3, r0
 8013048:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d116      	bne.n	801307e <create_chain+0x116>
		fs->last_clst = ncl;
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	69fa      	ldr	r2, [r7, #28]
 8013054:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	695a      	ldr	r2, [r3, #20]
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	699b      	ldr	r3, [r3, #24]
 801305e:	3b02      	subs	r3, #2
 8013060:	429a      	cmp	r2, r3
 8013062:	d804      	bhi.n	801306e <create_chain+0x106>
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	695b      	ldr	r3, [r3, #20]
 8013068:	1e5a      	subs	r2, r3, #1
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	791b      	ldrb	r3, [r3, #4]
 8013072:	f043 0301 	orr.w	r3, r3, #1
 8013076:	b2da      	uxtb	r2, r3
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	711a      	strb	r2, [r3, #4]
 801307c:	e007      	b.n	801308e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801307e:	7dfb      	ldrb	r3, [r7, #23]
 8013080:	2b01      	cmp	r3, #1
 8013082:	d102      	bne.n	801308a <create_chain+0x122>
 8013084:	f04f 33ff 	mov.w	r3, #4294967295
 8013088:	e000      	b.n	801308c <create_chain+0x124>
 801308a:	2301      	movs	r3, #1
 801308c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801308e:	69fb      	ldr	r3, [r7, #28]
}
 8013090:	4618      	mov	r0, r3
 8013092:	3720      	adds	r7, #32
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013098:	b480      	push	{r7}
 801309a:	b087      	sub	sp, #28
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ac:	3304      	adds	r3, #4
 80130ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	0a5b      	lsrs	r3, r3, #9
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	8952      	ldrh	r2, [r2, #10]
 80130b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80130bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	1d1a      	adds	r2, r3, #4
 80130c2:	613a      	str	r2, [r7, #16]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <clmt_clust+0x3a>
 80130ce:	2300      	movs	r3, #0
 80130d0:	e010      	b.n	80130f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80130d2:	697a      	ldr	r2, [r7, #20]
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d307      	bcc.n	80130ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80130da:	697a      	ldr	r2, [r7, #20]
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	1ad3      	subs	r3, r2, r3
 80130e0:	617b      	str	r3, [r7, #20]
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	3304      	adds	r3, #4
 80130e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80130e8:	e7e9      	b.n	80130be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80130ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	4413      	add	r3, r2
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	371c      	adds	r7, #28
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr

08013100 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013116:	d204      	bcs.n	8013122 <dir_sdi+0x22>
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	f003 031f 	and.w	r3, r3, #31
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013122:	2302      	movs	r3, #2
 8013124:	e063      	b.n	80131ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	683a      	ldr	r2, [r7, #0]
 801312a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d106      	bne.n	8013146 <dir_sdi+0x46>
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b02      	cmp	r3, #2
 801313e:	d902      	bls.n	8013146 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013144:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d10c      	bne.n	8013166 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	095b      	lsrs	r3, r3, #5
 8013150:	693a      	ldr	r2, [r7, #16]
 8013152:	8912      	ldrh	r2, [r2, #8]
 8013154:	4293      	cmp	r3, r2
 8013156:	d301      	bcc.n	801315c <dir_sdi+0x5c>
 8013158:	2302      	movs	r3, #2
 801315a:	e048      	b.n	80131ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	61da      	str	r2, [r3, #28]
 8013164:	e029      	b.n	80131ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	895b      	ldrh	r3, [r3, #10]
 801316a:	025b      	lsls	r3, r3, #9
 801316c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801316e:	e019      	b.n	80131a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6979      	ldr	r1, [r7, #20]
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff fcfe 	bl	8012b76 <get_fat>
 801317a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013182:	d101      	bne.n	8013188 <dir_sdi+0x88>
 8013184:	2301      	movs	r3, #1
 8013186:	e032      	b.n	80131ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d904      	bls.n	8013198 <dir_sdi+0x98>
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	699b      	ldr	r3, [r3, #24]
 8013192:	697a      	ldr	r2, [r7, #20]
 8013194:	429a      	cmp	r2, r3
 8013196:	d301      	bcc.n	801319c <dir_sdi+0x9c>
 8013198:	2302      	movs	r3, #2
 801319a:	e028      	b.n	80131ee <dir_sdi+0xee>
			ofs -= csz;
 801319c:	683a      	ldr	r2, [r7, #0]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80131a4:	683a      	ldr	r2, [r7, #0]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d2e1      	bcs.n	8013170 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80131ac:	6979      	ldr	r1, [r7, #20]
 80131ae:	6938      	ldr	r0, [r7, #16]
 80131b0:	f7ff fcc2 	bl	8012b38 <clust2sect>
 80131b4:	4602      	mov	r2, r0
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	697a      	ldr	r2, [r7, #20]
 80131be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	69db      	ldr	r3, [r3, #28]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d101      	bne.n	80131cc <dir_sdi+0xcc>
 80131c8:	2302      	movs	r3, #2
 80131ca:	e010      	b.n	80131ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	69da      	ldr	r2, [r3, #28]
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	0a5b      	lsrs	r3, r3, #9
 80131d4:	441a      	add	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131e6:	441a      	add	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80131ec:	2300      	movs	r3, #0
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3718      	adds	r7, #24
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b086      	sub	sp, #24
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
 80131fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	695b      	ldr	r3, [r3, #20]
 801320a:	3320      	adds	r3, #32
 801320c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	69db      	ldr	r3, [r3, #28]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <dir_next+0x28>
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801321c:	d301      	bcc.n	8013222 <dir_next+0x2c>
 801321e:	2304      	movs	r3, #4
 8013220:	e0aa      	b.n	8013378 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013228:	2b00      	cmp	r3, #0
 801322a:	f040 8098 	bne.w	801335e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	69db      	ldr	r3, [r3, #28]
 8013232:	1c5a      	adds	r2, r3, #1
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	699b      	ldr	r3, [r3, #24]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d10b      	bne.n	8013258 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	095b      	lsrs	r3, r3, #5
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	8912      	ldrh	r2, [r2, #8]
 8013248:	4293      	cmp	r3, r2
 801324a:	f0c0 8088 	bcc.w	801335e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	61da      	str	r2, [r3, #28]
 8013254:	2304      	movs	r3, #4
 8013256:	e08f      	b.n	8013378 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	0a5b      	lsrs	r3, r3, #9
 801325c:	68fa      	ldr	r2, [r7, #12]
 801325e:	8952      	ldrh	r2, [r2, #10]
 8013260:	3a01      	subs	r2, #1
 8013262:	4013      	ands	r3, r2
 8013264:	2b00      	cmp	r3, #0
 8013266:	d17a      	bne.n	801335e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	699b      	ldr	r3, [r3, #24]
 801326e:	4619      	mov	r1, r3
 8013270:	4610      	mov	r0, r2
 8013272:	f7ff fc80 	bl	8012b76 <get_fat>
 8013276:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	2b01      	cmp	r3, #1
 801327c:	d801      	bhi.n	8013282 <dir_next+0x8c>
 801327e:	2302      	movs	r3, #2
 8013280:	e07a      	b.n	8013378 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013288:	d101      	bne.n	801328e <dir_next+0x98>
 801328a:	2301      	movs	r3, #1
 801328c:	e074      	b.n	8013378 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	699b      	ldr	r3, [r3, #24]
 8013292:	697a      	ldr	r2, [r7, #20]
 8013294:	429a      	cmp	r2, r3
 8013296:	d358      	bcc.n	801334a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d104      	bne.n	80132a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	61da      	str	r2, [r3, #28]
 80132a4:	2304      	movs	r3, #4
 80132a6:	e067      	b.n	8013378 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	4619      	mov	r1, r3
 80132b0:	4610      	mov	r0, r2
 80132b2:	f7ff fe59 	bl	8012f68 <create_chain>
 80132b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d101      	bne.n	80132c2 <dir_next+0xcc>
 80132be:	2307      	movs	r3, #7
 80132c0:	e05a      	b.n	8013378 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d101      	bne.n	80132cc <dir_next+0xd6>
 80132c8:	2302      	movs	r3, #2
 80132ca:	e055      	b.n	8013378 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132d2:	d101      	bne.n	80132d8 <dir_next+0xe2>
 80132d4:	2301      	movs	r3, #1
 80132d6:	e04f      	b.n	8013378 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f7ff fb4d 	bl	8012978 <sync_window>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <dir_next+0xf2>
 80132e4:	2301      	movs	r3, #1
 80132e6:	e047      	b.n	8013378 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	3334      	adds	r3, #52	; 0x34
 80132ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f0:	2100      	movs	r1, #0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff f945 	bl	8012582 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80132f8:	2300      	movs	r3, #0
 80132fa:	613b      	str	r3, [r7, #16]
 80132fc:	6979      	ldr	r1, [r7, #20]
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f7ff fc1a 	bl	8012b38 <clust2sect>
 8013304:	4602      	mov	r2, r0
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	631a      	str	r2, [r3, #48]	; 0x30
 801330a:	e012      	b.n	8013332 <dir_next+0x13c>
						fs->wflag = 1;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2201      	movs	r2, #1
 8013310:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013312:	68f8      	ldr	r0, [r7, #12]
 8013314:	f7ff fb30 	bl	8012978 <sync_window>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d001      	beq.n	8013322 <dir_next+0x12c>
 801331e:	2301      	movs	r3, #1
 8013320:	e02a      	b.n	8013378 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	3301      	adds	r3, #1
 8013326:	613b      	str	r3, [r7, #16]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	631a      	str	r2, [r3, #48]	; 0x30
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	895b      	ldrh	r3, [r3, #10]
 8013336:	461a      	mov	r2, r3
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	4293      	cmp	r3, r2
 801333c:	d3e6      	bcc.n	801330c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	1ad2      	subs	r2, r2, r3
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	697a      	ldr	r2, [r7, #20]
 801334e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013350:	6979      	ldr	r1, [r7, #20]
 8013352:	68f8      	ldr	r0, [r7, #12]
 8013354:	f7ff fbf0 	bl	8012b38 <clust2sect>
 8013358:	4602      	mov	r2, r0
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	68ba      	ldr	r2, [r7, #8]
 8013362:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013370:	441a      	add	r2, r3
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3718      	adds	r7, #24
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013390:	2100      	movs	r1, #0
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff feb4 	bl	8013100 <dir_sdi>
 8013398:	4603      	mov	r3, r0
 801339a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801339c:	7dfb      	ldrb	r3, [r7, #23]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d12b      	bne.n	80133fa <dir_alloc+0x7a>
		n = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	69db      	ldr	r3, [r3, #28]
 80133aa:	4619      	mov	r1, r3
 80133ac:	68f8      	ldr	r0, [r7, #12]
 80133ae:	f7ff fb27 	bl	8012a00 <move_window>
 80133b2:	4603      	mov	r3, r0
 80133b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80133b6:	7dfb      	ldrb	r3, [r7, #23]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d11d      	bne.n	80133f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6a1b      	ldr	r3, [r3, #32]
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	2be5      	cmp	r3, #229	; 0xe5
 80133c4:	d004      	beq.n	80133d0 <dir_alloc+0x50>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6a1b      	ldr	r3, [r3, #32]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d107      	bne.n	80133e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	3301      	adds	r3, #1
 80133d4:	613b      	str	r3, [r7, #16]
 80133d6:	693a      	ldr	r2, [r7, #16]
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d102      	bne.n	80133e4 <dir_alloc+0x64>
 80133de:	e00c      	b.n	80133fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80133e0:	2300      	movs	r3, #0
 80133e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80133e4:	2101      	movs	r1, #1
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f7ff ff05 	bl	80131f6 <dir_next>
 80133ec:	4603      	mov	r3, r0
 80133ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80133f0:	7dfb      	ldrb	r3, [r7, #23]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d0d7      	beq.n	80133a6 <dir_alloc+0x26>
 80133f6:	e000      	b.n	80133fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80133f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80133fa:	7dfb      	ldrb	r3, [r7, #23]
 80133fc:	2b04      	cmp	r3, #4
 80133fe:	d101      	bne.n	8013404 <dir_alloc+0x84>
 8013400:	2307      	movs	r3, #7
 8013402:	75fb      	strb	r3, [r7, #23]
	return res;
 8013404:	7dfb      	ldrb	r3, [r7, #23]
}
 8013406:	4618      	mov	r0, r3
 8013408:	3718      	adds	r7, #24
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b084      	sub	sp, #16
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
 8013416:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	331a      	adds	r3, #26
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff f80d 	bl	801243c <ld_word>
 8013422:	4603      	mov	r3, r0
 8013424:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	2b03      	cmp	r3, #3
 801342c:	d109      	bne.n	8013442 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	3314      	adds	r3, #20
 8013432:	4618      	mov	r0, r3
 8013434:	f7ff f802 	bl	801243c <ld_word>
 8013438:	4603      	mov	r3, r0
 801343a:	041b      	lsls	r3, r3, #16
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	4313      	orrs	r3, r2
 8013440:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013442:	68fb      	ldr	r3, [r7, #12]
}
 8013444:	4618      	mov	r0, r3
 8013446:	3710      	adds	r7, #16
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	331a      	adds	r3, #26
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	b292      	uxth	r2, r2
 8013460:	4611      	mov	r1, r2
 8013462:	4618      	mov	r0, r3
 8013464:	f7ff f825 	bl	80124b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	2b03      	cmp	r3, #3
 801346e:	d109      	bne.n	8013484 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	f103 0214 	add.w	r2, r3, #20
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	0c1b      	lsrs	r3, r3, #16
 801347a:	b29b      	uxth	r3, r3
 801347c:	4619      	mov	r1, r3
 801347e:	4610      	mov	r0, r2
 8013480:	f7ff f817 	bl	80124b2 <st_word>
	}
}
 8013484:	bf00      	nop
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b086      	sub	sp, #24
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013496:	2304      	movs	r3, #4
 8013498:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80134a0:	e03c      	b.n	801351c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	69db      	ldr	r3, [r3, #28]
 80134a6:	4619      	mov	r1, r3
 80134a8:	6938      	ldr	r0, [r7, #16]
 80134aa:	f7ff faa9 	bl	8012a00 <move_window>
 80134ae:	4603      	mov	r3, r0
 80134b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80134b2:	7dfb      	ldrb	r3, [r7, #23]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d136      	bne.n	8013526 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6a1b      	ldr	r3, [r3, #32]
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80134c0:	7bfb      	ldrb	r3, [r7, #15]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d102      	bne.n	80134cc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80134c6:	2304      	movs	r3, #4
 80134c8:	75fb      	strb	r3, [r7, #23]
 80134ca:	e031      	b.n	8013530 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6a1b      	ldr	r3, [r3, #32]
 80134d0:	330b      	adds	r3, #11
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134d8:	73bb      	strb	r3, [r7, #14]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	7bba      	ldrb	r2, [r7, #14]
 80134de:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80134e0:	7bfb      	ldrb	r3, [r7, #15]
 80134e2:	2be5      	cmp	r3, #229	; 0xe5
 80134e4:	d011      	beq.n	801350a <dir_read+0x7e>
 80134e6:	7bfb      	ldrb	r3, [r7, #15]
 80134e8:	2b2e      	cmp	r3, #46	; 0x2e
 80134ea:	d00e      	beq.n	801350a <dir_read+0x7e>
 80134ec:	7bbb      	ldrb	r3, [r7, #14]
 80134ee:	2b0f      	cmp	r3, #15
 80134f0:	d00b      	beq.n	801350a <dir_read+0x7e>
 80134f2:	7bbb      	ldrb	r3, [r7, #14]
 80134f4:	f023 0320 	bic.w	r3, r3, #32
 80134f8:	2b08      	cmp	r3, #8
 80134fa:	bf0c      	ite	eq
 80134fc:	2301      	moveq	r3, #1
 80134fe:	2300      	movne	r3, #0
 8013500:	b2db      	uxtb	r3, r3
 8013502:	461a      	mov	r2, r3
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	4293      	cmp	r3, r2
 8013508:	d00f      	beq.n	801352a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801350a:	2100      	movs	r1, #0
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7ff fe72 	bl	80131f6 <dir_next>
 8013512:	4603      	mov	r3, r0
 8013514:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013516:	7dfb      	ldrb	r3, [r7, #23]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d108      	bne.n	801352e <dir_read+0xa2>
	while (dp->sect) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	69db      	ldr	r3, [r3, #28]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1be      	bne.n	80134a2 <dir_read+0x16>
 8013524:	e004      	b.n	8013530 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013526:	bf00      	nop
 8013528:	e002      	b.n	8013530 <dir_read+0xa4>
				break;
 801352a:	bf00      	nop
 801352c:	e000      	b.n	8013530 <dir_read+0xa4>
		if (res != FR_OK) break;
 801352e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013530:	7dfb      	ldrb	r3, [r7, #23]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d002      	beq.n	801353c <dir_read+0xb0>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2200      	movs	r2, #0
 801353a:	61da      	str	r2, [r3, #28]
	return res;
 801353c:	7dfb      	ldrb	r3, [r7, #23]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b086      	sub	sp, #24
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013554:	2100      	movs	r1, #0
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f7ff fdd2 	bl	8013100 <dir_sdi>
 801355c:	4603      	mov	r3, r0
 801355e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013560:	7dfb      	ldrb	r3, [r7, #23]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <dir_find+0x24>
 8013566:	7dfb      	ldrb	r3, [r7, #23]
 8013568:	e03e      	b.n	80135e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	69db      	ldr	r3, [r3, #28]
 801356e:	4619      	mov	r1, r3
 8013570:	6938      	ldr	r0, [r7, #16]
 8013572:	f7ff fa45 	bl	8012a00 <move_window>
 8013576:	4603      	mov	r3, r0
 8013578:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801357a:	7dfb      	ldrb	r3, [r7, #23]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d12f      	bne.n	80135e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6a1b      	ldr	r3, [r3, #32]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013588:	7bfb      	ldrb	r3, [r7, #15]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <dir_find+0x4e>
 801358e:	2304      	movs	r3, #4
 8013590:	75fb      	strb	r3, [r7, #23]
 8013592:	e028      	b.n	80135e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a1b      	ldr	r3, [r3, #32]
 8013598:	330b      	adds	r3, #11
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135a0:	b2da      	uxtb	r2, r3
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6a1b      	ldr	r3, [r3, #32]
 80135aa:	330b      	adds	r3, #11
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	f003 0308 	and.w	r3, r3, #8
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10a      	bne.n	80135cc <dir_find+0x86>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6a18      	ldr	r0, [r3, #32]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	3324      	adds	r3, #36	; 0x24
 80135be:	220b      	movs	r2, #11
 80135c0:	4619      	mov	r1, r3
 80135c2:	f7fe fff9 	bl	80125b8 <mem_cmp>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d00b      	beq.n	80135e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80135cc:	2100      	movs	r1, #0
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fe11 	bl	80131f6 <dir_next>
 80135d4:	4603      	mov	r3, r0
 80135d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80135d8:	7dfb      	ldrb	r3, [r7, #23]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d0c5      	beq.n	801356a <dir_find+0x24>
 80135de:	e002      	b.n	80135e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80135e0:	bf00      	nop
 80135e2:	e000      	b.n	80135e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80135e4:	bf00      	nop

	return res;
 80135e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3718      	adds	r7, #24
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80135fe:	2101      	movs	r1, #1
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7ff febd 	bl	8013380 <dir_alloc>
 8013606:	4603      	mov	r3, r0
 8013608:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d11c      	bne.n	801364a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	69db      	ldr	r3, [r3, #28]
 8013614:	4619      	mov	r1, r3
 8013616:	68b8      	ldr	r0, [r7, #8]
 8013618:	f7ff f9f2 	bl	8012a00 <move_window>
 801361c:	4603      	mov	r3, r0
 801361e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013620:	7bfb      	ldrb	r3, [r7, #15]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d111      	bne.n	801364a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6a1b      	ldr	r3, [r3, #32]
 801362a:	2220      	movs	r2, #32
 801362c:	2100      	movs	r1, #0
 801362e:	4618      	mov	r0, r3
 8013630:	f7fe ffa7 	bl	8012582 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6a18      	ldr	r0, [r3, #32]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	3324      	adds	r3, #36	; 0x24
 801363c:	220b      	movs	r2, #11
 801363e:	4619      	mov	r1, r3
 8013640:	f7fe ff7e 	bl	8012540 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2201      	movs	r2, #1
 8013648:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801364a:	7bfb      	ldrb	r3, [r7, #15]
}
 801364c:	4618      	mov	r0, r3
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	2200      	movs	r2, #0
 8013662:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	69db      	ldr	r3, [r3, #28]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d04e      	beq.n	801370a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	613b      	str	r3, [r7, #16]
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013674:	e021      	b.n	80136ba <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6a1a      	ldr	r2, [r3, #32]
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	1c59      	adds	r1, r3, #1
 801367e:	6179      	str	r1, [r7, #20]
 8013680:	4413      	add	r3, r2
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013686:	7bfb      	ldrb	r3, [r7, #15]
 8013688:	2b20      	cmp	r3, #32
 801368a:	d100      	bne.n	801368e <get_fileinfo+0x3a>
 801368c:	e015      	b.n	80136ba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801368e:	7bfb      	ldrb	r3, [r7, #15]
 8013690:	2b05      	cmp	r3, #5
 8013692:	d101      	bne.n	8013698 <get_fileinfo+0x44>
 8013694:	23e5      	movs	r3, #229	; 0xe5
 8013696:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	2b09      	cmp	r3, #9
 801369c:	d106      	bne.n	80136ac <get_fileinfo+0x58>
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	1c5a      	adds	r2, r3, #1
 80136a2:	613a      	str	r2, [r7, #16]
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	4413      	add	r3, r2
 80136a8:	222e      	movs	r2, #46	; 0x2e
 80136aa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	613a      	str	r2, [r7, #16]
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	4413      	add	r3, r2
 80136b6:	7bfa      	ldrb	r2, [r7, #15]
 80136b8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	2b0a      	cmp	r3, #10
 80136be:	d9da      	bls.n	8013676 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	4413      	add	r3, r2
 80136c6:	3309      	adds	r3, #9
 80136c8:	2200      	movs	r2, #0
 80136ca:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6a1b      	ldr	r3, [r3, #32]
 80136d0:	7ada      	ldrb	r2, [r3, #11]
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6a1b      	ldr	r3, [r3, #32]
 80136da:	331c      	adds	r3, #28
 80136dc:	4618      	mov	r0, r3
 80136de:	f7fe fec5 	bl	801246c <ld_dword>
 80136e2:	4602      	mov	r2, r0
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6a1b      	ldr	r3, [r3, #32]
 80136ec:	3316      	adds	r3, #22
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fe febc 	bl	801246c <ld_dword>
 80136f4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	80da      	strh	r2, [r3, #6]
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	0c1b      	lsrs	r3, r3, #16
 8013702:	b29a      	uxth	r2, r3
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	809a      	strh	r2, [r3, #4]
 8013708:	e000      	b.n	801370c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801370a:	bf00      	nop
}
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
	...

08013714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	60fb      	str	r3, [r7, #12]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3324      	adds	r3, #36	; 0x24
 8013728:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801372a:	220b      	movs	r2, #11
 801372c:	2120      	movs	r1, #32
 801372e:	68b8      	ldr	r0, [r7, #8]
 8013730:	f7fe ff27 	bl	8012582 <mem_set>
	si = i = 0; ni = 8;
 8013734:	2300      	movs	r3, #0
 8013736:	613b      	str	r3, [r7, #16]
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	61fb      	str	r3, [r7, #28]
 801373c:	2308      	movs	r3, #8
 801373e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	1c5a      	adds	r2, r3, #1
 8013744:	61fa      	str	r2, [r7, #28]
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	4413      	add	r3, r2
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801374e:	7efb      	ldrb	r3, [r7, #27]
 8013750:	2b20      	cmp	r3, #32
 8013752:	d94e      	bls.n	80137f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013754:	7efb      	ldrb	r3, [r7, #27]
 8013756:	2b2f      	cmp	r3, #47	; 0x2f
 8013758:	d006      	beq.n	8013768 <create_name+0x54>
 801375a:	7efb      	ldrb	r3, [r7, #27]
 801375c:	2b5c      	cmp	r3, #92	; 0x5c
 801375e:	d110      	bne.n	8013782 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013760:	e002      	b.n	8013768 <create_name+0x54>
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	3301      	adds	r3, #1
 8013766:	61fb      	str	r3, [r7, #28]
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	69fb      	ldr	r3, [r7, #28]
 801376c:	4413      	add	r3, r2
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2b2f      	cmp	r3, #47	; 0x2f
 8013772:	d0f6      	beq.n	8013762 <create_name+0x4e>
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	4413      	add	r3, r2
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2b5c      	cmp	r3, #92	; 0x5c
 801377e:	d0f0      	beq.n	8013762 <create_name+0x4e>
			break;
 8013780:	e038      	b.n	80137f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013782:	7efb      	ldrb	r3, [r7, #27]
 8013784:	2b2e      	cmp	r3, #46	; 0x2e
 8013786:	d003      	beq.n	8013790 <create_name+0x7c>
 8013788:	693a      	ldr	r2, [r7, #16]
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	429a      	cmp	r2, r3
 801378e:	d30c      	bcc.n	80137aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	2b0b      	cmp	r3, #11
 8013794:	d002      	beq.n	801379c <create_name+0x88>
 8013796:	7efb      	ldrb	r3, [r7, #27]
 8013798:	2b2e      	cmp	r3, #46	; 0x2e
 801379a:	d001      	beq.n	80137a0 <create_name+0x8c>
 801379c:	2306      	movs	r3, #6
 801379e:	e044      	b.n	801382a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80137a0:	2308      	movs	r3, #8
 80137a2:	613b      	str	r3, [r7, #16]
 80137a4:	230b      	movs	r3, #11
 80137a6:	617b      	str	r3, [r7, #20]
			continue;
 80137a8:	e022      	b.n	80137f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80137aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	da04      	bge.n	80137bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80137b2:	7efb      	ldrb	r3, [r7, #27]
 80137b4:	3b80      	subs	r3, #128	; 0x80
 80137b6:	4a1f      	ldr	r2, [pc, #124]	; (8013834 <create_name+0x120>)
 80137b8:	5cd3      	ldrb	r3, [r2, r3]
 80137ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80137bc:	7efb      	ldrb	r3, [r7, #27]
 80137be:	4619      	mov	r1, r3
 80137c0:	481d      	ldr	r0, [pc, #116]	; (8013838 <create_name+0x124>)
 80137c2:	f7fe ff20 	bl	8012606 <chk_chr>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d001      	beq.n	80137d0 <create_name+0xbc>
 80137cc:	2306      	movs	r3, #6
 80137ce:	e02c      	b.n	801382a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80137d0:	7efb      	ldrb	r3, [r7, #27]
 80137d2:	2b60      	cmp	r3, #96	; 0x60
 80137d4:	d905      	bls.n	80137e2 <create_name+0xce>
 80137d6:	7efb      	ldrb	r3, [r7, #27]
 80137d8:	2b7a      	cmp	r3, #122	; 0x7a
 80137da:	d802      	bhi.n	80137e2 <create_name+0xce>
 80137dc:	7efb      	ldrb	r3, [r7, #27]
 80137de:	3b20      	subs	r3, #32
 80137e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	1c5a      	adds	r2, r3, #1
 80137e6:	613a      	str	r2, [r7, #16]
 80137e8:	68ba      	ldr	r2, [r7, #8]
 80137ea:	4413      	add	r3, r2
 80137ec:	7efa      	ldrb	r2, [r7, #27]
 80137ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80137f0:	e7a6      	b.n	8013740 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80137f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	441a      	add	r2, r3
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d101      	bne.n	8013808 <create_name+0xf4>
 8013804:	2306      	movs	r3, #6
 8013806:	e010      	b.n	801382a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	2be5      	cmp	r3, #229	; 0xe5
 801380e:	d102      	bne.n	8013816 <create_name+0x102>
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	2205      	movs	r2, #5
 8013814:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013816:	7efb      	ldrb	r3, [r7, #27]
 8013818:	2b20      	cmp	r3, #32
 801381a:	d801      	bhi.n	8013820 <create_name+0x10c>
 801381c:	2204      	movs	r2, #4
 801381e:	e000      	b.n	8013822 <create_name+0x10e>
 8013820:	2200      	movs	r2, #0
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	330b      	adds	r3, #11
 8013826:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013828:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801382a:	4618      	mov	r0, r3
 801382c:	3720      	adds	r7, #32
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	08021258 	.word	0x08021258
 8013838:	08021038 	.word	0x08021038

0801383c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013850:	e002      	b.n	8013858 <follow_path+0x1c>
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	3301      	adds	r3, #1
 8013856:	603b      	str	r3, [r7, #0]
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b2f      	cmp	r3, #47	; 0x2f
 801385e:	d0f8      	beq.n	8013852 <follow_path+0x16>
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b5c      	cmp	r3, #92	; 0x5c
 8013866:	d0f4      	beq.n	8013852 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	2200      	movs	r2, #0
 801386c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	2b1f      	cmp	r3, #31
 8013874:	d80a      	bhi.n	801388c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2280      	movs	r2, #128	; 0x80
 801387a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801387e:	2100      	movs	r1, #0
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f7ff fc3d 	bl	8013100 <dir_sdi>
 8013886:	4603      	mov	r3, r0
 8013888:	75fb      	strb	r3, [r7, #23]
 801388a:	e043      	b.n	8013914 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801388c:	463b      	mov	r3, r7
 801388e:	4619      	mov	r1, r3
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff ff3f 	bl	8013714 <create_name>
 8013896:	4603      	mov	r3, r0
 8013898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801389a:	7dfb      	ldrb	r3, [r7, #23]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d134      	bne.n	801390a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f7ff fe50 	bl	8013546 <dir_find>
 80138a6:	4603      	mov	r3, r0
 80138a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80138b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00a      	beq.n	80138ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80138b8:	7dfb      	ldrb	r3, [r7, #23]
 80138ba:	2b04      	cmp	r3, #4
 80138bc:	d127      	bne.n	801390e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80138be:	7afb      	ldrb	r3, [r7, #11]
 80138c0:	f003 0304 	and.w	r3, r3, #4
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d122      	bne.n	801390e <follow_path+0xd2>
 80138c8:	2305      	movs	r3, #5
 80138ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80138cc:	e01f      	b.n	801390e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80138ce:	7afb      	ldrb	r3, [r7, #11]
 80138d0:	f003 0304 	and.w	r3, r3, #4
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d11c      	bne.n	8013912 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	799b      	ldrb	r3, [r3, #6]
 80138dc:	f003 0310 	and.w	r3, r3, #16
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d102      	bne.n	80138ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80138e4:	2305      	movs	r3, #5
 80138e6:	75fb      	strb	r3, [r7, #23]
 80138e8:	e014      	b.n	8013914 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	695b      	ldr	r3, [r3, #20]
 80138f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138f8:	4413      	add	r3, r2
 80138fa:	4619      	mov	r1, r3
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff fd86 	bl	801340e <ld_clust>
 8013902:	4602      	mov	r2, r0
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013908:	e7c0      	b.n	801388c <follow_path+0x50>
			if (res != FR_OK) break;
 801390a:	bf00      	nop
 801390c:	e002      	b.n	8013914 <follow_path+0xd8>
				break;
 801390e:	bf00      	nop
 8013910:	e000      	b.n	8013914 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013912:	bf00      	nop
			}
		}
	}

	return res;
 8013914:	7dfb      	ldrb	r3, [r7, #23]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3718      	adds	r7, #24
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}

0801391e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801391e:	b480      	push	{r7}
 8013920:	b087      	sub	sp, #28
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013926:	f04f 33ff 	mov.w	r3, #4294967295
 801392a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d031      	beq.n	8013998 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	617b      	str	r3, [r7, #20]
 801393a:	e002      	b.n	8013942 <get_ldnumber+0x24>
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	3301      	adds	r3, #1
 8013940:	617b      	str	r3, [r7, #20]
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2b20      	cmp	r3, #32
 8013948:	d903      	bls.n	8013952 <get_ldnumber+0x34>
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	2b3a      	cmp	r3, #58	; 0x3a
 8013950:	d1f4      	bne.n	801393c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	2b3a      	cmp	r3, #58	; 0x3a
 8013958:	d11c      	bne.n	8013994 <get_ldnumber+0x76>
			tp = *path;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	1c5a      	adds	r2, r3, #1
 8013964:	60fa      	str	r2, [r7, #12]
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	3b30      	subs	r3, #48	; 0x30
 801396a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2b09      	cmp	r3, #9
 8013970:	d80e      	bhi.n	8013990 <get_ldnumber+0x72>
 8013972:	68fa      	ldr	r2, [r7, #12]
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	429a      	cmp	r2, r3
 8013978:	d10a      	bne.n	8013990 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d107      	bne.n	8013990 <get_ldnumber+0x72>
					vol = (int)i;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	3301      	adds	r3, #1
 8013988:	617b      	str	r3, [r7, #20]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	697a      	ldr	r2, [r7, #20]
 801398e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	e002      	b.n	801399a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013994:	2300      	movs	r3, #0
 8013996:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013998:	693b      	ldr	r3, [r7, #16]
}
 801399a:	4618      	mov	r0, r3
 801399c:	371c      	adds	r7, #28
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
	...

080139a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	70da      	strb	r2, [r3, #3]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f04f 32ff 	mov.w	r2, #4294967295
 80139be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80139c0:	6839      	ldr	r1, [r7, #0]
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f7ff f81c 	bl	8012a00 <move_window>
 80139c8:	4603      	mov	r3, r0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d001      	beq.n	80139d2 <check_fs+0x2a>
 80139ce:	2304      	movs	r3, #4
 80139d0:	e038      	b.n	8013a44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	3334      	adds	r3, #52	; 0x34
 80139d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fe fd2e 	bl	801243c <ld_word>
 80139e0:	4603      	mov	r3, r0
 80139e2:	461a      	mov	r2, r3
 80139e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d001      	beq.n	80139f0 <check_fs+0x48>
 80139ec:	2303      	movs	r3, #3
 80139ee:	e029      	b.n	8013a44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80139f6:	2be9      	cmp	r3, #233	; 0xe9
 80139f8:	d009      	beq.n	8013a0e <check_fs+0x66>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a00:	2beb      	cmp	r3, #235	; 0xeb
 8013a02:	d11e      	bne.n	8013a42 <check_fs+0x9a>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013a0a:	2b90      	cmp	r3, #144	; 0x90
 8013a0c:	d119      	bne.n	8013a42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	3334      	adds	r3, #52	; 0x34
 8013a12:	3336      	adds	r3, #54	; 0x36
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7fe fd29 	bl	801246c <ld_dword>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a20:	4a0a      	ldr	r2, [pc, #40]	; (8013a4c <check_fs+0xa4>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d101      	bne.n	8013a2a <check_fs+0x82>
 8013a26:	2300      	movs	r3, #0
 8013a28:	e00c      	b.n	8013a44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	3334      	adds	r3, #52	; 0x34
 8013a2e:	3352      	adds	r3, #82	; 0x52
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fe fd1b 	bl	801246c <ld_dword>
 8013a36:	4603      	mov	r3, r0
 8013a38:	4a05      	ldr	r2, [pc, #20]	; (8013a50 <check_fs+0xa8>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d101      	bne.n	8013a42 <check_fs+0x9a>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	e000      	b.n	8013a44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013a42:	2302      	movs	r3, #2
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	00544146 	.word	0x00544146
 8013a50:	33544146 	.word	0x33544146

08013a54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b096      	sub	sp, #88	; 0x58
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	4613      	mov	r3, r2
 8013a60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	2200      	movs	r2, #0
 8013a66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f7ff ff58 	bl	801391e <get_ldnumber>
 8013a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	da01      	bge.n	8013a7a <find_volume+0x26>
 8013a76:	230b      	movs	r3, #11
 8013a78:	e236      	b.n	8013ee8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013a7a:	4aac      	ldr	r2, [pc, #688]	; (8013d2c <find_volume+0x2d8>)
 8013a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d101      	bne.n	8013a8e <find_volume+0x3a>
 8013a8a:	230c      	movs	r3, #12
 8013a8c:	e22c      	b.n	8013ee8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8013a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a90:	f7fe fdd4 	bl	801263c <lock_fs>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <find_volume+0x4a>
 8013a9a:	230f      	movs	r3, #15
 8013a9c:	e224      	b.n	8013ee8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013aa4:	79fb      	ldrb	r3, [r7, #7]
 8013aa6:	f023 0301 	bic.w	r3, r3, #1
 8013aaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d01a      	beq.n	8013aea <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab6:	785b      	ldrb	r3, [r3, #1]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7fe fc21 	bl	8012300 <disk_status>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ac8:	f003 0301 	and.w	r3, r3, #1
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10c      	bne.n	8013aea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013ad0:	79fb      	ldrb	r3, [r7, #7]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d007      	beq.n	8013ae6 <find_volume+0x92>
 8013ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ada:	f003 0304 	and.w	r3, r3, #4
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d001      	beq.n	8013ae6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013ae2:	230a      	movs	r3, #10
 8013ae4:	e200      	b.n	8013ee8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	e1fe      	b.n	8013ee8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aec:	2200      	movs	r2, #0
 8013aee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013af2:	b2da      	uxtb	r2, r3
 8013af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afa:	785b      	ldrb	r3, [r3, #1]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fe fc19 	bl	8012334 <disk_initialize>
 8013b02:	4603      	mov	r3, r0
 8013b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013b14:	2303      	movs	r3, #3
 8013b16:	e1e7      	b.n	8013ee8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013b18:	79fb      	ldrb	r3, [r7, #7]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d007      	beq.n	8013b2e <find_volume+0xda>
 8013b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b22:	f003 0304 	and.w	r3, r3, #4
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013b2a:	230a      	movs	r3, #10
 8013b2c:	e1dc      	b.n	8013ee8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013b32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b36:	f7ff ff37 	bl	80139a8 <check_fs>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b44:	2b02      	cmp	r3, #2
 8013b46:	d14b      	bne.n	8013be0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b48:	2300      	movs	r3, #0
 8013b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b4c:	e01f      	b.n	8013b8e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b56:	011b      	lsls	r3, r3, #4
 8013b58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013b5c:	4413      	add	r3, r2
 8013b5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b62:	3304      	adds	r3, #4
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d006      	beq.n	8013b78 <find_volume+0x124>
 8013b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6c:	3308      	adds	r3, #8
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe fc7c 	bl	801246c <ld_dword>
 8013b74:	4602      	mov	r2, r0
 8013b76:	e000      	b.n	8013b7a <find_volume+0x126>
 8013b78:	2200      	movs	r2, #0
 8013b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013b82:	440b      	add	r3, r1
 8013b84:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8013b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b90:	2b03      	cmp	r3, #3
 8013b92:	d9dc      	bls.n	8013b4e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013b94:	2300      	movs	r3, #0
 8013b96:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d002      	beq.n	8013ba4 <find_volume+0x150>
 8013b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ba6:	009b      	lsls	r3, r3, #2
 8013ba8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013bac:	4413      	add	r3, r2
 8013bae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013bb2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d005      	beq.n	8013bc6 <find_volume+0x172>
 8013bba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bbe:	f7ff fef3 	bl	80139a8 <check_fs>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	e000      	b.n	8013bc8 <find_volume+0x174>
 8013bc6:	2303      	movs	r3, #3
 8013bc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d905      	bls.n	8013be0 <find_volume+0x18c>
 8013bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8013bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bdc:	2b03      	cmp	r3, #3
 8013bde:	d9e1      	bls.n	8013ba4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013be4:	2b04      	cmp	r3, #4
 8013be6:	d101      	bne.n	8013bec <find_volume+0x198>
 8013be8:	2301      	movs	r3, #1
 8013bea:	e17d      	b.n	8013ee8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013bec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d901      	bls.n	8013bf8 <find_volume+0x1a4>
 8013bf4:	230d      	movs	r3, #13
 8013bf6:	e177      	b.n	8013ee8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfa:	3334      	adds	r3, #52	; 0x34
 8013bfc:	330b      	adds	r3, #11
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7fe fc1c 	bl	801243c <ld_word>
 8013c04:	4603      	mov	r3, r0
 8013c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c0a:	d001      	beq.n	8013c10 <find_volume+0x1bc>
 8013c0c:	230d      	movs	r3, #13
 8013c0e:	e16b      	b.n	8013ee8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c12:	3334      	adds	r3, #52	; 0x34
 8013c14:	3316      	adds	r3, #22
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fe fc10 	bl	801243c <ld_word>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <find_volume+0x1e0>
 8013c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c28:	3334      	adds	r3, #52	; 0x34
 8013c2a:	3324      	adds	r3, #36	; 0x24
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fe fc1d 	bl	801246c <ld_dword>
 8013c32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013c38:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c46:	789b      	ldrb	r3, [r3, #2]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d005      	beq.n	8013c58 <find_volume+0x204>
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4e:	789b      	ldrb	r3, [r3, #2]
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d001      	beq.n	8013c58 <find_volume+0x204>
 8013c54:	230d      	movs	r3, #13
 8013c56:	e147      	b.n	8013ee8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c5a:	789b      	ldrb	r3, [r3, #2]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c60:	fb02 f303 	mul.w	r3, r2, r3
 8013c64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c74:	895b      	ldrh	r3, [r3, #10]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d008      	beq.n	8013c8c <find_volume+0x238>
 8013c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c7c:	895b      	ldrh	r3, [r3, #10]
 8013c7e:	461a      	mov	r2, r3
 8013c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c82:	895b      	ldrh	r3, [r3, #10]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	4013      	ands	r3, r2
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <find_volume+0x23c>
 8013c8c:	230d      	movs	r3, #13
 8013c8e:	e12b      	b.n	8013ee8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c92:	3334      	adds	r3, #52	; 0x34
 8013c94:	3311      	adds	r3, #17
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fe fbd0 	bl	801243c <ld_word>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ca2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ca6:	891b      	ldrh	r3, [r3, #8]
 8013ca8:	f003 030f 	and.w	r3, r3, #15
 8013cac:	b29b      	uxth	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <find_volume+0x262>
 8013cb2:	230d      	movs	r3, #13
 8013cb4:	e118      	b.n	8013ee8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb8:	3334      	adds	r3, #52	; 0x34
 8013cba:	3313      	adds	r3, #19
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fe fbbd 	bl	801243c <ld_word>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d106      	bne.n	8013cda <find_volume+0x286>
 8013ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cce:	3334      	adds	r3, #52	; 0x34
 8013cd0:	3320      	adds	r3, #32
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fe fbca 	bl	801246c <ld_dword>
 8013cd8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cdc:	3334      	adds	r3, #52	; 0x34
 8013cde:	330e      	adds	r3, #14
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe fbab 	bl	801243c <ld_word>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013cea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <find_volume+0x2a0>
 8013cf0:	230d      	movs	r3, #13
 8013cf2:	e0f9      	b.n	8013ee8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013cf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cf8:	4413      	add	r3, r2
 8013cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cfc:	8912      	ldrh	r2, [r2, #8]
 8013cfe:	0912      	lsrs	r2, r2, #4
 8013d00:	b292      	uxth	r2, r2
 8013d02:	4413      	add	r3, r2
 8013d04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d201      	bcs.n	8013d12 <find_volume+0x2be>
 8013d0e:	230d      	movs	r3, #13
 8013d10:	e0ea      	b.n	8013ee8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d1a:	8952      	ldrh	r2, [r2, #10]
 8013d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d20:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d103      	bne.n	8013d30 <find_volume+0x2dc>
 8013d28:	230d      	movs	r3, #13
 8013d2a:	e0dd      	b.n	8013ee8 <find_volume+0x494>
 8013d2c:	20000844 	.word	0x20000844
		fmt = FS_FAT32;
 8013d30:	2303      	movs	r3, #3
 8013d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d802      	bhi.n	8013d46 <find_volume+0x2f2>
 8013d40:	2302      	movs	r3, #2
 8013d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d48:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d802      	bhi.n	8013d56 <find_volume+0x302>
 8013d50:	2301      	movs	r3, #1
 8013d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d58:	1c9a      	adds	r2, r3, #2
 8013d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8013d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d62:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013d64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d68:	441a      	add	r2, r3
 8013d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8013d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d72:	441a      	add	r2, r3
 8013d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d76:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d7c:	2b03      	cmp	r3, #3
 8013d7e:	d11e      	bne.n	8013dbe <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d82:	3334      	adds	r3, #52	; 0x34
 8013d84:	332a      	adds	r3, #42	; 0x2a
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7fe fb58 	bl	801243c <ld_word>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <find_volume+0x342>
 8013d92:	230d      	movs	r3, #13
 8013d94:	e0a8      	b.n	8013ee8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d98:	891b      	ldrh	r3, [r3, #8]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <find_volume+0x34e>
 8013d9e:	230d      	movs	r3, #13
 8013da0:	e0a2      	b.n	8013ee8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da4:	3334      	adds	r3, #52	; 0x34
 8013da6:	332c      	adds	r3, #44	; 0x2c
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fe fb5f 	bl	801246c <ld_dword>
 8013dae:	4602      	mov	r2, r0
 8013db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db6:	699b      	ldr	r3, [r3, #24]
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	647b      	str	r3, [r7, #68]	; 0x44
 8013dbc:	e01f      	b.n	8013dfe <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc0:	891b      	ldrh	r3, [r3, #8]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d101      	bne.n	8013dca <find_volume+0x376>
 8013dc6:	230d      	movs	r3, #13
 8013dc8:	e08e      	b.n	8013ee8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dd0:	441a      	add	r2, r3
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dda:	2b02      	cmp	r3, #2
 8013ddc:	d103      	bne.n	8013de6 <find_volume+0x392>
 8013dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de0:	699b      	ldr	r3, [r3, #24]
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	e00a      	b.n	8013dfc <find_volume+0x3a8>
 8013de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de8:	699a      	ldr	r2, [r3, #24]
 8013dea:	4613      	mov	r3, r2
 8013dec:	005b      	lsls	r3, r3, #1
 8013dee:	4413      	add	r3, r2
 8013df0:	085a      	lsrs	r2, r3, #1
 8013df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df4:	699b      	ldr	r3, [r3, #24]
 8013df6:	f003 0301 	and.w	r3, r3, #1
 8013dfa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013dfc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e00:	69da      	ldr	r2, [r3, #28]
 8013e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013e08:	0a5b      	lsrs	r3, r3, #9
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d201      	bcs.n	8013e12 <find_volume+0x3be>
 8013e0e:	230d      	movs	r3, #13
 8013e10:	e06a      	b.n	8013ee8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e14:	f04f 32ff 	mov.w	r2, #4294967295
 8013e18:	615a      	str	r2, [r3, #20]
 8013e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1c:	695a      	ldr	r2, [r3, #20]
 8013e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e20:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e24:	2280      	movs	r2, #128	; 0x80
 8013e26:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e2c:	2b03      	cmp	r3, #3
 8013e2e:	d149      	bne.n	8013ec4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e32:	3334      	adds	r3, #52	; 0x34
 8013e34:	3330      	adds	r3, #48	; 0x30
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fe fb00 	bl	801243c <ld_word>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d140      	bne.n	8013ec4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e44:	3301      	adds	r3, #1
 8013e46:	4619      	mov	r1, r3
 8013e48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e4a:	f7fe fdd9 	bl	8012a00 <move_window>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d137      	bne.n	8013ec4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8013e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e56:	2200      	movs	r2, #0
 8013e58:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5c:	3334      	adds	r3, #52	; 0x34
 8013e5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe faea 	bl	801243c <ld_word>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d127      	bne.n	8013ec4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e76:	3334      	adds	r3, #52	; 0x34
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fe faf7 	bl	801246c <ld_dword>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	4a1b      	ldr	r2, [pc, #108]	; (8013ef0 <find_volume+0x49c>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d11e      	bne.n	8013ec4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e88:	3334      	adds	r3, #52	; 0x34
 8013e8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7fe faec 	bl	801246c <ld_dword>
 8013e94:	4603      	mov	r3, r0
 8013e96:	4a17      	ldr	r2, [pc, #92]	; (8013ef4 <find_volume+0x4a0>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d113      	bne.n	8013ec4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9e:	3334      	adds	r3, #52	; 0x34
 8013ea0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fe fae1 	bl	801246c <ld_dword>
 8013eaa:	4602      	mov	r2, r0
 8013eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eae:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb2:	3334      	adds	r3, #52	; 0x34
 8013eb4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe fad7 	bl	801246c <ld_dword>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013eca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013ecc:	4b0a      	ldr	r3, [pc, #40]	; (8013ef8 <find_volume+0x4a4>)
 8013ece:	881b      	ldrh	r3, [r3, #0]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	4b08      	ldr	r3, [pc, #32]	; (8013ef8 <find_volume+0x4a4>)
 8013ed6:	801a      	strh	r2, [r3, #0]
 8013ed8:	4b07      	ldr	r3, [pc, #28]	; (8013ef8 <find_volume+0x4a4>)
 8013eda:	881a      	ldrh	r2, [r3, #0]
 8013edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ede:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ee2:	f7fe fd25 	bl	8012930 <clear_lock>
#endif
	return FR_OK;
 8013ee6:	2300      	movs	r3, #0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3758      	adds	r7, #88	; 0x58
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	41615252 	.word	0x41615252
 8013ef4:	61417272 	.word	0x61417272
 8013ef8:	20000848 	.word	0x20000848

08013efc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013f06:	2309      	movs	r3, #9
 8013f08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d02e      	beq.n	8013f6e <validate+0x72>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d02a      	beq.n	8013f6e <validate+0x72>
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d025      	beq.n	8013f6e <validate+0x72>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	889a      	ldrh	r2, [r3, #4]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	88db      	ldrh	r3, [r3, #6]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d11e      	bne.n	8013f6e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fe fb81 	bl	801263c <lock_fs>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d014      	beq.n	8013f6a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	785b      	ldrb	r3, [r3, #1]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fe f9da 	bl	8012300 <disk_status>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	f003 0301 	and.w	r3, r3, #1
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d102      	bne.n	8013f5c <validate+0x60>
				res = FR_OK;
 8013f56:	2300      	movs	r3, #0
 8013f58:	73fb      	strb	r3, [r7, #15]
 8013f5a:	e008      	b.n	8013f6e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2100      	movs	r1, #0
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fe fb80 	bl	8012668 <unlock_fs>
 8013f68:	e001      	b.n	8013f6e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013f6a:	230f      	movs	r3, #15
 8013f6c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013f6e:	7bfb      	ldrb	r3, [r7, #15]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d102      	bne.n	8013f7a <validate+0x7e>
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	e000      	b.n	8013f7c <validate+0x80>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	683a      	ldr	r2, [r7, #0]
 8013f7e:	6013      	str	r3, [r2, #0]
	return res;
 8013f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
	...

08013f8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b088      	sub	sp, #32
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	4613      	mov	r3, r2
 8013f98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013f9e:	f107 0310 	add.w	r3, r7, #16
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff fcbb 	bl	801391e <get_ldnumber>
 8013fa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	da01      	bge.n	8013fb4 <f_mount+0x28>
 8013fb0:	230b      	movs	r3, #11
 8013fb2:	e048      	b.n	8014046 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013fb4:	4a26      	ldr	r2, [pc, #152]	; (8014050 <f_mount+0xc4>)
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00f      	beq.n	8013fe4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013fc4:	69b8      	ldr	r0, [r7, #24]
 8013fc6:	f7fe fcb3 	bl	8012930 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013fca:	69bb      	ldr	r3, [r7, #24]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f001 f812 	bl	8014ff8 <ff_del_syncobj>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d101      	bne.n	8013fde <f_mount+0x52>
 8013fda:	2302      	movs	r3, #2
 8013fdc:	e033      	b.n	8014046 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00f      	beq.n	801400a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	b2da      	uxtb	r2, r3
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	330c      	adds	r3, #12
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	f000 ffe1 	bl	8014fc2 <ff_cre_syncobj>
 8014000:	4603      	mov	r3, r0
 8014002:	2b00      	cmp	r3, #0
 8014004:	d101      	bne.n	801400a <f_mount+0x7e>
 8014006:	2302      	movs	r3, #2
 8014008:	e01d      	b.n	8014046 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	4910      	ldr	r1, [pc, #64]	; (8014050 <f_mount+0xc4>)
 801400e:	69fb      	ldr	r3, [r7, #28]
 8014010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d002      	beq.n	8014020 <f_mount+0x94>
 801401a:	79fb      	ldrb	r3, [r7, #7]
 801401c:	2b01      	cmp	r3, #1
 801401e:	d001      	beq.n	8014024 <f_mount+0x98>
 8014020:	2300      	movs	r3, #0
 8014022:	e010      	b.n	8014046 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014024:	f107 010c 	add.w	r1, r7, #12
 8014028:	f107 0308 	add.w	r3, r7, #8
 801402c:	2200      	movs	r2, #0
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff fd10 	bl	8013a54 <find_volume>
 8014034:	4603      	mov	r3, r0
 8014036:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	7dfa      	ldrb	r2, [r7, #23]
 801403c:	4611      	mov	r1, r2
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe fb12 	bl	8012668 <unlock_fs>
 8014044:	7dfb      	ldrb	r3, [r7, #23]
}
 8014046:	4618      	mov	r0, r3
 8014048:	3720      	adds	r7, #32
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	20000844 	.word	0x20000844

08014054 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b098      	sub	sp, #96	; 0x60
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	4613      	mov	r3, r2
 8014060:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d101      	bne.n	801406c <f_open+0x18>
 8014068:	2309      	movs	r3, #9
 801406a:	e1b4      	b.n	80143d6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801406c:	79fb      	ldrb	r3, [r7, #7]
 801406e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014072:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014074:	79fa      	ldrb	r2, [r7, #7]
 8014076:	f107 0110 	add.w	r1, r7, #16
 801407a:	f107 0308 	add.w	r3, r7, #8
 801407e:	4618      	mov	r0, r3
 8014080:	f7ff fce8 	bl	8013a54 <find_volume>
 8014084:	4603      	mov	r3, r0
 8014086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801408a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801408e:	2b00      	cmp	r3, #0
 8014090:	f040 8191 	bne.w	80143b6 <f_open+0x362>
		dj.obj.fs = fs;
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	f107 0314 	add.w	r3, r7, #20
 801409e:	4611      	mov	r1, r2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7ff fbcb 	bl	801383c <follow_path>
 80140a6:	4603      	mov	r3, r0
 80140a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80140ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d11a      	bne.n	80140ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80140b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80140b8:	b25b      	sxtb	r3, r3
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	da03      	bge.n	80140c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80140be:	2306      	movs	r3, #6
 80140c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80140c4:	e011      	b.n	80140ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80140c6:	79fb      	ldrb	r3, [r7, #7]
 80140c8:	f023 0301 	bic.w	r3, r3, #1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	bf14      	ite	ne
 80140d0:	2301      	movne	r3, #1
 80140d2:	2300      	moveq	r3, #0
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	461a      	mov	r2, r3
 80140d8:	f107 0314 	add.w	r3, r7, #20
 80140dc:	4611      	mov	r1, r2
 80140de:	4618      	mov	r0, r3
 80140e0:	f7fe fade 	bl	80126a0 <chk_lock>
 80140e4:	4603      	mov	r3, r0
 80140e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80140ea:	79fb      	ldrb	r3, [r7, #7]
 80140ec:	f003 031c 	and.w	r3, r3, #28
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d07f      	beq.n	80141f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80140f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d017      	beq.n	801412c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80140fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014100:	2b04      	cmp	r3, #4
 8014102:	d10e      	bne.n	8014122 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014104:	f7fe fb28 	bl	8012758 <enq_lock>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d006      	beq.n	801411c <f_open+0xc8>
 801410e:	f107 0314 	add.w	r3, r7, #20
 8014112:	4618      	mov	r0, r3
 8014114:	f7ff fa6c 	bl	80135f0 <dir_register>
 8014118:	4603      	mov	r3, r0
 801411a:	e000      	b.n	801411e <f_open+0xca>
 801411c:	2312      	movs	r3, #18
 801411e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014122:	79fb      	ldrb	r3, [r7, #7]
 8014124:	f043 0308 	orr.w	r3, r3, #8
 8014128:	71fb      	strb	r3, [r7, #7]
 801412a:	e010      	b.n	801414e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801412c:	7ebb      	ldrb	r3, [r7, #26]
 801412e:	f003 0311 	and.w	r3, r3, #17
 8014132:	2b00      	cmp	r3, #0
 8014134:	d003      	beq.n	801413e <f_open+0xea>
					res = FR_DENIED;
 8014136:	2307      	movs	r3, #7
 8014138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801413c:	e007      	b.n	801414e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801413e:	79fb      	ldrb	r3, [r7, #7]
 8014140:	f003 0304 	and.w	r3, r3, #4
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <f_open+0xfa>
 8014148:	2308      	movs	r3, #8
 801414a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801414e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014152:	2b00      	cmp	r3, #0
 8014154:	d168      	bne.n	8014228 <f_open+0x1d4>
 8014156:	79fb      	ldrb	r3, [r7, #7]
 8014158:	f003 0308 	and.w	r3, r3, #8
 801415c:	2b00      	cmp	r3, #0
 801415e:	d063      	beq.n	8014228 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014160:	f7fb ff2e 	bl	800ffc0 <get_fattime>
 8014164:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014168:	330e      	adds	r3, #14
 801416a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801416c:	4618      	mov	r0, r3
 801416e:	f7fe f9bb 	bl	80124e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014174:	3316      	adds	r3, #22
 8014176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe f9b5 	bl	80124e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014180:	330b      	adds	r3, #11
 8014182:	2220      	movs	r2, #32
 8014184:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801418a:	4611      	mov	r1, r2
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff f93e 	bl	801340e <ld_clust>
 8014192:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014198:	2200      	movs	r2, #0
 801419a:	4618      	mov	r0, r3
 801419c:	f7ff f956 	bl	801344c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80141a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a2:	331c      	adds	r3, #28
 80141a4:	2100      	movs	r1, #0
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fe f99e 	bl	80124e8 <st_dword>
					fs->wflag = 1;
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	2201      	movs	r2, #1
 80141b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80141b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d037      	beq.n	8014228 <f_open+0x1d4>
						dw = fs->winsect;
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80141be:	f107 0314 	add.w	r3, r7, #20
 80141c2:	2200      	movs	r2, #0
 80141c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fe fe69 	bl	8012e9e <remove_chain>
 80141cc:	4603      	mov	r3, r0
 80141ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80141d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d126      	bne.n	8014228 <f_open+0x1d4>
							res = move_window(fs, dw);
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80141de:	4618      	mov	r0, r3
 80141e0:	f7fe fc0e 	bl	8012a00 <move_window>
 80141e4:	4603      	mov	r3, r0
 80141e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80141ee:	3a01      	subs	r2, #1
 80141f0:	611a      	str	r2, [r3, #16]
 80141f2:	e019      	b.n	8014228 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80141f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d115      	bne.n	8014228 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80141fc:	7ebb      	ldrb	r3, [r7, #26]
 80141fe:	f003 0310 	and.w	r3, r3, #16
 8014202:	2b00      	cmp	r3, #0
 8014204:	d003      	beq.n	801420e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014206:	2304      	movs	r3, #4
 8014208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801420c:	e00c      	b.n	8014228 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801420e:	79fb      	ldrb	r3, [r7, #7]
 8014210:	f003 0302 	and.w	r3, r3, #2
 8014214:	2b00      	cmp	r3, #0
 8014216:	d007      	beq.n	8014228 <f_open+0x1d4>
 8014218:	7ebb      	ldrb	r3, [r7, #26]
 801421a:	f003 0301 	and.w	r3, r3, #1
 801421e:	2b00      	cmp	r3, #0
 8014220:	d002      	beq.n	8014228 <f_open+0x1d4>
						res = FR_DENIED;
 8014222:	2307      	movs	r3, #7
 8014224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801422c:	2b00      	cmp	r3, #0
 801422e:	d128      	bne.n	8014282 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014230:	79fb      	ldrb	r3, [r7, #7]
 8014232:	f003 0308 	and.w	r3, r3, #8
 8014236:	2b00      	cmp	r3, #0
 8014238:	d003      	beq.n	8014242 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801423a:	79fb      	ldrb	r3, [r7, #7]
 801423c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014240:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801424a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014250:	79fb      	ldrb	r3, [r7, #7]
 8014252:	f023 0301 	bic.w	r3, r3, #1
 8014256:	2b00      	cmp	r3, #0
 8014258:	bf14      	ite	ne
 801425a:	2301      	movne	r3, #1
 801425c:	2300      	moveq	r3, #0
 801425e:	b2db      	uxtb	r3, r3
 8014260:	461a      	mov	r2, r3
 8014262:	f107 0314 	add.w	r3, r7, #20
 8014266:	4611      	mov	r1, r2
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe fa97 	bl	801279c <inc_lock>
 801426e:	4602      	mov	r2, r0
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	691b      	ldr	r3, [r3, #16]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d102      	bne.n	8014282 <f_open+0x22e>
 801427c:	2302      	movs	r3, #2
 801427e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014286:	2b00      	cmp	r3, #0
 8014288:	f040 8095 	bne.w	80143b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014290:	4611      	mov	r1, r2
 8014292:	4618      	mov	r0, r3
 8014294:	f7ff f8bb 	bl	801340e <ld_clust>
 8014298:	4602      	mov	r2, r0
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a0:	331c      	adds	r3, #28
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe f8e2 	bl	801246c <ld_dword>
 80142a8:	4602      	mov	r2, r0
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	2200      	movs	r2, #0
 80142b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80142b4:	693a      	ldr	r2, [r7, #16]
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	88da      	ldrh	r2, [r3, #6]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	79fa      	ldrb	r2, [r7, #7]
 80142c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2200      	movs	r2, #0
 80142cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2200      	movs	r2, #0
 80142d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2200      	movs	r2, #0
 80142d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	3330      	adds	r3, #48	; 0x30
 80142de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142e2:	2100      	movs	r1, #0
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fe f94c 	bl	8012582 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80142ea:	79fb      	ldrb	r3, [r7, #7]
 80142ec:	f003 0320 	and.w	r3, r3, #32
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d060      	beq.n	80143b6 <f_open+0x362>
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d05c      	beq.n	80143b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68da      	ldr	r2, [r3, #12]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	895b      	ldrh	r3, [r3, #10]
 8014308:	025b      	lsls	r3, r3, #9
 801430a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	657b      	str	r3, [r7, #84]	; 0x54
 8014318:	e016      	b.n	8014348 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801431e:	4618      	mov	r0, r3
 8014320:	f7fe fc29 	bl	8012b76 <get_fat>
 8014324:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014328:	2b01      	cmp	r3, #1
 801432a:	d802      	bhi.n	8014332 <f_open+0x2de>
 801432c:	2302      	movs	r3, #2
 801432e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014338:	d102      	bne.n	8014340 <f_open+0x2ec>
 801433a:	2301      	movs	r3, #1
 801433c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014344:	1ad3      	subs	r3, r2, r3
 8014346:	657b      	str	r3, [r7, #84]	; 0x54
 8014348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801434c:	2b00      	cmp	r3, #0
 801434e:	d103      	bne.n	8014358 <f_open+0x304>
 8014350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014354:	429a      	cmp	r2, r3
 8014356:	d8e0      	bhi.n	801431a <f_open+0x2c6>
				}
				fp->clust = clst;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801435c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801435e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014362:	2b00      	cmp	r3, #0
 8014364:	d127      	bne.n	80143b6 <f_open+0x362>
 8014366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801436c:	2b00      	cmp	r3, #0
 801436e:	d022      	beq.n	80143b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014374:	4618      	mov	r0, r3
 8014376:	f7fe fbdf 	bl	8012b38 <clust2sect>
 801437a:	6478      	str	r0, [r7, #68]	; 0x44
 801437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801437e:	2b00      	cmp	r3, #0
 8014380:	d103      	bne.n	801438a <f_open+0x336>
						res = FR_INT_ERR;
 8014382:	2302      	movs	r3, #2
 8014384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014388:	e015      	b.n	80143b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801438c:	0a5a      	lsrs	r2, r3, #9
 801438e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014390:	441a      	add	r2, r3
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	7858      	ldrb	r0, [r3, #1]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6a1a      	ldr	r2, [r3, #32]
 80143a4:	2301      	movs	r3, #1
 80143a6:	f7fd ffeb 	bl	8012380 <disk_read>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d002      	beq.n	80143b6 <f_open+0x362>
 80143b0:	2301      	movs	r3, #1
 80143b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80143b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d002      	beq.n	80143c4 <f_open+0x370>
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2200      	movs	r2, #0
 80143c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80143ca:	4611      	mov	r1, r2
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe f94b 	bl	8012668 <unlock_fs>
 80143d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3760      	adds	r7, #96	; 0x60
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}

080143de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b08c      	sub	sp, #48	; 0x30
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	60f8      	str	r0, [r7, #12]
 80143e6:	60b9      	str	r1, [r7, #8]
 80143e8:	607a      	str	r2, [r7, #4]
 80143ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2200      	movs	r2, #0
 80143f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f107 0210 	add.w	r2, r7, #16
 80143fc:	4611      	mov	r1, r2
 80143fe:	4618      	mov	r0, r3
 8014400:	f7ff fd7c 	bl	8013efc <validate>
 8014404:	4603      	mov	r3, r0
 8014406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801440a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801440e:	2b00      	cmp	r3, #0
 8014410:	d107      	bne.n	8014422 <f_write+0x44>
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	7d5b      	ldrb	r3, [r3, #21]
 8014416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801441a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801441e:	2b00      	cmp	r3, #0
 8014420:	d009      	beq.n	8014436 <f_write+0x58>
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014428:	4611      	mov	r1, r2
 801442a:	4618      	mov	r0, r3
 801442c:	f7fe f91c 	bl	8012668 <unlock_fs>
 8014430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014434:	e173      	b.n	801471e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	7d1b      	ldrb	r3, [r3, #20]
 801443a:	f003 0302 	and.w	r3, r3, #2
 801443e:	2b00      	cmp	r3, #0
 8014440:	d106      	bne.n	8014450 <f_write+0x72>
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	2107      	movs	r1, #7
 8014446:	4618      	mov	r0, r3
 8014448:	f7fe f90e 	bl	8012668 <unlock_fs>
 801444c:	2307      	movs	r3, #7
 801444e:	e166      	b.n	801471e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	699a      	ldr	r2, [r3, #24]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	441a      	add	r2, r3
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	699b      	ldr	r3, [r3, #24]
 801445c:	429a      	cmp	r2, r3
 801445e:	f080 814b 	bcs.w	80146f8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	699b      	ldr	r3, [r3, #24]
 8014466:	43db      	mvns	r3, r3
 8014468:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801446a:	e145      	b.n	80146f8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	699b      	ldr	r3, [r3, #24]
 8014470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014474:	2b00      	cmp	r3, #0
 8014476:	f040 8101 	bne.w	801467c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	699b      	ldr	r3, [r3, #24]
 801447e:	0a5b      	lsrs	r3, r3, #9
 8014480:	693a      	ldr	r2, [r7, #16]
 8014482:	8952      	ldrh	r2, [r2, #10]
 8014484:	3a01      	subs	r2, #1
 8014486:	4013      	ands	r3, r2
 8014488:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d14d      	bne.n	801452c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	699b      	ldr	r3, [r3, #24]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d10c      	bne.n	80144b2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	689b      	ldr	r3, [r3, #8]
 801449c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11a      	bne.n	80144da <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2100      	movs	r1, #0
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe fd5d 	bl	8012f68 <create_chain>
 80144ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80144b0:	e013      	b.n	80144da <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d007      	beq.n	80144ca <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	4619      	mov	r1, r3
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f7fe fde9 	bl	8013098 <clmt_clust>
 80144c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80144c8:	e007      	b.n	80144da <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	69db      	ldr	r3, [r3, #28]
 80144d0:	4619      	mov	r1, r3
 80144d2:	4610      	mov	r0, r2
 80144d4:	f7fe fd48 	bl	8012f68 <create_chain>
 80144d8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80144da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f000 8110 	beq.w	8014702 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d109      	bne.n	80144fc <f_write+0x11e>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2202      	movs	r2, #2
 80144ec:	755a      	strb	r2, [r3, #21]
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	2102      	movs	r1, #2
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fe f8b8 	bl	8012668 <unlock_fs>
 80144f8:	2302      	movs	r3, #2
 80144fa:	e110      	b.n	801471e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014502:	d109      	bne.n	8014518 <f_write+0x13a>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2201      	movs	r2, #1
 8014508:	755a      	strb	r2, [r3, #21]
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	2101      	movs	r1, #1
 801450e:	4618      	mov	r0, r3
 8014510:	f7fe f8aa 	bl	8012668 <unlock_fs>
 8014514:	2301      	movs	r3, #1
 8014516:	e102      	b.n	801471e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801451c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d102      	bne.n	801452c <f_write+0x14e>
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801452a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	7d1b      	ldrb	r3, [r3, #20]
 8014530:	b25b      	sxtb	r3, r3
 8014532:	2b00      	cmp	r3, #0
 8014534:	da1d      	bge.n	8014572 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	7858      	ldrb	r0, [r3, #1]
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	6a1a      	ldr	r2, [r3, #32]
 8014544:	2301      	movs	r3, #1
 8014546:	f7fd ff3b 	bl	80123c0 <disk_write>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d009      	beq.n	8014564 <f_write+0x186>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2201      	movs	r2, #1
 8014554:	755a      	strb	r2, [r3, #21]
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	2101      	movs	r1, #1
 801455a:	4618      	mov	r0, r3
 801455c:	f7fe f884 	bl	8012668 <unlock_fs>
 8014560:	2301      	movs	r3, #1
 8014562:	e0dc      	b.n	801471e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	7d1b      	ldrb	r3, [r3, #20]
 8014568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801456c:	b2da      	uxtb	r2, r3
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014572:	693a      	ldr	r2, [r7, #16]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	69db      	ldr	r3, [r3, #28]
 8014578:	4619      	mov	r1, r3
 801457a:	4610      	mov	r0, r2
 801457c:	f7fe fadc 	bl	8012b38 <clust2sect>
 8014580:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d109      	bne.n	801459c <f_write+0x1be>
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2202      	movs	r2, #2
 801458c:	755a      	strb	r2, [r3, #21]
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	2102      	movs	r1, #2
 8014592:	4618      	mov	r0, r3
 8014594:	f7fe f868 	bl	8012668 <unlock_fs>
 8014598:	2302      	movs	r3, #2
 801459a:	e0c0      	b.n	801471e <f_write+0x340>
			sect += csect;
 801459c:	697a      	ldr	r2, [r7, #20]
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	4413      	add	r3, r2
 80145a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	0a5b      	lsrs	r3, r3, #9
 80145a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80145aa:	6a3b      	ldr	r3, [r7, #32]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d041      	beq.n	8014634 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80145b0:	69ba      	ldr	r2, [r7, #24]
 80145b2:	6a3b      	ldr	r3, [r7, #32]
 80145b4:	4413      	add	r3, r2
 80145b6:	693a      	ldr	r2, [r7, #16]
 80145b8:	8952      	ldrh	r2, [r2, #10]
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d905      	bls.n	80145ca <f_write+0x1ec>
					cc = fs->csize - csect;
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	895b      	ldrh	r3, [r3, #10]
 80145c2:	461a      	mov	r2, r3
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	1ad3      	subs	r3, r2, r3
 80145c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	7858      	ldrb	r0, [r3, #1]
 80145ce:	6a3b      	ldr	r3, [r7, #32]
 80145d0:	697a      	ldr	r2, [r7, #20]
 80145d2:	69f9      	ldr	r1, [r7, #28]
 80145d4:	f7fd fef4 	bl	80123c0 <disk_write>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d009      	beq.n	80145f2 <f_write+0x214>
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2201      	movs	r2, #1
 80145e2:	755a      	strb	r2, [r3, #21]
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	2101      	movs	r1, #1
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fe f83d 	bl	8012668 <unlock_fs>
 80145ee:	2301      	movs	r3, #1
 80145f0:	e095      	b.n	801471e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	6a1a      	ldr	r2, [r3, #32]
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	6a3a      	ldr	r2, [r7, #32]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d915      	bls.n	801462c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	6a1a      	ldr	r2, [r3, #32]
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	025b      	lsls	r3, r3, #9
 8014610:	69fa      	ldr	r2, [r7, #28]
 8014612:	4413      	add	r3, r2
 8014614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014618:	4619      	mov	r1, r3
 801461a:	f7fd ff91 	bl	8012540 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	7d1b      	ldrb	r3, [r3, #20]
 8014622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014626:	b2da      	uxtb	r2, r3
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801462c:	6a3b      	ldr	r3, [r7, #32]
 801462e:	025b      	lsls	r3, r3, #9
 8014630:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014632:	e044      	b.n	80146be <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	6a1b      	ldr	r3, [r3, #32]
 8014638:	697a      	ldr	r2, [r7, #20]
 801463a:	429a      	cmp	r2, r3
 801463c:	d01b      	beq.n	8014676 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	699a      	ldr	r2, [r3, #24]
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014646:	429a      	cmp	r2, r3
 8014648:	d215      	bcs.n	8014676 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	7858      	ldrb	r0, [r3, #1]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014654:	2301      	movs	r3, #1
 8014656:	697a      	ldr	r2, [r7, #20]
 8014658:	f7fd fe92 	bl	8012380 <disk_read>
 801465c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801465e:	2b00      	cmp	r3, #0
 8014660:	d009      	beq.n	8014676 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2201      	movs	r2, #1
 8014666:	755a      	strb	r2, [r3, #21]
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	2101      	movs	r1, #1
 801466c:	4618      	mov	r0, r3
 801466e:	f7fd fffb 	bl	8012668 <unlock_fs>
 8014672:	2301      	movs	r3, #1
 8014674:	e053      	b.n	801471e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	697a      	ldr	r2, [r7, #20]
 801467a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014684:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014688:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	429a      	cmp	r2, r3
 8014690:	d901      	bls.n	8014696 <f_write+0x2b8>
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	699b      	ldr	r3, [r3, #24]
 80146a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146a4:	4413      	add	r3, r2
 80146a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146a8:	69f9      	ldr	r1, [r7, #28]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fd ff48 	bl	8012540 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	7d1b      	ldrb	r3, [r3, #20]
 80146b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146b8:	b2da      	uxtb	r2, r3
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80146be:	69fa      	ldr	r2, [r7, #28]
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	4413      	add	r3, r2
 80146c4:	61fb      	str	r3, [r7, #28]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	699a      	ldr	r2, [r3, #24]
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	441a      	add	r2, r3
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	619a      	str	r2, [r3, #24]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	68da      	ldr	r2, [r3, #12]
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	699b      	ldr	r3, [r3, #24]
 80146da:	429a      	cmp	r2, r3
 80146dc:	bf38      	it	cc
 80146de:	461a      	movcc	r2, r3
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	60da      	str	r2, [r3, #12]
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	681a      	ldr	r2, [r3, #0]
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	441a      	add	r2, r3
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	687a      	ldr	r2, [r7, #4]
 80146f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f4:	1ad3      	subs	r3, r2, r3
 80146f6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	f47f aeb6 	bne.w	801446c <f_write+0x8e>
 8014700:	e000      	b.n	8014704 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014702:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	7d1b      	ldrb	r3, [r3, #20]
 8014708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801470c:	b2da      	uxtb	r2, r3
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	2100      	movs	r1, #0
 8014716:	4618      	mov	r0, r3
 8014718:	f7fd ffa6 	bl	8012668 <unlock_fs>
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3730      	adds	r7, #48	; 0x30
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}

08014726 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014726:	b580      	push	{r7, lr}
 8014728:	b086      	sub	sp, #24
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f107 0208 	add.w	r2, r7, #8
 8014734:	4611      	mov	r1, r2
 8014736:	4618      	mov	r0, r3
 8014738:	f7ff fbe0 	bl	8013efc <validate>
 801473c:	4603      	mov	r3, r0
 801473e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014740:	7dfb      	ldrb	r3, [r7, #23]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d16d      	bne.n	8014822 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	7d1b      	ldrb	r3, [r3, #20]
 801474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801474e:	2b00      	cmp	r3, #0
 8014750:	d067      	beq.n	8014822 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	7d1b      	ldrb	r3, [r3, #20]
 8014756:	b25b      	sxtb	r3, r3
 8014758:	2b00      	cmp	r3, #0
 801475a:	da1a      	bge.n	8014792 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	7858      	ldrb	r0, [r3, #1]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6a1a      	ldr	r2, [r3, #32]
 801476a:	2301      	movs	r3, #1
 801476c:	f7fd fe28 	bl	80123c0 <disk_write>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d006      	beq.n	8014784 <f_sync+0x5e>
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2101      	movs	r1, #1
 801477a:	4618      	mov	r0, r3
 801477c:	f7fd ff74 	bl	8012668 <unlock_fs>
 8014780:	2301      	movs	r3, #1
 8014782:	e055      	b.n	8014830 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	7d1b      	ldrb	r3, [r3, #20]
 8014788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801478c:	b2da      	uxtb	r2, r3
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014792:	f7fb fc15 	bl	800ffc0 <get_fattime>
 8014796:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014798:	68ba      	ldr	r2, [r7, #8]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801479e:	4619      	mov	r1, r3
 80147a0:	4610      	mov	r0, r2
 80147a2:	f7fe f92d 	bl	8012a00 <move_window>
 80147a6:	4603      	mov	r3, r0
 80147a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80147aa:	7dfb      	ldrb	r3, [r7, #23]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d138      	bne.n	8014822 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	330b      	adds	r3, #11
 80147ba:	781a      	ldrb	r2, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	330b      	adds	r3, #11
 80147c0:	f042 0220 	orr.w	r2, r2, #32
 80147c4:	b2d2      	uxtb	r2, r2
 80147c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6818      	ldr	r0, [r3, #0]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	461a      	mov	r2, r3
 80147d2:	68f9      	ldr	r1, [r7, #12]
 80147d4:	f7fe fe3a 	bl	801344c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	f103 021c 	add.w	r2, r3, #28
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	4619      	mov	r1, r3
 80147e4:	4610      	mov	r0, r2
 80147e6:	f7fd fe7f 	bl	80124e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	3316      	adds	r3, #22
 80147ee:	6939      	ldr	r1, [r7, #16]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7fd fe79 	bl	80124e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	3312      	adds	r3, #18
 80147fa:	2100      	movs	r1, #0
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fd fe58 	bl	80124b2 <st_word>
					fs->wflag = 1;
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	2201      	movs	r2, #1
 8014806:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe f926 	bl	8012a5c <sync_fs>
 8014810:	4603      	mov	r3, r0
 8014812:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	7d1b      	ldrb	r3, [r3, #20]
 8014818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801481c:	b2da      	uxtb	r2, r3
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	7dfa      	ldrb	r2, [r7, #23]
 8014826:	4611      	mov	r1, r2
 8014828:	4618      	mov	r0, r3
 801482a:	f7fd ff1d 	bl	8012668 <unlock_fs>
 801482e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3718      	adds	r7, #24
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f7ff ff70 	bl	8014726 <f_sync>
 8014846:	4603      	mov	r3, r0
 8014848:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801484a:	7bfb      	ldrb	r3, [r7, #15]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d11d      	bne.n	801488c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f107 0208 	add.w	r2, r7, #8
 8014856:	4611      	mov	r1, r2
 8014858:	4618      	mov	r0, r3
 801485a:	f7ff fb4f 	bl	8013efc <validate>
 801485e:	4603      	mov	r3, r0
 8014860:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014862:	7bfb      	ldrb	r3, [r7, #15]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d111      	bne.n	801488c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	691b      	ldr	r3, [r3, #16]
 801486c:	4618      	mov	r0, r3
 801486e:	f7fe f823 	bl	80128b8 <dec_lock>
 8014872:	4603      	mov	r3, r0
 8014874:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014876:	7bfb      	ldrb	r3, [r7, #15]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d102      	bne.n	8014882 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	2100      	movs	r1, #0
 8014886:	4618      	mov	r0, r3
 8014888:	f7fd feee 	bl	8012668 <unlock_fs>
#endif
		}
	}
	return res;
 801488c:	7bfb      	ldrb	r3, [r7, #15]
}
 801488e:	4618      	mov	r0, r3
 8014890:	3710      	adds	r7, #16
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}

08014896 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014896:	b580      	push	{r7, lr}
 8014898:	b090      	sub	sp, #64	; 0x40
 801489a:	af00      	add	r7, sp, #0
 801489c:	6078      	str	r0, [r7, #4]
 801489e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f107 0208 	add.w	r2, r7, #8
 80148a6:	4611      	mov	r1, r2
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff fb27 	bl	8013efc <validate>
 80148ae:	4603      	mov	r3, r0
 80148b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80148b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d103      	bne.n	80148c4 <f_lseek+0x2e>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	7d5b      	ldrb	r3, [r3, #21]
 80148c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80148c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d009      	beq.n	80148e0 <f_lseek+0x4a>
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80148d2:	4611      	mov	r1, r2
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fd fec7 	bl	8012668 <unlock_fs>
 80148da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80148de:	e229      	b.n	8014d34 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f000 80ea 	beq.w	8014abe <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148f0:	d164      	bne.n	80149bc <f_lseek+0x126>
			tbl = fp->cltbl;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80148f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fa:	1d1a      	adds	r2, r3, #4
 80148fc:	627a      	str	r2, [r7, #36]	; 0x24
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	617b      	str	r3, [r7, #20]
 8014902:	2302      	movs	r3, #2
 8014904:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	689b      	ldr	r3, [r3, #8]
 801490a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490e:	2b00      	cmp	r3, #0
 8014910:	d044      	beq.n	801499c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014914:	613b      	str	r3, [r7, #16]
 8014916:	2300      	movs	r3, #0
 8014918:	62fb      	str	r3, [r7, #44]	; 0x2c
 801491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491c:	3302      	adds	r3, #2
 801491e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014922:	60fb      	str	r3, [r7, #12]
 8014924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014926:	3301      	adds	r3, #1
 8014928:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801492e:	4618      	mov	r0, r3
 8014930:	f7fe f921 	bl	8012b76 <get_fat>
 8014934:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	2b01      	cmp	r3, #1
 801493a:	d809      	bhi.n	8014950 <f_lseek+0xba>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2202      	movs	r2, #2
 8014940:	755a      	strb	r2, [r3, #21]
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	2102      	movs	r1, #2
 8014946:	4618      	mov	r0, r3
 8014948:	f7fd fe8e 	bl	8012668 <unlock_fs>
 801494c:	2302      	movs	r3, #2
 801494e:	e1f1      	b.n	8014d34 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014956:	d109      	bne.n	801496c <f_lseek+0xd6>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2201      	movs	r2, #1
 801495c:	755a      	strb	r2, [r3, #21]
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2101      	movs	r1, #1
 8014962:	4618      	mov	r0, r3
 8014964:	f7fd fe80 	bl	8012668 <unlock_fs>
 8014968:	2301      	movs	r3, #1
 801496a:	e1e3      	b.n	8014d34 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3301      	adds	r3, #1
 8014970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014972:	429a      	cmp	r2, r3
 8014974:	d0d4      	beq.n	8014920 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	429a      	cmp	r2, r3
 801497c:	d809      	bhi.n	8014992 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	1d1a      	adds	r2, r3, #4
 8014982:	627a      	str	r2, [r7, #36]	; 0x24
 8014984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014986:	601a      	str	r2, [r3, #0]
 8014988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498a:	1d1a      	adds	r2, r3, #4
 801498c:	627a      	str	r2, [r7, #36]	; 0x24
 801498e:	693a      	ldr	r2, [r7, #16]
 8014990:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	699b      	ldr	r3, [r3, #24]
 8014996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014998:	429a      	cmp	r2, r3
 801499a:	d3ba      	bcc.n	8014912 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149a2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80149a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d803      	bhi.n	80149b4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	2200      	movs	r2, #0
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	e1b6      	b.n	8014d22 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80149b4:	2311      	movs	r3, #17
 80149b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80149ba:	e1b2      	b.n	8014d22 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	683a      	ldr	r2, [r7, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d902      	bls.n	80149cc <f_lseek+0x136>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	683a      	ldr	r2, [r7, #0]
 80149d0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	f000 81a4 	beq.w	8014d22 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	3b01      	subs	r3, #1
 80149de:	4619      	mov	r1, r3
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f7fe fb59 	bl	8013098 <clmt_clust>
 80149e6:	4602      	mov	r2, r0
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80149ec:	68ba      	ldr	r2, [r7, #8]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	69db      	ldr	r3, [r3, #28]
 80149f2:	4619      	mov	r1, r3
 80149f4:	4610      	mov	r0, r2
 80149f6:	f7fe f89f 	bl	8012b38 <clust2sect>
 80149fa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d109      	bne.n	8014a16 <f_lseek+0x180>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2202      	movs	r2, #2
 8014a06:	755a      	strb	r2, [r3, #21]
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	2102      	movs	r1, #2
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fd fe2b 	bl	8012668 <unlock_fs>
 8014a12:	2302      	movs	r3, #2
 8014a14:	e18e      	b.n	8014d34 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	0a5b      	lsrs	r3, r3, #9
 8014a1c:	68ba      	ldr	r2, [r7, #8]
 8014a1e:	8952      	ldrh	r2, [r2, #10]
 8014a20:	3a01      	subs	r2, #1
 8014a22:	4013      	ands	r3, r2
 8014a24:	69ba      	ldr	r2, [r7, #24]
 8014a26:	4413      	add	r3, r2
 8014a28:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	699b      	ldr	r3, [r3, #24]
 8014a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f000 8175 	beq.w	8014d22 <f_lseek+0x48c>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6a1b      	ldr	r3, [r3, #32]
 8014a3c:	69ba      	ldr	r2, [r7, #24]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	f000 816f 	beq.w	8014d22 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	7d1b      	ldrb	r3, [r3, #20]
 8014a48:	b25b      	sxtb	r3, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	da1d      	bge.n	8014a8a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	7858      	ldrb	r0, [r3, #1]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6a1a      	ldr	r2, [r3, #32]
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	f7fd fcaf 	bl	80123c0 <disk_write>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d009      	beq.n	8014a7c <f_lseek+0x1e6>
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	755a      	strb	r2, [r3, #21]
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2101      	movs	r1, #1
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fd fdf8 	bl	8012668 <unlock_fs>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e15b      	b.n	8014d34 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	7d1b      	ldrb	r3, [r3, #20]
 8014a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	7858      	ldrb	r0, [r3, #1]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a94:	2301      	movs	r3, #1
 8014a96:	69ba      	ldr	r2, [r7, #24]
 8014a98:	f7fd fc72 	bl	8012380 <disk_read>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d009      	beq.n	8014ab6 <f_lseek+0x220>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	755a      	strb	r2, [r3, #21]
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	2101      	movs	r1, #1
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7fd fddb 	bl	8012668 <unlock_fs>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	e13e      	b.n	8014d34 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	69ba      	ldr	r2, [r7, #24]
 8014aba:	621a      	str	r2, [r3, #32]
 8014abc:	e131      	b.n	8014d22 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	683a      	ldr	r2, [r7, #0]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d908      	bls.n	8014ada <f_lseek+0x244>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	7d1b      	ldrb	r3, [r3, #20]
 8014acc:	f003 0302 	and.w	r3, r3, #2
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	699b      	ldr	r3, [r3, #24]
 8014ade:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ae8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f000 80c0 	beq.w	8014c72 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	895b      	ldrh	r3, [r3, #10]
 8014af6:	025b      	lsls	r3, r3, #9
 8014af8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d01b      	beq.n	8014b38 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	1e5a      	subs	r2, r3, #1
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	1e59      	subs	r1, r3, #1
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d30f      	bcc.n	8014b38 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014b18:	6a3b      	ldr	r3, [r7, #32]
 8014b1a:	1e5a      	subs	r2, r3, #1
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	425b      	negs	r3, r3
 8014b20:	401a      	ands	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	699b      	ldr	r3, [r3, #24]
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	1ad3      	subs	r3, r2, r3
 8014b2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	69db      	ldr	r3, [r3, #28]
 8014b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b36:	e02c      	b.n	8014b92 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d123      	bne.n	8014b8c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2100      	movs	r1, #0
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7fe fa0d 	bl	8012f68 <create_chain>
 8014b4e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d109      	bne.n	8014b6a <f_lseek+0x2d4>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2202      	movs	r2, #2
 8014b5a:	755a      	strb	r2, [r3, #21]
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	2102      	movs	r1, #2
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fd fd81 	bl	8012668 <unlock_fs>
 8014b66:	2302      	movs	r3, #2
 8014b68:	e0e4      	b.n	8014d34 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b70:	d109      	bne.n	8014b86 <f_lseek+0x2f0>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2201      	movs	r2, #1
 8014b76:	755a      	strb	r2, [r3, #21]
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	2101      	movs	r1, #1
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fd fd73 	bl	8012668 <unlock_fs>
 8014b82:	2301      	movs	r3, #1
 8014b84:	e0d6      	b.n	8014d34 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b8a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b90:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d06c      	beq.n	8014c72 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014b98:	e044      	b.n	8014c24 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014b9a:	683a      	ldr	r2, [r7, #0]
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	603b      	str	r3, [r7, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	699a      	ldr	r2, [r3, #24]
 8014ba6:	69fb      	ldr	r3, [r7, #28]
 8014ba8:	441a      	add	r2, r3
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	7d1b      	ldrb	r3, [r3, #20]
 8014bb2:	f003 0302 	and.w	r3, r3, #2
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe f9d2 	bl	8012f68 <create_chain>
 8014bc4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d108      	bne.n	8014bde <f_lseek+0x348>
							ofs = 0; break;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	603b      	str	r3, [r7, #0]
 8014bd0:	e02c      	b.n	8014c2c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fd ffcd 	bl	8012b76 <get_fat>
 8014bdc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014be4:	d109      	bne.n	8014bfa <f_lseek+0x364>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2201      	movs	r2, #1
 8014bea:	755a      	strb	r2, [r3, #21]
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	2101      	movs	r1, #1
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fd fd39 	bl	8012668 <unlock_fs>
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	e09c      	b.n	8014d34 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfc:	2b01      	cmp	r3, #1
 8014bfe:	d904      	bls.n	8014c0a <f_lseek+0x374>
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	699b      	ldr	r3, [r3, #24]
 8014c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d309      	bcc.n	8014c1e <f_lseek+0x388>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2202      	movs	r2, #2
 8014c0e:	755a      	strb	r2, [r3, #21]
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	2102      	movs	r1, #2
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7fd fd27 	bl	8012668 <unlock_fs>
 8014c1a:	2302      	movs	r3, #2
 8014c1c:	e08a      	b.n	8014d34 <f_lseek+0x49e>
					fp->clust = clst;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c22:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014c24:	683a      	ldr	r2, [r7, #0]
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d8b6      	bhi.n	8014b9a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	699a      	ldr	r2, [r3, #24]
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	441a      	add	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d017      	beq.n	8014c72 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fd ff76 	bl	8012b38 <clust2sect>
 8014c4c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d109      	bne.n	8014c68 <f_lseek+0x3d2>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2202      	movs	r2, #2
 8014c58:	755a      	strb	r2, [r3, #21]
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	2102      	movs	r1, #2
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fd fd02 	bl	8012668 <unlock_fs>
 8014c64:	2302      	movs	r3, #2
 8014c66:	e065      	b.n	8014d34 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	0a5b      	lsrs	r3, r3, #9
 8014c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c6e:	4413      	add	r3, r2
 8014c70:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	699a      	ldr	r2, [r3, #24]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	68db      	ldr	r3, [r3, #12]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d90a      	bls.n	8014c94 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	699a      	ldr	r2, [r3, #24]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	7d1b      	ldrb	r3, [r3, #20]
 8014c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c8e:	b2da      	uxtb	r2, r3
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	699b      	ldr	r3, [r3, #24]
 8014c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d040      	beq.n	8014d22 <f_lseek+0x48c>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6a1b      	ldr	r3, [r3, #32]
 8014ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d03b      	beq.n	8014d22 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	7d1b      	ldrb	r3, [r3, #20]
 8014cae:	b25b      	sxtb	r3, r3
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	da1d      	bge.n	8014cf0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	7858      	ldrb	r0, [r3, #1]
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6a1a      	ldr	r2, [r3, #32]
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	f7fd fb7c 	bl	80123c0 <disk_write>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d009      	beq.n	8014ce2 <f_lseek+0x44c>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	755a      	strb	r2, [r3, #21]
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	2101      	movs	r1, #1
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7fd fcc5 	bl	8012668 <unlock_fs>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	e028      	b.n	8014d34 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	7d1b      	ldrb	r3, [r3, #20]
 8014ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cea:	b2da      	uxtb	r2, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	7858      	ldrb	r0, [r3, #1]
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cfe:	f7fd fb3f 	bl	8012380 <disk_read>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d009      	beq.n	8014d1c <f_lseek+0x486>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	755a      	strb	r2, [r3, #21]
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	2101      	movs	r1, #1
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fd fca8 	bl	8012668 <unlock_fs>
 8014d18:	2301      	movs	r3, #1
 8014d1a:	e00b      	b.n	8014d34 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d20:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014d28:	4611      	mov	r1, r2
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7fd fc9c 	bl	8012668 <unlock_fs>
 8014d30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3740      	adds	r7, #64	; 0x40
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b086      	sub	sp, #24
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d101      	bne.n	8014d50 <f_opendir+0x14>
 8014d4c:	2309      	movs	r3, #9
 8014d4e:	e06a      	b.n	8014e26 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014d54:	f107 010c 	add.w	r1, r7, #12
 8014d58:	463b      	mov	r3, r7
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fe fe79 	bl	8013a54 <find_volume>
 8014d62:	4603      	mov	r3, r0
 8014d64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014d66:	7dfb      	ldrb	r3, [r7, #23]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d14f      	bne.n	8014e0c <f_opendir+0xd0>
		obj->fs = fs;
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	4619      	mov	r1, r3
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f7fe fd60 	bl	801383c <follow_path>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014d80:	7dfb      	ldrb	r3, [r7, #23]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d13d      	bne.n	8014e02 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014d8c:	b25b      	sxtb	r3, r3
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	db12      	blt.n	8014db8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	799b      	ldrb	r3, [r3, #6]
 8014d96:	f003 0310 	and.w	r3, r3, #16
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d00a      	beq.n	8014db4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6a1b      	ldr	r3, [r3, #32]
 8014da4:	4619      	mov	r1, r3
 8014da6:	4610      	mov	r0, r2
 8014da8:	f7fe fb31 	bl	801340e <ld_clust>
 8014dac:	4602      	mov	r2, r0
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	609a      	str	r2, [r3, #8]
 8014db2:	e001      	b.n	8014db8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014db4:	2305      	movs	r3, #5
 8014db6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d121      	bne.n	8014e02 <f_opendir+0xc6>
				obj->id = fs->id;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	88da      	ldrh	r2, [r3, #6]
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014dc6:	2100      	movs	r1, #0
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f7fe f999 	bl	8013100 <dir_sdi>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014dd2:	7dfb      	ldrb	r3, [r7, #23]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d114      	bne.n	8014e02 <f_opendir+0xc6>
					if (obj->sclust) {
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d00d      	beq.n	8014dfc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014de0:	2100      	movs	r1, #0
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7fd fcda 	bl	801279c <inc_lock>
 8014de8:	4602      	mov	r2, r0
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	691b      	ldr	r3, [r3, #16]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d105      	bne.n	8014e02 <f_opendir+0xc6>
 8014df6:	2312      	movs	r3, #18
 8014df8:	75fb      	strb	r3, [r7, #23]
 8014dfa:	e002      	b.n	8014e02 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014e02:	7dfb      	ldrb	r3, [r7, #23]
 8014e04:	2b04      	cmp	r3, #4
 8014e06:	d101      	bne.n	8014e0c <f_opendir+0xd0>
 8014e08:	2305      	movs	r3, #5
 8014e0a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014e0c:	7dfb      	ldrb	r3, [r7, #23]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d002      	beq.n	8014e18 <f_opendir+0xdc>
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	2200      	movs	r2, #0
 8014e16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	7dfa      	ldrb	r2, [r7, #23]
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fd fc22 	bl	8012668 <unlock_fs>
 8014e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3718      	adds	r7, #24
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b084      	sub	sp, #16
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f107 0208 	add.w	r2, r7, #8
 8014e3c:	4611      	mov	r1, r2
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7ff f85c 	bl	8013efc <validate>
 8014e44:	4603      	mov	r3, r0
 8014e46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014e48:	7bfb      	ldrb	r3, [r7, #15]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d115      	bne.n	8014e7a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	691b      	ldr	r3, [r3, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d006      	beq.n	8014e64 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	691b      	ldr	r3, [r3, #16]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd fd2c 	bl	80128b8 <dec_lock>
 8014e60:	4603      	mov	r3, r0
 8014e62:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014e64:	7bfb      	ldrb	r3, [r7, #15]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d102      	bne.n	8014e70 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	2100      	movs	r1, #0
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fd fbf7 	bl	8012668 <unlock_fs>
#endif
	}
	return res;
 8014e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f107 0208 	add.w	r2, r7, #8
 8014e94:	4611      	mov	r1, r2
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7ff f830 	bl	8013efc <validate>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014ea0:	7bfb      	ldrb	r3, [r7, #15]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d126      	bne.n	8014ef4 <f_readdir+0x70>
		if (!fno) {
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d106      	bne.n	8014eba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014eac:	2100      	movs	r1, #0
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7fe f926 	bl	8013100 <dir_sdi>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	73fb      	strb	r3, [r7, #15]
 8014eb8:	e01c      	b.n	8014ef4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014eba:	2100      	movs	r1, #0
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7fe fae5 	bl	801348c <dir_read>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014ec6:	7bfb      	ldrb	r3, [r7, #15]
 8014ec8:	2b04      	cmp	r3, #4
 8014eca:	d101      	bne.n	8014ed0 <f_readdir+0x4c>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014ed0:	7bfb      	ldrb	r3, [r7, #15]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d10e      	bne.n	8014ef4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014ed6:	6839      	ldr	r1, [r7, #0]
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7fe fbbb 	bl	8013654 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014ede:	2100      	movs	r1, #0
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f7fe f988 	bl	80131f6 <dir_next>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014eea:	7bfb      	ldrb	r3, [r7, #15]
 8014eec:	2b04      	cmp	r3, #4
 8014eee:	d101      	bne.n	8014ef4 <f_readdir+0x70>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	7bfa      	ldrb	r2, [r7, #15]
 8014ef8:	4611      	mov	r1, r2
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7fd fbb4 	bl	8012668 <unlock_fs>
 8014f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
	...

08014f0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b087      	sub	sp, #28
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	4613      	mov	r3, r2
 8014f18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014f22:	4b1f      	ldr	r3, [pc, #124]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f24:	7a5b      	ldrb	r3, [r3, #9]
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d131      	bne.n	8014f90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014f2c:	4b1c      	ldr	r3, [pc, #112]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f2e:	7a5b      	ldrb	r3, [r3, #9]
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	461a      	mov	r2, r3
 8014f34:	4b1a      	ldr	r3, [pc, #104]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f36:	2100      	movs	r1, #0
 8014f38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014f3a:	4b19      	ldr	r3, [pc, #100]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f3c:	7a5b      	ldrb	r3, [r3, #9]
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	4a17      	ldr	r2, [pc, #92]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	4413      	add	r3, r2
 8014f46:	68fa      	ldr	r2, [r7, #12]
 8014f48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014f4a:	4b15      	ldr	r3, [pc, #84]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f4c:	7a5b      	ldrb	r3, [r3, #9]
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	461a      	mov	r2, r3
 8014f52:	4b13      	ldr	r3, [pc, #76]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f54:	4413      	add	r3, r2
 8014f56:	79fa      	ldrb	r2, [r7, #7]
 8014f58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014f5a:	4b11      	ldr	r3, [pc, #68]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f5c:	7a5b      	ldrb	r3, [r3, #9]
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	1c5a      	adds	r2, r3, #1
 8014f62:	b2d1      	uxtb	r1, r2
 8014f64:	4a0e      	ldr	r2, [pc, #56]	; (8014fa0 <FATFS_LinkDriverEx+0x94>)
 8014f66:	7251      	strb	r1, [r2, #9]
 8014f68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014f6a:	7dbb      	ldrb	r3, [r7, #22]
 8014f6c:	3330      	adds	r3, #48	; 0x30
 8014f6e:	b2da      	uxtb	r2, r3
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	3301      	adds	r3, #1
 8014f78:	223a      	movs	r2, #58	; 0x3a
 8014f7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	3302      	adds	r3, #2
 8014f80:	222f      	movs	r2, #47	; 0x2f
 8014f82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	3303      	adds	r3, #3
 8014f88:	2200      	movs	r2, #0
 8014f8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	371c      	adds	r7, #28
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	2000086c 	.word	0x2000086c

08014fa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b082      	sub	sp, #8
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014fae:	2200      	movs	r2, #0
 8014fb0:	6839      	ldr	r1, [r7, #0]
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff ffaa 	bl	8014f0c <FATFS_LinkDriverEx>
 8014fb8:	4603      	mov	r3, r0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	4603      	mov	r3, r0
 8014fca:	6039      	str	r1, [r7, #0]
 8014fcc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8014fce:	2200      	movs	r2, #0
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	2001      	movs	r0, #1
 8014fd4:	f000 f988 	bl	80152e8 <osSemaphoreNew>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	bf14      	ite	ne
 8014fe6:	2301      	movne	r3, #1
 8014fe8:	2300      	moveq	r3, #0
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	60fb      	str	r3, [r7, #12]

    return ret;
 8014fee:	68fb      	ldr	r3, [r7, #12]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f000 fa91 	bl	8015528 <osSemaphoreDelete>
#endif
    return 1;
 8015006:	2301      	movs	r3, #1
}
 8015008:	4618      	mov	r0, r3
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015018:	2300      	movs	r3, #0
 801501a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801501c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f000 f9eb 	bl	80153fc <osSemaphoreAcquire>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d101      	bne.n	8015030 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801502c:	2301      	movs	r3, #1
 801502e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015030:	68fb      	ldr	r3, [r7, #12]
}
 8015032:	4618      	mov	r0, r3
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}

0801503a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801503a:	b580      	push	{r7, lr}
 801503c:	b082      	sub	sp, #8
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 fa2c 	bl	80154a0 <osSemaphoreRelease>
#endif
}
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <__NVIC_SetPriority>:
{
 8015050:	b480      	push	{r7}
 8015052:	b083      	sub	sp, #12
 8015054:	af00      	add	r7, sp, #0
 8015056:	4603      	mov	r3, r0
 8015058:	6039      	str	r1, [r7, #0]
 801505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015060:	2b00      	cmp	r3, #0
 8015062:	db0a      	blt.n	801507a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	b2da      	uxtb	r2, r3
 8015068:	490c      	ldr	r1, [pc, #48]	; (801509c <__NVIC_SetPriority+0x4c>)
 801506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801506e:	0112      	lsls	r2, r2, #4
 8015070:	b2d2      	uxtb	r2, r2
 8015072:	440b      	add	r3, r1
 8015074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015078:	e00a      	b.n	8015090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	b2da      	uxtb	r2, r3
 801507e:	4908      	ldr	r1, [pc, #32]	; (80150a0 <__NVIC_SetPriority+0x50>)
 8015080:	79fb      	ldrb	r3, [r7, #7]
 8015082:	f003 030f 	and.w	r3, r3, #15
 8015086:	3b04      	subs	r3, #4
 8015088:	0112      	lsls	r2, r2, #4
 801508a:	b2d2      	uxtb	r2, r2
 801508c:	440b      	add	r3, r1
 801508e:	761a      	strb	r2, [r3, #24]
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr
 801509c:	e000e100 	.word	0xe000e100
 80150a0:	e000ed00 	.word	0xe000ed00

080150a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80150a4:	b580      	push	{r7, lr}
 80150a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80150a8:	4b05      	ldr	r3, [pc, #20]	; (80150c0 <SysTick_Handler+0x1c>)
 80150aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80150ac:	f002 fa20 	bl	80174f0 <xTaskGetSchedulerState>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b01      	cmp	r3, #1
 80150b4:	d001      	beq.n	80150ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80150b6:	f003 f907 	bl	80182c8 <xPortSysTickHandler>
  }
}
 80150ba:	bf00      	nop
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	e000e010 	.word	0xe000e010

080150c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80150c4:	b580      	push	{r7, lr}
 80150c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80150c8:	2100      	movs	r1, #0
 80150ca:	f06f 0004 	mvn.w	r0, #4
 80150ce:	f7ff ffbf 	bl	8015050 <__NVIC_SetPriority>
#endif
}
 80150d2:	bf00      	nop
 80150d4:	bd80      	pop	{r7, pc}
	...

080150d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80150d8:	b480      	push	{r7}
 80150da:	b083      	sub	sp, #12
 80150dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80150de:	f3ef 8305 	mrs	r3, IPSR
 80150e2:	603b      	str	r3, [r7, #0]
  return(result);
 80150e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d003      	beq.n	80150f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80150ea:	f06f 0305 	mvn.w	r3, #5
 80150ee:	607b      	str	r3, [r7, #4]
 80150f0:	e00c      	b.n	801510c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80150f2:	4b0a      	ldr	r3, [pc, #40]	; (801511c <osKernelInitialize+0x44>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d105      	bne.n	8015106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80150fa:	4b08      	ldr	r3, [pc, #32]	; (801511c <osKernelInitialize+0x44>)
 80150fc:	2201      	movs	r2, #1
 80150fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015100:	2300      	movs	r3, #0
 8015102:	607b      	str	r3, [r7, #4]
 8015104:	e002      	b.n	801510c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015106:	f04f 33ff 	mov.w	r3, #4294967295
 801510a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801510c:	687b      	ldr	r3, [r7, #4]
}
 801510e:	4618      	mov	r0, r3
 8015110:	370c      	adds	r7, #12
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
 801511a:	bf00      	nop
 801511c:	20000878 	.word	0x20000878

08015120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015126:	f3ef 8305 	mrs	r3, IPSR
 801512a:	603b      	str	r3, [r7, #0]
  return(result);
 801512c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801512e:	2b00      	cmp	r3, #0
 8015130:	d003      	beq.n	801513a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015132:	f06f 0305 	mvn.w	r3, #5
 8015136:	607b      	str	r3, [r7, #4]
 8015138:	e010      	b.n	801515c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801513a:	4b0b      	ldr	r3, [pc, #44]	; (8015168 <osKernelStart+0x48>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b01      	cmp	r3, #1
 8015140:	d109      	bne.n	8015156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015142:	f7ff ffbf 	bl	80150c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015146:	4b08      	ldr	r3, [pc, #32]	; (8015168 <osKernelStart+0x48>)
 8015148:	2202      	movs	r2, #2
 801514a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801514c:	f001 fd64 	bl	8016c18 <vTaskStartScheduler>
      stat = osOK;
 8015150:	2300      	movs	r3, #0
 8015152:	607b      	str	r3, [r7, #4]
 8015154:	e002      	b.n	801515c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015156:	f04f 33ff 	mov.w	r3, #4294967295
 801515a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801515c:	687b      	ldr	r3, [r7, #4]
}
 801515e:	4618      	mov	r0, r3
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	20000878 	.word	0x20000878

0801516c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801516c:	b580      	push	{r7, lr}
 801516e:	b08e      	sub	sp, #56	; 0x38
 8015170:	af04      	add	r7, sp, #16
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015178:	2300      	movs	r3, #0
 801517a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801517c:	f3ef 8305 	mrs	r3, IPSR
 8015180:	617b      	str	r3, [r7, #20]
  return(result);
 8015182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015184:	2b00      	cmp	r3, #0
 8015186:	d17e      	bne.n	8015286 <osThreadNew+0x11a>
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d07b      	beq.n	8015286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801518e:	2380      	movs	r3, #128	; 0x80
 8015190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015192:	2318      	movs	r3, #24
 8015194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015196:	2300      	movs	r3, #0
 8015198:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801519a:	f04f 33ff 	mov.w	r3, #4294967295
 801519e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d045      	beq.n	8015232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d002      	beq.n	80151b4 <osThreadNew+0x48>
        name = attr->name;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	699b      	ldr	r3, [r3, #24]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	699b      	ldr	r3, [r3, #24]
 80151c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d008      	beq.n	80151da <osThreadNew+0x6e>
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	2b38      	cmp	r3, #56	; 0x38
 80151cc:	d805      	bhi.n	80151da <osThreadNew+0x6e>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	f003 0301 	and.w	r3, r3, #1
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d001      	beq.n	80151de <osThreadNew+0x72>
        return (NULL);
 80151da:	2300      	movs	r3, #0
 80151dc:	e054      	b.n	8015288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	695b      	ldr	r3, [r3, #20]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	695b      	ldr	r3, [r3, #20]
 80151ea:	089b      	lsrs	r3, r3, #2
 80151ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	689b      	ldr	r3, [r3, #8]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d00e      	beq.n	8015214 <osThreadNew+0xa8>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	68db      	ldr	r3, [r3, #12]
 80151fa:	2bbb      	cmp	r3, #187	; 0xbb
 80151fc:	d90a      	bls.n	8015214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015202:	2b00      	cmp	r3, #0
 8015204:	d006      	beq.n	8015214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	695b      	ldr	r3, [r3, #20]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d002      	beq.n	8015214 <osThreadNew+0xa8>
        mem = 1;
 801520e:	2301      	movs	r3, #1
 8015210:	61bb      	str	r3, [r7, #24]
 8015212:	e010      	b.n	8015236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	689b      	ldr	r3, [r3, #8]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d10c      	bne.n	8015236 <osThreadNew+0xca>
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d108      	bne.n	8015236 <osThreadNew+0xca>
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	691b      	ldr	r3, [r3, #16]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d104      	bne.n	8015236 <osThreadNew+0xca>
          mem = 0;
 801522c:	2300      	movs	r3, #0
 801522e:	61bb      	str	r3, [r7, #24]
 8015230:	e001      	b.n	8015236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015232:	2300      	movs	r3, #0
 8015234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	2b01      	cmp	r3, #1
 801523a:	d110      	bne.n	801525e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015244:	9202      	str	r2, [sp, #8]
 8015246:	9301      	str	r3, [sp, #4]
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	9300      	str	r3, [sp, #0]
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	6a3a      	ldr	r2, [r7, #32]
 8015250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015252:	68f8      	ldr	r0, [r7, #12]
 8015254:	f001 fa82 	bl	801675c <xTaskCreateStatic>
 8015258:	4603      	mov	r3, r0
 801525a:	613b      	str	r3, [r7, #16]
 801525c:	e013      	b.n	8015286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d110      	bne.n	8015286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015264:	6a3b      	ldr	r3, [r7, #32]
 8015266:	b29a      	uxth	r2, r3
 8015268:	f107 0310 	add.w	r3, r7, #16
 801526c:	9301      	str	r3, [sp, #4]
 801526e:	69fb      	ldr	r3, [r7, #28]
 8015270:	9300      	str	r3, [sp, #0]
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	f001 facd 	bl	8016816 <xTaskCreate>
 801527c:	4603      	mov	r3, r0
 801527e:	2b01      	cmp	r3, #1
 8015280:	d001      	beq.n	8015286 <osThreadNew+0x11a>
            hTask = NULL;
 8015282:	2300      	movs	r3, #0
 8015284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015286:	693b      	ldr	r3, [r7, #16]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3728      	adds	r7, #40	; 0x28
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8015296:	f002 f91b 	bl	80174d0 <xTaskGetCurrentTaskHandle>
 801529a:	6078      	str	r0, [r7, #4]

  return (id);
 801529c:	687b      	ldr	r3, [r7, #4]
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80152a6:	b580      	push	{r7, lr}
 80152a8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80152aa:	2000      	movs	r0, #0
 80152ac:	f001 fc0e 	bl	8016acc <vTaskDelete>
#endif
  for (;;);
 80152b0:	e7fe      	b.n	80152b0 <osThreadExit+0xa>

080152b2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b084      	sub	sp, #16
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80152ba:	f3ef 8305 	mrs	r3, IPSR
 80152be:	60bb      	str	r3, [r7, #8]
  return(result);
 80152c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d003      	beq.n	80152ce <osDelay+0x1c>
    stat = osErrorISR;
 80152c6:	f06f 0305 	mvn.w	r3, #5
 80152ca:	60fb      	str	r3, [r7, #12]
 80152cc:	e007      	b.n	80152de <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80152ce:	2300      	movs	r3, #0
 80152d0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d002      	beq.n	80152de <osDelay+0x2c>
      vTaskDelay(ticks);
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f001 fc69 	bl	8016bb0 <vTaskDelay>
    }
  }

  return (stat);
 80152de:	68fb      	ldr	r3, [r7, #12]
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	3710      	adds	r7, #16
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b08a      	sub	sp, #40	; 0x28
 80152ec:	af02      	add	r7, sp, #8
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80152f4:	2300      	movs	r3, #0
 80152f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80152f8:	f3ef 8305 	mrs	r3, IPSR
 80152fc:	613b      	str	r3, [r7, #16]
  return(result);
 80152fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015300:	2b00      	cmp	r3, #0
 8015302:	d175      	bne.n	80153f0 <osSemaphoreNew+0x108>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d072      	beq.n	80153f0 <osSemaphoreNew+0x108>
 801530a:	68ba      	ldr	r2, [r7, #8]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	429a      	cmp	r2, r3
 8015310:	d86e      	bhi.n	80153f0 <osSemaphoreNew+0x108>
    mem = -1;
 8015312:	f04f 33ff 	mov.w	r3, #4294967295
 8015316:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d015      	beq.n	801534a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d006      	beq.n	8015334 <osSemaphoreNew+0x4c>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	2b4f      	cmp	r3, #79	; 0x4f
 801532c:	d902      	bls.n	8015334 <osSemaphoreNew+0x4c>
        mem = 1;
 801532e:	2301      	movs	r3, #1
 8015330:	61bb      	str	r3, [r7, #24]
 8015332:	e00c      	b.n	801534e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	689b      	ldr	r3, [r3, #8]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d108      	bne.n	801534e <osSemaphoreNew+0x66>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d104      	bne.n	801534e <osSemaphoreNew+0x66>
          mem = 0;
 8015344:	2300      	movs	r3, #0
 8015346:	61bb      	str	r3, [r7, #24]
 8015348:	e001      	b.n	801534e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015354:	d04c      	beq.n	80153f0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2b01      	cmp	r3, #1
 801535a:	d128      	bne.n	80153ae <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	2b01      	cmp	r3, #1
 8015360:	d10a      	bne.n	8015378 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	689b      	ldr	r3, [r3, #8]
 8015366:	2203      	movs	r2, #3
 8015368:	9200      	str	r2, [sp, #0]
 801536a:	2200      	movs	r2, #0
 801536c:	2100      	movs	r1, #0
 801536e:	2001      	movs	r0, #1
 8015370:	f000 fa4e 	bl	8015810 <xQueueGenericCreateStatic>
 8015374:	61f8      	str	r0, [r7, #28]
 8015376:	e005      	b.n	8015384 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015378:	2203      	movs	r2, #3
 801537a:	2100      	movs	r1, #0
 801537c:	2001      	movs	r0, #1
 801537e:	f000 fabf 	bl	8015900 <xQueueGenericCreate>
 8015382:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d022      	beq.n	80153d0 <osSemaphoreNew+0xe8>
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d01f      	beq.n	80153d0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015390:	2300      	movs	r3, #0
 8015392:	2200      	movs	r2, #0
 8015394:	2100      	movs	r1, #0
 8015396:	69f8      	ldr	r0, [r7, #28]
 8015398:	f000 fb7a 	bl	8015a90 <xQueueGenericSend>
 801539c:	4603      	mov	r3, r0
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d016      	beq.n	80153d0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80153a2:	69f8      	ldr	r0, [r7, #28]
 80153a4:	f001 f806 	bl	80163b4 <vQueueDelete>
            hSemaphore = NULL;
 80153a8:	2300      	movs	r3, #0
 80153aa:	61fb      	str	r3, [r7, #28]
 80153ac:	e010      	b.n	80153d0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d108      	bne.n	80153c6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	689b      	ldr	r3, [r3, #8]
 80153b8:	461a      	mov	r2, r3
 80153ba:	68b9      	ldr	r1, [r7, #8]
 80153bc:	68f8      	ldr	r0, [r7, #12]
 80153be:	f000 fafc 	bl	80159ba <xQueueCreateCountingSemaphoreStatic>
 80153c2:	61f8      	str	r0, [r7, #28]
 80153c4:	e004      	b.n	80153d0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80153c6:	68b9      	ldr	r1, [r7, #8]
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 fb2d 	bl	8015a28 <xQueueCreateCountingSemaphore>
 80153ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00c      	beq.n	80153f0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d003      	beq.n	80153e4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	617b      	str	r3, [r7, #20]
 80153e2:	e001      	b.n	80153e8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80153e4:	2300      	movs	r3, #0
 80153e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80153e8:	6979      	ldr	r1, [r7, #20]
 80153ea:	69f8      	ldr	r0, [r7, #28]
 80153ec:	f001 f92e 	bl	801664c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80153f0:	69fb      	ldr	r3, [r7, #28]
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3720      	adds	r7, #32
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
	...

080153fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b086      	sub	sp, #24
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801540a:	2300      	movs	r3, #0
 801540c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d103      	bne.n	801541c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015414:	f06f 0303 	mvn.w	r3, #3
 8015418:	617b      	str	r3, [r7, #20]
 801541a:	e039      	b.n	8015490 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801541c:	f3ef 8305 	mrs	r3, IPSR
 8015420:	60fb      	str	r3, [r7, #12]
  return(result);
 8015422:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015424:	2b00      	cmp	r3, #0
 8015426:	d022      	beq.n	801546e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d003      	beq.n	8015436 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801542e:	f06f 0303 	mvn.w	r3, #3
 8015432:	617b      	str	r3, [r7, #20]
 8015434:	e02c      	b.n	8015490 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015436:	2300      	movs	r3, #0
 8015438:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801543a:	f107 0308 	add.w	r3, r7, #8
 801543e:	461a      	mov	r2, r3
 8015440:	2100      	movs	r1, #0
 8015442:	6938      	ldr	r0, [r7, #16]
 8015444:	f000 ff36 	bl	80162b4 <xQueueReceiveFromISR>
 8015448:	4603      	mov	r3, r0
 801544a:	2b01      	cmp	r3, #1
 801544c:	d003      	beq.n	8015456 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801544e:	f06f 0302 	mvn.w	r3, #2
 8015452:	617b      	str	r3, [r7, #20]
 8015454:	e01c      	b.n	8015490 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d019      	beq.n	8015490 <osSemaphoreAcquire+0x94>
 801545c:	4b0f      	ldr	r3, [pc, #60]	; (801549c <osSemaphoreAcquire+0xa0>)
 801545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015462:	601a      	str	r2, [r3, #0]
 8015464:	f3bf 8f4f 	dsb	sy
 8015468:	f3bf 8f6f 	isb	sy
 801546c:	e010      	b.n	8015490 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801546e:	6839      	ldr	r1, [r7, #0]
 8015470:	6938      	ldr	r0, [r7, #16]
 8015472:	f000 fe13 	bl	801609c <xQueueSemaphoreTake>
 8015476:	4603      	mov	r3, r0
 8015478:	2b01      	cmp	r3, #1
 801547a:	d009      	beq.n	8015490 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d003      	beq.n	801548a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015482:	f06f 0301 	mvn.w	r3, #1
 8015486:	617b      	str	r3, [r7, #20]
 8015488:	e002      	b.n	8015490 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801548a:	f06f 0302 	mvn.w	r3, #2
 801548e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015490:	697b      	ldr	r3, [r7, #20]
}
 8015492:	4618      	mov	r0, r3
 8015494:	3718      	adds	r7, #24
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	e000ed04 	.word	0xe000ed04

080154a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80154ac:	2300      	movs	r3, #0
 80154ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d103      	bne.n	80154be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80154b6:	f06f 0303 	mvn.w	r3, #3
 80154ba:	617b      	str	r3, [r7, #20]
 80154bc:	e02c      	b.n	8015518 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154be:	f3ef 8305 	mrs	r3, IPSR
 80154c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80154c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d01a      	beq.n	8015500 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80154ca:	2300      	movs	r3, #0
 80154cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80154ce:	f107 0308 	add.w	r3, r7, #8
 80154d2:	4619      	mov	r1, r3
 80154d4:	6938      	ldr	r0, [r7, #16]
 80154d6:	f000 fc74 	bl	8015dc2 <xQueueGiveFromISR>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d003      	beq.n	80154e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80154e0:	f06f 0302 	mvn.w	r3, #2
 80154e4:	617b      	str	r3, [r7, #20]
 80154e6:	e017      	b.n	8015518 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d014      	beq.n	8015518 <osSemaphoreRelease+0x78>
 80154ee:	4b0d      	ldr	r3, [pc, #52]	; (8015524 <osSemaphoreRelease+0x84>)
 80154f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f4:	601a      	str	r2, [r3, #0]
 80154f6:	f3bf 8f4f 	dsb	sy
 80154fa:	f3bf 8f6f 	isb	sy
 80154fe:	e00b      	b.n	8015518 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015500:	2300      	movs	r3, #0
 8015502:	2200      	movs	r2, #0
 8015504:	2100      	movs	r1, #0
 8015506:	6938      	ldr	r0, [r7, #16]
 8015508:	f000 fac2 	bl	8015a90 <xQueueGenericSend>
 801550c:	4603      	mov	r3, r0
 801550e:	2b01      	cmp	r3, #1
 8015510:	d002      	beq.n	8015518 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015512:	f06f 0302 	mvn.w	r3, #2
 8015516:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015518:	697b      	ldr	r3, [r7, #20]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3718      	adds	r7, #24
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}
 8015522:	bf00      	nop
 8015524:	e000ed04 	.word	0xe000ed04

08015528 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015528:	b580      	push	{r7, lr}
 801552a:	b086      	sub	sp, #24
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015534:	f3ef 8305 	mrs	r3, IPSR
 8015538:	60fb      	str	r3, [r7, #12]
  return(result);
 801553a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801553c:	2b00      	cmp	r3, #0
 801553e:	d003      	beq.n	8015548 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015540:	f06f 0305 	mvn.w	r3, #5
 8015544:	617b      	str	r3, [r7, #20]
 8015546:	e00e      	b.n	8015566 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d103      	bne.n	8015556 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801554e:	f06f 0303 	mvn.w	r3, #3
 8015552:	617b      	str	r3, [r7, #20]
 8015554:	e007      	b.n	8015566 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015556:	6938      	ldr	r0, [r7, #16]
 8015558:	f001 f8a2 	bl	80166a0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801555c:	2300      	movs	r3, #0
 801555e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8015560:	6938      	ldr	r0, [r7, #16]
 8015562:	f000 ff27 	bl	80163b4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015566:	697b      	ldr	r3, [r7, #20]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3718      	adds	r7, #24
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015570:	b480      	push	{r7}
 8015572:	b085      	sub	sp, #20
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	4a07      	ldr	r2, [pc, #28]	; (801559c <vApplicationGetIdleTaskMemory+0x2c>)
 8015580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	4a06      	ldr	r2, [pc, #24]	; (80155a0 <vApplicationGetIdleTaskMemory+0x30>)
 8015586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2280      	movs	r2, #128	; 0x80
 801558c:	601a      	str	r2, [r3, #0]
}
 801558e:	bf00      	nop
 8015590:	3714      	adds	r7, #20
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	2000087c 	.word	0x2000087c
 80155a0:	20000938 	.word	0x20000938

080155a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80155a4:	b480      	push	{r7}
 80155a6:	b085      	sub	sp, #20
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	4a07      	ldr	r2, [pc, #28]	; (80155d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80155b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	4a06      	ldr	r2, [pc, #24]	; (80155d4 <vApplicationGetTimerTaskMemory+0x30>)
 80155ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80155c2:	601a      	str	r2, [r3, #0]
}
 80155c4:	bf00      	nop
 80155c6:	3714      	adds	r7, #20
 80155c8:	46bd      	mov	sp, r7
 80155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ce:	4770      	bx	lr
 80155d0:	20000b38 	.word	0x20000b38
 80155d4:	20000bf4 	.word	0x20000bf4

080155d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f103 0208 	add.w	r2, r3, #8
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f04f 32ff 	mov.w	r2, #4294967295
 80155f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f103 0208 	add.w	r2, r3, #8
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f103 0208 	add.w	r2, r3, #8
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2200      	movs	r2, #0
 801560a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801560c:	bf00      	nop
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr

08015618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2200      	movs	r2, #0
 8015624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015626:	bf00      	nop
 8015628:	370c      	adds	r7, #12
 801562a:	46bd      	mov	sp, r7
 801562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015630:	4770      	bx	lr

08015632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015632:	b480      	push	{r7}
 8015634:	b085      	sub	sp, #20
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
 801563a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	68fa      	ldr	r2, [r7, #12]
 8015646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	689a      	ldr	r2, [r3, #8]
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	689b      	ldr	r3, [r3, #8]
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	1c5a      	adds	r2, r3, #1
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	601a      	str	r2, [r3, #0]
}
 801566e:	bf00      	nop
 8015670:	3714      	adds	r7, #20
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr

0801567a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801567a:	b480      	push	{r7}
 801567c:	b085      	sub	sp, #20
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
 8015682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015690:	d103      	bne.n	801569a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	691b      	ldr	r3, [r3, #16]
 8015696:	60fb      	str	r3, [r7, #12]
 8015698:	e00c      	b.n	80156b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	3308      	adds	r3, #8
 801569e:	60fb      	str	r3, [r7, #12]
 80156a0:	e002      	b.n	80156a8 <vListInsert+0x2e>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	60fb      	str	r3, [r7, #12]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	68ba      	ldr	r2, [r7, #8]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d2f6      	bcs.n	80156a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	685a      	ldr	r2, [r3, #4]
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	683a      	ldr	r2, [r7, #0]
 80156c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	601a      	str	r2, [r3, #0]
}
 80156e0:	bf00      	nop
 80156e2:	3714      	adds	r7, #20
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80156ec:	b480      	push	{r7}
 80156ee:	b085      	sub	sp, #20
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	691b      	ldr	r3, [r3, #16]
 80156f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	6892      	ldr	r2, [r2, #8]
 8015702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	689b      	ldr	r3, [r3, #8]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	6852      	ldr	r2, [r2, #4]
 801570c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	429a      	cmp	r2, r3
 8015716:	d103      	bne.n	8015720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	689a      	ldr	r2, [r3, #8]
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2200      	movs	r2, #0
 8015724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	1e5a      	subs	r2, r3, #1
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	681b      	ldr	r3, [r3, #0]
}
 8015734:	4618      	mov	r0, r3
 8015736:	3714      	adds	r7, #20
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b084      	sub	sp, #16
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d10a      	bne.n	801576a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015758:	f383 8811 	msr	BASEPRI, r3
 801575c:	f3bf 8f6f 	isb	sy
 8015760:	f3bf 8f4f 	dsb	sy
 8015764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015766:	bf00      	nop
 8015768:	e7fe      	b.n	8015768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801576a:	f002 fd1b 	bl	80181a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015776:	68f9      	ldr	r1, [r7, #12]
 8015778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801577a:	fb01 f303 	mul.w	r3, r1, r3
 801577e:	441a      	add	r2, r3
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2200      	movs	r2, #0
 8015788:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801579a:	3b01      	subs	r3, #1
 801579c:	68f9      	ldr	r1, [r7, #12]
 801579e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80157a0:	fb01 f303 	mul.w	r3, r1, r3
 80157a4:	441a      	add	r2, r3
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	22ff      	movs	r2, #255	; 0xff
 80157ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	22ff      	movs	r2, #255	; 0xff
 80157b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d114      	bne.n	80157ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	691b      	ldr	r3, [r3, #16]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d01a      	beq.n	80157fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	3310      	adds	r3, #16
 80157cc:	4618      	mov	r0, r3
 80157ce:	f001 fcbd 	bl	801714c <xTaskRemoveFromEventList>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d012      	beq.n	80157fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80157d8:	4b0c      	ldr	r3, [pc, #48]	; (801580c <xQueueGenericReset+0xcc>)
 80157da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157de:	601a      	str	r2, [r3, #0]
 80157e0:	f3bf 8f4f 	dsb	sy
 80157e4:	f3bf 8f6f 	isb	sy
 80157e8:	e009      	b.n	80157fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	3310      	adds	r3, #16
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7ff fef2 	bl	80155d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	3324      	adds	r3, #36	; 0x24
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff feed 	bl	80155d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80157fe:	f002 fd01 	bl	8018204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015802:	2301      	movs	r3, #1
}
 8015804:	4618      	mov	r0, r3
 8015806:	3710      	adds	r7, #16
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	e000ed04 	.word	0xe000ed04

08015810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015810:	b580      	push	{r7, lr}
 8015812:	b08e      	sub	sp, #56	; 0x38
 8015814:	af02      	add	r7, sp, #8
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
 801581c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d10a      	bne.n	801583a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015828:	f383 8811 	msr	BASEPRI, r3
 801582c:	f3bf 8f6f 	isb	sy
 8015830:	f3bf 8f4f 	dsb	sy
 8015834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015836:	bf00      	nop
 8015838:	e7fe      	b.n	8015838 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d10a      	bne.n	8015856 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015844:	f383 8811 	msr	BASEPRI, r3
 8015848:	f3bf 8f6f 	isb	sy
 801584c:	f3bf 8f4f 	dsb	sy
 8015850:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015852:	bf00      	nop
 8015854:	e7fe      	b.n	8015854 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d002      	beq.n	8015862 <xQueueGenericCreateStatic+0x52>
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d001      	beq.n	8015866 <xQueueGenericCreateStatic+0x56>
 8015862:	2301      	movs	r3, #1
 8015864:	e000      	b.n	8015868 <xQueueGenericCreateStatic+0x58>
 8015866:	2300      	movs	r3, #0
 8015868:	2b00      	cmp	r3, #0
 801586a:	d10a      	bne.n	8015882 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015870:	f383 8811 	msr	BASEPRI, r3
 8015874:	f3bf 8f6f 	isb	sy
 8015878:	f3bf 8f4f 	dsb	sy
 801587c:	623b      	str	r3, [r7, #32]
}
 801587e:	bf00      	nop
 8015880:	e7fe      	b.n	8015880 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d102      	bne.n	801588e <xQueueGenericCreateStatic+0x7e>
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d101      	bne.n	8015892 <xQueueGenericCreateStatic+0x82>
 801588e:	2301      	movs	r3, #1
 8015890:	e000      	b.n	8015894 <xQueueGenericCreateStatic+0x84>
 8015892:	2300      	movs	r3, #0
 8015894:	2b00      	cmp	r3, #0
 8015896:	d10a      	bne.n	80158ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801589c:	f383 8811 	msr	BASEPRI, r3
 80158a0:	f3bf 8f6f 	isb	sy
 80158a4:	f3bf 8f4f 	dsb	sy
 80158a8:	61fb      	str	r3, [r7, #28]
}
 80158aa:	bf00      	nop
 80158ac:	e7fe      	b.n	80158ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80158ae:	2350      	movs	r3, #80	; 0x50
 80158b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	2b50      	cmp	r3, #80	; 0x50
 80158b6:	d00a      	beq.n	80158ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80158b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158bc:	f383 8811 	msr	BASEPRI, r3
 80158c0:	f3bf 8f6f 	isb	sy
 80158c4:	f3bf 8f4f 	dsb	sy
 80158c8:	61bb      	str	r3, [r7, #24]
}
 80158ca:	bf00      	nop
 80158cc:	e7fe      	b.n	80158cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80158ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80158d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00d      	beq.n	80158f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80158da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158dc:	2201      	movs	r2, #1
 80158de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80158e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80158e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e8:	9300      	str	r3, [sp, #0]
 80158ea:	4613      	mov	r3, r2
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	68b9      	ldr	r1, [r7, #8]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f000 f83f 	bl	8015974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80158f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3730      	adds	r7, #48	; 0x30
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08a      	sub	sp, #40	; 0x28
 8015904:	af02      	add	r7, sp, #8
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	4613      	mov	r3, r2
 801590c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10a      	bne.n	801592a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	613b      	str	r3, [r7, #16]
}
 8015926:	bf00      	nop
 8015928:	e7fe      	b.n	8015928 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	68ba      	ldr	r2, [r7, #8]
 801592e:	fb02 f303 	mul.w	r3, r2, r3
 8015932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015934:	69fb      	ldr	r3, [r7, #28]
 8015936:	3350      	adds	r3, #80	; 0x50
 8015938:	4618      	mov	r0, r3
 801593a:	f002 fd55 	bl	80183e8 <pvPortMalloc>
 801593e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d011      	beq.n	801596a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	3350      	adds	r3, #80	; 0x50
 801594e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	2200      	movs	r2, #0
 8015954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015958:	79fa      	ldrb	r2, [r7, #7]
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	9300      	str	r3, [sp, #0]
 801595e:	4613      	mov	r3, r2
 8015960:	697a      	ldr	r2, [r7, #20]
 8015962:	68b9      	ldr	r1, [r7, #8]
 8015964:	68f8      	ldr	r0, [r7, #12]
 8015966:	f000 f805 	bl	8015974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801596a:	69bb      	ldr	r3, [r7, #24]
	}
 801596c:	4618      	mov	r0, r3
 801596e:	3720      	adds	r7, #32
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	60b9      	str	r1, [r7, #8]
 801597e:	607a      	str	r2, [r7, #4]
 8015980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d103      	bne.n	8015990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	69ba      	ldr	r2, [r7, #24]
 801598c:	601a      	str	r2, [r3, #0]
 801598e:	e002      	b.n	8015996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015996:	69bb      	ldr	r3, [r7, #24]
 8015998:	68fa      	ldr	r2, [r7, #12]
 801599a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	68ba      	ldr	r2, [r7, #8]
 80159a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80159a2:	2101      	movs	r1, #1
 80159a4:	69b8      	ldr	r0, [r7, #24]
 80159a6:	f7ff fecb 	bl	8015740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80159aa:	69bb      	ldr	r3, [r7, #24]
 80159ac:	78fa      	ldrb	r2, [r7, #3]
 80159ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80159b2:	bf00      	nop
 80159b4:	3710      	adds	r7, #16
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}

080159ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b08a      	sub	sp, #40	; 0x28
 80159be:	af02      	add	r7, sp, #8
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10a      	bne.n	80159e2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80159cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d0:	f383 8811 	msr	BASEPRI, r3
 80159d4:	f3bf 8f6f 	isb	sy
 80159d8:	f3bf 8f4f 	dsb	sy
 80159dc:	61bb      	str	r3, [r7, #24]
}
 80159de:	bf00      	nop
 80159e0:	e7fe      	b.n	80159e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d90a      	bls.n	8015a00 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80159ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ee:	f383 8811 	msr	BASEPRI, r3
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	f3bf 8f4f 	dsb	sy
 80159fa:	617b      	str	r3, [r7, #20]
}
 80159fc:	bf00      	nop
 80159fe:	e7fe      	b.n	80159fe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015a00:	2302      	movs	r3, #2
 8015a02:	9300      	str	r3, [sp, #0]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2200      	movs	r2, #0
 8015a08:	2100      	movs	r1, #0
 8015a0a:	68f8      	ldr	r0, [r7, #12]
 8015a0c:	f7ff ff00 	bl	8015810 <xQueueGenericCreateStatic>
 8015a10:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d002      	beq.n	8015a1e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	68ba      	ldr	r2, [r7, #8]
 8015a1c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015a1e:	69fb      	ldr	r3, [r7, #28]
	}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3720      	adds	r7, #32
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b086      	sub	sp, #24
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d10a      	bne.n	8015a4e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a3c:	f383 8811 	msr	BASEPRI, r3
 8015a40:	f3bf 8f6f 	isb	sy
 8015a44:	f3bf 8f4f 	dsb	sy
 8015a48:	613b      	str	r3, [r7, #16]
}
 8015a4a:	bf00      	nop
 8015a4c:	e7fe      	b.n	8015a4c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d90a      	bls.n	8015a6c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5a:	f383 8811 	msr	BASEPRI, r3
 8015a5e:	f3bf 8f6f 	isb	sy
 8015a62:	f3bf 8f4f 	dsb	sy
 8015a66:	60fb      	str	r3, [r7, #12]
}
 8015a68:	bf00      	nop
 8015a6a:	e7fe      	b.n	8015a6a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015a6c:	2202      	movs	r2, #2
 8015a6e:	2100      	movs	r1, #0
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7ff ff45 	bl	8015900 <xQueueGenericCreate>
 8015a76:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d002      	beq.n	8015a84 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	683a      	ldr	r2, [r7, #0]
 8015a82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015a84:	697b      	ldr	r3, [r7, #20]
	}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3718      	adds	r7, #24
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
	...

08015a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08e      	sub	sp, #56	; 0x38
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10a      	bne.n	8015ac2 <xQueueGenericSend+0x32>
	__asm volatile
 8015aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab0:	f383 8811 	msr	BASEPRI, r3
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	f3bf 8f4f 	dsb	sy
 8015abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015abe:	bf00      	nop
 8015ac0:	e7fe      	b.n	8015ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d103      	bne.n	8015ad0 <xQueueGenericSend+0x40>
 8015ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d101      	bne.n	8015ad4 <xQueueGenericSend+0x44>
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	e000      	b.n	8015ad6 <xQueueGenericSend+0x46>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10a      	bne.n	8015af0 <xQueueGenericSend+0x60>
	__asm volatile
 8015ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ade:	f383 8811 	msr	BASEPRI, r3
 8015ae2:	f3bf 8f6f 	isb	sy
 8015ae6:	f3bf 8f4f 	dsb	sy
 8015aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015aec:	bf00      	nop
 8015aee:	e7fe      	b.n	8015aee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	2b02      	cmp	r3, #2
 8015af4:	d103      	bne.n	8015afe <xQueueGenericSend+0x6e>
 8015af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d101      	bne.n	8015b02 <xQueueGenericSend+0x72>
 8015afe:	2301      	movs	r3, #1
 8015b00:	e000      	b.n	8015b04 <xQueueGenericSend+0x74>
 8015b02:	2300      	movs	r3, #0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10a      	bne.n	8015b1e <xQueueGenericSend+0x8e>
	__asm volatile
 8015b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0c:	f383 8811 	msr	BASEPRI, r3
 8015b10:	f3bf 8f6f 	isb	sy
 8015b14:	f3bf 8f4f 	dsb	sy
 8015b18:	623b      	str	r3, [r7, #32]
}
 8015b1a:	bf00      	nop
 8015b1c:	e7fe      	b.n	8015b1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b1e:	f001 fce7 	bl	80174f0 <xTaskGetSchedulerState>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d102      	bne.n	8015b2e <xQueueGenericSend+0x9e>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d101      	bne.n	8015b32 <xQueueGenericSend+0xa2>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	e000      	b.n	8015b34 <xQueueGenericSend+0xa4>
 8015b32:	2300      	movs	r3, #0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10a      	bne.n	8015b4e <xQueueGenericSend+0xbe>
	__asm volatile
 8015b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b3c:	f383 8811 	msr	BASEPRI, r3
 8015b40:	f3bf 8f6f 	isb	sy
 8015b44:	f3bf 8f4f 	dsb	sy
 8015b48:	61fb      	str	r3, [r7, #28]
}
 8015b4a:	bf00      	nop
 8015b4c:	e7fe      	b.n	8015b4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b4e:	f002 fb29 	bl	80181a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d302      	bcc.n	8015b64 <xQueueGenericSend+0xd4>
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	2b02      	cmp	r3, #2
 8015b62:	d129      	bne.n	8015bb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b64:	683a      	ldr	r2, [r7, #0]
 8015b66:	68b9      	ldr	r1, [r7, #8]
 8015b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b6a:	f000 fc5e 	bl	801642a <prvCopyDataToQueue>
 8015b6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d010      	beq.n	8015b9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7a:	3324      	adds	r3, #36	; 0x24
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f001 fae5 	bl	801714c <xTaskRemoveFromEventList>
 8015b82:	4603      	mov	r3, r0
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d013      	beq.n	8015bb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015b88:	4b3f      	ldr	r3, [pc, #252]	; (8015c88 <xQueueGenericSend+0x1f8>)
 8015b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b8e:	601a      	str	r2, [r3, #0]
 8015b90:	f3bf 8f4f 	dsb	sy
 8015b94:	f3bf 8f6f 	isb	sy
 8015b98:	e00a      	b.n	8015bb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d007      	beq.n	8015bb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ba0:	4b39      	ldr	r3, [pc, #228]	; (8015c88 <xQueueGenericSend+0x1f8>)
 8015ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ba6:	601a      	str	r2, [r3, #0]
 8015ba8:	f3bf 8f4f 	dsb	sy
 8015bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015bb0:	f002 fb28 	bl	8018204 <vPortExitCritical>
				return pdPASS;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	e063      	b.n	8015c80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d103      	bne.n	8015bc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015bbe:	f002 fb21 	bl	8018204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e05c      	b.n	8015c80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d106      	bne.n	8015bda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bcc:	f107 0314 	add.w	r3, r7, #20
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f001 fb1f 	bl	8017214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015bda:	f002 fb13 	bl	8018204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015bde:	f001 f88b 	bl	8016cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015be2:	f002 fadf 	bl	80181a4 <vPortEnterCritical>
 8015be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015bec:	b25b      	sxtb	r3, r3
 8015bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf2:	d103      	bne.n	8015bfc <xQueueGenericSend+0x16c>
 8015bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c02:	b25b      	sxtb	r3, r3
 8015c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c08:	d103      	bne.n	8015c12 <xQueueGenericSend+0x182>
 8015c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c12:	f002 faf7 	bl	8018204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c16:	1d3a      	adds	r2, r7, #4
 8015c18:	f107 0314 	add.w	r3, r7, #20
 8015c1c:	4611      	mov	r1, r2
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f001 fb0e 	bl	8017240 <xTaskCheckForTimeOut>
 8015c24:	4603      	mov	r3, r0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d124      	bne.n	8015c74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c2c:	f000 fcf5 	bl	801661a <prvIsQueueFull>
 8015c30:	4603      	mov	r3, r0
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d018      	beq.n	8015c68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c38:	3310      	adds	r3, #16
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f001 fa34 	bl	80170ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c46:	f000 fc80 	bl	801654a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c4a:	f001 f863 	bl	8016d14 <xTaskResumeAll>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f47f af7c 	bne.w	8015b4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015c56:	4b0c      	ldr	r3, [pc, #48]	; (8015c88 <xQueueGenericSend+0x1f8>)
 8015c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c5c:	601a      	str	r2, [r3, #0]
 8015c5e:	f3bf 8f4f 	dsb	sy
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	e772      	b.n	8015b4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c6a:	f000 fc6e 	bl	801654a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c6e:	f001 f851 	bl	8016d14 <xTaskResumeAll>
 8015c72:	e76c      	b.n	8015b4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c76:	f000 fc68 	bl	801654a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c7a:	f001 f84b 	bl	8016d14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3738      	adds	r7, #56	; 0x38
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	e000ed04 	.word	0xe000ed04

08015c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b090      	sub	sp, #64	; 0x40
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	60b9      	str	r1, [r7, #8]
 8015c96:	607a      	str	r2, [r7, #4]
 8015c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10a      	bne.n	8015cba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	f383 8811 	msr	BASEPRI, r3
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f3bf 8f4f 	dsb	sy
 8015cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015cb6:	bf00      	nop
 8015cb8:	e7fe      	b.n	8015cb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d103      	bne.n	8015cc8 <xQueueGenericSendFromISR+0x3c>
 8015cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d101      	bne.n	8015ccc <xQueueGenericSendFromISR+0x40>
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e000      	b.n	8015cce <xQueueGenericSendFromISR+0x42>
 8015ccc:	2300      	movs	r3, #0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d10a      	bne.n	8015ce8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015ce4:	bf00      	nop
 8015ce6:	e7fe      	b.n	8015ce6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	2b02      	cmp	r3, #2
 8015cec:	d103      	bne.n	8015cf6 <xQueueGenericSendFromISR+0x6a>
 8015cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d101      	bne.n	8015cfa <xQueueGenericSendFromISR+0x6e>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	e000      	b.n	8015cfc <xQueueGenericSendFromISR+0x70>
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	623b      	str	r3, [r7, #32]
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d16:	f002 fb27 	bl	8018368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015d1a:	f3ef 8211 	mrs	r2, BASEPRI
 8015d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d22:	f383 8811 	msr	BASEPRI, r3
 8015d26:	f3bf 8f6f 	isb	sy
 8015d2a:	f3bf 8f4f 	dsb	sy
 8015d2e:	61fa      	str	r2, [r7, #28]
 8015d30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015d32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d302      	bcc.n	8015d48 <xQueueGenericSendFromISR+0xbc>
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	2b02      	cmp	r3, #2
 8015d46:	d12f      	bne.n	8015da8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	68b9      	ldr	r1, [r7, #8]
 8015d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015d5e:	f000 fb64 	bl	801642a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d6a:	d112      	bne.n	8015d92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d016      	beq.n	8015da2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d76:	3324      	adds	r3, #36	; 0x24
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f001 f9e7 	bl	801714c <xTaskRemoveFromEventList>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d00e      	beq.n	8015da2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d00b      	beq.n	8015da2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	601a      	str	r2, [r3, #0]
 8015d90:	e007      	b.n	8015da2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015d96:	3301      	adds	r3, #1
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	b25a      	sxtb	r2, r3
 8015d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015da2:	2301      	movs	r3, #1
 8015da4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015da6:	e001      	b.n	8015dac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015da8:	2300      	movs	r3, #0
 8015daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015db6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3740      	adds	r7, #64	; 0x40
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b08e      	sub	sp, #56	; 0x38
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	6078      	str	r0, [r7, #4]
 8015dca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d10a      	bne.n	8015dec <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dda:	f383 8811 	msr	BASEPRI, r3
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	f3bf 8f4f 	dsb	sy
 8015de6:	623b      	str	r3, [r7, #32]
}
 8015de8:	bf00      	nop
 8015dea:	e7fe      	b.n	8015dea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00a      	beq.n	8015e0a <xQueueGiveFromISR+0x48>
	__asm volatile
 8015df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df8:	f383 8811 	msr	BASEPRI, r3
 8015dfc:	f3bf 8f6f 	isb	sy
 8015e00:	f3bf 8f4f 	dsb	sy
 8015e04:	61fb      	str	r3, [r7, #28]
}
 8015e06:	bf00      	nop
 8015e08:	e7fe      	b.n	8015e08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d103      	bne.n	8015e1a <xQueueGiveFromISR+0x58>
 8015e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e14:	689b      	ldr	r3, [r3, #8]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d101      	bne.n	8015e1e <xQueueGiveFromISR+0x5c>
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	e000      	b.n	8015e20 <xQueueGiveFromISR+0x5e>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d10a      	bne.n	8015e3a <xQueueGiveFromISR+0x78>
	__asm volatile
 8015e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e28:	f383 8811 	msr	BASEPRI, r3
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	f3bf 8f4f 	dsb	sy
 8015e34:	61bb      	str	r3, [r7, #24]
}
 8015e36:	bf00      	nop
 8015e38:	e7fe      	b.n	8015e38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e3a:	f002 fa95 	bl	8018368 <vPortValidateInterruptPriority>
	__asm volatile
 8015e3e:	f3ef 8211 	mrs	r2, BASEPRI
 8015e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e46:	f383 8811 	msr	BASEPRI, r3
 8015e4a:	f3bf 8f6f 	isb	sy
 8015e4e:	f3bf 8f4f 	dsb	sy
 8015e52:	617a      	str	r2, [r7, #20]
 8015e54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015e56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d22b      	bcs.n	8015ec2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e76:	1c5a      	adds	r2, r3, #1
 8015e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e84:	d112      	bne.n	8015eac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d016      	beq.n	8015ebc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e90:	3324      	adds	r3, #36	; 0x24
 8015e92:	4618      	mov	r0, r3
 8015e94:	f001 f95a 	bl	801714c <xTaskRemoveFromEventList>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d00e      	beq.n	8015ebc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00b      	beq.n	8015ebc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	601a      	str	r2, [r3, #0]
 8015eaa:	e007      	b.n	8015ebc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	b2db      	uxtb	r3, r3
 8015eb4:	b25a      	sxtb	r2, r3
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8015ec0:	e001      	b.n	8015ec6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8015ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	f383 8811 	msr	BASEPRI, r3
}
 8015ed0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3738      	adds	r7, #56	; 0x38
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b08c      	sub	sp, #48	; 0x30
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	60f8      	str	r0, [r7, #12]
 8015ee4:	60b9      	str	r1, [r7, #8]
 8015ee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d10a      	bne.n	8015f0c <xQueueReceive+0x30>
	__asm volatile
 8015ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efa:	f383 8811 	msr	BASEPRI, r3
 8015efe:	f3bf 8f6f 	isb	sy
 8015f02:	f3bf 8f4f 	dsb	sy
 8015f06:	623b      	str	r3, [r7, #32]
}
 8015f08:	bf00      	nop
 8015f0a:	e7fe      	b.n	8015f0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d103      	bne.n	8015f1a <xQueueReceive+0x3e>
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d101      	bne.n	8015f1e <xQueueReceive+0x42>
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	e000      	b.n	8015f20 <xQueueReceive+0x44>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d10a      	bne.n	8015f3a <xQueueReceive+0x5e>
	__asm volatile
 8015f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f28:	f383 8811 	msr	BASEPRI, r3
 8015f2c:	f3bf 8f6f 	isb	sy
 8015f30:	f3bf 8f4f 	dsb	sy
 8015f34:	61fb      	str	r3, [r7, #28]
}
 8015f36:	bf00      	nop
 8015f38:	e7fe      	b.n	8015f38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f3a:	f001 fad9 	bl	80174f0 <xTaskGetSchedulerState>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d102      	bne.n	8015f4a <xQueueReceive+0x6e>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d101      	bne.n	8015f4e <xQueueReceive+0x72>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e000      	b.n	8015f50 <xQueueReceive+0x74>
 8015f4e:	2300      	movs	r3, #0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d10a      	bne.n	8015f6a <xQueueReceive+0x8e>
	__asm volatile
 8015f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f58:	f383 8811 	msr	BASEPRI, r3
 8015f5c:	f3bf 8f6f 	isb	sy
 8015f60:	f3bf 8f4f 	dsb	sy
 8015f64:	61bb      	str	r3, [r7, #24]
}
 8015f66:	bf00      	nop
 8015f68:	e7fe      	b.n	8015f68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f6a:	f002 f91b 	bl	80181a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d01f      	beq.n	8015fba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f7a:	68b9      	ldr	r1, [r7, #8]
 8015f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f7e:	f000 fabe 	bl	80164fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f84:	1e5a      	subs	r2, r3, #1
 8015f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f8c:	691b      	ldr	r3, [r3, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d00f      	beq.n	8015fb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	3310      	adds	r3, #16
 8015f96:	4618      	mov	r0, r3
 8015f98:	f001 f8d8 	bl	801714c <xTaskRemoveFromEventList>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d007      	beq.n	8015fb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015fa2:	4b3d      	ldr	r3, [pc, #244]	; (8016098 <xQueueReceive+0x1bc>)
 8015fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fa8:	601a      	str	r2, [r3, #0]
 8015faa:	f3bf 8f4f 	dsb	sy
 8015fae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015fb2:	f002 f927 	bl	8018204 <vPortExitCritical>
				return pdPASS;
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	e069      	b.n	801608e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d103      	bne.n	8015fc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015fc0:	f002 f920 	bl	8018204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	e062      	b.n	801608e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d106      	bne.n	8015fdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015fce:	f107 0310 	add.w	r3, r7, #16
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f001 f91e 	bl	8017214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015fdc:	f002 f912 	bl	8018204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015fe0:	f000 fe8a 	bl	8016cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015fe4:	f002 f8de 	bl	80181a4 <vPortEnterCritical>
 8015fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fee:	b25b      	sxtb	r3, r3
 8015ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ff4:	d103      	bne.n	8015ffe <xQueueReceive+0x122>
 8015ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016004:	b25b      	sxtb	r3, r3
 8016006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801600a:	d103      	bne.n	8016014 <xQueueReceive+0x138>
 801600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801600e:	2200      	movs	r2, #0
 8016010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016014:	f002 f8f6 	bl	8018204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016018:	1d3a      	adds	r2, r7, #4
 801601a:	f107 0310 	add.w	r3, r7, #16
 801601e:	4611      	mov	r1, r2
 8016020:	4618      	mov	r0, r3
 8016022:	f001 f90d 	bl	8017240 <xTaskCheckForTimeOut>
 8016026:	4603      	mov	r3, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d123      	bne.n	8016074 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801602c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801602e:	f000 fade 	bl	80165ee <prvIsQueueEmpty>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d017      	beq.n	8016068 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603a:	3324      	adds	r3, #36	; 0x24
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	4611      	mov	r1, r2
 8016040:	4618      	mov	r0, r3
 8016042:	f001 f833 	bl	80170ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016048:	f000 fa7f 	bl	801654a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801604c:	f000 fe62 	bl	8016d14 <xTaskResumeAll>
 8016050:	4603      	mov	r3, r0
 8016052:	2b00      	cmp	r3, #0
 8016054:	d189      	bne.n	8015f6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016056:	4b10      	ldr	r3, [pc, #64]	; (8016098 <xQueueReceive+0x1bc>)
 8016058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801605c:	601a      	str	r2, [r3, #0]
 801605e:	f3bf 8f4f 	dsb	sy
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	e780      	b.n	8015f6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801606a:	f000 fa6e 	bl	801654a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801606e:	f000 fe51 	bl	8016d14 <xTaskResumeAll>
 8016072:	e77a      	b.n	8015f6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016076:	f000 fa68 	bl	801654a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801607a:	f000 fe4b 	bl	8016d14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801607e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016080:	f000 fab5 	bl	80165ee <prvIsQueueEmpty>
 8016084:	4603      	mov	r3, r0
 8016086:	2b00      	cmp	r3, #0
 8016088:	f43f af6f 	beq.w	8015f6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801608c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801608e:	4618      	mov	r0, r3
 8016090:	3730      	adds	r7, #48	; 0x30
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}
 8016096:	bf00      	nop
 8016098:	e000ed04 	.word	0xe000ed04

0801609c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b08e      	sub	sp, #56	; 0x38
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80160a6:	2300      	movs	r3, #0
 80160a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80160ae:	2300      	movs	r3, #0
 80160b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80160b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d10a      	bne.n	80160ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80160b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160bc:	f383 8811 	msr	BASEPRI, r3
 80160c0:	f3bf 8f6f 	isb	sy
 80160c4:	f3bf 8f4f 	dsb	sy
 80160c8:	623b      	str	r3, [r7, #32]
}
 80160ca:	bf00      	nop
 80160cc:	e7fe      	b.n	80160cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80160ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d00a      	beq.n	80160ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80160d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160da:	f383 8811 	msr	BASEPRI, r3
 80160de:	f3bf 8f6f 	isb	sy
 80160e2:	f3bf 8f4f 	dsb	sy
 80160e6:	61fb      	str	r3, [r7, #28]
}
 80160e8:	bf00      	nop
 80160ea:	e7fe      	b.n	80160ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160ec:	f001 fa00 	bl	80174f0 <xTaskGetSchedulerState>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d102      	bne.n	80160fc <xQueueSemaphoreTake+0x60>
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d101      	bne.n	8016100 <xQueueSemaphoreTake+0x64>
 80160fc:	2301      	movs	r3, #1
 80160fe:	e000      	b.n	8016102 <xQueueSemaphoreTake+0x66>
 8016100:	2300      	movs	r3, #0
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10a      	bne.n	801611c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610a:	f383 8811 	msr	BASEPRI, r3
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	f3bf 8f4f 	dsb	sy
 8016116:	61bb      	str	r3, [r7, #24]
}
 8016118:	bf00      	nop
 801611a:	e7fe      	b.n	801611a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801611c:	f002 f842 	bl	80181a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016124:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016128:	2b00      	cmp	r3, #0
 801612a:	d024      	beq.n	8016176 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612e:	1e5a      	subs	r2, r3, #1
 8016130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016132:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d104      	bne.n	8016146 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801613c:	f001 fb4e 	bl	80177dc <pvTaskIncrementMutexHeldCount>
 8016140:	4602      	mov	r2, r0
 8016142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016144:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	691b      	ldr	r3, [r3, #16]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d00f      	beq.n	801616e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016150:	3310      	adds	r3, #16
 8016152:	4618      	mov	r0, r3
 8016154:	f000 fffa 	bl	801714c <xTaskRemoveFromEventList>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d007      	beq.n	801616e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801615e:	4b54      	ldr	r3, [pc, #336]	; (80162b0 <xQueueSemaphoreTake+0x214>)
 8016160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016164:	601a      	str	r2, [r3, #0]
 8016166:	f3bf 8f4f 	dsb	sy
 801616a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801616e:	f002 f849 	bl	8018204 <vPortExitCritical>
				return pdPASS;
 8016172:	2301      	movs	r3, #1
 8016174:	e097      	b.n	80162a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d111      	bne.n	80161a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00a      	beq.n	8016198 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	617b      	str	r3, [r7, #20]
}
 8016194:	bf00      	nop
 8016196:	e7fe      	b.n	8016196 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016198:	f002 f834 	bl	8018204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801619c:	2300      	movs	r3, #0
 801619e:	e082      	b.n	80162a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80161a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d106      	bne.n	80161b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80161a6:	f107 030c 	add.w	r3, r7, #12
 80161aa:	4618      	mov	r0, r3
 80161ac:	f001 f832 	bl	8017214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80161b0:	2301      	movs	r3, #1
 80161b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80161b4:	f002 f826 	bl	8018204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80161b8:	f000 fd9e 	bl	8016cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80161bc:	f001 fff2 	bl	80181a4 <vPortEnterCritical>
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161c6:	b25b      	sxtb	r3, r3
 80161c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161cc:	d103      	bne.n	80161d6 <xQueueSemaphoreTake+0x13a>
 80161ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d0:	2200      	movs	r2, #0
 80161d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161dc:	b25b      	sxtb	r3, r3
 80161de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e2:	d103      	bne.n	80161ec <xQueueSemaphoreTake+0x150>
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	2200      	movs	r2, #0
 80161e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161ec:	f002 f80a 	bl	8018204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80161f0:	463a      	mov	r2, r7
 80161f2:	f107 030c 	add.w	r3, r7, #12
 80161f6:	4611      	mov	r1, r2
 80161f8:	4618      	mov	r0, r3
 80161fa:	f001 f821 	bl	8017240 <xTaskCheckForTimeOut>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d132      	bne.n	801626a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016206:	f000 f9f2 	bl	80165ee <prvIsQueueEmpty>
 801620a:	4603      	mov	r3, r0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d026      	beq.n	801625e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d109      	bne.n	801622c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016218:	f001 ffc4 	bl	80181a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	4618      	mov	r0, r3
 8016222:	f001 f983 	bl	801752c <xTaskPriorityInherit>
 8016226:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016228:	f001 ffec 	bl	8018204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622e:	3324      	adds	r3, #36	; 0x24
 8016230:	683a      	ldr	r2, [r7, #0]
 8016232:	4611      	mov	r1, r2
 8016234:	4618      	mov	r0, r3
 8016236:	f000 ff39 	bl	80170ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801623a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801623c:	f000 f985 	bl	801654a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016240:	f000 fd68 	bl	8016d14 <xTaskResumeAll>
 8016244:	4603      	mov	r3, r0
 8016246:	2b00      	cmp	r3, #0
 8016248:	f47f af68 	bne.w	801611c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801624c:	4b18      	ldr	r3, [pc, #96]	; (80162b0 <xQueueSemaphoreTake+0x214>)
 801624e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	f3bf 8f4f 	dsb	sy
 8016258:	f3bf 8f6f 	isb	sy
 801625c:	e75e      	b.n	801611c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801625e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016260:	f000 f973 	bl	801654a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016264:	f000 fd56 	bl	8016d14 <xTaskResumeAll>
 8016268:	e758      	b.n	801611c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801626a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801626c:	f000 f96d 	bl	801654a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016270:	f000 fd50 	bl	8016d14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016276:	f000 f9ba 	bl	80165ee <prvIsQueueEmpty>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	f43f af4d 	beq.w	801611c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016284:	2b00      	cmp	r3, #0
 8016286:	d00d      	beq.n	80162a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016288:	f001 ff8c 	bl	80181a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801628c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801628e:	f000 f8b4 	bl	80163fa <prvGetDisinheritPriorityAfterTimeout>
 8016292:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016296:	689b      	ldr	r3, [r3, #8]
 8016298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801629a:	4618      	mov	r0, r3
 801629c:	f001 fa1c 	bl	80176d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80162a0:	f001 ffb0 	bl	8018204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80162a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3738      	adds	r7, #56	; 0x38
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	e000ed04 	.word	0xe000ed04

080162b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b08e      	sub	sp, #56	; 0x38
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80162c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d10a      	bne.n	80162e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80162ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ce:	f383 8811 	msr	BASEPRI, r3
 80162d2:	f3bf 8f6f 	isb	sy
 80162d6:	f3bf 8f4f 	dsb	sy
 80162da:	623b      	str	r3, [r7, #32]
}
 80162dc:	bf00      	nop
 80162de:	e7fe      	b.n	80162de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d103      	bne.n	80162ee <xQueueReceiveFromISR+0x3a>
 80162e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d101      	bne.n	80162f2 <xQueueReceiveFromISR+0x3e>
 80162ee:	2301      	movs	r3, #1
 80162f0:	e000      	b.n	80162f4 <xQueueReceiveFromISR+0x40>
 80162f2:	2300      	movs	r3, #0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d10a      	bne.n	801630e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80162f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162fc:	f383 8811 	msr	BASEPRI, r3
 8016300:	f3bf 8f6f 	isb	sy
 8016304:	f3bf 8f4f 	dsb	sy
 8016308:	61fb      	str	r3, [r7, #28]
}
 801630a:	bf00      	nop
 801630c:	e7fe      	b.n	801630c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801630e:	f002 f82b 	bl	8018368 <vPortValidateInterruptPriority>
	__asm volatile
 8016312:	f3ef 8211 	mrs	r2, BASEPRI
 8016316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801631a:	f383 8811 	msr	BASEPRI, r3
 801631e:	f3bf 8f6f 	isb	sy
 8016322:	f3bf 8f4f 	dsb	sy
 8016326:	61ba      	str	r2, [r7, #24]
 8016328:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801632a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801632c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016332:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016336:	2b00      	cmp	r3, #0
 8016338:	d02f      	beq.n	801639a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016344:	68b9      	ldr	r1, [r7, #8]
 8016346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016348:	f000 f8d9 	bl	80164fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634e:	1e5a      	subs	r2, r3, #1
 8016350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016352:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635c:	d112      	bne.n	8016384 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016360:	691b      	ldr	r3, [r3, #16]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d016      	beq.n	8016394 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	3310      	adds	r3, #16
 801636a:	4618      	mov	r0, r3
 801636c:	f000 feee 	bl	801714c <xTaskRemoveFromEventList>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	d00e      	beq.n	8016394 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d00b      	beq.n	8016394 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2201      	movs	r2, #1
 8016380:	601a      	str	r2, [r3, #0]
 8016382:	e007      	b.n	8016394 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016388:	3301      	adds	r3, #1
 801638a:	b2db      	uxtb	r3, r3
 801638c:	b25a      	sxtb	r2, r3
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016394:	2301      	movs	r3, #1
 8016396:	637b      	str	r3, [r7, #52]	; 0x34
 8016398:	e001      	b.n	801639e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801639a:	2300      	movs	r3, #0
 801639c:	637b      	str	r3, [r7, #52]	; 0x34
 801639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	f383 8811 	msr	BASEPRI, r3
}
 80163a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3738      	adds	r7, #56	; 0x38
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d10a      	bne.n	80163dc <vQueueDelete+0x28>
	__asm volatile
 80163c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ca:	f383 8811 	msr	BASEPRI, r3
 80163ce:	f3bf 8f6f 	isb	sy
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	60bb      	str	r3, [r7, #8]
}
 80163d8:	bf00      	nop
 80163da:	e7fe      	b.n	80163da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f000 f95f 	bl	80166a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d102      	bne.n	80163f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80163ec:	68f8      	ldr	r0, [r7, #12]
 80163ee:	f002 f8c7 	bl	8018580 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80163f2:	bf00      	nop
 80163f4:	3710      	adds	r7, #16
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}

080163fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80163fa:	b480      	push	{r7}
 80163fc:	b085      	sub	sp, #20
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016406:	2b00      	cmp	r3, #0
 8016408:	d006      	beq.n	8016418 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016414:	60fb      	str	r3, [r7, #12]
 8016416:	e001      	b.n	801641c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016418:	2300      	movs	r3, #0
 801641a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801641c:	68fb      	ldr	r3, [r7, #12]
	}
 801641e:	4618      	mov	r0, r3
 8016420:	3714      	adds	r7, #20
 8016422:	46bd      	mov	sp, r7
 8016424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016428:	4770      	bx	lr

0801642a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b086      	sub	sp, #24
 801642e:	af00      	add	r7, sp, #0
 8016430:	60f8      	str	r0, [r7, #12]
 8016432:	60b9      	str	r1, [r7, #8]
 8016434:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016436:	2300      	movs	r3, #0
 8016438:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801643e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016444:	2b00      	cmp	r3, #0
 8016446:	d10d      	bne.n	8016464 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d14d      	bne.n	80164ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	689b      	ldr	r3, [r3, #8]
 8016454:	4618      	mov	r0, r3
 8016456:	f001 f8d1 	bl	80175fc <xTaskPriorityDisinherit>
 801645a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2200      	movs	r2, #0
 8016460:	609a      	str	r2, [r3, #8]
 8016462:	e043      	b.n	80164ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d119      	bne.n	801649e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6858      	ldr	r0, [r3, #4]
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016472:	461a      	mov	r2, r3
 8016474:	68b9      	ldr	r1, [r7, #8]
 8016476:	f003 ffb9 	bl	801a3ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	685a      	ldr	r2, [r3, #4]
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016482:	441a      	add	r2, r3
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	685a      	ldr	r2, [r3, #4]
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	689b      	ldr	r3, [r3, #8]
 8016490:	429a      	cmp	r2, r3
 8016492:	d32b      	bcc.n	80164ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	605a      	str	r2, [r3, #4]
 801649c:	e026      	b.n	80164ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	68d8      	ldr	r0, [r3, #12]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164a6:	461a      	mov	r2, r3
 80164a8:	68b9      	ldr	r1, [r7, #8]
 80164aa:	f003 ff9f 	bl	801a3ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	68da      	ldr	r2, [r3, #12]
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164b6:	425b      	negs	r3, r3
 80164b8:	441a      	add	r2, r3
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	68da      	ldr	r2, [r3, #12]
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d207      	bcs.n	80164da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	689a      	ldr	r2, [r3, #8]
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164d2:	425b      	negs	r3, r3
 80164d4:	441a      	add	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2b02      	cmp	r3, #2
 80164de:	d105      	bne.n	80164ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80164e0:	693b      	ldr	r3, [r7, #16]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d002      	beq.n	80164ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	3b01      	subs	r3, #1
 80164ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80164f4:	697b      	ldr	r3, [r7, #20]
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3718      	adds	r7, #24
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b082      	sub	sp, #8
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
 8016506:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801650c:	2b00      	cmp	r3, #0
 801650e:	d018      	beq.n	8016542 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68da      	ldr	r2, [r3, #12]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016518:	441a      	add	r2, r3
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	68da      	ldr	r2, [r3, #12]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	689b      	ldr	r3, [r3, #8]
 8016526:	429a      	cmp	r2, r3
 8016528:	d303      	bcc.n	8016532 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	68d9      	ldr	r1, [r3, #12]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801653a:	461a      	mov	r2, r3
 801653c:	6838      	ldr	r0, [r7, #0]
 801653e:	f003 ff55 	bl	801a3ec <memcpy>
	}
}
 8016542:	bf00      	nop
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b084      	sub	sp, #16
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016552:	f001 fe27 	bl	80181a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801655c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801655e:	e011      	b.n	8016584 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016564:	2b00      	cmp	r3, #0
 8016566:	d012      	beq.n	801658e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3324      	adds	r3, #36	; 0x24
 801656c:	4618      	mov	r0, r3
 801656e:	f000 fded 	bl	801714c <xTaskRemoveFromEventList>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d001      	beq.n	801657c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016578:	f000 fec4 	bl	8017304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801657c:	7bfb      	ldrb	r3, [r7, #15]
 801657e:	3b01      	subs	r3, #1
 8016580:	b2db      	uxtb	r3, r3
 8016582:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016588:	2b00      	cmp	r3, #0
 801658a:	dce9      	bgt.n	8016560 <prvUnlockQueue+0x16>
 801658c:	e000      	b.n	8016590 <prvUnlockQueue+0x46>
					break;
 801658e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	22ff      	movs	r2, #255	; 0xff
 8016594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016598:	f001 fe34 	bl	8018204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801659c:	f001 fe02 	bl	80181a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80165a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165a8:	e011      	b.n	80165ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	691b      	ldr	r3, [r3, #16]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d012      	beq.n	80165d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	3310      	adds	r3, #16
 80165b6:	4618      	mov	r0, r3
 80165b8:	f000 fdc8 	bl	801714c <xTaskRemoveFromEventList>
 80165bc:	4603      	mov	r3, r0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d001      	beq.n	80165c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80165c2:	f000 fe9f 	bl	8017304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80165c6:	7bbb      	ldrb	r3, [r7, #14]
 80165c8:	3b01      	subs	r3, #1
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	dce9      	bgt.n	80165aa <prvUnlockQueue+0x60>
 80165d6:	e000      	b.n	80165da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80165d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	22ff      	movs	r2, #255	; 0xff
 80165de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80165e2:	f001 fe0f 	bl	8018204 <vPortExitCritical>
}
 80165e6:	bf00      	nop
 80165e8:	3710      	adds	r7, #16
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80165ee:	b580      	push	{r7, lr}
 80165f0:	b084      	sub	sp, #16
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165f6:	f001 fdd5 	bl	80181a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d102      	bne.n	8016608 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016602:	2301      	movs	r3, #1
 8016604:	60fb      	str	r3, [r7, #12]
 8016606:	e001      	b.n	801660c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016608:	2300      	movs	r3, #0
 801660a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801660c:	f001 fdfa 	bl	8018204 <vPortExitCritical>

	return xReturn;
 8016610:	68fb      	ldr	r3, [r7, #12]
}
 8016612:	4618      	mov	r0, r3
 8016614:	3710      	adds	r7, #16
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}

0801661a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801661a:	b580      	push	{r7, lr}
 801661c:	b084      	sub	sp, #16
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016622:	f001 fdbf 	bl	80181a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801662e:	429a      	cmp	r2, r3
 8016630:	d102      	bne.n	8016638 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016632:	2301      	movs	r3, #1
 8016634:	60fb      	str	r3, [r7, #12]
 8016636:	e001      	b.n	801663c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016638:	2300      	movs	r3, #0
 801663a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801663c:	f001 fde2 	bl	8018204 <vPortExitCritical>

	return xReturn;
 8016640:	68fb      	ldr	r3, [r7, #12]
}
 8016642:	4618      	mov	r0, r3
 8016644:	3710      	adds	r7, #16
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
	...

0801664c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801664c:	b480      	push	{r7}
 801664e:	b085      	sub	sp, #20
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016656:	2300      	movs	r3, #0
 8016658:	60fb      	str	r3, [r7, #12]
 801665a:	e014      	b.n	8016686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801665c:	4a0f      	ldr	r2, [pc, #60]	; (801669c <vQueueAddToRegistry+0x50>)
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d10b      	bne.n	8016680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016668:	490c      	ldr	r1, [pc, #48]	; (801669c <vQueueAddToRegistry+0x50>)
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	683a      	ldr	r2, [r7, #0]
 801666e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016672:	4a0a      	ldr	r2, [pc, #40]	; (801669c <vQueueAddToRegistry+0x50>)
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	00db      	lsls	r3, r3, #3
 8016678:	4413      	add	r3, r2
 801667a:	687a      	ldr	r2, [r7, #4]
 801667c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801667e:	e006      	b.n	801668e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	3301      	adds	r3, #1
 8016684:	60fb      	str	r3, [r7, #12]
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2b07      	cmp	r3, #7
 801668a:	d9e7      	bls.n	801665c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801668c:	bf00      	nop
 801668e:	bf00      	nop
 8016690:	3714      	adds	r7, #20
 8016692:	46bd      	mov	sp, r7
 8016694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016698:	4770      	bx	lr
 801669a:	bf00      	nop
 801669c:	20007690 	.word	0x20007690

080166a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80166a0:	b480      	push	{r7}
 80166a2:	b085      	sub	sp, #20
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166a8:	2300      	movs	r3, #0
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	e016      	b.n	80166dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80166ae:	4a10      	ldr	r2, [pc, #64]	; (80166f0 <vQueueUnregisterQueue+0x50>)
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	00db      	lsls	r3, r3, #3
 80166b4:	4413      	add	r3, r2
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	687a      	ldr	r2, [r7, #4]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d10b      	bne.n	80166d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80166be:	4a0c      	ldr	r2, [pc, #48]	; (80166f0 <vQueueUnregisterQueue+0x50>)
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	2100      	movs	r1, #0
 80166c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80166c8:	4a09      	ldr	r2, [pc, #36]	; (80166f0 <vQueueUnregisterQueue+0x50>)
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	4413      	add	r3, r2
 80166d0:	2200      	movs	r2, #0
 80166d2:	605a      	str	r2, [r3, #4]
				break;
 80166d4:	e006      	b.n	80166e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	3301      	adds	r3, #1
 80166da:	60fb      	str	r3, [r7, #12]
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2b07      	cmp	r3, #7
 80166e0:	d9e5      	bls.n	80166ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80166e2:	bf00      	nop
 80166e4:	bf00      	nop
 80166e6:	3714      	adds	r7, #20
 80166e8:	46bd      	mov	sp, r7
 80166ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ee:	4770      	bx	lr
 80166f0:	20007690 	.word	0x20007690

080166f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b086      	sub	sp, #24
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016704:	f001 fd4e 	bl	80181a4 <vPortEnterCritical>
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801670e:	b25b      	sxtb	r3, r3
 8016710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016714:	d103      	bne.n	801671e <vQueueWaitForMessageRestricted+0x2a>
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	2200      	movs	r2, #0
 801671a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801671e:	697b      	ldr	r3, [r7, #20]
 8016720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016724:	b25b      	sxtb	r3, r3
 8016726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672a:	d103      	bne.n	8016734 <vQueueWaitForMessageRestricted+0x40>
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	2200      	movs	r2, #0
 8016730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016734:	f001 fd66 	bl	8018204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801673c:	2b00      	cmp	r3, #0
 801673e:	d106      	bne.n	801674e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	3324      	adds	r3, #36	; 0x24
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	68b9      	ldr	r1, [r7, #8]
 8016748:	4618      	mov	r0, r3
 801674a:	f000 fcd3 	bl	80170f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801674e:	6978      	ldr	r0, [r7, #20]
 8016750:	f7ff fefb 	bl	801654a <prvUnlockQueue>
	}
 8016754:	bf00      	nop
 8016756:	3718      	adds	r7, #24
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801675c:	b580      	push	{r7, lr}
 801675e:	b08e      	sub	sp, #56	; 0x38
 8016760:	af04      	add	r7, sp, #16
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
 8016768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801676c:	2b00      	cmp	r3, #0
 801676e:	d10a      	bne.n	8016786 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016774:	f383 8811 	msr	BASEPRI, r3
 8016778:	f3bf 8f6f 	isb	sy
 801677c:	f3bf 8f4f 	dsb	sy
 8016780:	623b      	str	r3, [r7, #32]
}
 8016782:	bf00      	nop
 8016784:	e7fe      	b.n	8016784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016788:	2b00      	cmp	r3, #0
 801678a:	d10a      	bne.n	80167a2 <xTaskCreateStatic+0x46>
	__asm volatile
 801678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016790:	f383 8811 	msr	BASEPRI, r3
 8016794:	f3bf 8f6f 	isb	sy
 8016798:	f3bf 8f4f 	dsb	sy
 801679c:	61fb      	str	r3, [r7, #28]
}
 801679e:	bf00      	nop
 80167a0:	e7fe      	b.n	80167a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80167a2:	23bc      	movs	r3, #188	; 0xbc
 80167a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	2bbc      	cmp	r3, #188	; 0xbc
 80167aa:	d00a      	beq.n	80167c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80167ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b0:	f383 8811 	msr	BASEPRI, r3
 80167b4:	f3bf 8f6f 	isb	sy
 80167b8:	f3bf 8f4f 	dsb	sy
 80167bc:	61bb      	str	r3, [r7, #24]
}
 80167be:	bf00      	nop
 80167c0:	e7fe      	b.n	80167c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80167c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d01e      	beq.n	8016808 <xTaskCreateStatic+0xac>
 80167ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d01b      	beq.n	8016808 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80167d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80167d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80167da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167dc:	2202      	movs	r2, #2
 80167de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80167e2:	2300      	movs	r3, #0
 80167e4:	9303      	str	r3, [sp, #12]
 80167e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e8:	9302      	str	r3, [sp, #8]
 80167ea:	f107 0314 	add.w	r3, r7, #20
 80167ee:	9301      	str	r3, [sp, #4]
 80167f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f2:	9300      	str	r3, [sp, #0]
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	68b9      	ldr	r1, [r7, #8]
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f000 f850 	bl	80168a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016802:	f000 f8f3 	bl	80169ec <prvAddNewTaskToReadyList>
 8016806:	e001      	b.n	801680c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016808:	2300      	movs	r3, #0
 801680a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801680c:	697b      	ldr	r3, [r7, #20]
	}
 801680e:	4618      	mov	r0, r3
 8016810:	3728      	adds	r7, #40	; 0x28
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016816:	b580      	push	{r7, lr}
 8016818:	b08c      	sub	sp, #48	; 0x30
 801681a:	af04      	add	r7, sp, #16
 801681c:	60f8      	str	r0, [r7, #12]
 801681e:	60b9      	str	r1, [r7, #8]
 8016820:	603b      	str	r3, [r7, #0]
 8016822:	4613      	mov	r3, r2
 8016824:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016826:	88fb      	ldrh	r3, [r7, #6]
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	4618      	mov	r0, r3
 801682c:	f001 fddc 	bl	80183e8 <pvPortMalloc>
 8016830:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d00e      	beq.n	8016856 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016838:	20bc      	movs	r0, #188	; 0xbc
 801683a:	f001 fdd5 	bl	80183e8 <pvPortMalloc>
 801683e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d003      	beq.n	801684e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	697a      	ldr	r2, [r7, #20]
 801684a:	631a      	str	r2, [r3, #48]	; 0x30
 801684c:	e005      	b.n	801685a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801684e:	6978      	ldr	r0, [r7, #20]
 8016850:	f001 fe96 	bl	8018580 <vPortFree>
 8016854:	e001      	b.n	801685a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016856:	2300      	movs	r3, #0
 8016858:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d017      	beq.n	8016890 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016860:	69fb      	ldr	r3, [r7, #28]
 8016862:	2200      	movs	r2, #0
 8016864:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016868:	88fa      	ldrh	r2, [r7, #6]
 801686a:	2300      	movs	r3, #0
 801686c:	9303      	str	r3, [sp, #12]
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	9302      	str	r3, [sp, #8]
 8016872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016874:	9301      	str	r3, [sp, #4]
 8016876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	68b9      	ldr	r1, [r7, #8]
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	f000 f80e 	bl	80168a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016884:	69f8      	ldr	r0, [r7, #28]
 8016886:	f000 f8b1 	bl	80169ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801688a:	2301      	movs	r3, #1
 801688c:	61bb      	str	r3, [r7, #24]
 801688e:	e002      	b.n	8016896 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016890:	f04f 33ff 	mov.w	r3, #4294967295
 8016894:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016896:	69bb      	ldr	r3, [r7, #24]
	}
 8016898:	4618      	mov	r0, r3
 801689a:	3720      	adds	r7, #32
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b088      	sub	sp, #32
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	60f8      	str	r0, [r7, #12]
 80168a8:	60b9      	str	r1, [r7, #8]
 80168aa:	607a      	str	r2, [r7, #4]
 80168ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80168ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	009b      	lsls	r3, r3, #2
 80168b6:	461a      	mov	r2, r3
 80168b8:	21a5      	movs	r1, #165	; 0xa5
 80168ba:	f003 fdbf 	bl	801a43c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80168c8:	3b01      	subs	r3, #1
 80168ca:	009b      	lsls	r3, r3, #2
 80168cc:	4413      	add	r3, r2
 80168ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80168d0:	69bb      	ldr	r3, [r7, #24]
 80168d2:	f023 0307 	bic.w	r3, r3, #7
 80168d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	f003 0307 	and.w	r3, r3, #7
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00a      	beq.n	80168f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80168e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e6:	f383 8811 	msr	BASEPRI, r3
 80168ea:	f3bf 8f6f 	isb	sy
 80168ee:	f3bf 8f4f 	dsb	sy
 80168f2:	617b      	str	r3, [r7, #20]
}
 80168f4:	bf00      	nop
 80168f6:	e7fe      	b.n	80168f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d01f      	beq.n	801693e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80168fe:	2300      	movs	r3, #0
 8016900:	61fb      	str	r3, [r7, #28]
 8016902:	e012      	b.n	801692a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016904:	68ba      	ldr	r2, [r7, #8]
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	4413      	add	r3, r2
 801690a:	7819      	ldrb	r1, [r3, #0]
 801690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	4413      	add	r3, r2
 8016912:	3334      	adds	r3, #52	; 0x34
 8016914:	460a      	mov	r2, r1
 8016916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016918:	68ba      	ldr	r2, [r7, #8]
 801691a:	69fb      	ldr	r3, [r7, #28]
 801691c:	4413      	add	r3, r2
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d006      	beq.n	8016932 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	3301      	adds	r3, #1
 8016928:	61fb      	str	r3, [r7, #28]
 801692a:	69fb      	ldr	r3, [r7, #28]
 801692c:	2b0f      	cmp	r3, #15
 801692e:	d9e9      	bls.n	8016904 <prvInitialiseNewTask+0x64>
 8016930:	e000      	b.n	8016934 <prvInitialiseNewTask+0x94>
			{
				break;
 8016932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016936:	2200      	movs	r2, #0
 8016938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801693c:	e003      	b.n	8016946 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016940:	2200      	movs	r2, #0
 8016942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016948:	2b37      	cmp	r3, #55	; 0x37
 801694a:	d901      	bls.n	8016950 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801694c:	2337      	movs	r3, #55	; 0x37
 801694e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016954:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801695a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801695e:	2200      	movs	r2, #0
 8016960:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016964:	3304      	adds	r3, #4
 8016966:	4618      	mov	r0, r3
 8016968:	f7fe fe56 	bl	8015618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696e:	3318      	adds	r3, #24
 8016970:	4618      	mov	r0, r3
 8016972:	f7fe fe51 	bl	8015618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801697a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801697e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801698a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698e:	2200      	movs	r2, #0
 8016990:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016996:	2200      	movs	r2, #0
 8016998:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699e:	3354      	adds	r3, #84	; 0x54
 80169a0:	2260      	movs	r2, #96	; 0x60
 80169a2:	2100      	movs	r1, #0
 80169a4:	4618      	mov	r0, r3
 80169a6:	f003 fd49 	bl	801a43c <memset>
 80169aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ac:	4a0c      	ldr	r2, [pc, #48]	; (80169e0 <prvInitialiseNewTask+0x140>)
 80169ae:	659a      	str	r2, [r3, #88]	; 0x58
 80169b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b2:	4a0c      	ldr	r2, [pc, #48]	; (80169e4 <prvInitialiseNewTask+0x144>)
 80169b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80169b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b8:	4a0b      	ldr	r2, [pc, #44]	; (80169e8 <prvInitialiseNewTask+0x148>)
 80169ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80169bc:	683a      	ldr	r2, [r7, #0]
 80169be:	68f9      	ldr	r1, [r7, #12]
 80169c0:	69b8      	ldr	r0, [r7, #24]
 80169c2:	f001 fac1 	bl	8017f48 <pxPortInitialiseStack>
 80169c6:	4602      	mov	r2, r0
 80169c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80169cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d002      	beq.n	80169d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80169d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169d8:	bf00      	nop
 80169da:	3720      	adds	r7, #32
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}
 80169e0:	0802143c 	.word	0x0802143c
 80169e4:	0802145c 	.word	0x0802145c
 80169e8:	0802141c 	.word	0x0802141c

080169ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80169f4:	f001 fbd6 	bl	80181a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80169f8:	4b2d      	ldr	r3, [pc, #180]	; (8016ab0 <prvAddNewTaskToReadyList+0xc4>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	3301      	adds	r3, #1
 80169fe:	4a2c      	ldr	r2, [pc, #176]	; (8016ab0 <prvAddNewTaskToReadyList+0xc4>)
 8016a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016a02:	4b2c      	ldr	r3, [pc, #176]	; (8016ab4 <prvAddNewTaskToReadyList+0xc8>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d109      	bne.n	8016a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016a0a:	4a2a      	ldr	r2, [pc, #168]	; (8016ab4 <prvAddNewTaskToReadyList+0xc8>)
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016a10:	4b27      	ldr	r3, [pc, #156]	; (8016ab0 <prvAddNewTaskToReadyList+0xc4>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	d110      	bne.n	8016a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016a18:	f000 fc98 	bl	801734c <prvInitialiseTaskLists>
 8016a1c:	e00d      	b.n	8016a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016a1e:	4b26      	ldr	r3, [pc, #152]	; (8016ab8 <prvAddNewTaskToReadyList+0xcc>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d109      	bne.n	8016a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016a26:	4b23      	ldr	r3, [pc, #140]	; (8016ab4 <prvAddNewTaskToReadyList+0xc8>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d802      	bhi.n	8016a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016a34:	4a1f      	ldr	r2, [pc, #124]	; (8016ab4 <prvAddNewTaskToReadyList+0xc8>)
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016a3a:	4b20      	ldr	r3, [pc, #128]	; (8016abc <prvAddNewTaskToReadyList+0xd0>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	3301      	adds	r3, #1
 8016a40:	4a1e      	ldr	r2, [pc, #120]	; (8016abc <prvAddNewTaskToReadyList+0xd0>)
 8016a42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016a44:	4b1d      	ldr	r3, [pc, #116]	; (8016abc <prvAddNewTaskToReadyList+0xd0>)
 8016a46:	681a      	ldr	r2, [r3, #0]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a50:	4b1b      	ldr	r3, [pc, #108]	; (8016ac0 <prvAddNewTaskToReadyList+0xd4>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d903      	bls.n	8016a60 <prvAddNewTaskToReadyList+0x74>
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a5c:	4a18      	ldr	r2, [pc, #96]	; (8016ac0 <prvAddNewTaskToReadyList+0xd4>)
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a64:	4613      	mov	r3, r2
 8016a66:	009b      	lsls	r3, r3, #2
 8016a68:	4413      	add	r3, r2
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	4a15      	ldr	r2, [pc, #84]	; (8016ac4 <prvAddNewTaskToReadyList+0xd8>)
 8016a6e:	441a      	add	r2, r3
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	3304      	adds	r3, #4
 8016a74:	4619      	mov	r1, r3
 8016a76:	4610      	mov	r0, r2
 8016a78:	f7fe fddb 	bl	8015632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016a7c:	f001 fbc2 	bl	8018204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016a80:	4b0d      	ldr	r3, [pc, #52]	; (8016ab8 <prvAddNewTaskToReadyList+0xcc>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d00e      	beq.n	8016aa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016a88:	4b0a      	ldr	r3, [pc, #40]	; (8016ab4 <prvAddNewTaskToReadyList+0xc8>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d207      	bcs.n	8016aa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016a96:	4b0c      	ldr	r3, [pc, #48]	; (8016ac8 <prvAddNewTaskToReadyList+0xdc>)
 8016a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	f3bf 8f4f 	dsb	sy
 8016aa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016aa6:	bf00      	nop
 8016aa8:	3708      	adds	r7, #8
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	200014c8 	.word	0x200014c8
 8016ab4:	20000ff4 	.word	0x20000ff4
 8016ab8:	200014d4 	.word	0x200014d4
 8016abc:	200014e4 	.word	0x200014e4
 8016ac0:	200014d0 	.word	0x200014d0
 8016ac4:	20000ff8 	.word	0x20000ff8
 8016ac8:	e000ed04 	.word	0xe000ed04

08016acc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016ad4:	f001 fb66 	bl	80181a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d102      	bne.n	8016ae4 <vTaskDelete+0x18>
 8016ade:	4b2c      	ldr	r3, [pc, #176]	; (8016b90 <vTaskDelete+0xc4>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	e000      	b.n	8016ae6 <vTaskDelete+0x1a>
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	3304      	adds	r3, #4
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7fe fdfd 	bl	80156ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d004      	beq.n	8016b04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	3318      	adds	r3, #24
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fe fdf4 	bl	80156ec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016b04:	4b23      	ldr	r3, [pc, #140]	; (8016b94 <vTaskDelete+0xc8>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	3301      	adds	r3, #1
 8016b0a:	4a22      	ldr	r2, [pc, #136]	; (8016b94 <vTaskDelete+0xc8>)
 8016b0c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016b0e:	4b20      	ldr	r3, [pc, #128]	; (8016b90 <vTaskDelete+0xc4>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	68fa      	ldr	r2, [r7, #12]
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d10b      	bne.n	8016b30 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	3304      	adds	r3, #4
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	481e      	ldr	r0, [pc, #120]	; (8016b98 <vTaskDelete+0xcc>)
 8016b20:	f7fe fd87 	bl	8015632 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016b24:	4b1d      	ldr	r3, [pc, #116]	; (8016b9c <vTaskDelete+0xd0>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	4a1c      	ldr	r2, [pc, #112]	; (8016b9c <vTaskDelete+0xd0>)
 8016b2c:	6013      	str	r3, [r2, #0]
 8016b2e:	e009      	b.n	8016b44 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016b30:	4b1b      	ldr	r3, [pc, #108]	; (8016ba0 <vTaskDelete+0xd4>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	3b01      	subs	r3, #1
 8016b36:	4a1a      	ldr	r2, [pc, #104]	; (8016ba0 <vTaskDelete+0xd4>)
 8016b38:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8016b3a:	68f8      	ldr	r0, [r7, #12]
 8016b3c:	f000 fc74 	bl	8017428 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016b40:	f000 fca6 	bl	8017490 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8016b44:	f001 fb5e 	bl	8018204 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8016b48:	4b16      	ldr	r3, [pc, #88]	; (8016ba4 <vTaskDelete+0xd8>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d01b      	beq.n	8016b88 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8016b50:	4b0f      	ldr	r3, [pc, #60]	; (8016b90 <vTaskDelete+0xc4>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	68fa      	ldr	r2, [r7, #12]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d116      	bne.n	8016b88 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8016b5a:	4b13      	ldr	r3, [pc, #76]	; (8016ba8 <vTaskDelete+0xdc>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00a      	beq.n	8016b78 <vTaskDelete+0xac>
	__asm volatile
 8016b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b66:	f383 8811 	msr	BASEPRI, r3
 8016b6a:	f3bf 8f6f 	isb	sy
 8016b6e:	f3bf 8f4f 	dsb	sy
 8016b72:	60bb      	str	r3, [r7, #8]
}
 8016b74:	bf00      	nop
 8016b76:	e7fe      	b.n	8016b76 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8016b78:	4b0c      	ldr	r3, [pc, #48]	; (8016bac <vTaskDelete+0xe0>)
 8016b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b7e:	601a      	str	r2, [r3, #0]
 8016b80:	f3bf 8f4f 	dsb	sy
 8016b84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016b88:	bf00      	nop
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}
 8016b90:	20000ff4 	.word	0x20000ff4
 8016b94:	200014e4 	.word	0x200014e4
 8016b98:	2000149c 	.word	0x2000149c
 8016b9c:	200014b0 	.word	0x200014b0
 8016ba0:	200014c8 	.word	0x200014c8
 8016ba4:	200014d4 	.word	0x200014d4
 8016ba8:	200014f0 	.word	0x200014f0
 8016bac:	e000ed04 	.word	0xe000ed04

08016bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d017      	beq.n	8016bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016bc2:	4b13      	ldr	r3, [pc, #76]	; (8016c10 <vTaskDelay+0x60>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d00a      	beq.n	8016be0 <vTaskDelay+0x30>
	__asm volatile
 8016bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	60bb      	str	r3, [r7, #8]
}
 8016bdc:	bf00      	nop
 8016bde:	e7fe      	b.n	8016bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016be0:	f000 f88a 	bl	8016cf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016be4:	2100      	movs	r1, #0
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 fe0c 	bl	8017804 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016bec:	f000 f892 	bl	8016d14 <xTaskResumeAll>
 8016bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d107      	bne.n	8016c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016bf8:	4b06      	ldr	r3, [pc, #24]	; (8016c14 <vTaskDelay+0x64>)
 8016bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bfe:	601a      	str	r2, [r3, #0]
 8016c00:	f3bf 8f4f 	dsb	sy
 8016c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c08:	bf00      	nop
 8016c0a:	3710      	adds	r7, #16
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}
 8016c10:	200014f0 	.word	0x200014f0
 8016c14:	e000ed04 	.word	0xe000ed04

08016c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b08a      	sub	sp, #40	; 0x28
 8016c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016c22:	2300      	movs	r3, #0
 8016c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016c26:	463a      	mov	r2, r7
 8016c28:	1d39      	adds	r1, r7, #4
 8016c2a:	f107 0308 	add.w	r3, r7, #8
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fe fc9e 	bl	8015570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016c34:	6839      	ldr	r1, [r7, #0]
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	68ba      	ldr	r2, [r7, #8]
 8016c3a:	9202      	str	r2, [sp, #8]
 8016c3c:	9301      	str	r3, [sp, #4]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	9300      	str	r3, [sp, #0]
 8016c42:	2300      	movs	r3, #0
 8016c44:	460a      	mov	r2, r1
 8016c46:	4924      	ldr	r1, [pc, #144]	; (8016cd8 <vTaskStartScheduler+0xc0>)
 8016c48:	4824      	ldr	r0, [pc, #144]	; (8016cdc <vTaskStartScheduler+0xc4>)
 8016c4a:	f7ff fd87 	bl	801675c <xTaskCreateStatic>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	4a23      	ldr	r2, [pc, #140]	; (8016ce0 <vTaskStartScheduler+0xc8>)
 8016c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016c54:	4b22      	ldr	r3, [pc, #136]	; (8016ce0 <vTaskStartScheduler+0xc8>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d002      	beq.n	8016c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	617b      	str	r3, [r7, #20]
 8016c60:	e001      	b.n	8016c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d102      	bne.n	8016c72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016c6c:	f000 fe1e 	bl	80178ac <xTimerCreateTimerTask>
 8016c70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d11b      	bne.n	8016cb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8016c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c7c:	f383 8811 	msr	BASEPRI, r3
 8016c80:	f3bf 8f6f 	isb	sy
 8016c84:	f3bf 8f4f 	dsb	sy
 8016c88:	613b      	str	r3, [r7, #16]
}
 8016c8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016c8c:	4b15      	ldr	r3, [pc, #84]	; (8016ce4 <vTaskStartScheduler+0xcc>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	3354      	adds	r3, #84	; 0x54
 8016c92:	4a15      	ldr	r2, [pc, #84]	; (8016ce8 <vTaskStartScheduler+0xd0>)
 8016c94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016c96:	4b15      	ldr	r3, [pc, #84]	; (8016cec <vTaskStartScheduler+0xd4>)
 8016c98:	f04f 32ff 	mov.w	r2, #4294967295
 8016c9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016c9e:	4b14      	ldr	r3, [pc, #80]	; (8016cf0 <vTaskStartScheduler+0xd8>)
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016ca4:	4b13      	ldr	r3, [pc, #76]	; (8016cf4 <vTaskStartScheduler+0xdc>)
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016caa:	f001 f9d9 	bl	8018060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016cae:	e00e      	b.n	8016cce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cb6:	d10a      	bne.n	8016cce <vTaskStartScheduler+0xb6>
	__asm volatile
 8016cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cbc:	f383 8811 	msr	BASEPRI, r3
 8016cc0:	f3bf 8f6f 	isb	sy
 8016cc4:	f3bf 8f4f 	dsb	sy
 8016cc8:	60fb      	str	r3, [r7, #12]
}
 8016cca:	bf00      	nop
 8016ccc:	e7fe      	b.n	8016ccc <vTaskStartScheduler+0xb4>
}
 8016cce:	bf00      	nop
 8016cd0:	3718      	adds	r7, #24
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	0802107c 	.word	0x0802107c
 8016cdc:	0801731d 	.word	0x0801731d
 8016ce0:	200014ec 	.word	0x200014ec
 8016ce4:	20000ff4 	.word	0x20000ff4
 8016ce8:	200001f8 	.word	0x200001f8
 8016cec:	200014e8 	.word	0x200014e8
 8016cf0:	200014d4 	.word	0x200014d4
 8016cf4:	200014cc 	.word	0x200014cc

08016cf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016cfc:	4b04      	ldr	r3, [pc, #16]	; (8016d10 <vTaskSuspendAll+0x18>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	3301      	adds	r3, #1
 8016d02:	4a03      	ldr	r2, [pc, #12]	; (8016d10 <vTaskSuspendAll+0x18>)
 8016d04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016d06:	bf00      	nop
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr
 8016d10:	200014f0 	.word	0x200014f0

08016d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016d22:	4b42      	ldr	r3, [pc, #264]	; (8016e2c <xTaskResumeAll+0x118>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d10a      	bne.n	8016d40 <xTaskResumeAll+0x2c>
	__asm volatile
 8016d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d2e:	f383 8811 	msr	BASEPRI, r3
 8016d32:	f3bf 8f6f 	isb	sy
 8016d36:	f3bf 8f4f 	dsb	sy
 8016d3a:	603b      	str	r3, [r7, #0]
}
 8016d3c:	bf00      	nop
 8016d3e:	e7fe      	b.n	8016d3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016d40:	f001 fa30 	bl	80181a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016d44:	4b39      	ldr	r3, [pc, #228]	; (8016e2c <xTaskResumeAll+0x118>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	3b01      	subs	r3, #1
 8016d4a:	4a38      	ldr	r2, [pc, #224]	; (8016e2c <xTaskResumeAll+0x118>)
 8016d4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d4e:	4b37      	ldr	r3, [pc, #220]	; (8016e2c <xTaskResumeAll+0x118>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d162      	bne.n	8016e1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016d56:	4b36      	ldr	r3, [pc, #216]	; (8016e30 <xTaskResumeAll+0x11c>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d05e      	beq.n	8016e1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d5e:	e02f      	b.n	8016dc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d60:	4b34      	ldr	r3, [pc, #208]	; (8016e34 <xTaskResumeAll+0x120>)
 8016d62:	68db      	ldr	r3, [r3, #12]
 8016d64:	68db      	ldr	r3, [r3, #12]
 8016d66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	3318      	adds	r3, #24
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7fe fcbd 	bl	80156ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	3304      	adds	r3, #4
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fe fcb8 	bl	80156ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d80:	4b2d      	ldr	r3, [pc, #180]	; (8016e38 <xTaskResumeAll+0x124>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d903      	bls.n	8016d90 <xTaskResumeAll+0x7c>
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d8c:	4a2a      	ldr	r2, [pc, #168]	; (8016e38 <xTaskResumeAll+0x124>)
 8016d8e:	6013      	str	r3, [r2, #0]
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d94:	4613      	mov	r3, r2
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	4413      	add	r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	4a27      	ldr	r2, [pc, #156]	; (8016e3c <xTaskResumeAll+0x128>)
 8016d9e:	441a      	add	r2, r3
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	3304      	adds	r3, #4
 8016da4:	4619      	mov	r1, r3
 8016da6:	4610      	mov	r0, r2
 8016da8:	f7fe fc43 	bl	8015632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db0:	4b23      	ldr	r3, [pc, #140]	; (8016e40 <xTaskResumeAll+0x12c>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d302      	bcc.n	8016dc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016dba:	4b22      	ldr	r3, [pc, #136]	; (8016e44 <xTaskResumeAll+0x130>)
 8016dbc:	2201      	movs	r2, #1
 8016dbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016dc0:	4b1c      	ldr	r3, [pc, #112]	; (8016e34 <xTaskResumeAll+0x120>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d1cb      	bne.n	8016d60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d001      	beq.n	8016dd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016dce:	f000 fb5f 	bl	8017490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016dd2:	4b1d      	ldr	r3, [pc, #116]	; (8016e48 <xTaskResumeAll+0x134>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d010      	beq.n	8016e00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016dde:	f000 f847 	bl	8016e70 <xTaskIncrementTick>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d002      	beq.n	8016dee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016de8:	4b16      	ldr	r3, [pc, #88]	; (8016e44 <xTaskResumeAll+0x130>)
 8016dea:	2201      	movs	r2, #1
 8016dec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	3b01      	subs	r3, #1
 8016df2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1f1      	bne.n	8016dde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016dfa:	4b13      	ldr	r3, [pc, #76]	; (8016e48 <xTaskResumeAll+0x134>)
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016e00:	4b10      	ldr	r3, [pc, #64]	; (8016e44 <xTaskResumeAll+0x130>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d009      	beq.n	8016e1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016e08:	2301      	movs	r3, #1
 8016e0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016e0c:	4b0f      	ldr	r3, [pc, #60]	; (8016e4c <xTaskResumeAll+0x138>)
 8016e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e12:	601a      	str	r2, [r3, #0]
 8016e14:	f3bf 8f4f 	dsb	sy
 8016e18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016e1c:	f001 f9f2 	bl	8018204 <vPortExitCritical>

	return xAlreadyYielded;
 8016e20:	68bb      	ldr	r3, [r7, #8]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3710      	adds	r7, #16
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	200014f0 	.word	0x200014f0
 8016e30:	200014c8 	.word	0x200014c8
 8016e34:	20001488 	.word	0x20001488
 8016e38:	200014d0 	.word	0x200014d0
 8016e3c:	20000ff8 	.word	0x20000ff8
 8016e40:	20000ff4 	.word	0x20000ff4
 8016e44:	200014dc 	.word	0x200014dc
 8016e48:	200014d8 	.word	0x200014d8
 8016e4c:	e000ed04 	.word	0xe000ed04

08016e50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016e50:	b480      	push	{r7}
 8016e52:	b083      	sub	sp, #12
 8016e54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016e56:	4b05      	ldr	r3, [pc, #20]	; (8016e6c <xTaskGetTickCount+0x1c>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016e5c:	687b      	ldr	r3, [r7, #4]
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	370c      	adds	r7, #12
 8016e62:	46bd      	mov	sp, r7
 8016e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop
 8016e6c:	200014cc 	.word	0x200014cc

08016e70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b086      	sub	sp, #24
 8016e74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016e76:	2300      	movs	r3, #0
 8016e78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e7a:	4b4f      	ldr	r3, [pc, #316]	; (8016fb8 <xTaskIncrementTick+0x148>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	f040 808f 	bne.w	8016fa2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016e84:	4b4d      	ldr	r3, [pc, #308]	; (8016fbc <xTaskIncrementTick+0x14c>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	3301      	adds	r3, #1
 8016e8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016e8c:	4a4b      	ldr	r2, [pc, #300]	; (8016fbc <xTaskIncrementTick+0x14c>)
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d120      	bne.n	8016eda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016e98:	4b49      	ldr	r3, [pc, #292]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d00a      	beq.n	8016eb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8016ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea6:	f383 8811 	msr	BASEPRI, r3
 8016eaa:	f3bf 8f6f 	isb	sy
 8016eae:	f3bf 8f4f 	dsb	sy
 8016eb2:	603b      	str	r3, [r7, #0]
}
 8016eb4:	bf00      	nop
 8016eb6:	e7fe      	b.n	8016eb6 <xTaskIncrementTick+0x46>
 8016eb8:	4b41      	ldr	r3, [pc, #260]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	60fb      	str	r3, [r7, #12]
 8016ebe:	4b41      	ldr	r3, [pc, #260]	; (8016fc4 <xTaskIncrementTick+0x154>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	4a3f      	ldr	r2, [pc, #252]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016ec4:	6013      	str	r3, [r2, #0]
 8016ec6:	4a3f      	ldr	r2, [pc, #252]	; (8016fc4 <xTaskIncrementTick+0x154>)
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	6013      	str	r3, [r2, #0]
 8016ecc:	4b3e      	ldr	r3, [pc, #248]	; (8016fc8 <xTaskIncrementTick+0x158>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	4a3d      	ldr	r2, [pc, #244]	; (8016fc8 <xTaskIncrementTick+0x158>)
 8016ed4:	6013      	str	r3, [r2, #0]
 8016ed6:	f000 fadb 	bl	8017490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016eda:	4b3c      	ldr	r3, [pc, #240]	; (8016fcc <xTaskIncrementTick+0x15c>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	693a      	ldr	r2, [r7, #16]
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d349      	bcc.n	8016f78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ee4:	4b36      	ldr	r3, [pc, #216]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d104      	bne.n	8016ef8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eee:	4b37      	ldr	r3, [pc, #220]	; (8016fcc <xTaskIncrementTick+0x15c>)
 8016ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ef4:	601a      	str	r2, [r3, #0]
					break;
 8016ef6:	e03f      	b.n	8016f78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ef8:	4b31      	ldr	r3, [pc, #196]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	68db      	ldr	r3, [r3, #12]
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016f08:	693a      	ldr	r2, [r7, #16]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d203      	bcs.n	8016f18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016f10:	4a2e      	ldr	r2, [pc, #184]	; (8016fcc <xTaskIncrementTick+0x15c>)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016f16:	e02f      	b.n	8016f78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	3304      	adds	r3, #4
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fe fbe5 	bl	80156ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d004      	beq.n	8016f34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	3318      	adds	r3, #24
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7fe fbdc 	bl	80156ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f38:	4b25      	ldr	r3, [pc, #148]	; (8016fd0 <xTaskIncrementTick+0x160>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	429a      	cmp	r2, r3
 8016f3e:	d903      	bls.n	8016f48 <xTaskIncrementTick+0xd8>
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f44:	4a22      	ldr	r2, [pc, #136]	; (8016fd0 <xTaskIncrementTick+0x160>)
 8016f46:	6013      	str	r3, [r2, #0]
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	4413      	add	r3, r2
 8016f52:	009b      	lsls	r3, r3, #2
 8016f54:	4a1f      	ldr	r2, [pc, #124]	; (8016fd4 <xTaskIncrementTick+0x164>)
 8016f56:	441a      	add	r2, r3
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	3304      	adds	r3, #4
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	4610      	mov	r0, r2
 8016f60:	f7fe fb67 	bl	8015632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f68:	4b1b      	ldr	r3, [pc, #108]	; (8016fd8 <xTaskIncrementTick+0x168>)
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d3b8      	bcc.n	8016ee4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016f72:	2301      	movs	r3, #1
 8016f74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f76:	e7b5      	b.n	8016ee4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016f78:	4b17      	ldr	r3, [pc, #92]	; (8016fd8 <xTaskIncrementTick+0x168>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f7e:	4915      	ldr	r1, [pc, #84]	; (8016fd4 <xTaskIncrementTick+0x164>)
 8016f80:	4613      	mov	r3, r2
 8016f82:	009b      	lsls	r3, r3, #2
 8016f84:	4413      	add	r3, r2
 8016f86:	009b      	lsls	r3, r3, #2
 8016f88:	440b      	add	r3, r1
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d901      	bls.n	8016f94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016f90:	2301      	movs	r3, #1
 8016f92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016f94:	4b11      	ldr	r3, [pc, #68]	; (8016fdc <xTaskIncrementTick+0x16c>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d007      	beq.n	8016fac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	617b      	str	r3, [r7, #20]
 8016fa0:	e004      	b.n	8016fac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016fa2:	4b0f      	ldr	r3, [pc, #60]	; (8016fe0 <xTaskIncrementTick+0x170>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	4a0d      	ldr	r2, [pc, #52]	; (8016fe0 <xTaskIncrementTick+0x170>)
 8016faa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016fac:	697b      	ldr	r3, [r7, #20]
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3718      	adds	r7, #24
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	200014f0 	.word	0x200014f0
 8016fbc:	200014cc 	.word	0x200014cc
 8016fc0:	20001480 	.word	0x20001480
 8016fc4:	20001484 	.word	0x20001484
 8016fc8:	200014e0 	.word	0x200014e0
 8016fcc:	200014e8 	.word	0x200014e8
 8016fd0:	200014d0 	.word	0x200014d0
 8016fd4:	20000ff8 	.word	0x20000ff8
 8016fd8:	20000ff4 	.word	0x20000ff4
 8016fdc:	200014dc 	.word	0x200014dc
 8016fe0:	200014d8 	.word	0x200014d8

08016fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b085      	sub	sp, #20
 8016fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016fea:	4b2a      	ldr	r3, [pc, #168]	; (8017094 <vTaskSwitchContext+0xb0>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d003      	beq.n	8016ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016ff2:	4b29      	ldr	r3, [pc, #164]	; (8017098 <vTaskSwitchContext+0xb4>)
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016ff8:	e046      	b.n	8017088 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8016ffa:	4b27      	ldr	r3, [pc, #156]	; (8017098 <vTaskSwitchContext+0xb4>)
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017000:	4b26      	ldr	r3, [pc, #152]	; (801709c <vTaskSwitchContext+0xb8>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	60fb      	str	r3, [r7, #12]
 8017006:	e010      	b.n	801702a <vTaskSwitchContext+0x46>
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d10a      	bne.n	8017024 <vTaskSwitchContext+0x40>
	__asm volatile
 801700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017012:	f383 8811 	msr	BASEPRI, r3
 8017016:	f3bf 8f6f 	isb	sy
 801701a:	f3bf 8f4f 	dsb	sy
 801701e:	607b      	str	r3, [r7, #4]
}
 8017020:	bf00      	nop
 8017022:	e7fe      	b.n	8017022 <vTaskSwitchContext+0x3e>
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	3b01      	subs	r3, #1
 8017028:	60fb      	str	r3, [r7, #12]
 801702a:	491d      	ldr	r1, [pc, #116]	; (80170a0 <vTaskSwitchContext+0xbc>)
 801702c:	68fa      	ldr	r2, [r7, #12]
 801702e:	4613      	mov	r3, r2
 8017030:	009b      	lsls	r3, r3, #2
 8017032:	4413      	add	r3, r2
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	440b      	add	r3, r1
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d0e4      	beq.n	8017008 <vTaskSwitchContext+0x24>
 801703e:	68fa      	ldr	r2, [r7, #12]
 8017040:	4613      	mov	r3, r2
 8017042:	009b      	lsls	r3, r3, #2
 8017044:	4413      	add	r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	4a15      	ldr	r2, [pc, #84]	; (80170a0 <vTaskSwitchContext+0xbc>)
 801704a:	4413      	add	r3, r2
 801704c:	60bb      	str	r3, [r7, #8]
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	685a      	ldr	r2, [r3, #4]
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	605a      	str	r2, [r3, #4]
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	685a      	ldr	r2, [r3, #4]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	3308      	adds	r3, #8
 8017060:	429a      	cmp	r2, r3
 8017062:	d104      	bne.n	801706e <vTaskSwitchContext+0x8a>
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	685a      	ldr	r2, [r3, #4]
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	605a      	str	r2, [r3, #4]
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	68db      	ldr	r3, [r3, #12]
 8017074:	4a0b      	ldr	r2, [pc, #44]	; (80170a4 <vTaskSwitchContext+0xc0>)
 8017076:	6013      	str	r3, [r2, #0]
 8017078:	4a08      	ldr	r2, [pc, #32]	; (801709c <vTaskSwitchContext+0xb8>)
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801707e:	4b09      	ldr	r3, [pc, #36]	; (80170a4 <vTaskSwitchContext+0xc0>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	3354      	adds	r3, #84	; 0x54
 8017084:	4a08      	ldr	r2, [pc, #32]	; (80170a8 <vTaskSwitchContext+0xc4>)
 8017086:	6013      	str	r3, [r2, #0]
}
 8017088:	bf00      	nop
 801708a:	3714      	adds	r7, #20
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr
 8017094:	200014f0 	.word	0x200014f0
 8017098:	200014dc 	.word	0x200014dc
 801709c:	200014d0 	.word	0x200014d0
 80170a0:	20000ff8 	.word	0x20000ff8
 80170a4:	20000ff4 	.word	0x20000ff4
 80170a8:	200001f8 	.word	0x200001f8

080170ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b084      	sub	sp, #16
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d10a      	bne.n	80170d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80170bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c0:	f383 8811 	msr	BASEPRI, r3
 80170c4:	f3bf 8f6f 	isb	sy
 80170c8:	f3bf 8f4f 	dsb	sy
 80170cc:	60fb      	str	r3, [r7, #12]
}
 80170ce:	bf00      	nop
 80170d0:	e7fe      	b.n	80170d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170d2:	4b07      	ldr	r3, [pc, #28]	; (80170f0 <vTaskPlaceOnEventList+0x44>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	3318      	adds	r3, #24
 80170d8:	4619      	mov	r1, r3
 80170da:	6878      	ldr	r0, [r7, #4]
 80170dc:	f7fe facd 	bl	801567a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80170e0:	2101      	movs	r1, #1
 80170e2:	6838      	ldr	r0, [r7, #0]
 80170e4:	f000 fb8e 	bl	8017804 <prvAddCurrentTaskToDelayedList>
}
 80170e8:	bf00      	nop
 80170ea:	3710      	adds	r7, #16
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}
 80170f0:	20000ff4 	.word	0x20000ff4

080170f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b086      	sub	sp, #24
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d10a      	bne.n	801711c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801710a:	f383 8811 	msr	BASEPRI, r3
 801710e:	f3bf 8f6f 	isb	sy
 8017112:	f3bf 8f4f 	dsb	sy
 8017116:	617b      	str	r3, [r7, #20]
}
 8017118:	bf00      	nop
 801711a:	e7fe      	b.n	801711a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801711c:	4b0a      	ldr	r3, [pc, #40]	; (8017148 <vTaskPlaceOnEventListRestricted+0x54>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	3318      	adds	r3, #24
 8017122:	4619      	mov	r1, r3
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f7fe fa84 	bl	8015632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d002      	beq.n	8017136 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017130:	f04f 33ff 	mov.w	r3, #4294967295
 8017134:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017136:	6879      	ldr	r1, [r7, #4]
 8017138:	68b8      	ldr	r0, [r7, #8]
 801713a:	f000 fb63 	bl	8017804 <prvAddCurrentTaskToDelayedList>
	}
 801713e:	bf00      	nop
 8017140:	3718      	adds	r7, #24
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	20000ff4 	.word	0x20000ff4

0801714c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b086      	sub	sp, #24
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	68db      	ldr	r3, [r3, #12]
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801715c:	693b      	ldr	r3, [r7, #16]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d10a      	bne.n	8017178 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017166:	f383 8811 	msr	BASEPRI, r3
 801716a:	f3bf 8f6f 	isb	sy
 801716e:	f3bf 8f4f 	dsb	sy
 8017172:	60fb      	str	r3, [r7, #12]
}
 8017174:	bf00      	nop
 8017176:	e7fe      	b.n	8017176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	3318      	adds	r3, #24
 801717c:	4618      	mov	r0, r3
 801717e:	f7fe fab5 	bl	80156ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017182:	4b1e      	ldr	r3, [pc, #120]	; (80171fc <xTaskRemoveFromEventList+0xb0>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d11d      	bne.n	80171c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	3304      	adds	r3, #4
 801718e:	4618      	mov	r0, r3
 8017190:	f7fe faac 	bl	80156ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017194:	693b      	ldr	r3, [r7, #16]
 8017196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017198:	4b19      	ldr	r3, [pc, #100]	; (8017200 <xTaskRemoveFromEventList+0xb4>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	429a      	cmp	r2, r3
 801719e:	d903      	bls.n	80171a8 <xTaskRemoveFromEventList+0x5c>
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171a4:	4a16      	ldr	r2, [pc, #88]	; (8017200 <xTaskRemoveFromEventList+0xb4>)
 80171a6:	6013      	str	r3, [r2, #0]
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ac:	4613      	mov	r3, r2
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	4413      	add	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	4a13      	ldr	r2, [pc, #76]	; (8017204 <xTaskRemoveFromEventList+0xb8>)
 80171b6:	441a      	add	r2, r3
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	3304      	adds	r3, #4
 80171bc:	4619      	mov	r1, r3
 80171be:	4610      	mov	r0, r2
 80171c0:	f7fe fa37 	bl	8015632 <vListInsertEnd>
 80171c4:	e005      	b.n	80171d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	3318      	adds	r3, #24
 80171ca:	4619      	mov	r1, r3
 80171cc:	480e      	ldr	r0, [pc, #56]	; (8017208 <xTaskRemoveFromEventList+0xbc>)
 80171ce:	f7fe fa30 	bl	8015632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171d6:	4b0d      	ldr	r3, [pc, #52]	; (801720c <xTaskRemoveFromEventList+0xc0>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171dc:	429a      	cmp	r2, r3
 80171de:	d905      	bls.n	80171ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80171e0:	2301      	movs	r3, #1
 80171e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80171e4:	4b0a      	ldr	r3, [pc, #40]	; (8017210 <xTaskRemoveFromEventList+0xc4>)
 80171e6:	2201      	movs	r2, #1
 80171e8:	601a      	str	r2, [r3, #0]
 80171ea:	e001      	b.n	80171f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80171ec:	2300      	movs	r3, #0
 80171ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80171f0:	697b      	ldr	r3, [r7, #20]
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3718      	adds	r7, #24
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	200014f0 	.word	0x200014f0
 8017200:	200014d0 	.word	0x200014d0
 8017204:	20000ff8 	.word	0x20000ff8
 8017208:	20001488 	.word	0x20001488
 801720c:	20000ff4 	.word	0x20000ff4
 8017210:	200014dc 	.word	0x200014dc

08017214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017214:	b480      	push	{r7}
 8017216:	b083      	sub	sp, #12
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801721c:	4b06      	ldr	r3, [pc, #24]	; (8017238 <vTaskInternalSetTimeOutState+0x24>)
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017224:	4b05      	ldr	r3, [pc, #20]	; (801723c <vTaskInternalSetTimeOutState+0x28>)
 8017226:	681a      	ldr	r2, [r3, #0]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	605a      	str	r2, [r3, #4]
}
 801722c:	bf00      	nop
 801722e:	370c      	adds	r7, #12
 8017230:	46bd      	mov	sp, r7
 8017232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017236:	4770      	bx	lr
 8017238:	200014e0 	.word	0x200014e0
 801723c:	200014cc 	.word	0x200014cc

08017240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b088      	sub	sp, #32
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10a      	bne.n	8017266 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017254:	f383 8811 	msr	BASEPRI, r3
 8017258:	f3bf 8f6f 	isb	sy
 801725c:	f3bf 8f4f 	dsb	sy
 8017260:	613b      	str	r3, [r7, #16]
}
 8017262:	bf00      	nop
 8017264:	e7fe      	b.n	8017264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d10a      	bne.n	8017282 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017270:	f383 8811 	msr	BASEPRI, r3
 8017274:	f3bf 8f6f 	isb	sy
 8017278:	f3bf 8f4f 	dsb	sy
 801727c:	60fb      	str	r3, [r7, #12]
}
 801727e:	bf00      	nop
 8017280:	e7fe      	b.n	8017280 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017282:	f000 ff8f 	bl	80181a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017286:	4b1d      	ldr	r3, [pc, #116]	; (80172fc <xTaskCheckForTimeOut+0xbc>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	69ba      	ldr	r2, [r7, #24]
 8017292:	1ad3      	subs	r3, r2, r3
 8017294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801729e:	d102      	bne.n	80172a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80172a0:	2300      	movs	r3, #0
 80172a2:	61fb      	str	r3, [r7, #28]
 80172a4:	e023      	b.n	80172ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	4b15      	ldr	r3, [pc, #84]	; (8017300 <xTaskCheckForTimeOut+0xc0>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d007      	beq.n	80172c2 <xTaskCheckForTimeOut+0x82>
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	69ba      	ldr	r2, [r7, #24]
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d302      	bcc.n	80172c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80172bc:	2301      	movs	r3, #1
 80172be:	61fb      	str	r3, [r7, #28]
 80172c0:	e015      	b.n	80172ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	697a      	ldr	r2, [r7, #20]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d20b      	bcs.n	80172e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	1ad2      	subs	r2, r2, r3
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f7ff ff9b 	bl	8017214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80172de:	2300      	movs	r3, #0
 80172e0:	61fb      	str	r3, [r7, #28]
 80172e2:	e004      	b.n	80172ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	2200      	movs	r2, #0
 80172e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80172ea:	2301      	movs	r3, #1
 80172ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80172ee:	f000 ff89 	bl	8018204 <vPortExitCritical>

	return xReturn;
 80172f2:	69fb      	ldr	r3, [r7, #28]
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3720      	adds	r7, #32
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	200014cc 	.word	0x200014cc
 8017300:	200014e0 	.word	0x200014e0

08017304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017304:	b480      	push	{r7}
 8017306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017308:	4b03      	ldr	r3, [pc, #12]	; (8017318 <vTaskMissedYield+0x14>)
 801730a:	2201      	movs	r2, #1
 801730c:	601a      	str	r2, [r3, #0]
}
 801730e:	bf00      	nop
 8017310:	46bd      	mov	sp, r7
 8017312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017316:	4770      	bx	lr
 8017318:	200014dc 	.word	0x200014dc

0801731c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017324:	f000 f852 	bl	80173cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017328:	4b06      	ldr	r3, [pc, #24]	; (8017344 <prvIdleTask+0x28>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	2b01      	cmp	r3, #1
 801732e:	d9f9      	bls.n	8017324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017330:	4b05      	ldr	r3, [pc, #20]	; (8017348 <prvIdleTask+0x2c>)
 8017332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017336:	601a      	str	r2, [r3, #0]
 8017338:	f3bf 8f4f 	dsb	sy
 801733c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017340:	e7f0      	b.n	8017324 <prvIdleTask+0x8>
 8017342:	bf00      	nop
 8017344:	20000ff8 	.word	0x20000ff8
 8017348:	e000ed04 	.word	0xe000ed04

0801734c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017352:	2300      	movs	r3, #0
 8017354:	607b      	str	r3, [r7, #4]
 8017356:	e00c      	b.n	8017372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017358:	687a      	ldr	r2, [r7, #4]
 801735a:	4613      	mov	r3, r2
 801735c:	009b      	lsls	r3, r3, #2
 801735e:	4413      	add	r3, r2
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	4a12      	ldr	r2, [pc, #72]	; (80173ac <prvInitialiseTaskLists+0x60>)
 8017364:	4413      	add	r3, r2
 8017366:	4618      	mov	r0, r3
 8017368:	f7fe f936 	bl	80155d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	3301      	adds	r3, #1
 8017370:	607b      	str	r3, [r7, #4]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2b37      	cmp	r3, #55	; 0x37
 8017376:	d9ef      	bls.n	8017358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017378:	480d      	ldr	r0, [pc, #52]	; (80173b0 <prvInitialiseTaskLists+0x64>)
 801737a:	f7fe f92d 	bl	80155d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801737e:	480d      	ldr	r0, [pc, #52]	; (80173b4 <prvInitialiseTaskLists+0x68>)
 8017380:	f7fe f92a 	bl	80155d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017384:	480c      	ldr	r0, [pc, #48]	; (80173b8 <prvInitialiseTaskLists+0x6c>)
 8017386:	f7fe f927 	bl	80155d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801738a:	480c      	ldr	r0, [pc, #48]	; (80173bc <prvInitialiseTaskLists+0x70>)
 801738c:	f7fe f924 	bl	80155d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017390:	480b      	ldr	r0, [pc, #44]	; (80173c0 <prvInitialiseTaskLists+0x74>)
 8017392:	f7fe f921 	bl	80155d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017396:	4b0b      	ldr	r3, [pc, #44]	; (80173c4 <prvInitialiseTaskLists+0x78>)
 8017398:	4a05      	ldr	r2, [pc, #20]	; (80173b0 <prvInitialiseTaskLists+0x64>)
 801739a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801739c:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <prvInitialiseTaskLists+0x7c>)
 801739e:	4a05      	ldr	r2, [pc, #20]	; (80173b4 <prvInitialiseTaskLists+0x68>)
 80173a0:	601a      	str	r2, [r3, #0]
}
 80173a2:	bf00      	nop
 80173a4:	3708      	adds	r7, #8
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	20000ff8 	.word	0x20000ff8
 80173b0:	20001458 	.word	0x20001458
 80173b4:	2000146c 	.word	0x2000146c
 80173b8:	20001488 	.word	0x20001488
 80173bc:	2000149c 	.word	0x2000149c
 80173c0:	200014b4 	.word	0x200014b4
 80173c4:	20001480 	.word	0x20001480
 80173c8:	20001484 	.word	0x20001484

080173cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173d2:	e019      	b.n	8017408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80173d4:	f000 fee6 	bl	80181a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173d8:	4b10      	ldr	r3, [pc, #64]	; (801741c <prvCheckTasksWaitingTermination+0x50>)
 80173da:	68db      	ldr	r3, [r3, #12]
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	3304      	adds	r3, #4
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7fe f981 	bl	80156ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80173ea:	4b0d      	ldr	r3, [pc, #52]	; (8017420 <prvCheckTasksWaitingTermination+0x54>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	3b01      	subs	r3, #1
 80173f0:	4a0b      	ldr	r2, [pc, #44]	; (8017420 <prvCheckTasksWaitingTermination+0x54>)
 80173f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80173f4:	4b0b      	ldr	r3, [pc, #44]	; (8017424 <prvCheckTasksWaitingTermination+0x58>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	3b01      	subs	r3, #1
 80173fa:	4a0a      	ldr	r2, [pc, #40]	; (8017424 <prvCheckTasksWaitingTermination+0x58>)
 80173fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80173fe:	f000 ff01 	bl	8018204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	f000 f810 	bl	8017428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017408:	4b06      	ldr	r3, [pc, #24]	; (8017424 <prvCheckTasksWaitingTermination+0x58>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d1e1      	bne.n	80173d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017410:	bf00      	nop
 8017412:	bf00      	nop
 8017414:	3708      	adds	r7, #8
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	2000149c 	.word	0x2000149c
 8017420:	200014c8 	.word	0x200014c8
 8017424:	200014b0 	.word	0x200014b0

08017428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017428:	b580      	push	{r7, lr}
 801742a:	b084      	sub	sp, #16
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	3354      	adds	r3, #84	; 0x54
 8017434:	4618      	mov	r0, r3
 8017436:	f003 ffc9 	bl	801b3cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017440:	2b00      	cmp	r3, #0
 8017442:	d108      	bne.n	8017456 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017448:	4618      	mov	r0, r3
 801744a:	f001 f899 	bl	8018580 <vPortFree>
				vPortFree( pxTCB );
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f001 f896 	bl	8018580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017454:	e018      	b.n	8017488 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801745c:	2b01      	cmp	r3, #1
 801745e:	d103      	bne.n	8017468 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017460:	6878      	ldr	r0, [r7, #4]
 8017462:	f001 f88d 	bl	8018580 <vPortFree>
	}
 8017466:	e00f      	b.n	8017488 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801746e:	2b02      	cmp	r3, #2
 8017470:	d00a      	beq.n	8017488 <prvDeleteTCB+0x60>
	__asm volatile
 8017472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017476:	f383 8811 	msr	BASEPRI, r3
 801747a:	f3bf 8f6f 	isb	sy
 801747e:	f3bf 8f4f 	dsb	sy
 8017482:	60fb      	str	r3, [r7, #12]
}
 8017484:	bf00      	nop
 8017486:	e7fe      	b.n	8017486 <prvDeleteTCB+0x5e>
	}
 8017488:	bf00      	nop
 801748a:	3710      	adds	r7, #16
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017490:	b480      	push	{r7}
 8017492:	b083      	sub	sp, #12
 8017494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017496:	4b0c      	ldr	r3, [pc, #48]	; (80174c8 <prvResetNextTaskUnblockTime+0x38>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d104      	bne.n	80174aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80174a0:	4b0a      	ldr	r3, [pc, #40]	; (80174cc <prvResetNextTaskUnblockTime+0x3c>)
 80174a2:	f04f 32ff 	mov.w	r2, #4294967295
 80174a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80174a8:	e008      	b.n	80174bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174aa:	4b07      	ldr	r3, [pc, #28]	; (80174c8 <prvResetNextTaskUnblockTime+0x38>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	68db      	ldr	r3, [r3, #12]
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	4a04      	ldr	r2, [pc, #16]	; (80174cc <prvResetNextTaskUnblockTime+0x3c>)
 80174ba:	6013      	str	r3, [r2, #0]
}
 80174bc:	bf00      	nop
 80174be:	370c      	adds	r7, #12
 80174c0:	46bd      	mov	sp, r7
 80174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c6:	4770      	bx	lr
 80174c8:	20001480 	.word	0x20001480
 80174cc:	200014e8 	.word	0x200014e8

080174d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80174d0:	b480      	push	{r7}
 80174d2:	b083      	sub	sp, #12
 80174d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80174d6:	4b05      	ldr	r3, [pc, #20]	; (80174ec <xTaskGetCurrentTaskHandle+0x1c>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80174dc:	687b      	ldr	r3, [r7, #4]
	}
 80174de:	4618      	mov	r0, r3
 80174e0:	370c      	adds	r7, #12
 80174e2:	46bd      	mov	sp, r7
 80174e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e8:	4770      	bx	lr
 80174ea:	bf00      	nop
 80174ec:	20000ff4 	.word	0x20000ff4

080174f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80174f0:	b480      	push	{r7}
 80174f2:	b083      	sub	sp, #12
 80174f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80174f6:	4b0b      	ldr	r3, [pc, #44]	; (8017524 <xTaskGetSchedulerState+0x34>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d102      	bne.n	8017504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80174fe:	2301      	movs	r3, #1
 8017500:	607b      	str	r3, [r7, #4]
 8017502:	e008      	b.n	8017516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017504:	4b08      	ldr	r3, [pc, #32]	; (8017528 <xTaskGetSchedulerState+0x38>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d102      	bne.n	8017512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801750c:	2302      	movs	r3, #2
 801750e:	607b      	str	r3, [r7, #4]
 8017510:	e001      	b.n	8017516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017512:	2300      	movs	r3, #0
 8017514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017516:	687b      	ldr	r3, [r7, #4]
	}
 8017518:	4618      	mov	r0, r3
 801751a:	370c      	adds	r7, #12
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr
 8017524:	200014d4 	.word	0x200014d4
 8017528:	200014f0 	.word	0x200014f0

0801752c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017538:	2300      	movs	r3, #0
 801753a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d051      	beq.n	80175e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017546:	4b2a      	ldr	r3, [pc, #168]	; (80175f0 <xTaskPriorityInherit+0xc4>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801754c:	429a      	cmp	r2, r3
 801754e:	d241      	bcs.n	80175d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	699b      	ldr	r3, [r3, #24]
 8017554:	2b00      	cmp	r3, #0
 8017556:	db06      	blt.n	8017566 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017558:	4b25      	ldr	r3, [pc, #148]	; (80175f0 <xTaskPriorityInherit+0xc4>)
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801755e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	6959      	ldr	r1, [r3, #20]
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801756e:	4613      	mov	r3, r2
 8017570:	009b      	lsls	r3, r3, #2
 8017572:	4413      	add	r3, r2
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	4a1f      	ldr	r2, [pc, #124]	; (80175f4 <xTaskPriorityInherit+0xc8>)
 8017578:	4413      	add	r3, r2
 801757a:	4299      	cmp	r1, r3
 801757c:	d122      	bne.n	80175c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	3304      	adds	r3, #4
 8017582:	4618      	mov	r0, r3
 8017584:	f7fe f8b2 	bl	80156ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017588:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <xTaskPriorityInherit+0xc4>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017596:	4b18      	ldr	r3, [pc, #96]	; (80175f8 <xTaskPriorityInherit+0xcc>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	429a      	cmp	r2, r3
 801759c:	d903      	bls.n	80175a6 <xTaskPriorityInherit+0x7a>
 801759e:	68bb      	ldr	r3, [r7, #8]
 80175a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175a2:	4a15      	ldr	r2, [pc, #84]	; (80175f8 <xTaskPriorityInherit+0xcc>)
 80175a4:	6013      	str	r3, [r2, #0]
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175aa:	4613      	mov	r3, r2
 80175ac:	009b      	lsls	r3, r3, #2
 80175ae:	4413      	add	r3, r2
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	4a10      	ldr	r2, [pc, #64]	; (80175f4 <xTaskPriorityInherit+0xc8>)
 80175b4:	441a      	add	r2, r3
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	3304      	adds	r3, #4
 80175ba:	4619      	mov	r1, r3
 80175bc:	4610      	mov	r0, r2
 80175be:	f7fe f838 	bl	8015632 <vListInsertEnd>
 80175c2:	e004      	b.n	80175ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80175c4:	4b0a      	ldr	r3, [pc, #40]	; (80175f0 <xTaskPriorityInherit+0xc4>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80175ce:	2301      	movs	r3, #1
 80175d0:	60fb      	str	r3, [r7, #12]
 80175d2:	e008      	b.n	80175e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80175d8:	4b05      	ldr	r3, [pc, #20]	; (80175f0 <xTaskPriorityInherit+0xc4>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175de:	429a      	cmp	r2, r3
 80175e0:	d201      	bcs.n	80175e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80175e2:	2301      	movs	r3, #1
 80175e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80175e6:	68fb      	ldr	r3, [r7, #12]
	}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	20000ff4 	.word	0x20000ff4
 80175f4:	20000ff8 	.word	0x20000ff8
 80175f8:	200014d0 	.word	0x200014d0

080175fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b086      	sub	sp, #24
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017608:	2300      	movs	r3, #0
 801760a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d056      	beq.n	80176c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017612:	4b2e      	ldr	r3, [pc, #184]	; (80176cc <xTaskPriorityDisinherit+0xd0>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	693a      	ldr	r2, [r7, #16]
 8017618:	429a      	cmp	r2, r3
 801761a:	d00a      	beq.n	8017632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017620:	f383 8811 	msr	BASEPRI, r3
 8017624:	f3bf 8f6f 	isb	sy
 8017628:	f3bf 8f4f 	dsb	sy
 801762c:	60fb      	str	r3, [r7, #12]
}
 801762e:	bf00      	nop
 8017630:	e7fe      	b.n	8017630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017632:	693b      	ldr	r3, [r7, #16]
 8017634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017636:	2b00      	cmp	r3, #0
 8017638:	d10a      	bne.n	8017650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801763e:	f383 8811 	msr	BASEPRI, r3
 8017642:	f3bf 8f6f 	isb	sy
 8017646:	f3bf 8f4f 	dsb	sy
 801764a:	60bb      	str	r3, [r7, #8]
}
 801764c:	bf00      	nop
 801764e:	e7fe      	b.n	801764e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017654:	1e5a      	subs	r2, r3, #1
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017662:	429a      	cmp	r2, r3
 8017664:	d02c      	beq.n	80176c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801766a:	2b00      	cmp	r3, #0
 801766c:	d128      	bne.n	80176c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	3304      	adds	r3, #4
 8017672:	4618      	mov	r0, r3
 8017674:	f7fe f83a 	bl	80156ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017684:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017690:	4b0f      	ldr	r3, [pc, #60]	; (80176d0 <xTaskPriorityDisinherit+0xd4>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	429a      	cmp	r2, r3
 8017696:	d903      	bls.n	80176a0 <xTaskPriorityDisinherit+0xa4>
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801769c:	4a0c      	ldr	r2, [pc, #48]	; (80176d0 <xTaskPriorityDisinherit+0xd4>)
 801769e:	6013      	str	r3, [r2, #0]
 80176a0:	693b      	ldr	r3, [r7, #16]
 80176a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a4:	4613      	mov	r3, r2
 80176a6:	009b      	lsls	r3, r3, #2
 80176a8:	4413      	add	r3, r2
 80176aa:	009b      	lsls	r3, r3, #2
 80176ac:	4a09      	ldr	r2, [pc, #36]	; (80176d4 <xTaskPriorityDisinherit+0xd8>)
 80176ae:	441a      	add	r2, r3
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	3304      	adds	r3, #4
 80176b4:	4619      	mov	r1, r3
 80176b6:	4610      	mov	r0, r2
 80176b8:	f7fd ffbb 	bl	8015632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80176bc:	2301      	movs	r3, #1
 80176be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80176c0:	697b      	ldr	r3, [r7, #20]
	}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3718      	adds	r7, #24
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	20000ff4 	.word	0x20000ff4
 80176d0:	200014d0 	.word	0x200014d0
 80176d4:	20000ff8 	.word	0x20000ff8

080176d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b088      	sub	sp, #32
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80176e6:	2301      	movs	r3, #1
 80176e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d06a      	beq.n	80177c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80176f0:	69bb      	ldr	r3, [r7, #24]
 80176f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d10a      	bne.n	801770e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80176f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176fc:	f383 8811 	msr	BASEPRI, r3
 8017700:	f3bf 8f6f 	isb	sy
 8017704:	f3bf 8f4f 	dsb	sy
 8017708:	60fb      	str	r3, [r7, #12]
}
 801770a:	bf00      	nop
 801770c:	e7fe      	b.n	801770c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801770e:	69bb      	ldr	r3, [r7, #24]
 8017710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017712:	683a      	ldr	r2, [r7, #0]
 8017714:	429a      	cmp	r2, r3
 8017716:	d902      	bls.n	801771e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	61fb      	str	r3, [r7, #28]
 801771c:	e002      	b.n	8017724 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801771e:	69bb      	ldr	r3, [r7, #24]
 8017720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017722:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017724:	69bb      	ldr	r3, [r7, #24]
 8017726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017728:	69fa      	ldr	r2, [r7, #28]
 801772a:	429a      	cmp	r2, r3
 801772c:	d04b      	beq.n	80177c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801772e:	69bb      	ldr	r3, [r7, #24]
 8017730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017732:	697a      	ldr	r2, [r7, #20]
 8017734:	429a      	cmp	r2, r3
 8017736:	d146      	bne.n	80177c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017738:	4b25      	ldr	r3, [pc, #148]	; (80177d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	69ba      	ldr	r2, [r7, #24]
 801773e:	429a      	cmp	r2, r3
 8017740:	d10a      	bne.n	8017758 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017746:	f383 8811 	msr	BASEPRI, r3
 801774a:	f3bf 8f6f 	isb	sy
 801774e:	f3bf 8f4f 	dsb	sy
 8017752:	60bb      	str	r3, [r7, #8]
}
 8017754:	bf00      	nop
 8017756:	e7fe      	b.n	8017756 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017758:	69bb      	ldr	r3, [r7, #24]
 801775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801775c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801775e:	69bb      	ldr	r3, [r7, #24]
 8017760:	69fa      	ldr	r2, [r7, #28]
 8017762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	699b      	ldr	r3, [r3, #24]
 8017768:	2b00      	cmp	r3, #0
 801776a:	db04      	blt.n	8017776 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801776c:	69fb      	ldr	r3, [r7, #28]
 801776e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017772:	69bb      	ldr	r3, [r7, #24]
 8017774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017776:	69bb      	ldr	r3, [r7, #24]
 8017778:	6959      	ldr	r1, [r3, #20]
 801777a:	693a      	ldr	r2, [r7, #16]
 801777c:	4613      	mov	r3, r2
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	4413      	add	r3, r2
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4a13      	ldr	r2, [pc, #76]	; (80177d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017786:	4413      	add	r3, r2
 8017788:	4299      	cmp	r1, r3
 801778a:	d11c      	bne.n	80177c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801778c:	69bb      	ldr	r3, [r7, #24]
 801778e:	3304      	adds	r3, #4
 8017790:	4618      	mov	r0, r3
 8017792:	f7fd ffab 	bl	80156ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017796:	69bb      	ldr	r3, [r7, #24]
 8017798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801779a:	4b0f      	ldr	r3, [pc, #60]	; (80177d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d903      	bls.n	80177aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a6:	4a0c      	ldr	r2, [pc, #48]	; (80177d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80177a8:	6013      	str	r3, [r2, #0]
 80177aa:	69bb      	ldr	r3, [r7, #24]
 80177ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ae:	4613      	mov	r3, r2
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	4413      	add	r3, r2
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	4a07      	ldr	r2, [pc, #28]	; (80177d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80177b8:	441a      	add	r2, r3
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	3304      	adds	r3, #4
 80177be:	4619      	mov	r1, r3
 80177c0:	4610      	mov	r0, r2
 80177c2:	f7fd ff36 	bl	8015632 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177c6:	bf00      	nop
 80177c8:	3720      	adds	r7, #32
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	20000ff4 	.word	0x20000ff4
 80177d4:	20000ff8 	.word	0x20000ff8
 80177d8:	200014d0 	.word	0x200014d0

080177dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80177dc:	b480      	push	{r7}
 80177de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80177e0:	4b07      	ldr	r3, [pc, #28]	; (8017800 <pvTaskIncrementMutexHeldCount+0x24>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d004      	beq.n	80177f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80177e8:	4b05      	ldr	r3, [pc, #20]	; (8017800 <pvTaskIncrementMutexHeldCount+0x24>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80177ee:	3201      	adds	r2, #1
 80177f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80177f2:	4b03      	ldr	r3, [pc, #12]	; (8017800 <pvTaskIncrementMutexHeldCount+0x24>)
 80177f4:	681b      	ldr	r3, [r3, #0]
	}
 80177f6:	4618      	mov	r0, r3
 80177f8:	46bd      	mov	sp, r7
 80177fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fe:	4770      	bx	lr
 8017800:	20000ff4 	.word	0x20000ff4

08017804 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801780e:	4b21      	ldr	r3, [pc, #132]	; (8017894 <prvAddCurrentTaskToDelayedList+0x90>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017814:	4b20      	ldr	r3, [pc, #128]	; (8017898 <prvAddCurrentTaskToDelayedList+0x94>)
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	3304      	adds	r3, #4
 801781a:	4618      	mov	r0, r3
 801781c:	f7fd ff66 	bl	80156ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017826:	d10a      	bne.n	801783e <prvAddCurrentTaskToDelayedList+0x3a>
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d007      	beq.n	801783e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801782e:	4b1a      	ldr	r3, [pc, #104]	; (8017898 <prvAddCurrentTaskToDelayedList+0x94>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	3304      	adds	r3, #4
 8017834:	4619      	mov	r1, r3
 8017836:	4819      	ldr	r0, [pc, #100]	; (801789c <prvAddCurrentTaskToDelayedList+0x98>)
 8017838:	f7fd fefb 	bl	8015632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801783c:	e026      	b.n	801788c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801783e:	68fa      	ldr	r2, [r7, #12]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	4413      	add	r3, r2
 8017844:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017846:	4b14      	ldr	r3, [pc, #80]	; (8017898 <prvAddCurrentTaskToDelayedList+0x94>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801784e:	68ba      	ldr	r2, [r7, #8]
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	429a      	cmp	r2, r3
 8017854:	d209      	bcs.n	801786a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017856:	4b12      	ldr	r3, [pc, #72]	; (80178a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	4b0f      	ldr	r3, [pc, #60]	; (8017898 <prvAddCurrentTaskToDelayedList+0x94>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	3304      	adds	r3, #4
 8017860:	4619      	mov	r1, r3
 8017862:	4610      	mov	r0, r2
 8017864:	f7fd ff09 	bl	801567a <vListInsert>
}
 8017868:	e010      	b.n	801788c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801786a:	4b0e      	ldr	r3, [pc, #56]	; (80178a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801786c:	681a      	ldr	r2, [r3, #0]
 801786e:	4b0a      	ldr	r3, [pc, #40]	; (8017898 <prvAddCurrentTaskToDelayedList+0x94>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	3304      	adds	r3, #4
 8017874:	4619      	mov	r1, r3
 8017876:	4610      	mov	r0, r2
 8017878:	f7fd feff 	bl	801567a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801787c:	4b0a      	ldr	r3, [pc, #40]	; (80178a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	68ba      	ldr	r2, [r7, #8]
 8017882:	429a      	cmp	r2, r3
 8017884:	d202      	bcs.n	801788c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017886:	4a08      	ldr	r2, [pc, #32]	; (80178a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	6013      	str	r3, [r2, #0]
}
 801788c:	bf00      	nop
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	200014cc 	.word	0x200014cc
 8017898:	20000ff4 	.word	0x20000ff4
 801789c:	200014b4 	.word	0x200014b4
 80178a0:	20001484 	.word	0x20001484
 80178a4:	20001480 	.word	0x20001480
 80178a8:	200014e8 	.word	0x200014e8

080178ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b08a      	sub	sp, #40	; 0x28
 80178b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80178b2:	2300      	movs	r3, #0
 80178b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80178b6:	f000 fb07 	bl	8017ec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80178ba:	4b1c      	ldr	r3, [pc, #112]	; (801792c <xTimerCreateTimerTask+0x80>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d021      	beq.n	8017906 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80178c2:	2300      	movs	r3, #0
 80178c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80178c6:	2300      	movs	r3, #0
 80178c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80178ca:	1d3a      	adds	r2, r7, #4
 80178cc:	f107 0108 	add.w	r1, r7, #8
 80178d0:	f107 030c 	add.w	r3, r7, #12
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7fd fe65 	bl	80155a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80178da:	6879      	ldr	r1, [r7, #4]
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	68fa      	ldr	r2, [r7, #12]
 80178e0:	9202      	str	r2, [sp, #8]
 80178e2:	9301      	str	r3, [sp, #4]
 80178e4:	2302      	movs	r3, #2
 80178e6:	9300      	str	r3, [sp, #0]
 80178e8:	2300      	movs	r3, #0
 80178ea:	460a      	mov	r2, r1
 80178ec:	4910      	ldr	r1, [pc, #64]	; (8017930 <xTimerCreateTimerTask+0x84>)
 80178ee:	4811      	ldr	r0, [pc, #68]	; (8017934 <xTimerCreateTimerTask+0x88>)
 80178f0:	f7fe ff34 	bl	801675c <xTaskCreateStatic>
 80178f4:	4603      	mov	r3, r0
 80178f6:	4a10      	ldr	r2, [pc, #64]	; (8017938 <xTimerCreateTimerTask+0x8c>)
 80178f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80178fa:	4b0f      	ldr	r3, [pc, #60]	; (8017938 <xTimerCreateTimerTask+0x8c>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d001      	beq.n	8017906 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017902:	2301      	movs	r3, #1
 8017904:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017906:	697b      	ldr	r3, [r7, #20]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d10a      	bne.n	8017922 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017910:	f383 8811 	msr	BASEPRI, r3
 8017914:	f3bf 8f6f 	isb	sy
 8017918:	f3bf 8f4f 	dsb	sy
 801791c:	613b      	str	r3, [r7, #16]
}
 801791e:	bf00      	nop
 8017920:	e7fe      	b.n	8017920 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017922:	697b      	ldr	r3, [r7, #20]
}
 8017924:	4618      	mov	r0, r3
 8017926:	3718      	adds	r7, #24
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}
 801792c:	20001524 	.word	0x20001524
 8017930:	08021084 	.word	0x08021084
 8017934:	08017a71 	.word	0x08017a71
 8017938:	20001528 	.word	0x20001528

0801793c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b08a      	sub	sp, #40	; 0x28
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801794a:	2300      	movs	r3, #0
 801794c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d10a      	bne.n	801796a <xTimerGenericCommand+0x2e>
	__asm volatile
 8017954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017958:	f383 8811 	msr	BASEPRI, r3
 801795c:	f3bf 8f6f 	isb	sy
 8017960:	f3bf 8f4f 	dsb	sy
 8017964:	623b      	str	r3, [r7, #32]
}
 8017966:	bf00      	nop
 8017968:	e7fe      	b.n	8017968 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801796a:	4b1a      	ldr	r3, [pc, #104]	; (80179d4 <xTimerGenericCommand+0x98>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d02a      	beq.n	80179c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	2b05      	cmp	r3, #5
 8017982:	dc18      	bgt.n	80179b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017984:	f7ff fdb4 	bl	80174f0 <xTaskGetSchedulerState>
 8017988:	4603      	mov	r3, r0
 801798a:	2b02      	cmp	r3, #2
 801798c:	d109      	bne.n	80179a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801798e:	4b11      	ldr	r3, [pc, #68]	; (80179d4 <xTimerGenericCommand+0x98>)
 8017990:	6818      	ldr	r0, [r3, #0]
 8017992:	f107 0110 	add.w	r1, r7, #16
 8017996:	2300      	movs	r3, #0
 8017998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801799a:	f7fe f879 	bl	8015a90 <xQueueGenericSend>
 801799e:	6278      	str	r0, [r7, #36]	; 0x24
 80179a0:	e012      	b.n	80179c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80179a2:	4b0c      	ldr	r3, [pc, #48]	; (80179d4 <xTimerGenericCommand+0x98>)
 80179a4:	6818      	ldr	r0, [r3, #0]
 80179a6:	f107 0110 	add.w	r1, r7, #16
 80179aa:	2300      	movs	r3, #0
 80179ac:	2200      	movs	r2, #0
 80179ae:	f7fe f86f 	bl	8015a90 <xQueueGenericSend>
 80179b2:	6278      	str	r0, [r7, #36]	; 0x24
 80179b4:	e008      	b.n	80179c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80179b6:	4b07      	ldr	r3, [pc, #28]	; (80179d4 <xTimerGenericCommand+0x98>)
 80179b8:	6818      	ldr	r0, [r3, #0]
 80179ba:	f107 0110 	add.w	r1, r7, #16
 80179be:	2300      	movs	r3, #0
 80179c0:	683a      	ldr	r2, [r7, #0]
 80179c2:	f7fe f963 	bl	8015c8c <xQueueGenericSendFromISR>
 80179c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80179c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3728      	adds	r7, #40	; 0x28
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	20001524 	.word	0x20001524

080179d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b088      	sub	sp, #32
 80179dc:	af02      	add	r7, sp, #8
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179e2:	4b22      	ldr	r3, [pc, #136]	; (8017a6c <prvProcessExpiredTimer+0x94>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	68db      	ldr	r3, [r3, #12]
 80179e8:	68db      	ldr	r3, [r3, #12]
 80179ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	3304      	adds	r3, #4
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fd fe7b 	bl	80156ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179fc:	f003 0304 	and.w	r3, r3, #4
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d022      	beq.n	8017a4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	699a      	ldr	r2, [r3, #24]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	18d1      	adds	r1, r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	683a      	ldr	r2, [r7, #0]
 8017a10:	6978      	ldr	r0, [r7, #20]
 8017a12:	f000 f8d1 	bl	8017bb8 <prvInsertTimerInActiveList>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d01f      	beq.n	8017a5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	2300      	movs	r3, #0
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	2100      	movs	r1, #0
 8017a26:	6978      	ldr	r0, [r7, #20]
 8017a28:	f7ff ff88 	bl	801793c <xTimerGenericCommand>
 8017a2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d113      	bne.n	8017a5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a38:	f383 8811 	msr	BASEPRI, r3
 8017a3c:	f3bf 8f6f 	isb	sy
 8017a40:	f3bf 8f4f 	dsb	sy
 8017a44:	60fb      	str	r3, [r7, #12]
}
 8017a46:	bf00      	nop
 8017a48:	e7fe      	b.n	8017a48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a50:	f023 0301 	bic.w	r3, r3, #1
 8017a54:	b2da      	uxtb	r2, r3
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a5c:	697b      	ldr	r3, [r7, #20]
 8017a5e:	6a1b      	ldr	r3, [r3, #32]
 8017a60:	6978      	ldr	r0, [r7, #20]
 8017a62:	4798      	blx	r3
}
 8017a64:	bf00      	nop
 8017a66:	3718      	adds	r7, #24
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	2000151c 	.word	0x2000151c

08017a70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b084      	sub	sp, #16
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a78:	f107 0308 	add.w	r3, r7, #8
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f000 f857 	bl	8017b30 <prvGetNextExpireTime>
 8017a82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	4619      	mov	r1, r3
 8017a88:	68f8      	ldr	r0, [r7, #12]
 8017a8a:	f000 f803 	bl	8017a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017a8e:	f000 f8d5 	bl	8017c3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a92:	e7f1      	b.n	8017a78 <prvTimerTask+0x8>

08017a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017a9e:	f7ff f92b 	bl	8016cf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017aa2:	f107 0308 	add.w	r3, r7, #8
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f000 f866 	bl	8017b78 <prvSampleTimeNow>
 8017aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d130      	bne.n	8017b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017ab4:	683b      	ldr	r3, [r7, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d10a      	bne.n	8017ad0 <prvProcessTimerOrBlockTask+0x3c>
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d806      	bhi.n	8017ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017ac2:	f7ff f927 	bl	8016d14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017ac6:	68f9      	ldr	r1, [r7, #12]
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f7ff ff85 	bl	80179d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017ace:	e024      	b.n	8017b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d008      	beq.n	8017ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017ad6:	4b13      	ldr	r3, [pc, #76]	; (8017b24 <prvProcessTimerOrBlockTask+0x90>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d101      	bne.n	8017ae4 <prvProcessTimerOrBlockTask+0x50>
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	e000      	b.n	8017ae6 <prvProcessTimerOrBlockTask+0x52>
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017ae8:	4b0f      	ldr	r3, [pc, #60]	; (8017b28 <prvProcessTimerOrBlockTask+0x94>)
 8017aea:	6818      	ldr	r0, [r3, #0]
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	1ad3      	subs	r3, r2, r3
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	4619      	mov	r1, r3
 8017af6:	f7fe fdfd 	bl	80166f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017afa:	f7ff f90b 	bl	8016d14 <xTaskResumeAll>
 8017afe:	4603      	mov	r3, r0
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d10a      	bne.n	8017b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017b04:	4b09      	ldr	r3, [pc, #36]	; (8017b2c <prvProcessTimerOrBlockTask+0x98>)
 8017b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b0a:	601a      	str	r2, [r3, #0]
 8017b0c:	f3bf 8f4f 	dsb	sy
 8017b10:	f3bf 8f6f 	isb	sy
}
 8017b14:	e001      	b.n	8017b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017b16:	f7ff f8fd 	bl	8016d14 <xTaskResumeAll>
}
 8017b1a:	bf00      	nop
 8017b1c:	3710      	adds	r7, #16
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	20001520 	.word	0x20001520
 8017b28:	20001524 	.word	0x20001524
 8017b2c:	e000ed04 	.word	0xe000ed04

08017b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017b30:	b480      	push	{r7}
 8017b32:	b085      	sub	sp, #20
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017b38:	4b0e      	ldr	r3, [pc, #56]	; (8017b74 <prvGetNextExpireTime+0x44>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d101      	bne.n	8017b46 <prvGetNextExpireTime+0x16>
 8017b42:	2201      	movs	r2, #1
 8017b44:	e000      	b.n	8017b48 <prvGetNextExpireTime+0x18>
 8017b46:	2200      	movs	r2, #0
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d105      	bne.n	8017b60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017b54:	4b07      	ldr	r3, [pc, #28]	; (8017b74 <prvGetNextExpireTime+0x44>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	68db      	ldr	r3, [r3, #12]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	60fb      	str	r3, [r7, #12]
 8017b5e:	e001      	b.n	8017b64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017b60:	2300      	movs	r3, #0
 8017b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017b64:	68fb      	ldr	r3, [r7, #12]
}
 8017b66:	4618      	mov	r0, r3
 8017b68:	3714      	adds	r7, #20
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b70:	4770      	bx	lr
 8017b72:	bf00      	nop
 8017b74:	2000151c 	.word	0x2000151c

08017b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017b80:	f7ff f966 	bl	8016e50 <xTaskGetTickCount>
 8017b84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017b86:	4b0b      	ldr	r3, [pc, #44]	; (8017bb4 <prvSampleTimeNow+0x3c>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	68fa      	ldr	r2, [r7, #12]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d205      	bcs.n	8017b9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017b90:	f000 f936 	bl	8017e00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2201      	movs	r2, #1
 8017b98:	601a      	str	r2, [r3, #0]
 8017b9a:	e002      	b.n	8017ba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017ba2:	4a04      	ldr	r2, [pc, #16]	; (8017bb4 <prvSampleTimeNow+0x3c>)
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3710      	adds	r7, #16
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}
 8017bb2:	bf00      	nop
 8017bb4:	2000152c 	.word	0x2000152c

08017bb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	607a      	str	r2, [r7, #4]
 8017bc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	68ba      	ldr	r2, [r7, #8]
 8017bce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017bd6:	68ba      	ldr	r2, [r7, #8]
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	d812      	bhi.n	8017c04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017bde:	687a      	ldr	r2, [r7, #4]
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	1ad2      	subs	r2, r2, r3
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	699b      	ldr	r3, [r3, #24]
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d302      	bcc.n	8017bf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017bec:	2301      	movs	r3, #1
 8017bee:	617b      	str	r3, [r7, #20]
 8017bf0:	e01b      	b.n	8017c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017bf2:	4b10      	ldr	r3, [pc, #64]	; (8017c34 <prvInsertTimerInActiveList+0x7c>)
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	3304      	adds	r3, #4
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	4610      	mov	r0, r2
 8017bfe:	f7fd fd3c 	bl	801567a <vListInsert>
 8017c02:	e012      	b.n	8017c2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d206      	bcs.n	8017c1a <prvInsertTimerInActiveList+0x62>
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	683b      	ldr	r3, [r7, #0]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d302      	bcc.n	8017c1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017c14:	2301      	movs	r3, #1
 8017c16:	617b      	str	r3, [r7, #20]
 8017c18:	e007      	b.n	8017c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017c1a:	4b07      	ldr	r3, [pc, #28]	; (8017c38 <prvInsertTimerInActiveList+0x80>)
 8017c1c:	681a      	ldr	r2, [r3, #0]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	3304      	adds	r3, #4
 8017c22:	4619      	mov	r1, r3
 8017c24:	4610      	mov	r0, r2
 8017c26:	f7fd fd28 	bl	801567a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017c2a:	697b      	ldr	r3, [r7, #20]
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3718      	adds	r7, #24
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}
 8017c34:	20001520 	.word	0x20001520
 8017c38:	2000151c 	.word	0x2000151c

08017c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b08e      	sub	sp, #56	; 0x38
 8017c40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017c42:	e0ca      	b.n	8017dda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	da18      	bge.n	8017c7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017c4a:	1d3b      	adds	r3, r7, #4
 8017c4c:	3304      	adds	r3, #4
 8017c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d10a      	bne.n	8017c6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c5a:	f383 8811 	msr	BASEPRI, r3
 8017c5e:	f3bf 8f6f 	isb	sy
 8017c62:	f3bf 8f4f 	dsb	sy
 8017c66:	61fb      	str	r3, [r7, #28]
}
 8017c68:	bf00      	nop
 8017c6a:	e7fe      	b.n	8017c6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c72:	6850      	ldr	r0, [r2, #4]
 8017c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c76:	6892      	ldr	r2, [r2, #8]
 8017c78:	4611      	mov	r1, r2
 8017c7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	f2c0 80aa 	blt.w	8017dd8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c8a:	695b      	ldr	r3, [r3, #20]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d004      	beq.n	8017c9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c92:	3304      	adds	r3, #4
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7fd fd29 	bl	80156ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c9a:	463b      	mov	r3, r7
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7ff ff6b 	bl	8017b78 <prvSampleTimeNow>
 8017ca2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2b09      	cmp	r3, #9
 8017ca8:	f200 8097 	bhi.w	8017dda <prvProcessReceivedCommands+0x19e>
 8017cac:	a201      	add	r2, pc, #4	; (adr r2, 8017cb4 <prvProcessReceivedCommands+0x78>)
 8017cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cb2:	bf00      	nop
 8017cb4:	08017cdd 	.word	0x08017cdd
 8017cb8:	08017cdd 	.word	0x08017cdd
 8017cbc:	08017cdd 	.word	0x08017cdd
 8017cc0:	08017d51 	.word	0x08017d51
 8017cc4:	08017d65 	.word	0x08017d65
 8017cc8:	08017daf 	.word	0x08017daf
 8017ccc:	08017cdd 	.word	0x08017cdd
 8017cd0:	08017cdd 	.word	0x08017cdd
 8017cd4:	08017d51 	.word	0x08017d51
 8017cd8:	08017d65 	.word	0x08017d65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ce2:	f043 0301 	orr.w	r3, r3, #1
 8017ce6:	b2da      	uxtb	r2, r3
 8017ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017cee:	68ba      	ldr	r2, [r7, #8]
 8017cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf2:	699b      	ldr	r3, [r3, #24]
 8017cf4:	18d1      	adds	r1, r2, r3
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cfc:	f7ff ff5c 	bl	8017bb8 <prvInsertTimerInActiveList>
 8017d00:	4603      	mov	r3, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d069      	beq.n	8017dda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d08:	6a1b      	ldr	r3, [r3, #32]
 8017d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d14:	f003 0304 	and.w	r3, r3, #4
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d05e      	beq.n	8017dda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017d1c:	68ba      	ldr	r2, [r7, #8]
 8017d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d20:	699b      	ldr	r3, [r3, #24]
 8017d22:	441a      	add	r2, r3
 8017d24:	2300      	movs	r3, #0
 8017d26:	9300      	str	r3, [sp, #0]
 8017d28:	2300      	movs	r3, #0
 8017d2a:	2100      	movs	r1, #0
 8017d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d2e:	f7ff fe05 	bl	801793c <xTimerGenericCommand>
 8017d32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017d34:	6a3b      	ldr	r3, [r7, #32]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d14f      	bne.n	8017dda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d3e:	f383 8811 	msr	BASEPRI, r3
 8017d42:	f3bf 8f6f 	isb	sy
 8017d46:	f3bf 8f4f 	dsb	sy
 8017d4a:	61bb      	str	r3, [r7, #24]
}
 8017d4c:	bf00      	nop
 8017d4e:	e7fe      	b.n	8017d4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d56:	f023 0301 	bic.w	r3, r3, #1
 8017d5a:	b2da      	uxtb	r2, r3
 8017d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017d62:	e03a      	b.n	8017dda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d6a:	f043 0301 	orr.w	r3, r3, #1
 8017d6e:	b2da      	uxtb	r2, r3
 8017d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017d76:	68ba      	ldr	r2, [r7, #8]
 8017d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7e:	699b      	ldr	r3, [r3, #24]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d10a      	bne.n	8017d9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	617b      	str	r3, [r7, #20]
}
 8017d96:	bf00      	nop
 8017d98:	e7fe      	b.n	8017d98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9c:	699a      	ldr	r2, [r3, #24]
 8017d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da0:	18d1      	adds	r1, r2, r3
 8017da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017da8:	f7ff ff06 	bl	8017bb8 <prvInsertTimerInActiveList>
					break;
 8017dac:	e015      	b.n	8017dda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017db4:	f003 0302 	and.w	r3, r3, #2
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d103      	bne.n	8017dc4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dbe:	f000 fbdf 	bl	8018580 <vPortFree>
 8017dc2:	e00a      	b.n	8017dda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017dca:	f023 0301 	bic.w	r3, r3, #1
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017dd6:	e000      	b.n	8017dda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017dd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017dda:	4b08      	ldr	r3, [pc, #32]	; (8017dfc <prvProcessReceivedCommands+0x1c0>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	1d39      	adds	r1, r7, #4
 8017de0:	2200      	movs	r2, #0
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7fe f87a 	bl	8015edc <xQueueReceive>
 8017de8:	4603      	mov	r3, r0
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	f47f af2a 	bne.w	8017c44 <prvProcessReceivedCommands+0x8>
	}
}
 8017df0:	bf00      	nop
 8017df2:	bf00      	nop
 8017df4:	3730      	adds	r7, #48	; 0x30
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	20001524 	.word	0x20001524

08017e00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b088      	sub	sp, #32
 8017e04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017e06:	e048      	b.n	8017e9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017e08:	4b2d      	ldr	r3, [pc, #180]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	68db      	ldr	r3, [r3, #12]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e12:	4b2b      	ldr	r3, [pc, #172]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	68db      	ldr	r3, [r3, #12]
 8017e18:	68db      	ldr	r3, [r3, #12]
 8017e1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	3304      	adds	r3, #4
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7fd fc63 	bl	80156ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	6a1b      	ldr	r3, [r3, #32]
 8017e2a:	68f8      	ldr	r0, [r7, #12]
 8017e2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e34:	f003 0304 	and.w	r3, r3, #4
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d02e      	beq.n	8017e9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	699b      	ldr	r3, [r3, #24]
 8017e40:	693a      	ldr	r2, [r7, #16]
 8017e42:	4413      	add	r3, r2
 8017e44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017e46:	68ba      	ldr	r2, [r7, #8]
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d90e      	bls.n	8017e6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	68ba      	ldr	r2, [r7, #8]
 8017e52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	68fa      	ldr	r2, [r7, #12]
 8017e58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017e5a:	4b19      	ldr	r3, [pc, #100]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017e5c:	681a      	ldr	r2, [r3, #0]
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	3304      	adds	r3, #4
 8017e62:	4619      	mov	r1, r3
 8017e64:	4610      	mov	r0, r2
 8017e66:	f7fd fc08 	bl	801567a <vListInsert>
 8017e6a:	e016      	b.n	8017e9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	9300      	str	r3, [sp, #0]
 8017e70:	2300      	movs	r3, #0
 8017e72:	693a      	ldr	r2, [r7, #16]
 8017e74:	2100      	movs	r1, #0
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f7ff fd60 	bl	801793c <xTimerGenericCommand>
 8017e7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d10a      	bne.n	8017e9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e88:	f383 8811 	msr	BASEPRI, r3
 8017e8c:	f3bf 8f6f 	isb	sy
 8017e90:	f3bf 8f4f 	dsb	sy
 8017e94:	603b      	str	r3, [r7, #0]
}
 8017e96:	bf00      	nop
 8017e98:	e7fe      	b.n	8017e98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017e9a:	4b09      	ldr	r3, [pc, #36]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d1b1      	bne.n	8017e08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017ea4:	4b06      	ldr	r3, [pc, #24]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017eaa:	4b06      	ldr	r3, [pc, #24]	; (8017ec4 <prvSwitchTimerLists+0xc4>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	4a04      	ldr	r2, [pc, #16]	; (8017ec0 <prvSwitchTimerLists+0xc0>)
 8017eb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017eb2:	4a04      	ldr	r2, [pc, #16]	; (8017ec4 <prvSwitchTimerLists+0xc4>)
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	6013      	str	r3, [r2, #0]
}
 8017eb8:	bf00      	nop
 8017eba:	3718      	adds	r7, #24
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}
 8017ec0:	2000151c 	.word	0x2000151c
 8017ec4:	20001520 	.word	0x20001520

08017ec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b082      	sub	sp, #8
 8017ecc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017ece:	f000 f969 	bl	80181a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017ed2:	4b15      	ldr	r3, [pc, #84]	; (8017f28 <prvCheckForValidListAndQueue+0x60>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d120      	bne.n	8017f1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017eda:	4814      	ldr	r0, [pc, #80]	; (8017f2c <prvCheckForValidListAndQueue+0x64>)
 8017edc:	f7fd fb7c 	bl	80155d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ee0:	4813      	ldr	r0, [pc, #76]	; (8017f30 <prvCheckForValidListAndQueue+0x68>)
 8017ee2:	f7fd fb79 	bl	80155d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ee6:	4b13      	ldr	r3, [pc, #76]	; (8017f34 <prvCheckForValidListAndQueue+0x6c>)
 8017ee8:	4a10      	ldr	r2, [pc, #64]	; (8017f2c <prvCheckForValidListAndQueue+0x64>)
 8017eea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017eec:	4b12      	ldr	r3, [pc, #72]	; (8017f38 <prvCheckForValidListAndQueue+0x70>)
 8017eee:	4a10      	ldr	r2, [pc, #64]	; (8017f30 <prvCheckForValidListAndQueue+0x68>)
 8017ef0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	4b11      	ldr	r3, [pc, #68]	; (8017f3c <prvCheckForValidListAndQueue+0x74>)
 8017ef8:	4a11      	ldr	r2, [pc, #68]	; (8017f40 <prvCheckForValidListAndQueue+0x78>)
 8017efa:	2110      	movs	r1, #16
 8017efc:	200a      	movs	r0, #10
 8017efe:	f7fd fc87 	bl	8015810 <xQueueGenericCreateStatic>
 8017f02:	4603      	mov	r3, r0
 8017f04:	4a08      	ldr	r2, [pc, #32]	; (8017f28 <prvCheckForValidListAndQueue+0x60>)
 8017f06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017f08:	4b07      	ldr	r3, [pc, #28]	; (8017f28 <prvCheckForValidListAndQueue+0x60>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d005      	beq.n	8017f1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017f10:	4b05      	ldr	r3, [pc, #20]	; (8017f28 <prvCheckForValidListAndQueue+0x60>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	490b      	ldr	r1, [pc, #44]	; (8017f44 <prvCheckForValidListAndQueue+0x7c>)
 8017f16:	4618      	mov	r0, r3
 8017f18:	f7fe fb98 	bl	801664c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017f1c:	f000 f972 	bl	8018204 <vPortExitCritical>
}
 8017f20:	bf00      	nop
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	20001524 	.word	0x20001524
 8017f2c:	200014f4 	.word	0x200014f4
 8017f30:	20001508 	.word	0x20001508
 8017f34:	2000151c 	.word	0x2000151c
 8017f38:	20001520 	.word	0x20001520
 8017f3c:	200015d0 	.word	0x200015d0
 8017f40:	20001530 	.word	0x20001530
 8017f44:	0802108c 	.word	0x0802108c

08017f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	60f8      	str	r0, [r7, #12]
 8017f50:	60b9      	str	r1, [r7, #8]
 8017f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	3b04      	subs	r3, #4
 8017f58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	3b04      	subs	r3, #4
 8017f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	f023 0201 	bic.w	r2, r3, #1
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	3b04      	subs	r3, #4
 8017f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017f78:	4a0c      	ldr	r2, [pc, #48]	; (8017fac <pxPortInitialiseStack+0x64>)
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	3b14      	subs	r3, #20
 8017f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	3b04      	subs	r3, #4
 8017f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	f06f 0202 	mvn.w	r2, #2
 8017f96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	3b20      	subs	r3, #32
 8017f9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017f9e:	68fb      	ldr	r3, [r7, #12]
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3714      	adds	r7, #20
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr
 8017fac:	08017fb1 	.word	0x08017fb1

08017fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b085      	sub	sp, #20
 8017fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017fba:	4b12      	ldr	r3, [pc, #72]	; (8018004 <prvTaskExitError+0x54>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fc2:	d00a      	beq.n	8017fda <prvTaskExitError+0x2a>
	__asm volatile
 8017fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc8:	f383 8811 	msr	BASEPRI, r3
 8017fcc:	f3bf 8f6f 	isb	sy
 8017fd0:	f3bf 8f4f 	dsb	sy
 8017fd4:	60fb      	str	r3, [r7, #12]
}
 8017fd6:	bf00      	nop
 8017fd8:	e7fe      	b.n	8017fd8 <prvTaskExitError+0x28>
	__asm volatile
 8017fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fde:	f383 8811 	msr	BASEPRI, r3
 8017fe2:	f3bf 8f6f 	isb	sy
 8017fe6:	f3bf 8f4f 	dsb	sy
 8017fea:	60bb      	str	r3, [r7, #8]
}
 8017fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017fee:	bf00      	nop
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d0fc      	beq.n	8017ff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017ff6:	bf00      	nop
 8017ff8:	bf00      	nop
 8017ffa:	3714      	adds	r7, #20
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018002:	4770      	bx	lr
 8018004:	20000188 	.word	0x20000188
	...

08018010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018010:	4b07      	ldr	r3, [pc, #28]	; (8018030 <pxCurrentTCBConst2>)
 8018012:	6819      	ldr	r1, [r3, #0]
 8018014:	6808      	ldr	r0, [r1, #0]
 8018016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801a:	f380 8809 	msr	PSP, r0
 801801e:	f3bf 8f6f 	isb	sy
 8018022:	f04f 0000 	mov.w	r0, #0
 8018026:	f380 8811 	msr	BASEPRI, r0
 801802a:	4770      	bx	lr
 801802c:	f3af 8000 	nop.w

08018030 <pxCurrentTCBConst2>:
 8018030:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018034:	bf00      	nop
 8018036:	bf00      	nop

08018038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018038:	4808      	ldr	r0, [pc, #32]	; (801805c <prvPortStartFirstTask+0x24>)
 801803a:	6800      	ldr	r0, [r0, #0]
 801803c:	6800      	ldr	r0, [r0, #0]
 801803e:	f380 8808 	msr	MSP, r0
 8018042:	f04f 0000 	mov.w	r0, #0
 8018046:	f380 8814 	msr	CONTROL, r0
 801804a:	b662      	cpsie	i
 801804c:	b661      	cpsie	f
 801804e:	f3bf 8f4f 	dsb	sy
 8018052:	f3bf 8f6f 	isb	sy
 8018056:	df00      	svc	0
 8018058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801805a:	bf00      	nop
 801805c:	e000ed08 	.word	0xe000ed08

08018060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b086      	sub	sp, #24
 8018064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018066:	4b46      	ldr	r3, [pc, #280]	; (8018180 <xPortStartScheduler+0x120>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	4a46      	ldr	r2, [pc, #280]	; (8018184 <xPortStartScheduler+0x124>)
 801806c:	4293      	cmp	r3, r2
 801806e:	d10a      	bne.n	8018086 <xPortStartScheduler+0x26>
	__asm volatile
 8018070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018074:	f383 8811 	msr	BASEPRI, r3
 8018078:	f3bf 8f6f 	isb	sy
 801807c:	f3bf 8f4f 	dsb	sy
 8018080:	613b      	str	r3, [r7, #16]
}
 8018082:	bf00      	nop
 8018084:	e7fe      	b.n	8018084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018086:	4b3e      	ldr	r3, [pc, #248]	; (8018180 <xPortStartScheduler+0x120>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	4a3f      	ldr	r2, [pc, #252]	; (8018188 <xPortStartScheduler+0x128>)
 801808c:	4293      	cmp	r3, r2
 801808e:	d10a      	bne.n	80180a6 <xPortStartScheduler+0x46>
	__asm volatile
 8018090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018094:	f383 8811 	msr	BASEPRI, r3
 8018098:	f3bf 8f6f 	isb	sy
 801809c:	f3bf 8f4f 	dsb	sy
 80180a0:	60fb      	str	r3, [r7, #12]
}
 80180a2:	bf00      	nop
 80180a4:	e7fe      	b.n	80180a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80180a6:	4b39      	ldr	r3, [pc, #228]	; (801818c <xPortStartScheduler+0x12c>)
 80180a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	22ff      	movs	r2, #255	; 0xff
 80180b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80180c0:	78fb      	ldrb	r3, [r7, #3]
 80180c2:	b2db      	uxtb	r3, r3
 80180c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80180c8:	b2da      	uxtb	r2, r3
 80180ca:	4b31      	ldr	r3, [pc, #196]	; (8018190 <xPortStartScheduler+0x130>)
 80180cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80180ce:	4b31      	ldr	r3, [pc, #196]	; (8018194 <xPortStartScheduler+0x134>)
 80180d0:	2207      	movs	r2, #7
 80180d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80180d4:	e009      	b.n	80180ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80180d6:	4b2f      	ldr	r3, [pc, #188]	; (8018194 <xPortStartScheduler+0x134>)
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	3b01      	subs	r3, #1
 80180dc:	4a2d      	ldr	r2, [pc, #180]	; (8018194 <xPortStartScheduler+0x134>)
 80180de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80180e0:	78fb      	ldrb	r3, [r7, #3]
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80180ea:	78fb      	ldrb	r3, [r7, #3]
 80180ec:	b2db      	uxtb	r3, r3
 80180ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80180f2:	2b80      	cmp	r3, #128	; 0x80
 80180f4:	d0ef      	beq.n	80180d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80180f6:	4b27      	ldr	r3, [pc, #156]	; (8018194 <xPortStartScheduler+0x134>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	f1c3 0307 	rsb	r3, r3, #7
 80180fe:	2b04      	cmp	r3, #4
 8018100:	d00a      	beq.n	8018118 <xPortStartScheduler+0xb8>
	__asm volatile
 8018102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018106:	f383 8811 	msr	BASEPRI, r3
 801810a:	f3bf 8f6f 	isb	sy
 801810e:	f3bf 8f4f 	dsb	sy
 8018112:	60bb      	str	r3, [r7, #8]
}
 8018114:	bf00      	nop
 8018116:	e7fe      	b.n	8018116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018118:	4b1e      	ldr	r3, [pc, #120]	; (8018194 <xPortStartScheduler+0x134>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	021b      	lsls	r3, r3, #8
 801811e:	4a1d      	ldr	r2, [pc, #116]	; (8018194 <xPortStartScheduler+0x134>)
 8018120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018122:	4b1c      	ldr	r3, [pc, #112]	; (8018194 <xPortStartScheduler+0x134>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801812a:	4a1a      	ldr	r2, [pc, #104]	; (8018194 <xPortStartScheduler+0x134>)
 801812c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	b2da      	uxtb	r2, r3
 8018132:	697b      	ldr	r3, [r7, #20]
 8018134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018136:	4b18      	ldr	r3, [pc, #96]	; (8018198 <xPortStartScheduler+0x138>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a17      	ldr	r2, [pc, #92]	; (8018198 <xPortStartScheduler+0x138>)
 801813c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018142:	4b15      	ldr	r3, [pc, #84]	; (8018198 <xPortStartScheduler+0x138>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	4a14      	ldr	r2, [pc, #80]	; (8018198 <xPortStartScheduler+0x138>)
 8018148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801814c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801814e:	f000 f8dd 	bl	801830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018152:	4b12      	ldr	r3, [pc, #72]	; (801819c <xPortStartScheduler+0x13c>)
 8018154:	2200      	movs	r2, #0
 8018156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018158:	f000 f8fc 	bl	8018354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801815c:	4b10      	ldr	r3, [pc, #64]	; (80181a0 <xPortStartScheduler+0x140>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a0f      	ldr	r2, [pc, #60]	; (80181a0 <xPortStartScheduler+0x140>)
 8018162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018168:	f7ff ff66 	bl	8018038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801816c:	f7fe ff3a 	bl	8016fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8018170:	f7ff ff1e 	bl	8017fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018174:	2300      	movs	r3, #0
}
 8018176:	4618      	mov	r0, r3
 8018178:	3718      	adds	r7, #24
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}
 801817e:	bf00      	nop
 8018180:	e000ed00 	.word	0xe000ed00
 8018184:	410fc271 	.word	0x410fc271
 8018188:	410fc270 	.word	0x410fc270
 801818c:	e000e400 	.word	0xe000e400
 8018190:	20001620 	.word	0x20001620
 8018194:	20001624 	.word	0x20001624
 8018198:	e000ed20 	.word	0xe000ed20
 801819c:	20000188 	.word	0x20000188
 80181a0:	e000ef34 	.word	0xe000ef34

080181a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80181a4:	b480      	push	{r7}
 80181a6:	b083      	sub	sp, #12
 80181a8:	af00      	add	r7, sp, #0
	__asm volatile
 80181aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ae:	f383 8811 	msr	BASEPRI, r3
 80181b2:	f3bf 8f6f 	isb	sy
 80181b6:	f3bf 8f4f 	dsb	sy
 80181ba:	607b      	str	r3, [r7, #4]
}
 80181bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80181be:	4b0f      	ldr	r3, [pc, #60]	; (80181fc <vPortEnterCritical+0x58>)
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	3301      	adds	r3, #1
 80181c4:	4a0d      	ldr	r2, [pc, #52]	; (80181fc <vPortEnterCritical+0x58>)
 80181c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80181c8:	4b0c      	ldr	r3, [pc, #48]	; (80181fc <vPortEnterCritical+0x58>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b01      	cmp	r3, #1
 80181ce:	d10f      	bne.n	80181f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80181d0:	4b0b      	ldr	r3, [pc, #44]	; (8018200 <vPortEnterCritical+0x5c>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d00a      	beq.n	80181f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80181da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181de:	f383 8811 	msr	BASEPRI, r3
 80181e2:	f3bf 8f6f 	isb	sy
 80181e6:	f3bf 8f4f 	dsb	sy
 80181ea:	603b      	str	r3, [r7, #0]
}
 80181ec:	bf00      	nop
 80181ee:	e7fe      	b.n	80181ee <vPortEnterCritical+0x4a>
	}
}
 80181f0:	bf00      	nop
 80181f2:	370c      	adds	r7, #12
 80181f4:	46bd      	mov	sp, r7
 80181f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fa:	4770      	bx	lr
 80181fc:	20000188 	.word	0x20000188
 8018200:	e000ed04 	.word	0xe000ed04

08018204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018204:	b480      	push	{r7}
 8018206:	b083      	sub	sp, #12
 8018208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801820a:	4b12      	ldr	r3, [pc, #72]	; (8018254 <vPortExitCritical+0x50>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10a      	bne.n	8018228 <vPortExitCritical+0x24>
	__asm volatile
 8018212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018216:	f383 8811 	msr	BASEPRI, r3
 801821a:	f3bf 8f6f 	isb	sy
 801821e:	f3bf 8f4f 	dsb	sy
 8018222:	607b      	str	r3, [r7, #4]
}
 8018224:	bf00      	nop
 8018226:	e7fe      	b.n	8018226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018228:	4b0a      	ldr	r3, [pc, #40]	; (8018254 <vPortExitCritical+0x50>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	3b01      	subs	r3, #1
 801822e:	4a09      	ldr	r2, [pc, #36]	; (8018254 <vPortExitCritical+0x50>)
 8018230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018232:	4b08      	ldr	r3, [pc, #32]	; (8018254 <vPortExitCritical+0x50>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d105      	bne.n	8018246 <vPortExitCritical+0x42>
 801823a:	2300      	movs	r3, #0
 801823c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	f383 8811 	msr	BASEPRI, r3
}
 8018244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018246:	bf00      	nop
 8018248:	370c      	adds	r7, #12
 801824a:	46bd      	mov	sp, r7
 801824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018250:	4770      	bx	lr
 8018252:	bf00      	nop
 8018254:	20000188 	.word	0x20000188
	...

08018260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018260:	f3ef 8009 	mrs	r0, PSP
 8018264:	f3bf 8f6f 	isb	sy
 8018268:	4b15      	ldr	r3, [pc, #84]	; (80182c0 <pxCurrentTCBConst>)
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	f01e 0f10 	tst.w	lr, #16
 8018270:	bf08      	it	eq
 8018272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801827a:	6010      	str	r0, [r2, #0]
 801827c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018284:	f380 8811 	msr	BASEPRI, r0
 8018288:	f3bf 8f4f 	dsb	sy
 801828c:	f3bf 8f6f 	isb	sy
 8018290:	f7fe fea8 	bl	8016fe4 <vTaskSwitchContext>
 8018294:	f04f 0000 	mov.w	r0, #0
 8018298:	f380 8811 	msr	BASEPRI, r0
 801829c:	bc09      	pop	{r0, r3}
 801829e:	6819      	ldr	r1, [r3, #0]
 80182a0:	6808      	ldr	r0, [r1, #0]
 80182a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a6:	f01e 0f10 	tst.w	lr, #16
 80182aa:	bf08      	it	eq
 80182ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80182b0:	f380 8809 	msr	PSP, r0
 80182b4:	f3bf 8f6f 	isb	sy
 80182b8:	4770      	bx	lr
 80182ba:	bf00      	nop
 80182bc:	f3af 8000 	nop.w

080182c0 <pxCurrentTCBConst>:
 80182c0:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80182c4:	bf00      	nop
 80182c6:	bf00      	nop

080182c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
	__asm volatile
 80182ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182d2:	f383 8811 	msr	BASEPRI, r3
 80182d6:	f3bf 8f6f 	isb	sy
 80182da:	f3bf 8f4f 	dsb	sy
 80182de:	607b      	str	r3, [r7, #4]
}
 80182e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80182e2:	f7fe fdc5 	bl	8016e70 <xTaskIncrementTick>
 80182e6:	4603      	mov	r3, r0
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d003      	beq.n	80182f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80182ec:	4b06      	ldr	r3, [pc, #24]	; (8018308 <xPortSysTickHandler+0x40>)
 80182ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182f2:	601a      	str	r2, [r3, #0]
 80182f4:	2300      	movs	r3, #0
 80182f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	f383 8811 	msr	BASEPRI, r3
}
 80182fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018300:	bf00      	nop
 8018302:	3708      	adds	r7, #8
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	e000ed04 	.word	0xe000ed04

0801830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801830c:	b480      	push	{r7}
 801830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018310:	4b0b      	ldr	r3, [pc, #44]	; (8018340 <vPortSetupTimerInterrupt+0x34>)
 8018312:	2200      	movs	r2, #0
 8018314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018316:	4b0b      	ldr	r3, [pc, #44]	; (8018344 <vPortSetupTimerInterrupt+0x38>)
 8018318:	2200      	movs	r2, #0
 801831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801831c:	4b0a      	ldr	r3, [pc, #40]	; (8018348 <vPortSetupTimerInterrupt+0x3c>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	4a0a      	ldr	r2, [pc, #40]	; (801834c <vPortSetupTimerInterrupt+0x40>)
 8018322:	fba2 2303 	umull	r2, r3, r2, r3
 8018326:	099b      	lsrs	r3, r3, #6
 8018328:	4a09      	ldr	r2, [pc, #36]	; (8018350 <vPortSetupTimerInterrupt+0x44>)
 801832a:	3b01      	subs	r3, #1
 801832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801832e:	4b04      	ldr	r3, [pc, #16]	; (8018340 <vPortSetupTimerInterrupt+0x34>)
 8018330:	2207      	movs	r2, #7
 8018332:	601a      	str	r2, [r3, #0]
}
 8018334:	bf00      	nop
 8018336:	46bd      	mov	sp, r7
 8018338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833c:	4770      	bx	lr
 801833e:	bf00      	nop
 8018340:	e000e010 	.word	0xe000e010
 8018344:	e000e018 	.word	0xe000e018
 8018348:	20000000 	.word	0x20000000
 801834c:	10624dd3 	.word	0x10624dd3
 8018350:	e000e014 	.word	0xe000e014

08018354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018364 <vPortEnableVFP+0x10>
 8018358:	6801      	ldr	r1, [r0, #0]
 801835a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801835e:	6001      	str	r1, [r0, #0]
 8018360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018362:	bf00      	nop
 8018364:	e000ed88 	.word	0xe000ed88

08018368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018368:	b480      	push	{r7}
 801836a:	b085      	sub	sp, #20
 801836c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801836e:	f3ef 8305 	mrs	r3, IPSR
 8018372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2b0f      	cmp	r3, #15
 8018378:	d914      	bls.n	80183a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801837a:	4a17      	ldr	r2, [pc, #92]	; (80183d8 <vPortValidateInterruptPriority+0x70>)
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	4413      	add	r3, r2
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018384:	4b15      	ldr	r3, [pc, #84]	; (80183dc <vPortValidateInterruptPriority+0x74>)
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	7afa      	ldrb	r2, [r7, #11]
 801838a:	429a      	cmp	r2, r3
 801838c:	d20a      	bcs.n	80183a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018392:	f383 8811 	msr	BASEPRI, r3
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	f3bf 8f4f 	dsb	sy
 801839e:	607b      	str	r3, [r7, #4]
}
 80183a0:	bf00      	nop
 80183a2:	e7fe      	b.n	80183a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80183a4:	4b0e      	ldr	r3, [pc, #56]	; (80183e0 <vPortValidateInterruptPriority+0x78>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80183ac:	4b0d      	ldr	r3, [pc, #52]	; (80183e4 <vPortValidateInterruptPriority+0x7c>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d90a      	bls.n	80183ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80183b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b8:	f383 8811 	msr	BASEPRI, r3
 80183bc:	f3bf 8f6f 	isb	sy
 80183c0:	f3bf 8f4f 	dsb	sy
 80183c4:	603b      	str	r3, [r7, #0]
}
 80183c6:	bf00      	nop
 80183c8:	e7fe      	b.n	80183c8 <vPortValidateInterruptPriority+0x60>
	}
 80183ca:	bf00      	nop
 80183cc:	3714      	adds	r7, #20
 80183ce:	46bd      	mov	sp, r7
 80183d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	e000e3f0 	.word	0xe000e3f0
 80183dc:	20001620 	.word	0x20001620
 80183e0:	e000ed0c 	.word	0xe000ed0c
 80183e4:	20001624 	.word	0x20001624

080183e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b08a      	sub	sp, #40	; 0x28
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80183f0:	2300      	movs	r3, #0
 80183f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80183f4:	f7fe fc80 	bl	8016cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80183f8:	4b5b      	ldr	r3, [pc, #364]	; (8018568 <pvPortMalloc+0x180>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d101      	bne.n	8018404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018400:	f000 f920 	bl	8018644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018404:	4b59      	ldr	r3, [pc, #356]	; (801856c <pvPortMalloc+0x184>)
 8018406:	681a      	ldr	r2, [r3, #0]
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	4013      	ands	r3, r2
 801840c:	2b00      	cmp	r3, #0
 801840e:	f040 8093 	bne.w	8018538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d01d      	beq.n	8018454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018418:	2208      	movs	r2, #8
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	4413      	add	r3, r2
 801841e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	f003 0307 	and.w	r3, r3, #7
 8018426:	2b00      	cmp	r3, #0
 8018428:	d014      	beq.n	8018454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f023 0307 	bic.w	r3, r3, #7
 8018430:	3308      	adds	r3, #8
 8018432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f003 0307 	and.w	r3, r3, #7
 801843a:	2b00      	cmp	r3, #0
 801843c:	d00a      	beq.n	8018454 <pvPortMalloc+0x6c>
	__asm volatile
 801843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018442:	f383 8811 	msr	BASEPRI, r3
 8018446:	f3bf 8f6f 	isb	sy
 801844a:	f3bf 8f4f 	dsb	sy
 801844e:	617b      	str	r3, [r7, #20]
}
 8018450:	bf00      	nop
 8018452:	e7fe      	b.n	8018452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d06e      	beq.n	8018538 <pvPortMalloc+0x150>
 801845a:	4b45      	ldr	r3, [pc, #276]	; (8018570 <pvPortMalloc+0x188>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	687a      	ldr	r2, [r7, #4]
 8018460:	429a      	cmp	r2, r3
 8018462:	d869      	bhi.n	8018538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018464:	4b43      	ldr	r3, [pc, #268]	; (8018574 <pvPortMalloc+0x18c>)
 8018466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018468:	4b42      	ldr	r3, [pc, #264]	; (8018574 <pvPortMalloc+0x18c>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801846e:	e004      	b.n	801847a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	429a      	cmp	r2, r3
 8018482:	d903      	bls.n	801848c <pvPortMalloc+0xa4>
 8018484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d1f1      	bne.n	8018470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801848c:	4b36      	ldr	r3, [pc, #216]	; (8018568 <pvPortMalloc+0x180>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018492:	429a      	cmp	r2, r3
 8018494:	d050      	beq.n	8018538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018496:	6a3b      	ldr	r3, [r7, #32]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2208      	movs	r2, #8
 801849c:	4413      	add	r3, r2
 801849e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80184a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a2:	681a      	ldr	r2, [r3, #0]
 80184a4:	6a3b      	ldr	r3, [r7, #32]
 80184a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80184a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184aa:	685a      	ldr	r2, [r3, #4]
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	1ad2      	subs	r2, r2, r3
 80184b0:	2308      	movs	r3, #8
 80184b2:	005b      	lsls	r3, r3, #1
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d91f      	bls.n	80184f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80184b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	4413      	add	r3, r2
 80184be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80184c0:	69bb      	ldr	r3, [r7, #24]
 80184c2:	f003 0307 	and.w	r3, r3, #7
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d00a      	beq.n	80184e0 <pvPortMalloc+0xf8>
	__asm volatile
 80184ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ce:	f383 8811 	msr	BASEPRI, r3
 80184d2:	f3bf 8f6f 	isb	sy
 80184d6:	f3bf 8f4f 	dsb	sy
 80184da:	613b      	str	r3, [r7, #16]
}
 80184dc:	bf00      	nop
 80184de:	e7fe      	b.n	80184de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80184e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e2:	685a      	ldr	r2, [r3, #4]
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	1ad2      	subs	r2, r2, r3
 80184e8:	69bb      	ldr	r3, [r7, #24]
 80184ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	687a      	ldr	r2, [r7, #4]
 80184f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80184f2:	69b8      	ldr	r0, [r7, #24]
 80184f4:	f000 f908 	bl	8018708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80184f8:	4b1d      	ldr	r3, [pc, #116]	; (8018570 <pvPortMalloc+0x188>)
 80184fa:	681a      	ldr	r2, [r3, #0]
 80184fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fe:	685b      	ldr	r3, [r3, #4]
 8018500:	1ad3      	subs	r3, r2, r3
 8018502:	4a1b      	ldr	r2, [pc, #108]	; (8018570 <pvPortMalloc+0x188>)
 8018504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018506:	4b1a      	ldr	r3, [pc, #104]	; (8018570 <pvPortMalloc+0x188>)
 8018508:	681a      	ldr	r2, [r3, #0]
 801850a:	4b1b      	ldr	r3, [pc, #108]	; (8018578 <pvPortMalloc+0x190>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	429a      	cmp	r2, r3
 8018510:	d203      	bcs.n	801851a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018512:	4b17      	ldr	r3, [pc, #92]	; (8018570 <pvPortMalloc+0x188>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	4a18      	ldr	r2, [pc, #96]	; (8018578 <pvPortMalloc+0x190>)
 8018518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851c:	685a      	ldr	r2, [r3, #4]
 801851e:	4b13      	ldr	r3, [pc, #76]	; (801856c <pvPortMalloc+0x184>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	431a      	orrs	r2, r3
 8018524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801852a:	2200      	movs	r2, #0
 801852c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801852e:	4b13      	ldr	r3, [pc, #76]	; (801857c <pvPortMalloc+0x194>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	3301      	adds	r3, #1
 8018534:	4a11      	ldr	r2, [pc, #68]	; (801857c <pvPortMalloc+0x194>)
 8018536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018538:	f7fe fbec 	bl	8016d14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801853c:	69fb      	ldr	r3, [r7, #28]
 801853e:	f003 0307 	and.w	r3, r3, #7
 8018542:	2b00      	cmp	r3, #0
 8018544:	d00a      	beq.n	801855c <pvPortMalloc+0x174>
	__asm volatile
 8018546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801854a:	f383 8811 	msr	BASEPRI, r3
 801854e:	f3bf 8f6f 	isb	sy
 8018552:	f3bf 8f4f 	dsb	sy
 8018556:	60fb      	str	r3, [r7, #12]
}
 8018558:	bf00      	nop
 801855a:	e7fe      	b.n	801855a <pvPortMalloc+0x172>
	return pvReturn;
 801855c:	69fb      	ldr	r3, [r7, #28]
}
 801855e:	4618      	mov	r0, r3
 8018560:	3728      	adds	r7, #40	; 0x28
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	bf00      	nop
 8018568:	20005c80 	.word	0x20005c80
 801856c:	20005c94 	.word	0x20005c94
 8018570:	20005c84 	.word	0x20005c84
 8018574:	20005c78 	.word	0x20005c78
 8018578:	20005c88 	.word	0x20005c88
 801857c:	20005c8c 	.word	0x20005c8c

08018580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b086      	sub	sp, #24
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d04d      	beq.n	801862e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018592:	2308      	movs	r3, #8
 8018594:	425b      	negs	r3, r3
 8018596:	697a      	ldr	r2, [r7, #20]
 8018598:	4413      	add	r3, r2
 801859a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	685a      	ldr	r2, [r3, #4]
 80185a4:	4b24      	ldr	r3, [pc, #144]	; (8018638 <vPortFree+0xb8>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4013      	ands	r3, r2
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d10a      	bne.n	80185c4 <vPortFree+0x44>
	__asm volatile
 80185ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185b2:	f383 8811 	msr	BASEPRI, r3
 80185b6:	f3bf 8f6f 	isb	sy
 80185ba:	f3bf 8f4f 	dsb	sy
 80185be:	60fb      	str	r3, [r7, #12]
}
 80185c0:	bf00      	nop
 80185c2:	e7fe      	b.n	80185c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80185c4:	693b      	ldr	r3, [r7, #16]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d00a      	beq.n	80185e2 <vPortFree+0x62>
	__asm volatile
 80185cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185d0:	f383 8811 	msr	BASEPRI, r3
 80185d4:	f3bf 8f6f 	isb	sy
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	60bb      	str	r3, [r7, #8]
}
 80185de:	bf00      	nop
 80185e0:	e7fe      	b.n	80185e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80185e2:	693b      	ldr	r3, [r7, #16]
 80185e4:	685a      	ldr	r2, [r3, #4]
 80185e6:	4b14      	ldr	r3, [pc, #80]	; (8018638 <vPortFree+0xb8>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4013      	ands	r3, r2
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d01e      	beq.n	801862e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80185f0:	693b      	ldr	r3, [r7, #16]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d11a      	bne.n	801862e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	685a      	ldr	r2, [r3, #4]
 80185fc:	4b0e      	ldr	r3, [pc, #56]	; (8018638 <vPortFree+0xb8>)
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	43db      	mvns	r3, r3
 8018602:	401a      	ands	r2, r3
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018608:	f7fe fb76 	bl	8016cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801860c:	693b      	ldr	r3, [r7, #16]
 801860e:	685a      	ldr	r2, [r3, #4]
 8018610:	4b0a      	ldr	r3, [pc, #40]	; (801863c <vPortFree+0xbc>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	4413      	add	r3, r2
 8018616:	4a09      	ldr	r2, [pc, #36]	; (801863c <vPortFree+0xbc>)
 8018618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801861a:	6938      	ldr	r0, [r7, #16]
 801861c:	f000 f874 	bl	8018708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018620:	4b07      	ldr	r3, [pc, #28]	; (8018640 <vPortFree+0xc0>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	3301      	adds	r3, #1
 8018626:	4a06      	ldr	r2, [pc, #24]	; (8018640 <vPortFree+0xc0>)
 8018628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801862a:	f7fe fb73 	bl	8016d14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801862e:	bf00      	nop
 8018630:	3718      	adds	r7, #24
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}
 8018636:	bf00      	nop
 8018638:	20005c94 	.word	0x20005c94
 801863c:	20005c84 	.word	0x20005c84
 8018640:	20005c90 	.word	0x20005c90

08018644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018644:	b480      	push	{r7}
 8018646:	b085      	sub	sp, #20
 8018648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801864a:	f244 6350 	movw	r3, #18000	; 0x4650
 801864e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018650:	4b27      	ldr	r3, [pc, #156]	; (80186f0 <prvHeapInit+0xac>)
 8018652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	f003 0307 	and.w	r3, r3, #7
 801865a:	2b00      	cmp	r3, #0
 801865c:	d00c      	beq.n	8018678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	3307      	adds	r3, #7
 8018662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	f023 0307 	bic.w	r3, r3, #7
 801866a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801866c:	68ba      	ldr	r2, [r7, #8]
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	1ad3      	subs	r3, r2, r3
 8018672:	4a1f      	ldr	r2, [pc, #124]	; (80186f0 <prvHeapInit+0xac>)
 8018674:	4413      	add	r3, r2
 8018676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801867c:	4a1d      	ldr	r2, [pc, #116]	; (80186f4 <prvHeapInit+0xb0>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018682:	4b1c      	ldr	r3, [pc, #112]	; (80186f4 <prvHeapInit+0xb0>)
 8018684:	2200      	movs	r2, #0
 8018686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	68ba      	ldr	r2, [r7, #8]
 801868c:	4413      	add	r3, r2
 801868e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018690:	2208      	movs	r2, #8
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	1a9b      	subs	r3, r3, r2
 8018696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	f023 0307 	bic.w	r3, r3, #7
 801869e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	4a15      	ldr	r2, [pc, #84]	; (80186f8 <prvHeapInit+0xb4>)
 80186a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80186a6:	4b14      	ldr	r3, [pc, #80]	; (80186f8 <prvHeapInit+0xb4>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	2200      	movs	r2, #0
 80186ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80186ae:	4b12      	ldr	r3, [pc, #72]	; (80186f8 <prvHeapInit+0xb4>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	2200      	movs	r2, #0
 80186b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	68fa      	ldr	r2, [r7, #12]
 80186be:	1ad2      	subs	r2, r2, r3
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80186c4:	4b0c      	ldr	r3, [pc, #48]	; (80186f8 <prvHeapInit+0xb4>)
 80186c6:	681a      	ldr	r2, [r3, #0]
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	4a0a      	ldr	r2, [pc, #40]	; (80186fc <prvHeapInit+0xb8>)
 80186d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80186d4:	683b      	ldr	r3, [r7, #0]
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	4a09      	ldr	r2, [pc, #36]	; (8018700 <prvHeapInit+0xbc>)
 80186da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80186dc:	4b09      	ldr	r3, [pc, #36]	; (8018704 <prvHeapInit+0xc0>)
 80186de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80186e2:	601a      	str	r2, [r3, #0]
}
 80186e4:	bf00      	nop
 80186e6:	3714      	adds	r7, #20
 80186e8:	46bd      	mov	sp, r7
 80186ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ee:	4770      	bx	lr
 80186f0:	20001628 	.word	0x20001628
 80186f4:	20005c78 	.word	0x20005c78
 80186f8:	20005c80 	.word	0x20005c80
 80186fc:	20005c88 	.word	0x20005c88
 8018700:	20005c84 	.word	0x20005c84
 8018704:	20005c94 	.word	0x20005c94

08018708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018708:	b480      	push	{r7}
 801870a:	b085      	sub	sp, #20
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018710:	4b28      	ldr	r3, [pc, #160]	; (80187b4 <prvInsertBlockIntoFreeList+0xac>)
 8018712:	60fb      	str	r3, [r7, #12]
 8018714:	e002      	b.n	801871c <prvInsertBlockIntoFreeList+0x14>
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	60fb      	str	r3, [r7, #12]
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	687a      	ldr	r2, [r7, #4]
 8018722:	429a      	cmp	r2, r3
 8018724:	d8f7      	bhi.n	8018716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	4413      	add	r3, r2
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	429a      	cmp	r2, r3
 8018736:	d108      	bne.n	801874a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	685a      	ldr	r2, [r3, #4]
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	685b      	ldr	r3, [r3, #4]
 8018740:	441a      	add	r2, r3
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	685b      	ldr	r3, [r3, #4]
 8018752:	68ba      	ldr	r2, [r7, #8]
 8018754:	441a      	add	r2, r3
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	429a      	cmp	r2, r3
 801875c:	d118      	bne.n	8018790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	681a      	ldr	r2, [r3, #0]
 8018762:	4b15      	ldr	r3, [pc, #84]	; (80187b8 <prvInsertBlockIntoFreeList+0xb0>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	429a      	cmp	r2, r3
 8018768:	d00d      	beq.n	8018786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	685a      	ldr	r2, [r3, #4]
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	685b      	ldr	r3, [r3, #4]
 8018774:	441a      	add	r2, r3
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	601a      	str	r2, [r3, #0]
 8018784:	e008      	b.n	8018798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018786:	4b0c      	ldr	r3, [pc, #48]	; (80187b8 <prvInsertBlockIntoFreeList+0xb0>)
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	601a      	str	r2, [r3, #0]
 801878e:	e003      	b.n	8018798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	681a      	ldr	r2, [r3, #0]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018798:	68fa      	ldr	r2, [r7, #12]
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	429a      	cmp	r2, r3
 801879e:	d002      	beq.n	80187a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	687a      	ldr	r2, [r7, #4]
 80187a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80187a6:	bf00      	nop
 80187a8:	3714      	adds	r7, #20
 80187aa:	46bd      	mov	sp, r7
 80187ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop
 80187b4:	20005c78 	.word	0x20005c78
 80187b8:	20005c80 	.word	0x20005c80

080187bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80187c0:	2200      	movs	r2, #0
 80187c2:	4912      	ldr	r1, [pc, #72]	; (801880c <MX_USB_DEVICE_Init+0x50>)
 80187c4:	4812      	ldr	r0, [pc, #72]	; (8018810 <MX_USB_DEVICE_Init+0x54>)
 80187c6:	f7f8 fc31 	bl	801102c <USBD_Init>
 80187ca:	4603      	mov	r3, r0
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d001      	beq.n	80187d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80187d0:	f7e9 ff4c 	bl	800266c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80187d4:	490f      	ldr	r1, [pc, #60]	; (8018814 <MX_USB_DEVICE_Init+0x58>)
 80187d6:	480e      	ldr	r0, [pc, #56]	; (8018810 <MX_USB_DEVICE_Init+0x54>)
 80187d8:	f7f8 fc58 	bl	801108c <USBD_RegisterClass>
 80187dc:	4603      	mov	r3, r0
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d001      	beq.n	80187e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80187e2:	f7e9 ff43 	bl	800266c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80187e6:	490c      	ldr	r1, [pc, #48]	; (8018818 <MX_USB_DEVICE_Init+0x5c>)
 80187e8:	4809      	ldr	r0, [pc, #36]	; (8018810 <MX_USB_DEVICE_Init+0x54>)
 80187ea:	f7f8 fba9 	bl	8010f40 <USBD_CDC_RegisterInterface>
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d001      	beq.n	80187f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80187f4:	f7e9 ff3a 	bl	800266c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80187f8:	4805      	ldr	r0, [pc, #20]	; (8018810 <MX_USB_DEVICE_Init+0x54>)
 80187fa:	f7f8 fc6e 	bl	80110da <USBD_Start>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018804:	f7e9 ff32 	bl	800266c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018808:	bf00      	nop
 801880a:	bd80      	pop	{r7, pc}
 801880c:	200001a0 	.word	0x200001a0
 8018810:	200076d0 	.word	0x200076d0
 8018814:	20000084 	.word	0x20000084
 8018818:	2000018c 	.word	0x2000018c

0801881c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018820:	2200      	movs	r2, #0
 8018822:	4905      	ldr	r1, [pc, #20]	; (8018838 <CDC_Init_FS+0x1c>)
 8018824:	4805      	ldr	r0, [pc, #20]	; (801883c <CDC_Init_FS+0x20>)
 8018826:	f7f8 fba0 	bl	8010f6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801882a:	4905      	ldr	r1, [pc, #20]	; (8018840 <CDC_Init_FS+0x24>)
 801882c:	4803      	ldr	r0, [pc, #12]	; (801883c <CDC_Init_FS+0x20>)
 801882e:	f7f8 fbba 	bl	8010fa6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018832:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018834:	4618      	mov	r0, r3
 8018836:	bd80      	pop	{r7, pc}
 8018838:	200081a0 	.word	0x200081a0
 801883c:	200076d0 	.word	0x200076d0
 8018840:	200079a0 	.word	0x200079a0

08018844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018844:	b480      	push	{r7}
 8018846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801884a:	4618      	mov	r0, r3
 801884c:	46bd      	mov	sp, r7
 801884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018852:	4770      	bx	lr

08018854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018854:	b480      	push	{r7}
 8018856:	b083      	sub	sp, #12
 8018858:	af00      	add	r7, sp, #0
 801885a:	4603      	mov	r3, r0
 801885c:	6039      	str	r1, [r7, #0]
 801885e:	71fb      	strb	r3, [r7, #7]
 8018860:	4613      	mov	r3, r2
 8018862:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018864:	79fb      	ldrb	r3, [r7, #7]
 8018866:	2b23      	cmp	r3, #35	; 0x23
 8018868:	d84a      	bhi.n	8018900 <CDC_Control_FS+0xac>
 801886a:	a201      	add	r2, pc, #4	; (adr r2, 8018870 <CDC_Control_FS+0x1c>)
 801886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018870:	08018901 	.word	0x08018901
 8018874:	08018901 	.word	0x08018901
 8018878:	08018901 	.word	0x08018901
 801887c:	08018901 	.word	0x08018901
 8018880:	08018901 	.word	0x08018901
 8018884:	08018901 	.word	0x08018901
 8018888:	08018901 	.word	0x08018901
 801888c:	08018901 	.word	0x08018901
 8018890:	08018901 	.word	0x08018901
 8018894:	08018901 	.word	0x08018901
 8018898:	08018901 	.word	0x08018901
 801889c:	08018901 	.word	0x08018901
 80188a0:	08018901 	.word	0x08018901
 80188a4:	08018901 	.word	0x08018901
 80188a8:	08018901 	.word	0x08018901
 80188ac:	08018901 	.word	0x08018901
 80188b0:	08018901 	.word	0x08018901
 80188b4:	08018901 	.word	0x08018901
 80188b8:	08018901 	.word	0x08018901
 80188bc:	08018901 	.word	0x08018901
 80188c0:	08018901 	.word	0x08018901
 80188c4:	08018901 	.word	0x08018901
 80188c8:	08018901 	.word	0x08018901
 80188cc:	08018901 	.word	0x08018901
 80188d0:	08018901 	.word	0x08018901
 80188d4:	08018901 	.word	0x08018901
 80188d8:	08018901 	.word	0x08018901
 80188dc:	08018901 	.word	0x08018901
 80188e0:	08018901 	.word	0x08018901
 80188e4:	08018901 	.word	0x08018901
 80188e8:	08018901 	.word	0x08018901
 80188ec:	08018901 	.word	0x08018901
 80188f0:	08018901 	.word	0x08018901
 80188f4:	08018901 	.word	0x08018901
 80188f8:	08018901 	.word	0x08018901
 80188fc:	08018901 	.word	0x08018901
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018900:	bf00      	nop
  }

  return (USBD_OK);
 8018902:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018904:	4618      	mov	r0, r3
 8018906:	370c      	adds	r7, #12
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr

08018910 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801891a:	6879      	ldr	r1, [r7, #4]
 801891c:	4805      	ldr	r0, [pc, #20]	; (8018934 <CDC_Receive_FS+0x24>)
 801891e:	f7f8 fb42 	bl	8010fa6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018922:	4804      	ldr	r0, [pc, #16]	; (8018934 <CDC_Receive_FS+0x24>)
 8018924:	f7f8 fb58 	bl	8010fd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018928:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801892a:	4618      	mov	r0, r3
 801892c:	3708      	adds	r7, #8
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	200076d0 	.word	0x200076d0

08018938 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018938:	b480      	push	{r7}
 801893a:	b087      	sub	sp, #28
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	4613      	mov	r3, r2
 8018944:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018946:	2300      	movs	r3, #0
 8018948:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801894a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801894e:	4618      	mov	r0, r3
 8018950:	371c      	adds	r7, #28
 8018952:	46bd      	mov	sp, r7
 8018954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018958:	4770      	bx	lr
	...

0801895c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801895c:	b480      	push	{r7}
 801895e:	b083      	sub	sp, #12
 8018960:	af00      	add	r7, sp, #0
 8018962:	4603      	mov	r3, r0
 8018964:	6039      	str	r1, [r7, #0]
 8018966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	2212      	movs	r2, #18
 801896c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801896e:	4b03      	ldr	r3, [pc, #12]	; (801897c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018970:	4618      	mov	r0, r3
 8018972:	370c      	adds	r7, #12
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr
 801897c:	200001bc 	.word	0x200001bc

08018980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018980:	b480      	push	{r7}
 8018982:	b083      	sub	sp, #12
 8018984:	af00      	add	r7, sp, #0
 8018986:	4603      	mov	r3, r0
 8018988:	6039      	str	r1, [r7, #0]
 801898a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	2204      	movs	r2, #4
 8018990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018992:	4b03      	ldr	r3, [pc, #12]	; (80189a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018994:	4618      	mov	r0, r3
 8018996:	370c      	adds	r7, #12
 8018998:	46bd      	mov	sp, r7
 801899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899e:	4770      	bx	lr
 80189a0:	200001d0 	.word	0x200001d0

080189a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	4603      	mov	r3, r0
 80189ac:	6039      	str	r1, [r7, #0]
 80189ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80189b0:	79fb      	ldrb	r3, [r7, #7]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d105      	bne.n	80189c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80189b6:	683a      	ldr	r2, [r7, #0]
 80189b8:	4907      	ldr	r1, [pc, #28]	; (80189d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80189ba:	4808      	ldr	r0, [pc, #32]	; (80189dc <USBD_FS_ProductStrDescriptor+0x38>)
 80189bc:	f7f9 fbbf 	bl	801213e <USBD_GetString>
 80189c0:	e004      	b.n	80189cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80189c2:	683a      	ldr	r2, [r7, #0]
 80189c4:	4904      	ldr	r1, [pc, #16]	; (80189d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80189c6:	4805      	ldr	r0, [pc, #20]	; (80189dc <USBD_FS_ProductStrDescriptor+0x38>)
 80189c8:	f7f9 fbb9 	bl	801213e <USBD_GetString>
  }
  return USBD_StrDesc;
 80189cc:	4b02      	ldr	r3, [pc, #8]	; (80189d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	3708      	adds	r7, #8
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	200089a0 	.word	0x200089a0
 80189dc:	08021094 	.word	0x08021094

080189e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	4603      	mov	r3, r0
 80189e8:	6039      	str	r1, [r7, #0]
 80189ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80189ec:	683a      	ldr	r2, [r7, #0]
 80189ee:	4904      	ldr	r1, [pc, #16]	; (8018a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80189f0:	4804      	ldr	r0, [pc, #16]	; (8018a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80189f2:	f7f9 fba4 	bl	801213e <USBD_GetString>
  return USBD_StrDesc;
 80189f6:	4b02      	ldr	r3, [pc, #8]	; (8018a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80189f8:	4618      	mov	r0, r3
 80189fa:	3708      	adds	r7, #8
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	200089a0 	.word	0x200089a0
 8018a04:	080210ac 	.word	0x080210ac

08018a08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b082      	sub	sp, #8
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	4603      	mov	r3, r0
 8018a10:	6039      	str	r1, [r7, #0]
 8018a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	221a      	movs	r2, #26
 8018a18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018a1a:	f000 f843 	bl	8018aa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018a1e:	4b02      	ldr	r3, [pc, #8]	; (8018a28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3708      	adds	r7, #8
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	200001d4 	.word	0x200001d4

08018a2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	4603      	mov	r3, r0
 8018a34:	6039      	str	r1, [r7, #0]
 8018a36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018a38:	79fb      	ldrb	r3, [r7, #7]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d105      	bne.n	8018a4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a3e:	683a      	ldr	r2, [r7, #0]
 8018a40:	4907      	ldr	r1, [pc, #28]	; (8018a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a42:	4808      	ldr	r0, [pc, #32]	; (8018a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a44:	f7f9 fb7b 	bl	801213e <USBD_GetString>
 8018a48:	e004      	b.n	8018a54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a4a:	683a      	ldr	r2, [r7, #0]
 8018a4c:	4904      	ldr	r1, [pc, #16]	; (8018a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a4e:	4805      	ldr	r0, [pc, #20]	; (8018a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a50:	f7f9 fb75 	bl	801213e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a54:	4b02      	ldr	r3, [pc, #8]	; (8018a60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3708      	adds	r7, #8
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
 8018a5e:	bf00      	nop
 8018a60:	200089a0 	.word	0x200089a0
 8018a64:	080210c0 	.word	0x080210c0

08018a68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	4603      	mov	r3, r0
 8018a70:	6039      	str	r1, [r7, #0]
 8018a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a74:	79fb      	ldrb	r3, [r7, #7]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d105      	bne.n	8018a86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a7a:	683a      	ldr	r2, [r7, #0]
 8018a7c:	4907      	ldr	r1, [pc, #28]	; (8018a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a7e:	4808      	ldr	r0, [pc, #32]	; (8018aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a80:	f7f9 fb5d 	bl	801213e <USBD_GetString>
 8018a84:	e004      	b.n	8018a90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a86:	683a      	ldr	r2, [r7, #0]
 8018a88:	4904      	ldr	r1, [pc, #16]	; (8018a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a8a:	4805      	ldr	r0, [pc, #20]	; (8018aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a8c:	f7f9 fb57 	bl	801213e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a90:	4b02      	ldr	r3, [pc, #8]	; (8018a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	200089a0 	.word	0x200089a0
 8018aa0:	080210cc 	.word	0x080210cc

08018aa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b084      	sub	sp, #16
 8018aa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018aaa:	4b0f      	ldr	r3, [pc, #60]	; (8018ae8 <Get_SerialNum+0x44>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018ab0:	4b0e      	ldr	r3, [pc, #56]	; (8018aec <Get_SerialNum+0x48>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018ab6:	4b0e      	ldr	r3, [pc, #56]	; (8018af0 <Get_SerialNum+0x4c>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d009      	beq.n	8018ade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018aca:	2208      	movs	r2, #8
 8018acc:	4909      	ldr	r1, [pc, #36]	; (8018af4 <Get_SerialNum+0x50>)
 8018ace:	68f8      	ldr	r0, [r7, #12]
 8018ad0:	f000 f814 	bl	8018afc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018ad4:	2204      	movs	r2, #4
 8018ad6:	4908      	ldr	r1, [pc, #32]	; (8018af8 <Get_SerialNum+0x54>)
 8018ad8:	68b8      	ldr	r0, [r7, #8]
 8018ada:	f000 f80f 	bl	8018afc <IntToUnicode>
  }
}
 8018ade:	bf00      	nop
 8018ae0:	3710      	adds	r7, #16
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	1fff7a10 	.word	0x1fff7a10
 8018aec:	1fff7a14 	.word	0x1fff7a14
 8018af0:	1fff7a18 	.word	0x1fff7a18
 8018af4:	200001d6 	.word	0x200001d6
 8018af8:	200001e6 	.word	0x200001e6

08018afc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018afc:	b480      	push	{r7}
 8018afe:	b087      	sub	sp, #28
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	4613      	mov	r3, r2
 8018b08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b0e:	2300      	movs	r3, #0
 8018b10:	75fb      	strb	r3, [r7, #23]
 8018b12:	e027      	b.n	8018b64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	0f1b      	lsrs	r3, r3, #28
 8018b18:	2b09      	cmp	r3, #9
 8018b1a:	d80b      	bhi.n	8018b34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	0f1b      	lsrs	r3, r3, #28
 8018b20:	b2da      	uxtb	r2, r3
 8018b22:	7dfb      	ldrb	r3, [r7, #23]
 8018b24:	005b      	lsls	r3, r3, #1
 8018b26:	4619      	mov	r1, r3
 8018b28:	68bb      	ldr	r3, [r7, #8]
 8018b2a:	440b      	add	r3, r1
 8018b2c:	3230      	adds	r2, #48	; 0x30
 8018b2e:	b2d2      	uxtb	r2, r2
 8018b30:	701a      	strb	r2, [r3, #0]
 8018b32:	e00a      	b.n	8018b4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	0f1b      	lsrs	r3, r3, #28
 8018b38:	b2da      	uxtb	r2, r3
 8018b3a:	7dfb      	ldrb	r3, [r7, #23]
 8018b3c:	005b      	lsls	r3, r3, #1
 8018b3e:	4619      	mov	r1, r3
 8018b40:	68bb      	ldr	r3, [r7, #8]
 8018b42:	440b      	add	r3, r1
 8018b44:	3237      	adds	r2, #55	; 0x37
 8018b46:	b2d2      	uxtb	r2, r2
 8018b48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	011b      	lsls	r3, r3, #4
 8018b4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018b50:	7dfb      	ldrb	r3, [r7, #23]
 8018b52:	005b      	lsls	r3, r3, #1
 8018b54:	3301      	adds	r3, #1
 8018b56:	68ba      	ldr	r2, [r7, #8]
 8018b58:	4413      	add	r3, r2
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018b5e:	7dfb      	ldrb	r3, [r7, #23]
 8018b60:	3301      	adds	r3, #1
 8018b62:	75fb      	strb	r3, [r7, #23]
 8018b64:	7dfa      	ldrb	r2, [r7, #23]
 8018b66:	79fb      	ldrb	r3, [r7, #7]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d3d3      	bcc.n	8018b14 <IntToUnicode+0x18>
  }
}
 8018b6c:	bf00      	nop
 8018b6e:	bf00      	nop
 8018b70:	371c      	adds	r7, #28
 8018b72:	46bd      	mov	sp, r7
 8018b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b78:	4770      	bx	lr
	...

08018b7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b08a      	sub	sp, #40	; 0x28
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b84:	f107 0314 	add.w	r3, r7, #20
 8018b88:	2200      	movs	r2, #0
 8018b8a:	601a      	str	r2, [r3, #0]
 8018b8c:	605a      	str	r2, [r3, #4]
 8018b8e:	609a      	str	r2, [r3, #8]
 8018b90:	60da      	str	r2, [r3, #12]
 8018b92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018b9c:	d147      	bne.n	8018c2e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	613b      	str	r3, [r7, #16]
 8018ba2:	4b25      	ldr	r3, [pc, #148]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ba6:	4a24      	ldr	r2, [pc, #144]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018ba8:	f043 0301 	orr.w	r3, r3, #1
 8018bac:	6313      	str	r3, [r2, #48]	; 0x30
 8018bae:	4b22      	ldr	r3, [pc, #136]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bb2:	f003 0301 	and.w	r3, r3, #1
 8018bb6:	613b      	str	r3, [r7, #16]
 8018bb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bc8:	f107 0314 	add.w	r3, r7, #20
 8018bcc:	4619      	mov	r1, r3
 8018bce:	481b      	ldr	r0, [pc, #108]	; (8018c3c <HAL_PCD_MspInit+0xc0>)
 8018bd0:	f7ef fe00 	bl	80087d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018bd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bda:	2302      	movs	r3, #2
 8018bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bde:	2300      	movs	r3, #0
 8018be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018be2:	2303      	movs	r3, #3
 8018be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018be6:	230a      	movs	r3, #10
 8018be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bea:	f107 0314 	add.w	r3, r7, #20
 8018bee:	4619      	mov	r1, r3
 8018bf0:	4812      	ldr	r0, [pc, #72]	; (8018c3c <HAL_PCD_MspInit+0xc0>)
 8018bf2:	f7ef fdef 	bl	80087d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018bf6:	4b10      	ldr	r3, [pc, #64]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bfa:	4a0f      	ldr	r2, [pc, #60]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c00:	6353      	str	r3, [r2, #52]	; 0x34
 8018c02:	2300      	movs	r3, #0
 8018c04:	60fb      	str	r3, [r7, #12]
 8018c06:	4b0c      	ldr	r3, [pc, #48]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c0a:	4a0b      	ldr	r2, [pc, #44]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018c10:	6453      	str	r3, [r2, #68]	; 0x44
 8018c12:	4b09      	ldr	r3, [pc, #36]	; (8018c38 <HAL_PCD_MspInit+0xbc>)
 8018c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018c1a:	60fb      	str	r3, [r7, #12]
 8018c1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018c1e:	2200      	movs	r2, #0
 8018c20:	2105      	movs	r1, #5
 8018c22:	2043      	movs	r0, #67	; 0x43
 8018c24:	f7ef fd9e 	bl	8008764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018c28:	2043      	movs	r0, #67	; 0x43
 8018c2a:	f7ef fdb7 	bl	800879c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018c2e:	bf00      	nop
 8018c30:	3728      	adds	r7, #40	; 0x28
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}
 8018c36:	bf00      	nop
 8018c38:	40023800 	.word	0x40023800
 8018c3c:	40020000 	.word	0x40020000

08018c40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018c54:	4619      	mov	r1, r3
 8018c56:	4610      	mov	r0, r2
 8018c58:	f7f8 fa8a 	bl	8011170 <USBD_LL_SetupStage>
}
 8018c5c:	bf00      	nop
 8018c5e:	3708      	adds	r7, #8
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
 8018c6c:	460b      	mov	r3, r1
 8018c6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018c76:	78fa      	ldrb	r2, [r7, #3]
 8018c78:	6879      	ldr	r1, [r7, #4]
 8018c7a:	4613      	mov	r3, r2
 8018c7c:	00db      	lsls	r3, r3, #3
 8018c7e:	1a9b      	subs	r3, r3, r2
 8018c80:	009b      	lsls	r3, r3, #2
 8018c82:	440b      	add	r3, r1
 8018c84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018c88:	681a      	ldr	r2, [r3, #0]
 8018c8a:	78fb      	ldrb	r3, [r7, #3]
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	f7f8 fac4 	bl	801121a <USBD_LL_DataOutStage>
}
 8018c92:	bf00      	nop
 8018c94:	3708      	adds	r7, #8
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}

08018c9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c9a:	b580      	push	{r7, lr}
 8018c9c:	b082      	sub	sp, #8
 8018c9e:	af00      	add	r7, sp, #0
 8018ca0:	6078      	str	r0, [r7, #4]
 8018ca2:	460b      	mov	r3, r1
 8018ca4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018cac:	78fa      	ldrb	r2, [r7, #3]
 8018cae:	6879      	ldr	r1, [r7, #4]
 8018cb0:	4613      	mov	r3, r2
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	1a9b      	subs	r3, r3, r2
 8018cb6:	009b      	lsls	r3, r3, #2
 8018cb8:	440b      	add	r3, r1
 8018cba:	3348      	adds	r3, #72	; 0x48
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	78fb      	ldrb	r3, [r7, #3]
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	f7f8 fb0d 	bl	80112e0 <USBD_LL_DataInStage>
}
 8018cc6:	bf00      	nop
 8018cc8:	3708      	adds	r7, #8
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}

08018cce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cce:	b580      	push	{r7, lr}
 8018cd0:	b082      	sub	sp, #8
 8018cd2:	af00      	add	r7, sp, #0
 8018cd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7f8 fc21 	bl	8011524 <USBD_LL_SOF>
}
 8018ce2:	bf00      	nop
 8018ce4:	3708      	adds	r7, #8
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bd80      	pop	{r7, pc}

08018cea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cea:	b580      	push	{r7, lr}
 8018cec:	b084      	sub	sp, #16
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d102      	bne.n	8018d04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	73fb      	strb	r3, [r7, #15]
 8018d02:	e008      	b.n	8018d16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	2b02      	cmp	r3, #2
 8018d0a:	d102      	bne.n	8018d12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	73fb      	strb	r3, [r7, #15]
 8018d10:	e001      	b.n	8018d16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018d12:	f7e9 fcab 	bl	800266c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018d1c:	7bfa      	ldrb	r2, [r7, #15]
 8018d1e:	4611      	mov	r1, r2
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7f8 fbc1 	bl	80114a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7f8 fb6d 	bl	801140c <USBD_LL_Reset>
}
 8018d32:	bf00      	nop
 8018d34:	3710      	adds	r7, #16
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}
	...

08018d3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7f8 fbbc 	bl	80114c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	6812      	ldr	r2, [r2, #0]
 8018d5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018d62:	f043 0301 	orr.w	r3, r3, #1
 8018d66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6a1b      	ldr	r3, [r3, #32]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d005      	beq.n	8018d7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018d70:	4b04      	ldr	r3, [pc, #16]	; (8018d84 <HAL_PCD_SuspendCallback+0x48>)
 8018d72:	691b      	ldr	r3, [r3, #16]
 8018d74:	4a03      	ldr	r2, [pc, #12]	; (8018d84 <HAL_PCD_SuspendCallback+0x48>)
 8018d76:	f043 0306 	orr.w	r3, r3, #6
 8018d7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018d7c:	bf00      	nop
 8018d7e:	3708      	adds	r7, #8
 8018d80:	46bd      	mov	sp, r7
 8018d82:	bd80      	pop	{r7, pc}
 8018d84:	e000ed00 	.word	0xe000ed00

08018d88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7f8 fbac 	bl	80114f4 <USBD_LL_Resume>
}
 8018d9c:	bf00      	nop
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	460b      	mov	r3, r1
 8018dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018db6:	78fa      	ldrb	r2, [r7, #3]
 8018db8:	4611      	mov	r1, r2
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7f8 fbfa 	bl	80115b4 <USBD_LL_IsoOUTIncomplete>
}
 8018dc0:	bf00      	nop
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018dda:	78fa      	ldrb	r2, [r7, #3]
 8018ddc:	4611      	mov	r1, r2
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7f8 fbc2 	bl	8011568 <USBD_LL_IsoINIncomplete>
}
 8018de4:	bf00      	nop
 8018de6:	3708      	adds	r7, #8
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}

08018dec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b082      	sub	sp, #8
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f8 fc00 	bl	8011600 <USBD_LL_DevConnected>
}
 8018e00:	bf00      	nop
 8018e02:	3708      	adds	r7, #8
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}

08018e08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f8 fbfd 	bl	8011616 <USBD_LL_DevDisconnected>
}
 8018e1c:	bf00      	nop
 8018e1e:	3708      	adds	r7, #8
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}

08018e24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b082      	sub	sp, #8
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d13c      	bne.n	8018eae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018e34:	4a20      	ldr	r2, [pc, #128]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	4a1e      	ldr	r2, [pc, #120]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018e44:	4b1c      	ldr	r3, [pc, #112]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018e4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018e4c:	4b1a      	ldr	r3, [pc, #104]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e4e:	2204      	movs	r2, #4
 8018e50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018e52:	4b19      	ldr	r3, [pc, #100]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e54:	2202      	movs	r2, #2
 8018e56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018e58:	4b17      	ldr	r3, [pc, #92]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018e5e:	4b16      	ldr	r3, [pc, #88]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e60:	2202      	movs	r2, #2
 8018e62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018e64:	4b14      	ldr	r3, [pc, #80]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e66:	2200      	movs	r2, #0
 8018e68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018e6a:	4b13      	ldr	r3, [pc, #76]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018e70:	4b11      	ldr	r3, [pc, #68]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e72:	2200      	movs	r2, #0
 8018e74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8018e76:	4b10      	ldr	r3, [pc, #64]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e78:	2201      	movs	r2, #1
 8018e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018e7c:	4b0e      	ldr	r3, [pc, #56]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e7e:	2200      	movs	r2, #0
 8018e80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018e82:	480d      	ldr	r0, [pc, #52]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e84:	f7f0 ff5e 	bl	8009d44 <HAL_PCD_Init>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d001      	beq.n	8018e92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018e8e:	f7e9 fbed 	bl	800266c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018e92:	2180      	movs	r1, #128	; 0x80
 8018e94:	4808      	ldr	r0, [pc, #32]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018e96:	f7f2 f8bc 	bl	800b012 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018e9a:	2240      	movs	r2, #64	; 0x40
 8018e9c:	2100      	movs	r1, #0
 8018e9e:	4806      	ldr	r0, [pc, #24]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018ea0:	f7f2 f870 	bl	800af84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018ea4:	2280      	movs	r2, #128	; 0x80
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	4803      	ldr	r0, [pc, #12]	; (8018eb8 <USBD_LL_Init+0x94>)
 8018eaa:	f7f2 f86b 	bl	800af84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018eae:	2300      	movs	r3, #0
}
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	3708      	adds	r7, #8
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bd80      	pop	{r7, pc}
 8018eb8:	20008ba0 	.word	0x20008ba0

08018ebc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7f1 f853 	bl	8009f7e <HAL_PCD_Start>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018edc:	7bfb      	ldrb	r3, [r7, #15]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f000 f942 	bl	8019168 <USBD_Get_USB_Status>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	3710      	adds	r7, #16
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}

08018ef2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ef2:	b580      	push	{r7, lr}
 8018ef4:	b084      	sub	sp, #16
 8018ef6:	af00      	add	r7, sp, #0
 8018ef8:	6078      	str	r0, [r7, #4]
 8018efa:	4608      	mov	r0, r1
 8018efc:	4611      	mov	r1, r2
 8018efe:	461a      	mov	r2, r3
 8018f00:	4603      	mov	r3, r0
 8018f02:	70fb      	strb	r3, [r7, #3]
 8018f04:	460b      	mov	r3, r1
 8018f06:	70bb      	strb	r3, [r7, #2]
 8018f08:	4613      	mov	r3, r2
 8018f0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f10:	2300      	movs	r3, #0
 8018f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018f1a:	78bb      	ldrb	r3, [r7, #2]
 8018f1c:	883a      	ldrh	r2, [r7, #0]
 8018f1e:	78f9      	ldrb	r1, [r7, #3]
 8018f20:	f7f1 fc37 	bl	800a792 <HAL_PCD_EP_Open>
 8018f24:	4603      	mov	r3, r0
 8018f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f28:	7bfb      	ldrb	r3, [r7, #15]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f000 f91c 	bl	8019168 <USBD_Get_USB_Status>
 8018f30:	4603      	mov	r3, r0
 8018f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3710      	adds	r7, #16
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}

08018f3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b084      	sub	sp, #16
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
 8018f46:	460b      	mov	r3, r1
 8018f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f58:	78fa      	ldrb	r2, [r7, #3]
 8018f5a:	4611      	mov	r1, r2
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7f1 fc80 	bl	800a862 <HAL_PCD_EP_Close>
 8018f62:	4603      	mov	r3, r0
 8018f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f66:	7bfb      	ldrb	r3, [r7, #15]
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f000 f8fd 	bl	8019168 <USBD_Get_USB_Status>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3710      	adds	r7, #16
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}

08018f7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
 8018f84:	460b      	mov	r3, r1
 8018f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f96:	78fa      	ldrb	r2, [r7, #3]
 8018f98:	4611      	mov	r1, r2
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7f1 fd58 	bl	800aa50 <HAL_PCD_EP_SetStall>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fa4:	7bfb      	ldrb	r3, [r7, #15]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f000 f8de 	bl	8019168 <USBD_Get_USB_Status>
 8018fac:	4603      	mov	r3, r0
 8018fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3710      	adds	r7, #16
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bd80      	pop	{r7, pc}

08018fba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fba:	b580      	push	{r7, lr}
 8018fbc:	b084      	sub	sp, #16
 8018fbe:	af00      	add	r7, sp, #0
 8018fc0:	6078      	str	r0, [r7, #4]
 8018fc2:	460b      	mov	r3, r1
 8018fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fd4:	78fa      	ldrb	r2, [r7, #3]
 8018fd6:	4611      	mov	r1, r2
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7f1 fd9d 	bl	800ab18 <HAL_PCD_EP_ClrStall>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fe2:	7bfb      	ldrb	r3, [r7, #15]
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f000 f8bf 	bl	8019168 <USBD_Get_USB_Status>
 8018fea:	4603      	mov	r3, r0
 8018fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	3710      	adds	r7, #16
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}

08018ff8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ff8:	b480      	push	{r7}
 8018ffa:	b085      	sub	sp, #20
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
 8019000:	460b      	mov	r3, r1
 8019002:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801900a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801900c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019010:	2b00      	cmp	r3, #0
 8019012:	da0b      	bge.n	801902c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019014:	78fb      	ldrb	r3, [r7, #3]
 8019016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801901a:	68f9      	ldr	r1, [r7, #12]
 801901c:	4613      	mov	r3, r2
 801901e:	00db      	lsls	r3, r3, #3
 8019020:	1a9b      	subs	r3, r3, r2
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	440b      	add	r3, r1
 8019026:	333e      	adds	r3, #62	; 0x3e
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	e00b      	b.n	8019044 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801902c:	78fb      	ldrb	r3, [r7, #3]
 801902e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019032:	68f9      	ldr	r1, [r7, #12]
 8019034:	4613      	mov	r3, r2
 8019036:	00db      	lsls	r3, r3, #3
 8019038:	1a9b      	subs	r3, r3, r2
 801903a:	009b      	lsls	r3, r3, #2
 801903c:	440b      	add	r3, r1
 801903e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019042:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019044:	4618      	mov	r0, r3
 8019046:	3714      	adds	r7, #20
 8019048:	46bd      	mov	sp, r7
 801904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904e:	4770      	bx	lr

08019050 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b084      	sub	sp, #16
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	460b      	mov	r3, r1
 801905a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801905c:	2300      	movs	r3, #0
 801905e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019060:	2300      	movs	r3, #0
 8019062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801906a:	78fa      	ldrb	r2, [r7, #3]
 801906c:	4611      	mov	r1, r2
 801906e:	4618      	mov	r0, r3
 8019070:	f7f1 fb6a 	bl	800a748 <HAL_PCD_SetAddress>
 8019074:	4603      	mov	r3, r0
 8019076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019078:	7bfb      	ldrb	r3, [r7, #15]
 801907a:	4618      	mov	r0, r3
 801907c:	f000 f874 	bl	8019168 <USBD_Get_USB_Status>
 8019080:	4603      	mov	r3, r0
 8019082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019084:	7bbb      	ldrb	r3, [r7, #14]
}
 8019086:	4618      	mov	r0, r3
 8019088:	3710      	adds	r7, #16
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}

0801908e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801908e:	b580      	push	{r7, lr}
 8019090:	b086      	sub	sp, #24
 8019092:	af00      	add	r7, sp, #0
 8019094:	60f8      	str	r0, [r7, #12]
 8019096:	607a      	str	r2, [r7, #4]
 8019098:	603b      	str	r3, [r7, #0]
 801909a:	460b      	mov	r3, r1
 801909c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801909e:	2300      	movs	r3, #0
 80190a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190a2:	2300      	movs	r3, #0
 80190a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80190ac:	7af9      	ldrb	r1, [r7, #11]
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	687a      	ldr	r2, [r7, #4]
 80190b2:	f7f1 fc83 	bl	800a9bc <HAL_PCD_EP_Transmit>
 80190b6:	4603      	mov	r3, r0
 80190b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190ba:	7dfb      	ldrb	r3, [r7, #23]
 80190bc:	4618      	mov	r0, r3
 80190be:	f000 f853 	bl	8019168 <USBD_Get_USB_Status>
 80190c2:	4603      	mov	r3, r0
 80190c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80190c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	3718      	adds	r7, #24
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}

080190d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b086      	sub	sp, #24
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	607a      	str	r2, [r7, #4]
 80190da:	603b      	str	r3, [r7, #0]
 80190dc:	460b      	mov	r3, r1
 80190de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190e0:	2300      	movs	r3, #0
 80190e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190e4:	2300      	movs	r3, #0
 80190e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80190ee:	7af9      	ldrb	r1, [r7, #11]
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	687a      	ldr	r2, [r7, #4]
 80190f4:	f7f1 fbff 	bl	800a8f6 <HAL_PCD_EP_Receive>
 80190f8:	4603      	mov	r3, r0
 80190fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190fc:	7dfb      	ldrb	r3, [r7, #23]
 80190fe:	4618      	mov	r0, r3
 8019100:	f000 f832 	bl	8019168 <USBD_Get_USB_Status>
 8019104:	4603      	mov	r3, r0
 8019106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019108:	7dbb      	ldrb	r3, [r7, #22]
}
 801910a:	4618      	mov	r0, r3
 801910c:	3718      	adds	r7, #24
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}

08019112 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019112:	b580      	push	{r7, lr}
 8019114:	b082      	sub	sp, #8
 8019116:	af00      	add	r7, sp, #0
 8019118:	6078      	str	r0, [r7, #4]
 801911a:	460b      	mov	r3, r1
 801911c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019124:	78fa      	ldrb	r2, [r7, #3]
 8019126:	4611      	mov	r1, r2
 8019128:	4618      	mov	r0, r3
 801912a:	f7f1 fc2f 	bl	800a98c <HAL_PCD_EP_GetRxCount>
 801912e:	4603      	mov	r3, r0
}
 8019130:	4618      	mov	r0, r3
 8019132:	3708      	adds	r7, #8
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}

08019138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019138:	b480      	push	{r7}
 801913a:	b083      	sub	sp, #12
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019140:	4b03      	ldr	r3, [pc, #12]	; (8019150 <USBD_static_malloc+0x18>)
}
 8019142:	4618      	mov	r0, r3
 8019144:	370c      	adds	r7, #12
 8019146:	46bd      	mov	sp, r7
 8019148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914c:	4770      	bx	lr
 801914e:	bf00      	nop
 8019150:	20005c98 	.word	0x20005c98

08019154 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019154:	b480      	push	{r7}
 8019156:	b083      	sub	sp, #12
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]

}
 801915c:	bf00      	nop
 801915e:	370c      	adds	r7, #12
 8019160:	46bd      	mov	sp, r7
 8019162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019166:	4770      	bx	lr

08019168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019168:	b480      	push	{r7}
 801916a:	b085      	sub	sp, #20
 801916c:	af00      	add	r7, sp, #0
 801916e:	4603      	mov	r3, r0
 8019170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019172:	2300      	movs	r3, #0
 8019174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019176:	79fb      	ldrb	r3, [r7, #7]
 8019178:	2b03      	cmp	r3, #3
 801917a:	d817      	bhi.n	80191ac <USBD_Get_USB_Status+0x44>
 801917c:	a201      	add	r2, pc, #4	; (adr r2, 8019184 <USBD_Get_USB_Status+0x1c>)
 801917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019182:	bf00      	nop
 8019184:	08019195 	.word	0x08019195
 8019188:	0801919b 	.word	0x0801919b
 801918c:	080191a1 	.word	0x080191a1
 8019190:	080191a7 	.word	0x080191a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019194:	2300      	movs	r3, #0
 8019196:	73fb      	strb	r3, [r7, #15]
    break;
 8019198:	e00b      	b.n	80191b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801919a:	2303      	movs	r3, #3
 801919c:	73fb      	strb	r3, [r7, #15]
    break;
 801919e:	e008      	b.n	80191b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80191a0:	2301      	movs	r3, #1
 80191a2:	73fb      	strb	r3, [r7, #15]
    break;
 80191a4:	e005      	b.n	80191b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80191a6:	2303      	movs	r3, #3
 80191a8:	73fb      	strb	r3, [r7, #15]
    break;
 80191aa:	e002      	b.n	80191b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80191ac:	2303      	movs	r3, #3
 80191ae:	73fb      	strb	r3, [r7, #15]
    break;
 80191b0:	bf00      	nop
  }
  return usb_status;
 80191b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3714      	adds	r7, #20
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr

080191c0 <_Znwj>:
 80191c0:	2801      	cmp	r0, #1
 80191c2:	bf38      	it	cc
 80191c4:	2001      	movcc	r0, #1
 80191c6:	b510      	push	{r4, lr}
 80191c8:	4604      	mov	r4, r0
 80191ca:	4620      	mov	r0, r4
 80191cc:	f001 f906 	bl	801a3dc <malloc>
 80191d0:	b930      	cbnz	r0, 80191e0 <_Znwj+0x20>
 80191d2:	f000 f81b 	bl	801920c <_ZSt15get_new_handlerv>
 80191d6:	b908      	cbnz	r0, 80191dc <_Znwj+0x1c>
 80191d8:	f000 ffd4 	bl	801a184 <abort>
 80191dc:	4780      	blx	r0
 80191de:	e7f4      	b.n	80191ca <_Znwj+0xa>
 80191e0:	bd10      	pop	{r4, pc}

080191e2 <__cxa_pure_virtual>:
 80191e2:	b508      	push	{r3, lr}
 80191e4:	f000 f80c 	bl	8019200 <_ZSt9terminatev>

080191e8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80191e8:	b508      	push	{r3, lr}
 80191ea:	4780      	blx	r0
 80191ec:	f000 ffca 	bl	801a184 <abort>

080191f0 <_ZSt13get_terminatev>:
 80191f0:	4b02      	ldr	r3, [pc, #8]	; (80191fc <_ZSt13get_terminatev+0xc>)
 80191f2:	6818      	ldr	r0, [r3, #0]
 80191f4:	f3bf 8f5b 	dmb	ish
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop
 80191fc:	200001f0 	.word	0x200001f0

08019200 <_ZSt9terminatev>:
 8019200:	b508      	push	{r3, lr}
 8019202:	f7ff fff5 	bl	80191f0 <_ZSt13get_terminatev>
 8019206:	f7ff ffef 	bl	80191e8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801920c <_ZSt15get_new_handlerv>:
 801920c:	4b02      	ldr	r3, [pc, #8]	; (8019218 <_ZSt15get_new_handlerv+0xc>)
 801920e:	6818      	ldr	r0, [r3, #0]
 8019210:	f3bf 8f5b 	dmb	ish
 8019214:	4770      	bx	lr
 8019216:	bf00      	nop
 8019218:	20005eb8 	.word	0x20005eb8

0801921c <pow>:
 801921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019220:	ec59 8b10 	vmov	r8, r9, d0
 8019224:	ec57 6b11 	vmov	r6, r7, d1
 8019228:	f000 f8a6 	bl	8019378 <__ieee754_pow>
 801922c:	4b4e      	ldr	r3, [pc, #312]	; (8019368 <pow+0x14c>)
 801922e:	f993 3000 	ldrsb.w	r3, [r3]
 8019232:	3301      	adds	r3, #1
 8019234:	ec55 4b10 	vmov	r4, r5, d0
 8019238:	d015      	beq.n	8019266 <pow+0x4a>
 801923a:	4632      	mov	r2, r6
 801923c:	463b      	mov	r3, r7
 801923e:	4630      	mov	r0, r6
 8019240:	4639      	mov	r1, r7
 8019242:	f7e7 fc83 	bl	8000b4c <__aeabi_dcmpun>
 8019246:	b970      	cbnz	r0, 8019266 <pow+0x4a>
 8019248:	4642      	mov	r2, r8
 801924a:	464b      	mov	r3, r9
 801924c:	4640      	mov	r0, r8
 801924e:	4649      	mov	r1, r9
 8019250:	f7e7 fc7c 	bl	8000b4c <__aeabi_dcmpun>
 8019254:	2200      	movs	r2, #0
 8019256:	2300      	movs	r3, #0
 8019258:	b148      	cbz	r0, 801926e <pow+0x52>
 801925a:	4630      	mov	r0, r6
 801925c:	4639      	mov	r1, r7
 801925e:	f7e7 fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 8019262:	2800      	cmp	r0, #0
 8019264:	d17d      	bne.n	8019362 <pow+0x146>
 8019266:	ec45 4b10 	vmov	d0, r4, r5
 801926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801926e:	4640      	mov	r0, r8
 8019270:	4649      	mov	r1, r9
 8019272:	f7e7 fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 8019276:	b1e0      	cbz	r0, 80192b2 <pow+0x96>
 8019278:	2200      	movs	r2, #0
 801927a:	2300      	movs	r3, #0
 801927c:	4630      	mov	r0, r6
 801927e:	4639      	mov	r1, r7
 8019280:	f7e7 fc32 	bl	8000ae8 <__aeabi_dcmpeq>
 8019284:	2800      	cmp	r0, #0
 8019286:	d16c      	bne.n	8019362 <pow+0x146>
 8019288:	ec47 6b10 	vmov	d0, r6, r7
 801928c:	f000 fe53 	bl	8019f36 <finite>
 8019290:	2800      	cmp	r0, #0
 8019292:	d0e8      	beq.n	8019266 <pow+0x4a>
 8019294:	2200      	movs	r2, #0
 8019296:	2300      	movs	r3, #0
 8019298:	4630      	mov	r0, r6
 801929a:	4639      	mov	r1, r7
 801929c:	f7e7 fc2e 	bl	8000afc <__aeabi_dcmplt>
 80192a0:	2800      	cmp	r0, #0
 80192a2:	d0e0      	beq.n	8019266 <pow+0x4a>
 80192a4:	f000 ff76 	bl	801a194 <__errno>
 80192a8:	2321      	movs	r3, #33	; 0x21
 80192aa:	6003      	str	r3, [r0, #0]
 80192ac:	2400      	movs	r4, #0
 80192ae:	4d2f      	ldr	r5, [pc, #188]	; (801936c <pow+0x150>)
 80192b0:	e7d9      	b.n	8019266 <pow+0x4a>
 80192b2:	ec45 4b10 	vmov	d0, r4, r5
 80192b6:	f000 fe3e 	bl	8019f36 <finite>
 80192ba:	bbb8      	cbnz	r0, 801932c <pow+0x110>
 80192bc:	ec49 8b10 	vmov	d0, r8, r9
 80192c0:	f000 fe39 	bl	8019f36 <finite>
 80192c4:	b390      	cbz	r0, 801932c <pow+0x110>
 80192c6:	ec47 6b10 	vmov	d0, r6, r7
 80192ca:	f000 fe34 	bl	8019f36 <finite>
 80192ce:	b368      	cbz	r0, 801932c <pow+0x110>
 80192d0:	4622      	mov	r2, r4
 80192d2:	462b      	mov	r3, r5
 80192d4:	4620      	mov	r0, r4
 80192d6:	4629      	mov	r1, r5
 80192d8:	f7e7 fc38 	bl	8000b4c <__aeabi_dcmpun>
 80192dc:	b160      	cbz	r0, 80192f8 <pow+0xdc>
 80192de:	f000 ff59 	bl	801a194 <__errno>
 80192e2:	2321      	movs	r3, #33	; 0x21
 80192e4:	6003      	str	r3, [r0, #0]
 80192e6:	2200      	movs	r2, #0
 80192e8:	2300      	movs	r3, #0
 80192ea:	4610      	mov	r0, r2
 80192ec:	4619      	mov	r1, r3
 80192ee:	f7e7 fabd 	bl	800086c <__aeabi_ddiv>
 80192f2:	4604      	mov	r4, r0
 80192f4:	460d      	mov	r5, r1
 80192f6:	e7b6      	b.n	8019266 <pow+0x4a>
 80192f8:	f000 ff4c 	bl	801a194 <__errno>
 80192fc:	2322      	movs	r3, #34	; 0x22
 80192fe:	6003      	str	r3, [r0, #0]
 8019300:	2200      	movs	r2, #0
 8019302:	2300      	movs	r3, #0
 8019304:	4640      	mov	r0, r8
 8019306:	4649      	mov	r1, r9
 8019308:	f7e7 fbf8 	bl	8000afc <__aeabi_dcmplt>
 801930c:	2400      	movs	r4, #0
 801930e:	b158      	cbz	r0, 8019328 <pow+0x10c>
 8019310:	ec47 6b10 	vmov	d0, r6, r7
 8019314:	f000 fe24 	bl	8019f60 <rint>
 8019318:	4632      	mov	r2, r6
 801931a:	ec51 0b10 	vmov	r0, r1, d0
 801931e:	463b      	mov	r3, r7
 8019320:	f7e7 fbe2 	bl	8000ae8 <__aeabi_dcmpeq>
 8019324:	2800      	cmp	r0, #0
 8019326:	d0c2      	beq.n	80192ae <pow+0x92>
 8019328:	4d11      	ldr	r5, [pc, #68]	; (8019370 <pow+0x154>)
 801932a:	e79c      	b.n	8019266 <pow+0x4a>
 801932c:	2200      	movs	r2, #0
 801932e:	2300      	movs	r3, #0
 8019330:	4620      	mov	r0, r4
 8019332:	4629      	mov	r1, r5
 8019334:	f7e7 fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8019338:	2800      	cmp	r0, #0
 801933a:	d094      	beq.n	8019266 <pow+0x4a>
 801933c:	ec49 8b10 	vmov	d0, r8, r9
 8019340:	f000 fdf9 	bl	8019f36 <finite>
 8019344:	2800      	cmp	r0, #0
 8019346:	d08e      	beq.n	8019266 <pow+0x4a>
 8019348:	ec47 6b10 	vmov	d0, r6, r7
 801934c:	f000 fdf3 	bl	8019f36 <finite>
 8019350:	2800      	cmp	r0, #0
 8019352:	d088      	beq.n	8019266 <pow+0x4a>
 8019354:	f000 ff1e 	bl	801a194 <__errno>
 8019358:	2322      	movs	r3, #34	; 0x22
 801935a:	6003      	str	r3, [r0, #0]
 801935c:	2400      	movs	r4, #0
 801935e:	2500      	movs	r5, #0
 8019360:	e781      	b.n	8019266 <pow+0x4a>
 8019362:	4d04      	ldr	r5, [pc, #16]	; (8019374 <pow+0x158>)
 8019364:	2400      	movs	r4, #0
 8019366:	e77e      	b.n	8019266 <pow+0x4a>
 8019368:	200001f4 	.word	0x200001f4
 801936c:	fff00000 	.word	0xfff00000
 8019370:	7ff00000 	.word	0x7ff00000
 8019374:	3ff00000 	.word	0x3ff00000

08019378 <__ieee754_pow>:
 8019378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801937c:	ed2d 8b06 	vpush	{d8-d10}
 8019380:	b08d      	sub	sp, #52	; 0x34
 8019382:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019386:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801938a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801938e:	ea56 0100 	orrs.w	r1, r6, r0
 8019392:	ec53 2b10 	vmov	r2, r3, d0
 8019396:	f000 84d1 	beq.w	8019d3c <__ieee754_pow+0x9c4>
 801939a:	497f      	ldr	r1, [pc, #508]	; (8019598 <__ieee754_pow+0x220>)
 801939c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80193a0:	428c      	cmp	r4, r1
 80193a2:	ee10 8a10 	vmov	r8, s0
 80193a6:	4699      	mov	r9, r3
 80193a8:	dc09      	bgt.n	80193be <__ieee754_pow+0x46>
 80193aa:	d103      	bne.n	80193b4 <__ieee754_pow+0x3c>
 80193ac:	b97a      	cbnz	r2, 80193ce <__ieee754_pow+0x56>
 80193ae:	42a6      	cmp	r6, r4
 80193b0:	dd02      	ble.n	80193b8 <__ieee754_pow+0x40>
 80193b2:	e00c      	b.n	80193ce <__ieee754_pow+0x56>
 80193b4:	428e      	cmp	r6, r1
 80193b6:	dc02      	bgt.n	80193be <__ieee754_pow+0x46>
 80193b8:	428e      	cmp	r6, r1
 80193ba:	d110      	bne.n	80193de <__ieee754_pow+0x66>
 80193bc:	b178      	cbz	r0, 80193de <__ieee754_pow+0x66>
 80193be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80193c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80193c6:	ea54 0308 	orrs.w	r3, r4, r8
 80193ca:	f000 84b7 	beq.w	8019d3c <__ieee754_pow+0x9c4>
 80193ce:	4873      	ldr	r0, [pc, #460]	; (801959c <__ieee754_pow+0x224>)
 80193d0:	b00d      	add	sp, #52	; 0x34
 80193d2:	ecbd 8b06 	vpop	{d8-d10}
 80193d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193da:	f000 bdb9 	b.w	8019f50 <nan>
 80193de:	f1b9 0f00 	cmp.w	r9, #0
 80193e2:	da36      	bge.n	8019452 <__ieee754_pow+0xda>
 80193e4:	496e      	ldr	r1, [pc, #440]	; (80195a0 <__ieee754_pow+0x228>)
 80193e6:	428e      	cmp	r6, r1
 80193e8:	dc51      	bgt.n	801948e <__ieee754_pow+0x116>
 80193ea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80193ee:	428e      	cmp	r6, r1
 80193f0:	f340 84af 	ble.w	8019d52 <__ieee754_pow+0x9da>
 80193f4:	1531      	asrs	r1, r6, #20
 80193f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80193fa:	2914      	cmp	r1, #20
 80193fc:	dd0f      	ble.n	801941e <__ieee754_pow+0xa6>
 80193fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8019402:	fa20 fc01 	lsr.w	ip, r0, r1
 8019406:	fa0c f101 	lsl.w	r1, ip, r1
 801940a:	4281      	cmp	r1, r0
 801940c:	f040 84a1 	bne.w	8019d52 <__ieee754_pow+0x9da>
 8019410:	f00c 0c01 	and.w	ip, ip, #1
 8019414:	f1cc 0102 	rsb	r1, ip, #2
 8019418:	9100      	str	r1, [sp, #0]
 801941a:	b180      	cbz	r0, 801943e <__ieee754_pow+0xc6>
 801941c:	e059      	b.n	80194d2 <__ieee754_pow+0x15a>
 801941e:	2800      	cmp	r0, #0
 8019420:	d155      	bne.n	80194ce <__ieee754_pow+0x156>
 8019422:	f1c1 0114 	rsb	r1, r1, #20
 8019426:	fa46 fc01 	asr.w	ip, r6, r1
 801942a:	fa0c f101 	lsl.w	r1, ip, r1
 801942e:	42b1      	cmp	r1, r6
 8019430:	f040 848c 	bne.w	8019d4c <__ieee754_pow+0x9d4>
 8019434:	f00c 0c01 	and.w	ip, ip, #1
 8019438:	f1cc 0102 	rsb	r1, ip, #2
 801943c:	9100      	str	r1, [sp, #0]
 801943e:	4959      	ldr	r1, [pc, #356]	; (80195a4 <__ieee754_pow+0x22c>)
 8019440:	428e      	cmp	r6, r1
 8019442:	d12d      	bne.n	80194a0 <__ieee754_pow+0x128>
 8019444:	2f00      	cmp	r7, #0
 8019446:	da79      	bge.n	801953c <__ieee754_pow+0x1c4>
 8019448:	4956      	ldr	r1, [pc, #344]	; (80195a4 <__ieee754_pow+0x22c>)
 801944a:	2000      	movs	r0, #0
 801944c:	f7e7 fa0e 	bl	800086c <__aeabi_ddiv>
 8019450:	e016      	b.n	8019480 <__ieee754_pow+0x108>
 8019452:	2100      	movs	r1, #0
 8019454:	9100      	str	r1, [sp, #0]
 8019456:	2800      	cmp	r0, #0
 8019458:	d13b      	bne.n	80194d2 <__ieee754_pow+0x15a>
 801945a:	494f      	ldr	r1, [pc, #316]	; (8019598 <__ieee754_pow+0x220>)
 801945c:	428e      	cmp	r6, r1
 801945e:	d1ee      	bne.n	801943e <__ieee754_pow+0xc6>
 8019460:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019464:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019468:	ea53 0308 	orrs.w	r3, r3, r8
 801946c:	f000 8466 	beq.w	8019d3c <__ieee754_pow+0x9c4>
 8019470:	4b4d      	ldr	r3, [pc, #308]	; (80195a8 <__ieee754_pow+0x230>)
 8019472:	429c      	cmp	r4, r3
 8019474:	dd0d      	ble.n	8019492 <__ieee754_pow+0x11a>
 8019476:	2f00      	cmp	r7, #0
 8019478:	f280 8464 	bge.w	8019d44 <__ieee754_pow+0x9cc>
 801947c:	2000      	movs	r0, #0
 801947e:	2100      	movs	r1, #0
 8019480:	ec41 0b10 	vmov	d0, r0, r1
 8019484:	b00d      	add	sp, #52	; 0x34
 8019486:	ecbd 8b06 	vpop	{d8-d10}
 801948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948e:	2102      	movs	r1, #2
 8019490:	e7e0      	b.n	8019454 <__ieee754_pow+0xdc>
 8019492:	2f00      	cmp	r7, #0
 8019494:	daf2      	bge.n	801947c <__ieee754_pow+0x104>
 8019496:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801949a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801949e:	e7ef      	b.n	8019480 <__ieee754_pow+0x108>
 80194a0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80194a4:	d104      	bne.n	80194b0 <__ieee754_pow+0x138>
 80194a6:	4610      	mov	r0, r2
 80194a8:	4619      	mov	r1, r3
 80194aa:	f7e7 f8b5 	bl	8000618 <__aeabi_dmul>
 80194ae:	e7e7      	b.n	8019480 <__ieee754_pow+0x108>
 80194b0:	493e      	ldr	r1, [pc, #248]	; (80195ac <__ieee754_pow+0x234>)
 80194b2:	428f      	cmp	r7, r1
 80194b4:	d10d      	bne.n	80194d2 <__ieee754_pow+0x15a>
 80194b6:	f1b9 0f00 	cmp.w	r9, #0
 80194ba:	db0a      	blt.n	80194d2 <__ieee754_pow+0x15a>
 80194bc:	ec43 2b10 	vmov	d0, r2, r3
 80194c0:	b00d      	add	sp, #52	; 0x34
 80194c2:	ecbd 8b06 	vpop	{d8-d10}
 80194c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ca:	f000 bc77 	b.w	8019dbc <__ieee754_sqrt>
 80194ce:	2100      	movs	r1, #0
 80194d0:	9100      	str	r1, [sp, #0]
 80194d2:	ec43 2b10 	vmov	d0, r2, r3
 80194d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80194da:	f000 fd23 	bl	8019f24 <fabs>
 80194de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80194e2:	ec51 0b10 	vmov	r0, r1, d0
 80194e6:	f1b8 0f00 	cmp.w	r8, #0
 80194ea:	d12a      	bne.n	8019542 <__ieee754_pow+0x1ca>
 80194ec:	b12c      	cbz	r4, 80194fa <__ieee754_pow+0x182>
 80194ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80195a4 <__ieee754_pow+0x22c>
 80194f2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80194f6:	45e6      	cmp	lr, ip
 80194f8:	d123      	bne.n	8019542 <__ieee754_pow+0x1ca>
 80194fa:	2f00      	cmp	r7, #0
 80194fc:	da05      	bge.n	801950a <__ieee754_pow+0x192>
 80194fe:	4602      	mov	r2, r0
 8019500:	460b      	mov	r3, r1
 8019502:	2000      	movs	r0, #0
 8019504:	4927      	ldr	r1, [pc, #156]	; (80195a4 <__ieee754_pow+0x22c>)
 8019506:	f7e7 f9b1 	bl	800086c <__aeabi_ddiv>
 801950a:	f1b9 0f00 	cmp.w	r9, #0
 801950e:	dab7      	bge.n	8019480 <__ieee754_pow+0x108>
 8019510:	9b00      	ldr	r3, [sp, #0]
 8019512:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019516:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801951a:	4323      	orrs	r3, r4
 801951c:	d108      	bne.n	8019530 <__ieee754_pow+0x1b8>
 801951e:	4602      	mov	r2, r0
 8019520:	460b      	mov	r3, r1
 8019522:	4610      	mov	r0, r2
 8019524:	4619      	mov	r1, r3
 8019526:	f7e6 febf 	bl	80002a8 <__aeabi_dsub>
 801952a:	4602      	mov	r2, r0
 801952c:	460b      	mov	r3, r1
 801952e:	e78d      	b.n	801944c <__ieee754_pow+0xd4>
 8019530:	9b00      	ldr	r3, [sp, #0]
 8019532:	2b01      	cmp	r3, #1
 8019534:	d1a4      	bne.n	8019480 <__ieee754_pow+0x108>
 8019536:	4602      	mov	r2, r0
 8019538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801953c:	4610      	mov	r0, r2
 801953e:	4619      	mov	r1, r3
 8019540:	e79e      	b.n	8019480 <__ieee754_pow+0x108>
 8019542:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019546:	f10c 35ff 	add.w	r5, ip, #4294967295
 801954a:	950a      	str	r5, [sp, #40]	; 0x28
 801954c:	9d00      	ldr	r5, [sp, #0]
 801954e:	46ac      	mov	ip, r5
 8019550:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019552:	ea5c 0505 	orrs.w	r5, ip, r5
 8019556:	d0e4      	beq.n	8019522 <__ieee754_pow+0x1aa>
 8019558:	4b15      	ldr	r3, [pc, #84]	; (80195b0 <__ieee754_pow+0x238>)
 801955a:	429e      	cmp	r6, r3
 801955c:	f340 80fc 	ble.w	8019758 <__ieee754_pow+0x3e0>
 8019560:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019564:	429e      	cmp	r6, r3
 8019566:	4b10      	ldr	r3, [pc, #64]	; (80195a8 <__ieee754_pow+0x230>)
 8019568:	dd07      	ble.n	801957a <__ieee754_pow+0x202>
 801956a:	429c      	cmp	r4, r3
 801956c:	dc0a      	bgt.n	8019584 <__ieee754_pow+0x20c>
 801956e:	2f00      	cmp	r7, #0
 8019570:	da84      	bge.n	801947c <__ieee754_pow+0x104>
 8019572:	a307      	add	r3, pc, #28	; (adr r3, 8019590 <__ieee754_pow+0x218>)
 8019574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019578:	e795      	b.n	80194a6 <__ieee754_pow+0x12e>
 801957a:	429c      	cmp	r4, r3
 801957c:	dbf7      	blt.n	801956e <__ieee754_pow+0x1f6>
 801957e:	4b09      	ldr	r3, [pc, #36]	; (80195a4 <__ieee754_pow+0x22c>)
 8019580:	429c      	cmp	r4, r3
 8019582:	dd17      	ble.n	80195b4 <__ieee754_pow+0x23c>
 8019584:	2f00      	cmp	r7, #0
 8019586:	dcf4      	bgt.n	8019572 <__ieee754_pow+0x1fa>
 8019588:	e778      	b.n	801947c <__ieee754_pow+0x104>
 801958a:	bf00      	nop
 801958c:	f3af 8000 	nop.w
 8019590:	8800759c 	.word	0x8800759c
 8019594:	7e37e43c 	.word	0x7e37e43c
 8019598:	7ff00000 	.word	0x7ff00000
 801959c:	08021543 	.word	0x08021543
 80195a0:	433fffff 	.word	0x433fffff
 80195a4:	3ff00000 	.word	0x3ff00000
 80195a8:	3fefffff 	.word	0x3fefffff
 80195ac:	3fe00000 	.word	0x3fe00000
 80195b0:	41e00000 	.word	0x41e00000
 80195b4:	4b64      	ldr	r3, [pc, #400]	; (8019748 <__ieee754_pow+0x3d0>)
 80195b6:	2200      	movs	r2, #0
 80195b8:	f7e6 fe76 	bl	80002a8 <__aeabi_dsub>
 80195bc:	a356      	add	r3, pc, #344	; (adr r3, 8019718 <__ieee754_pow+0x3a0>)
 80195be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c2:	4604      	mov	r4, r0
 80195c4:	460d      	mov	r5, r1
 80195c6:	f7e7 f827 	bl	8000618 <__aeabi_dmul>
 80195ca:	a355      	add	r3, pc, #340	; (adr r3, 8019720 <__ieee754_pow+0x3a8>)
 80195cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d0:	4606      	mov	r6, r0
 80195d2:	460f      	mov	r7, r1
 80195d4:	4620      	mov	r0, r4
 80195d6:	4629      	mov	r1, r5
 80195d8:	f7e7 f81e 	bl	8000618 <__aeabi_dmul>
 80195dc:	4b5b      	ldr	r3, [pc, #364]	; (801974c <__ieee754_pow+0x3d4>)
 80195de:	4682      	mov	sl, r0
 80195e0:	468b      	mov	fp, r1
 80195e2:	2200      	movs	r2, #0
 80195e4:	4620      	mov	r0, r4
 80195e6:	4629      	mov	r1, r5
 80195e8:	f7e7 f816 	bl	8000618 <__aeabi_dmul>
 80195ec:	4602      	mov	r2, r0
 80195ee:	460b      	mov	r3, r1
 80195f0:	a14d      	add	r1, pc, #308	; (adr r1, 8019728 <__ieee754_pow+0x3b0>)
 80195f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80195f6:	f7e6 fe57 	bl	80002a8 <__aeabi_dsub>
 80195fa:	4622      	mov	r2, r4
 80195fc:	462b      	mov	r3, r5
 80195fe:	f7e7 f80b 	bl	8000618 <__aeabi_dmul>
 8019602:	4602      	mov	r2, r0
 8019604:	460b      	mov	r3, r1
 8019606:	2000      	movs	r0, #0
 8019608:	4951      	ldr	r1, [pc, #324]	; (8019750 <__ieee754_pow+0x3d8>)
 801960a:	f7e6 fe4d 	bl	80002a8 <__aeabi_dsub>
 801960e:	4622      	mov	r2, r4
 8019610:	4680      	mov	r8, r0
 8019612:	4689      	mov	r9, r1
 8019614:	462b      	mov	r3, r5
 8019616:	4620      	mov	r0, r4
 8019618:	4629      	mov	r1, r5
 801961a:	f7e6 fffd 	bl	8000618 <__aeabi_dmul>
 801961e:	4602      	mov	r2, r0
 8019620:	460b      	mov	r3, r1
 8019622:	4640      	mov	r0, r8
 8019624:	4649      	mov	r1, r9
 8019626:	f7e6 fff7 	bl	8000618 <__aeabi_dmul>
 801962a:	a341      	add	r3, pc, #260	; (adr r3, 8019730 <__ieee754_pow+0x3b8>)
 801962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019630:	f7e6 fff2 	bl	8000618 <__aeabi_dmul>
 8019634:	4602      	mov	r2, r0
 8019636:	460b      	mov	r3, r1
 8019638:	4650      	mov	r0, sl
 801963a:	4659      	mov	r1, fp
 801963c:	f7e6 fe34 	bl	80002a8 <__aeabi_dsub>
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	4680      	mov	r8, r0
 8019646:	4689      	mov	r9, r1
 8019648:	4630      	mov	r0, r6
 801964a:	4639      	mov	r1, r7
 801964c:	f7e6 fe2e 	bl	80002ac <__adddf3>
 8019650:	2400      	movs	r4, #0
 8019652:	4632      	mov	r2, r6
 8019654:	463b      	mov	r3, r7
 8019656:	4620      	mov	r0, r4
 8019658:	460d      	mov	r5, r1
 801965a:	f7e6 fe25 	bl	80002a8 <__aeabi_dsub>
 801965e:	4602      	mov	r2, r0
 8019660:	460b      	mov	r3, r1
 8019662:	4640      	mov	r0, r8
 8019664:	4649      	mov	r1, r9
 8019666:	f7e6 fe1f 	bl	80002a8 <__aeabi_dsub>
 801966a:	9b00      	ldr	r3, [sp, #0]
 801966c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801966e:	3b01      	subs	r3, #1
 8019670:	4313      	orrs	r3, r2
 8019672:	4682      	mov	sl, r0
 8019674:	468b      	mov	fp, r1
 8019676:	f040 81f1 	bne.w	8019a5c <__ieee754_pow+0x6e4>
 801967a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019738 <__ieee754_pow+0x3c0>
 801967e:	eeb0 8a47 	vmov.f32	s16, s14
 8019682:	eef0 8a67 	vmov.f32	s17, s15
 8019686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801968a:	2600      	movs	r6, #0
 801968c:	4632      	mov	r2, r6
 801968e:	463b      	mov	r3, r7
 8019690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019694:	f7e6 fe08 	bl	80002a8 <__aeabi_dsub>
 8019698:	4622      	mov	r2, r4
 801969a:	462b      	mov	r3, r5
 801969c:	f7e6 ffbc 	bl	8000618 <__aeabi_dmul>
 80196a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80196a4:	4680      	mov	r8, r0
 80196a6:	4689      	mov	r9, r1
 80196a8:	4650      	mov	r0, sl
 80196aa:	4659      	mov	r1, fp
 80196ac:	f7e6 ffb4 	bl	8000618 <__aeabi_dmul>
 80196b0:	4602      	mov	r2, r0
 80196b2:	460b      	mov	r3, r1
 80196b4:	4640      	mov	r0, r8
 80196b6:	4649      	mov	r1, r9
 80196b8:	f7e6 fdf8 	bl	80002ac <__adddf3>
 80196bc:	4632      	mov	r2, r6
 80196be:	463b      	mov	r3, r7
 80196c0:	4680      	mov	r8, r0
 80196c2:	4689      	mov	r9, r1
 80196c4:	4620      	mov	r0, r4
 80196c6:	4629      	mov	r1, r5
 80196c8:	f7e6 ffa6 	bl	8000618 <__aeabi_dmul>
 80196cc:	460b      	mov	r3, r1
 80196ce:	4604      	mov	r4, r0
 80196d0:	460d      	mov	r5, r1
 80196d2:	4602      	mov	r2, r0
 80196d4:	4649      	mov	r1, r9
 80196d6:	4640      	mov	r0, r8
 80196d8:	f7e6 fde8 	bl	80002ac <__adddf3>
 80196dc:	4b1d      	ldr	r3, [pc, #116]	; (8019754 <__ieee754_pow+0x3dc>)
 80196de:	4299      	cmp	r1, r3
 80196e0:	ec45 4b19 	vmov	d9, r4, r5
 80196e4:	4606      	mov	r6, r0
 80196e6:	460f      	mov	r7, r1
 80196e8:	468b      	mov	fp, r1
 80196ea:	f340 82fe 	ble.w	8019cea <__ieee754_pow+0x972>
 80196ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80196f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80196f6:	4303      	orrs	r3, r0
 80196f8:	f000 81f0 	beq.w	8019adc <__ieee754_pow+0x764>
 80196fc:	a310      	add	r3, pc, #64	; (adr r3, 8019740 <__ieee754_pow+0x3c8>)
 80196fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019702:	ec51 0b18 	vmov	r0, r1, d8
 8019706:	f7e6 ff87 	bl	8000618 <__aeabi_dmul>
 801970a:	a30d      	add	r3, pc, #52	; (adr r3, 8019740 <__ieee754_pow+0x3c8>)
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	e6cb      	b.n	80194aa <__ieee754_pow+0x132>
 8019712:	bf00      	nop
 8019714:	f3af 8000 	nop.w
 8019718:	60000000 	.word	0x60000000
 801971c:	3ff71547 	.word	0x3ff71547
 8019720:	f85ddf44 	.word	0xf85ddf44
 8019724:	3e54ae0b 	.word	0x3e54ae0b
 8019728:	55555555 	.word	0x55555555
 801972c:	3fd55555 	.word	0x3fd55555
 8019730:	652b82fe 	.word	0x652b82fe
 8019734:	3ff71547 	.word	0x3ff71547
 8019738:	00000000 	.word	0x00000000
 801973c:	bff00000 	.word	0xbff00000
 8019740:	8800759c 	.word	0x8800759c
 8019744:	7e37e43c 	.word	0x7e37e43c
 8019748:	3ff00000 	.word	0x3ff00000
 801974c:	3fd00000 	.word	0x3fd00000
 8019750:	3fe00000 	.word	0x3fe00000
 8019754:	408fffff 	.word	0x408fffff
 8019758:	4bd7      	ldr	r3, [pc, #860]	; (8019ab8 <__ieee754_pow+0x740>)
 801975a:	ea03 0309 	and.w	r3, r3, r9
 801975e:	2200      	movs	r2, #0
 8019760:	b92b      	cbnz	r3, 801976e <__ieee754_pow+0x3f6>
 8019762:	4bd6      	ldr	r3, [pc, #856]	; (8019abc <__ieee754_pow+0x744>)
 8019764:	f7e6 ff58 	bl	8000618 <__aeabi_dmul>
 8019768:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801976c:	460c      	mov	r4, r1
 801976e:	1523      	asrs	r3, r4, #20
 8019770:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019774:	4413      	add	r3, r2
 8019776:	9309      	str	r3, [sp, #36]	; 0x24
 8019778:	4bd1      	ldr	r3, [pc, #836]	; (8019ac0 <__ieee754_pow+0x748>)
 801977a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801977e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019782:	429c      	cmp	r4, r3
 8019784:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019788:	dd08      	ble.n	801979c <__ieee754_pow+0x424>
 801978a:	4bce      	ldr	r3, [pc, #824]	; (8019ac4 <__ieee754_pow+0x74c>)
 801978c:	429c      	cmp	r4, r3
 801978e:	f340 8163 	ble.w	8019a58 <__ieee754_pow+0x6e0>
 8019792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019794:	3301      	adds	r3, #1
 8019796:	9309      	str	r3, [sp, #36]	; 0x24
 8019798:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801979c:	2400      	movs	r4, #0
 801979e:	00e3      	lsls	r3, r4, #3
 80197a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80197a2:	4bc9      	ldr	r3, [pc, #804]	; (8019ac8 <__ieee754_pow+0x750>)
 80197a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80197a8:	ed93 7b00 	vldr	d7, [r3]
 80197ac:	4629      	mov	r1, r5
 80197ae:	ec53 2b17 	vmov	r2, r3, d7
 80197b2:	eeb0 8a47 	vmov.f32	s16, s14
 80197b6:	eef0 8a67 	vmov.f32	s17, s15
 80197ba:	4682      	mov	sl, r0
 80197bc:	f7e6 fd74 	bl	80002a8 <__aeabi_dsub>
 80197c0:	4652      	mov	r2, sl
 80197c2:	4606      	mov	r6, r0
 80197c4:	460f      	mov	r7, r1
 80197c6:	462b      	mov	r3, r5
 80197c8:	ec51 0b18 	vmov	r0, r1, d8
 80197cc:	f7e6 fd6e 	bl	80002ac <__adddf3>
 80197d0:	4602      	mov	r2, r0
 80197d2:	460b      	mov	r3, r1
 80197d4:	2000      	movs	r0, #0
 80197d6:	49bd      	ldr	r1, [pc, #756]	; (8019acc <__ieee754_pow+0x754>)
 80197d8:	f7e7 f848 	bl	800086c <__aeabi_ddiv>
 80197dc:	ec41 0b19 	vmov	d9, r0, r1
 80197e0:	4602      	mov	r2, r0
 80197e2:	460b      	mov	r3, r1
 80197e4:	4630      	mov	r0, r6
 80197e6:	4639      	mov	r1, r7
 80197e8:	f7e6 ff16 	bl	8000618 <__aeabi_dmul>
 80197ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80197f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80197f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80197f8:	2300      	movs	r3, #0
 80197fa:	9304      	str	r3, [sp, #16]
 80197fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019800:	46ab      	mov	fp, r5
 8019802:	106d      	asrs	r5, r5, #1
 8019804:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019808:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801980c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019810:	2200      	movs	r2, #0
 8019812:	4640      	mov	r0, r8
 8019814:	4649      	mov	r1, r9
 8019816:	4614      	mov	r4, r2
 8019818:	461d      	mov	r5, r3
 801981a:	f7e6 fefd 	bl	8000618 <__aeabi_dmul>
 801981e:	4602      	mov	r2, r0
 8019820:	460b      	mov	r3, r1
 8019822:	4630      	mov	r0, r6
 8019824:	4639      	mov	r1, r7
 8019826:	f7e6 fd3f 	bl	80002a8 <__aeabi_dsub>
 801982a:	ec53 2b18 	vmov	r2, r3, d8
 801982e:	4606      	mov	r6, r0
 8019830:	460f      	mov	r7, r1
 8019832:	4620      	mov	r0, r4
 8019834:	4629      	mov	r1, r5
 8019836:	f7e6 fd37 	bl	80002a8 <__aeabi_dsub>
 801983a:	4602      	mov	r2, r0
 801983c:	460b      	mov	r3, r1
 801983e:	4650      	mov	r0, sl
 8019840:	4659      	mov	r1, fp
 8019842:	f7e6 fd31 	bl	80002a8 <__aeabi_dsub>
 8019846:	4642      	mov	r2, r8
 8019848:	464b      	mov	r3, r9
 801984a:	f7e6 fee5 	bl	8000618 <__aeabi_dmul>
 801984e:	4602      	mov	r2, r0
 8019850:	460b      	mov	r3, r1
 8019852:	4630      	mov	r0, r6
 8019854:	4639      	mov	r1, r7
 8019856:	f7e6 fd27 	bl	80002a8 <__aeabi_dsub>
 801985a:	ec53 2b19 	vmov	r2, r3, d9
 801985e:	f7e6 fedb 	bl	8000618 <__aeabi_dmul>
 8019862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019866:	ec41 0b18 	vmov	d8, r0, r1
 801986a:	4610      	mov	r0, r2
 801986c:	4619      	mov	r1, r3
 801986e:	f7e6 fed3 	bl	8000618 <__aeabi_dmul>
 8019872:	a37d      	add	r3, pc, #500	; (adr r3, 8019a68 <__ieee754_pow+0x6f0>)
 8019874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019878:	4604      	mov	r4, r0
 801987a:	460d      	mov	r5, r1
 801987c:	f7e6 fecc 	bl	8000618 <__aeabi_dmul>
 8019880:	a37b      	add	r3, pc, #492	; (adr r3, 8019a70 <__ieee754_pow+0x6f8>)
 8019882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019886:	f7e6 fd11 	bl	80002ac <__adddf3>
 801988a:	4622      	mov	r2, r4
 801988c:	462b      	mov	r3, r5
 801988e:	f7e6 fec3 	bl	8000618 <__aeabi_dmul>
 8019892:	a379      	add	r3, pc, #484	; (adr r3, 8019a78 <__ieee754_pow+0x700>)
 8019894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019898:	f7e6 fd08 	bl	80002ac <__adddf3>
 801989c:	4622      	mov	r2, r4
 801989e:	462b      	mov	r3, r5
 80198a0:	f7e6 feba 	bl	8000618 <__aeabi_dmul>
 80198a4:	a376      	add	r3, pc, #472	; (adr r3, 8019a80 <__ieee754_pow+0x708>)
 80198a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198aa:	f7e6 fcff 	bl	80002ac <__adddf3>
 80198ae:	4622      	mov	r2, r4
 80198b0:	462b      	mov	r3, r5
 80198b2:	f7e6 feb1 	bl	8000618 <__aeabi_dmul>
 80198b6:	a374      	add	r3, pc, #464	; (adr r3, 8019a88 <__ieee754_pow+0x710>)
 80198b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198bc:	f7e6 fcf6 	bl	80002ac <__adddf3>
 80198c0:	4622      	mov	r2, r4
 80198c2:	462b      	mov	r3, r5
 80198c4:	f7e6 fea8 	bl	8000618 <__aeabi_dmul>
 80198c8:	a371      	add	r3, pc, #452	; (adr r3, 8019a90 <__ieee754_pow+0x718>)
 80198ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ce:	f7e6 fced 	bl	80002ac <__adddf3>
 80198d2:	4622      	mov	r2, r4
 80198d4:	4606      	mov	r6, r0
 80198d6:	460f      	mov	r7, r1
 80198d8:	462b      	mov	r3, r5
 80198da:	4620      	mov	r0, r4
 80198dc:	4629      	mov	r1, r5
 80198de:	f7e6 fe9b 	bl	8000618 <__aeabi_dmul>
 80198e2:	4602      	mov	r2, r0
 80198e4:	460b      	mov	r3, r1
 80198e6:	4630      	mov	r0, r6
 80198e8:	4639      	mov	r1, r7
 80198ea:	f7e6 fe95 	bl	8000618 <__aeabi_dmul>
 80198ee:	4642      	mov	r2, r8
 80198f0:	4604      	mov	r4, r0
 80198f2:	460d      	mov	r5, r1
 80198f4:	464b      	mov	r3, r9
 80198f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80198fa:	f7e6 fcd7 	bl	80002ac <__adddf3>
 80198fe:	ec53 2b18 	vmov	r2, r3, d8
 8019902:	f7e6 fe89 	bl	8000618 <__aeabi_dmul>
 8019906:	4622      	mov	r2, r4
 8019908:	462b      	mov	r3, r5
 801990a:	f7e6 fccf 	bl	80002ac <__adddf3>
 801990e:	4642      	mov	r2, r8
 8019910:	4682      	mov	sl, r0
 8019912:	468b      	mov	fp, r1
 8019914:	464b      	mov	r3, r9
 8019916:	4640      	mov	r0, r8
 8019918:	4649      	mov	r1, r9
 801991a:	f7e6 fe7d 	bl	8000618 <__aeabi_dmul>
 801991e:	4b6c      	ldr	r3, [pc, #432]	; (8019ad0 <__ieee754_pow+0x758>)
 8019920:	2200      	movs	r2, #0
 8019922:	4606      	mov	r6, r0
 8019924:	460f      	mov	r7, r1
 8019926:	f7e6 fcc1 	bl	80002ac <__adddf3>
 801992a:	4652      	mov	r2, sl
 801992c:	465b      	mov	r3, fp
 801992e:	f7e6 fcbd 	bl	80002ac <__adddf3>
 8019932:	9c04      	ldr	r4, [sp, #16]
 8019934:	460d      	mov	r5, r1
 8019936:	4622      	mov	r2, r4
 8019938:	460b      	mov	r3, r1
 801993a:	4640      	mov	r0, r8
 801993c:	4649      	mov	r1, r9
 801993e:	f7e6 fe6b 	bl	8000618 <__aeabi_dmul>
 8019942:	4b63      	ldr	r3, [pc, #396]	; (8019ad0 <__ieee754_pow+0x758>)
 8019944:	4680      	mov	r8, r0
 8019946:	4689      	mov	r9, r1
 8019948:	2200      	movs	r2, #0
 801994a:	4620      	mov	r0, r4
 801994c:	4629      	mov	r1, r5
 801994e:	f7e6 fcab 	bl	80002a8 <__aeabi_dsub>
 8019952:	4632      	mov	r2, r6
 8019954:	463b      	mov	r3, r7
 8019956:	f7e6 fca7 	bl	80002a8 <__aeabi_dsub>
 801995a:	4602      	mov	r2, r0
 801995c:	460b      	mov	r3, r1
 801995e:	4650      	mov	r0, sl
 8019960:	4659      	mov	r1, fp
 8019962:	f7e6 fca1 	bl	80002a8 <__aeabi_dsub>
 8019966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801996a:	f7e6 fe55 	bl	8000618 <__aeabi_dmul>
 801996e:	4622      	mov	r2, r4
 8019970:	4606      	mov	r6, r0
 8019972:	460f      	mov	r7, r1
 8019974:	462b      	mov	r3, r5
 8019976:	ec51 0b18 	vmov	r0, r1, d8
 801997a:	f7e6 fe4d 	bl	8000618 <__aeabi_dmul>
 801997e:	4602      	mov	r2, r0
 8019980:	460b      	mov	r3, r1
 8019982:	4630      	mov	r0, r6
 8019984:	4639      	mov	r1, r7
 8019986:	f7e6 fc91 	bl	80002ac <__adddf3>
 801998a:	4606      	mov	r6, r0
 801998c:	460f      	mov	r7, r1
 801998e:	4602      	mov	r2, r0
 8019990:	460b      	mov	r3, r1
 8019992:	4640      	mov	r0, r8
 8019994:	4649      	mov	r1, r9
 8019996:	f7e6 fc89 	bl	80002ac <__adddf3>
 801999a:	9c04      	ldr	r4, [sp, #16]
 801999c:	a33e      	add	r3, pc, #248	; (adr r3, 8019a98 <__ieee754_pow+0x720>)
 801999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a2:	4620      	mov	r0, r4
 80199a4:	460d      	mov	r5, r1
 80199a6:	f7e6 fe37 	bl	8000618 <__aeabi_dmul>
 80199aa:	4642      	mov	r2, r8
 80199ac:	ec41 0b18 	vmov	d8, r0, r1
 80199b0:	464b      	mov	r3, r9
 80199b2:	4620      	mov	r0, r4
 80199b4:	4629      	mov	r1, r5
 80199b6:	f7e6 fc77 	bl	80002a8 <__aeabi_dsub>
 80199ba:	4602      	mov	r2, r0
 80199bc:	460b      	mov	r3, r1
 80199be:	4630      	mov	r0, r6
 80199c0:	4639      	mov	r1, r7
 80199c2:	f7e6 fc71 	bl	80002a8 <__aeabi_dsub>
 80199c6:	a336      	add	r3, pc, #216	; (adr r3, 8019aa0 <__ieee754_pow+0x728>)
 80199c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199cc:	f7e6 fe24 	bl	8000618 <__aeabi_dmul>
 80199d0:	a335      	add	r3, pc, #212	; (adr r3, 8019aa8 <__ieee754_pow+0x730>)
 80199d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d6:	4606      	mov	r6, r0
 80199d8:	460f      	mov	r7, r1
 80199da:	4620      	mov	r0, r4
 80199dc:	4629      	mov	r1, r5
 80199de:	f7e6 fe1b 	bl	8000618 <__aeabi_dmul>
 80199e2:	4602      	mov	r2, r0
 80199e4:	460b      	mov	r3, r1
 80199e6:	4630      	mov	r0, r6
 80199e8:	4639      	mov	r1, r7
 80199ea:	f7e6 fc5f 	bl	80002ac <__adddf3>
 80199ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199f0:	4b38      	ldr	r3, [pc, #224]	; (8019ad4 <__ieee754_pow+0x75c>)
 80199f2:	4413      	add	r3, r2
 80199f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f8:	f7e6 fc58 	bl	80002ac <__adddf3>
 80199fc:	4682      	mov	sl, r0
 80199fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a00:	468b      	mov	fp, r1
 8019a02:	f7e6 fd9f 	bl	8000544 <__aeabi_i2d>
 8019a06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a08:	4b33      	ldr	r3, [pc, #204]	; (8019ad8 <__ieee754_pow+0x760>)
 8019a0a:	4413      	add	r3, r2
 8019a0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019a10:	4606      	mov	r6, r0
 8019a12:	460f      	mov	r7, r1
 8019a14:	4652      	mov	r2, sl
 8019a16:	465b      	mov	r3, fp
 8019a18:	ec51 0b18 	vmov	r0, r1, d8
 8019a1c:	f7e6 fc46 	bl	80002ac <__adddf3>
 8019a20:	4642      	mov	r2, r8
 8019a22:	464b      	mov	r3, r9
 8019a24:	f7e6 fc42 	bl	80002ac <__adddf3>
 8019a28:	4632      	mov	r2, r6
 8019a2a:	463b      	mov	r3, r7
 8019a2c:	f7e6 fc3e 	bl	80002ac <__adddf3>
 8019a30:	9c04      	ldr	r4, [sp, #16]
 8019a32:	4632      	mov	r2, r6
 8019a34:	463b      	mov	r3, r7
 8019a36:	4620      	mov	r0, r4
 8019a38:	460d      	mov	r5, r1
 8019a3a:	f7e6 fc35 	bl	80002a8 <__aeabi_dsub>
 8019a3e:	4642      	mov	r2, r8
 8019a40:	464b      	mov	r3, r9
 8019a42:	f7e6 fc31 	bl	80002a8 <__aeabi_dsub>
 8019a46:	ec53 2b18 	vmov	r2, r3, d8
 8019a4a:	f7e6 fc2d 	bl	80002a8 <__aeabi_dsub>
 8019a4e:	4602      	mov	r2, r0
 8019a50:	460b      	mov	r3, r1
 8019a52:	4650      	mov	r0, sl
 8019a54:	4659      	mov	r1, fp
 8019a56:	e606      	b.n	8019666 <__ieee754_pow+0x2ee>
 8019a58:	2401      	movs	r4, #1
 8019a5a:	e6a0      	b.n	801979e <__ieee754_pow+0x426>
 8019a5c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019ab0 <__ieee754_pow+0x738>
 8019a60:	e60d      	b.n	801967e <__ieee754_pow+0x306>
 8019a62:	bf00      	nop
 8019a64:	f3af 8000 	nop.w
 8019a68:	4a454eef 	.word	0x4a454eef
 8019a6c:	3fca7e28 	.word	0x3fca7e28
 8019a70:	93c9db65 	.word	0x93c9db65
 8019a74:	3fcd864a 	.word	0x3fcd864a
 8019a78:	a91d4101 	.word	0xa91d4101
 8019a7c:	3fd17460 	.word	0x3fd17460
 8019a80:	518f264d 	.word	0x518f264d
 8019a84:	3fd55555 	.word	0x3fd55555
 8019a88:	db6fabff 	.word	0xdb6fabff
 8019a8c:	3fdb6db6 	.word	0x3fdb6db6
 8019a90:	33333303 	.word	0x33333303
 8019a94:	3fe33333 	.word	0x3fe33333
 8019a98:	e0000000 	.word	0xe0000000
 8019a9c:	3feec709 	.word	0x3feec709
 8019aa0:	dc3a03fd 	.word	0xdc3a03fd
 8019aa4:	3feec709 	.word	0x3feec709
 8019aa8:	145b01f5 	.word	0x145b01f5
 8019aac:	be3e2fe0 	.word	0xbe3e2fe0
 8019ab0:	00000000 	.word	0x00000000
 8019ab4:	3ff00000 	.word	0x3ff00000
 8019ab8:	7ff00000 	.word	0x7ff00000
 8019abc:	43400000 	.word	0x43400000
 8019ac0:	0003988e 	.word	0x0003988e
 8019ac4:	000bb679 	.word	0x000bb679
 8019ac8:	080212d8 	.word	0x080212d8
 8019acc:	3ff00000 	.word	0x3ff00000
 8019ad0:	40080000 	.word	0x40080000
 8019ad4:	080212f8 	.word	0x080212f8
 8019ad8:	080212e8 	.word	0x080212e8
 8019adc:	a3b5      	add	r3, pc, #724	; (adr r3, 8019db4 <__ieee754_pow+0xa3c>)
 8019ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ae2:	4640      	mov	r0, r8
 8019ae4:	4649      	mov	r1, r9
 8019ae6:	f7e6 fbe1 	bl	80002ac <__adddf3>
 8019aea:	4622      	mov	r2, r4
 8019aec:	ec41 0b1a 	vmov	d10, r0, r1
 8019af0:	462b      	mov	r3, r5
 8019af2:	4630      	mov	r0, r6
 8019af4:	4639      	mov	r1, r7
 8019af6:	f7e6 fbd7 	bl	80002a8 <__aeabi_dsub>
 8019afa:	4602      	mov	r2, r0
 8019afc:	460b      	mov	r3, r1
 8019afe:	ec51 0b1a 	vmov	r0, r1, d10
 8019b02:	f7e7 f819 	bl	8000b38 <__aeabi_dcmpgt>
 8019b06:	2800      	cmp	r0, #0
 8019b08:	f47f adf8 	bne.w	80196fc <__ieee754_pow+0x384>
 8019b0c:	4aa4      	ldr	r2, [pc, #656]	; (8019da0 <__ieee754_pow+0xa28>)
 8019b0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019b12:	4293      	cmp	r3, r2
 8019b14:	f340 810b 	ble.w	8019d2e <__ieee754_pow+0x9b6>
 8019b18:	151b      	asrs	r3, r3, #20
 8019b1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019b1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019b22:	fa4a f303 	asr.w	r3, sl, r3
 8019b26:	445b      	add	r3, fp
 8019b28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019b2c:	4e9d      	ldr	r6, [pc, #628]	; (8019da4 <__ieee754_pow+0xa2c>)
 8019b2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019b32:	4116      	asrs	r6, r2
 8019b34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019b38:	2000      	movs	r0, #0
 8019b3a:	ea23 0106 	bic.w	r1, r3, r6
 8019b3e:	f1c2 0214 	rsb	r2, r2, #20
 8019b42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019b46:	fa4a fa02 	asr.w	sl, sl, r2
 8019b4a:	f1bb 0f00 	cmp.w	fp, #0
 8019b4e:	4602      	mov	r2, r0
 8019b50:	460b      	mov	r3, r1
 8019b52:	4620      	mov	r0, r4
 8019b54:	4629      	mov	r1, r5
 8019b56:	bfb8      	it	lt
 8019b58:	f1ca 0a00 	rsblt	sl, sl, #0
 8019b5c:	f7e6 fba4 	bl	80002a8 <__aeabi_dsub>
 8019b60:	ec41 0b19 	vmov	d9, r0, r1
 8019b64:	4642      	mov	r2, r8
 8019b66:	464b      	mov	r3, r9
 8019b68:	ec51 0b19 	vmov	r0, r1, d9
 8019b6c:	f7e6 fb9e 	bl	80002ac <__adddf3>
 8019b70:	2400      	movs	r4, #0
 8019b72:	a379      	add	r3, pc, #484	; (adr r3, 8019d58 <__ieee754_pow+0x9e0>)
 8019b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b78:	4620      	mov	r0, r4
 8019b7a:	460d      	mov	r5, r1
 8019b7c:	f7e6 fd4c 	bl	8000618 <__aeabi_dmul>
 8019b80:	ec53 2b19 	vmov	r2, r3, d9
 8019b84:	4606      	mov	r6, r0
 8019b86:	460f      	mov	r7, r1
 8019b88:	4620      	mov	r0, r4
 8019b8a:	4629      	mov	r1, r5
 8019b8c:	f7e6 fb8c 	bl	80002a8 <__aeabi_dsub>
 8019b90:	4602      	mov	r2, r0
 8019b92:	460b      	mov	r3, r1
 8019b94:	4640      	mov	r0, r8
 8019b96:	4649      	mov	r1, r9
 8019b98:	f7e6 fb86 	bl	80002a8 <__aeabi_dsub>
 8019b9c:	a370      	add	r3, pc, #448	; (adr r3, 8019d60 <__ieee754_pow+0x9e8>)
 8019b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ba2:	f7e6 fd39 	bl	8000618 <__aeabi_dmul>
 8019ba6:	a370      	add	r3, pc, #448	; (adr r3, 8019d68 <__ieee754_pow+0x9f0>)
 8019ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bac:	4680      	mov	r8, r0
 8019bae:	4689      	mov	r9, r1
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	f7e6 fd30 	bl	8000618 <__aeabi_dmul>
 8019bb8:	4602      	mov	r2, r0
 8019bba:	460b      	mov	r3, r1
 8019bbc:	4640      	mov	r0, r8
 8019bbe:	4649      	mov	r1, r9
 8019bc0:	f7e6 fb74 	bl	80002ac <__adddf3>
 8019bc4:	4604      	mov	r4, r0
 8019bc6:	460d      	mov	r5, r1
 8019bc8:	4602      	mov	r2, r0
 8019bca:	460b      	mov	r3, r1
 8019bcc:	4630      	mov	r0, r6
 8019bce:	4639      	mov	r1, r7
 8019bd0:	f7e6 fb6c 	bl	80002ac <__adddf3>
 8019bd4:	4632      	mov	r2, r6
 8019bd6:	463b      	mov	r3, r7
 8019bd8:	4680      	mov	r8, r0
 8019bda:	4689      	mov	r9, r1
 8019bdc:	f7e6 fb64 	bl	80002a8 <__aeabi_dsub>
 8019be0:	4602      	mov	r2, r0
 8019be2:	460b      	mov	r3, r1
 8019be4:	4620      	mov	r0, r4
 8019be6:	4629      	mov	r1, r5
 8019be8:	f7e6 fb5e 	bl	80002a8 <__aeabi_dsub>
 8019bec:	4642      	mov	r2, r8
 8019bee:	4606      	mov	r6, r0
 8019bf0:	460f      	mov	r7, r1
 8019bf2:	464b      	mov	r3, r9
 8019bf4:	4640      	mov	r0, r8
 8019bf6:	4649      	mov	r1, r9
 8019bf8:	f7e6 fd0e 	bl	8000618 <__aeabi_dmul>
 8019bfc:	a35c      	add	r3, pc, #368	; (adr r3, 8019d70 <__ieee754_pow+0x9f8>)
 8019bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c02:	4604      	mov	r4, r0
 8019c04:	460d      	mov	r5, r1
 8019c06:	f7e6 fd07 	bl	8000618 <__aeabi_dmul>
 8019c0a:	a35b      	add	r3, pc, #364	; (adr r3, 8019d78 <__ieee754_pow+0xa00>)
 8019c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c10:	f7e6 fb4a 	bl	80002a8 <__aeabi_dsub>
 8019c14:	4622      	mov	r2, r4
 8019c16:	462b      	mov	r3, r5
 8019c18:	f7e6 fcfe 	bl	8000618 <__aeabi_dmul>
 8019c1c:	a358      	add	r3, pc, #352	; (adr r3, 8019d80 <__ieee754_pow+0xa08>)
 8019c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c22:	f7e6 fb43 	bl	80002ac <__adddf3>
 8019c26:	4622      	mov	r2, r4
 8019c28:	462b      	mov	r3, r5
 8019c2a:	f7e6 fcf5 	bl	8000618 <__aeabi_dmul>
 8019c2e:	a356      	add	r3, pc, #344	; (adr r3, 8019d88 <__ieee754_pow+0xa10>)
 8019c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c34:	f7e6 fb38 	bl	80002a8 <__aeabi_dsub>
 8019c38:	4622      	mov	r2, r4
 8019c3a:	462b      	mov	r3, r5
 8019c3c:	f7e6 fcec 	bl	8000618 <__aeabi_dmul>
 8019c40:	a353      	add	r3, pc, #332	; (adr r3, 8019d90 <__ieee754_pow+0xa18>)
 8019c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c46:	f7e6 fb31 	bl	80002ac <__adddf3>
 8019c4a:	4622      	mov	r2, r4
 8019c4c:	462b      	mov	r3, r5
 8019c4e:	f7e6 fce3 	bl	8000618 <__aeabi_dmul>
 8019c52:	4602      	mov	r2, r0
 8019c54:	460b      	mov	r3, r1
 8019c56:	4640      	mov	r0, r8
 8019c58:	4649      	mov	r1, r9
 8019c5a:	f7e6 fb25 	bl	80002a8 <__aeabi_dsub>
 8019c5e:	4604      	mov	r4, r0
 8019c60:	460d      	mov	r5, r1
 8019c62:	4602      	mov	r2, r0
 8019c64:	460b      	mov	r3, r1
 8019c66:	4640      	mov	r0, r8
 8019c68:	4649      	mov	r1, r9
 8019c6a:	f7e6 fcd5 	bl	8000618 <__aeabi_dmul>
 8019c6e:	2200      	movs	r2, #0
 8019c70:	ec41 0b19 	vmov	d9, r0, r1
 8019c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019c78:	4620      	mov	r0, r4
 8019c7a:	4629      	mov	r1, r5
 8019c7c:	f7e6 fb14 	bl	80002a8 <__aeabi_dsub>
 8019c80:	4602      	mov	r2, r0
 8019c82:	460b      	mov	r3, r1
 8019c84:	ec51 0b19 	vmov	r0, r1, d9
 8019c88:	f7e6 fdf0 	bl	800086c <__aeabi_ddiv>
 8019c8c:	4632      	mov	r2, r6
 8019c8e:	4604      	mov	r4, r0
 8019c90:	460d      	mov	r5, r1
 8019c92:	463b      	mov	r3, r7
 8019c94:	4640      	mov	r0, r8
 8019c96:	4649      	mov	r1, r9
 8019c98:	f7e6 fcbe 	bl	8000618 <__aeabi_dmul>
 8019c9c:	4632      	mov	r2, r6
 8019c9e:	463b      	mov	r3, r7
 8019ca0:	f7e6 fb04 	bl	80002ac <__adddf3>
 8019ca4:	4602      	mov	r2, r0
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	4620      	mov	r0, r4
 8019caa:	4629      	mov	r1, r5
 8019cac:	f7e6 fafc 	bl	80002a8 <__aeabi_dsub>
 8019cb0:	4642      	mov	r2, r8
 8019cb2:	464b      	mov	r3, r9
 8019cb4:	f7e6 faf8 	bl	80002a8 <__aeabi_dsub>
 8019cb8:	460b      	mov	r3, r1
 8019cba:	4602      	mov	r2, r0
 8019cbc:	493a      	ldr	r1, [pc, #232]	; (8019da8 <__ieee754_pow+0xa30>)
 8019cbe:	2000      	movs	r0, #0
 8019cc0:	f7e6 faf2 	bl	80002a8 <__aeabi_dsub>
 8019cc4:	e9cd 0100 	strd	r0, r1, [sp]
 8019cc8:	9b01      	ldr	r3, [sp, #4]
 8019cca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019cd2:	da2f      	bge.n	8019d34 <__ieee754_pow+0x9bc>
 8019cd4:	4650      	mov	r0, sl
 8019cd6:	ed9d 0b00 	vldr	d0, [sp]
 8019cda:	f000 f9cd 	bl	801a078 <scalbn>
 8019cde:	ec51 0b10 	vmov	r0, r1, d0
 8019ce2:	ec53 2b18 	vmov	r2, r3, d8
 8019ce6:	f7ff bbe0 	b.w	80194aa <__ieee754_pow+0x132>
 8019cea:	4b30      	ldr	r3, [pc, #192]	; (8019dac <__ieee754_pow+0xa34>)
 8019cec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019cf0:	429e      	cmp	r6, r3
 8019cf2:	f77f af0b 	ble.w	8019b0c <__ieee754_pow+0x794>
 8019cf6:	4b2e      	ldr	r3, [pc, #184]	; (8019db0 <__ieee754_pow+0xa38>)
 8019cf8:	440b      	add	r3, r1
 8019cfa:	4303      	orrs	r3, r0
 8019cfc:	d00b      	beq.n	8019d16 <__ieee754_pow+0x99e>
 8019cfe:	a326      	add	r3, pc, #152	; (adr r3, 8019d98 <__ieee754_pow+0xa20>)
 8019d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d04:	ec51 0b18 	vmov	r0, r1, d8
 8019d08:	f7e6 fc86 	bl	8000618 <__aeabi_dmul>
 8019d0c:	a322      	add	r3, pc, #136	; (adr r3, 8019d98 <__ieee754_pow+0xa20>)
 8019d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d12:	f7ff bbca 	b.w	80194aa <__ieee754_pow+0x132>
 8019d16:	4622      	mov	r2, r4
 8019d18:	462b      	mov	r3, r5
 8019d1a:	f7e6 fac5 	bl	80002a8 <__aeabi_dsub>
 8019d1e:	4642      	mov	r2, r8
 8019d20:	464b      	mov	r3, r9
 8019d22:	f7e6 feff 	bl	8000b24 <__aeabi_dcmpge>
 8019d26:	2800      	cmp	r0, #0
 8019d28:	f43f aef0 	beq.w	8019b0c <__ieee754_pow+0x794>
 8019d2c:	e7e7      	b.n	8019cfe <__ieee754_pow+0x986>
 8019d2e:	f04f 0a00 	mov.w	sl, #0
 8019d32:	e717      	b.n	8019b64 <__ieee754_pow+0x7ec>
 8019d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d38:	4619      	mov	r1, r3
 8019d3a:	e7d2      	b.n	8019ce2 <__ieee754_pow+0x96a>
 8019d3c:	491a      	ldr	r1, [pc, #104]	; (8019da8 <__ieee754_pow+0xa30>)
 8019d3e:	2000      	movs	r0, #0
 8019d40:	f7ff bb9e 	b.w	8019480 <__ieee754_pow+0x108>
 8019d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d48:	f7ff bb9a 	b.w	8019480 <__ieee754_pow+0x108>
 8019d4c:	9000      	str	r0, [sp, #0]
 8019d4e:	f7ff bb76 	b.w	801943e <__ieee754_pow+0xc6>
 8019d52:	2100      	movs	r1, #0
 8019d54:	f7ff bb60 	b.w	8019418 <__ieee754_pow+0xa0>
 8019d58:	00000000 	.word	0x00000000
 8019d5c:	3fe62e43 	.word	0x3fe62e43
 8019d60:	fefa39ef 	.word	0xfefa39ef
 8019d64:	3fe62e42 	.word	0x3fe62e42
 8019d68:	0ca86c39 	.word	0x0ca86c39
 8019d6c:	be205c61 	.word	0xbe205c61
 8019d70:	72bea4d0 	.word	0x72bea4d0
 8019d74:	3e663769 	.word	0x3e663769
 8019d78:	c5d26bf1 	.word	0xc5d26bf1
 8019d7c:	3ebbbd41 	.word	0x3ebbbd41
 8019d80:	af25de2c 	.word	0xaf25de2c
 8019d84:	3f11566a 	.word	0x3f11566a
 8019d88:	16bebd93 	.word	0x16bebd93
 8019d8c:	3f66c16c 	.word	0x3f66c16c
 8019d90:	5555553e 	.word	0x5555553e
 8019d94:	3fc55555 	.word	0x3fc55555
 8019d98:	c2f8f359 	.word	0xc2f8f359
 8019d9c:	01a56e1f 	.word	0x01a56e1f
 8019da0:	3fe00000 	.word	0x3fe00000
 8019da4:	000fffff 	.word	0x000fffff
 8019da8:	3ff00000 	.word	0x3ff00000
 8019dac:	4090cbff 	.word	0x4090cbff
 8019db0:	3f6f3400 	.word	0x3f6f3400
 8019db4:	652b82fe 	.word	0x652b82fe
 8019db8:	3c971547 	.word	0x3c971547

08019dbc <__ieee754_sqrt>:
 8019dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc0:	ec55 4b10 	vmov	r4, r5, d0
 8019dc4:	4e56      	ldr	r6, [pc, #344]	; (8019f20 <__ieee754_sqrt+0x164>)
 8019dc6:	43ae      	bics	r6, r5
 8019dc8:	ee10 0a10 	vmov	r0, s0
 8019dcc:	ee10 3a10 	vmov	r3, s0
 8019dd0:	4629      	mov	r1, r5
 8019dd2:	462a      	mov	r2, r5
 8019dd4:	d110      	bne.n	8019df8 <__ieee754_sqrt+0x3c>
 8019dd6:	ee10 2a10 	vmov	r2, s0
 8019dda:	462b      	mov	r3, r5
 8019ddc:	f7e6 fc1c 	bl	8000618 <__aeabi_dmul>
 8019de0:	4602      	mov	r2, r0
 8019de2:	460b      	mov	r3, r1
 8019de4:	4620      	mov	r0, r4
 8019de6:	4629      	mov	r1, r5
 8019de8:	f7e6 fa60 	bl	80002ac <__adddf3>
 8019dec:	4604      	mov	r4, r0
 8019dee:	460d      	mov	r5, r1
 8019df0:	ec45 4b10 	vmov	d0, r4, r5
 8019df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019df8:	2d00      	cmp	r5, #0
 8019dfa:	dc10      	bgt.n	8019e1e <__ieee754_sqrt+0x62>
 8019dfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019e00:	4330      	orrs	r0, r6
 8019e02:	d0f5      	beq.n	8019df0 <__ieee754_sqrt+0x34>
 8019e04:	b15d      	cbz	r5, 8019e1e <__ieee754_sqrt+0x62>
 8019e06:	ee10 2a10 	vmov	r2, s0
 8019e0a:	462b      	mov	r3, r5
 8019e0c:	ee10 0a10 	vmov	r0, s0
 8019e10:	f7e6 fa4a 	bl	80002a8 <__aeabi_dsub>
 8019e14:	4602      	mov	r2, r0
 8019e16:	460b      	mov	r3, r1
 8019e18:	f7e6 fd28 	bl	800086c <__aeabi_ddiv>
 8019e1c:	e7e6      	b.n	8019dec <__ieee754_sqrt+0x30>
 8019e1e:	1509      	asrs	r1, r1, #20
 8019e20:	d076      	beq.n	8019f10 <__ieee754_sqrt+0x154>
 8019e22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019e26:	07ce      	lsls	r6, r1, #31
 8019e28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8019e2c:	bf5e      	ittt	pl
 8019e2e:	0fda      	lsrpl	r2, r3, #31
 8019e30:	005b      	lslpl	r3, r3, #1
 8019e32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019e36:	0fda      	lsrs	r2, r3, #31
 8019e38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8019e3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019e40:	2000      	movs	r0, #0
 8019e42:	106d      	asrs	r5, r5, #1
 8019e44:	005b      	lsls	r3, r3, #1
 8019e46:	f04f 0e16 	mov.w	lr, #22
 8019e4a:	4684      	mov	ip, r0
 8019e4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019e50:	eb0c 0401 	add.w	r4, ip, r1
 8019e54:	4294      	cmp	r4, r2
 8019e56:	bfde      	ittt	le
 8019e58:	1b12      	suble	r2, r2, r4
 8019e5a:	eb04 0c01 	addle.w	ip, r4, r1
 8019e5e:	1840      	addle	r0, r0, r1
 8019e60:	0052      	lsls	r2, r2, #1
 8019e62:	f1be 0e01 	subs.w	lr, lr, #1
 8019e66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019e6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019e6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019e72:	d1ed      	bne.n	8019e50 <__ieee754_sqrt+0x94>
 8019e74:	4671      	mov	r1, lr
 8019e76:	2720      	movs	r7, #32
 8019e78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019e7c:	4562      	cmp	r2, ip
 8019e7e:	eb04 060e 	add.w	r6, r4, lr
 8019e82:	dc02      	bgt.n	8019e8a <__ieee754_sqrt+0xce>
 8019e84:	d113      	bne.n	8019eae <__ieee754_sqrt+0xf2>
 8019e86:	429e      	cmp	r6, r3
 8019e88:	d811      	bhi.n	8019eae <__ieee754_sqrt+0xf2>
 8019e8a:	2e00      	cmp	r6, #0
 8019e8c:	eb06 0e04 	add.w	lr, r6, r4
 8019e90:	da43      	bge.n	8019f1a <__ieee754_sqrt+0x15e>
 8019e92:	f1be 0f00 	cmp.w	lr, #0
 8019e96:	db40      	blt.n	8019f1a <__ieee754_sqrt+0x15e>
 8019e98:	f10c 0801 	add.w	r8, ip, #1
 8019e9c:	eba2 020c 	sub.w	r2, r2, ip
 8019ea0:	429e      	cmp	r6, r3
 8019ea2:	bf88      	it	hi
 8019ea4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019ea8:	1b9b      	subs	r3, r3, r6
 8019eaa:	4421      	add	r1, r4
 8019eac:	46c4      	mov	ip, r8
 8019eae:	0052      	lsls	r2, r2, #1
 8019eb0:	3f01      	subs	r7, #1
 8019eb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019eb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019eba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ebe:	d1dd      	bne.n	8019e7c <__ieee754_sqrt+0xc0>
 8019ec0:	4313      	orrs	r3, r2
 8019ec2:	d006      	beq.n	8019ed2 <__ieee754_sqrt+0x116>
 8019ec4:	1c4c      	adds	r4, r1, #1
 8019ec6:	bf13      	iteet	ne
 8019ec8:	3101      	addne	r1, #1
 8019eca:	3001      	addeq	r0, #1
 8019ecc:	4639      	moveq	r1, r7
 8019ece:	f021 0101 	bicne.w	r1, r1, #1
 8019ed2:	1043      	asrs	r3, r0, #1
 8019ed4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019ed8:	0849      	lsrs	r1, r1, #1
 8019eda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019ede:	07c2      	lsls	r2, r0, #31
 8019ee0:	bf48      	it	mi
 8019ee2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019ee6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8019eea:	460c      	mov	r4, r1
 8019eec:	463d      	mov	r5, r7
 8019eee:	e77f      	b.n	8019df0 <__ieee754_sqrt+0x34>
 8019ef0:	0ada      	lsrs	r2, r3, #11
 8019ef2:	3815      	subs	r0, #21
 8019ef4:	055b      	lsls	r3, r3, #21
 8019ef6:	2a00      	cmp	r2, #0
 8019ef8:	d0fa      	beq.n	8019ef0 <__ieee754_sqrt+0x134>
 8019efa:	02d7      	lsls	r7, r2, #11
 8019efc:	d50a      	bpl.n	8019f14 <__ieee754_sqrt+0x158>
 8019efe:	f1c1 0420 	rsb	r4, r1, #32
 8019f02:	fa23 f404 	lsr.w	r4, r3, r4
 8019f06:	1e4d      	subs	r5, r1, #1
 8019f08:	408b      	lsls	r3, r1
 8019f0a:	4322      	orrs	r2, r4
 8019f0c:	1b41      	subs	r1, r0, r5
 8019f0e:	e788      	b.n	8019e22 <__ieee754_sqrt+0x66>
 8019f10:	4608      	mov	r0, r1
 8019f12:	e7f0      	b.n	8019ef6 <__ieee754_sqrt+0x13a>
 8019f14:	0052      	lsls	r2, r2, #1
 8019f16:	3101      	adds	r1, #1
 8019f18:	e7ef      	b.n	8019efa <__ieee754_sqrt+0x13e>
 8019f1a:	46e0      	mov	r8, ip
 8019f1c:	e7be      	b.n	8019e9c <__ieee754_sqrt+0xe0>
 8019f1e:	bf00      	nop
 8019f20:	7ff00000 	.word	0x7ff00000

08019f24 <fabs>:
 8019f24:	ec51 0b10 	vmov	r0, r1, d0
 8019f28:	ee10 2a10 	vmov	r2, s0
 8019f2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019f30:	ec43 2b10 	vmov	d0, r2, r3
 8019f34:	4770      	bx	lr

08019f36 <finite>:
 8019f36:	b082      	sub	sp, #8
 8019f38:	ed8d 0b00 	vstr	d0, [sp]
 8019f3c:	9801      	ldr	r0, [sp, #4]
 8019f3e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019f42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019f46:	0fc0      	lsrs	r0, r0, #31
 8019f48:	b002      	add	sp, #8
 8019f4a:	4770      	bx	lr
 8019f4c:	0000      	movs	r0, r0
	...

08019f50 <nan>:
 8019f50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019f58 <nan+0x8>
 8019f54:	4770      	bx	lr
 8019f56:	bf00      	nop
 8019f58:	00000000 	.word	0x00000000
 8019f5c:	7ff80000 	.word	0x7ff80000

08019f60 <rint>:
 8019f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f62:	ec51 0b10 	vmov	r0, r1, d0
 8019f66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019f6a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019f6e:	2e13      	cmp	r6, #19
 8019f70:	ee10 4a10 	vmov	r4, s0
 8019f74:	460b      	mov	r3, r1
 8019f76:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019f7a:	dc58      	bgt.n	801a02e <rint+0xce>
 8019f7c:	2e00      	cmp	r6, #0
 8019f7e:	da2b      	bge.n	8019fd8 <rint+0x78>
 8019f80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019f84:	4302      	orrs	r2, r0
 8019f86:	d023      	beq.n	8019fd0 <rint+0x70>
 8019f88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019f8c:	4302      	orrs	r2, r0
 8019f8e:	4254      	negs	r4, r2
 8019f90:	4314      	orrs	r4, r2
 8019f92:	0c4b      	lsrs	r3, r1, #17
 8019f94:	0b24      	lsrs	r4, r4, #12
 8019f96:	045b      	lsls	r3, r3, #17
 8019f98:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019f9c:	ea44 0103 	orr.w	r1, r4, r3
 8019fa0:	4b32      	ldr	r3, [pc, #200]	; (801a06c <rint+0x10c>)
 8019fa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019fa6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8019faa:	4602      	mov	r2, r0
 8019fac:	460b      	mov	r3, r1
 8019fae:	4630      	mov	r0, r6
 8019fb0:	4639      	mov	r1, r7
 8019fb2:	f7e6 f97b 	bl	80002ac <__adddf3>
 8019fb6:	e9cd 0100 	strd	r0, r1, [sp]
 8019fba:	463b      	mov	r3, r7
 8019fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019fc0:	4632      	mov	r2, r6
 8019fc2:	f7e6 f971 	bl	80002a8 <__aeabi_dsub>
 8019fc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019fca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019fce:	4639      	mov	r1, r7
 8019fd0:	ec41 0b10 	vmov	d0, r0, r1
 8019fd4:	b003      	add	sp, #12
 8019fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fd8:	4a25      	ldr	r2, [pc, #148]	; (801a070 <rint+0x110>)
 8019fda:	4132      	asrs	r2, r6
 8019fdc:	ea01 0702 	and.w	r7, r1, r2
 8019fe0:	4307      	orrs	r7, r0
 8019fe2:	d0f5      	beq.n	8019fd0 <rint+0x70>
 8019fe4:	0851      	lsrs	r1, r2, #1
 8019fe6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8019fea:	4314      	orrs	r4, r2
 8019fec:	d00c      	beq.n	801a008 <rint+0xa8>
 8019fee:	ea23 0201 	bic.w	r2, r3, r1
 8019ff2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019ff6:	2e13      	cmp	r6, #19
 8019ff8:	fa43 f606 	asr.w	r6, r3, r6
 8019ffc:	bf0c      	ite	eq
 8019ffe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a002:	2400      	movne	r4, #0
 801a004:	ea42 0306 	orr.w	r3, r2, r6
 801a008:	4918      	ldr	r1, [pc, #96]	; (801a06c <rint+0x10c>)
 801a00a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a00e:	4622      	mov	r2, r4
 801a010:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a014:	4620      	mov	r0, r4
 801a016:	4629      	mov	r1, r5
 801a018:	f7e6 f948 	bl	80002ac <__adddf3>
 801a01c:	e9cd 0100 	strd	r0, r1, [sp]
 801a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a024:	4622      	mov	r2, r4
 801a026:	462b      	mov	r3, r5
 801a028:	f7e6 f93e 	bl	80002a8 <__aeabi_dsub>
 801a02c:	e7d0      	b.n	8019fd0 <rint+0x70>
 801a02e:	2e33      	cmp	r6, #51	; 0x33
 801a030:	dd07      	ble.n	801a042 <rint+0xe2>
 801a032:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a036:	d1cb      	bne.n	8019fd0 <rint+0x70>
 801a038:	ee10 2a10 	vmov	r2, s0
 801a03c:	f7e6 f936 	bl	80002ac <__adddf3>
 801a040:	e7c6      	b.n	8019fd0 <rint+0x70>
 801a042:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a046:	f04f 36ff 	mov.w	r6, #4294967295
 801a04a:	40d6      	lsrs	r6, r2
 801a04c:	4230      	tst	r0, r6
 801a04e:	d0bf      	beq.n	8019fd0 <rint+0x70>
 801a050:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a054:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a058:	bf1f      	itttt	ne
 801a05a:	ea24 0101 	bicne.w	r1, r4, r1
 801a05e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a062:	fa44 f202 	asrne.w	r2, r4, r2
 801a066:	ea41 0402 	orrne.w	r4, r1, r2
 801a06a:	e7cd      	b.n	801a008 <rint+0xa8>
 801a06c:	08021308 	.word	0x08021308
 801a070:	000fffff 	.word	0x000fffff
 801a074:	00000000 	.word	0x00000000

0801a078 <scalbn>:
 801a078:	b570      	push	{r4, r5, r6, lr}
 801a07a:	ec55 4b10 	vmov	r4, r5, d0
 801a07e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a082:	4606      	mov	r6, r0
 801a084:	462b      	mov	r3, r5
 801a086:	b99a      	cbnz	r2, 801a0b0 <scalbn+0x38>
 801a088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a08c:	4323      	orrs	r3, r4
 801a08e:	d036      	beq.n	801a0fe <scalbn+0x86>
 801a090:	4b39      	ldr	r3, [pc, #228]	; (801a178 <scalbn+0x100>)
 801a092:	4629      	mov	r1, r5
 801a094:	ee10 0a10 	vmov	r0, s0
 801a098:	2200      	movs	r2, #0
 801a09a:	f7e6 fabd 	bl	8000618 <__aeabi_dmul>
 801a09e:	4b37      	ldr	r3, [pc, #220]	; (801a17c <scalbn+0x104>)
 801a0a0:	429e      	cmp	r6, r3
 801a0a2:	4604      	mov	r4, r0
 801a0a4:	460d      	mov	r5, r1
 801a0a6:	da10      	bge.n	801a0ca <scalbn+0x52>
 801a0a8:	a32b      	add	r3, pc, #172	; (adr r3, 801a158 <scalbn+0xe0>)
 801a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ae:	e03a      	b.n	801a126 <scalbn+0xae>
 801a0b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a0b4:	428a      	cmp	r2, r1
 801a0b6:	d10c      	bne.n	801a0d2 <scalbn+0x5a>
 801a0b8:	ee10 2a10 	vmov	r2, s0
 801a0bc:	4620      	mov	r0, r4
 801a0be:	4629      	mov	r1, r5
 801a0c0:	f7e6 f8f4 	bl	80002ac <__adddf3>
 801a0c4:	4604      	mov	r4, r0
 801a0c6:	460d      	mov	r5, r1
 801a0c8:	e019      	b.n	801a0fe <scalbn+0x86>
 801a0ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	3a36      	subs	r2, #54	; 0x36
 801a0d2:	4432      	add	r2, r6
 801a0d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a0d8:	428a      	cmp	r2, r1
 801a0da:	dd08      	ble.n	801a0ee <scalbn+0x76>
 801a0dc:	2d00      	cmp	r5, #0
 801a0de:	a120      	add	r1, pc, #128	; (adr r1, 801a160 <scalbn+0xe8>)
 801a0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0e4:	da1c      	bge.n	801a120 <scalbn+0xa8>
 801a0e6:	a120      	add	r1, pc, #128	; (adr r1, 801a168 <scalbn+0xf0>)
 801a0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0ec:	e018      	b.n	801a120 <scalbn+0xa8>
 801a0ee:	2a00      	cmp	r2, #0
 801a0f0:	dd08      	ble.n	801a104 <scalbn+0x8c>
 801a0f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a0f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a0fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a0fe:	ec45 4b10 	vmov	d0, r4, r5
 801a102:	bd70      	pop	{r4, r5, r6, pc}
 801a104:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a108:	da19      	bge.n	801a13e <scalbn+0xc6>
 801a10a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a10e:	429e      	cmp	r6, r3
 801a110:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a114:	dd0a      	ble.n	801a12c <scalbn+0xb4>
 801a116:	a112      	add	r1, pc, #72	; (adr r1, 801a160 <scalbn+0xe8>)
 801a118:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d1e2      	bne.n	801a0e6 <scalbn+0x6e>
 801a120:	a30f      	add	r3, pc, #60	; (adr r3, 801a160 <scalbn+0xe8>)
 801a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a126:	f7e6 fa77 	bl	8000618 <__aeabi_dmul>
 801a12a:	e7cb      	b.n	801a0c4 <scalbn+0x4c>
 801a12c:	a10a      	add	r1, pc, #40	; (adr r1, 801a158 <scalbn+0xe0>)
 801a12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d0b8      	beq.n	801a0a8 <scalbn+0x30>
 801a136:	a10e      	add	r1, pc, #56	; (adr r1, 801a170 <scalbn+0xf8>)
 801a138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a13c:	e7b4      	b.n	801a0a8 <scalbn+0x30>
 801a13e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a142:	3236      	adds	r2, #54	; 0x36
 801a144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a148:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a14c:	4620      	mov	r0, r4
 801a14e:	4b0c      	ldr	r3, [pc, #48]	; (801a180 <scalbn+0x108>)
 801a150:	2200      	movs	r2, #0
 801a152:	e7e8      	b.n	801a126 <scalbn+0xae>
 801a154:	f3af 8000 	nop.w
 801a158:	c2f8f359 	.word	0xc2f8f359
 801a15c:	01a56e1f 	.word	0x01a56e1f
 801a160:	8800759c 	.word	0x8800759c
 801a164:	7e37e43c 	.word	0x7e37e43c
 801a168:	8800759c 	.word	0x8800759c
 801a16c:	fe37e43c 	.word	0xfe37e43c
 801a170:	c2f8f359 	.word	0xc2f8f359
 801a174:	81a56e1f 	.word	0x81a56e1f
 801a178:	43500000 	.word	0x43500000
 801a17c:	ffff3cb0 	.word	0xffff3cb0
 801a180:	3c900000 	.word	0x3c900000

0801a184 <abort>:
 801a184:	b508      	push	{r3, lr}
 801a186:	2006      	movs	r0, #6
 801a188:	f001 f9ba 	bl	801b500 <raise>
 801a18c:	2001      	movs	r0, #1
 801a18e:	f7e8 fe61 	bl	8002e54 <_exit>
	...

0801a194 <__errno>:
 801a194:	4b01      	ldr	r3, [pc, #4]	; (801a19c <__errno+0x8>)
 801a196:	6818      	ldr	r0, [r3, #0]
 801a198:	4770      	bx	lr
 801a19a:	bf00      	nop
 801a19c:	200001f8 	.word	0x200001f8

0801a1a0 <std>:
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	b510      	push	{r4, lr}
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	e9c0 3300 	strd	r3, r3, [r0]
 801a1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1ae:	6083      	str	r3, [r0, #8]
 801a1b0:	8181      	strh	r1, [r0, #12]
 801a1b2:	6643      	str	r3, [r0, #100]	; 0x64
 801a1b4:	81c2      	strh	r2, [r0, #14]
 801a1b6:	6183      	str	r3, [r0, #24]
 801a1b8:	4619      	mov	r1, r3
 801a1ba:	2208      	movs	r2, #8
 801a1bc:	305c      	adds	r0, #92	; 0x5c
 801a1be:	f000 f93d 	bl	801a43c <memset>
 801a1c2:	4b05      	ldr	r3, [pc, #20]	; (801a1d8 <std+0x38>)
 801a1c4:	6263      	str	r3, [r4, #36]	; 0x24
 801a1c6:	4b05      	ldr	r3, [pc, #20]	; (801a1dc <std+0x3c>)
 801a1c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a1ca:	4b05      	ldr	r3, [pc, #20]	; (801a1e0 <std+0x40>)
 801a1cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a1ce:	4b05      	ldr	r3, [pc, #20]	; (801a1e4 <std+0x44>)
 801a1d0:	6224      	str	r4, [r4, #32]
 801a1d2:	6323      	str	r3, [r4, #48]	; 0x30
 801a1d4:	bd10      	pop	{r4, pc}
 801a1d6:	bf00      	nop
 801a1d8:	0801b5d1 	.word	0x0801b5d1
 801a1dc:	0801b5f7 	.word	0x0801b5f7
 801a1e0:	0801b62f 	.word	0x0801b62f
 801a1e4:	0801b653 	.word	0x0801b653

0801a1e8 <_cleanup_r>:
 801a1e8:	4901      	ldr	r1, [pc, #4]	; (801a1f0 <_cleanup_r+0x8>)
 801a1ea:	f000 b8af 	b.w	801a34c <_fwalk_reent>
 801a1ee:	bf00      	nop
 801a1f0:	0801d58d 	.word	0x0801d58d

0801a1f4 <__sfmoreglue>:
 801a1f4:	b570      	push	{r4, r5, r6, lr}
 801a1f6:	1e4a      	subs	r2, r1, #1
 801a1f8:	2568      	movs	r5, #104	; 0x68
 801a1fa:	4355      	muls	r5, r2
 801a1fc:	460e      	mov	r6, r1
 801a1fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a202:	f000 f973 	bl	801a4ec <_malloc_r>
 801a206:	4604      	mov	r4, r0
 801a208:	b140      	cbz	r0, 801a21c <__sfmoreglue+0x28>
 801a20a:	2100      	movs	r1, #0
 801a20c:	e9c0 1600 	strd	r1, r6, [r0]
 801a210:	300c      	adds	r0, #12
 801a212:	60a0      	str	r0, [r4, #8]
 801a214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a218:	f000 f910 	bl	801a43c <memset>
 801a21c:	4620      	mov	r0, r4
 801a21e:	bd70      	pop	{r4, r5, r6, pc}

0801a220 <__sfp_lock_acquire>:
 801a220:	4801      	ldr	r0, [pc, #4]	; (801a228 <__sfp_lock_acquire+0x8>)
 801a222:	f000 b8d8 	b.w	801a3d6 <__retarget_lock_acquire_recursive>
 801a226:	bf00      	nop
 801a228:	20008fb0 	.word	0x20008fb0

0801a22c <__sfp_lock_release>:
 801a22c:	4801      	ldr	r0, [pc, #4]	; (801a234 <__sfp_lock_release+0x8>)
 801a22e:	f000 b8d3 	b.w	801a3d8 <__retarget_lock_release_recursive>
 801a232:	bf00      	nop
 801a234:	20008fb0 	.word	0x20008fb0

0801a238 <__sinit_lock_acquire>:
 801a238:	4801      	ldr	r0, [pc, #4]	; (801a240 <__sinit_lock_acquire+0x8>)
 801a23a:	f000 b8cc 	b.w	801a3d6 <__retarget_lock_acquire_recursive>
 801a23e:	bf00      	nop
 801a240:	20008fab 	.word	0x20008fab

0801a244 <__sinit_lock_release>:
 801a244:	4801      	ldr	r0, [pc, #4]	; (801a24c <__sinit_lock_release+0x8>)
 801a246:	f000 b8c7 	b.w	801a3d8 <__retarget_lock_release_recursive>
 801a24a:	bf00      	nop
 801a24c:	20008fab 	.word	0x20008fab

0801a250 <__sinit>:
 801a250:	b510      	push	{r4, lr}
 801a252:	4604      	mov	r4, r0
 801a254:	f7ff fff0 	bl	801a238 <__sinit_lock_acquire>
 801a258:	69a3      	ldr	r3, [r4, #24]
 801a25a:	b11b      	cbz	r3, 801a264 <__sinit+0x14>
 801a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a260:	f7ff bff0 	b.w	801a244 <__sinit_lock_release>
 801a264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a268:	6523      	str	r3, [r4, #80]	; 0x50
 801a26a:	4b13      	ldr	r3, [pc, #76]	; (801a2b8 <__sinit+0x68>)
 801a26c:	4a13      	ldr	r2, [pc, #76]	; (801a2bc <__sinit+0x6c>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	62a2      	str	r2, [r4, #40]	; 0x28
 801a272:	42a3      	cmp	r3, r4
 801a274:	bf04      	itt	eq
 801a276:	2301      	moveq	r3, #1
 801a278:	61a3      	streq	r3, [r4, #24]
 801a27a:	4620      	mov	r0, r4
 801a27c:	f000 f820 	bl	801a2c0 <__sfp>
 801a280:	6060      	str	r0, [r4, #4]
 801a282:	4620      	mov	r0, r4
 801a284:	f000 f81c 	bl	801a2c0 <__sfp>
 801a288:	60a0      	str	r0, [r4, #8]
 801a28a:	4620      	mov	r0, r4
 801a28c:	f000 f818 	bl	801a2c0 <__sfp>
 801a290:	2200      	movs	r2, #0
 801a292:	60e0      	str	r0, [r4, #12]
 801a294:	2104      	movs	r1, #4
 801a296:	6860      	ldr	r0, [r4, #4]
 801a298:	f7ff ff82 	bl	801a1a0 <std>
 801a29c:	68a0      	ldr	r0, [r4, #8]
 801a29e:	2201      	movs	r2, #1
 801a2a0:	2109      	movs	r1, #9
 801a2a2:	f7ff ff7d 	bl	801a1a0 <std>
 801a2a6:	68e0      	ldr	r0, [r4, #12]
 801a2a8:	2202      	movs	r2, #2
 801a2aa:	2112      	movs	r1, #18
 801a2ac:	f7ff ff78 	bl	801a1a0 <std>
 801a2b0:	2301      	movs	r3, #1
 801a2b2:	61a3      	str	r3, [r4, #24]
 801a2b4:	e7d2      	b.n	801a25c <__sinit+0xc>
 801a2b6:	bf00      	nop
 801a2b8:	0802147c 	.word	0x0802147c
 801a2bc:	0801a1e9 	.word	0x0801a1e9

0801a2c0 <__sfp>:
 801a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2c2:	4607      	mov	r7, r0
 801a2c4:	f7ff ffac 	bl	801a220 <__sfp_lock_acquire>
 801a2c8:	4b1e      	ldr	r3, [pc, #120]	; (801a344 <__sfp+0x84>)
 801a2ca:	681e      	ldr	r6, [r3, #0]
 801a2cc:	69b3      	ldr	r3, [r6, #24]
 801a2ce:	b913      	cbnz	r3, 801a2d6 <__sfp+0x16>
 801a2d0:	4630      	mov	r0, r6
 801a2d2:	f7ff ffbd 	bl	801a250 <__sinit>
 801a2d6:	3648      	adds	r6, #72	; 0x48
 801a2d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	d503      	bpl.n	801a2e8 <__sfp+0x28>
 801a2e0:	6833      	ldr	r3, [r6, #0]
 801a2e2:	b30b      	cbz	r3, 801a328 <__sfp+0x68>
 801a2e4:	6836      	ldr	r6, [r6, #0]
 801a2e6:	e7f7      	b.n	801a2d8 <__sfp+0x18>
 801a2e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a2ec:	b9d5      	cbnz	r5, 801a324 <__sfp+0x64>
 801a2ee:	4b16      	ldr	r3, [pc, #88]	; (801a348 <__sfp+0x88>)
 801a2f0:	60e3      	str	r3, [r4, #12]
 801a2f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a2f6:	6665      	str	r5, [r4, #100]	; 0x64
 801a2f8:	f000 f86c 	bl	801a3d4 <__retarget_lock_init_recursive>
 801a2fc:	f7ff ff96 	bl	801a22c <__sfp_lock_release>
 801a300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a308:	6025      	str	r5, [r4, #0]
 801a30a:	61a5      	str	r5, [r4, #24]
 801a30c:	2208      	movs	r2, #8
 801a30e:	4629      	mov	r1, r5
 801a310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a314:	f000 f892 	bl	801a43c <memset>
 801a318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a31c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a320:	4620      	mov	r0, r4
 801a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a324:	3468      	adds	r4, #104	; 0x68
 801a326:	e7d9      	b.n	801a2dc <__sfp+0x1c>
 801a328:	2104      	movs	r1, #4
 801a32a:	4638      	mov	r0, r7
 801a32c:	f7ff ff62 	bl	801a1f4 <__sfmoreglue>
 801a330:	4604      	mov	r4, r0
 801a332:	6030      	str	r0, [r6, #0]
 801a334:	2800      	cmp	r0, #0
 801a336:	d1d5      	bne.n	801a2e4 <__sfp+0x24>
 801a338:	f7ff ff78 	bl	801a22c <__sfp_lock_release>
 801a33c:	230c      	movs	r3, #12
 801a33e:	603b      	str	r3, [r7, #0]
 801a340:	e7ee      	b.n	801a320 <__sfp+0x60>
 801a342:	bf00      	nop
 801a344:	0802147c 	.word	0x0802147c
 801a348:	ffff0001 	.word	0xffff0001

0801a34c <_fwalk_reent>:
 801a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a350:	4606      	mov	r6, r0
 801a352:	4688      	mov	r8, r1
 801a354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a358:	2700      	movs	r7, #0
 801a35a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a35e:	f1b9 0901 	subs.w	r9, r9, #1
 801a362:	d505      	bpl.n	801a370 <_fwalk_reent+0x24>
 801a364:	6824      	ldr	r4, [r4, #0]
 801a366:	2c00      	cmp	r4, #0
 801a368:	d1f7      	bne.n	801a35a <_fwalk_reent+0xe>
 801a36a:	4638      	mov	r0, r7
 801a36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a370:	89ab      	ldrh	r3, [r5, #12]
 801a372:	2b01      	cmp	r3, #1
 801a374:	d907      	bls.n	801a386 <_fwalk_reent+0x3a>
 801a376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a37a:	3301      	adds	r3, #1
 801a37c:	d003      	beq.n	801a386 <_fwalk_reent+0x3a>
 801a37e:	4629      	mov	r1, r5
 801a380:	4630      	mov	r0, r6
 801a382:	47c0      	blx	r8
 801a384:	4307      	orrs	r7, r0
 801a386:	3568      	adds	r5, #104	; 0x68
 801a388:	e7e9      	b.n	801a35e <_fwalk_reent+0x12>
	...

0801a38c <__libc_init_array>:
 801a38c:	b570      	push	{r4, r5, r6, lr}
 801a38e:	4d0d      	ldr	r5, [pc, #52]	; (801a3c4 <__libc_init_array+0x38>)
 801a390:	4c0d      	ldr	r4, [pc, #52]	; (801a3c8 <__libc_init_array+0x3c>)
 801a392:	1b64      	subs	r4, r4, r5
 801a394:	10a4      	asrs	r4, r4, #2
 801a396:	2600      	movs	r6, #0
 801a398:	42a6      	cmp	r6, r4
 801a39a:	d109      	bne.n	801a3b0 <__libc_init_array+0x24>
 801a39c:	4d0b      	ldr	r5, [pc, #44]	; (801a3cc <__libc_init_array+0x40>)
 801a39e:	4c0c      	ldr	r4, [pc, #48]	; (801a3d0 <__libc_init_array+0x44>)
 801a3a0:	f005 f8cc 	bl	801f53c <_init>
 801a3a4:	1b64      	subs	r4, r4, r5
 801a3a6:	10a4      	asrs	r4, r4, #2
 801a3a8:	2600      	movs	r6, #0
 801a3aa:	42a6      	cmp	r6, r4
 801a3ac:	d105      	bne.n	801a3ba <__libc_init_array+0x2e>
 801a3ae:	bd70      	pop	{r4, r5, r6, pc}
 801a3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a3b4:	4798      	blx	r3
 801a3b6:	3601      	adds	r6, #1
 801a3b8:	e7ee      	b.n	801a398 <__libc_init_array+0xc>
 801a3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801a3be:	4798      	blx	r3
 801a3c0:	3601      	adds	r6, #1
 801a3c2:	e7f2      	b.n	801a3aa <__libc_init_array+0x1e>
 801a3c4:	080217e8 	.word	0x080217e8
 801a3c8:	080217e8 	.word	0x080217e8
 801a3cc:	080217e8 	.word	0x080217e8
 801a3d0:	080217f0 	.word	0x080217f0

0801a3d4 <__retarget_lock_init_recursive>:
 801a3d4:	4770      	bx	lr

0801a3d6 <__retarget_lock_acquire_recursive>:
 801a3d6:	4770      	bx	lr

0801a3d8 <__retarget_lock_release_recursive>:
 801a3d8:	4770      	bx	lr
	...

0801a3dc <malloc>:
 801a3dc:	4b02      	ldr	r3, [pc, #8]	; (801a3e8 <malloc+0xc>)
 801a3de:	4601      	mov	r1, r0
 801a3e0:	6818      	ldr	r0, [r3, #0]
 801a3e2:	f000 b883 	b.w	801a4ec <_malloc_r>
 801a3e6:	bf00      	nop
 801a3e8:	200001f8 	.word	0x200001f8

0801a3ec <memcpy>:
 801a3ec:	440a      	add	r2, r1
 801a3ee:	4291      	cmp	r1, r2
 801a3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a3f4:	d100      	bne.n	801a3f8 <memcpy+0xc>
 801a3f6:	4770      	bx	lr
 801a3f8:	b510      	push	{r4, lr}
 801a3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a402:	4291      	cmp	r1, r2
 801a404:	d1f9      	bne.n	801a3fa <memcpy+0xe>
 801a406:	bd10      	pop	{r4, pc}

0801a408 <memmove>:
 801a408:	4288      	cmp	r0, r1
 801a40a:	b510      	push	{r4, lr}
 801a40c:	eb01 0402 	add.w	r4, r1, r2
 801a410:	d902      	bls.n	801a418 <memmove+0x10>
 801a412:	4284      	cmp	r4, r0
 801a414:	4623      	mov	r3, r4
 801a416:	d807      	bhi.n	801a428 <memmove+0x20>
 801a418:	1e43      	subs	r3, r0, #1
 801a41a:	42a1      	cmp	r1, r4
 801a41c:	d008      	beq.n	801a430 <memmove+0x28>
 801a41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a422:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a426:	e7f8      	b.n	801a41a <memmove+0x12>
 801a428:	4402      	add	r2, r0
 801a42a:	4601      	mov	r1, r0
 801a42c:	428a      	cmp	r2, r1
 801a42e:	d100      	bne.n	801a432 <memmove+0x2a>
 801a430:	bd10      	pop	{r4, pc}
 801a432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a43a:	e7f7      	b.n	801a42c <memmove+0x24>

0801a43c <memset>:
 801a43c:	4402      	add	r2, r0
 801a43e:	4603      	mov	r3, r0
 801a440:	4293      	cmp	r3, r2
 801a442:	d100      	bne.n	801a446 <memset+0xa>
 801a444:	4770      	bx	lr
 801a446:	f803 1b01 	strb.w	r1, [r3], #1
 801a44a:	e7f9      	b.n	801a440 <memset+0x4>

0801a44c <_free_r>:
 801a44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a44e:	2900      	cmp	r1, #0
 801a450:	d048      	beq.n	801a4e4 <_free_r+0x98>
 801a452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a456:	9001      	str	r0, [sp, #4]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f1a1 0404 	sub.w	r4, r1, #4
 801a45e:	bfb8      	it	lt
 801a460:	18e4      	addlt	r4, r4, r3
 801a462:	f003 fcdd 	bl	801de20 <__malloc_lock>
 801a466:	4a20      	ldr	r2, [pc, #128]	; (801a4e8 <_free_r+0x9c>)
 801a468:	9801      	ldr	r0, [sp, #4]
 801a46a:	6813      	ldr	r3, [r2, #0]
 801a46c:	4615      	mov	r5, r2
 801a46e:	b933      	cbnz	r3, 801a47e <_free_r+0x32>
 801a470:	6063      	str	r3, [r4, #4]
 801a472:	6014      	str	r4, [r2, #0]
 801a474:	b003      	add	sp, #12
 801a476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a47a:	f003 bcd7 	b.w	801de2c <__malloc_unlock>
 801a47e:	42a3      	cmp	r3, r4
 801a480:	d90b      	bls.n	801a49a <_free_r+0x4e>
 801a482:	6821      	ldr	r1, [r4, #0]
 801a484:	1862      	adds	r2, r4, r1
 801a486:	4293      	cmp	r3, r2
 801a488:	bf04      	itt	eq
 801a48a:	681a      	ldreq	r2, [r3, #0]
 801a48c:	685b      	ldreq	r3, [r3, #4]
 801a48e:	6063      	str	r3, [r4, #4]
 801a490:	bf04      	itt	eq
 801a492:	1852      	addeq	r2, r2, r1
 801a494:	6022      	streq	r2, [r4, #0]
 801a496:	602c      	str	r4, [r5, #0]
 801a498:	e7ec      	b.n	801a474 <_free_r+0x28>
 801a49a:	461a      	mov	r2, r3
 801a49c:	685b      	ldr	r3, [r3, #4]
 801a49e:	b10b      	cbz	r3, 801a4a4 <_free_r+0x58>
 801a4a0:	42a3      	cmp	r3, r4
 801a4a2:	d9fa      	bls.n	801a49a <_free_r+0x4e>
 801a4a4:	6811      	ldr	r1, [r2, #0]
 801a4a6:	1855      	adds	r5, r2, r1
 801a4a8:	42a5      	cmp	r5, r4
 801a4aa:	d10b      	bne.n	801a4c4 <_free_r+0x78>
 801a4ac:	6824      	ldr	r4, [r4, #0]
 801a4ae:	4421      	add	r1, r4
 801a4b0:	1854      	adds	r4, r2, r1
 801a4b2:	42a3      	cmp	r3, r4
 801a4b4:	6011      	str	r1, [r2, #0]
 801a4b6:	d1dd      	bne.n	801a474 <_free_r+0x28>
 801a4b8:	681c      	ldr	r4, [r3, #0]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	6053      	str	r3, [r2, #4]
 801a4be:	4421      	add	r1, r4
 801a4c0:	6011      	str	r1, [r2, #0]
 801a4c2:	e7d7      	b.n	801a474 <_free_r+0x28>
 801a4c4:	d902      	bls.n	801a4cc <_free_r+0x80>
 801a4c6:	230c      	movs	r3, #12
 801a4c8:	6003      	str	r3, [r0, #0]
 801a4ca:	e7d3      	b.n	801a474 <_free_r+0x28>
 801a4cc:	6825      	ldr	r5, [r4, #0]
 801a4ce:	1961      	adds	r1, r4, r5
 801a4d0:	428b      	cmp	r3, r1
 801a4d2:	bf04      	itt	eq
 801a4d4:	6819      	ldreq	r1, [r3, #0]
 801a4d6:	685b      	ldreq	r3, [r3, #4]
 801a4d8:	6063      	str	r3, [r4, #4]
 801a4da:	bf04      	itt	eq
 801a4dc:	1949      	addeq	r1, r1, r5
 801a4de:	6021      	streq	r1, [r4, #0]
 801a4e0:	6054      	str	r4, [r2, #4]
 801a4e2:	e7c7      	b.n	801a474 <_free_r+0x28>
 801a4e4:	b003      	add	sp, #12
 801a4e6:	bd30      	pop	{r4, r5, pc}
 801a4e8:	20005ebc 	.word	0x20005ebc

0801a4ec <_malloc_r>:
 801a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ee:	1ccd      	adds	r5, r1, #3
 801a4f0:	f025 0503 	bic.w	r5, r5, #3
 801a4f4:	3508      	adds	r5, #8
 801a4f6:	2d0c      	cmp	r5, #12
 801a4f8:	bf38      	it	cc
 801a4fa:	250c      	movcc	r5, #12
 801a4fc:	2d00      	cmp	r5, #0
 801a4fe:	4606      	mov	r6, r0
 801a500:	db01      	blt.n	801a506 <_malloc_r+0x1a>
 801a502:	42a9      	cmp	r1, r5
 801a504:	d903      	bls.n	801a50e <_malloc_r+0x22>
 801a506:	230c      	movs	r3, #12
 801a508:	6033      	str	r3, [r6, #0]
 801a50a:	2000      	movs	r0, #0
 801a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a50e:	f003 fc87 	bl	801de20 <__malloc_lock>
 801a512:	4921      	ldr	r1, [pc, #132]	; (801a598 <_malloc_r+0xac>)
 801a514:	680a      	ldr	r2, [r1, #0]
 801a516:	4614      	mov	r4, r2
 801a518:	b99c      	cbnz	r4, 801a542 <_malloc_r+0x56>
 801a51a:	4f20      	ldr	r7, [pc, #128]	; (801a59c <_malloc_r+0xb0>)
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	b923      	cbnz	r3, 801a52a <_malloc_r+0x3e>
 801a520:	4621      	mov	r1, r4
 801a522:	4630      	mov	r0, r6
 801a524:	f000 ffae 	bl	801b484 <_sbrk_r>
 801a528:	6038      	str	r0, [r7, #0]
 801a52a:	4629      	mov	r1, r5
 801a52c:	4630      	mov	r0, r6
 801a52e:	f000 ffa9 	bl	801b484 <_sbrk_r>
 801a532:	1c43      	adds	r3, r0, #1
 801a534:	d123      	bne.n	801a57e <_malloc_r+0x92>
 801a536:	230c      	movs	r3, #12
 801a538:	6033      	str	r3, [r6, #0]
 801a53a:	4630      	mov	r0, r6
 801a53c:	f003 fc76 	bl	801de2c <__malloc_unlock>
 801a540:	e7e3      	b.n	801a50a <_malloc_r+0x1e>
 801a542:	6823      	ldr	r3, [r4, #0]
 801a544:	1b5b      	subs	r3, r3, r5
 801a546:	d417      	bmi.n	801a578 <_malloc_r+0x8c>
 801a548:	2b0b      	cmp	r3, #11
 801a54a:	d903      	bls.n	801a554 <_malloc_r+0x68>
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	441c      	add	r4, r3
 801a550:	6025      	str	r5, [r4, #0]
 801a552:	e004      	b.n	801a55e <_malloc_r+0x72>
 801a554:	6863      	ldr	r3, [r4, #4]
 801a556:	42a2      	cmp	r2, r4
 801a558:	bf0c      	ite	eq
 801a55a:	600b      	streq	r3, [r1, #0]
 801a55c:	6053      	strne	r3, [r2, #4]
 801a55e:	4630      	mov	r0, r6
 801a560:	f003 fc64 	bl	801de2c <__malloc_unlock>
 801a564:	f104 000b 	add.w	r0, r4, #11
 801a568:	1d23      	adds	r3, r4, #4
 801a56a:	f020 0007 	bic.w	r0, r0, #7
 801a56e:	1ac2      	subs	r2, r0, r3
 801a570:	d0cc      	beq.n	801a50c <_malloc_r+0x20>
 801a572:	1a1b      	subs	r3, r3, r0
 801a574:	50a3      	str	r3, [r4, r2]
 801a576:	e7c9      	b.n	801a50c <_malloc_r+0x20>
 801a578:	4622      	mov	r2, r4
 801a57a:	6864      	ldr	r4, [r4, #4]
 801a57c:	e7cc      	b.n	801a518 <_malloc_r+0x2c>
 801a57e:	1cc4      	adds	r4, r0, #3
 801a580:	f024 0403 	bic.w	r4, r4, #3
 801a584:	42a0      	cmp	r0, r4
 801a586:	d0e3      	beq.n	801a550 <_malloc_r+0x64>
 801a588:	1a21      	subs	r1, r4, r0
 801a58a:	4630      	mov	r0, r6
 801a58c:	f000 ff7a 	bl	801b484 <_sbrk_r>
 801a590:	3001      	adds	r0, #1
 801a592:	d1dd      	bne.n	801a550 <_malloc_r+0x64>
 801a594:	e7cf      	b.n	801a536 <_malloc_r+0x4a>
 801a596:	bf00      	nop
 801a598:	20005ebc 	.word	0x20005ebc
 801a59c:	20005ec0 	.word	0x20005ec0

0801a5a0 <__cvt>:
 801a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5a4:	ec55 4b10 	vmov	r4, r5, d0
 801a5a8:	2d00      	cmp	r5, #0
 801a5aa:	460e      	mov	r6, r1
 801a5ac:	4619      	mov	r1, r3
 801a5ae:	462b      	mov	r3, r5
 801a5b0:	bfbb      	ittet	lt
 801a5b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a5b6:	461d      	movlt	r5, r3
 801a5b8:	2300      	movge	r3, #0
 801a5ba:	232d      	movlt	r3, #45	; 0x2d
 801a5bc:	700b      	strb	r3, [r1, #0]
 801a5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a5c4:	4691      	mov	r9, r2
 801a5c6:	f023 0820 	bic.w	r8, r3, #32
 801a5ca:	bfbc      	itt	lt
 801a5cc:	4622      	movlt	r2, r4
 801a5ce:	4614      	movlt	r4, r2
 801a5d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a5d4:	d005      	beq.n	801a5e2 <__cvt+0x42>
 801a5d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a5da:	d100      	bne.n	801a5de <__cvt+0x3e>
 801a5dc:	3601      	adds	r6, #1
 801a5de:	2102      	movs	r1, #2
 801a5e0:	e000      	b.n	801a5e4 <__cvt+0x44>
 801a5e2:	2103      	movs	r1, #3
 801a5e4:	ab03      	add	r3, sp, #12
 801a5e6:	9301      	str	r3, [sp, #4]
 801a5e8:	ab02      	add	r3, sp, #8
 801a5ea:	9300      	str	r3, [sp, #0]
 801a5ec:	ec45 4b10 	vmov	d0, r4, r5
 801a5f0:	4653      	mov	r3, sl
 801a5f2:	4632      	mov	r2, r6
 801a5f4:	f002 f958 	bl	801c8a8 <_dtoa_r>
 801a5f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a5fc:	4607      	mov	r7, r0
 801a5fe:	d102      	bne.n	801a606 <__cvt+0x66>
 801a600:	f019 0f01 	tst.w	r9, #1
 801a604:	d022      	beq.n	801a64c <__cvt+0xac>
 801a606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a60a:	eb07 0906 	add.w	r9, r7, r6
 801a60e:	d110      	bne.n	801a632 <__cvt+0x92>
 801a610:	783b      	ldrb	r3, [r7, #0]
 801a612:	2b30      	cmp	r3, #48	; 0x30
 801a614:	d10a      	bne.n	801a62c <__cvt+0x8c>
 801a616:	2200      	movs	r2, #0
 801a618:	2300      	movs	r3, #0
 801a61a:	4620      	mov	r0, r4
 801a61c:	4629      	mov	r1, r5
 801a61e:	f7e6 fa63 	bl	8000ae8 <__aeabi_dcmpeq>
 801a622:	b918      	cbnz	r0, 801a62c <__cvt+0x8c>
 801a624:	f1c6 0601 	rsb	r6, r6, #1
 801a628:	f8ca 6000 	str.w	r6, [sl]
 801a62c:	f8da 3000 	ldr.w	r3, [sl]
 801a630:	4499      	add	r9, r3
 801a632:	2200      	movs	r2, #0
 801a634:	2300      	movs	r3, #0
 801a636:	4620      	mov	r0, r4
 801a638:	4629      	mov	r1, r5
 801a63a:	f7e6 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 801a63e:	b108      	cbz	r0, 801a644 <__cvt+0xa4>
 801a640:	f8cd 900c 	str.w	r9, [sp, #12]
 801a644:	2230      	movs	r2, #48	; 0x30
 801a646:	9b03      	ldr	r3, [sp, #12]
 801a648:	454b      	cmp	r3, r9
 801a64a:	d307      	bcc.n	801a65c <__cvt+0xbc>
 801a64c:	9b03      	ldr	r3, [sp, #12]
 801a64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a650:	1bdb      	subs	r3, r3, r7
 801a652:	4638      	mov	r0, r7
 801a654:	6013      	str	r3, [r2, #0]
 801a656:	b004      	add	sp, #16
 801a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a65c:	1c59      	adds	r1, r3, #1
 801a65e:	9103      	str	r1, [sp, #12]
 801a660:	701a      	strb	r2, [r3, #0]
 801a662:	e7f0      	b.n	801a646 <__cvt+0xa6>

0801a664 <__exponent>:
 801a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a666:	4603      	mov	r3, r0
 801a668:	2900      	cmp	r1, #0
 801a66a:	bfb8      	it	lt
 801a66c:	4249      	neglt	r1, r1
 801a66e:	f803 2b02 	strb.w	r2, [r3], #2
 801a672:	bfb4      	ite	lt
 801a674:	222d      	movlt	r2, #45	; 0x2d
 801a676:	222b      	movge	r2, #43	; 0x2b
 801a678:	2909      	cmp	r1, #9
 801a67a:	7042      	strb	r2, [r0, #1]
 801a67c:	dd2a      	ble.n	801a6d4 <__exponent+0x70>
 801a67e:	f10d 0407 	add.w	r4, sp, #7
 801a682:	46a4      	mov	ip, r4
 801a684:	270a      	movs	r7, #10
 801a686:	46a6      	mov	lr, r4
 801a688:	460a      	mov	r2, r1
 801a68a:	fb91 f6f7 	sdiv	r6, r1, r7
 801a68e:	fb07 1516 	mls	r5, r7, r6, r1
 801a692:	3530      	adds	r5, #48	; 0x30
 801a694:	2a63      	cmp	r2, #99	; 0x63
 801a696:	f104 34ff 	add.w	r4, r4, #4294967295
 801a69a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a69e:	4631      	mov	r1, r6
 801a6a0:	dcf1      	bgt.n	801a686 <__exponent+0x22>
 801a6a2:	3130      	adds	r1, #48	; 0x30
 801a6a4:	f1ae 0502 	sub.w	r5, lr, #2
 801a6a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a6ac:	1c44      	adds	r4, r0, #1
 801a6ae:	4629      	mov	r1, r5
 801a6b0:	4561      	cmp	r1, ip
 801a6b2:	d30a      	bcc.n	801a6ca <__exponent+0x66>
 801a6b4:	f10d 0209 	add.w	r2, sp, #9
 801a6b8:	eba2 020e 	sub.w	r2, r2, lr
 801a6bc:	4565      	cmp	r5, ip
 801a6be:	bf88      	it	hi
 801a6c0:	2200      	movhi	r2, #0
 801a6c2:	4413      	add	r3, r2
 801a6c4:	1a18      	subs	r0, r3, r0
 801a6c6:	b003      	add	sp, #12
 801a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a6d2:	e7ed      	b.n	801a6b0 <__exponent+0x4c>
 801a6d4:	2330      	movs	r3, #48	; 0x30
 801a6d6:	3130      	adds	r1, #48	; 0x30
 801a6d8:	7083      	strb	r3, [r0, #2]
 801a6da:	70c1      	strb	r1, [r0, #3]
 801a6dc:	1d03      	adds	r3, r0, #4
 801a6de:	e7f1      	b.n	801a6c4 <__exponent+0x60>

0801a6e0 <_printf_float>:
 801a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e4:	ed2d 8b02 	vpush	{d8}
 801a6e8:	b08d      	sub	sp, #52	; 0x34
 801a6ea:	460c      	mov	r4, r1
 801a6ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a6f0:	4616      	mov	r6, r2
 801a6f2:	461f      	mov	r7, r3
 801a6f4:	4605      	mov	r5, r0
 801a6f6:	f003 fb07 	bl	801dd08 <_localeconv_r>
 801a6fa:	f8d0 a000 	ldr.w	sl, [r0]
 801a6fe:	4650      	mov	r0, sl
 801a700:	f7e5 fd76 	bl	80001f0 <strlen>
 801a704:	2300      	movs	r3, #0
 801a706:	930a      	str	r3, [sp, #40]	; 0x28
 801a708:	6823      	ldr	r3, [r4, #0]
 801a70a:	9305      	str	r3, [sp, #20]
 801a70c:	f8d8 3000 	ldr.w	r3, [r8]
 801a710:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a714:	3307      	adds	r3, #7
 801a716:	f023 0307 	bic.w	r3, r3, #7
 801a71a:	f103 0208 	add.w	r2, r3, #8
 801a71e:	f8c8 2000 	str.w	r2, [r8]
 801a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a72a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a732:	9307      	str	r3, [sp, #28]
 801a734:	f8cd 8018 	str.w	r8, [sp, #24]
 801a738:	ee08 0a10 	vmov	s16, r0
 801a73c:	4b9f      	ldr	r3, [pc, #636]	; (801a9bc <_printf_float+0x2dc>)
 801a73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a742:	f04f 32ff 	mov.w	r2, #4294967295
 801a746:	f7e6 fa01 	bl	8000b4c <__aeabi_dcmpun>
 801a74a:	bb88      	cbnz	r0, 801a7b0 <_printf_float+0xd0>
 801a74c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a750:	4b9a      	ldr	r3, [pc, #616]	; (801a9bc <_printf_float+0x2dc>)
 801a752:	f04f 32ff 	mov.w	r2, #4294967295
 801a756:	f7e6 f9db 	bl	8000b10 <__aeabi_dcmple>
 801a75a:	bb48      	cbnz	r0, 801a7b0 <_printf_float+0xd0>
 801a75c:	2200      	movs	r2, #0
 801a75e:	2300      	movs	r3, #0
 801a760:	4640      	mov	r0, r8
 801a762:	4649      	mov	r1, r9
 801a764:	f7e6 f9ca 	bl	8000afc <__aeabi_dcmplt>
 801a768:	b110      	cbz	r0, 801a770 <_printf_float+0x90>
 801a76a:	232d      	movs	r3, #45	; 0x2d
 801a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a770:	4b93      	ldr	r3, [pc, #588]	; (801a9c0 <_printf_float+0x2e0>)
 801a772:	4894      	ldr	r0, [pc, #592]	; (801a9c4 <_printf_float+0x2e4>)
 801a774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a778:	bf94      	ite	ls
 801a77a:	4698      	movls	r8, r3
 801a77c:	4680      	movhi	r8, r0
 801a77e:	2303      	movs	r3, #3
 801a780:	6123      	str	r3, [r4, #16]
 801a782:	9b05      	ldr	r3, [sp, #20]
 801a784:	f023 0204 	bic.w	r2, r3, #4
 801a788:	6022      	str	r2, [r4, #0]
 801a78a:	f04f 0900 	mov.w	r9, #0
 801a78e:	9700      	str	r7, [sp, #0]
 801a790:	4633      	mov	r3, r6
 801a792:	aa0b      	add	r2, sp, #44	; 0x2c
 801a794:	4621      	mov	r1, r4
 801a796:	4628      	mov	r0, r5
 801a798:	f000 f9d8 	bl	801ab4c <_printf_common>
 801a79c:	3001      	adds	r0, #1
 801a79e:	f040 8090 	bne.w	801a8c2 <_printf_float+0x1e2>
 801a7a2:	f04f 30ff 	mov.w	r0, #4294967295
 801a7a6:	b00d      	add	sp, #52	; 0x34
 801a7a8:	ecbd 8b02 	vpop	{d8}
 801a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b0:	4642      	mov	r2, r8
 801a7b2:	464b      	mov	r3, r9
 801a7b4:	4640      	mov	r0, r8
 801a7b6:	4649      	mov	r1, r9
 801a7b8:	f7e6 f9c8 	bl	8000b4c <__aeabi_dcmpun>
 801a7bc:	b140      	cbz	r0, 801a7d0 <_printf_float+0xf0>
 801a7be:	464b      	mov	r3, r9
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	bfbc      	itt	lt
 801a7c4:	232d      	movlt	r3, #45	; 0x2d
 801a7c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a7ca:	487f      	ldr	r0, [pc, #508]	; (801a9c8 <_printf_float+0x2e8>)
 801a7cc:	4b7f      	ldr	r3, [pc, #508]	; (801a9cc <_printf_float+0x2ec>)
 801a7ce:	e7d1      	b.n	801a774 <_printf_float+0x94>
 801a7d0:	6863      	ldr	r3, [r4, #4]
 801a7d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a7d6:	9206      	str	r2, [sp, #24]
 801a7d8:	1c5a      	adds	r2, r3, #1
 801a7da:	d13f      	bne.n	801a85c <_printf_float+0x17c>
 801a7dc:	2306      	movs	r3, #6
 801a7de:	6063      	str	r3, [r4, #4]
 801a7e0:	9b05      	ldr	r3, [sp, #20]
 801a7e2:	6861      	ldr	r1, [r4, #4]
 801a7e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	9303      	str	r3, [sp, #12]
 801a7ec:	ab0a      	add	r3, sp, #40	; 0x28
 801a7ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a7f2:	ab09      	add	r3, sp, #36	; 0x24
 801a7f4:	ec49 8b10 	vmov	d0, r8, r9
 801a7f8:	9300      	str	r3, [sp, #0]
 801a7fa:	6022      	str	r2, [r4, #0]
 801a7fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a800:	4628      	mov	r0, r5
 801a802:	f7ff fecd 	bl	801a5a0 <__cvt>
 801a806:	9b06      	ldr	r3, [sp, #24]
 801a808:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a80a:	2b47      	cmp	r3, #71	; 0x47
 801a80c:	4680      	mov	r8, r0
 801a80e:	d108      	bne.n	801a822 <_printf_float+0x142>
 801a810:	1cc8      	adds	r0, r1, #3
 801a812:	db02      	blt.n	801a81a <_printf_float+0x13a>
 801a814:	6863      	ldr	r3, [r4, #4]
 801a816:	4299      	cmp	r1, r3
 801a818:	dd41      	ble.n	801a89e <_printf_float+0x1be>
 801a81a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a81e:	fa5f fb8b 	uxtb.w	fp, fp
 801a822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a826:	d820      	bhi.n	801a86a <_printf_float+0x18a>
 801a828:	3901      	subs	r1, #1
 801a82a:	465a      	mov	r2, fp
 801a82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a830:	9109      	str	r1, [sp, #36]	; 0x24
 801a832:	f7ff ff17 	bl	801a664 <__exponent>
 801a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a838:	1813      	adds	r3, r2, r0
 801a83a:	2a01      	cmp	r2, #1
 801a83c:	4681      	mov	r9, r0
 801a83e:	6123      	str	r3, [r4, #16]
 801a840:	dc02      	bgt.n	801a848 <_printf_float+0x168>
 801a842:	6822      	ldr	r2, [r4, #0]
 801a844:	07d2      	lsls	r2, r2, #31
 801a846:	d501      	bpl.n	801a84c <_printf_float+0x16c>
 801a848:	3301      	adds	r3, #1
 801a84a:	6123      	str	r3, [r4, #16]
 801a84c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a850:	2b00      	cmp	r3, #0
 801a852:	d09c      	beq.n	801a78e <_printf_float+0xae>
 801a854:	232d      	movs	r3, #45	; 0x2d
 801a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a85a:	e798      	b.n	801a78e <_printf_float+0xae>
 801a85c:	9a06      	ldr	r2, [sp, #24]
 801a85e:	2a47      	cmp	r2, #71	; 0x47
 801a860:	d1be      	bne.n	801a7e0 <_printf_float+0x100>
 801a862:	2b00      	cmp	r3, #0
 801a864:	d1bc      	bne.n	801a7e0 <_printf_float+0x100>
 801a866:	2301      	movs	r3, #1
 801a868:	e7b9      	b.n	801a7de <_printf_float+0xfe>
 801a86a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a86e:	d118      	bne.n	801a8a2 <_printf_float+0x1c2>
 801a870:	2900      	cmp	r1, #0
 801a872:	6863      	ldr	r3, [r4, #4]
 801a874:	dd0b      	ble.n	801a88e <_printf_float+0x1ae>
 801a876:	6121      	str	r1, [r4, #16]
 801a878:	b913      	cbnz	r3, 801a880 <_printf_float+0x1a0>
 801a87a:	6822      	ldr	r2, [r4, #0]
 801a87c:	07d0      	lsls	r0, r2, #31
 801a87e:	d502      	bpl.n	801a886 <_printf_float+0x1a6>
 801a880:	3301      	adds	r3, #1
 801a882:	440b      	add	r3, r1
 801a884:	6123      	str	r3, [r4, #16]
 801a886:	65a1      	str	r1, [r4, #88]	; 0x58
 801a888:	f04f 0900 	mov.w	r9, #0
 801a88c:	e7de      	b.n	801a84c <_printf_float+0x16c>
 801a88e:	b913      	cbnz	r3, 801a896 <_printf_float+0x1b6>
 801a890:	6822      	ldr	r2, [r4, #0]
 801a892:	07d2      	lsls	r2, r2, #31
 801a894:	d501      	bpl.n	801a89a <_printf_float+0x1ba>
 801a896:	3302      	adds	r3, #2
 801a898:	e7f4      	b.n	801a884 <_printf_float+0x1a4>
 801a89a:	2301      	movs	r3, #1
 801a89c:	e7f2      	b.n	801a884 <_printf_float+0x1a4>
 801a89e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8a4:	4299      	cmp	r1, r3
 801a8a6:	db05      	blt.n	801a8b4 <_printf_float+0x1d4>
 801a8a8:	6823      	ldr	r3, [r4, #0]
 801a8aa:	6121      	str	r1, [r4, #16]
 801a8ac:	07d8      	lsls	r0, r3, #31
 801a8ae:	d5ea      	bpl.n	801a886 <_printf_float+0x1a6>
 801a8b0:	1c4b      	adds	r3, r1, #1
 801a8b2:	e7e7      	b.n	801a884 <_printf_float+0x1a4>
 801a8b4:	2900      	cmp	r1, #0
 801a8b6:	bfd4      	ite	le
 801a8b8:	f1c1 0202 	rsble	r2, r1, #2
 801a8bc:	2201      	movgt	r2, #1
 801a8be:	4413      	add	r3, r2
 801a8c0:	e7e0      	b.n	801a884 <_printf_float+0x1a4>
 801a8c2:	6823      	ldr	r3, [r4, #0]
 801a8c4:	055a      	lsls	r2, r3, #21
 801a8c6:	d407      	bmi.n	801a8d8 <_printf_float+0x1f8>
 801a8c8:	6923      	ldr	r3, [r4, #16]
 801a8ca:	4642      	mov	r2, r8
 801a8cc:	4631      	mov	r1, r6
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	47b8      	blx	r7
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	d12c      	bne.n	801a930 <_printf_float+0x250>
 801a8d6:	e764      	b.n	801a7a2 <_printf_float+0xc2>
 801a8d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a8dc:	f240 80e0 	bls.w	801aaa0 <_printf_float+0x3c0>
 801a8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	f7e6 f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	d034      	beq.n	801a95a <_printf_float+0x27a>
 801a8f0:	4a37      	ldr	r2, [pc, #220]	; (801a9d0 <_printf_float+0x2f0>)
 801a8f2:	2301      	movs	r3, #1
 801a8f4:	4631      	mov	r1, r6
 801a8f6:	4628      	mov	r0, r5
 801a8f8:	47b8      	blx	r7
 801a8fa:	3001      	adds	r0, #1
 801a8fc:	f43f af51 	beq.w	801a7a2 <_printf_float+0xc2>
 801a900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a904:	429a      	cmp	r2, r3
 801a906:	db02      	blt.n	801a90e <_printf_float+0x22e>
 801a908:	6823      	ldr	r3, [r4, #0]
 801a90a:	07d8      	lsls	r0, r3, #31
 801a90c:	d510      	bpl.n	801a930 <_printf_float+0x250>
 801a90e:	ee18 3a10 	vmov	r3, s16
 801a912:	4652      	mov	r2, sl
 801a914:	4631      	mov	r1, r6
 801a916:	4628      	mov	r0, r5
 801a918:	47b8      	blx	r7
 801a91a:	3001      	adds	r0, #1
 801a91c:	f43f af41 	beq.w	801a7a2 <_printf_float+0xc2>
 801a920:	f04f 0800 	mov.w	r8, #0
 801a924:	f104 091a 	add.w	r9, r4, #26
 801a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a92a:	3b01      	subs	r3, #1
 801a92c:	4543      	cmp	r3, r8
 801a92e:	dc09      	bgt.n	801a944 <_printf_float+0x264>
 801a930:	6823      	ldr	r3, [r4, #0]
 801a932:	079b      	lsls	r3, r3, #30
 801a934:	f100 8105 	bmi.w	801ab42 <_printf_float+0x462>
 801a938:	68e0      	ldr	r0, [r4, #12]
 801a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a93c:	4298      	cmp	r0, r3
 801a93e:	bfb8      	it	lt
 801a940:	4618      	movlt	r0, r3
 801a942:	e730      	b.n	801a7a6 <_printf_float+0xc6>
 801a944:	2301      	movs	r3, #1
 801a946:	464a      	mov	r2, r9
 801a948:	4631      	mov	r1, r6
 801a94a:	4628      	mov	r0, r5
 801a94c:	47b8      	blx	r7
 801a94e:	3001      	adds	r0, #1
 801a950:	f43f af27 	beq.w	801a7a2 <_printf_float+0xc2>
 801a954:	f108 0801 	add.w	r8, r8, #1
 801a958:	e7e6      	b.n	801a928 <_printf_float+0x248>
 801a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	dc39      	bgt.n	801a9d4 <_printf_float+0x2f4>
 801a960:	4a1b      	ldr	r2, [pc, #108]	; (801a9d0 <_printf_float+0x2f0>)
 801a962:	2301      	movs	r3, #1
 801a964:	4631      	mov	r1, r6
 801a966:	4628      	mov	r0, r5
 801a968:	47b8      	blx	r7
 801a96a:	3001      	adds	r0, #1
 801a96c:	f43f af19 	beq.w	801a7a2 <_printf_float+0xc2>
 801a970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a974:	4313      	orrs	r3, r2
 801a976:	d102      	bne.n	801a97e <_printf_float+0x29e>
 801a978:	6823      	ldr	r3, [r4, #0]
 801a97a:	07d9      	lsls	r1, r3, #31
 801a97c:	d5d8      	bpl.n	801a930 <_printf_float+0x250>
 801a97e:	ee18 3a10 	vmov	r3, s16
 801a982:	4652      	mov	r2, sl
 801a984:	4631      	mov	r1, r6
 801a986:	4628      	mov	r0, r5
 801a988:	47b8      	blx	r7
 801a98a:	3001      	adds	r0, #1
 801a98c:	f43f af09 	beq.w	801a7a2 <_printf_float+0xc2>
 801a990:	f04f 0900 	mov.w	r9, #0
 801a994:	f104 0a1a 	add.w	sl, r4, #26
 801a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a99a:	425b      	negs	r3, r3
 801a99c:	454b      	cmp	r3, r9
 801a99e:	dc01      	bgt.n	801a9a4 <_printf_float+0x2c4>
 801a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9a2:	e792      	b.n	801a8ca <_printf_float+0x1ea>
 801a9a4:	2301      	movs	r3, #1
 801a9a6:	4652      	mov	r2, sl
 801a9a8:	4631      	mov	r1, r6
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	47b8      	blx	r7
 801a9ae:	3001      	adds	r0, #1
 801a9b0:	f43f aef7 	beq.w	801a7a2 <_printf_float+0xc2>
 801a9b4:	f109 0901 	add.w	r9, r9, #1
 801a9b8:	e7ee      	b.n	801a998 <_printf_float+0x2b8>
 801a9ba:	bf00      	nop
 801a9bc:	7fefffff 	.word	0x7fefffff
 801a9c0:	08021480 	.word	0x08021480
 801a9c4:	08021484 	.word	0x08021484
 801a9c8:	0802148c 	.word	0x0802148c
 801a9cc:	08021488 	.word	0x08021488
 801a9d0:	080217c9 	.word	0x080217c9
 801a9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a9d8:	429a      	cmp	r2, r3
 801a9da:	bfa8      	it	ge
 801a9dc:	461a      	movge	r2, r3
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	4691      	mov	r9, r2
 801a9e2:	dc37      	bgt.n	801aa54 <_printf_float+0x374>
 801a9e4:	f04f 0b00 	mov.w	fp, #0
 801a9e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a9ec:	f104 021a 	add.w	r2, r4, #26
 801a9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a9f2:	9305      	str	r3, [sp, #20]
 801a9f4:	eba3 0309 	sub.w	r3, r3, r9
 801a9f8:	455b      	cmp	r3, fp
 801a9fa:	dc33      	bgt.n	801aa64 <_printf_float+0x384>
 801a9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aa00:	429a      	cmp	r2, r3
 801aa02:	db3b      	blt.n	801aa7c <_printf_float+0x39c>
 801aa04:	6823      	ldr	r3, [r4, #0]
 801aa06:	07da      	lsls	r2, r3, #31
 801aa08:	d438      	bmi.n	801aa7c <_printf_float+0x39c>
 801aa0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa0c:	9b05      	ldr	r3, [sp, #20]
 801aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa10:	1ad3      	subs	r3, r2, r3
 801aa12:	eba2 0901 	sub.w	r9, r2, r1
 801aa16:	4599      	cmp	r9, r3
 801aa18:	bfa8      	it	ge
 801aa1a:	4699      	movge	r9, r3
 801aa1c:	f1b9 0f00 	cmp.w	r9, #0
 801aa20:	dc35      	bgt.n	801aa8e <_printf_float+0x3ae>
 801aa22:	f04f 0800 	mov.w	r8, #0
 801aa26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aa2a:	f104 0a1a 	add.w	sl, r4, #26
 801aa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aa32:	1a9b      	subs	r3, r3, r2
 801aa34:	eba3 0309 	sub.w	r3, r3, r9
 801aa38:	4543      	cmp	r3, r8
 801aa3a:	f77f af79 	ble.w	801a930 <_printf_float+0x250>
 801aa3e:	2301      	movs	r3, #1
 801aa40:	4652      	mov	r2, sl
 801aa42:	4631      	mov	r1, r6
 801aa44:	4628      	mov	r0, r5
 801aa46:	47b8      	blx	r7
 801aa48:	3001      	adds	r0, #1
 801aa4a:	f43f aeaa 	beq.w	801a7a2 <_printf_float+0xc2>
 801aa4e:	f108 0801 	add.w	r8, r8, #1
 801aa52:	e7ec      	b.n	801aa2e <_printf_float+0x34e>
 801aa54:	4613      	mov	r3, r2
 801aa56:	4631      	mov	r1, r6
 801aa58:	4642      	mov	r2, r8
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	47b8      	blx	r7
 801aa5e:	3001      	adds	r0, #1
 801aa60:	d1c0      	bne.n	801a9e4 <_printf_float+0x304>
 801aa62:	e69e      	b.n	801a7a2 <_printf_float+0xc2>
 801aa64:	2301      	movs	r3, #1
 801aa66:	4631      	mov	r1, r6
 801aa68:	4628      	mov	r0, r5
 801aa6a:	9205      	str	r2, [sp, #20]
 801aa6c:	47b8      	blx	r7
 801aa6e:	3001      	adds	r0, #1
 801aa70:	f43f ae97 	beq.w	801a7a2 <_printf_float+0xc2>
 801aa74:	9a05      	ldr	r2, [sp, #20]
 801aa76:	f10b 0b01 	add.w	fp, fp, #1
 801aa7a:	e7b9      	b.n	801a9f0 <_printf_float+0x310>
 801aa7c:	ee18 3a10 	vmov	r3, s16
 801aa80:	4652      	mov	r2, sl
 801aa82:	4631      	mov	r1, r6
 801aa84:	4628      	mov	r0, r5
 801aa86:	47b8      	blx	r7
 801aa88:	3001      	adds	r0, #1
 801aa8a:	d1be      	bne.n	801aa0a <_printf_float+0x32a>
 801aa8c:	e689      	b.n	801a7a2 <_printf_float+0xc2>
 801aa8e:	9a05      	ldr	r2, [sp, #20]
 801aa90:	464b      	mov	r3, r9
 801aa92:	4442      	add	r2, r8
 801aa94:	4631      	mov	r1, r6
 801aa96:	4628      	mov	r0, r5
 801aa98:	47b8      	blx	r7
 801aa9a:	3001      	adds	r0, #1
 801aa9c:	d1c1      	bne.n	801aa22 <_printf_float+0x342>
 801aa9e:	e680      	b.n	801a7a2 <_printf_float+0xc2>
 801aaa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aaa2:	2a01      	cmp	r2, #1
 801aaa4:	dc01      	bgt.n	801aaaa <_printf_float+0x3ca>
 801aaa6:	07db      	lsls	r3, r3, #31
 801aaa8:	d538      	bpl.n	801ab1c <_printf_float+0x43c>
 801aaaa:	2301      	movs	r3, #1
 801aaac:	4642      	mov	r2, r8
 801aaae:	4631      	mov	r1, r6
 801aab0:	4628      	mov	r0, r5
 801aab2:	47b8      	blx	r7
 801aab4:	3001      	adds	r0, #1
 801aab6:	f43f ae74 	beq.w	801a7a2 <_printf_float+0xc2>
 801aaba:	ee18 3a10 	vmov	r3, s16
 801aabe:	4652      	mov	r2, sl
 801aac0:	4631      	mov	r1, r6
 801aac2:	4628      	mov	r0, r5
 801aac4:	47b8      	blx	r7
 801aac6:	3001      	adds	r0, #1
 801aac8:	f43f ae6b 	beq.w	801a7a2 <_printf_float+0xc2>
 801aacc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aad0:	2200      	movs	r2, #0
 801aad2:	2300      	movs	r3, #0
 801aad4:	f7e6 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 801aad8:	b9d8      	cbnz	r0, 801ab12 <_printf_float+0x432>
 801aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aadc:	f108 0201 	add.w	r2, r8, #1
 801aae0:	3b01      	subs	r3, #1
 801aae2:	4631      	mov	r1, r6
 801aae4:	4628      	mov	r0, r5
 801aae6:	47b8      	blx	r7
 801aae8:	3001      	adds	r0, #1
 801aaea:	d10e      	bne.n	801ab0a <_printf_float+0x42a>
 801aaec:	e659      	b.n	801a7a2 <_printf_float+0xc2>
 801aaee:	2301      	movs	r3, #1
 801aaf0:	4652      	mov	r2, sl
 801aaf2:	4631      	mov	r1, r6
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	47b8      	blx	r7
 801aaf8:	3001      	adds	r0, #1
 801aafa:	f43f ae52 	beq.w	801a7a2 <_printf_float+0xc2>
 801aafe:	f108 0801 	add.w	r8, r8, #1
 801ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab04:	3b01      	subs	r3, #1
 801ab06:	4543      	cmp	r3, r8
 801ab08:	dcf1      	bgt.n	801aaee <_printf_float+0x40e>
 801ab0a:	464b      	mov	r3, r9
 801ab0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ab10:	e6dc      	b.n	801a8cc <_printf_float+0x1ec>
 801ab12:	f04f 0800 	mov.w	r8, #0
 801ab16:	f104 0a1a 	add.w	sl, r4, #26
 801ab1a:	e7f2      	b.n	801ab02 <_printf_float+0x422>
 801ab1c:	2301      	movs	r3, #1
 801ab1e:	4642      	mov	r2, r8
 801ab20:	e7df      	b.n	801aae2 <_printf_float+0x402>
 801ab22:	2301      	movs	r3, #1
 801ab24:	464a      	mov	r2, r9
 801ab26:	4631      	mov	r1, r6
 801ab28:	4628      	mov	r0, r5
 801ab2a:	47b8      	blx	r7
 801ab2c:	3001      	adds	r0, #1
 801ab2e:	f43f ae38 	beq.w	801a7a2 <_printf_float+0xc2>
 801ab32:	f108 0801 	add.w	r8, r8, #1
 801ab36:	68e3      	ldr	r3, [r4, #12]
 801ab38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ab3a:	1a5b      	subs	r3, r3, r1
 801ab3c:	4543      	cmp	r3, r8
 801ab3e:	dcf0      	bgt.n	801ab22 <_printf_float+0x442>
 801ab40:	e6fa      	b.n	801a938 <_printf_float+0x258>
 801ab42:	f04f 0800 	mov.w	r8, #0
 801ab46:	f104 0919 	add.w	r9, r4, #25
 801ab4a:	e7f4      	b.n	801ab36 <_printf_float+0x456>

0801ab4c <_printf_common>:
 801ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab50:	4616      	mov	r6, r2
 801ab52:	4699      	mov	r9, r3
 801ab54:	688a      	ldr	r2, [r1, #8]
 801ab56:	690b      	ldr	r3, [r1, #16]
 801ab58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	bfb8      	it	lt
 801ab60:	4613      	movlt	r3, r2
 801ab62:	6033      	str	r3, [r6, #0]
 801ab64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab68:	4607      	mov	r7, r0
 801ab6a:	460c      	mov	r4, r1
 801ab6c:	b10a      	cbz	r2, 801ab72 <_printf_common+0x26>
 801ab6e:	3301      	adds	r3, #1
 801ab70:	6033      	str	r3, [r6, #0]
 801ab72:	6823      	ldr	r3, [r4, #0]
 801ab74:	0699      	lsls	r1, r3, #26
 801ab76:	bf42      	ittt	mi
 801ab78:	6833      	ldrmi	r3, [r6, #0]
 801ab7a:	3302      	addmi	r3, #2
 801ab7c:	6033      	strmi	r3, [r6, #0]
 801ab7e:	6825      	ldr	r5, [r4, #0]
 801ab80:	f015 0506 	ands.w	r5, r5, #6
 801ab84:	d106      	bne.n	801ab94 <_printf_common+0x48>
 801ab86:	f104 0a19 	add.w	sl, r4, #25
 801ab8a:	68e3      	ldr	r3, [r4, #12]
 801ab8c:	6832      	ldr	r2, [r6, #0]
 801ab8e:	1a9b      	subs	r3, r3, r2
 801ab90:	42ab      	cmp	r3, r5
 801ab92:	dc26      	bgt.n	801abe2 <_printf_common+0x96>
 801ab94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ab98:	1e13      	subs	r3, r2, #0
 801ab9a:	6822      	ldr	r2, [r4, #0]
 801ab9c:	bf18      	it	ne
 801ab9e:	2301      	movne	r3, #1
 801aba0:	0692      	lsls	r2, r2, #26
 801aba2:	d42b      	bmi.n	801abfc <_printf_common+0xb0>
 801aba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aba8:	4649      	mov	r1, r9
 801abaa:	4638      	mov	r0, r7
 801abac:	47c0      	blx	r8
 801abae:	3001      	adds	r0, #1
 801abb0:	d01e      	beq.n	801abf0 <_printf_common+0xa4>
 801abb2:	6823      	ldr	r3, [r4, #0]
 801abb4:	68e5      	ldr	r5, [r4, #12]
 801abb6:	6832      	ldr	r2, [r6, #0]
 801abb8:	f003 0306 	and.w	r3, r3, #6
 801abbc:	2b04      	cmp	r3, #4
 801abbe:	bf08      	it	eq
 801abc0:	1aad      	subeq	r5, r5, r2
 801abc2:	68a3      	ldr	r3, [r4, #8]
 801abc4:	6922      	ldr	r2, [r4, #16]
 801abc6:	bf0c      	ite	eq
 801abc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abcc:	2500      	movne	r5, #0
 801abce:	4293      	cmp	r3, r2
 801abd0:	bfc4      	itt	gt
 801abd2:	1a9b      	subgt	r3, r3, r2
 801abd4:	18ed      	addgt	r5, r5, r3
 801abd6:	2600      	movs	r6, #0
 801abd8:	341a      	adds	r4, #26
 801abda:	42b5      	cmp	r5, r6
 801abdc:	d11a      	bne.n	801ac14 <_printf_common+0xc8>
 801abde:	2000      	movs	r0, #0
 801abe0:	e008      	b.n	801abf4 <_printf_common+0xa8>
 801abe2:	2301      	movs	r3, #1
 801abe4:	4652      	mov	r2, sl
 801abe6:	4649      	mov	r1, r9
 801abe8:	4638      	mov	r0, r7
 801abea:	47c0      	blx	r8
 801abec:	3001      	adds	r0, #1
 801abee:	d103      	bne.n	801abf8 <_printf_common+0xac>
 801abf0:	f04f 30ff 	mov.w	r0, #4294967295
 801abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abf8:	3501      	adds	r5, #1
 801abfa:	e7c6      	b.n	801ab8a <_printf_common+0x3e>
 801abfc:	18e1      	adds	r1, r4, r3
 801abfe:	1c5a      	adds	r2, r3, #1
 801ac00:	2030      	movs	r0, #48	; 0x30
 801ac02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ac06:	4422      	add	r2, r4
 801ac08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ac0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ac10:	3302      	adds	r3, #2
 801ac12:	e7c7      	b.n	801aba4 <_printf_common+0x58>
 801ac14:	2301      	movs	r3, #1
 801ac16:	4622      	mov	r2, r4
 801ac18:	4649      	mov	r1, r9
 801ac1a:	4638      	mov	r0, r7
 801ac1c:	47c0      	blx	r8
 801ac1e:	3001      	adds	r0, #1
 801ac20:	d0e6      	beq.n	801abf0 <_printf_common+0xa4>
 801ac22:	3601      	adds	r6, #1
 801ac24:	e7d9      	b.n	801abda <_printf_common+0x8e>
	...

0801ac28 <_printf_i>:
 801ac28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac2c:	460c      	mov	r4, r1
 801ac2e:	4691      	mov	r9, r2
 801ac30:	7e27      	ldrb	r7, [r4, #24]
 801ac32:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ac34:	2f78      	cmp	r7, #120	; 0x78
 801ac36:	4680      	mov	r8, r0
 801ac38:	469a      	mov	sl, r3
 801ac3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac3e:	d807      	bhi.n	801ac50 <_printf_i+0x28>
 801ac40:	2f62      	cmp	r7, #98	; 0x62
 801ac42:	d80a      	bhi.n	801ac5a <_printf_i+0x32>
 801ac44:	2f00      	cmp	r7, #0
 801ac46:	f000 80d8 	beq.w	801adfa <_printf_i+0x1d2>
 801ac4a:	2f58      	cmp	r7, #88	; 0x58
 801ac4c:	f000 80a3 	beq.w	801ad96 <_printf_i+0x16e>
 801ac50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ac54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ac58:	e03a      	b.n	801acd0 <_printf_i+0xa8>
 801ac5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ac5e:	2b15      	cmp	r3, #21
 801ac60:	d8f6      	bhi.n	801ac50 <_printf_i+0x28>
 801ac62:	a001      	add	r0, pc, #4	; (adr r0, 801ac68 <_printf_i+0x40>)
 801ac64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ac68:	0801acc1 	.word	0x0801acc1
 801ac6c:	0801acd5 	.word	0x0801acd5
 801ac70:	0801ac51 	.word	0x0801ac51
 801ac74:	0801ac51 	.word	0x0801ac51
 801ac78:	0801ac51 	.word	0x0801ac51
 801ac7c:	0801ac51 	.word	0x0801ac51
 801ac80:	0801acd5 	.word	0x0801acd5
 801ac84:	0801ac51 	.word	0x0801ac51
 801ac88:	0801ac51 	.word	0x0801ac51
 801ac8c:	0801ac51 	.word	0x0801ac51
 801ac90:	0801ac51 	.word	0x0801ac51
 801ac94:	0801ade1 	.word	0x0801ade1
 801ac98:	0801ad05 	.word	0x0801ad05
 801ac9c:	0801adc3 	.word	0x0801adc3
 801aca0:	0801ac51 	.word	0x0801ac51
 801aca4:	0801ac51 	.word	0x0801ac51
 801aca8:	0801ae03 	.word	0x0801ae03
 801acac:	0801ac51 	.word	0x0801ac51
 801acb0:	0801ad05 	.word	0x0801ad05
 801acb4:	0801ac51 	.word	0x0801ac51
 801acb8:	0801ac51 	.word	0x0801ac51
 801acbc:	0801adcb 	.word	0x0801adcb
 801acc0:	680b      	ldr	r3, [r1, #0]
 801acc2:	1d1a      	adds	r2, r3, #4
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	600a      	str	r2, [r1, #0]
 801acc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801accc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801acd0:	2301      	movs	r3, #1
 801acd2:	e0a3      	b.n	801ae1c <_printf_i+0x1f4>
 801acd4:	6825      	ldr	r5, [r4, #0]
 801acd6:	6808      	ldr	r0, [r1, #0]
 801acd8:	062e      	lsls	r6, r5, #24
 801acda:	f100 0304 	add.w	r3, r0, #4
 801acde:	d50a      	bpl.n	801acf6 <_printf_i+0xce>
 801ace0:	6805      	ldr	r5, [r0, #0]
 801ace2:	600b      	str	r3, [r1, #0]
 801ace4:	2d00      	cmp	r5, #0
 801ace6:	da03      	bge.n	801acf0 <_printf_i+0xc8>
 801ace8:	232d      	movs	r3, #45	; 0x2d
 801acea:	426d      	negs	r5, r5
 801acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acf0:	485e      	ldr	r0, [pc, #376]	; (801ae6c <_printf_i+0x244>)
 801acf2:	230a      	movs	r3, #10
 801acf4:	e019      	b.n	801ad2a <_printf_i+0x102>
 801acf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801acfa:	6805      	ldr	r5, [r0, #0]
 801acfc:	600b      	str	r3, [r1, #0]
 801acfe:	bf18      	it	ne
 801ad00:	b22d      	sxthne	r5, r5
 801ad02:	e7ef      	b.n	801ace4 <_printf_i+0xbc>
 801ad04:	680b      	ldr	r3, [r1, #0]
 801ad06:	6825      	ldr	r5, [r4, #0]
 801ad08:	1d18      	adds	r0, r3, #4
 801ad0a:	6008      	str	r0, [r1, #0]
 801ad0c:	0628      	lsls	r0, r5, #24
 801ad0e:	d501      	bpl.n	801ad14 <_printf_i+0xec>
 801ad10:	681d      	ldr	r5, [r3, #0]
 801ad12:	e002      	b.n	801ad1a <_printf_i+0xf2>
 801ad14:	0669      	lsls	r1, r5, #25
 801ad16:	d5fb      	bpl.n	801ad10 <_printf_i+0xe8>
 801ad18:	881d      	ldrh	r5, [r3, #0]
 801ad1a:	4854      	ldr	r0, [pc, #336]	; (801ae6c <_printf_i+0x244>)
 801ad1c:	2f6f      	cmp	r7, #111	; 0x6f
 801ad1e:	bf0c      	ite	eq
 801ad20:	2308      	moveq	r3, #8
 801ad22:	230a      	movne	r3, #10
 801ad24:	2100      	movs	r1, #0
 801ad26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad2a:	6866      	ldr	r6, [r4, #4]
 801ad2c:	60a6      	str	r6, [r4, #8]
 801ad2e:	2e00      	cmp	r6, #0
 801ad30:	bfa2      	ittt	ge
 801ad32:	6821      	ldrge	r1, [r4, #0]
 801ad34:	f021 0104 	bicge.w	r1, r1, #4
 801ad38:	6021      	strge	r1, [r4, #0]
 801ad3a:	b90d      	cbnz	r5, 801ad40 <_printf_i+0x118>
 801ad3c:	2e00      	cmp	r6, #0
 801ad3e:	d04d      	beq.n	801addc <_printf_i+0x1b4>
 801ad40:	4616      	mov	r6, r2
 801ad42:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad46:	fb03 5711 	mls	r7, r3, r1, r5
 801ad4a:	5dc7      	ldrb	r7, [r0, r7]
 801ad4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad50:	462f      	mov	r7, r5
 801ad52:	42bb      	cmp	r3, r7
 801ad54:	460d      	mov	r5, r1
 801ad56:	d9f4      	bls.n	801ad42 <_printf_i+0x11a>
 801ad58:	2b08      	cmp	r3, #8
 801ad5a:	d10b      	bne.n	801ad74 <_printf_i+0x14c>
 801ad5c:	6823      	ldr	r3, [r4, #0]
 801ad5e:	07df      	lsls	r7, r3, #31
 801ad60:	d508      	bpl.n	801ad74 <_printf_i+0x14c>
 801ad62:	6923      	ldr	r3, [r4, #16]
 801ad64:	6861      	ldr	r1, [r4, #4]
 801ad66:	4299      	cmp	r1, r3
 801ad68:	bfde      	ittt	le
 801ad6a:	2330      	movle	r3, #48	; 0x30
 801ad6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad70:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ad74:	1b92      	subs	r2, r2, r6
 801ad76:	6122      	str	r2, [r4, #16]
 801ad78:	f8cd a000 	str.w	sl, [sp]
 801ad7c:	464b      	mov	r3, r9
 801ad7e:	aa03      	add	r2, sp, #12
 801ad80:	4621      	mov	r1, r4
 801ad82:	4640      	mov	r0, r8
 801ad84:	f7ff fee2 	bl	801ab4c <_printf_common>
 801ad88:	3001      	adds	r0, #1
 801ad8a:	d14c      	bne.n	801ae26 <_printf_i+0x1fe>
 801ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad90:	b004      	add	sp, #16
 801ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad96:	4835      	ldr	r0, [pc, #212]	; (801ae6c <_printf_i+0x244>)
 801ad98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	680e      	ldr	r6, [r1, #0]
 801ada0:	061f      	lsls	r7, r3, #24
 801ada2:	f856 5b04 	ldr.w	r5, [r6], #4
 801ada6:	600e      	str	r6, [r1, #0]
 801ada8:	d514      	bpl.n	801add4 <_printf_i+0x1ac>
 801adaa:	07d9      	lsls	r1, r3, #31
 801adac:	bf44      	itt	mi
 801adae:	f043 0320 	orrmi.w	r3, r3, #32
 801adb2:	6023      	strmi	r3, [r4, #0]
 801adb4:	b91d      	cbnz	r5, 801adbe <_printf_i+0x196>
 801adb6:	6823      	ldr	r3, [r4, #0]
 801adb8:	f023 0320 	bic.w	r3, r3, #32
 801adbc:	6023      	str	r3, [r4, #0]
 801adbe:	2310      	movs	r3, #16
 801adc0:	e7b0      	b.n	801ad24 <_printf_i+0xfc>
 801adc2:	6823      	ldr	r3, [r4, #0]
 801adc4:	f043 0320 	orr.w	r3, r3, #32
 801adc8:	6023      	str	r3, [r4, #0]
 801adca:	2378      	movs	r3, #120	; 0x78
 801adcc:	4828      	ldr	r0, [pc, #160]	; (801ae70 <_printf_i+0x248>)
 801adce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801add2:	e7e3      	b.n	801ad9c <_printf_i+0x174>
 801add4:	065e      	lsls	r6, r3, #25
 801add6:	bf48      	it	mi
 801add8:	b2ad      	uxthmi	r5, r5
 801adda:	e7e6      	b.n	801adaa <_printf_i+0x182>
 801addc:	4616      	mov	r6, r2
 801adde:	e7bb      	b.n	801ad58 <_printf_i+0x130>
 801ade0:	680b      	ldr	r3, [r1, #0]
 801ade2:	6826      	ldr	r6, [r4, #0]
 801ade4:	6960      	ldr	r0, [r4, #20]
 801ade6:	1d1d      	adds	r5, r3, #4
 801ade8:	600d      	str	r5, [r1, #0]
 801adea:	0635      	lsls	r5, r6, #24
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	d501      	bpl.n	801adf4 <_printf_i+0x1cc>
 801adf0:	6018      	str	r0, [r3, #0]
 801adf2:	e002      	b.n	801adfa <_printf_i+0x1d2>
 801adf4:	0671      	lsls	r1, r6, #25
 801adf6:	d5fb      	bpl.n	801adf0 <_printf_i+0x1c8>
 801adf8:	8018      	strh	r0, [r3, #0]
 801adfa:	2300      	movs	r3, #0
 801adfc:	6123      	str	r3, [r4, #16]
 801adfe:	4616      	mov	r6, r2
 801ae00:	e7ba      	b.n	801ad78 <_printf_i+0x150>
 801ae02:	680b      	ldr	r3, [r1, #0]
 801ae04:	1d1a      	adds	r2, r3, #4
 801ae06:	600a      	str	r2, [r1, #0]
 801ae08:	681e      	ldr	r6, [r3, #0]
 801ae0a:	6862      	ldr	r2, [r4, #4]
 801ae0c:	2100      	movs	r1, #0
 801ae0e:	4630      	mov	r0, r6
 801ae10:	f7e5 f9f6 	bl	8000200 <memchr>
 801ae14:	b108      	cbz	r0, 801ae1a <_printf_i+0x1f2>
 801ae16:	1b80      	subs	r0, r0, r6
 801ae18:	6060      	str	r0, [r4, #4]
 801ae1a:	6863      	ldr	r3, [r4, #4]
 801ae1c:	6123      	str	r3, [r4, #16]
 801ae1e:	2300      	movs	r3, #0
 801ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae24:	e7a8      	b.n	801ad78 <_printf_i+0x150>
 801ae26:	6923      	ldr	r3, [r4, #16]
 801ae28:	4632      	mov	r2, r6
 801ae2a:	4649      	mov	r1, r9
 801ae2c:	4640      	mov	r0, r8
 801ae2e:	47d0      	blx	sl
 801ae30:	3001      	adds	r0, #1
 801ae32:	d0ab      	beq.n	801ad8c <_printf_i+0x164>
 801ae34:	6823      	ldr	r3, [r4, #0]
 801ae36:	079b      	lsls	r3, r3, #30
 801ae38:	d413      	bmi.n	801ae62 <_printf_i+0x23a>
 801ae3a:	68e0      	ldr	r0, [r4, #12]
 801ae3c:	9b03      	ldr	r3, [sp, #12]
 801ae3e:	4298      	cmp	r0, r3
 801ae40:	bfb8      	it	lt
 801ae42:	4618      	movlt	r0, r3
 801ae44:	e7a4      	b.n	801ad90 <_printf_i+0x168>
 801ae46:	2301      	movs	r3, #1
 801ae48:	4632      	mov	r2, r6
 801ae4a:	4649      	mov	r1, r9
 801ae4c:	4640      	mov	r0, r8
 801ae4e:	47d0      	blx	sl
 801ae50:	3001      	adds	r0, #1
 801ae52:	d09b      	beq.n	801ad8c <_printf_i+0x164>
 801ae54:	3501      	adds	r5, #1
 801ae56:	68e3      	ldr	r3, [r4, #12]
 801ae58:	9903      	ldr	r1, [sp, #12]
 801ae5a:	1a5b      	subs	r3, r3, r1
 801ae5c:	42ab      	cmp	r3, r5
 801ae5e:	dcf2      	bgt.n	801ae46 <_printf_i+0x21e>
 801ae60:	e7eb      	b.n	801ae3a <_printf_i+0x212>
 801ae62:	2500      	movs	r5, #0
 801ae64:	f104 0619 	add.w	r6, r4, #25
 801ae68:	e7f5      	b.n	801ae56 <_printf_i+0x22e>
 801ae6a:	bf00      	nop
 801ae6c:	08021490 	.word	0x08021490
 801ae70:	080214a1 	.word	0x080214a1

0801ae74 <_scanf_float>:
 801ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae78:	b087      	sub	sp, #28
 801ae7a:	4617      	mov	r7, r2
 801ae7c:	9303      	str	r3, [sp, #12]
 801ae7e:	688b      	ldr	r3, [r1, #8]
 801ae80:	1e5a      	subs	r2, r3, #1
 801ae82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ae86:	bf83      	ittte	hi
 801ae88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ae8c:	195b      	addhi	r3, r3, r5
 801ae8e:	9302      	strhi	r3, [sp, #8]
 801ae90:	2300      	movls	r3, #0
 801ae92:	bf86      	itte	hi
 801ae94:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ae98:	608b      	strhi	r3, [r1, #8]
 801ae9a:	9302      	strls	r3, [sp, #8]
 801ae9c:	680b      	ldr	r3, [r1, #0]
 801ae9e:	468b      	mov	fp, r1
 801aea0:	2500      	movs	r5, #0
 801aea2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801aea6:	f84b 3b1c 	str.w	r3, [fp], #28
 801aeaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801aeae:	4680      	mov	r8, r0
 801aeb0:	460c      	mov	r4, r1
 801aeb2:	465e      	mov	r6, fp
 801aeb4:	46aa      	mov	sl, r5
 801aeb6:	46a9      	mov	r9, r5
 801aeb8:	9501      	str	r5, [sp, #4]
 801aeba:	68a2      	ldr	r2, [r4, #8]
 801aebc:	b152      	cbz	r2, 801aed4 <_scanf_float+0x60>
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	2b4e      	cmp	r3, #78	; 0x4e
 801aec4:	d864      	bhi.n	801af90 <_scanf_float+0x11c>
 801aec6:	2b40      	cmp	r3, #64	; 0x40
 801aec8:	d83c      	bhi.n	801af44 <_scanf_float+0xd0>
 801aeca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801aece:	b2c8      	uxtb	r0, r1
 801aed0:	280e      	cmp	r0, #14
 801aed2:	d93a      	bls.n	801af4a <_scanf_float+0xd6>
 801aed4:	f1b9 0f00 	cmp.w	r9, #0
 801aed8:	d003      	beq.n	801aee2 <_scanf_float+0x6e>
 801aeda:	6823      	ldr	r3, [r4, #0]
 801aedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801aee0:	6023      	str	r3, [r4, #0]
 801aee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aee6:	f1ba 0f01 	cmp.w	sl, #1
 801aeea:	f200 8113 	bhi.w	801b114 <_scanf_float+0x2a0>
 801aeee:	455e      	cmp	r6, fp
 801aef0:	f200 8105 	bhi.w	801b0fe <_scanf_float+0x28a>
 801aef4:	2501      	movs	r5, #1
 801aef6:	4628      	mov	r0, r5
 801aef8:	b007      	add	sp, #28
 801aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aefe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801af02:	2a0d      	cmp	r2, #13
 801af04:	d8e6      	bhi.n	801aed4 <_scanf_float+0x60>
 801af06:	a101      	add	r1, pc, #4	; (adr r1, 801af0c <_scanf_float+0x98>)
 801af08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801af0c:	0801b04b 	.word	0x0801b04b
 801af10:	0801aed5 	.word	0x0801aed5
 801af14:	0801aed5 	.word	0x0801aed5
 801af18:	0801aed5 	.word	0x0801aed5
 801af1c:	0801b0ab 	.word	0x0801b0ab
 801af20:	0801b083 	.word	0x0801b083
 801af24:	0801aed5 	.word	0x0801aed5
 801af28:	0801aed5 	.word	0x0801aed5
 801af2c:	0801b059 	.word	0x0801b059
 801af30:	0801aed5 	.word	0x0801aed5
 801af34:	0801aed5 	.word	0x0801aed5
 801af38:	0801aed5 	.word	0x0801aed5
 801af3c:	0801aed5 	.word	0x0801aed5
 801af40:	0801b011 	.word	0x0801b011
 801af44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801af48:	e7db      	b.n	801af02 <_scanf_float+0x8e>
 801af4a:	290e      	cmp	r1, #14
 801af4c:	d8c2      	bhi.n	801aed4 <_scanf_float+0x60>
 801af4e:	a001      	add	r0, pc, #4	; (adr r0, 801af54 <_scanf_float+0xe0>)
 801af50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801af54:	0801b003 	.word	0x0801b003
 801af58:	0801aed5 	.word	0x0801aed5
 801af5c:	0801b003 	.word	0x0801b003
 801af60:	0801b097 	.word	0x0801b097
 801af64:	0801aed5 	.word	0x0801aed5
 801af68:	0801afb1 	.word	0x0801afb1
 801af6c:	0801afed 	.word	0x0801afed
 801af70:	0801afed 	.word	0x0801afed
 801af74:	0801afed 	.word	0x0801afed
 801af78:	0801afed 	.word	0x0801afed
 801af7c:	0801afed 	.word	0x0801afed
 801af80:	0801afed 	.word	0x0801afed
 801af84:	0801afed 	.word	0x0801afed
 801af88:	0801afed 	.word	0x0801afed
 801af8c:	0801afed 	.word	0x0801afed
 801af90:	2b6e      	cmp	r3, #110	; 0x6e
 801af92:	d809      	bhi.n	801afa8 <_scanf_float+0x134>
 801af94:	2b60      	cmp	r3, #96	; 0x60
 801af96:	d8b2      	bhi.n	801aefe <_scanf_float+0x8a>
 801af98:	2b54      	cmp	r3, #84	; 0x54
 801af9a:	d077      	beq.n	801b08c <_scanf_float+0x218>
 801af9c:	2b59      	cmp	r3, #89	; 0x59
 801af9e:	d199      	bne.n	801aed4 <_scanf_float+0x60>
 801afa0:	2d07      	cmp	r5, #7
 801afa2:	d197      	bne.n	801aed4 <_scanf_float+0x60>
 801afa4:	2508      	movs	r5, #8
 801afa6:	e029      	b.n	801affc <_scanf_float+0x188>
 801afa8:	2b74      	cmp	r3, #116	; 0x74
 801afaa:	d06f      	beq.n	801b08c <_scanf_float+0x218>
 801afac:	2b79      	cmp	r3, #121	; 0x79
 801afae:	e7f6      	b.n	801af9e <_scanf_float+0x12a>
 801afb0:	6821      	ldr	r1, [r4, #0]
 801afb2:	05c8      	lsls	r0, r1, #23
 801afb4:	d51a      	bpl.n	801afec <_scanf_float+0x178>
 801afb6:	9b02      	ldr	r3, [sp, #8]
 801afb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801afbc:	6021      	str	r1, [r4, #0]
 801afbe:	f109 0901 	add.w	r9, r9, #1
 801afc2:	b11b      	cbz	r3, 801afcc <_scanf_float+0x158>
 801afc4:	3b01      	subs	r3, #1
 801afc6:	3201      	adds	r2, #1
 801afc8:	9302      	str	r3, [sp, #8]
 801afca:	60a2      	str	r2, [r4, #8]
 801afcc:	68a3      	ldr	r3, [r4, #8]
 801afce:	3b01      	subs	r3, #1
 801afd0:	60a3      	str	r3, [r4, #8]
 801afd2:	6923      	ldr	r3, [r4, #16]
 801afd4:	3301      	adds	r3, #1
 801afd6:	6123      	str	r3, [r4, #16]
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	3b01      	subs	r3, #1
 801afdc:	2b00      	cmp	r3, #0
 801afde:	607b      	str	r3, [r7, #4]
 801afe0:	f340 8084 	ble.w	801b0ec <_scanf_float+0x278>
 801afe4:	683b      	ldr	r3, [r7, #0]
 801afe6:	3301      	adds	r3, #1
 801afe8:	603b      	str	r3, [r7, #0]
 801afea:	e766      	b.n	801aeba <_scanf_float+0x46>
 801afec:	eb1a 0f05 	cmn.w	sl, r5
 801aff0:	f47f af70 	bne.w	801aed4 <_scanf_float+0x60>
 801aff4:	6822      	ldr	r2, [r4, #0]
 801aff6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801affa:	6022      	str	r2, [r4, #0]
 801affc:	f806 3b01 	strb.w	r3, [r6], #1
 801b000:	e7e4      	b.n	801afcc <_scanf_float+0x158>
 801b002:	6822      	ldr	r2, [r4, #0]
 801b004:	0610      	lsls	r0, r2, #24
 801b006:	f57f af65 	bpl.w	801aed4 <_scanf_float+0x60>
 801b00a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b00e:	e7f4      	b.n	801affa <_scanf_float+0x186>
 801b010:	f1ba 0f00 	cmp.w	sl, #0
 801b014:	d10e      	bne.n	801b034 <_scanf_float+0x1c0>
 801b016:	f1b9 0f00 	cmp.w	r9, #0
 801b01a:	d10e      	bne.n	801b03a <_scanf_float+0x1c6>
 801b01c:	6822      	ldr	r2, [r4, #0]
 801b01e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b022:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b026:	d108      	bne.n	801b03a <_scanf_float+0x1c6>
 801b028:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b02c:	6022      	str	r2, [r4, #0]
 801b02e:	f04f 0a01 	mov.w	sl, #1
 801b032:	e7e3      	b.n	801affc <_scanf_float+0x188>
 801b034:	f1ba 0f02 	cmp.w	sl, #2
 801b038:	d055      	beq.n	801b0e6 <_scanf_float+0x272>
 801b03a:	2d01      	cmp	r5, #1
 801b03c:	d002      	beq.n	801b044 <_scanf_float+0x1d0>
 801b03e:	2d04      	cmp	r5, #4
 801b040:	f47f af48 	bne.w	801aed4 <_scanf_float+0x60>
 801b044:	3501      	adds	r5, #1
 801b046:	b2ed      	uxtb	r5, r5
 801b048:	e7d8      	b.n	801affc <_scanf_float+0x188>
 801b04a:	f1ba 0f01 	cmp.w	sl, #1
 801b04e:	f47f af41 	bne.w	801aed4 <_scanf_float+0x60>
 801b052:	f04f 0a02 	mov.w	sl, #2
 801b056:	e7d1      	b.n	801affc <_scanf_float+0x188>
 801b058:	b97d      	cbnz	r5, 801b07a <_scanf_float+0x206>
 801b05a:	f1b9 0f00 	cmp.w	r9, #0
 801b05e:	f47f af3c 	bne.w	801aeda <_scanf_float+0x66>
 801b062:	6822      	ldr	r2, [r4, #0]
 801b064:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b068:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b06c:	f47f af39 	bne.w	801aee2 <_scanf_float+0x6e>
 801b070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b074:	6022      	str	r2, [r4, #0]
 801b076:	2501      	movs	r5, #1
 801b078:	e7c0      	b.n	801affc <_scanf_float+0x188>
 801b07a:	2d03      	cmp	r5, #3
 801b07c:	d0e2      	beq.n	801b044 <_scanf_float+0x1d0>
 801b07e:	2d05      	cmp	r5, #5
 801b080:	e7de      	b.n	801b040 <_scanf_float+0x1cc>
 801b082:	2d02      	cmp	r5, #2
 801b084:	f47f af26 	bne.w	801aed4 <_scanf_float+0x60>
 801b088:	2503      	movs	r5, #3
 801b08a:	e7b7      	b.n	801affc <_scanf_float+0x188>
 801b08c:	2d06      	cmp	r5, #6
 801b08e:	f47f af21 	bne.w	801aed4 <_scanf_float+0x60>
 801b092:	2507      	movs	r5, #7
 801b094:	e7b2      	b.n	801affc <_scanf_float+0x188>
 801b096:	6822      	ldr	r2, [r4, #0]
 801b098:	0591      	lsls	r1, r2, #22
 801b09a:	f57f af1b 	bpl.w	801aed4 <_scanf_float+0x60>
 801b09e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b0a2:	6022      	str	r2, [r4, #0]
 801b0a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b0a8:	e7a8      	b.n	801affc <_scanf_float+0x188>
 801b0aa:	6822      	ldr	r2, [r4, #0]
 801b0ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b0b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b0b4:	d006      	beq.n	801b0c4 <_scanf_float+0x250>
 801b0b6:	0550      	lsls	r0, r2, #21
 801b0b8:	f57f af0c 	bpl.w	801aed4 <_scanf_float+0x60>
 801b0bc:	f1b9 0f00 	cmp.w	r9, #0
 801b0c0:	f43f af0f 	beq.w	801aee2 <_scanf_float+0x6e>
 801b0c4:	0591      	lsls	r1, r2, #22
 801b0c6:	bf58      	it	pl
 801b0c8:	9901      	ldrpl	r1, [sp, #4]
 801b0ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b0ce:	bf58      	it	pl
 801b0d0:	eba9 0101 	subpl.w	r1, r9, r1
 801b0d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b0d8:	bf58      	it	pl
 801b0da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b0de:	6022      	str	r2, [r4, #0]
 801b0e0:	f04f 0900 	mov.w	r9, #0
 801b0e4:	e78a      	b.n	801affc <_scanf_float+0x188>
 801b0e6:	f04f 0a03 	mov.w	sl, #3
 801b0ea:	e787      	b.n	801affc <_scanf_float+0x188>
 801b0ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b0f0:	4639      	mov	r1, r7
 801b0f2:	4640      	mov	r0, r8
 801b0f4:	4798      	blx	r3
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	f43f aedf 	beq.w	801aeba <_scanf_float+0x46>
 801b0fc:	e6ea      	b.n	801aed4 <_scanf_float+0x60>
 801b0fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b106:	463a      	mov	r2, r7
 801b108:	4640      	mov	r0, r8
 801b10a:	4798      	blx	r3
 801b10c:	6923      	ldr	r3, [r4, #16]
 801b10e:	3b01      	subs	r3, #1
 801b110:	6123      	str	r3, [r4, #16]
 801b112:	e6ec      	b.n	801aeee <_scanf_float+0x7a>
 801b114:	1e6b      	subs	r3, r5, #1
 801b116:	2b06      	cmp	r3, #6
 801b118:	d825      	bhi.n	801b166 <_scanf_float+0x2f2>
 801b11a:	2d02      	cmp	r5, #2
 801b11c:	d836      	bhi.n	801b18c <_scanf_float+0x318>
 801b11e:	455e      	cmp	r6, fp
 801b120:	f67f aee8 	bls.w	801aef4 <_scanf_float+0x80>
 801b124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b128:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b12c:	463a      	mov	r2, r7
 801b12e:	4640      	mov	r0, r8
 801b130:	4798      	blx	r3
 801b132:	6923      	ldr	r3, [r4, #16]
 801b134:	3b01      	subs	r3, #1
 801b136:	6123      	str	r3, [r4, #16]
 801b138:	e7f1      	b.n	801b11e <_scanf_float+0x2aa>
 801b13a:	9802      	ldr	r0, [sp, #8]
 801b13c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b140:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b144:	9002      	str	r0, [sp, #8]
 801b146:	463a      	mov	r2, r7
 801b148:	4640      	mov	r0, r8
 801b14a:	4798      	blx	r3
 801b14c:	6923      	ldr	r3, [r4, #16]
 801b14e:	3b01      	subs	r3, #1
 801b150:	6123      	str	r3, [r4, #16]
 801b152:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b156:	fa5f fa8a 	uxtb.w	sl, sl
 801b15a:	f1ba 0f02 	cmp.w	sl, #2
 801b15e:	d1ec      	bne.n	801b13a <_scanf_float+0x2c6>
 801b160:	3d03      	subs	r5, #3
 801b162:	b2ed      	uxtb	r5, r5
 801b164:	1b76      	subs	r6, r6, r5
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	05da      	lsls	r2, r3, #23
 801b16a:	d52f      	bpl.n	801b1cc <_scanf_float+0x358>
 801b16c:	055b      	lsls	r3, r3, #21
 801b16e:	d510      	bpl.n	801b192 <_scanf_float+0x31e>
 801b170:	455e      	cmp	r6, fp
 801b172:	f67f aebf 	bls.w	801aef4 <_scanf_float+0x80>
 801b176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b17a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b17e:	463a      	mov	r2, r7
 801b180:	4640      	mov	r0, r8
 801b182:	4798      	blx	r3
 801b184:	6923      	ldr	r3, [r4, #16]
 801b186:	3b01      	subs	r3, #1
 801b188:	6123      	str	r3, [r4, #16]
 801b18a:	e7f1      	b.n	801b170 <_scanf_float+0x2fc>
 801b18c:	46aa      	mov	sl, r5
 801b18e:	9602      	str	r6, [sp, #8]
 801b190:	e7df      	b.n	801b152 <_scanf_float+0x2de>
 801b192:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b196:	6923      	ldr	r3, [r4, #16]
 801b198:	2965      	cmp	r1, #101	; 0x65
 801b19a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b19e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b1a2:	6123      	str	r3, [r4, #16]
 801b1a4:	d00c      	beq.n	801b1c0 <_scanf_float+0x34c>
 801b1a6:	2945      	cmp	r1, #69	; 0x45
 801b1a8:	d00a      	beq.n	801b1c0 <_scanf_float+0x34c>
 801b1aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b1ae:	463a      	mov	r2, r7
 801b1b0:	4640      	mov	r0, r8
 801b1b2:	4798      	blx	r3
 801b1b4:	6923      	ldr	r3, [r4, #16]
 801b1b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b1ba:	3b01      	subs	r3, #1
 801b1bc:	1eb5      	subs	r5, r6, #2
 801b1be:	6123      	str	r3, [r4, #16]
 801b1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b1c4:	463a      	mov	r2, r7
 801b1c6:	4640      	mov	r0, r8
 801b1c8:	4798      	blx	r3
 801b1ca:	462e      	mov	r6, r5
 801b1cc:	6825      	ldr	r5, [r4, #0]
 801b1ce:	f015 0510 	ands.w	r5, r5, #16
 801b1d2:	d158      	bne.n	801b286 <_scanf_float+0x412>
 801b1d4:	7035      	strb	r5, [r6, #0]
 801b1d6:	6823      	ldr	r3, [r4, #0]
 801b1d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b1e0:	d11c      	bne.n	801b21c <_scanf_float+0x3a8>
 801b1e2:	9b01      	ldr	r3, [sp, #4]
 801b1e4:	454b      	cmp	r3, r9
 801b1e6:	eba3 0209 	sub.w	r2, r3, r9
 801b1ea:	d124      	bne.n	801b236 <_scanf_float+0x3c2>
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	4659      	mov	r1, fp
 801b1f0:	4640      	mov	r0, r8
 801b1f2:	f001 f873 	bl	801c2dc <_strtod_r>
 801b1f6:	9b03      	ldr	r3, [sp, #12]
 801b1f8:	6821      	ldr	r1, [r4, #0]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	f011 0f02 	tst.w	r1, #2
 801b200:	ec57 6b10 	vmov	r6, r7, d0
 801b204:	f103 0204 	add.w	r2, r3, #4
 801b208:	d020      	beq.n	801b24c <_scanf_float+0x3d8>
 801b20a:	9903      	ldr	r1, [sp, #12]
 801b20c:	600a      	str	r2, [r1, #0]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	e9c3 6700 	strd	r6, r7, [r3]
 801b214:	68e3      	ldr	r3, [r4, #12]
 801b216:	3301      	adds	r3, #1
 801b218:	60e3      	str	r3, [r4, #12]
 801b21a:	e66c      	b.n	801aef6 <_scanf_float+0x82>
 801b21c:	9b04      	ldr	r3, [sp, #16]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d0e4      	beq.n	801b1ec <_scanf_float+0x378>
 801b222:	9905      	ldr	r1, [sp, #20]
 801b224:	230a      	movs	r3, #10
 801b226:	462a      	mov	r2, r5
 801b228:	3101      	adds	r1, #1
 801b22a:	4640      	mov	r0, r8
 801b22c:	f001 f8e0 	bl	801c3f0 <_strtol_r>
 801b230:	9b04      	ldr	r3, [sp, #16]
 801b232:	9e05      	ldr	r6, [sp, #20]
 801b234:	1ac2      	subs	r2, r0, r3
 801b236:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b23a:	429e      	cmp	r6, r3
 801b23c:	bf28      	it	cs
 801b23e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b242:	4912      	ldr	r1, [pc, #72]	; (801b28c <_scanf_float+0x418>)
 801b244:	4630      	mov	r0, r6
 801b246:	f000 f977 	bl	801b538 <siprintf>
 801b24a:	e7cf      	b.n	801b1ec <_scanf_float+0x378>
 801b24c:	f011 0f04 	tst.w	r1, #4
 801b250:	9903      	ldr	r1, [sp, #12]
 801b252:	600a      	str	r2, [r1, #0]
 801b254:	d1db      	bne.n	801b20e <_scanf_float+0x39a>
 801b256:	f8d3 8000 	ldr.w	r8, [r3]
 801b25a:	ee10 2a10 	vmov	r2, s0
 801b25e:	ee10 0a10 	vmov	r0, s0
 801b262:	463b      	mov	r3, r7
 801b264:	4639      	mov	r1, r7
 801b266:	f7e5 fc71 	bl	8000b4c <__aeabi_dcmpun>
 801b26a:	b128      	cbz	r0, 801b278 <_scanf_float+0x404>
 801b26c:	4808      	ldr	r0, [pc, #32]	; (801b290 <_scanf_float+0x41c>)
 801b26e:	f000 f919 	bl	801b4a4 <nanf>
 801b272:	ed88 0a00 	vstr	s0, [r8]
 801b276:	e7cd      	b.n	801b214 <_scanf_float+0x3a0>
 801b278:	4630      	mov	r0, r6
 801b27a:	4639      	mov	r1, r7
 801b27c:	f7e5 fcc4 	bl	8000c08 <__aeabi_d2f>
 801b280:	f8c8 0000 	str.w	r0, [r8]
 801b284:	e7c6      	b.n	801b214 <_scanf_float+0x3a0>
 801b286:	2500      	movs	r5, #0
 801b288:	e635      	b.n	801aef6 <_scanf_float+0x82>
 801b28a:	bf00      	nop
 801b28c:	080214b2 	.word	0x080214b2
 801b290:	08021543 	.word	0x08021543

0801b294 <iprintf>:
 801b294:	b40f      	push	{r0, r1, r2, r3}
 801b296:	4b0a      	ldr	r3, [pc, #40]	; (801b2c0 <iprintf+0x2c>)
 801b298:	b513      	push	{r0, r1, r4, lr}
 801b29a:	681c      	ldr	r4, [r3, #0]
 801b29c:	b124      	cbz	r4, 801b2a8 <iprintf+0x14>
 801b29e:	69a3      	ldr	r3, [r4, #24]
 801b2a0:	b913      	cbnz	r3, 801b2a8 <iprintf+0x14>
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	f7fe ffd4 	bl	801a250 <__sinit>
 801b2a8:	ab05      	add	r3, sp, #20
 801b2aa:	9a04      	ldr	r2, [sp, #16]
 801b2ac:	68a1      	ldr	r1, [r4, #8]
 801b2ae:	9301      	str	r3, [sp, #4]
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	f003 fe09 	bl	801eec8 <_vfiprintf_r>
 801b2b6:	b002      	add	sp, #8
 801b2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2bc:	b004      	add	sp, #16
 801b2be:	4770      	bx	lr
 801b2c0:	200001f8 	.word	0x200001f8

0801b2c4 <_puts_r>:
 801b2c4:	b570      	push	{r4, r5, r6, lr}
 801b2c6:	460e      	mov	r6, r1
 801b2c8:	4605      	mov	r5, r0
 801b2ca:	b118      	cbz	r0, 801b2d4 <_puts_r+0x10>
 801b2cc:	6983      	ldr	r3, [r0, #24]
 801b2ce:	b90b      	cbnz	r3, 801b2d4 <_puts_r+0x10>
 801b2d0:	f7fe ffbe 	bl	801a250 <__sinit>
 801b2d4:	69ab      	ldr	r3, [r5, #24]
 801b2d6:	68ac      	ldr	r4, [r5, #8]
 801b2d8:	b913      	cbnz	r3, 801b2e0 <_puts_r+0x1c>
 801b2da:	4628      	mov	r0, r5
 801b2dc:	f7fe ffb8 	bl	801a250 <__sinit>
 801b2e0:	4b2c      	ldr	r3, [pc, #176]	; (801b394 <_puts_r+0xd0>)
 801b2e2:	429c      	cmp	r4, r3
 801b2e4:	d120      	bne.n	801b328 <_puts_r+0x64>
 801b2e6:	686c      	ldr	r4, [r5, #4]
 801b2e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2ea:	07db      	lsls	r3, r3, #31
 801b2ec:	d405      	bmi.n	801b2fa <_puts_r+0x36>
 801b2ee:	89a3      	ldrh	r3, [r4, #12]
 801b2f0:	0598      	lsls	r0, r3, #22
 801b2f2:	d402      	bmi.n	801b2fa <_puts_r+0x36>
 801b2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2f6:	f7ff f86e 	bl	801a3d6 <__retarget_lock_acquire_recursive>
 801b2fa:	89a3      	ldrh	r3, [r4, #12]
 801b2fc:	0719      	lsls	r1, r3, #28
 801b2fe:	d51d      	bpl.n	801b33c <_puts_r+0x78>
 801b300:	6923      	ldr	r3, [r4, #16]
 801b302:	b1db      	cbz	r3, 801b33c <_puts_r+0x78>
 801b304:	3e01      	subs	r6, #1
 801b306:	68a3      	ldr	r3, [r4, #8]
 801b308:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b30c:	3b01      	subs	r3, #1
 801b30e:	60a3      	str	r3, [r4, #8]
 801b310:	bb39      	cbnz	r1, 801b362 <_puts_r+0x9e>
 801b312:	2b00      	cmp	r3, #0
 801b314:	da38      	bge.n	801b388 <_puts_r+0xc4>
 801b316:	4622      	mov	r2, r4
 801b318:	210a      	movs	r1, #10
 801b31a:	4628      	mov	r0, r5
 801b31c:	f001 f936 	bl	801c58c <__swbuf_r>
 801b320:	3001      	adds	r0, #1
 801b322:	d011      	beq.n	801b348 <_puts_r+0x84>
 801b324:	250a      	movs	r5, #10
 801b326:	e011      	b.n	801b34c <_puts_r+0x88>
 801b328:	4b1b      	ldr	r3, [pc, #108]	; (801b398 <_puts_r+0xd4>)
 801b32a:	429c      	cmp	r4, r3
 801b32c:	d101      	bne.n	801b332 <_puts_r+0x6e>
 801b32e:	68ac      	ldr	r4, [r5, #8]
 801b330:	e7da      	b.n	801b2e8 <_puts_r+0x24>
 801b332:	4b1a      	ldr	r3, [pc, #104]	; (801b39c <_puts_r+0xd8>)
 801b334:	429c      	cmp	r4, r3
 801b336:	bf08      	it	eq
 801b338:	68ec      	ldreq	r4, [r5, #12]
 801b33a:	e7d5      	b.n	801b2e8 <_puts_r+0x24>
 801b33c:	4621      	mov	r1, r4
 801b33e:	4628      	mov	r0, r5
 801b340:	f001 f988 	bl	801c654 <__swsetup_r>
 801b344:	2800      	cmp	r0, #0
 801b346:	d0dd      	beq.n	801b304 <_puts_r+0x40>
 801b348:	f04f 35ff 	mov.w	r5, #4294967295
 801b34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b34e:	07da      	lsls	r2, r3, #31
 801b350:	d405      	bmi.n	801b35e <_puts_r+0x9a>
 801b352:	89a3      	ldrh	r3, [r4, #12]
 801b354:	059b      	lsls	r3, r3, #22
 801b356:	d402      	bmi.n	801b35e <_puts_r+0x9a>
 801b358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b35a:	f7ff f83d 	bl	801a3d8 <__retarget_lock_release_recursive>
 801b35e:	4628      	mov	r0, r5
 801b360:	bd70      	pop	{r4, r5, r6, pc}
 801b362:	2b00      	cmp	r3, #0
 801b364:	da04      	bge.n	801b370 <_puts_r+0xac>
 801b366:	69a2      	ldr	r2, [r4, #24]
 801b368:	429a      	cmp	r2, r3
 801b36a:	dc06      	bgt.n	801b37a <_puts_r+0xb6>
 801b36c:	290a      	cmp	r1, #10
 801b36e:	d004      	beq.n	801b37a <_puts_r+0xb6>
 801b370:	6823      	ldr	r3, [r4, #0]
 801b372:	1c5a      	adds	r2, r3, #1
 801b374:	6022      	str	r2, [r4, #0]
 801b376:	7019      	strb	r1, [r3, #0]
 801b378:	e7c5      	b.n	801b306 <_puts_r+0x42>
 801b37a:	4622      	mov	r2, r4
 801b37c:	4628      	mov	r0, r5
 801b37e:	f001 f905 	bl	801c58c <__swbuf_r>
 801b382:	3001      	adds	r0, #1
 801b384:	d1bf      	bne.n	801b306 <_puts_r+0x42>
 801b386:	e7df      	b.n	801b348 <_puts_r+0x84>
 801b388:	6823      	ldr	r3, [r4, #0]
 801b38a:	250a      	movs	r5, #10
 801b38c:	1c5a      	adds	r2, r3, #1
 801b38e:	6022      	str	r2, [r4, #0]
 801b390:	701d      	strb	r5, [r3, #0]
 801b392:	e7db      	b.n	801b34c <_puts_r+0x88>
 801b394:	0802143c 	.word	0x0802143c
 801b398:	0802145c 	.word	0x0802145c
 801b39c:	0802141c 	.word	0x0802141c

0801b3a0 <puts>:
 801b3a0:	4b02      	ldr	r3, [pc, #8]	; (801b3ac <puts+0xc>)
 801b3a2:	4601      	mov	r1, r0
 801b3a4:	6818      	ldr	r0, [r3, #0]
 801b3a6:	f7ff bf8d 	b.w	801b2c4 <_puts_r>
 801b3aa:	bf00      	nop
 801b3ac:	200001f8 	.word	0x200001f8

0801b3b0 <cleanup_glue>:
 801b3b0:	b538      	push	{r3, r4, r5, lr}
 801b3b2:	460c      	mov	r4, r1
 801b3b4:	6809      	ldr	r1, [r1, #0]
 801b3b6:	4605      	mov	r5, r0
 801b3b8:	b109      	cbz	r1, 801b3be <cleanup_glue+0xe>
 801b3ba:	f7ff fff9 	bl	801b3b0 <cleanup_glue>
 801b3be:	4621      	mov	r1, r4
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3c6:	f7ff b841 	b.w	801a44c <_free_r>
	...

0801b3cc <_reclaim_reent>:
 801b3cc:	4b2c      	ldr	r3, [pc, #176]	; (801b480 <_reclaim_reent+0xb4>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	4283      	cmp	r3, r0
 801b3d2:	b570      	push	{r4, r5, r6, lr}
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	d051      	beq.n	801b47c <_reclaim_reent+0xb0>
 801b3d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b3da:	b143      	cbz	r3, 801b3ee <_reclaim_reent+0x22>
 801b3dc:	68db      	ldr	r3, [r3, #12]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d14a      	bne.n	801b478 <_reclaim_reent+0xac>
 801b3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3e4:	6819      	ldr	r1, [r3, #0]
 801b3e6:	b111      	cbz	r1, 801b3ee <_reclaim_reent+0x22>
 801b3e8:	4620      	mov	r0, r4
 801b3ea:	f7ff f82f 	bl	801a44c <_free_r>
 801b3ee:	6961      	ldr	r1, [r4, #20]
 801b3f0:	b111      	cbz	r1, 801b3f8 <_reclaim_reent+0x2c>
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	f7ff f82a 	bl	801a44c <_free_r>
 801b3f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b3fa:	b111      	cbz	r1, 801b402 <_reclaim_reent+0x36>
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f7ff f825 	bl	801a44c <_free_r>
 801b402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b404:	b111      	cbz	r1, 801b40c <_reclaim_reent+0x40>
 801b406:	4620      	mov	r0, r4
 801b408:	f7ff f820 	bl	801a44c <_free_r>
 801b40c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b40e:	b111      	cbz	r1, 801b416 <_reclaim_reent+0x4a>
 801b410:	4620      	mov	r0, r4
 801b412:	f7ff f81b 	bl	801a44c <_free_r>
 801b416:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b418:	b111      	cbz	r1, 801b420 <_reclaim_reent+0x54>
 801b41a:	4620      	mov	r0, r4
 801b41c:	f7ff f816 	bl	801a44c <_free_r>
 801b420:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b422:	b111      	cbz	r1, 801b42a <_reclaim_reent+0x5e>
 801b424:	4620      	mov	r0, r4
 801b426:	f7ff f811 	bl	801a44c <_free_r>
 801b42a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b42c:	b111      	cbz	r1, 801b434 <_reclaim_reent+0x68>
 801b42e:	4620      	mov	r0, r4
 801b430:	f7ff f80c 	bl	801a44c <_free_r>
 801b434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b436:	b111      	cbz	r1, 801b43e <_reclaim_reent+0x72>
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ff f807 	bl	801a44c <_free_r>
 801b43e:	69a3      	ldr	r3, [r4, #24]
 801b440:	b1e3      	cbz	r3, 801b47c <_reclaim_reent+0xb0>
 801b442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b444:	4620      	mov	r0, r4
 801b446:	4798      	blx	r3
 801b448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b44a:	b1b9      	cbz	r1, 801b47c <_reclaim_reent+0xb0>
 801b44c:	4620      	mov	r0, r4
 801b44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b452:	f7ff bfad 	b.w	801b3b0 <cleanup_glue>
 801b456:	5949      	ldr	r1, [r1, r5]
 801b458:	b941      	cbnz	r1, 801b46c <_reclaim_reent+0xa0>
 801b45a:	3504      	adds	r5, #4
 801b45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b45e:	2d80      	cmp	r5, #128	; 0x80
 801b460:	68d9      	ldr	r1, [r3, #12]
 801b462:	d1f8      	bne.n	801b456 <_reclaim_reent+0x8a>
 801b464:	4620      	mov	r0, r4
 801b466:	f7fe fff1 	bl	801a44c <_free_r>
 801b46a:	e7ba      	b.n	801b3e2 <_reclaim_reent+0x16>
 801b46c:	680e      	ldr	r6, [r1, #0]
 801b46e:	4620      	mov	r0, r4
 801b470:	f7fe ffec 	bl	801a44c <_free_r>
 801b474:	4631      	mov	r1, r6
 801b476:	e7ef      	b.n	801b458 <_reclaim_reent+0x8c>
 801b478:	2500      	movs	r5, #0
 801b47a:	e7ef      	b.n	801b45c <_reclaim_reent+0x90>
 801b47c:	bd70      	pop	{r4, r5, r6, pc}
 801b47e:	bf00      	nop
 801b480:	200001f8 	.word	0x200001f8

0801b484 <_sbrk_r>:
 801b484:	b538      	push	{r3, r4, r5, lr}
 801b486:	4d06      	ldr	r5, [pc, #24]	; (801b4a0 <_sbrk_r+0x1c>)
 801b488:	2300      	movs	r3, #0
 801b48a:	4604      	mov	r4, r0
 801b48c:	4608      	mov	r0, r1
 801b48e:	602b      	str	r3, [r5, #0]
 801b490:	f7e7 fd58 	bl	8002f44 <_sbrk>
 801b494:	1c43      	adds	r3, r0, #1
 801b496:	d102      	bne.n	801b49e <_sbrk_r+0x1a>
 801b498:	682b      	ldr	r3, [r5, #0]
 801b49a:	b103      	cbz	r3, 801b49e <_sbrk_r+0x1a>
 801b49c:	6023      	str	r3, [r4, #0]
 801b49e:	bd38      	pop	{r3, r4, r5, pc}
 801b4a0:	20008fb4 	.word	0x20008fb4

0801b4a4 <nanf>:
 801b4a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b4ac <nanf+0x8>
 801b4a8:	4770      	bx	lr
 801b4aa:	bf00      	nop
 801b4ac:	7fc00000 	.word	0x7fc00000

0801b4b0 <_raise_r>:
 801b4b0:	291f      	cmp	r1, #31
 801b4b2:	b538      	push	{r3, r4, r5, lr}
 801b4b4:	4604      	mov	r4, r0
 801b4b6:	460d      	mov	r5, r1
 801b4b8:	d904      	bls.n	801b4c4 <_raise_r+0x14>
 801b4ba:	2316      	movs	r3, #22
 801b4bc:	6003      	str	r3, [r0, #0]
 801b4be:	f04f 30ff 	mov.w	r0, #4294967295
 801b4c2:	bd38      	pop	{r3, r4, r5, pc}
 801b4c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b4c6:	b112      	cbz	r2, 801b4ce <_raise_r+0x1e>
 801b4c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b4cc:	b94b      	cbnz	r3, 801b4e2 <_raise_r+0x32>
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	f000 f830 	bl	801b534 <_getpid_r>
 801b4d4:	462a      	mov	r2, r5
 801b4d6:	4601      	mov	r1, r0
 801b4d8:	4620      	mov	r0, r4
 801b4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b4de:	f000 b817 	b.w	801b510 <_kill_r>
 801b4e2:	2b01      	cmp	r3, #1
 801b4e4:	d00a      	beq.n	801b4fc <_raise_r+0x4c>
 801b4e6:	1c59      	adds	r1, r3, #1
 801b4e8:	d103      	bne.n	801b4f2 <_raise_r+0x42>
 801b4ea:	2316      	movs	r3, #22
 801b4ec:	6003      	str	r3, [r0, #0]
 801b4ee:	2001      	movs	r0, #1
 801b4f0:	e7e7      	b.n	801b4c2 <_raise_r+0x12>
 801b4f2:	2400      	movs	r4, #0
 801b4f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b4f8:	4628      	mov	r0, r5
 801b4fa:	4798      	blx	r3
 801b4fc:	2000      	movs	r0, #0
 801b4fe:	e7e0      	b.n	801b4c2 <_raise_r+0x12>

0801b500 <raise>:
 801b500:	4b02      	ldr	r3, [pc, #8]	; (801b50c <raise+0xc>)
 801b502:	4601      	mov	r1, r0
 801b504:	6818      	ldr	r0, [r3, #0]
 801b506:	f7ff bfd3 	b.w	801b4b0 <_raise_r>
 801b50a:	bf00      	nop
 801b50c:	200001f8 	.word	0x200001f8

0801b510 <_kill_r>:
 801b510:	b538      	push	{r3, r4, r5, lr}
 801b512:	4d07      	ldr	r5, [pc, #28]	; (801b530 <_kill_r+0x20>)
 801b514:	2300      	movs	r3, #0
 801b516:	4604      	mov	r4, r0
 801b518:	4608      	mov	r0, r1
 801b51a:	4611      	mov	r1, r2
 801b51c:	602b      	str	r3, [r5, #0]
 801b51e:	f7e7 fc89 	bl	8002e34 <_kill>
 801b522:	1c43      	adds	r3, r0, #1
 801b524:	d102      	bne.n	801b52c <_kill_r+0x1c>
 801b526:	682b      	ldr	r3, [r5, #0]
 801b528:	b103      	cbz	r3, 801b52c <_kill_r+0x1c>
 801b52a:	6023      	str	r3, [r4, #0]
 801b52c:	bd38      	pop	{r3, r4, r5, pc}
 801b52e:	bf00      	nop
 801b530:	20008fb4 	.word	0x20008fb4

0801b534 <_getpid_r>:
 801b534:	f7e7 bc76 	b.w	8002e24 <_getpid>

0801b538 <siprintf>:
 801b538:	b40e      	push	{r1, r2, r3}
 801b53a:	b500      	push	{lr}
 801b53c:	b09c      	sub	sp, #112	; 0x70
 801b53e:	ab1d      	add	r3, sp, #116	; 0x74
 801b540:	9002      	str	r0, [sp, #8]
 801b542:	9006      	str	r0, [sp, #24]
 801b544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b548:	4809      	ldr	r0, [pc, #36]	; (801b570 <siprintf+0x38>)
 801b54a:	9107      	str	r1, [sp, #28]
 801b54c:	9104      	str	r1, [sp, #16]
 801b54e:	4909      	ldr	r1, [pc, #36]	; (801b574 <siprintf+0x3c>)
 801b550:	f853 2b04 	ldr.w	r2, [r3], #4
 801b554:	9105      	str	r1, [sp, #20]
 801b556:	6800      	ldr	r0, [r0, #0]
 801b558:	9301      	str	r3, [sp, #4]
 801b55a:	a902      	add	r1, sp, #8
 801b55c:	f003 f9b8 	bl	801e8d0 <_svfiprintf_r>
 801b560:	9b02      	ldr	r3, [sp, #8]
 801b562:	2200      	movs	r2, #0
 801b564:	701a      	strb	r2, [r3, #0]
 801b566:	b01c      	add	sp, #112	; 0x70
 801b568:	f85d eb04 	ldr.w	lr, [sp], #4
 801b56c:	b003      	add	sp, #12
 801b56e:	4770      	bx	lr
 801b570:	200001f8 	.word	0x200001f8
 801b574:	ffff0208 	.word	0xffff0208

0801b578 <siscanf>:
 801b578:	b40e      	push	{r1, r2, r3}
 801b57a:	b510      	push	{r4, lr}
 801b57c:	b09f      	sub	sp, #124	; 0x7c
 801b57e:	ac21      	add	r4, sp, #132	; 0x84
 801b580:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b584:	f854 2b04 	ldr.w	r2, [r4], #4
 801b588:	9201      	str	r2, [sp, #4]
 801b58a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b58e:	9004      	str	r0, [sp, #16]
 801b590:	9008      	str	r0, [sp, #32]
 801b592:	f7e4 fe2d 	bl	80001f0 <strlen>
 801b596:	4b0c      	ldr	r3, [pc, #48]	; (801b5c8 <siscanf+0x50>)
 801b598:	9005      	str	r0, [sp, #20]
 801b59a:	9009      	str	r0, [sp, #36]	; 0x24
 801b59c:	930d      	str	r3, [sp, #52]	; 0x34
 801b59e:	480b      	ldr	r0, [pc, #44]	; (801b5cc <siscanf+0x54>)
 801b5a0:	9a01      	ldr	r2, [sp, #4]
 801b5a2:	6800      	ldr	r0, [r0, #0]
 801b5a4:	9403      	str	r4, [sp, #12]
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	9311      	str	r3, [sp, #68]	; 0x44
 801b5aa:	9316      	str	r3, [sp, #88]	; 0x58
 801b5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b5b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b5b4:	a904      	add	r1, sp, #16
 801b5b6:	4623      	mov	r3, r4
 801b5b8:	f003 fae4 	bl	801eb84 <__ssvfiscanf_r>
 801b5bc:	b01f      	add	sp, #124	; 0x7c
 801b5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5c2:	b003      	add	sp, #12
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop
 801b5c8:	0801b5f3 	.word	0x0801b5f3
 801b5cc:	200001f8 	.word	0x200001f8

0801b5d0 <__sread>:
 801b5d0:	b510      	push	{r4, lr}
 801b5d2:	460c      	mov	r4, r1
 801b5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5d8:	f003 fef2 	bl	801f3c0 <_read_r>
 801b5dc:	2800      	cmp	r0, #0
 801b5de:	bfab      	itete	ge
 801b5e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b5e2:	89a3      	ldrhlt	r3, [r4, #12]
 801b5e4:	181b      	addge	r3, r3, r0
 801b5e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b5ea:	bfac      	ite	ge
 801b5ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801b5ee:	81a3      	strhlt	r3, [r4, #12]
 801b5f0:	bd10      	pop	{r4, pc}

0801b5f2 <__seofread>:
 801b5f2:	2000      	movs	r0, #0
 801b5f4:	4770      	bx	lr

0801b5f6 <__swrite>:
 801b5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5fa:	461f      	mov	r7, r3
 801b5fc:	898b      	ldrh	r3, [r1, #12]
 801b5fe:	05db      	lsls	r3, r3, #23
 801b600:	4605      	mov	r5, r0
 801b602:	460c      	mov	r4, r1
 801b604:	4616      	mov	r6, r2
 801b606:	d505      	bpl.n	801b614 <__swrite+0x1e>
 801b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b60c:	2302      	movs	r3, #2
 801b60e:	2200      	movs	r2, #0
 801b610:	f002 fb7e 	bl	801dd10 <_lseek_r>
 801b614:	89a3      	ldrh	r3, [r4, #12]
 801b616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b61e:	81a3      	strh	r3, [r4, #12]
 801b620:	4632      	mov	r2, r6
 801b622:	463b      	mov	r3, r7
 801b624:	4628      	mov	r0, r5
 801b626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b62a:	f001 b801 	b.w	801c630 <_write_r>

0801b62e <__sseek>:
 801b62e:	b510      	push	{r4, lr}
 801b630:	460c      	mov	r4, r1
 801b632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b636:	f002 fb6b 	bl	801dd10 <_lseek_r>
 801b63a:	1c43      	adds	r3, r0, #1
 801b63c:	89a3      	ldrh	r3, [r4, #12]
 801b63e:	bf15      	itete	ne
 801b640:	6560      	strne	r0, [r4, #84]	; 0x54
 801b642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b64a:	81a3      	strheq	r3, [r4, #12]
 801b64c:	bf18      	it	ne
 801b64e:	81a3      	strhne	r3, [r4, #12]
 801b650:	bd10      	pop	{r4, pc}

0801b652 <__sclose>:
 801b652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b656:	f001 b889 	b.w	801c76c <_close_r>

0801b65a <strcpy>:
 801b65a:	4603      	mov	r3, r0
 801b65c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b660:	f803 2b01 	strb.w	r2, [r3], #1
 801b664:	2a00      	cmp	r2, #0
 801b666:	d1f9      	bne.n	801b65c <strcpy+0x2>
 801b668:	4770      	bx	lr

0801b66a <strncmp>:
 801b66a:	b510      	push	{r4, lr}
 801b66c:	b16a      	cbz	r2, 801b68a <strncmp+0x20>
 801b66e:	3901      	subs	r1, #1
 801b670:	1884      	adds	r4, r0, r2
 801b672:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b676:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d103      	bne.n	801b686 <strncmp+0x1c>
 801b67e:	42a0      	cmp	r0, r4
 801b680:	d001      	beq.n	801b686 <strncmp+0x1c>
 801b682:	2b00      	cmp	r3, #0
 801b684:	d1f5      	bne.n	801b672 <strncmp+0x8>
 801b686:	1a98      	subs	r0, r3, r2
 801b688:	bd10      	pop	{r4, pc}
 801b68a:	4610      	mov	r0, r2
 801b68c:	e7fc      	b.n	801b688 <strncmp+0x1e>

0801b68e <sulp>:
 801b68e:	b570      	push	{r4, r5, r6, lr}
 801b690:	4604      	mov	r4, r0
 801b692:	460d      	mov	r5, r1
 801b694:	ec45 4b10 	vmov	d0, r4, r5
 801b698:	4616      	mov	r6, r2
 801b69a:	f002 ff39 	bl	801e510 <__ulp>
 801b69e:	ec51 0b10 	vmov	r0, r1, d0
 801b6a2:	b17e      	cbz	r6, 801b6c4 <sulp+0x36>
 801b6a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b6a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	dd09      	ble.n	801b6c4 <sulp+0x36>
 801b6b0:	051b      	lsls	r3, r3, #20
 801b6b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b6b6:	2400      	movs	r4, #0
 801b6b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b6bc:	4622      	mov	r2, r4
 801b6be:	462b      	mov	r3, r5
 801b6c0:	f7e4 ffaa 	bl	8000618 <__aeabi_dmul>
 801b6c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b6c8 <_strtod_l>:
 801b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6cc:	b0a3      	sub	sp, #140	; 0x8c
 801b6ce:	461f      	mov	r7, r3
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	931e      	str	r3, [sp, #120]	; 0x78
 801b6d4:	4ba4      	ldr	r3, [pc, #656]	; (801b968 <_strtod_l+0x2a0>)
 801b6d6:	9219      	str	r2, [sp, #100]	; 0x64
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	9307      	str	r3, [sp, #28]
 801b6dc:	4604      	mov	r4, r0
 801b6de:	4618      	mov	r0, r3
 801b6e0:	4688      	mov	r8, r1
 801b6e2:	f7e4 fd85 	bl	80001f0 <strlen>
 801b6e6:	f04f 0a00 	mov.w	sl, #0
 801b6ea:	4605      	mov	r5, r0
 801b6ec:	f04f 0b00 	mov.w	fp, #0
 801b6f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b6f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6f6:	781a      	ldrb	r2, [r3, #0]
 801b6f8:	2a2b      	cmp	r2, #43	; 0x2b
 801b6fa:	d04c      	beq.n	801b796 <_strtod_l+0xce>
 801b6fc:	d839      	bhi.n	801b772 <_strtod_l+0xaa>
 801b6fe:	2a0d      	cmp	r2, #13
 801b700:	d832      	bhi.n	801b768 <_strtod_l+0xa0>
 801b702:	2a08      	cmp	r2, #8
 801b704:	d832      	bhi.n	801b76c <_strtod_l+0xa4>
 801b706:	2a00      	cmp	r2, #0
 801b708:	d03c      	beq.n	801b784 <_strtod_l+0xbc>
 801b70a:	2300      	movs	r3, #0
 801b70c:	930e      	str	r3, [sp, #56]	; 0x38
 801b70e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b710:	7833      	ldrb	r3, [r6, #0]
 801b712:	2b30      	cmp	r3, #48	; 0x30
 801b714:	f040 80b4 	bne.w	801b880 <_strtod_l+0x1b8>
 801b718:	7873      	ldrb	r3, [r6, #1]
 801b71a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b71e:	2b58      	cmp	r3, #88	; 0x58
 801b720:	d16c      	bne.n	801b7fc <_strtod_l+0x134>
 801b722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b724:	9301      	str	r3, [sp, #4]
 801b726:	ab1e      	add	r3, sp, #120	; 0x78
 801b728:	9702      	str	r7, [sp, #8]
 801b72a:	9300      	str	r3, [sp, #0]
 801b72c:	4a8f      	ldr	r2, [pc, #572]	; (801b96c <_strtod_l+0x2a4>)
 801b72e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b730:	a91d      	add	r1, sp, #116	; 0x74
 801b732:	4620      	mov	r0, r4
 801b734:	f001 ffe0 	bl	801d6f8 <__gethex>
 801b738:	f010 0707 	ands.w	r7, r0, #7
 801b73c:	4605      	mov	r5, r0
 801b73e:	d005      	beq.n	801b74c <_strtod_l+0x84>
 801b740:	2f06      	cmp	r7, #6
 801b742:	d12a      	bne.n	801b79a <_strtod_l+0xd2>
 801b744:	3601      	adds	r6, #1
 801b746:	2300      	movs	r3, #0
 801b748:	961d      	str	r6, [sp, #116]	; 0x74
 801b74a:	930e      	str	r3, [sp, #56]	; 0x38
 801b74c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b74e:	2b00      	cmp	r3, #0
 801b750:	f040 8596 	bne.w	801c280 <_strtod_l+0xbb8>
 801b754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b756:	b1db      	cbz	r3, 801b790 <_strtod_l+0xc8>
 801b758:	4652      	mov	r2, sl
 801b75a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b75e:	ec43 2b10 	vmov	d0, r2, r3
 801b762:	b023      	add	sp, #140	; 0x8c
 801b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b768:	2a20      	cmp	r2, #32
 801b76a:	d1ce      	bne.n	801b70a <_strtod_l+0x42>
 801b76c:	3301      	adds	r3, #1
 801b76e:	931d      	str	r3, [sp, #116]	; 0x74
 801b770:	e7c0      	b.n	801b6f4 <_strtod_l+0x2c>
 801b772:	2a2d      	cmp	r2, #45	; 0x2d
 801b774:	d1c9      	bne.n	801b70a <_strtod_l+0x42>
 801b776:	2201      	movs	r2, #1
 801b778:	920e      	str	r2, [sp, #56]	; 0x38
 801b77a:	1c5a      	adds	r2, r3, #1
 801b77c:	921d      	str	r2, [sp, #116]	; 0x74
 801b77e:	785b      	ldrb	r3, [r3, #1]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d1c4      	bne.n	801b70e <_strtod_l+0x46>
 801b784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b786:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	f040 8576 	bne.w	801c27c <_strtod_l+0xbb4>
 801b790:	4652      	mov	r2, sl
 801b792:	465b      	mov	r3, fp
 801b794:	e7e3      	b.n	801b75e <_strtod_l+0x96>
 801b796:	2200      	movs	r2, #0
 801b798:	e7ee      	b.n	801b778 <_strtod_l+0xb0>
 801b79a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b79c:	b13a      	cbz	r2, 801b7ae <_strtod_l+0xe6>
 801b79e:	2135      	movs	r1, #53	; 0x35
 801b7a0:	a820      	add	r0, sp, #128	; 0x80
 801b7a2:	f002 ffc0 	bl	801e726 <__copybits>
 801b7a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	f002 fb85 	bl	801deb8 <_Bfree>
 801b7ae:	3f01      	subs	r7, #1
 801b7b0:	2f05      	cmp	r7, #5
 801b7b2:	d807      	bhi.n	801b7c4 <_strtod_l+0xfc>
 801b7b4:	e8df f007 	tbb	[pc, r7]
 801b7b8:	1d180b0e 	.word	0x1d180b0e
 801b7bc:	030e      	.short	0x030e
 801b7be:	f04f 0b00 	mov.w	fp, #0
 801b7c2:	46da      	mov	sl, fp
 801b7c4:	0728      	lsls	r0, r5, #28
 801b7c6:	d5c1      	bpl.n	801b74c <_strtod_l+0x84>
 801b7c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b7cc:	e7be      	b.n	801b74c <_strtod_l+0x84>
 801b7ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b7d2:	e7f7      	b.n	801b7c4 <_strtod_l+0xfc>
 801b7d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b7d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b7da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b7de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b7e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b7e6:	e7ed      	b.n	801b7c4 <_strtod_l+0xfc>
 801b7e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b970 <_strtod_l+0x2a8>
 801b7ec:	f04f 0a00 	mov.w	sl, #0
 801b7f0:	e7e8      	b.n	801b7c4 <_strtod_l+0xfc>
 801b7f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b7f6:	f04f 3aff 	mov.w	sl, #4294967295
 801b7fa:	e7e3      	b.n	801b7c4 <_strtod_l+0xfc>
 801b7fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b7fe:	1c5a      	adds	r2, r3, #1
 801b800:	921d      	str	r2, [sp, #116]	; 0x74
 801b802:	785b      	ldrb	r3, [r3, #1]
 801b804:	2b30      	cmp	r3, #48	; 0x30
 801b806:	d0f9      	beq.n	801b7fc <_strtod_l+0x134>
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d09f      	beq.n	801b74c <_strtod_l+0x84>
 801b80c:	2301      	movs	r3, #1
 801b80e:	f04f 0900 	mov.w	r9, #0
 801b812:	9304      	str	r3, [sp, #16]
 801b814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b816:	930a      	str	r3, [sp, #40]	; 0x28
 801b818:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b81c:	464f      	mov	r7, r9
 801b81e:	220a      	movs	r2, #10
 801b820:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b822:	7806      	ldrb	r6, [r0, #0]
 801b824:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b828:	b2d9      	uxtb	r1, r3
 801b82a:	2909      	cmp	r1, #9
 801b82c:	d92a      	bls.n	801b884 <_strtod_l+0x1bc>
 801b82e:	9907      	ldr	r1, [sp, #28]
 801b830:	462a      	mov	r2, r5
 801b832:	f7ff ff1a 	bl	801b66a <strncmp>
 801b836:	b398      	cbz	r0, 801b8a0 <_strtod_l+0x1d8>
 801b838:	2000      	movs	r0, #0
 801b83a:	4633      	mov	r3, r6
 801b83c:	463d      	mov	r5, r7
 801b83e:	9007      	str	r0, [sp, #28]
 801b840:	4602      	mov	r2, r0
 801b842:	2b65      	cmp	r3, #101	; 0x65
 801b844:	d001      	beq.n	801b84a <_strtod_l+0x182>
 801b846:	2b45      	cmp	r3, #69	; 0x45
 801b848:	d118      	bne.n	801b87c <_strtod_l+0x1b4>
 801b84a:	b91d      	cbnz	r5, 801b854 <_strtod_l+0x18c>
 801b84c:	9b04      	ldr	r3, [sp, #16]
 801b84e:	4303      	orrs	r3, r0
 801b850:	d098      	beq.n	801b784 <_strtod_l+0xbc>
 801b852:	2500      	movs	r5, #0
 801b854:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b858:	f108 0301 	add.w	r3, r8, #1
 801b85c:	931d      	str	r3, [sp, #116]	; 0x74
 801b85e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b862:	2b2b      	cmp	r3, #43	; 0x2b
 801b864:	d075      	beq.n	801b952 <_strtod_l+0x28a>
 801b866:	2b2d      	cmp	r3, #45	; 0x2d
 801b868:	d07b      	beq.n	801b962 <_strtod_l+0x29a>
 801b86a:	f04f 0c00 	mov.w	ip, #0
 801b86e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b872:	2909      	cmp	r1, #9
 801b874:	f240 8082 	bls.w	801b97c <_strtod_l+0x2b4>
 801b878:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b87c:	2600      	movs	r6, #0
 801b87e:	e09d      	b.n	801b9bc <_strtod_l+0x2f4>
 801b880:	2300      	movs	r3, #0
 801b882:	e7c4      	b.n	801b80e <_strtod_l+0x146>
 801b884:	2f08      	cmp	r7, #8
 801b886:	bfd8      	it	le
 801b888:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b88a:	f100 0001 	add.w	r0, r0, #1
 801b88e:	bfda      	itte	le
 801b890:	fb02 3301 	mlale	r3, r2, r1, r3
 801b894:	9309      	strle	r3, [sp, #36]	; 0x24
 801b896:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b89a:	3701      	adds	r7, #1
 801b89c:	901d      	str	r0, [sp, #116]	; 0x74
 801b89e:	e7bf      	b.n	801b820 <_strtod_l+0x158>
 801b8a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8a2:	195a      	adds	r2, r3, r5
 801b8a4:	921d      	str	r2, [sp, #116]	; 0x74
 801b8a6:	5d5b      	ldrb	r3, [r3, r5]
 801b8a8:	2f00      	cmp	r7, #0
 801b8aa:	d037      	beq.n	801b91c <_strtod_l+0x254>
 801b8ac:	9007      	str	r0, [sp, #28]
 801b8ae:	463d      	mov	r5, r7
 801b8b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b8b4:	2a09      	cmp	r2, #9
 801b8b6:	d912      	bls.n	801b8de <_strtod_l+0x216>
 801b8b8:	2201      	movs	r2, #1
 801b8ba:	e7c2      	b.n	801b842 <_strtod_l+0x17a>
 801b8bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8be:	1c5a      	adds	r2, r3, #1
 801b8c0:	921d      	str	r2, [sp, #116]	; 0x74
 801b8c2:	785b      	ldrb	r3, [r3, #1]
 801b8c4:	3001      	adds	r0, #1
 801b8c6:	2b30      	cmp	r3, #48	; 0x30
 801b8c8:	d0f8      	beq.n	801b8bc <_strtod_l+0x1f4>
 801b8ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b8ce:	2a08      	cmp	r2, #8
 801b8d0:	f200 84db 	bhi.w	801c28a <_strtod_l+0xbc2>
 801b8d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b8d6:	9007      	str	r0, [sp, #28]
 801b8d8:	2000      	movs	r0, #0
 801b8da:	920a      	str	r2, [sp, #40]	; 0x28
 801b8dc:	4605      	mov	r5, r0
 801b8de:	3b30      	subs	r3, #48	; 0x30
 801b8e0:	f100 0201 	add.w	r2, r0, #1
 801b8e4:	d014      	beq.n	801b910 <_strtod_l+0x248>
 801b8e6:	9907      	ldr	r1, [sp, #28]
 801b8e8:	4411      	add	r1, r2
 801b8ea:	9107      	str	r1, [sp, #28]
 801b8ec:	462a      	mov	r2, r5
 801b8ee:	eb00 0e05 	add.w	lr, r0, r5
 801b8f2:	210a      	movs	r1, #10
 801b8f4:	4572      	cmp	r2, lr
 801b8f6:	d113      	bne.n	801b920 <_strtod_l+0x258>
 801b8f8:	182a      	adds	r2, r5, r0
 801b8fa:	2a08      	cmp	r2, #8
 801b8fc:	f105 0501 	add.w	r5, r5, #1
 801b900:	4405      	add	r5, r0
 801b902:	dc1c      	bgt.n	801b93e <_strtod_l+0x276>
 801b904:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b906:	220a      	movs	r2, #10
 801b908:	fb02 3301 	mla	r3, r2, r1, r3
 801b90c:	9309      	str	r3, [sp, #36]	; 0x24
 801b90e:	2200      	movs	r2, #0
 801b910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b912:	1c59      	adds	r1, r3, #1
 801b914:	911d      	str	r1, [sp, #116]	; 0x74
 801b916:	785b      	ldrb	r3, [r3, #1]
 801b918:	4610      	mov	r0, r2
 801b91a:	e7c9      	b.n	801b8b0 <_strtod_l+0x1e8>
 801b91c:	4638      	mov	r0, r7
 801b91e:	e7d2      	b.n	801b8c6 <_strtod_l+0x1fe>
 801b920:	2a08      	cmp	r2, #8
 801b922:	dc04      	bgt.n	801b92e <_strtod_l+0x266>
 801b924:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b926:	434e      	muls	r6, r1
 801b928:	9609      	str	r6, [sp, #36]	; 0x24
 801b92a:	3201      	adds	r2, #1
 801b92c:	e7e2      	b.n	801b8f4 <_strtod_l+0x22c>
 801b92e:	f102 0c01 	add.w	ip, r2, #1
 801b932:	f1bc 0f10 	cmp.w	ip, #16
 801b936:	bfd8      	it	le
 801b938:	fb01 f909 	mulle.w	r9, r1, r9
 801b93c:	e7f5      	b.n	801b92a <_strtod_l+0x262>
 801b93e:	2d10      	cmp	r5, #16
 801b940:	bfdc      	itt	le
 801b942:	220a      	movle	r2, #10
 801b944:	fb02 3909 	mlale	r9, r2, r9, r3
 801b948:	e7e1      	b.n	801b90e <_strtod_l+0x246>
 801b94a:	2300      	movs	r3, #0
 801b94c:	9307      	str	r3, [sp, #28]
 801b94e:	2201      	movs	r2, #1
 801b950:	e77c      	b.n	801b84c <_strtod_l+0x184>
 801b952:	f04f 0c00 	mov.w	ip, #0
 801b956:	f108 0302 	add.w	r3, r8, #2
 801b95a:	931d      	str	r3, [sp, #116]	; 0x74
 801b95c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b960:	e785      	b.n	801b86e <_strtod_l+0x1a6>
 801b962:	f04f 0c01 	mov.w	ip, #1
 801b966:	e7f6      	b.n	801b956 <_strtod_l+0x28e>
 801b968:	08021644 	.word	0x08021644
 801b96c:	080214b8 	.word	0x080214b8
 801b970:	7ff00000 	.word	0x7ff00000
 801b974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b976:	1c59      	adds	r1, r3, #1
 801b978:	911d      	str	r1, [sp, #116]	; 0x74
 801b97a:	785b      	ldrb	r3, [r3, #1]
 801b97c:	2b30      	cmp	r3, #48	; 0x30
 801b97e:	d0f9      	beq.n	801b974 <_strtod_l+0x2ac>
 801b980:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b984:	2908      	cmp	r1, #8
 801b986:	f63f af79 	bhi.w	801b87c <_strtod_l+0x1b4>
 801b98a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b98e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b990:	9308      	str	r3, [sp, #32]
 801b992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b994:	1c59      	adds	r1, r3, #1
 801b996:	911d      	str	r1, [sp, #116]	; 0x74
 801b998:	785b      	ldrb	r3, [r3, #1]
 801b99a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b99e:	2e09      	cmp	r6, #9
 801b9a0:	d937      	bls.n	801ba12 <_strtod_l+0x34a>
 801b9a2:	9e08      	ldr	r6, [sp, #32]
 801b9a4:	1b89      	subs	r1, r1, r6
 801b9a6:	2908      	cmp	r1, #8
 801b9a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b9ac:	dc02      	bgt.n	801b9b4 <_strtod_l+0x2ec>
 801b9ae:	4576      	cmp	r6, lr
 801b9b0:	bfa8      	it	ge
 801b9b2:	4676      	movge	r6, lr
 801b9b4:	f1bc 0f00 	cmp.w	ip, #0
 801b9b8:	d000      	beq.n	801b9bc <_strtod_l+0x2f4>
 801b9ba:	4276      	negs	r6, r6
 801b9bc:	2d00      	cmp	r5, #0
 801b9be:	d14f      	bne.n	801ba60 <_strtod_l+0x398>
 801b9c0:	9904      	ldr	r1, [sp, #16]
 801b9c2:	4301      	orrs	r1, r0
 801b9c4:	f47f aec2 	bne.w	801b74c <_strtod_l+0x84>
 801b9c8:	2a00      	cmp	r2, #0
 801b9ca:	f47f aedb 	bne.w	801b784 <_strtod_l+0xbc>
 801b9ce:	2b69      	cmp	r3, #105	; 0x69
 801b9d0:	d027      	beq.n	801ba22 <_strtod_l+0x35a>
 801b9d2:	dc24      	bgt.n	801ba1e <_strtod_l+0x356>
 801b9d4:	2b49      	cmp	r3, #73	; 0x49
 801b9d6:	d024      	beq.n	801ba22 <_strtod_l+0x35a>
 801b9d8:	2b4e      	cmp	r3, #78	; 0x4e
 801b9da:	f47f aed3 	bne.w	801b784 <_strtod_l+0xbc>
 801b9de:	499e      	ldr	r1, [pc, #632]	; (801bc58 <_strtod_l+0x590>)
 801b9e0:	a81d      	add	r0, sp, #116	; 0x74
 801b9e2:	f002 f8e1 	bl	801dba8 <__match>
 801b9e6:	2800      	cmp	r0, #0
 801b9e8:	f43f aecc 	beq.w	801b784 <_strtod_l+0xbc>
 801b9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	2b28      	cmp	r3, #40	; 0x28
 801b9f2:	d12d      	bne.n	801ba50 <_strtod_l+0x388>
 801b9f4:	4999      	ldr	r1, [pc, #612]	; (801bc5c <_strtod_l+0x594>)
 801b9f6:	aa20      	add	r2, sp, #128	; 0x80
 801b9f8:	a81d      	add	r0, sp, #116	; 0x74
 801b9fa:	f002 f8e9 	bl	801dbd0 <__hexnan>
 801b9fe:	2805      	cmp	r0, #5
 801ba00:	d126      	bne.n	801ba50 <_strtod_l+0x388>
 801ba02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801ba08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ba0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ba10:	e69c      	b.n	801b74c <_strtod_l+0x84>
 801ba12:	210a      	movs	r1, #10
 801ba14:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ba18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ba1c:	e7b9      	b.n	801b992 <_strtod_l+0x2ca>
 801ba1e:	2b6e      	cmp	r3, #110	; 0x6e
 801ba20:	e7db      	b.n	801b9da <_strtod_l+0x312>
 801ba22:	498f      	ldr	r1, [pc, #572]	; (801bc60 <_strtod_l+0x598>)
 801ba24:	a81d      	add	r0, sp, #116	; 0x74
 801ba26:	f002 f8bf 	bl	801dba8 <__match>
 801ba2a:	2800      	cmp	r0, #0
 801ba2c:	f43f aeaa 	beq.w	801b784 <_strtod_l+0xbc>
 801ba30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba32:	498c      	ldr	r1, [pc, #560]	; (801bc64 <_strtod_l+0x59c>)
 801ba34:	3b01      	subs	r3, #1
 801ba36:	a81d      	add	r0, sp, #116	; 0x74
 801ba38:	931d      	str	r3, [sp, #116]	; 0x74
 801ba3a:	f002 f8b5 	bl	801dba8 <__match>
 801ba3e:	b910      	cbnz	r0, 801ba46 <_strtod_l+0x37e>
 801ba40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba42:	3301      	adds	r3, #1
 801ba44:	931d      	str	r3, [sp, #116]	; 0x74
 801ba46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bc74 <_strtod_l+0x5ac>
 801ba4a:	f04f 0a00 	mov.w	sl, #0
 801ba4e:	e67d      	b.n	801b74c <_strtod_l+0x84>
 801ba50:	4885      	ldr	r0, [pc, #532]	; (801bc68 <_strtod_l+0x5a0>)
 801ba52:	f7fe fa7d 	bl	8019f50 <nan>
 801ba56:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ba5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ba5e:	e675      	b.n	801b74c <_strtod_l+0x84>
 801ba60:	9b07      	ldr	r3, [sp, #28]
 801ba62:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba64:	1af3      	subs	r3, r6, r3
 801ba66:	2f00      	cmp	r7, #0
 801ba68:	bf08      	it	eq
 801ba6a:	462f      	moveq	r7, r5
 801ba6c:	2d10      	cmp	r5, #16
 801ba6e:	9308      	str	r3, [sp, #32]
 801ba70:	46a8      	mov	r8, r5
 801ba72:	bfa8      	it	ge
 801ba74:	f04f 0810 	movge.w	r8, #16
 801ba78:	f7e4 fd54 	bl	8000524 <__aeabi_ui2d>
 801ba7c:	2d09      	cmp	r5, #9
 801ba7e:	4682      	mov	sl, r0
 801ba80:	468b      	mov	fp, r1
 801ba82:	dd13      	ble.n	801baac <_strtod_l+0x3e4>
 801ba84:	4b79      	ldr	r3, [pc, #484]	; (801bc6c <_strtod_l+0x5a4>)
 801ba86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ba8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ba8e:	f7e4 fdc3 	bl	8000618 <__aeabi_dmul>
 801ba92:	4682      	mov	sl, r0
 801ba94:	4648      	mov	r0, r9
 801ba96:	468b      	mov	fp, r1
 801ba98:	f7e4 fd44 	bl	8000524 <__aeabi_ui2d>
 801ba9c:	4602      	mov	r2, r0
 801ba9e:	460b      	mov	r3, r1
 801baa0:	4650      	mov	r0, sl
 801baa2:	4659      	mov	r1, fp
 801baa4:	f7e4 fc02 	bl	80002ac <__adddf3>
 801baa8:	4682      	mov	sl, r0
 801baaa:	468b      	mov	fp, r1
 801baac:	2d0f      	cmp	r5, #15
 801baae:	dc38      	bgt.n	801bb22 <_strtod_l+0x45a>
 801bab0:	9b08      	ldr	r3, [sp, #32]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	f43f ae4a 	beq.w	801b74c <_strtod_l+0x84>
 801bab8:	dd24      	ble.n	801bb04 <_strtod_l+0x43c>
 801baba:	2b16      	cmp	r3, #22
 801babc:	dc0b      	bgt.n	801bad6 <_strtod_l+0x40e>
 801babe:	4d6b      	ldr	r5, [pc, #428]	; (801bc6c <_strtod_l+0x5a4>)
 801bac0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bac4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801bac8:	4652      	mov	r2, sl
 801baca:	465b      	mov	r3, fp
 801bacc:	f7e4 fda4 	bl	8000618 <__aeabi_dmul>
 801bad0:	4682      	mov	sl, r0
 801bad2:	468b      	mov	fp, r1
 801bad4:	e63a      	b.n	801b74c <_strtod_l+0x84>
 801bad6:	9a08      	ldr	r2, [sp, #32]
 801bad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801badc:	4293      	cmp	r3, r2
 801bade:	db20      	blt.n	801bb22 <_strtod_l+0x45a>
 801bae0:	4c62      	ldr	r4, [pc, #392]	; (801bc6c <_strtod_l+0x5a4>)
 801bae2:	f1c5 050f 	rsb	r5, r5, #15
 801bae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801baea:	4652      	mov	r2, sl
 801baec:	465b      	mov	r3, fp
 801baee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801baf2:	f7e4 fd91 	bl	8000618 <__aeabi_dmul>
 801baf6:	9b08      	ldr	r3, [sp, #32]
 801baf8:	1b5d      	subs	r5, r3, r5
 801bafa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bafe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bb02:	e7e3      	b.n	801bacc <_strtod_l+0x404>
 801bb04:	9b08      	ldr	r3, [sp, #32]
 801bb06:	3316      	adds	r3, #22
 801bb08:	db0b      	blt.n	801bb22 <_strtod_l+0x45a>
 801bb0a:	9b07      	ldr	r3, [sp, #28]
 801bb0c:	4a57      	ldr	r2, [pc, #348]	; (801bc6c <_strtod_l+0x5a4>)
 801bb0e:	1b9e      	subs	r6, r3, r6
 801bb10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bb14:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bb18:	4650      	mov	r0, sl
 801bb1a:	4659      	mov	r1, fp
 801bb1c:	f7e4 fea6 	bl	800086c <__aeabi_ddiv>
 801bb20:	e7d6      	b.n	801bad0 <_strtod_l+0x408>
 801bb22:	9b08      	ldr	r3, [sp, #32]
 801bb24:	eba5 0808 	sub.w	r8, r5, r8
 801bb28:	4498      	add	r8, r3
 801bb2a:	f1b8 0f00 	cmp.w	r8, #0
 801bb2e:	dd71      	ble.n	801bc14 <_strtod_l+0x54c>
 801bb30:	f018 030f 	ands.w	r3, r8, #15
 801bb34:	d00a      	beq.n	801bb4c <_strtod_l+0x484>
 801bb36:	494d      	ldr	r1, [pc, #308]	; (801bc6c <_strtod_l+0x5a4>)
 801bb38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bb3c:	4652      	mov	r2, sl
 801bb3e:	465b      	mov	r3, fp
 801bb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb44:	f7e4 fd68 	bl	8000618 <__aeabi_dmul>
 801bb48:	4682      	mov	sl, r0
 801bb4a:	468b      	mov	fp, r1
 801bb4c:	f038 080f 	bics.w	r8, r8, #15
 801bb50:	d04d      	beq.n	801bbee <_strtod_l+0x526>
 801bb52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bb56:	dd22      	ble.n	801bb9e <_strtod_l+0x4d6>
 801bb58:	2500      	movs	r5, #0
 801bb5a:	462e      	mov	r6, r5
 801bb5c:	9509      	str	r5, [sp, #36]	; 0x24
 801bb5e:	9507      	str	r5, [sp, #28]
 801bb60:	2322      	movs	r3, #34	; 0x22
 801bb62:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bc74 <_strtod_l+0x5ac>
 801bb66:	6023      	str	r3, [r4, #0]
 801bb68:	f04f 0a00 	mov.w	sl, #0
 801bb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	f43f adec 	beq.w	801b74c <_strtod_l+0x84>
 801bb74:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb76:	4620      	mov	r0, r4
 801bb78:	f002 f99e 	bl	801deb8 <_Bfree>
 801bb7c:	9907      	ldr	r1, [sp, #28]
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f002 f99a 	bl	801deb8 <_Bfree>
 801bb84:	4631      	mov	r1, r6
 801bb86:	4620      	mov	r0, r4
 801bb88:	f002 f996 	bl	801deb8 <_Bfree>
 801bb8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb8e:	4620      	mov	r0, r4
 801bb90:	f002 f992 	bl	801deb8 <_Bfree>
 801bb94:	4629      	mov	r1, r5
 801bb96:	4620      	mov	r0, r4
 801bb98:	f002 f98e 	bl	801deb8 <_Bfree>
 801bb9c:	e5d6      	b.n	801b74c <_strtod_l+0x84>
 801bb9e:	2300      	movs	r3, #0
 801bba0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bba4:	4650      	mov	r0, sl
 801bba6:	4659      	mov	r1, fp
 801bba8:	4699      	mov	r9, r3
 801bbaa:	f1b8 0f01 	cmp.w	r8, #1
 801bbae:	dc21      	bgt.n	801bbf4 <_strtod_l+0x52c>
 801bbb0:	b10b      	cbz	r3, 801bbb6 <_strtod_l+0x4ee>
 801bbb2:	4682      	mov	sl, r0
 801bbb4:	468b      	mov	fp, r1
 801bbb6:	4b2e      	ldr	r3, [pc, #184]	; (801bc70 <_strtod_l+0x5a8>)
 801bbb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801bbbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801bbc0:	4652      	mov	r2, sl
 801bbc2:	465b      	mov	r3, fp
 801bbc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bbc8:	f7e4 fd26 	bl	8000618 <__aeabi_dmul>
 801bbcc:	4b29      	ldr	r3, [pc, #164]	; (801bc74 <_strtod_l+0x5ac>)
 801bbce:	460a      	mov	r2, r1
 801bbd0:	400b      	ands	r3, r1
 801bbd2:	4929      	ldr	r1, [pc, #164]	; (801bc78 <_strtod_l+0x5b0>)
 801bbd4:	428b      	cmp	r3, r1
 801bbd6:	4682      	mov	sl, r0
 801bbd8:	d8be      	bhi.n	801bb58 <_strtod_l+0x490>
 801bbda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801bbde:	428b      	cmp	r3, r1
 801bbe0:	bf86      	itte	hi
 801bbe2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bc7c <_strtod_l+0x5b4>
 801bbe6:	f04f 3aff 	movhi.w	sl, #4294967295
 801bbea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801bbee:	2300      	movs	r3, #0
 801bbf0:	9304      	str	r3, [sp, #16]
 801bbf2:	e081      	b.n	801bcf8 <_strtod_l+0x630>
 801bbf4:	f018 0f01 	tst.w	r8, #1
 801bbf8:	d007      	beq.n	801bc0a <_strtod_l+0x542>
 801bbfa:	4b1d      	ldr	r3, [pc, #116]	; (801bc70 <_strtod_l+0x5a8>)
 801bbfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc04:	f7e4 fd08 	bl	8000618 <__aeabi_dmul>
 801bc08:	2301      	movs	r3, #1
 801bc0a:	f109 0901 	add.w	r9, r9, #1
 801bc0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bc12:	e7ca      	b.n	801bbaa <_strtod_l+0x4e2>
 801bc14:	d0eb      	beq.n	801bbee <_strtod_l+0x526>
 801bc16:	f1c8 0800 	rsb	r8, r8, #0
 801bc1a:	f018 020f 	ands.w	r2, r8, #15
 801bc1e:	d00a      	beq.n	801bc36 <_strtod_l+0x56e>
 801bc20:	4b12      	ldr	r3, [pc, #72]	; (801bc6c <_strtod_l+0x5a4>)
 801bc22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc26:	4650      	mov	r0, sl
 801bc28:	4659      	mov	r1, fp
 801bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc2e:	f7e4 fe1d 	bl	800086c <__aeabi_ddiv>
 801bc32:	4682      	mov	sl, r0
 801bc34:	468b      	mov	fp, r1
 801bc36:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bc3a:	d0d8      	beq.n	801bbee <_strtod_l+0x526>
 801bc3c:	f1b8 0f1f 	cmp.w	r8, #31
 801bc40:	dd1e      	ble.n	801bc80 <_strtod_l+0x5b8>
 801bc42:	2500      	movs	r5, #0
 801bc44:	462e      	mov	r6, r5
 801bc46:	9509      	str	r5, [sp, #36]	; 0x24
 801bc48:	9507      	str	r5, [sp, #28]
 801bc4a:	2322      	movs	r3, #34	; 0x22
 801bc4c:	f04f 0a00 	mov.w	sl, #0
 801bc50:	f04f 0b00 	mov.w	fp, #0
 801bc54:	6023      	str	r3, [r4, #0]
 801bc56:	e789      	b.n	801bb6c <_strtod_l+0x4a4>
 801bc58:	0802148d 	.word	0x0802148d
 801bc5c:	080214cc 	.word	0x080214cc
 801bc60:	08021485 	.word	0x08021485
 801bc64:	08021547 	.word	0x08021547
 801bc68:	08021543 	.word	0x08021543
 801bc6c:	080216e0 	.word	0x080216e0
 801bc70:	080216b8 	.word	0x080216b8
 801bc74:	7ff00000 	.word	0x7ff00000
 801bc78:	7ca00000 	.word	0x7ca00000
 801bc7c:	7fefffff 	.word	0x7fefffff
 801bc80:	f018 0310 	ands.w	r3, r8, #16
 801bc84:	bf18      	it	ne
 801bc86:	236a      	movne	r3, #106	; 0x6a
 801bc88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c040 <_strtod_l+0x978>
 801bc8c:	9304      	str	r3, [sp, #16]
 801bc8e:	4650      	mov	r0, sl
 801bc90:	4659      	mov	r1, fp
 801bc92:	2300      	movs	r3, #0
 801bc94:	f018 0f01 	tst.w	r8, #1
 801bc98:	d004      	beq.n	801bca4 <_strtod_l+0x5dc>
 801bc9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bc9e:	f7e4 fcbb 	bl	8000618 <__aeabi_dmul>
 801bca2:	2301      	movs	r3, #1
 801bca4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bca8:	f109 0908 	add.w	r9, r9, #8
 801bcac:	d1f2      	bne.n	801bc94 <_strtod_l+0x5cc>
 801bcae:	b10b      	cbz	r3, 801bcb4 <_strtod_l+0x5ec>
 801bcb0:	4682      	mov	sl, r0
 801bcb2:	468b      	mov	fp, r1
 801bcb4:	9b04      	ldr	r3, [sp, #16]
 801bcb6:	b1bb      	cbz	r3, 801bce8 <_strtod_l+0x620>
 801bcb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801bcbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	4659      	mov	r1, fp
 801bcc4:	dd10      	ble.n	801bce8 <_strtod_l+0x620>
 801bcc6:	2b1f      	cmp	r3, #31
 801bcc8:	f340 8128 	ble.w	801bf1c <_strtod_l+0x854>
 801bccc:	2b34      	cmp	r3, #52	; 0x34
 801bcce:	bfde      	ittt	le
 801bcd0:	3b20      	suble	r3, #32
 801bcd2:	f04f 32ff 	movle.w	r2, #4294967295
 801bcd6:	fa02 f303 	lslle.w	r3, r2, r3
 801bcda:	f04f 0a00 	mov.w	sl, #0
 801bcde:	bfcc      	ite	gt
 801bce0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bce4:	ea03 0b01 	andle.w	fp, r3, r1
 801bce8:	2200      	movs	r2, #0
 801bcea:	2300      	movs	r3, #0
 801bcec:	4650      	mov	r0, sl
 801bcee:	4659      	mov	r1, fp
 801bcf0:	f7e4 fefa 	bl	8000ae8 <__aeabi_dcmpeq>
 801bcf4:	2800      	cmp	r0, #0
 801bcf6:	d1a4      	bne.n	801bc42 <_strtod_l+0x57a>
 801bcf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcfa:	9300      	str	r3, [sp, #0]
 801bcfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bcfe:	462b      	mov	r3, r5
 801bd00:	463a      	mov	r2, r7
 801bd02:	4620      	mov	r0, r4
 801bd04:	f002 f944 	bl	801df90 <__s2b>
 801bd08:	9009      	str	r0, [sp, #36]	; 0x24
 801bd0a:	2800      	cmp	r0, #0
 801bd0c:	f43f af24 	beq.w	801bb58 <_strtod_l+0x490>
 801bd10:	9b07      	ldr	r3, [sp, #28]
 801bd12:	1b9e      	subs	r6, r3, r6
 801bd14:	9b08      	ldr	r3, [sp, #32]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	bfb4      	ite	lt
 801bd1a:	4633      	movlt	r3, r6
 801bd1c:	2300      	movge	r3, #0
 801bd1e:	9310      	str	r3, [sp, #64]	; 0x40
 801bd20:	9b08      	ldr	r3, [sp, #32]
 801bd22:	2500      	movs	r5, #0
 801bd24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd28:	9318      	str	r3, [sp, #96]	; 0x60
 801bd2a:	462e      	mov	r6, r5
 801bd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd2e:	4620      	mov	r0, r4
 801bd30:	6859      	ldr	r1, [r3, #4]
 801bd32:	f002 f881 	bl	801de38 <_Balloc>
 801bd36:	9007      	str	r0, [sp, #28]
 801bd38:	2800      	cmp	r0, #0
 801bd3a:	f43f af11 	beq.w	801bb60 <_strtod_l+0x498>
 801bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd40:	691a      	ldr	r2, [r3, #16]
 801bd42:	3202      	adds	r2, #2
 801bd44:	f103 010c 	add.w	r1, r3, #12
 801bd48:	0092      	lsls	r2, r2, #2
 801bd4a:	300c      	adds	r0, #12
 801bd4c:	f7fe fb4e 	bl	801a3ec <memcpy>
 801bd50:	ec4b ab10 	vmov	d0, sl, fp
 801bd54:	aa20      	add	r2, sp, #128	; 0x80
 801bd56:	a91f      	add	r1, sp, #124	; 0x7c
 801bd58:	4620      	mov	r0, r4
 801bd5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bd5e:	f002 fc53 	bl	801e608 <__d2b>
 801bd62:	901e      	str	r0, [sp, #120]	; 0x78
 801bd64:	2800      	cmp	r0, #0
 801bd66:	f43f aefb 	beq.w	801bb60 <_strtod_l+0x498>
 801bd6a:	2101      	movs	r1, #1
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	f002 f9a9 	bl	801e0c4 <__i2b>
 801bd72:	4606      	mov	r6, r0
 801bd74:	2800      	cmp	r0, #0
 801bd76:	f43f aef3 	beq.w	801bb60 <_strtod_l+0x498>
 801bd7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bd7c:	9904      	ldr	r1, [sp, #16]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	bfab      	itete	ge
 801bd82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801bd84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bd86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bd88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bd8c:	bfac      	ite	ge
 801bd8e:	eb03 0902 	addge.w	r9, r3, r2
 801bd92:	1ad7      	sublt	r7, r2, r3
 801bd94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bd96:	eba3 0801 	sub.w	r8, r3, r1
 801bd9a:	4490      	add	r8, r2
 801bd9c:	4ba3      	ldr	r3, [pc, #652]	; (801c02c <_strtod_l+0x964>)
 801bd9e:	f108 38ff 	add.w	r8, r8, #4294967295
 801bda2:	4598      	cmp	r8, r3
 801bda4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bda8:	f280 80cc 	bge.w	801bf44 <_strtod_l+0x87c>
 801bdac:	eba3 0308 	sub.w	r3, r3, r8
 801bdb0:	2b1f      	cmp	r3, #31
 801bdb2:	eba2 0203 	sub.w	r2, r2, r3
 801bdb6:	f04f 0101 	mov.w	r1, #1
 801bdba:	f300 80b6 	bgt.w	801bf2a <_strtod_l+0x862>
 801bdbe:	fa01 f303 	lsl.w	r3, r1, r3
 801bdc2:	9311      	str	r3, [sp, #68]	; 0x44
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	930c      	str	r3, [sp, #48]	; 0x30
 801bdc8:	eb09 0802 	add.w	r8, r9, r2
 801bdcc:	9b04      	ldr	r3, [sp, #16]
 801bdce:	45c1      	cmp	r9, r8
 801bdd0:	4417      	add	r7, r2
 801bdd2:	441f      	add	r7, r3
 801bdd4:	464b      	mov	r3, r9
 801bdd6:	bfa8      	it	ge
 801bdd8:	4643      	movge	r3, r8
 801bdda:	42bb      	cmp	r3, r7
 801bddc:	bfa8      	it	ge
 801bdde:	463b      	movge	r3, r7
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	bfc2      	ittt	gt
 801bde4:	eba8 0803 	subgt.w	r8, r8, r3
 801bde8:	1aff      	subgt	r7, r7, r3
 801bdea:	eba9 0903 	subgt.w	r9, r9, r3
 801bdee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	dd17      	ble.n	801be24 <_strtod_l+0x75c>
 801bdf4:	4631      	mov	r1, r6
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f002 fa1f 	bl	801e23c <__pow5mult>
 801bdfe:	4606      	mov	r6, r0
 801be00:	2800      	cmp	r0, #0
 801be02:	f43f aead 	beq.w	801bb60 <_strtod_l+0x498>
 801be06:	4601      	mov	r1, r0
 801be08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801be0a:	4620      	mov	r0, r4
 801be0c:	f002 f970 	bl	801e0f0 <__multiply>
 801be10:	900f      	str	r0, [sp, #60]	; 0x3c
 801be12:	2800      	cmp	r0, #0
 801be14:	f43f aea4 	beq.w	801bb60 <_strtod_l+0x498>
 801be18:	991e      	ldr	r1, [sp, #120]	; 0x78
 801be1a:	4620      	mov	r0, r4
 801be1c:	f002 f84c 	bl	801deb8 <_Bfree>
 801be20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be22:	931e      	str	r3, [sp, #120]	; 0x78
 801be24:	f1b8 0f00 	cmp.w	r8, #0
 801be28:	f300 8091 	bgt.w	801bf4e <_strtod_l+0x886>
 801be2c:	9b08      	ldr	r3, [sp, #32]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	dd08      	ble.n	801be44 <_strtod_l+0x77c>
 801be32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801be34:	9907      	ldr	r1, [sp, #28]
 801be36:	4620      	mov	r0, r4
 801be38:	f002 fa00 	bl	801e23c <__pow5mult>
 801be3c:	9007      	str	r0, [sp, #28]
 801be3e:	2800      	cmp	r0, #0
 801be40:	f43f ae8e 	beq.w	801bb60 <_strtod_l+0x498>
 801be44:	2f00      	cmp	r7, #0
 801be46:	dd08      	ble.n	801be5a <_strtod_l+0x792>
 801be48:	9907      	ldr	r1, [sp, #28]
 801be4a:	463a      	mov	r2, r7
 801be4c:	4620      	mov	r0, r4
 801be4e:	f002 fa4f 	bl	801e2f0 <__lshift>
 801be52:	9007      	str	r0, [sp, #28]
 801be54:	2800      	cmp	r0, #0
 801be56:	f43f ae83 	beq.w	801bb60 <_strtod_l+0x498>
 801be5a:	f1b9 0f00 	cmp.w	r9, #0
 801be5e:	dd08      	ble.n	801be72 <_strtod_l+0x7aa>
 801be60:	4631      	mov	r1, r6
 801be62:	464a      	mov	r2, r9
 801be64:	4620      	mov	r0, r4
 801be66:	f002 fa43 	bl	801e2f0 <__lshift>
 801be6a:	4606      	mov	r6, r0
 801be6c:	2800      	cmp	r0, #0
 801be6e:	f43f ae77 	beq.w	801bb60 <_strtod_l+0x498>
 801be72:	9a07      	ldr	r2, [sp, #28]
 801be74:	991e      	ldr	r1, [sp, #120]	; 0x78
 801be76:	4620      	mov	r0, r4
 801be78:	f002 fac2 	bl	801e400 <__mdiff>
 801be7c:	4605      	mov	r5, r0
 801be7e:	2800      	cmp	r0, #0
 801be80:	f43f ae6e 	beq.w	801bb60 <_strtod_l+0x498>
 801be84:	68c3      	ldr	r3, [r0, #12]
 801be86:	930f      	str	r3, [sp, #60]	; 0x3c
 801be88:	2300      	movs	r3, #0
 801be8a:	60c3      	str	r3, [r0, #12]
 801be8c:	4631      	mov	r1, r6
 801be8e:	f002 fa9b 	bl	801e3c8 <__mcmp>
 801be92:	2800      	cmp	r0, #0
 801be94:	da65      	bge.n	801bf62 <_strtod_l+0x89a>
 801be96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be98:	ea53 030a 	orrs.w	r3, r3, sl
 801be9c:	f040 8087 	bne.w	801bfae <_strtod_l+0x8e6>
 801bea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	f040 8082 	bne.w	801bfae <_strtod_l+0x8e6>
 801beaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801beae:	0d1b      	lsrs	r3, r3, #20
 801beb0:	051b      	lsls	r3, r3, #20
 801beb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801beb6:	d97a      	bls.n	801bfae <_strtod_l+0x8e6>
 801beb8:	696b      	ldr	r3, [r5, #20]
 801beba:	b913      	cbnz	r3, 801bec2 <_strtod_l+0x7fa>
 801bebc:	692b      	ldr	r3, [r5, #16]
 801bebe:	2b01      	cmp	r3, #1
 801bec0:	dd75      	ble.n	801bfae <_strtod_l+0x8e6>
 801bec2:	4629      	mov	r1, r5
 801bec4:	2201      	movs	r2, #1
 801bec6:	4620      	mov	r0, r4
 801bec8:	f002 fa12 	bl	801e2f0 <__lshift>
 801becc:	4631      	mov	r1, r6
 801bece:	4605      	mov	r5, r0
 801bed0:	f002 fa7a 	bl	801e3c8 <__mcmp>
 801bed4:	2800      	cmp	r0, #0
 801bed6:	dd6a      	ble.n	801bfae <_strtod_l+0x8e6>
 801bed8:	9904      	ldr	r1, [sp, #16]
 801beda:	4a55      	ldr	r2, [pc, #340]	; (801c030 <_strtod_l+0x968>)
 801bedc:	465b      	mov	r3, fp
 801bede:	2900      	cmp	r1, #0
 801bee0:	f000 8085 	beq.w	801bfee <_strtod_l+0x926>
 801bee4:	ea02 010b 	and.w	r1, r2, fp
 801bee8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801beec:	dc7f      	bgt.n	801bfee <_strtod_l+0x926>
 801beee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bef2:	f77f aeaa 	ble.w	801bc4a <_strtod_l+0x582>
 801bef6:	4a4f      	ldr	r2, [pc, #316]	; (801c034 <_strtod_l+0x96c>)
 801bef8:	2300      	movs	r3, #0
 801befa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801befe:	4650      	mov	r0, sl
 801bf00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801bf04:	4659      	mov	r1, fp
 801bf06:	f7e4 fb87 	bl	8000618 <__aeabi_dmul>
 801bf0a:	460b      	mov	r3, r1
 801bf0c:	4303      	orrs	r3, r0
 801bf0e:	bf08      	it	eq
 801bf10:	2322      	moveq	r3, #34	; 0x22
 801bf12:	4682      	mov	sl, r0
 801bf14:	468b      	mov	fp, r1
 801bf16:	bf08      	it	eq
 801bf18:	6023      	streq	r3, [r4, #0]
 801bf1a:	e62b      	b.n	801bb74 <_strtod_l+0x4ac>
 801bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 801bf20:	fa02 f303 	lsl.w	r3, r2, r3
 801bf24:	ea03 0a0a 	and.w	sl, r3, sl
 801bf28:	e6de      	b.n	801bce8 <_strtod_l+0x620>
 801bf2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801bf2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801bf32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801bf36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801bf3a:	fa01 f308 	lsl.w	r3, r1, r8
 801bf3e:	930c      	str	r3, [sp, #48]	; 0x30
 801bf40:	9111      	str	r1, [sp, #68]	; 0x44
 801bf42:	e741      	b.n	801bdc8 <_strtod_l+0x700>
 801bf44:	2300      	movs	r3, #0
 801bf46:	930c      	str	r3, [sp, #48]	; 0x30
 801bf48:	2301      	movs	r3, #1
 801bf4a:	9311      	str	r3, [sp, #68]	; 0x44
 801bf4c:	e73c      	b.n	801bdc8 <_strtod_l+0x700>
 801bf4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bf50:	4642      	mov	r2, r8
 801bf52:	4620      	mov	r0, r4
 801bf54:	f002 f9cc 	bl	801e2f0 <__lshift>
 801bf58:	901e      	str	r0, [sp, #120]	; 0x78
 801bf5a:	2800      	cmp	r0, #0
 801bf5c:	f47f af66 	bne.w	801be2c <_strtod_l+0x764>
 801bf60:	e5fe      	b.n	801bb60 <_strtod_l+0x498>
 801bf62:	465f      	mov	r7, fp
 801bf64:	d16e      	bne.n	801c044 <_strtod_l+0x97c>
 801bf66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bf6c:	b342      	cbz	r2, 801bfc0 <_strtod_l+0x8f8>
 801bf6e:	4a32      	ldr	r2, [pc, #200]	; (801c038 <_strtod_l+0x970>)
 801bf70:	4293      	cmp	r3, r2
 801bf72:	d128      	bne.n	801bfc6 <_strtod_l+0x8fe>
 801bf74:	9b04      	ldr	r3, [sp, #16]
 801bf76:	4650      	mov	r0, sl
 801bf78:	b1eb      	cbz	r3, 801bfb6 <_strtod_l+0x8ee>
 801bf7a:	4a2d      	ldr	r2, [pc, #180]	; (801c030 <_strtod_l+0x968>)
 801bf7c:	403a      	ands	r2, r7
 801bf7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bf82:	f04f 31ff 	mov.w	r1, #4294967295
 801bf86:	d819      	bhi.n	801bfbc <_strtod_l+0x8f4>
 801bf88:	0d12      	lsrs	r2, r2, #20
 801bf8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bf8e:	fa01 f303 	lsl.w	r3, r1, r3
 801bf92:	4298      	cmp	r0, r3
 801bf94:	d117      	bne.n	801bfc6 <_strtod_l+0x8fe>
 801bf96:	4b29      	ldr	r3, [pc, #164]	; (801c03c <_strtod_l+0x974>)
 801bf98:	429f      	cmp	r7, r3
 801bf9a:	d102      	bne.n	801bfa2 <_strtod_l+0x8da>
 801bf9c:	3001      	adds	r0, #1
 801bf9e:	f43f addf 	beq.w	801bb60 <_strtod_l+0x498>
 801bfa2:	4b23      	ldr	r3, [pc, #140]	; (801c030 <_strtod_l+0x968>)
 801bfa4:	403b      	ands	r3, r7
 801bfa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bfaa:	f04f 0a00 	mov.w	sl, #0
 801bfae:	9b04      	ldr	r3, [sp, #16]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d1a0      	bne.n	801bef6 <_strtod_l+0x82e>
 801bfb4:	e5de      	b.n	801bb74 <_strtod_l+0x4ac>
 801bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 801bfba:	e7ea      	b.n	801bf92 <_strtod_l+0x8ca>
 801bfbc:	460b      	mov	r3, r1
 801bfbe:	e7e8      	b.n	801bf92 <_strtod_l+0x8ca>
 801bfc0:	ea53 030a 	orrs.w	r3, r3, sl
 801bfc4:	d088      	beq.n	801bed8 <_strtod_l+0x810>
 801bfc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfc8:	b1db      	cbz	r3, 801c002 <_strtod_l+0x93a>
 801bfca:	423b      	tst	r3, r7
 801bfcc:	d0ef      	beq.n	801bfae <_strtod_l+0x8e6>
 801bfce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bfd0:	9a04      	ldr	r2, [sp, #16]
 801bfd2:	4650      	mov	r0, sl
 801bfd4:	4659      	mov	r1, fp
 801bfd6:	b1c3      	cbz	r3, 801c00a <_strtod_l+0x942>
 801bfd8:	f7ff fb59 	bl	801b68e <sulp>
 801bfdc:	4602      	mov	r2, r0
 801bfde:	460b      	mov	r3, r1
 801bfe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bfe4:	f7e4 f962 	bl	80002ac <__adddf3>
 801bfe8:	4682      	mov	sl, r0
 801bfea:	468b      	mov	fp, r1
 801bfec:	e7df      	b.n	801bfae <_strtod_l+0x8e6>
 801bfee:	4013      	ands	r3, r2
 801bff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bffc:	f04f 3aff 	mov.w	sl, #4294967295
 801c000:	e7d5      	b.n	801bfae <_strtod_l+0x8e6>
 801c002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c004:	ea13 0f0a 	tst.w	r3, sl
 801c008:	e7e0      	b.n	801bfcc <_strtod_l+0x904>
 801c00a:	f7ff fb40 	bl	801b68e <sulp>
 801c00e:	4602      	mov	r2, r0
 801c010:	460b      	mov	r3, r1
 801c012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c016:	f7e4 f947 	bl	80002a8 <__aeabi_dsub>
 801c01a:	2200      	movs	r2, #0
 801c01c:	2300      	movs	r3, #0
 801c01e:	4682      	mov	sl, r0
 801c020:	468b      	mov	fp, r1
 801c022:	f7e4 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 801c026:	2800      	cmp	r0, #0
 801c028:	d0c1      	beq.n	801bfae <_strtod_l+0x8e6>
 801c02a:	e60e      	b.n	801bc4a <_strtod_l+0x582>
 801c02c:	fffffc02 	.word	0xfffffc02
 801c030:	7ff00000 	.word	0x7ff00000
 801c034:	39500000 	.word	0x39500000
 801c038:	000fffff 	.word	0x000fffff
 801c03c:	7fefffff 	.word	0x7fefffff
 801c040:	080214e0 	.word	0x080214e0
 801c044:	4631      	mov	r1, r6
 801c046:	4628      	mov	r0, r5
 801c048:	f002 fb3a 	bl	801e6c0 <__ratio>
 801c04c:	ec59 8b10 	vmov	r8, r9, d0
 801c050:	ee10 0a10 	vmov	r0, s0
 801c054:	2200      	movs	r2, #0
 801c056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c05a:	4649      	mov	r1, r9
 801c05c:	f7e4 fd58 	bl	8000b10 <__aeabi_dcmple>
 801c060:	2800      	cmp	r0, #0
 801c062:	d07c      	beq.n	801c15e <_strtod_l+0xa96>
 801c064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c066:	2b00      	cmp	r3, #0
 801c068:	d04c      	beq.n	801c104 <_strtod_l+0xa3c>
 801c06a:	4b95      	ldr	r3, [pc, #596]	; (801c2c0 <_strtod_l+0xbf8>)
 801c06c:	2200      	movs	r2, #0
 801c06e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c2c0 <_strtod_l+0xbf8>
 801c076:	f04f 0800 	mov.w	r8, #0
 801c07a:	4b92      	ldr	r3, [pc, #584]	; (801c2c4 <_strtod_l+0xbfc>)
 801c07c:	403b      	ands	r3, r7
 801c07e:	9311      	str	r3, [sp, #68]	; 0x44
 801c080:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c082:	4b91      	ldr	r3, [pc, #580]	; (801c2c8 <_strtod_l+0xc00>)
 801c084:	429a      	cmp	r2, r3
 801c086:	f040 80b2 	bne.w	801c1ee <_strtod_l+0xb26>
 801c08a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c092:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c096:	ec4b ab10 	vmov	d0, sl, fp
 801c09a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c09e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c0a2:	f002 fa35 	bl	801e510 <__ulp>
 801c0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c0aa:	ec53 2b10 	vmov	r2, r3, d0
 801c0ae:	f7e4 fab3 	bl	8000618 <__aeabi_dmul>
 801c0b2:	4652      	mov	r2, sl
 801c0b4:	465b      	mov	r3, fp
 801c0b6:	f7e4 f8f9 	bl	80002ac <__adddf3>
 801c0ba:	460b      	mov	r3, r1
 801c0bc:	4981      	ldr	r1, [pc, #516]	; (801c2c4 <_strtod_l+0xbfc>)
 801c0be:	4a83      	ldr	r2, [pc, #524]	; (801c2cc <_strtod_l+0xc04>)
 801c0c0:	4019      	ands	r1, r3
 801c0c2:	4291      	cmp	r1, r2
 801c0c4:	4682      	mov	sl, r0
 801c0c6:	d95e      	bls.n	801c186 <_strtod_l+0xabe>
 801c0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c0ce:	4293      	cmp	r3, r2
 801c0d0:	d103      	bne.n	801c0da <_strtod_l+0xa12>
 801c0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0d4:	3301      	adds	r3, #1
 801c0d6:	f43f ad43 	beq.w	801bb60 <_strtod_l+0x498>
 801c0da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c2d8 <_strtod_l+0xc10>
 801c0de:	f04f 3aff 	mov.w	sl, #4294967295
 801c0e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f001 fee7 	bl	801deb8 <_Bfree>
 801c0ea:	9907      	ldr	r1, [sp, #28]
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	f001 fee3 	bl	801deb8 <_Bfree>
 801c0f2:	4631      	mov	r1, r6
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	f001 fedf 	bl	801deb8 <_Bfree>
 801c0fa:	4629      	mov	r1, r5
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f001 fedb 	bl	801deb8 <_Bfree>
 801c102:	e613      	b.n	801bd2c <_strtod_l+0x664>
 801c104:	f1ba 0f00 	cmp.w	sl, #0
 801c108:	d11b      	bne.n	801c142 <_strtod_l+0xa7a>
 801c10a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c10e:	b9f3      	cbnz	r3, 801c14e <_strtod_l+0xa86>
 801c110:	4b6b      	ldr	r3, [pc, #428]	; (801c2c0 <_strtod_l+0xbf8>)
 801c112:	2200      	movs	r2, #0
 801c114:	4640      	mov	r0, r8
 801c116:	4649      	mov	r1, r9
 801c118:	f7e4 fcf0 	bl	8000afc <__aeabi_dcmplt>
 801c11c:	b9d0      	cbnz	r0, 801c154 <_strtod_l+0xa8c>
 801c11e:	4640      	mov	r0, r8
 801c120:	4649      	mov	r1, r9
 801c122:	4b6b      	ldr	r3, [pc, #428]	; (801c2d0 <_strtod_l+0xc08>)
 801c124:	2200      	movs	r2, #0
 801c126:	f7e4 fa77 	bl	8000618 <__aeabi_dmul>
 801c12a:	4680      	mov	r8, r0
 801c12c:	4689      	mov	r9, r1
 801c12e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c132:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c136:	931b      	str	r3, [sp, #108]	; 0x6c
 801c138:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c13c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c140:	e79b      	b.n	801c07a <_strtod_l+0x9b2>
 801c142:	f1ba 0f01 	cmp.w	sl, #1
 801c146:	d102      	bne.n	801c14e <_strtod_l+0xa86>
 801c148:	2f00      	cmp	r7, #0
 801c14a:	f43f ad7e 	beq.w	801bc4a <_strtod_l+0x582>
 801c14e:	4b61      	ldr	r3, [pc, #388]	; (801c2d4 <_strtod_l+0xc0c>)
 801c150:	2200      	movs	r2, #0
 801c152:	e78c      	b.n	801c06e <_strtod_l+0x9a6>
 801c154:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c2d0 <_strtod_l+0xc08>
 801c158:	f04f 0800 	mov.w	r8, #0
 801c15c:	e7e7      	b.n	801c12e <_strtod_l+0xa66>
 801c15e:	4b5c      	ldr	r3, [pc, #368]	; (801c2d0 <_strtod_l+0xc08>)
 801c160:	4640      	mov	r0, r8
 801c162:	4649      	mov	r1, r9
 801c164:	2200      	movs	r2, #0
 801c166:	f7e4 fa57 	bl	8000618 <__aeabi_dmul>
 801c16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c16c:	4680      	mov	r8, r0
 801c16e:	4689      	mov	r9, r1
 801c170:	b933      	cbnz	r3, 801c180 <_strtod_l+0xab8>
 801c172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c176:	9012      	str	r0, [sp, #72]	; 0x48
 801c178:	9313      	str	r3, [sp, #76]	; 0x4c
 801c17a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c17e:	e7dd      	b.n	801c13c <_strtod_l+0xa74>
 801c180:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c184:	e7f9      	b.n	801c17a <_strtod_l+0xab2>
 801c186:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c18a:	9b04      	ldr	r3, [sp, #16]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d1a8      	bne.n	801c0e2 <_strtod_l+0xa1a>
 801c190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c196:	0d1b      	lsrs	r3, r3, #20
 801c198:	051b      	lsls	r3, r3, #20
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d1a1      	bne.n	801c0e2 <_strtod_l+0xa1a>
 801c19e:	4640      	mov	r0, r8
 801c1a0:	4649      	mov	r1, r9
 801c1a2:	f7e4 fd99 	bl	8000cd8 <__aeabi_d2lz>
 801c1a6:	f7e4 fa09 	bl	80005bc <__aeabi_l2d>
 801c1aa:	4602      	mov	r2, r0
 801c1ac:	460b      	mov	r3, r1
 801c1ae:	4640      	mov	r0, r8
 801c1b0:	4649      	mov	r1, r9
 801c1b2:	f7e4 f879 	bl	80002a8 <__aeabi_dsub>
 801c1b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1bc:	ea43 030a 	orr.w	r3, r3, sl
 801c1c0:	4313      	orrs	r3, r2
 801c1c2:	4680      	mov	r8, r0
 801c1c4:	4689      	mov	r9, r1
 801c1c6:	d053      	beq.n	801c270 <_strtod_l+0xba8>
 801c1c8:	a335      	add	r3, pc, #212	; (adr r3, 801c2a0 <_strtod_l+0xbd8>)
 801c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ce:	f7e4 fc95 	bl	8000afc <__aeabi_dcmplt>
 801c1d2:	2800      	cmp	r0, #0
 801c1d4:	f47f acce 	bne.w	801bb74 <_strtod_l+0x4ac>
 801c1d8:	a333      	add	r3, pc, #204	; (adr r3, 801c2a8 <_strtod_l+0xbe0>)
 801c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1de:	4640      	mov	r0, r8
 801c1e0:	4649      	mov	r1, r9
 801c1e2:	f7e4 fca9 	bl	8000b38 <__aeabi_dcmpgt>
 801c1e6:	2800      	cmp	r0, #0
 801c1e8:	f43f af7b 	beq.w	801c0e2 <_strtod_l+0xa1a>
 801c1ec:	e4c2      	b.n	801bb74 <_strtod_l+0x4ac>
 801c1ee:	9b04      	ldr	r3, [sp, #16]
 801c1f0:	b333      	cbz	r3, 801c240 <_strtod_l+0xb78>
 801c1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c1f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c1f8:	d822      	bhi.n	801c240 <_strtod_l+0xb78>
 801c1fa:	a32d      	add	r3, pc, #180	; (adr r3, 801c2b0 <_strtod_l+0xbe8>)
 801c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c200:	4640      	mov	r0, r8
 801c202:	4649      	mov	r1, r9
 801c204:	f7e4 fc84 	bl	8000b10 <__aeabi_dcmple>
 801c208:	b1a0      	cbz	r0, 801c234 <_strtod_l+0xb6c>
 801c20a:	4649      	mov	r1, r9
 801c20c:	4640      	mov	r0, r8
 801c20e:	f7e4 fcdb 	bl	8000bc8 <__aeabi_d2uiz>
 801c212:	2801      	cmp	r0, #1
 801c214:	bf38      	it	cc
 801c216:	2001      	movcc	r0, #1
 801c218:	f7e4 f984 	bl	8000524 <__aeabi_ui2d>
 801c21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c21e:	4680      	mov	r8, r0
 801c220:	4689      	mov	r9, r1
 801c222:	bb13      	cbnz	r3, 801c26a <_strtod_l+0xba2>
 801c224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c228:	9014      	str	r0, [sp, #80]	; 0x50
 801c22a:	9315      	str	r3, [sp, #84]	; 0x54
 801c22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c230:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c238:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c23c:	1a9b      	subs	r3, r3, r2
 801c23e:	930d      	str	r3, [sp, #52]	; 0x34
 801c240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c244:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c24c:	f002 f960 	bl	801e510 <__ulp>
 801c250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c254:	ec53 2b10 	vmov	r2, r3, d0
 801c258:	f7e4 f9de 	bl	8000618 <__aeabi_dmul>
 801c25c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c260:	f7e4 f824 	bl	80002ac <__adddf3>
 801c264:	4682      	mov	sl, r0
 801c266:	468b      	mov	fp, r1
 801c268:	e78f      	b.n	801c18a <_strtod_l+0xac2>
 801c26a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c26e:	e7dd      	b.n	801c22c <_strtod_l+0xb64>
 801c270:	a311      	add	r3, pc, #68	; (adr r3, 801c2b8 <_strtod_l+0xbf0>)
 801c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c276:	f7e4 fc41 	bl	8000afc <__aeabi_dcmplt>
 801c27a:	e7b4      	b.n	801c1e6 <_strtod_l+0xb1e>
 801c27c:	2300      	movs	r3, #0
 801c27e:	930e      	str	r3, [sp, #56]	; 0x38
 801c280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c284:	6013      	str	r3, [r2, #0]
 801c286:	f7ff ba65 	b.w	801b754 <_strtod_l+0x8c>
 801c28a:	2b65      	cmp	r3, #101	; 0x65
 801c28c:	f43f ab5d 	beq.w	801b94a <_strtod_l+0x282>
 801c290:	2b45      	cmp	r3, #69	; 0x45
 801c292:	f43f ab5a 	beq.w	801b94a <_strtod_l+0x282>
 801c296:	2201      	movs	r2, #1
 801c298:	f7ff bb92 	b.w	801b9c0 <_strtod_l+0x2f8>
 801c29c:	f3af 8000 	nop.w
 801c2a0:	94a03595 	.word	0x94a03595
 801c2a4:	3fdfffff 	.word	0x3fdfffff
 801c2a8:	35afe535 	.word	0x35afe535
 801c2ac:	3fe00000 	.word	0x3fe00000
 801c2b0:	ffc00000 	.word	0xffc00000
 801c2b4:	41dfffff 	.word	0x41dfffff
 801c2b8:	94a03595 	.word	0x94a03595
 801c2bc:	3fcfffff 	.word	0x3fcfffff
 801c2c0:	3ff00000 	.word	0x3ff00000
 801c2c4:	7ff00000 	.word	0x7ff00000
 801c2c8:	7fe00000 	.word	0x7fe00000
 801c2cc:	7c9fffff 	.word	0x7c9fffff
 801c2d0:	3fe00000 	.word	0x3fe00000
 801c2d4:	bff00000 	.word	0xbff00000
 801c2d8:	7fefffff 	.word	0x7fefffff

0801c2dc <_strtod_r>:
 801c2dc:	4b01      	ldr	r3, [pc, #4]	; (801c2e4 <_strtod_r+0x8>)
 801c2de:	f7ff b9f3 	b.w	801b6c8 <_strtod_l>
 801c2e2:	bf00      	nop
 801c2e4:	20000260 	.word	0x20000260

0801c2e8 <_strtol_l.isra.0>:
 801c2e8:	2b01      	cmp	r3, #1
 801c2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2ee:	d001      	beq.n	801c2f4 <_strtol_l.isra.0+0xc>
 801c2f0:	2b24      	cmp	r3, #36	; 0x24
 801c2f2:	d906      	bls.n	801c302 <_strtol_l.isra.0+0x1a>
 801c2f4:	f7fd ff4e 	bl	801a194 <__errno>
 801c2f8:	2316      	movs	r3, #22
 801c2fa:	6003      	str	r3, [r0, #0]
 801c2fc:	2000      	movs	r0, #0
 801c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c302:	4f3a      	ldr	r7, [pc, #232]	; (801c3ec <_strtol_l.isra.0+0x104>)
 801c304:	468e      	mov	lr, r1
 801c306:	4676      	mov	r6, lr
 801c308:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c30c:	5de5      	ldrb	r5, [r4, r7]
 801c30e:	f015 0508 	ands.w	r5, r5, #8
 801c312:	d1f8      	bne.n	801c306 <_strtol_l.isra.0+0x1e>
 801c314:	2c2d      	cmp	r4, #45	; 0x2d
 801c316:	d134      	bne.n	801c382 <_strtol_l.isra.0+0x9a>
 801c318:	f89e 4000 	ldrb.w	r4, [lr]
 801c31c:	f04f 0801 	mov.w	r8, #1
 801c320:	f106 0e02 	add.w	lr, r6, #2
 801c324:	2b00      	cmp	r3, #0
 801c326:	d05c      	beq.n	801c3e2 <_strtol_l.isra.0+0xfa>
 801c328:	2b10      	cmp	r3, #16
 801c32a:	d10c      	bne.n	801c346 <_strtol_l.isra.0+0x5e>
 801c32c:	2c30      	cmp	r4, #48	; 0x30
 801c32e:	d10a      	bne.n	801c346 <_strtol_l.isra.0+0x5e>
 801c330:	f89e 4000 	ldrb.w	r4, [lr]
 801c334:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c338:	2c58      	cmp	r4, #88	; 0x58
 801c33a:	d14d      	bne.n	801c3d8 <_strtol_l.isra.0+0xf0>
 801c33c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c340:	2310      	movs	r3, #16
 801c342:	f10e 0e02 	add.w	lr, lr, #2
 801c346:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c34a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c34e:	2600      	movs	r6, #0
 801c350:	fbbc f9f3 	udiv	r9, ip, r3
 801c354:	4635      	mov	r5, r6
 801c356:	fb03 ca19 	mls	sl, r3, r9, ip
 801c35a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c35e:	2f09      	cmp	r7, #9
 801c360:	d818      	bhi.n	801c394 <_strtol_l.isra.0+0xac>
 801c362:	463c      	mov	r4, r7
 801c364:	42a3      	cmp	r3, r4
 801c366:	dd24      	ble.n	801c3b2 <_strtol_l.isra.0+0xca>
 801c368:	2e00      	cmp	r6, #0
 801c36a:	db1f      	blt.n	801c3ac <_strtol_l.isra.0+0xc4>
 801c36c:	45a9      	cmp	r9, r5
 801c36e:	d31d      	bcc.n	801c3ac <_strtol_l.isra.0+0xc4>
 801c370:	d101      	bne.n	801c376 <_strtol_l.isra.0+0x8e>
 801c372:	45a2      	cmp	sl, r4
 801c374:	db1a      	blt.n	801c3ac <_strtol_l.isra.0+0xc4>
 801c376:	fb05 4503 	mla	r5, r5, r3, r4
 801c37a:	2601      	movs	r6, #1
 801c37c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c380:	e7eb      	b.n	801c35a <_strtol_l.isra.0+0x72>
 801c382:	2c2b      	cmp	r4, #43	; 0x2b
 801c384:	bf08      	it	eq
 801c386:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c38a:	46a8      	mov	r8, r5
 801c38c:	bf08      	it	eq
 801c38e:	f106 0e02 	addeq.w	lr, r6, #2
 801c392:	e7c7      	b.n	801c324 <_strtol_l.isra.0+0x3c>
 801c394:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c398:	2f19      	cmp	r7, #25
 801c39a:	d801      	bhi.n	801c3a0 <_strtol_l.isra.0+0xb8>
 801c39c:	3c37      	subs	r4, #55	; 0x37
 801c39e:	e7e1      	b.n	801c364 <_strtol_l.isra.0+0x7c>
 801c3a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c3a4:	2f19      	cmp	r7, #25
 801c3a6:	d804      	bhi.n	801c3b2 <_strtol_l.isra.0+0xca>
 801c3a8:	3c57      	subs	r4, #87	; 0x57
 801c3aa:	e7db      	b.n	801c364 <_strtol_l.isra.0+0x7c>
 801c3ac:	f04f 36ff 	mov.w	r6, #4294967295
 801c3b0:	e7e4      	b.n	801c37c <_strtol_l.isra.0+0x94>
 801c3b2:	2e00      	cmp	r6, #0
 801c3b4:	da05      	bge.n	801c3c2 <_strtol_l.isra.0+0xda>
 801c3b6:	2322      	movs	r3, #34	; 0x22
 801c3b8:	6003      	str	r3, [r0, #0]
 801c3ba:	4665      	mov	r5, ip
 801c3bc:	b942      	cbnz	r2, 801c3d0 <_strtol_l.isra.0+0xe8>
 801c3be:	4628      	mov	r0, r5
 801c3c0:	e79d      	b.n	801c2fe <_strtol_l.isra.0+0x16>
 801c3c2:	f1b8 0f00 	cmp.w	r8, #0
 801c3c6:	d000      	beq.n	801c3ca <_strtol_l.isra.0+0xe2>
 801c3c8:	426d      	negs	r5, r5
 801c3ca:	2a00      	cmp	r2, #0
 801c3cc:	d0f7      	beq.n	801c3be <_strtol_l.isra.0+0xd6>
 801c3ce:	b10e      	cbz	r6, 801c3d4 <_strtol_l.isra.0+0xec>
 801c3d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c3d4:	6011      	str	r1, [r2, #0]
 801c3d6:	e7f2      	b.n	801c3be <_strtol_l.isra.0+0xd6>
 801c3d8:	2430      	movs	r4, #48	; 0x30
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d1b3      	bne.n	801c346 <_strtol_l.isra.0+0x5e>
 801c3de:	2308      	movs	r3, #8
 801c3e0:	e7b1      	b.n	801c346 <_strtol_l.isra.0+0x5e>
 801c3e2:	2c30      	cmp	r4, #48	; 0x30
 801c3e4:	d0a4      	beq.n	801c330 <_strtol_l.isra.0+0x48>
 801c3e6:	230a      	movs	r3, #10
 801c3e8:	e7ad      	b.n	801c346 <_strtol_l.isra.0+0x5e>
 801c3ea:	bf00      	nop
 801c3ec:	08021319 	.word	0x08021319

0801c3f0 <_strtol_r>:
 801c3f0:	f7ff bf7a 	b.w	801c2e8 <_strtol_l.isra.0>

0801c3f4 <strtol>:
 801c3f4:	4613      	mov	r3, r2
 801c3f6:	460a      	mov	r2, r1
 801c3f8:	4601      	mov	r1, r0
 801c3fa:	4802      	ldr	r0, [pc, #8]	; (801c404 <strtol+0x10>)
 801c3fc:	6800      	ldr	r0, [r0, #0]
 801c3fe:	f7ff bf73 	b.w	801c2e8 <_strtol_l.isra.0>
 801c402:	bf00      	nop
 801c404:	200001f8 	.word	0x200001f8

0801c408 <_strtoul_l.isra.0>:
 801c408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c40c:	4e3b      	ldr	r6, [pc, #236]	; (801c4fc <_strtoul_l.isra.0+0xf4>)
 801c40e:	4686      	mov	lr, r0
 801c410:	468c      	mov	ip, r1
 801c412:	4660      	mov	r0, ip
 801c414:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c418:	5da5      	ldrb	r5, [r4, r6]
 801c41a:	f015 0508 	ands.w	r5, r5, #8
 801c41e:	d1f8      	bne.n	801c412 <_strtoul_l.isra.0+0xa>
 801c420:	2c2d      	cmp	r4, #45	; 0x2d
 801c422:	d134      	bne.n	801c48e <_strtoul_l.isra.0+0x86>
 801c424:	f89c 4000 	ldrb.w	r4, [ip]
 801c428:	f04f 0801 	mov.w	r8, #1
 801c42c:	f100 0c02 	add.w	ip, r0, #2
 801c430:	2b00      	cmp	r3, #0
 801c432:	d05e      	beq.n	801c4f2 <_strtoul_l.isra.0+0xea>
 801c434:	2b10      	cmp	r3, #16
 801c436:	d10c      	bne.n	801c452 <_strtoul_l.isra.0+0x4a>
 801c438:	2c30      	cmp	r4, #48	; 0x30
 801c43a:	d10a      	bne.n	801c452 <_strtoul_l.isra.0+0x4a>
 801c43c:	f89c 0000 	ldrb.w	r0, [ip]
 801c440:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c444:	2858      	cmp	r0, #88	; 0x58
 801c446:	d14f      	bne.n	801c4e8 <_strtoul_l.isra.0+0xe0>
 801c448:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c44c:	2310      	movs	r3, #16
 801c44e:	f10c 0c02 	add.w	ip, ip, #2
 801c452:	f04f 37ff 	mov.w	r7, #4294967295
 801c456:	2500      	movs	r5, #0
 801c458:	fbb7 f7f3 	udiv	r7, r7, r3
 801c45c:	fb03 f907 	mul.w	r9, r3, r7
 801c460:	ea6f 0909 	mvn.w	r9, r9
 801c464:	4628      	mov	r0, r5
 801c466:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c46a:	2e09      	cmp	r6, #9
 801c46c:	d818      	bhi.n	801c4a0 <_strtoul_l.isra.0+0x98>
 801c46e:	4634      	mov	r4, r6
 801c470:	42a3      	cmp	r3, r4
 801c472:	dd24      	ble.n	801c4be <_strtoul_l.isra.0+0xb6>
 801c474:	2d00      	cmp	r5, #0
 801c476:	db1f      	blt.n	801c4b8 <_strtoul_l.isra.0+0xb0>
 801c478:	4287      	cmp	r7, r0
 801c47a:	d31d      	bcc.n	801c4b8 <_strtoul_l.isra.0+0xb0>
 801c47c:	d101      	bne.n	801c482 <_strtoul_l.isra.0+0x7a>
 801c47e:	45a1      	cmp	r9, r4
 801c480:	db1a      	blt.n	801c4b8 <_strtoul_l.isra.0+0xb0>
 801c482:	fb00 4003 	mla	r0, r0, r3, r4
 801c486:	2501      	movs	r5, #1
 801c488:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c48c:	e7eb      	b.n	801c466 <_strtoul_l.isra.0+0x5e>
 801c48e:	2c2b      	cmp	r4, #43	; 0x2b
 801c490:	bf08      	it	eq
 801c492:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c496:	46a8      	mov	r8, r5
 801c498:	bf08      	it	eq
 801c49a:	f100 0c02 	addeq.w	ip, r0, #2
 801c49e:	e7c7      	b.n	801c430 <_strtoul_l.isra.0+0x28>
 801c4a0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c4a4:	2e19      	cmp	r6, #25
 801c4a6:	d801      	bhi.n	801c4ac <_strtoul_l.isra.0+0xa4>
 801c4a8:	3c37      	subs	r4, #55	; 0x37
 801c4aa:	e7e1      	b.n	801c470 <_strtoul_l.isra.0+0x68>
 801c4ac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c4b0:	2e19      	cmp	r6, #25
 801c4b2:	d804      	bhi.n	801c4be <_strtoul_l.isra.0+0xb6>
 801c4b4:	3c57      	subs	r4, #87	; 0x57
 801c4b6:	e7db      	b.n	801c470 <_strtoul_l.isra.0+0x68>
 801c4b8:	f04f 35ff 	mov.w	r5, #4294967295
 801c4bc:	e7e4      	b.n	801c488 <_strtoul_l.isra.0+0x80>
 801c4be:	2d00      	cmp	r5, #0
 801c4c0:	da07      	bge.n	801c4d2 <_strtoul_l.isra.0+0xca>
 801c4c2:	2322      	movs	r3, #34	; 0x22
 801c4c4:	f8ce 3000 	str.w	r3, [lr]
 801c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c4cc:	b942      	cbnz	r2, 801c4e0 <_strtoul_l.isra.0+0xd8>
 801c4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4d2:	f1b8 0f00 	cmp.w	r8, #0
 801c4d6:	d000      	beq.n	801c4da <_strtoul_l.isra.0+0xd2>
 801c4d8:	4240      	negs	r0, r0
 801c4da:	2a00      	cmp	r2, #0
 801c4dc:	d0f7      	beq.n	801c4ce <_strtoul_l.isra.0+0xc6>
 801c4de:	b10d      	cbz	r5, 801c4e4 <_strtoul_l.isra.0+0xdc>
 801c4e0:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c4e4:	6011      	str	r1, [r2, #0]
 801c4e6:	e7f2      	b.n	801c4ce <_strtoul_l.isra.0+0xc6>
 801c4e8:	2430      	movs	r4, #48	; 0x30
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d1b1      	bne.n	801c452 <_strtoul_l.isra.0+0x4a>
 801c4ee:	2308      	movs	r3, #8
 801c4f0:	e7af      	b.n	801c452 <_strtoul_l.isra.0+0x4a>
 801c4f2:	2c30      	cmp	r4, #48	; 0x30
 801c4f4:	d0a2      	beq.n	801c43c <_strtoul_l.isra.0+0x34>
 801c4f6:	230a      	movs	r3, #10
 801c4f8:	e7ab      	b.n	801c452 <_strtoul_l.isra.0+0x4a>
 801c4fa:	bf00      	nop
 801c4fc:	08021319 	.word	0x08021319

0801c500 <_strtoul_r>:
 801c500:	f7ff bf82 	b.w	801c408 <_strtoul_l.isra.0>

0801c504 <strtoul>:
 801c504:	4613      	mov	r3, r2
 801c506:	460a      	mov	r2, r1
 801c508:	4601      	mov	r1, r0
 801c50a:	4802      	ldr	r0, [pc, #8]	; (801c514 <strtoul+0x10>)
 801c50c:	6800      	ldr	r0, [r0, #0]
 801c50e:	f7ff bf7b 	b.w	801c408 <_strtoul_l.isra.0>
 801c512:	bf00      	nop
 801c514:	200001f8 	.word	0x200001f8

0801c518 <_vsniprintf_r>:
 801c518:	b530      	push	{r4, r5, lr}
 801c51a:	1e14      	subs	r4, r2, #0
 801c51c:	4605      	mov	r5, r0
 801c51e:	b09b      	sub	sp, #108	; 0x6c
 801c520:	4618      	mov	r0, r3
 801c522:	da05      	bge.n	801c530 <_vsniprintf_r+0x18>
 801c524:	238b      	movs	r3, #139	; 0x8b
 801c526:	602b      	str	r3, [r5, #0]
 801c528:	f04f 30ff 	mov.w	r0, #4294967295
 801c52c:	b01b      	add	sp, #108	; 0x6c
 801c52e:	bd30      	pop	{r4, r5, pc}
 801c530:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c534:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c538:	bf14      	ite	ne
 801c53a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c53e:	4623      	moveq	r3, r4
 801c540:	9302      	str	r3, [sp, #8]
 801c542:	9305      	str	r3, [sp, #20]
 801c544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c548:	9100      	str	r1, [sp, #0]
 801c54a:	9104      	str	r1, [sp, #16]
 801c54c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c550:	4602      	mov	r2, r0
 801c552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c554:	4669      	mov	r1, sp
 801c556:	4628      	mov	r0, r5
 801c558:	f002 f9ba 	bl	801e8d0 <_svfiprintf_r>
 801c55c:	1c43      	adds	r3, r0, #1
 801c55e:	bfbc      	itt	lt
 801c560:	238b      	movlt	r3, #139	; 0x8b
 801c562:	602b      	strlt	r3, [r5, #0]
 801c564:	2c00      	cmp	r4, #0
 801c566:	d0e1      	beq.n	801c52c <_vsniprintf_r+0x14>
 801c568:	9b00      	ldr	r3, [sp, #0]
 801c56a:	2200      	movs	r2, #0
 801c56c:	701a      	strb	r2, [r3, #0]
 801c56e:	e7dd      	b.n	801c52c <_vsniprintf_r+0x14>

0801c570 <vsniprintf>:
 801c570:	b507      	push	{r0, r1, r2, lr}
 801c572:	9300      	str	r3, [sp, #0]
 801c574:	4613      	mov	r3, r2
 801c576:	460a      	mov	r2, r1
 801c578:	4601      	mov	r1, r0
 801c57a:	4803      	ldr	r0, [pc, #12]	; (801c588 <vsniprintf+0x18>)
 801c57c:	6800      	ldr	r0, [r0, #0]
 801c57e:	f7ff ffcb 	bl	801c518 <_vsniprintf_r>
 801c582:	b003      	add	sp, #12
 801c584:	f85d fb04 	ldr.w	pc, [sp], #4
 801c588:	200001f8 	.word	0x200001f8

0801c58c <__swbuf_r>:
 801c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c58e:	460e      	mov	r6, r1
 801c590:	4614      	mov	r4, r2
 801c592:	4605      	mov	r5, r0
 801c594:	b118      	cbz	r0, 801c59e <__swbuf_r+0x12>
 801c596:	6983      	ldr	r3, [r0, #24]
 801c598:	b90b      	cbnz	r3, 801c59e <__swbuf_r+0x12>
 801c59a:	f7fd fe59 	bl	801a250 <__sinit>
 801c59e:	4b21      	ldr	r3, [pc, #132]	; (801c624 <__swbuf_r+0x98>)
 801c5a0:	429c      	cmp	r4, r3
 801c5a2:	d12b      	bne.n	801c5fc <__swbuf_r+0x70>
 801c5a4:	686c      	ldr	r4, [r5, #4]
 801c5a6:	69a3      	ldr	r3, [r4, #24]
 801c5a8:	60a3      	str	r3, [r4, #8]
 801c5aa:	89a3      	ldrh	r3, [r4, #12]
 801c5ac:	071a      	lsls	r2, r3, #28
 801c5ae:	d52f      	bpl.n	801c610 <__swbuf_r+0x84>
 801c5b0:	6923      	ldr	r3, [r4, #16]
 801c5b2:	b36b      	cbz	r3, 801c610 <__swbuf_r+0x84>
 801c5b4:	6923      	ldr	r3, [r4, #16]
 801c5b6:	6820      	ldr	r0, [r4, #0]
 801c5b8:	1ac0      	subs	r0, r0, r3
 801c5ba:	6963      	ldr	r3, [r4, #20]
 801c5bc:	b2f6      	uxtb	r6, r6
 801c5be:	4283      	cmp	r3, r0
 801c5c0:	4637      	mov	r7, r6
 801c5c2:	dc04      	bgt.n	801c5ce <__swbuf_r+0x42>
 801c5c4:	4621      	mov	r1, r4
 801c5c6:	4628      	mov	r0, r5
 801c5c8:	f000 ffe0 	bl	801d58c <_fflush_r>
 801c5cc:	bb30      	cbnz	r0, 801c61c <__swbuf_r+0x90>
 801c5ce:	68a3      	ldr	r3, [r4, #8]
 801c5d0:	3b01      	subs	r3, #1
 801c5d2:	60a3      	str	r3, [r4, #8]
 801c5d4:	6823      	ldr	r3, [r4, #0]
 801c5d6:	1c5a      	adds	r2, r3, #1
 801c5d8:	6022      	str	r2, [r4, #0]
 801c5da:	701e      	strb	r6, [r3, #0]
 801c5dc:	6963      	ldr	r3, [r4, #20]
 801c5de:	3001      	adds	r0, #1
 801c5e0:	4283      	cmp	r3, r0
 801c5e2:	d004      	beq.n	801c5ee <__swbuf_r+0x62>
 801c5e4:	89a3      	ldrh	r3, [r4, #12]
 801c5e6:	07db      	lsls	r3, r3, #31
 801c5e8:	d506      	bpl.n	801c5f8 <__swbuf_r+0x6c>
 801c5ea:	2e0a      	cmp	r6, #10
 801c5ec:	d104      	bne.n	801c5f8 <__swbuf_r+0x6c>
 801c5ee:	4621      	mov	r1, r4
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	f000 ffcb 	bl	801d58c <_fflush_r>
 801c5f6:	b988      	cbnz	r0, 801c61c <__swbuf_r+0x90>
 801c5f8:	4638      	mov	r0, r7
 801c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5fc:	4b0a      	ldr	r3, [pc, #40]	; (801c628 <__swbuf_r+0x9c>)
 801c5fe:	429c      	cmp	r4, r3
 801c600:	d101      	bne.n	801c606 <__swbuf_r+0x7a>
 801c602:	68ac      	ldr	r4, [r5, #8]
 801c604:	e7cf      	b.n	801c5a6 <__swbuf_r+0x1a>
 801c606:	4b09      	ldr	r3, [pc, #36]	; (801c62c <__swbuf_r+0xa0>)
 801c608:	429c      	cmp	r4, r3
 801c60a:	bf08      	it	eq
 801c60c:	68ec      	ldreq	r4, [r5, #12]
 801c60e:	e7ca      	b.n	801c5a6 <__swbuf_r+0x1a>
 801c610:	4621      	mov	r1, r4
 801c612:	4628      	mov	r0, r5
 801c614:	f000 f81e 	bl	801c654 <__swsetup_r>
 801c618:	2800      	cmp	r0, #0
 801c61a:	d0cb      	beq.n	801c5b4 <__swbuf_r+0x28>
 801c61c:	f04f 37ff 	mov.w	r7, #4294967295
 801c620:	e7ea      	b.n	801c5f8 <__swbuf_r+0x6c>
 801c622:	bf00      	nop
 801c624:	0802143c 	.word	0x0802143c
 801c628:	0802145c 	.word	0x0802145c
 801c62c:	0802141c 	.word	0x0802141c

0801c630 <_write_r>:
 801c630:	b538      	push	{r3, r4, r5, lr}
 801c632:	4d07      	ldr	r5, [pc, #28]	; (801c650 <_write_r+0x20>)
 801c634:	4604      	mov	r4, r0
 801c636:	4608      	mov	r0, r1
 801c638:	4611      	mov	r1, r2
 801c63a:	2200      	movs	r2, #0
 801c63c:	602a      	str	r2, [r5, #0]
 801c63e:	461a      	mov	r2, r3
 801c640:	f7e6 fc2f 	bl	8002ea2 <_write>
 801c644:	1c43      	adds	r3, r0, #1
 801c646:	d102      	bne.n	801c64e <_write_r+0x1e>
 801c648:	682b      	ldr	r3, [r5, #0]
 801c64a:	b103      	cbz	r3, 801c64e <_write_r+0x1e>
 801c64c:	6023      	str	r3, [r4, #0]
 801c64e:	bd38      	pop	{r3, r4, r5, pc}
 801c650:	20008fb4 	.word	0x20008fb4

0801c654 <__swsetup_r>:
 801c654:	4b32      	ldr	r3, [pc, #200]	; (801c720 <__swsetup_r+0xcc>)
 801c656:	b570      	push	{r4, r5, r6, lr}
 801c658:	681d      	ldr	r5, [r3, #0]
 801c65a:	4606      	mov	r6, r0
 801c65c:	460c      	mov	r4, r1
 801c65e:	b125      	cbz	r5, 801c66a <__swsetup_r+0x16>
 801c660:	69ab      	ldr	r3, [r5, #24]
 801c662:	b913      	cbnz	r3, 801c66a <__swsetup_r+0x16>
 801c664:	4628      	mov	r0, r5
 801c666:	f7fd fdf3 	bl	801a250 <__sinit>
 801c66a:	4b2e      	ldr	r3, [pc, #184]	; (801c724 <__swsetup_r+0xd0>)
 801c66c:	429c      	cmp	r4, r3
 801c66e:	d10f      	bne.n	801c690 <__swsetup_r+0x3c>
 801c670:	686c      	ldr	r4, [r5, #4]
 801c672:	89a3      	ldrh	r3, [r4, #12]
 801c674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c678:	0719      	lsls	r1, r3, #28
 801c67a:	d42c      	bmi.n	801c6d6 <__swsetup_r+0x82>
 801c67c:	06dd      	lsls	r5, r3, #27
 801c67e:	d411      	bmi.n	801c6a4 <__swsetup_r+0x50>
 801c680:	2309      	movs	r3, #9
 801c682:	6033      	str	r3, [r6, #0]
 801c684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c688:	81a3      	strh	r3, [r4, #12]
 801c68a:	f04f 30ff 	mov.w	r0, #4294967295
 801c68e:	e03e      	b.n	801c70e <__swsetup_r+0xba>
 801c690:	4b25      	ldr	r3, [pc, #148]	; (801c728 <__swsetup_r+0xd4>)
 801c692:	429c      	cmp	r4, r3
 801c694:	d101      	bne.n	801c69a <__swsetup_r+0x46>
 801c696:	68ac      	ldr	r4, [r5, #8]
 801c698:	e7eb      	b.n	801c672 <__swsetup_r+0x1e>
 801c69a:	4b24      	ldr	r3, [pc, #144]	; (801c72c <__swsetup_r+0xd8>)
 801c69c:	429c      	cmp	r4, r3
 801c69e:	bf08      	it	eq
 801c6a0:	68ec      	ldreq	r4, [r5, #12]
 801c6a2:	e7e6      	b.n	801c672 <__swsetup_r+0x1e>
 801c6a4:	0758      	lsls	r0, r3, #29
 801c6a6:	d512      	bpl.n	801c6ce <__swsetup_r+0x7a>
 801c6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6aa:	b141      	cbz	r1, 801c6be <__swsetup_r+0x6a>
 801c6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6b0:	4299      	cmp	r1, r3
 801c6b2:	d002      	beq.n	801c6ba <__swsetup_r+0x66>
 801c6b4:	4630      	mov	r0, r6
 801c6b6:	f7fd fec9 	bl	801a44c <_free_r>
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	6363      	str	r3, [r4, #52]	; 0x34
 801c6be:	89a3      	ldrh	r3, [r4, #12]
 801c6c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c6c4:	81a3      	strh	r3, [r4, #12]
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	6063      	str	r3, [r4, #4]
 801c6ca:	6923      	ldr	r3, [r4, #16]
 801c6cc:	6023      	str	r3, [r4, #0]
 801c6ce:	89a3      	ldrh	r3, [r4, #12]
 801c6d0:	f043 0308 	orr.w	r3, r3, #8
 801c6d4:	81a3      	strh	r3, [r4, #12]
 801c6d6:	6923      	ldr	r3, [r4, #16]
 801c6d8:	b94b      	cbnz	r3, 801c6ee <__swsetup_r+0x9a>
 801c6da:	89a3      	ldrh	r3, [r4, #12]
 801c6dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c6e4:	d003      	beq.n	801c6ee <__swsetup_r+0x9a>
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	4630      	mov	r0, r6
 801c6ea:	f001 fb47 	bl	801dd7c <__smakebuf_r>
 801c6ee:	89a0      	ldrh	r0, [r4, #12]
 801c6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c6f4:	f010 0301 	ands.w	r3, r0, #1
 801c6f8:	d00a      	beq.n	801c710 <__swsetup_r+0xbc>
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	60a3      	str	r3, [r4, #8]
 801c6fe:	6963      	ldr	r3, [r4, #20]
 801c700:	425b      	negs	r3, r3
 801c702:	61a3      	str	r3, [r4, #24]
 801c704:	6923      	ldr	r3, [r4, #16]
 801c706:	b943      	cbnz	r3, 801c71a <__swsetup_r+0xc6>
 801c708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c70c:	d1ba      	bne.n	801c684 <__swsetup_r+0x30>
 801c70e:	bd70      	pop	{r4, r5, r6, pc}
 801c710:	0781      	lsls	r1, r0, #30
 801c712:	bf58      	it	pl
 801c714:	6963      	ldrpl	r3, [r4, #20]
 801c716:	60a3      	str	r3, [r4, #8]
 801c718:	e7f4      	b.n	801c704 <__swsetup_r+0xb0>
 801c71a:	2000      	movs	r0, #0
 801c71c:	e7f7      	b.n	801c70e <__swsetup_r+0xba>
 801c71e:	bf00      	nop
 801c720:	200001f8 	.word	0x200001f8
 801c724:	0802143c 	.word	0x0802143c
 801c728:	0802145c 	.word	0x0802145c
 801c72c:	0802141c 	.word	0x0802141c

0801c730 <__assert_func>:
 801c730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c732:	4614      	mov	r4, r2
 801c734:	461a      	mov	r2, r3
 801c736:	4b09      	ldr	r3, [pc, #36]	; (801c75c <__assert_func+0x2c>)
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4605      	mov	r5, r0
 801c73c:	68d8      	ldr	r0, [r3, #12]
 801c73e:	b14c      	cbz	r4, 801c754 <__assert_func+0x24>
 801c740:	4b07      	ldr	r3, [pc, #28]	; (801c760 <__assert_func+0x30>)
 801c742:	9100      	str	r1, [sp, #0]
 801c744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c748:	4906      	ldr	r1, [pc, #24]	; (801c764 <__assert_func+0x34>)
 801c74a:	462b      	mov	r3, r5
 801c74c:	f000 ff5a 	bl	801d604 <fiprintf>
 801c750:	f7fd fd18 	bl	801a184 <abort>
 801c754:	4b04      	ldr	r3, [pc, #16]	; (801c768 <__assert_func+0x38>)
 801c756:	461c      	mov	r4, r3
 801c758:	e7f3      	b.n	801c742 <__assert_func+0x12>
 801c75a:	bf00      	nop
 801c75c:	200001f8 	.word	0x200001f8
 801c760:	08021508 	.word	0x08021508
 801c764:	08021515 	.word	0x08021515
 801c768:	08021543 	.word	0x08021543

0801c76c <_close_r>:
 801c76c:	b538      	push	{r3, r4, r5, lr}
 801c76e:	4d06      	ldr	r5, [pc, #24]	; (801c788 <_close_r+0x1c>)
 801c770:	2300      	movs	r3, #0
 801c772:	4604      	mov	r4, r0
 801c774:	4608      	mov	r0, r1
 801c776:	602b      	str	r3, [r5, #0]
 801c778:	f7e6 fbaf 	bl	8002eda <_close>
 801c77c:	1c43      	adds	r3, r0, #1
 801c77e:	d102      	bne.n	801c786 <_close_r+0x1a>
 801c780:	682b      	ldr	r3, [r5, #0]
 801c782:	b103      	cbz	r3, 801c786 <_close_r+0x1a>
 801c784:	6023      	str	r3, [r4, #0]
 801c786:	bd38      	pop	{r3, r4, r5, pc}
 801c788:	20008fb4 	.word	0x20008fb4

0801c78c <quorem>:
 801c78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c790:	6903      	ldr	r3, [r0, #16]
 801c792:	690c      	ldr	r4, [r1, #16]
 801c794:	42a3      	cmp	r3, r4
 801c796:	4607      	mov	r7, r0
 801c798:	f2c0 8081 	blt.w	801c89e <quorem+0x112>
 801c79c:	3c01      	subs	r4, #1
 801c79e:	f101 0814 	add.w	r8, r1, #20
 801c7a2:	f100 0514 	add.w	r5, r0, #20
 801c7a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c7aa:	9301      	str	r3, [sp, #4]
 801c7ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c7b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c7b4:	3301      	adds	r3, #1
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c7bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c7c0:	fbb2 f6f3 	udiv	r6, r2, r3
 801c7c4:	d331      	bcc.n	801c82a <quorem+0x9e>
 801c7c6:	f04f 0e00 	mov.w	lr, #0
 801c7ca:	4640      	mov	r0, r8
 801c7cc:	46ac      	mov	ip, r5
 801c7ce:	46f2      	mov	sl, lr
 801c7d0:	f850 2b04 	ldr.w	r2, [r0], #4
 801c7d4:	b293      	uxth	r3, r2
 801c7d6:	fb06 e303 	mla	r3, r6, r3, lr
 801c7da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c7de:	b29b      	uxth	r3, r3
 801c7e0:	ebaa 0303 	sub.w	r3, sl, r3
 801c7e4:	0c12      	lsrs	r2, r2, #16
 801c7e6:	f8dc a000 	ldr.w	sl, [ip]
 801c7ea:	fb06 e202 	mla	r2, r6, r2, lr
 801c7ee:	fa13 f38a 	uxtah	r3, r3, sl
 801c7f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c7f6:	fa1f fa82 	uxth.w	sl, r2
 801c7fa:	f8dc 2000 	ldr.w	r2, [ip]
 801c7fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c802:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c806:	b29b      	uxth	r3, r3
 801c808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c80c:	4581      	cmp	r9, r0
 801c80e:	f84c 3b04 	str.w	r3, [ip], #4
 801c812:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c816:	d2db      	bcs.n	801c7d0 <quorem+0x44>
 801c818:	f855 300b 	ldr.w	r3, [r5, fp]
 801c81c:	b92b      	cbnz	r3, 801c82a <quorem+0x9e>
 801c81e:	9b01      	ldr	r3, [sp, #4]
 801c820:	3b04      	subs	r3, #4
 801c822:	429d      	cmp	r5, r3
 801c824:	461a      	mov	r2, r3
 801c826:	d32e      	bcc.n	801c886 <quorem+0xfa>
 801c828:	613c      	str	r4, [r7, #16]
 801c82a:	4638      	mov	r0, r7
 801c82c:	f001 fdcc 	bl	801e3c8 <__mcmp>
 801c830:	2800      	cmp	r0, #0
 801c832:	db24      	blt.n	801c87e <quorem+0xf2>
 801c834:	3601      	adds	r6, #1
 801c836:	4628      	mov	r0, r5
 801c838:	f04f 0c00 	mov.w	ip, #0
 801c83c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c840:	f8d0 e000 	ldr.w	lr, [r0]
 801c844:	b293      	uxth	r3, r2
 801c846:	ebac 0303 	sub.w	r3, ip, r3
 801c84a:	0c12      	lsrs	r2, r2, #16
 801c84c:	fa13 f38e 	uxtah	r3, r3, lr
 801c850:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c858:	b29b      	uxth	r3, r3
 801c85a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c85e:	45c1      	cmp	r9, r8
 801c860:	f840 3b04 	str.w	r3, [r0], #4
 801c864:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c868:	d2e8      	bcs.n	801c83c <quorem+0xb0>
 801c86a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c86e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c872:	b922      	cbnz	r2, 801c87e <quorem+0xf2>
 801c874:	3b04      	subs	r3, #4
 801c876:	429d      	cmp	r5, r3
 801c878:	461a      	mov	r2, r3
 801c87a:	d30a      	bcc.n	801c892 <quorem+0x106>
 801c87c:	613c      	str	r4, [r7, #16]
 801c87e:	4630      	mov	r0, r6
 801c880:	b003      	add	sp, #12
 801c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c886:	6812      	ldr	r2, [r2, #0]
 801c888:	3b04      	subs	r3, #4
 801c88a:	2a00      	cmp	r2, #0
 801c88c:	d1cc      	bne.n	801c828 <quorem+0x9c>
 801c88e:	3c01      	subs	r4, #1
 801c890:	e7c7      	b.n	801c822 <quorem+0x96>
 801c892:	6812      	ldr	r2, [r2, #0]
 801c894:	3b04      	subs	r3, #4
 801c896:	2a00      	cmp	r2, #0
 801c898:	d1f0      	bne.n	801c87c <quorem+0xf0>
 801c89a:	3c01      	subs	r4, #1
 801c89c:	e7eb      	b.n	801c876 <quorem+0xea>
 801c89e:	2000      	movs	r0, #0
 801c8a0:	e7ee      	b.n	801c880 <quorem+0xf4>
 801c8a2:	0000      	movs	r0, r0
 801c8a4:	0000      	movs	r0, r0
	...

0801c8a8 <_dtoa_r>:
 801c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ac:	ed2d 8b02 	vpush	{d8}
 801c8b0:	ec57 6b10 	vmov	r6, r7, d0
 801c8b4:	b095      	sub	sp, #84	; 0x54
 801c8b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c8b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c8bc:	9105      	str	r1, [sp, #20]
 801c8be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c8c2:	4604      	mov	r4, r0
 801c8c4:	9209      	str	r2, [sp, #36]	; 0x24
 801c8c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c8c8:	b975      	cbnz	r5, 801c8e8 <_dtoa_r+0x40>
 801c8ca:	2010      	movs	r0, #16
 801c8cc:	f7fd fd86 	bl	801a3dc <malloc>
 801c8d0:	4602      	mov	r2, r0
 801c8d2:	6260      	str	r0, [r4, #36]	; 0x24
 801c8d4:	b920      	cbnz	r0, 801c8e0 <_dtoa_r+0x38>
 801c8d6:	4bb2      	ldr	r3, [pc, #712]	; (801cba0 <_dtoa_r+0x2f8>)
 801c8d8:	21ea      	movs	r1, #234	; 0xea
 801c8da:	48b2      	ldr	r0, [pc, #712]	; (801cba4 <_dtoa_r+0x2fc>)
 801c8dc:	f7ff ff28 	bl	801c730 <__assert_func>
 801c8e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c8e4:	6005      	str	r5, [r0, #0]
 801c8e6:	60c5      	str	r5, [r0, #12]
 801c8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c8ea:	6819      	ldr	r1, [r3, #0]
 801c8ec:	b151      	cbz	r1, 801c904 <_dtoa_r+0x5c>
 801c8ee:	685a      	ldr	r2, [r3, #4]
 801c8f0:	604a      	str	r2, [r1, #4]
 801c8f2:	2301      	movs	r3, #1
 801c8f4:	4093      	lsls	r3, r2
 801c8f6:	608b      	str	r3, [r1, #8]
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	f001 fadd 	bl	801deb8 <_Bfree>
 801c8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c900:	2200      	movs	r2, #0
 801c902:	601a      	str	r2, [r3, #0]
 801c904:	1e3b      	subs	r3, r7, #0
 801c906:	bfb9      	ittee	lt
 801c908:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c90c:	9303      	strlt	r3, [sp, #12]
 801c90e:	2300      	movge	r3, #0
 801c910:	f8c8 3000 	strge.w	r3, [r8]
 801c914:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c918:	4ba3      	ldr	r3, [pc, #652]	; (801cba8 <_dtoa_r+0x300>)
 801c91a:	bfbc      	itt	lt
 801c91c:	2201      	movlt	r2, #1
 801c91e:	f8c8 2000 	strlt.w	r2, [r8]
 801c922:	ea33 0309 	bics.w	r3, r3, r9
 801c926:	d11b      	bne.n	801c960 <_dtoa_r+0xb8>
 801c928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c92a:	f242 730f 	movw	r3, #9999	; 0x270f
 801c92e:	6013      	str	r3, [r2, #0]
 801c930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c934:	4333      	orrs	r3, r6
 801c936:	f000 857a 	beq.w	801d42e <_dtoa_r+0xb86>
 801c93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c93c:	b963      	cbnz	r3, 801c958 <_dtoa_r+0xb0>
 801c93e:	4b9b      	ldr	r3, [pc, #620]	; (801cbac <_dtoa_r+0x304>)
 801c940:	e024      	b.n	801c98c <_dtoa_r+0xe4>
 801c942:	4b9b      	ldr	r3, [pc, #620]	; (801cbb0 <_dtoa_r+0x308>)
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	3308      	adds	r3, #8
 801c948:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c94a:	6013      	str	r3, [r2, #0]
 801c94c:	9800      	ldr	r0, [sp, #0]
 801c94e:	b015      	add	sp, #84	; 0x54
 801c950:	ecbd 8b02 	vpop	{d8}
 801c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c958:	4b94      	ldr	r3, [pc, #592]	; (801cbac <_dtoa_r+0x304>)
 801c95a:	9300      	str	r3, [sp, #0]
 801c95c:	3303      	adds	r3, #3
 801c95e:	e7f3      	b.n	801c948 <_dtoa_r+0xa0>
 801c960:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c964:	2200      	movs	r2, #0
 801c966:	ec51 0b17 	vmov	r0, r1, d7
 801c96a:	2300      	movs	r3, #0
 801c96c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c970:	f7e4 f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 801c974:	4680      	mov	r8, r0
 801c976:	b158      	cbz	r0, 801c990 <_dtoa_r+0xe8>
 801c978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c97a:	2301      	movs	r3, #1
 801c97c:	6013      	str	r3, [r2, #0]
 801c97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c980:	2b00      	cmp	r3, #0
 801c982:	f000 8551 	beq.w	801d428 <_dtoa_r+0xb80>
 801c986:	488b      	ldr	r0, [pc, #556]	; (801cbb4 <_dtoa_r+0x30c>)
 801c988:	6018      	str	r0, [r3, #0]
 801c98a:	1e43      	subs	r3, r0, #1
 801c98c:	9300      	str	r3, [sp, #0]
 801c98e:	e7dd      	b.n	801c94c <_dtoa_r+0xa4>
 801c990:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c994:	aa12      	add	r2, sp, #72	; 0x48
 801c996:	a913      	add	r1, sp, #76	; 0x4c
 801c998:	4620      	mov	r0, r4
 801c99a:	f001 fe35 	bl	801e608 <__d2b>
 801c99e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c9a2:	4683      	mov	fp, r0
 801c9a4:	2d00      	cmp	r5, #0
 801c9a6:	d07c      	beq.n	801caa2 <_dtoa_r+0x1fa>
 801c9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c9b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c9b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c9ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c9c2:	4b7d      	ldr	r3, [pc, #500]	; (801cbb8 <_dtoa_r+0x310>)
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	4639      	mov	r1, r7
 801c9ca:	f7e3 fc6d 	bl	80002a8 <__aeabi_dsub>
 801c9ce:	a36e      	add	r3, pc, #440	; (adr r3, 801cb88 <_dtoa_r+0x2e0>)
 801c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9d4:	f7e3 fe20 	bl	8000618 <__aeabi_dmul>
 801c9d8:	a36d      	add	r3, pc, #436	; (adr r3, 801cb90 <_dtoa_r+0x2e8>)
 801c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9de:	f7e3 fc65 	bl	80002ac <__adddf3>
 801c9e2:	4606      	mov	r6, r0
 801c9e4:	4628      	mov	r0, r5
 801c9e6:	460f      	mov	r7, r1
 801c9e8:	f7e3 fdac 	bl	8000544 <__aeabi_i2d>
 801c9ec:	a36a      	add	r3, pc, #424	; (adr r3, 801cb98 <_dtoa_r+0x2f0>)
 801c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9f2:	f7e3 fe11 	bl	8000618 <__aeabi_dmul>
 801c9f6:	4602      	mov	r2, r0
 801c9f8:	460b      	mov	r3, r1
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	4639      	mov	r1, r7
 801c9fe:	f7e3 fc55 	bl	80002ac <__adddf3>
 801ca02:	4606      	mov	r6, r0
 801ca04:	460f      	mov	r7, r1
 801ca06:	f7e4 f8b7 	bl	8000b78 <__aeabi_d2iz>
 801ca0a:	2200      	movs	r2, #0
 801ca0c:	4682      	mov	sl, r0
 801ca0e:	2300      	movs	r3, #0
 801ca10:	4630      	mov	r0, r6
 801ca12:	4639      	mov	r1, r7
 801ca14:	f7e4 f872 	bl	8000afc <__aeabi_dcmplt>
 801ca18:	b148      	cbz	r0, 801ca2e <_dtoa_r+0x186>
 801ca1a:	4650      	mov	r0, sl
 801ca1c:	f7e3 fd92 	bl	8000544 <__aeabi_i2d>
 801ca20:	4632      	mov	r2, r6
 801ca22:	463b      	mov	r3, r7
 801ca24:	f7e4 f860 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca28:	b908      	cbnz	r0, 801ca2e <_dtoa_r+0x186>
 801ca2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca2e:	f1ba 0f16 	cmp.w	sl, #22
 801ca32:	d854      	bhi.n	801cade <_dtoa_r+0x236>
 801ca34:	4b61      	ldr	r3, [pc, #388]	; (801cbbc <_dtoa_r+0x314>)
 801ca36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ca42:	f7e4 f85b 	bl	8000afc <__aeabi_dcmplt>
 801ca46:	2800      	cmp	r0, #0
 801ca48:	d04b      	beq.n	801cae2 <_dtoa_r+0x23a>
 801ca4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca4e:	2300      	movs	r3, #0
 801ca50:	930e      	str	r3, [sp, #56]	; 0x38
 801ca52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca54:	1b5d      	subs	r5, r3, r5
 801ca56:	1e6b      	subs	r3, r5, #1
 801ca58:	9304      	str	r3, [sp, #16]
 801ca5a:	bf43      	ittte	mi
 801ca5c:	2300      	movmi	r3, #0
 801ca5e:	f1c5 0801 	rsbmi	r8, r5, #1
 801ca62:	9304      	strmi	r3, [sp, #16]
 801ca64:	f04f 0800 	movpl.w	r8, #0
 801ca68:	f1ba 0f00 	cmp.w	sl, #0
 801ca6c:	db3b      	blt.n	801cae6 <_dtoa_r+0x23e>
 801ca6e:	9b04      	ldr	r3, [sp, #16]
 801ca70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ca74:	4453      	add	r3, sl
 801ca76:	9304      	str	r3, [sp, #16]
 801ca78:	2300      	movs	r3, #0
 801ca7a:	9306      	str	r3, [sp, #24]
 801ca7c:	9b05      	ldr	r3, [sp, #20]
 801ca7e:	2b09      	cmp	r3, #9
 801ca80:	d869      	bhi.n	801cb56 <_dtoa_r+0x2ae>
 801ca82:	2b05      	cmp	r3, #5
 801ca84:	bfc4      	itt	gt
 801ca86:	3b04      	subgt	r3, #4
 801ca88:	9305      	strgt	r3, [sp, #20]
 801ca8a:	9b05      	ldr	r3, [sp, #20]
 801ca8c:	f1a3 0302 	sub.w	r3, r3, #2
 801ca90:	bfcc      	ite	gt
 801ca92:	2500      	movgt	r5, #0
 801ca94:	2501      	movle	r5, #1
 801ca96:	2b03      	cmp	r3, #3
 801ca98:	d869      	bhi.n	801cb6e <_dtoa_r+0x2c6>
 801ca9a:	e8df f003 	tbb	[pc, r3]
 801ca9e:	4e2c      	.short	0x4e2c
 801caa0:	5a4c      	.short	0x5a4c
 801caa2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801caa6:	441d      	add	r5, r3
 801caa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801caac:	2b20      	cmp	r3, #32
 801caae:	bfc1      	itttt	gt
 801cab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cab4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801cab8:	fa09 f303 	lslgt.w	r3, r9, r3
 801cabc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801cac0:	bfda      	itte	le
 801cac2:	f1c3 0320 	rsble	r3, r3, #32
 801cac6:	fa06 f003 	lslle.w	r0, r6, r3
 801caca:	4318      	orrgt	r0, r3
 801cacc:	f7e3 fd2a 	bl	8000524 <__aeabi_ui2d>
 801cad0:	2301      	movs	r3, #1
 801cad2:	4606      	mov	r6, r0
 801cad4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801cad8:	3d01      	subs	r5, #1
 801cada:	9310      	str	r3, [sp, #64]	; 0x40
 801cadc:	e771      	b.n	801c9c2 <_dtoa_r+0x11a>
 801cade:	2301      	movs	r3, #1
 801cae0:	e7b6      	b.n	801ca50 <_dtoa_r+0x1a8>
 801cae2:	900e      	str	r0, [sp, #56]	; 0x38
 801cae4:	e7b5      	b.n	801ca52 <_dtoa_r+0x1aa>
 801cae6:	f1ca 0300 	rsb	r3, sl, #0
 801caea:	9306      	str	r3, [sp, #24]
 801caec:	2300      	movs	r3, #0
 801caee:	eba8 080a 	sub.w	r8, r8, sl
 801caf2:	930d      	str	r3, [sp, #52]	; 0x34
 801caf4:	e7c2      	b.n	801ca7c <_dtoa_r+0x1d4>
 801caf6:	2300      	movs	r3, #0
 801caf8:	9308      	str	r3, [sp, #32]
 801cafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	dc39      	bgt.n	801cb74 <_dtoa_r+0x2cc>
 801cb00:	f04f 0901 	mov.w	r9, #1
 801cb04:	f8cd 9004 	str.w	r9, [sp, #4]
 801cb08:	464b      	mov	r3, r9
 801cb0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801cb0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cb10:	2200      	movs	r2, #0
 801cb12:	6042      	str	r2, [r0, #4]
 801cb14:	2204      	movs	r2, #4
 801cb16:	f102 0614 	add.w	r6, r2, #20
 801cb1a:	429e      	cmp	r6, r3
 801cb1c:	6841      	ldr	r1, [r0, #4]
 801cb1e:	d92f      	bls.n	801cb80 <_dtoa_r+0x2d8>
 801cb20:	4620      	mov	r0, r4
 801cb22:	f001 f989 	bl	801de38 <_Balloc>
 801cb26:	9000      	str	r0, [sp, #0]
 801cb28:	2800      	cmp	r0, #0
 801cb2a:	d14b      	bne.n	801cbc4 <_dtoa_r+0x31c>
 801cb2c:	4b24      	ldr	r3, [pc, #144]	; (801cbc0 <_dtoa_r+0x318>)
 801cb2e:	4602      	mov	r2, r0
 801cb30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cb34:	e6d1      	b.n	801c8da <_dtoa_r+0x32>
 801cb36:	2301      	movs	r3, #1
 801cb38:	e7de      	b.n	801caf8 <_dtoa_r+0x250>
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	9308      	str	r3, [sp, #32]
 801cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb40:	eb0a 0903 	add.w	r9, sl, r3
 801cb44:	f109 0301 	add.w	r3, r9, #1
 801cb48:	2b01      	cmp	r3, #1
 801cb4a:	9301      	str	r3, [sp, #4]
 801cb4c:	bfb8      	it	lt
 801cb4e:	2301      	movlt	r3, #1
 801cb50:	e7dd      	b.n	801cb0e <_dtoa_r+0x266>
 801cb52:	2301      	movs	r3, #1
 801cb54:	e7f2      	b.n	801cb3c <_dtoa_r+0x294>
 801cb56:	2501      	movs	r5, #1
 801cb58:	2300      	movs	r3, #0
 801cb5a:	9305      	str	r3, [sp, #20]
 801cb5c:	9508      	str	r5, [sp, #32]
 801cb5e:	f04f 39ff 	mov.w	r9, #4294967295
 801cb62:	2200      	movs	r2, #0
 801cb64:	f8cd 9004 	str.w	r9, [sp, #4]
 801cb68:	2312      	movs	r3, #18
 801cb6a:	9209      	str	r2, [sp, #36]	; 0x24
 801cb6c:	e7cf      	b.n	801cb0e <_dtoa_r+0x266>
 801cb6e:	2301      	movs	r3, #1
 801cb70:	9308      	str	r3, [sp, #32]
 801cb72:	e7f4      	b.n	801cb5e <_dtoa_r+0x2b6>
 801cb74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cb78:	f8cd 9004 	str.w	r9, [sp, #4]
 801cb7c:	464b      	mov	r3, r9
 801cb7e:	e7c6      	b.n	801cb0e <_dtoa_r+0x266>
 801cb80:	3101      	adds	r1, #1
 801cb82:	6041      	str	r1, [r0, #4]
 801cb84:	0052      	lsls	r2, r2, #1
 801cb86:	e7c6      	b.n	801cb16 <_dtoa_r+0x26e>
 801cb88:	636f4361 	.word	0x636f4361
 801cb8c:	3fd287a7 	.word	0x3fd287a7
 801cb90:	8b60c8b3 	.word	0x8b60c8b3
 801cb94:	3fc68a28 	.word	0x3fc68a28
 801cb98:	509f79fb 	.word	0x509f79fb
 801cb9c:	3fd34413 	.word	0x3fd34413
 801cba0:	08021551 	.word	0x08021551
 801cba4:	08021568 	.word	0x08021568
 801cba8:	7ff00000 	.word	0x7ff00000
 801cbac:	0802154d 	.word	0x0802154d
 801cbb0:	08021544 	.word	0x08021544
 801cbb4:	080217ca 	.word	0x080217ca
 801cbb8:	3ff80000 	.word	0x3ff80000
 801cbbc:	080216e0 	.word	0x080216e0
 801cbc0:	080215c7 	.word	0x080215c7
 801cbc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbc6:	9a00      	ldr	r2, [sp, #0]
 801cbc8:	601a      	str	r2, [r3, #0]
 801cbca:	9b01      	ldr	r3, [sp, #4]
 801cbcc:	2b0e      	cmp	r3, #14
 801cbce:	f200 80ad 	bhi.w	801cd2c <_dtoa_r+0x484>
 801cbd2:	2d00      	cmp	r5, #0
 801cbd4:	f000 80aa 	beq.w	801cd2c <_dtoa_r+0x484>
 801cbd8:	f1ba 0f00 	cmp.w	sl, #0
 801cbdc:	dd36      	ble.n	801cc4c <_dtoa_r+0x3a4>
 801cbde:	4ac3      	ldr	r2, [pc, #780]	; (801ceec <_dtoa_r+0x644>)
 801cbe0:	f00a 030f 	and.w	r3, sl, #15
 801cbe4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cbe8:	ed93 7b00 	vldr	d7, [r3]
 801cbec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801cbf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801cbf4:	eeb0 8a47 	vmov.f32	s16, s14
 801cbf8:	eef0 8a67 	vmov.f32	s17, s15
 801cbfc:	d016      	beq.n	801cc2c <_dtoa_r+0x384>
 801cbfe:	4bbc      	ldr	r3, [pc, #752]	; (801cef0 <_dtoa_r+0x648>)
 801cc00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cc04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cc08:	f7e3 fe30 	bl	800086c <__aeabi_ddiv>
 801cc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc10:	f007 070f 	and.w	r7, r7, #15
 801cc14:	2503      	movs	r5, #3
 801cc16:	4eb6      	ldr	r6, [pc, #728]	; (801cef0 <_dtoa_r+0x648>)
 801cc18:	b957      	cbnz	r7, 801cc30 <_dtoa_r+0x388>
 801cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc1e:	ec53 2b18 	vmov	r2, r3, d8
 801cc22:	f7e3 fe23 	bl	800086c <__aeabi_ddiv>
 801cc26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc2a:	e029      	b.n	801cc80 <_dtoa_r+0x3d8>
 801cc2c:	2502      	movs	r5, #2
 801cc2e:	e7f2      	b.n	801cc16 <_dtoa_r+0x36e>
 801cc30:	07f9      	lsls	r1, r7, #31
 801cc32:	d508      	bpl.n	801cc46 <_dtoa_r+0x39e>
 801cc34:	ec51 0b18 	vmov	r0, r1, d8
 801cc38:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cc3c:	f7e3 fcec 	bl	8000618 <__aeabi_dmul>
 801cc40:	ec41 0b18 	vmov	d8, r0, r1
 801cc44:	3501      	adds	r5, #1
 801cc46:	107f      	asrs	r7, r7, #1
 801cc48:	3608      	adds	r6, #8
 801cc4a:	e7e5      	b.n	801cc18 <_dtoa_r+0x370>
 801cc4c:	f000 80a6 	beq.w	801cd9c <_dtoa_r+0x4f4>
 801cc50:	f1ca 0600 	rsb	r6, sl, #0
 801cc54:	4ba5      	ldr	r3, [pc, #660]	; (801ceec <_dtoa_r+0x644>)
 801cc56:	4fa6      	ldr	r7, [pc, #664]	; (801cef0 <_dtoa_r+0x648>)
 801cc58:	f006 020f 	and.w	r2, r6, #15
 801cc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cc68:	f7e3 fcd6 	bl	8000618 <__aeabi_dmul>
 801cc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc70:	1136      	asrs	r6, r6, #4
 801cc72:	2300      	movs	r3, #0
 801cc74:	2502      	movs	r5, #2
 801cc76:	2e00      	cmp	r6, #0
 801cc78:	f040 8085 	bne.w	801cd86 <_dtoa_r+0x4de>
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d1d2      	bne.n	801cc26 <_dtoa_r+0x37e>
 801cc80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	f000 808c 	beq.w	801cda0 <_dtoa_r+0x4f8>
 801cc88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cc8c:	4b99      	ldr	r3, [pc, #612]	; (801cef4 <_dtoa_r+0x64c>)
 801cc8e:	2200      	movs	r2, #0
 801cc90:	4630      	mov	r0, r6
 801cc92:	4639      	mov	r1, r7
 801cc94:	f7e3 ff32 	bl	8000afc <__aeabi_dcmplt>
 801cc98:	2800      	cmp	r0, #0
 801cc9a:	f000 8081 	beq.w	801cda0 <_dtoa_r+0x4f8>
 801cc9e:	9b01      	ldr	r3, [sp, #4]
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d07d      	beq.n	801cda0 <_dtoa_r+0x4f8>
 801cca4:	f1b9 0f00 	cmp.w	r9, #0
 801cca8:	dd3c      	ble.n	801cd24 <_dtoa_r+0x47c>
 801ccaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ccae:	9307      	str	r3, [sp, #28]
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	4b91      	ldr	r3, [pc, #580]	; (801cef8 <_dtoa_r+0x650>)
 801ccb4:	4630      	mov	r0, r6
 801ccb6:	4639      	mov	r1, r7
 801ccb8:	f7e3 fcae 	bl	8000618 <__aeabi_dmul>
 801ccbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ccc0:	3501      	adds	r5, #1
 801ccc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ccc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ccca:	4628      	mov	r0, r5
 801cccc:	f7e3 fc3a 	bl	8000544 <__aeabi_i2d>
 801ccd0:	4632      	mov	r2, r6
 801ccd2:	463b      	mov	r3, r7
 801ccd4:	f7e3 fca0 	bl	8000618 <__aeabi_dmul>
 801ccd8:	4b88      	ldr	r3, [pc, #544]	; (801cefc <_dtoa_r+0x654>)
 801ccda:	2200      	movs	r2, #0
 801ccdc:	f7e3 fae6 	bl	80002ac <__adddf3>
 801cce0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801cce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cce8:	9303      	str	r3, [sp, #12]
 801ccea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d15c      	bne.n	801cdaa <_dtoa_r+0x502>
 801ccf0:	4b83      	ldr	r3, [pc, #524]	; (801cf00 <_dtoa_r+0x658>)
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	4630      	mov	r0, r6
 801ccf6:	4639      	mov	r1, r7
 801ccf8:	f7e3 fad6 	bl	80002a8 <__aeabi_dsub>
 801ccfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cd00:	4606      	mov	r6, r0
 801cd02:	460f      	mov	r7, r1
 801cd04:	f7e3 ff18 	bl	8000b38 <__aeabi_dcmpgt>
 801cd08:	2800      	cmp	r0, #0
 801cd0a:	f040 8296 	bne.w	801d23a <_dtoa_r+0x992>
 801cd0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801cd12:	4630      	mov	r0, r6
 801cd14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd18:	4639      	mov	r1, r7
 801cd1a:	f7e3 feef 	bl	8000afc <__aeabi_dcmplt>
 801cd1e:	2800      	cmp	r0, #0
 801cd20:	f040 8288 	bne.w	801d234 <_dtoa_r+0x98c>
 801cd24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cd28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cd2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	f2c0 8158 	blt.w	801cfe4 <_dtoa_r+0x73c>
 801cd34:	f1ba 0f0e 	cmp.w	sl, #14
 801cd38:	f300 8154 	bgt.w	801cfe4 <_dtoa_r+0x73c>
 801cd3c:	4b6b      	ldr	r3, [pc, #428]	; (801ceec <_dtoa_r+0x644>)
 801cd3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cd42:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	f280 80e3 	bge.w	801cf14 <_dtoa_r+0x66c>
 801cd4e:	9b01      	ldr	r3, [sp, #4]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	f300 80df 	bgt.w	801cf14 <_dtoa_r+0x66c>
 801cd56:	f040 826d 	bne.w	801d234 <_dtoa_r+0x98c>
 801cd5a:	4b69      	ldr	r3, [pc, #420]	; (801cf00 <_dtoa_r+0x658>)
 801cd5c:	2200      	movs	r2, #0
 801cd5e:	4640      	mov	r0, r8
 801cd60:	4649      	mov	r1, r9
 801cd62:	f7e3 fc59 	bl	8000618 <__aeabi_dmul>
 801cd66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cd6a:	f7e3 fedb 	bl	8000b24 <__aeabi_dcmpge>
 801cd6e:	9e01      	ldr	r6, [sp, #4]
 801cd70:	4637      	mov	r7, r6
 801cd72:	2800      	cmp	r0, #0
 801cd74:	f040 8243 	bne.w	801d1fe <_dtoa_r+0x956>
 801cd78:	9d00      	ldr	r5, [sp, #0]
 801cd7a:	2331      	movs	r3, #49	; 0x31
 801cd7c:	f805 3b01 	strb.w	r3, [r5], #1
 801cd80:	f10a 0a01 	add.w	sl, sl, #1
 801cd84:	e23f      	b.n	801d206 <_dtoa_r+0x95e>
 801cd86:	07f2      	lsls	r2, r6, #31
 801cd88:	d505      	bpl.n	801cd96 <_dtoa_r+0x4ee>
 801cd8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cd8e:	f7e3 fc43 	bl	8000618 <__aeabi_dmul>
 801cd92:	3501      	adds	r5, #1
 801cd94:	2301      	movs	r3, #1
 801cd96:	1076      	asrs	r6, r6, #1
 801cd98:	3708      	adds	r7, #8
 801cd9a:	e76c      	b.n	801cc76 <_dtoa_r+0x3ce>
 801cd9c:	2502      	movs	r5, #2
 801cd9e:	e76f      	b.n	801cc80 <_dtoa_r+0x3d8>
 801cda0:	9b01      	ldr	r3, [sp, #4]
 801cda2:	f8cd a01c 	str.w	sl, [sp, #28]
 801cda6:	930c      	str	r3, [sp, #48]	; 0x30
 801cda8:	e78d      	b.n	801ccc6 <_dtoa_r+0x41e>
 801cdaa:	9900      	ldr	r1, [sp, #0]
 801cdac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cdae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cdb0:	4b4e      	ldr	r3, [pc, #312]	; (801ceec <_dtoa_r+0x644>)
 801cdb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cdb6:	4401      	add	r1, r0
 801cdb8:	9102      	str	r1, [sp, #8]
 801cdba:	9908      	ldr	r1, [sp, #32]
 801cdbc:	eeb0 8a47 	vmov.f32	s16, s14
 801cdc0:	eef0 8a67 	vmov.f32	s17, s15
 801cdc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cdc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cdcc:	2900      	cmp	r1, #0
 801cdce:	d045      	beq.n	801ce5c <_dtoa_r+0x5b4>
 801cdd0:	494c      	ldr	r1, [pc, #304]	; (801cf04 <_dtoa_r+0x65c>)
 801cdd2:	2000      	movs	r0, #0
 801cdd4:	f7e3 fd4a 	bl	800086c <__aeabi_ddiv>
 801cdd8:	ec53 2b18 	vmov	r2, r3, d8
 801cddc:	f7e3 fa64 	bl	80002a8 <__aeabi_dsub>
 801cde0:	9d00      	ldr	r5, [sp, #0]
 801cde2:	ec41 0b18 	vmov	d8, r0, r1
 801cde6:	4639      	mov	r1, r7
 801cde8:	4630      	mov	r0, r6
 801cdea:	f7e3 fec5 	bl	8000b78 <__aeabi_d2iz>
 801cdee:	900c      	str	r0, [sp, #48]	; 0x30
 801cdf0:	f7e3 fba8 	bl	8000544 <__aeabi_i2d>
 801cdf4:	4602      	mov	r2, r0
 801cdf6:	460b      	mov	r3, r1
 801cdf8:	4630      	mov	r0, r6
 801cdfa:	4639      	mov	r1, r7
 801cdfc:	f7e3 fa54 	bl	80002a8 <__aeabi_dsub>
 801ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce02:	3330      	adds	r3, #48	; 0x30
 801ce04:	f805 3b01 	strb.w	r3, [r5], #1
 801ce08:	ec53 2b18 	vmov	r2, r3, d8
 801ce0c:	4606      	mov	r6, r0
 801ce0e:	460f      	mov	r7, r1
 801ce10:	f7e3 fe74 	bl	8000afc <__aeabi_dcmplt>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	d165      	bne.n	801cee4 <_dtoa_r+0x63c>
 801ce18:	4632      	mov	r2, r6
 801ce1a:	463b      	mov	r3, r7
 801ce1c:	4935      	ldr	r1, [pc, #212]	; (801cef4 <_dtoa_r+0x64c>)
 801ce1e:	2000      	movs	r0, #0
 801ce20:	f7e3 fa42 	bl	80002a8 <__aeabi_dsub>
 801ce24:	ec53 2b18 	vmov	r2, r3, d8
 801ce28:	f7e3 fe68 	bl	8000afc <__aeabi_dcmplt>
 801ce2c:	2800      	cmp	r0, #0
 801ce2e:	f040 80b9 	bne.w	801cfa4 <_dtoa_r+0x6fc>
 801ce32:	9b02      	ldr	r3, [sp, #8]
 801ce34:	429d      	cmp	r5, r3
 801ce36:	f43f af75 	beq.w	801cd24 <_dtoa_r+0x47c>
 801ce3a:	4b2f      	ldr	r3, [pc, #188]	; (801cef8 <_dtoa_r+0x650>)
 801ce3c:	ec51 0b18 	vmov	r0, r1, d8
 801ce40:	2200      	movs	r2, #0
 801ce42:	f7e3 fbe9 	bl	8000618 <__aeabi_dmul>
 801ce46:	4b2c      	ldr	r3, [pc, #176]	; (801cef8 <_dtoa_r+0x650>)
 801ce48:	ec41 0b18 	vmov	d8, r0, r1
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	4630      	mov	r0, r6
 801ce50:	4639      	mov	r1, r7
 801ce52:	f7e3 fbe1 	bl	8000618 <__aeabi_dmul>
 801ce56:	4606      	mov	r6, r0
 801ce58:	460f      	mov	r7, r1
 801ce5a:	e7c4      	b.n	801cde6 <_dtoa_r+0x53e>
 801ce5c:	ec51 0b17 	vmov	r0, r1, d7
 801ce60:	f7e3 fbda 	bl	8000618 <__aeabi_dmul>
 801ce64:	9b02      	ldr	r3, [sp, #8]
 801ce66:	9d00      	ldr	r5, [sp, #0]
 801ce68:	930c      	str	r3, [sp, #48]	; 0x30
 801ce6a:	ec41 0b18 	vmov	d8, r0, r1
 801ce6e:	4639      	mov	r1, r7
 801ce70:	4630      	mov	r0, r6
 801ce72:	f7e3 fe81 	bl	8000b78 <__aeabi_d2iz>
 801ce76:	9011      	str	r0, [sp, #68]	; 0x44
 801ce78:	f7e3 fb64 	bl	8000544 <__aeabi_i2d>
 801ce7c:	4602      	mov	r2, r0
 801ce7e:	460b      	mov	r3, r1
 801ce80:	4630      	mov	r0, r6
 801ce82:	4639      	mov	r1, r7
 801ce84:	f7e3 fa10 	bl	80002a8 <__aeabi_dsub>
 801ce88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ce8a:	3330      	adds	r3, #48	; 0x30
 801ce8c:	f805 3b01 	strb.w	r3, [r5], #1
 801ce90:	9b02      	ldr	r3, [sp, #8]
 801ce92:	429d      	cmp	r5, r3
 801ce94:	4606      	mov	r6, r0
 801ce96:	460f      	mov	r7, r1
 801ce98:	f04f 0200 	mov.w	r2, #0
 801ce9c:	d134      	bne.n	801cf08 <_dtoa_r+0x660>
 801ce9e:	4b19      	ldr	r3, [pc, #100]	; (801cf04 <_dtoa_r+0x65c>)
 801cea0:	ec51 0b18 	vmov	r0, r1, d8
 801cea4:	f7e3 fa02 	bl	80002ac <__adddf3>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	460b      	mov	r3, r1
 801ceac:	4630      	mov	r0, r6
 801ceae:	4639      	mov	r1, r7
 801ceb0:	f7e3 fe42 	bl	8000b38 <__aeabi_dcmpgt>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	d175      	bne.n	801cfa4 <_dtoa_r+0x6fc>
 801ceb8:	ec53 2b18 	vmov	r2, r3, d8
 801cebc:	4911      	ldr	r1, [pc, #68]	; (801cf04 <_dtoa_r+0x65c>)
 801cebe:	2000      	movs	r0, #0
 801cec0:	f7e3 f9f2 	bl	80002a8 <__aeabi_dsub>
 801cec4:	4602      	mov	r2, r0
 801cec6:	460b      	mov	r3, r1
 801cec8:	4630      	mov	r0, r6
 801ceca:	4639      	mov	r1, r7
 801cecc:	f7e3 fe16 	bl	8000afc <__aeabi_dcmplt>
 801ced0:	2800      	cmp	r0, #0
 801ced2:	f43f af27 	beq.w	801cd24 <_dtoa_r+0x47c>
 801ced6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ced8:	1e6b      	subs	r3, r5, #1
 801ceda:	930c      	str	r3, [sp, #48]	; 0x30
 801cedc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cee0:	2b30      	cmp	r3, #48	; 0x30
 801cee2:	d0f8      	beq.n	801ced6 <_dtoa_r+0x62e>
 801cee4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cee8:	e04a      	b.n	801cf80 <_dtoa_r+0x6d8>
 801ceea:	bf00      	nop
 801ceec:	080216e0 	.word	0x080216e0
 801cef0:	080216b8 	.word	0x080216b8
 801cef4:	3ff00000 	.word	0x3ff00000
 801cef8:	40240000 	.word	0x40240000
 801cefc:	401c0000 	.word	0x401c0000
 801cf00:	40140000 	.word	0x40140000
 801cf04:	3fe00000 	.word	0x3fe00000
 801cf08:	4baf      	ldr	r3, [pc, #700]	; (801d1c8 <_dtoa_r+0x920>)
 801cf0a:	f7e3 fb85 	bl	8000618 <__aeabi_dmul>
 801cf0e:	4606      	mov	r6, r0
 801cf10:	460f      	mov	r7, r1
 801cf12:	e7ac      	b.n	801ce6e <_dtoa_r+0x5c6>
 801cf14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cf18:	9d00      	ldr	r5, [sp, #0]
 801cf1a:	4642      	mov	r2, r8
 801cf1c:	464b      	mov	r3, r9
 801cf1e:	4630      	mov	r0, r6
 801cf20:	4639      	mov	r1, r7
 801cf22:	f7e3 fca3 	bl	800086c <__aeabi_ddiv>
 801cf26:	f7e3 fe27 	bl	8000b78 <__aeabi_d2iz>
 801cf2a:	9002      	str	r0, [sp, #8]
 801cf2c:	f7e3 fb0a 	bl	8000544 <__aeabi_i2d>
 801cf30:	4642      	mov	r2, r8
 801cf32:	464b      	mov	r3, r9
 801cf34:	f7e3 fb70 	bl	8000618 <__aeabi_dmul>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	460b      	mov	r3, r1
 801cf3c:	4630      	mov	r0, r6
 801cf3e:	4639      	mov	r1, r7
 801cf40:	f7e3 f9b2 	bl	80002a8 <__aeabi_dsub>
 801cf44:	9e02      	ldr	r6, [sp, #8]
 801cf46:	9f01      	ldr	r7, [sp, #4]
 801cf48:	3630      	adds	r6, #48	; 0x30
 801cf4a:	f805 6b01 	strb.w	r6, [r5], #1
 801cf4e:	9e00      	ldr	r6, [sp, #0]
 801cf50:	1bae      	subs	r6, r5, r6
 801cf52:	42b7      	cmp	r7, r6
 801cf54:	4602      	mov	r2, r0
 801cf56:	460b      	mov	r3, r1
 801cf58:	d137      	bne.n	801cfca <_dtoa_r+0x722>
 801cf5a:	f7e3 f9a7 	bl	80002ac <__adddf3>
 801cf5e:	4642      	mov	r2, r8
 801cf60:	464b      	mov	r3, r9
 801cf62:	4606      	mov	r6, r0
 801cf64:	460f      	mov	r7, r1
 801cf66:	f7e3 fde7 	bl	8000b38 <__aeabi_dcmpgt>
 801cf6a:	b9c8      	cbnz	r0, 801cfa0 <_dtoa_r+0x6f8>
 801cf6c:	4642      	mov	r2, r8
 801cf6e:	464b      	mov	r3, r9
 801cf70:	4630      	mov	r0, r6
 801cf72:	4639      	mov	r1, r7
 801cf74:	f7e3 fdb8 	bl	8000ae8 <__aeabi_dcmpeq>
 801cf78:	b110      	cbz	r0, 801cf80 <_dtoa_r+0x6d8>
 801cf7a:	9b02      	ldr	r3, [sp, #8]
 801cf7c:	07d9      	lsls	r1, r3, #31
 801cf7e:	d40f      	bmi.n	801cfa0 <_dtoa_r+0x6f8>
 801cf80:	4620      	mov	r0, r4
 801cf82:	4659      	mov	r1, fp
 801cf84:	f000 ff98 	bl	801deb8 <_Bfree>
 801cf88:	2300      	movs	r3, #0
 801cf8a:	702b      	strb	r3, [r5, #0]
 801cf8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf8e:	f10a 0001 	add.w	r0, sl, #1
 801cf92:	6018      	str	r0, [r3, #0]
 801cf94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	f43f acd8 	beq.w	801c94c <_dtoa_r+0xa4>
 801cf9c:	601d      	str	r5, [r3, #0]
 801cf9e:	e4d5      	b.n	801c94c <_dtoa_r+0xa4>
 801cfa0:	f8cd a01c 	str.w	sl, [sp, #28]
 801cfa4:	462b      	mov	r3, r5
 801cfa6:	461d      	mov	r5, r3
 801cfa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfac:	2a39      	cmp	r2, #57	; 0x39
 801cfae:	d108      	bne.n	801cfc2 <_dtoa_r+0x71a>
 801cfb0:	9a00      	ldr	r2, [sp, #0]
 801cfb2:	429a      	cmp	r2, r3
 801cfb4:	d1f7      	bne.n	801cfa6 <_dtoa_r+0x6fe>
 801cfb6:	9a07      	ldr	r2, [sp, #28]
 801cfb8:	9900      	ldr	r1, [sp, #0]
 801cfba:	3201      	adds	r2, #1
 801cfbc:	9207      	str	r2, [sp, #28]
 801cfbe:	2230      	movs	r2, #48	; 0x30
 801cfc0:	700a      	strb	r2, [r1, #0]
 801cfc2:	781a      	ldrb	r2, [r3, #0]
 801cfc4:	3201      	adds	r2, #1
 801cfc6:	701a      	strb	r2, [r3, #0]
 801cfc8:	e78c      	b.n	801cee4 <_dtoa_r+0x63c>
 801cfca:	4b7f      	ldr	r3, [pc, #508]	; (801d1c8 <_dtoa_r+0x920>)
 801cfcc:	2200      	movs	r2, #0
 801cfce:	f7e3 fb23 	bl	8000618 <__aeabi_dmul>
 801cfd2:	2200      	movs	r2, #0
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	4606      	mov	r6, r0
 801cfd8:	460f      	mov	r7, r1
 801cfda:	f7e3 fd85 	bl	8000ae8 <__aeabi_dcmpeq>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	d09b      	beq.n	801cf1a <_dtoa_r+0x672>
 801cfe2:	e7cd      	b.n	801cf80 <_dtoa_r+0x6d8>
 801cfe4:	9a08      	ldr	r2, [sp, #32]
 801cfe6:	2a00      	cmp	r2, #0
 801cfe8:	f000 80c4 	beq.w	801d174 <_dtoa_r+0x8cc>
 801cfec:	9a05      	ldr	r2, [sp, #20]
 801cfee:	2a01      	cmp	r2, #1
 801cff0:	f300 80a8 	bgt.w	801d144 <_dtoa_r+0x89c>
 801cff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cff6:	2a00      	cmp	r2, #0
 801cff8:	f000 80a0 	beq.w	801d13c <_dtoa_r+0x894>
 801cffc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d000:	9e06      	ldr	r6, [sp, #24]
 801d002:	4645      	mov	r5, r8
 801d004:	9a04      	ldr	r2, [sp, #16]
 801d006:	2101      	movs	r1, #1
 801d008:	441a      	add	r2, r3
 801d00a:	4620      	mov	r0, r4
 801d00c:	4498      	add	r8, r3
 801d00e:	9204      	str	r2, [sp, #16]
 801d010:	f001 f858 	bl	801e0c4 <__i2b>
 801d014:	4607      	mov	r7, r0
 801d016:	2d00      	cmp	r5, #0
 801d018:	dd0b      	ble.n	801d032 <_dtoa_r+0x78a>
 801d01a:	9b04      	ldr	r3, [sp, #16]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	dd08      	ble.n	801d032 <_dtoa_r+0x78a>
 801d020:	42ab      	cmp	r3, r5
 801d022:	9a04      	ldr	r2, [sp, #16]
 801d024:	bfa8      	it	ge
 801d026:	462b      	movge	r3, r5
 801d028:	eba8 0803 	sub.w	r8, r8, r3
 801d02c:	1aed      	subs	r5, r5, r3
 801d02e:	1ad3      	subs	r3, r2, r3
 801d030:	9304      	str	r3, [sp, #16]
 801d032:	9b06      	ldr	r3, [sp, #24]
 801d034:	b1fb      	cbz	r3, 801d076 <_dtoa_r+0x7ce>
 801d036:	9b08      	ldr	r3, [sp, #32]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	f000 809f 	beq.w	801d17c <_dtoa_r+0x8d4>
 801d03e:	2e00      	cmp	r6, #0
 801d040:	dd11      	ble.n	801d066 <_dtoa_r+0x7be>
 801d042:	4639      	mov	r1, r7
 801d044:	4632      	mov	r2, r6
 801d046:	4620      	mov	r0, r4
 801d048:	f001 f8f8 	bl	801e23c <__pow5mult>
 801d04c:	465a      	mov	r2, fp
 801d04e:	4601      	mov	r1, r0
 801d050:	4607      	mov	r7, r0
 801d052:	4620      	mov	r0, r4
 801d054:	f001 f84c 	bl	801e0f0 <__multiply>
 801d058:	4659      	mov	r1, fp
 801d05a:	9007      	str	r0, [sp, #28]
 801d05c:	4620      	mov	r0, r4
 801d05e:	f000 ff2b 	bl	801deb8 <_Bfree>
 801d062:	9b07      	ldr	r3, [sp, #28]
 801d064:	469b      	mov	fp, r3
 801d066:	9b06      	ldr	r3, [sp, #24]
 801d068:	1b9a      	subs	r2, r3, r6
 801d06a:	d004      	beq.n	801d076 <_dtoa_r+0x7ce>
 801d06c:	4659      	mov	r1, fp
 801d06e:	4620      	mov	r0, r4
 801d070:	f001 f8e4 	bl	801e23c <__pow5mult>
 801d074:	4683      	mov	fp, r0
 801d076:	2101      	movs	r1, #1
 801d078:	4620      	mov	r0, r4
 801d07a:	f001 f823 	bl	801e0c4 <__i2b>
 801d07e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d080:	2b00      	cmp	r3, #0
 801d082:	4606      	mov	r6, r0
 801d084:	dd7c      	ble.n	801d180 <_dtoa_r+0x8d8>
 801d086:	461a      	mov	r2, r3
 801d088:	4601      	mov	r1, r0
 801d08a:	4620      	mov	r0, r4
 801d08c:	f001 f8d6 	bl	801e23c <__pow5mult>
 801d090:	9b05      	ldr	r3, [sp, #20]
 801d092:	2b01      	cmp	r3, #1
 801d094:	4606      	mov	r6, r0
 801d096:	dd76      	ble.n	801d186 <_dtoa_r+0x8de>
 801d098:	2300      	movs	r3, #0
 801d09a:	9306      	str	r3, [sp, #24]
 801d09c:	6933      	ldr	r3, [r6, #16]
 801d09e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d0a2:	6918      	ldr	r0, [r3, #16]
 801d0a4:	f000 ffbe 	bl	801e024 <__hi0bits>
 801d0a8:	f1c0 0020 	rsb	r0, r0, #32
 801d0ac:	9b04      	ldr	r3, [sp, #16]
 801d0ae:	4418      	add	r0, r3
 801d0b0:	f010 001f 	ands.w	r0, r0, #31
 801d0b4:	f000 8086 	beq.w	801d1c4 <_dtoa_r+0x91c>
 801d0b8:	f1c0 0320 	rsb	r3, r0, #32
 801d0bc:	2b04      	cmp	r3, #4
 801d0be:	dd7f      	ble.n	801d1c0 <_dtoa_r+0x918>
 801d0c0:	f1c0 001c 	rsb	r0, r0, #28
 801d0c4:	9b04      	ldr	r3, [sp, #16]
 801d0c6:	4403      	add	r3, r0
 801d0c8:	4480      	add	r8, r0
 801d0ca:	4405      	add	r5, r0
 801d0cc:	9304      	str	r3, [sp, #16]
 801d0ce:	f1b8 0f00 	cmp.w	r8, #0
 801d0d2:	dd05      	ble.n	801d0e0 <_dtoa_r+0x838>
 801d0d4:	4659      	mov	r1, fp
 801d0d6:	4642      	mov	r2, r8
 801d0d8:	4620      	mov	r0, r4
 801d0da:	f001 f909 	bl	801e2f0 <__lshift>
 801d0de:	4683      	mov	fp, r0
 801d0e0:	9b04      	ldr	r3, [sp, #16]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	dd05      	ble.n	801d0f2 <_dtoa_r+0x84a>
 801d0e6:	4631      	mov	r1, r6
 801d0e8:	461a      	mov	r2, r3
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	f001 f900 	bl	801e2f0 <__lshift>
 801d0f0:	4606      	mov	r6, r0
 801d0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d069      	beq.n	801d1cc <_dtoa_r+0x924>
 801d0f8:	4631      	mov	r1, r6
 801d0fa:	4658      	mov	r0, fp
 801d0fc:	f001 f964 	bl	801e3c8 <__mcmp>
 801d100:	2800      	cmp	r0, #0
 801d102:	da63      	bge.n	801d1cc <_dtoa_r+0x924>
 801d104:	2300      	movs	r3, #0
 801d106:	4659      	mov	r1, fp
 801d108:	220a      	movs	r2, #10
 801d10a:	4620      	mov	r0, r4
 801d10c:	f000 fef6 	bl	801defc <__multadd>
 801d110:	9b08      	ldr	r3, [sp, #32]
 801d112:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d116:	4683      	mov	fp, r0
 801d118:	2b00      	cmp	r3, #0
 801d11a:	f000 818f 	beq.w	801d43c <_dtoa_r+0xb94>
 801d11e:	4639      	mov	r1, r7
 801d120:	2300      	movs	r3, #0
 801d122:	220a      	movs	r2, #10
 801d124:	4620      	mov	r0, r4
 801d126:	f000 fee9 	bl	801defc <__multadd>
 801d12a:	f1b9 0f00 	cmp.w	r9, #0
 801d12e:	4607      	mov	r7, r0
 801d130:	f300 808e 	bgt.w	801d250 <_dtoa_r+0x9a8>
 801d134:	9b05      	ldr	r3, [sp, #20]
 801d136:	2b02      	cmp	r3, #2
 801d138:	dc50      	bgt.n	801d1dc <_dtoa_r+0x934>
 801d13a:	e089      	b.n	801d250 <_dtoa_r+0x9a8>
 801d13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d13e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d142:	e75d      	b.n	801d000 <_dtoa_r+0x758>
 801d144:	9b01      	ldr	r3, [sp, #4]
 801d146:	1e5e      	subs	r6, r3, #1
 801d148:	9b06      	ldr	r3, [sp, #24]
 801d14a:	42b3      	cmp	r3, r6
 801d14c:	bfbf      	itttt	lt
 801d14e:	9b06      	ldrlt	r3, [sp, #24]
 801d150:	9606      	strlt	r6, [sp, #24]
 801d152:	1af2      	sublt	r2, r6, r3
 801d154:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d156:	bfb6      	itet	lt
 801d158:	189b      	addlt	r3, r3, r2
 801d15a:	1b9e      	subge	r6, r3, r6
 801d15c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d15e:	9b01      	ldr	r3, [sp, #4]
 801d160:	bfb8      	it	lt
 801d162:	2600      	movlt	r6, #0
 801d164:	2b00      	cmp	r3, #0
 801d166:	bfb5      	itete	lt
 801d168:	eba8 0503 	sublt.w	r5, r8, r3
 801d16c:	9b01      	ldrge	r3, [sp, #4]
 801d16e:	2300      	movlt	r3, #0
 801d170:	4645      	movge	r5, r8
 801d172:	e747      	b.n	801d004 <_dtoa_r+0x75c>
 801d174:	9e06      	ldr	r6, [sp, #24]
 801d176:	9f08      	ldr	r7, [sp, #32]
 801d178:	4645      	mov	r5, r8
 801d17a:	e74c      	b.n	801d016 <_dtoa_r+0x76e>
 801d17c:	9a06      	ldr	r2, [sp, #24]
 801d17e:	e775      	b.n	801d06c <_dtoa_r+0x7c4>
 801d180:	9b05      	ldr	r3, [sp, #20]
 801d182:	2b01      	cmp	r3, #1
 801d184:	dc18      	bgt.n	801d1b8 <_dtoa_r+0x910>
 801d186:	9b02      	ldr	r3, [sp, #8]
 801d188:	b9b3      	cbnz	r3, 801d1b8 <_dtoa_r+0x910>
 801d18a:	9b03      	ldr	r3, [sp, #12]
 801d18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d190:	b9a3      	cbnz	r3, 801d1bc <_dtoa_r+0x914>
 801d192:	9b03      	ldr	r3, [sp, #12]
 801d194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d198:	0d1b      	lsrs	r3, r3, #20
 801d19a:	051b      	lsls	r3, r3, #20
 801d19c:	b12b      	cbz	r3, 801d1aa <_dtoa_r+0x902>
 801d19e:	9b04      	ldr	r3, [sp, #16]
 801d1a0:	3301      	adds	r3, #1
 801d1a2:	9304      	str	r3, [sp, #16]
 801d1a4:	f108 0801 	add.w	r8, r8, #1
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	9306      	str	r3, [sp, #24]
 801d1ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	f47f af74 	bne.w	801d09c <_dtoa_r+0x7f4>
 801d1b4:	2001      	movs	r0, #1
 801d1b6:	e779      	b.n	801d0ac <_dtoa_r+0x804>
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	e7f6      	b.n	801d1aa <_dtoa_r+0x902>
 801d1bc:	9b02      	ldr	r3, [sp, #8]
 801d1be:	e7f4      	b.n	801d1aa <_dtoa_r+0x902>
 801d1c0:	d085      	beq.n	801d0ce <_dtoa_r+0x826>
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	301c      	adds	r0, #28
 801d1c6:	e77d      	b.n	801d0c4 <_dtoa_r+0x81c>
 801d1c8:	40240000 	.word	0x40240000
 801d1cc:	9b01      	ldr	r3, [sp, #4]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	dc38      	bgt.n	801d244 <_dtoa_r+0x99c>
 801d1d2:	9b05      	ldr	r3, [sp, #20]
 801d1d4:	2b02      	cmp	r3, #2
 801d1d6:	dd35      	ble.n	801d244 <_dtoa_r+0x99c>
 801d1d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d1dc:	f1b9 0f00 	cmp.w	r9, #0
 801d1e0:	d10d      	bne.n	801d1fe <_dtoa_r+0x956>
 801d1e2:	4631      	mov	r1, r6
 801d1e4:	464b      	mov	r3, r9
 801d1e6:	2205      	movs	r2, #5
 801d1e8:	4620      	mov	r0, r4
 801d1ea:	f000 fe87 	bl	801defc <__multadd>
 801d1ee:	4601      	mov	r1, r0
 801d1f0:	4606      	mov	r6, r0
 801d1f2:	4658      	mov	r0, fp
 801d1f4:	f001 f8e8 	bl	801e3c8 <__mcmp>
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	f73f adbd 	bgt.w	801cd78 <_dtoa_r+0x4d0>
 801d1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d200:	9d00      	ldr	r5, [sp, #0]
 801d202:	ea6f 0a03 	mvn.w	sl, r3
 801d206:	f04f 0800 	mov.w	r8, #0
 801d20a:	4631      	mov	r1, r6
 801d20c:	4620      	mov	r0, r4
 801d20e:	f000 fe53 	bl	801deb8 <_Bfree>
 801d212:	2f00      	cmp	r7, #0
 801d214:	f43f aeb4 	beq.w	801cf80 <_dtoa_r+0x6d8>
 801d218:	f1b8 0f00 	cmp.w	r8, #0
 801d21c:	d005      	beq.n	801d22a <_dtoa_r+0x982>
 801d21e:	45b8      	cmp	r8, r7
 801d220:	d003      	beq.n	801d22a <_dtoa_r+0x982>
 801d222:	4641      	mov	r1, r8
 801d224:	4620      	mov	r0, r4
 801d226:	f000 fe47 	bl	801deb8 <_Bfree>
 801d22a:	4639      	mov	r1, r7
 801d22c:	4620      	mov	r0, r4
 801d22e:	f000 fe43 	bl	801deb8 <_Bfree>
 801d232:	e6a5      	b.n	801cf80 <_dtoa_r+0x6d8>
 801d234:	2600      	movs	r6, #0
 801d236:	4637      	mov	r7, r6
 801d238:	e7e1      	b.n	801d1fe <_dtoa_r+0x956>
 801d23a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d23c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d240:	4637      	mov	r7, r6
 801d242:	e599      	b.n	801cd78 <_dtoa_r+0x4d0>
 801d244:	9b08      	ldr	r3, [sp, #32]
 801d246:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f000 80fd 	beq.w	801d44a <_dtoa_r+0xba2>
 801d250:	2d00      	cmp	r5, #0
 801d252:	dd05      	ble.n	801d260 <_dtoa_r+0x9b8>
 801d254:	4639      	mov	r1, r7
 801d256:	462a      	mov	r2, r5
 801d258:	4620      	mov	r0, r4
 801d25a:	f001 f849 	bl	801e2f0 <__lshift>
 801d25e:	4607      	mov	r7, r0
 801d260:	9b06      	ldr	r3, [sp, #24]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d05c      	beq.n	801d320 <_dtoa_r+0xa78>
 801d266:	6879      	ldr	r1, [r7, #4]
 801d268:	4620      	mov	r0, r4
 801d26a:	f000 fde5 	bl	801de38 <_Balloc>
 801d26e:	4605      	mov	r5, r0
 801d270:	b928      	cbnz	r0, 801d27e <_dtoa_r+0x9d6>
 801d272:	4b80      	ldr	r3, [pc, #512]	; (801d474 <_dtoa_r+0xbcc>)
 801d274:	4602      	mov	r2, r0
 801d276:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d27a:	f7ff bb2e 	b.w	801c8da <_dtoa_r+0x32>
 801d27e:	693a      	ldr	r2, [r7, #16]
 801d280:	3202      	adds	r2, #2
 801d282:	0092      	lsls	r2, r2, #2
 801d284:	f107 010c 	add.w	r1, r7, #12
 801d288:	300c      	adds	r0, #12
 801d28a:	f7fd f8af 	bl	801a3ec <memcpy>
 801d28e:	2201      	movs	r2, #1
 801d290:	4629      	mov	r1, r5
 801d292:	4620      	mov	r0, r4
 801d294:	f001 f82c 	bl	801e2f0 <__lshift>
 801d298:	9b00      	ldr	r3, [sp, #0]
 801d29a:	3301      	adds	r3, #1
 801d29c:	9301      	str	r3, [sp, #4]
 801d29e:	9b00      	ldr	r3, [sp, #0]
 801d2a0:	444b      	add	r3, r9
 801d2a2:	9307      	str	r3, [sp, #28]
 801d2a4:	9b02      	ldr	r3, [sp, #8]
 801d2a6:	f003 0301 	and.w	r3, r3, #1
 801d2aa:	46b8      	mov	r8, r7
 801d2ac:	9306      	str	r3, [sp, #24]
 801d2ae:	4607      	mov	r7, r0
 801d2b0:	9b01      	ldr	r3, [sp, #4]
 801d2b2:	4631      	mov	r1, r6
 801d2b4:	3b01      	subs	r3, #1
 801d2b6:	4658      	mov	r0, fp
 801d2b8:	9302      	str	r3, [sp, #8]
 801d2ba:	f7ff fa67 	bl	801c78c <quorem>
 801d2be:	4603      	mov	r3, r0
 801d2c0:	3330      	adds	r3, #48	; 0x30
 801d2c2:	9004      	str	r0, [sp, #16]
 801d2c4:	4641      	mov	r1, r8
 801d2c6:	4658      	mov	r0, fp
 801d2c8:	9308      	str	r3, [sp, #32]
 801d2ca:	f001 f87d 	bl	801e3c8 <__mcmp>
 801d2ce:	463a      	mov	r2, r7
 801d2d0:	4681      	mov	r9, r0
 801d2d2:	4631      	mov	r1, r6
 801d2d4:	4620      	mov	r0, r4
 801d2d6:	f001 f893 	bl	801e400 <__mdiff>
 801d2da:	68c2      	ldr	r2, [r0, #12]
 801d2dc:	9b08      	ldr	r3, [sp, #32]
 801d2de:	4605      	mov	r5, r0
 801d2e0:	bb02      	cbnz	r2, 801d324 <_dtoa_r+0xa7c>
 801d2e2:	4601      	mov	r1, r0
 801d2e4:	4658      	mov	r0, fp
 801d2e6:	f001 f86f 	bl	801e3c8 <__mcmp>
 801d2ea:	9b08      	ldr	r3, [sp, #32]
 801d2ec:	4602      	mov	r2, r0
 801d2ee:	4629      	mov	r1, r5
 801d2f0:	4620      	mov	r0, r4
 801d2f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d2f6:	f000 fddf 	bl	801deb8 <_Bfree>
 801d2fa:	9b05      	ldr	r3, [sp, #20]
 801d2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2fe:	9d01      	ldr	r5, [sp, #4]
 801d300:	ea43 0102 	orr.w	r1, r3, r2
 801d304:	9b06      	ldr	r3, [sp, #24]
 801d306:	430b      	orrs	r3, r1
 801d308:	9b08      	ldr	r3, [sp, #32]
 801d30a:	d10d      	bne.n	801d328 <_dtoa_r+0xa80>
 801d30c:	2b39      	cmp	r3, #57	; 0x39
 801d30e:	d029      	beq.n	801d364 <_dtoa_r+0xabc>
 801d310:	f1b9 0f00 	cmp.w	r9, #0
 801d314:	dd01      	ble.n	801d31a <_dtoa_r+0xa72>
 801d316:	9b04      	ldr	r3, [sp, #16]
 801d318:	3331      	adds	r3, #49	; 0x31
 801d31a:	9a02      	ldr	r2, [sp, #8]
 801d31c:	7013      	strb	r3, [r2, #0]
 801d31e:	e774      	b.n	801d20a <_dtoa_r+0x962>
 801d320:	4638      	mov	r0, r7
 801d322:	e7b9      	b.n	801d298 <_dtoa_r+0x9f0>
 801d324:	2201      	movs	r2, #1
 801d326:	e7e2      	b.n	801d2ee <_dtoa_r+0xa46>
 801d328:	f1b9 0f00 	cmp.w	r9, #0
 801d32c:	db06      	blt.n	801d33c <_dtoa_r+0xa94>
 801d32e:	9905      	ldr	r1, [sp, #20]
 801d330:	ea41 0909 	orr.w	r9, r1, r9
 801d334:	9906      	ldr	r1, [sp, #24]
 801d336:	ea59 0101 	orrs.w	r1, r9, r1
 801d33a:	d120      	bne.n	801d37e <_dtoa_r+0xad6>
 801d33c:	2a00      	cmp	r2, #0
 801d33e:	ddec      	ble.n	801d31a <_dtoa_r+0xa72>
 801d340:	4659      	mov	r1, fp
 801d342:	2201      	movs	r2, #1
 801d344:	4620      	mov	r0, r4
 801d346:	9301      	str	r3, [sp, #4]
 801d348:	f000 ffd2 	bl	801e2f0 <__lshift>
 801d34c:	4631      	mov	r1, r6
 801d34e:	4683      	mov	fp, r0
 801d350:	f001 f83a 	bl	801e3c8 <__mcmp>
 801d354:	2800      	cmp	r0, #0
 801d356:	9b01      	ldr	r3, [sp, #4]
 801d358:	dc02      	bgt.n	801d360 <_dtoa_r+0xab8>
 801d35a:	d1de      	bne.n	801d31a <_dtoa_r+0xa72>
 801d35c:	07da      	lsls	r2, r3, #31
 801d35e:	d5dc      	bpl.n	801d31a <_dtoa_r+0xa72>
 801d360:	2b39      	cmp	r3, #57	; 0x39
 801d362:	d1d8      	bne.n	801d316 <_dtoa_r+0xa6e>
 801d364:	9a02      	ldr	r2, [sp, #8]
 801d366:	2339      	movs	r3, #57	; 0x39
 801d368:	7013      	strb	r3, [r2, #0]
 801d36a:	462b      	mov	r3, r5
 801d36c:	461d      	mov	r5, r3
 801d36e:	3b01      	subs	r3, #1
 801d370:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d374:	2a39      	cmp	r2, #57	; 0x39
 801d376:	d050      	beq.n	801d41a <_dtoa_r+0xb72>
 801d378:	3201      	adds	r2, #1
 801d37a:	701a      	strb	r2, [r3, #0]
 801d37c:	e745      	b.n	801d20a <_dtoa_r+0x962>
 801d37e:	2a00      	cmp	r2, #0
 801d380:	dd03      	ble.n	801d38a <_dtoa_r+0xae2>
 801d382:	2b39      	cmp	r3, #57	; 0x39
 801d384:	d0ee      	beq.n	801d364 <_dtoa_r+0xabc>
 801d386:	3301      	adds	r3, #1
 801d388:	e7c7      	b.n	801d31a <_dtoa_r+0xa72>
 801d38a:	9a01      	ldr	r2, [sp, #4]
 801d38c:	9907      	ldr	r1, [sp, #28]
 801d38e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d392:	428a      	cmp	r2, r1
 801d394:	d02a      	beq.n	801d3ec <_dtoa_r+0xb44>
 801d396:	4659      	mov	r1, fp
 801d398:	2300      	movs	r3, #0
 801d39a:	220a      	movs	r2, #10
 801d39c:	4620      	mov	r0, r4
 801d39e:	f000 fdad 	bl	801defc <__multadd>
 801d3a2:	45b8      	cmp	r8, r7
 801d3a4:	4683      	mov	fp, r0
 801d3a6:	f04f 0300 	mov.w	r3, #0
 801d3aa:	f04f 020a 	mov.w	r2, #10
 801d3ae:	4641      	mov	r1, r8
 801d3b0:	4620      	mov	r0, r4
 801d3b2:	d107      	bne.n	801d3c4 <_dtoa_r+0xb1c>
 801d3b4:	f000 fda2 	bl	801defc <__multadd>
 801d3b8:	4680      	mov	r8, r0
 801d3ba:	4607      	mov	r7, r0
 801d3bc:	9b01      	ldr	r3, [sp, #4]
 801d3be:	3301      	adds	r3, #1
 801d3c0:	9301      	str	r3, [sp, #4]
 801d3c2:	e775      	b.n	801d2b0 <_dtoa_r+0xa08>
 801d3c4:	f000 fd9a 	bl	801defc <__multadd>
 801d3c8:	4639      	mov	r1, r7
 801d3ca:	4680      	mov	r8, r0
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	220a      	movs	r2, #10
 801d3d0:	4620      	mov	r0, r4
 801d3d2:	f000 fd93 	bl	801defc <__multadd>
 801d3d6:	4607      	mov	r7, r0
 801d3d8:	e7f0      	b.n	801d3bc <_dtoa_r+0xb14>
 801d3da:	f1b9 0f00 	cmp.w	r9, #0
 801d3de:	9a00      	ldr	r2, [sp, #0]
 801d3e0:	bfcc      	ite	gt
 801d3e2:	464d      	movgt	r5, r9
 801d3e4:	2501      	movle	r5, #1
 801d3e6:	4415      	add	r5, r2
 801d3e8:	f04f 0800 	mov.w	r8, #0
 801d3ec:	4659      	mov	r1, fp
 801d3ee:	2201      	movs	r2, #1
 801d3f0:	4620      	mov	r0, r4
 801d3f2:	9301      	str	r3, [sp, #4]
 801d3f4:	f000 ff7c 	bl	801e2f0 <__lshift>
 801d3f8:	4631      	mov	r1, r6
 801d3fa:	4683      	mov	fp, r0
 801d3fc:	f000 ffe4 	bl	801e3c8 <__mcmp>
 801d400:	2800      	cmp	r0, #0
 801d402:	dcb2      	bgt.n	801d36a <_dtoa_r+0xac2>
 801d404:	d102      	bne.n	801d40c <_dtoa_r+0xb64>
 801d406:	9b01      	ldr	r3, [sp, #4]
 801d408:	07db      	lsls	r3, r3, #31
 801d40a:	d4ae      	bmi.n	801d36a <_dtoa_r+0xac2>
 801d40c:	462b      	mov	r3, r5
 801d40e:	461d      	mov	r5, r3
 801d410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d414:	2a30      	cmp	r2, #48	; 0x30
 801d416:	d0fa      	beq.n	801d40e <_dtoa_r+0xb66>
 801d418:	e6f7      	b.n	801d20a <_dtoa_r+0x962>
 801d41a:	9a00      	ldr	r2, [sp, #0]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d1a5      	bne.n	801d36c <_dtoa_r+0xac4>
 801d420:	f10a 0a01 	add.w	sl, sl, #1
 801d424:	2331      	movs	r3, #49	; 0x31
 801d426:	e779      	b.n	801d31c <_dtoa_r+0xa74>
 801d428:	4b13      	ldr	r3, [pc, #76]	; (801d478 <_dtoa_r+0xbd0>)
 801d42a:	f7ff baaf 	b.w	801c98c <_dtoa_r+0xe4>
 801d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d430:	2b00      	cmp	r3, #0
 801d432:	f47f aa86 	bne.w	801c942 <_dtoa_r+0x9a>
 801d436:	4b11      	ldr	r3, [pc, #68]	; (801d47c <_dtoa_r+0xbd4>)
 801d438:	f7ff baa8 	b.w	801c98c <_dtoa_r+0xe4>
 801d43c:	f1b9 0f00 	cmp.w	r9, #0
 801d440:	dc03      	bgt.n	801d44a <_dtoa_r+0xba2>
 801d442:	9b05      	ldr	r3, [sp, #20]
 801d444:	2b02      	cmp	r3, #2
 801d446:	f73f aec9 	bgt.w	801d1dc <_dtoa_r+0x934>
 801d44a:	9d00      	ldr	r5, [sp, #0]
 801d44c:	4631      	mov	r1, r6
 801d44e:	4658      	mov	r0, fp
 801d450:	f7ff f99c 	bl	801c78c <quorem>
 801d454:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d458:	f805 3b01 	strb.w	r3, [r5], #1
 801d45c:	9a00      	ldr	r2, [sp, #0]
 801d45e:	1aaa      	subs	r2, r5, r2
 801d460:	4591      	cmp	r9, r2
 801d462:	ddba      	ble.n	801d3da <_dtoa_r+0xb32>
 801d464:	4659      	mov	r1, fp
 801d466:	2300      	movs	r3, #0
 801d468:	220a      	movs	r2, #10
 801d46a:	4620      	mov	r0, r4
 801d46c:	f000 fd46 	bl	801defc <__multadd>
 801d470:	4683      	mov	fp, r0
 801d472:	e7eb      	b.n	801d44c <_dtoa_r+0xba4>
 801d474:	080215c7 	.word	0x080215c7
 801d478:	080217c9 	.word	0x080217c9
 801d47c:	08021544 	.word	0x08021544

0801d480 <__sflush_r>:
 801d480:	898a      	ldrh	r2, [r1, #12]
 801d482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d486:	4605      	mov	r5, r0
 801d488:	0710      	lsls	r0, r2, #28
 801d48a:	460c      	mov	r4, r1
 801d48c:	d458      	bmi.n	801d540 <__sflush_r+0xc0>
 801d48e:	684b      	ldr	r3, [r1, #4]
 801d490:	2b00      	cmp	r3, #0
 801d492:	dc05      	bgt.n	801d4a0 <__sflush_r+0x20>
 801d494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d496:	2b00      	cmp	r3, #0
 801d498:	dc02      	bgt.n	801d4a0 <__sflush_r+0x20>
 801d49a:	2000      	movs	r0, #0
 801d49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4a2:	2e00      	cmp	r6, #0
 801d4a4:	d0f9      	beq.n	801d49a <__sflush_r+0x1a>
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d4ac:	682f      	ldr	r7, [r5, #0]
 801d4ae:	602b      	str	r3, [r5, #0]
 801d4b0:	d032      	beq.n	801d518 <__sflush_r+0x98>
 801d4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d4b4:	89a3      	ldrh	r3, [r4, #12]
 801d4b6:	075a      	lsls	r2, r3, #29
 801d4b8:	d505      	bpl.n	801d4c6 <__sflush_r+0x46>
 801d4ba:	6863      	ldr	r3, [r4, #4]
 801d4bc:	1ac0      	subs	r0, r0, r3
 801d4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4c0:	b10b      	cbz	r3, 801d4c6 <__sflush_r+0x46>
 801d4c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4c4:	1ac0      	subs	r0, r0, r3
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	4602      	mov	r2, r0
 801d4ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4cc:	6a21      	ldr	r1, [r4, #32]
 801d4ce:	4628      	mov	r0, r5
 801d4d0:	47b0      	blx	r6
 801d4d2:	1c43      	adds	r3, r0, #1
 801d4d4:	89a3      	ldrh	r3, [r4, #12]
 801d4d6:	d106      	bne.n	801d4e6 <__sflush_r+0x66>
 801d4d8:	6829      	ldr	r1, [r5, #0]
 801d4da:	291d      	cmp	r1, #29
 801d4dc:	d82c      	bhi.n	801d538 <__sflush_r+0xb8>
 801d4de:	4a2a      	ldr	r2, [pc, #168]	; (801d588 <__sflush_r+0x108>)
 801d4e0:	40ca      	lsrs	r2, r1
 801d4e2:	07d6      	lsls	r6, r2, #31
 801d4e4:	d528      	bpl.n	801d538 <__sflush_r+0xb8>
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	6062      	str	r2, [r4, #4]
 801d4ea:	04d9      	lsls	r1, r3, #19
 801d4ec:	6922      	ldr	r2, [r4, #16]
 801d4ee:	6022      	str	r2, [r4, #0]
 801d4f0:	d504      	bpl.n	801d4fc <__sflush_r+0x7c>
 801d4f2:	1c42      	adds	r2, r0, #1
 801d4f4:	d101      	bne.n	801d4fa <__sflush_r+0x7a>
 801d4f6:	682b      	ldr	r3, [r5, #0]
 801d4f8:	b903      	cbnz	r3, 801d4fc <__sflush_r+0x7c>
 801d4fa:	6560      	str	r0, [r4, #84]	; 0x54
 801d4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4fe:	602f      	str	r7, [r5, #0]
 801d500:	2900      	cmp	r1, #0
 801d502:	d0ca      	beq.n	801d49a <__sflush_r+0x1a>
 801d504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d508:	4299      	cmp	r1, r3
 801d50a:	d002      	beq.n	801d512 <__sflush_r+0x92>
 801d50c:	4628      	mov	r0, r5
 801d50e:	f7fc ff9d 	bl	801a44c <_free_r>
 801d512:	2000      	movs	r0, #0
 801d514:	6360      	str	r0, [r4, #52]	; 0x34
 801d516:	e7c1      	b.n	801d49c <__sflush_r+0x1c>
 801d518:	6a21      	ldr	r1, [r4, #32]
 801d51a:	2301      	movs	r3, #1
 801d51c:	4628      	mov	r0, r5
 801d51e:	47b0      	blx	r6
 801d520:	1c41      	adds	r1, r0, #1
 801d522:	d1c7      	bne.n	801d4b4 <__sflush_r+0x34>
 801d524:	682b      	ldr	r3, [r5, #0]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d0c4      	beq.n	801d4b4 <__sflush_r+0x34>
 801d52a:	2b1d      	cmp	r3, #29
 801d52c:	d001      	beq.n	801d532 <__sflush_r+0xb2>
 801d52e:	2b16      	cmp	r3, #22
 801d530:	d101      	bne.n	801d536 <__sflush_r+0xb6>
 801d532:	602f      	str	r7, [r5, #0]
 801d534:	e7b1      	b.n	801d49a <__sflush_r+0x1a>
 801d536:	89a3      	ldrh	r3, [r4, #12]
 801d538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d53c:	81a3      	strh	r3, [r4, #12]
 801d53e:	e7ad      	b.n	801d49c <__sflush_r+0x1c>
 801d540:	690f      	ldr	r7, [r1, #16]
 801d542:	2f00      	cmp	r7, #0
 801d544:	d0a9      	beq.n	801d49a <__sflush_r+0x1a>
 801d546:	0793      	lsls	r3, r2, #30
 801d548:	680e      	ldr	r6, [r1, #0]
 801d54a:	bf08      	it	eq
 801d54c:	694b      	ldreq	r3, [r1, #20]
 801d54e:	600f      	str	r7, [r1, #0]
 801d550:	bf18      	it	ne
 801d552:	2300      	movne	r3, #0
 801d554:	eba6 0807 	sub.w	r8, r6, r7
 801d558:	608b      	str	r3, [r1, #8]
 801d55a:	f1b8 0f00 	cmp.w	r8, #0
 801d55e:	dd9c      	ble.n	801d49a <__sflush_r+0x1a>
 801d560:	6a21      	ldr	r1, [r4, #32]
 801d562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d564:	4643      	mov	r3, r8
 801d566:	463a      	mov	r2, r7
 801d568:	4628      	mov	r0, r5
 801d56a:	47b0      	blx	r6
 801d56c:	2800      	cmp	r0, #0
 801d56e:	dc06      	bgt.n	801d57e <__sflush_r+0xfe>
 801d570:	89a3      	ldrh	r3, [r4, #12]
 801d572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d576:	81a3      	strh	r3, [r4, #12]
 801d578:	f04f 30ff 	mov.w	r0, #4294967295
 801d57c:	e78e      	b.n	801d49c <__sflush_r+0x1c>
 801d57e:	4407      	add	r7, r0
 801d580:	eba8 0800 	sub.w	r8, r8, r0
 801d584:	e7e9      	b.n	801d55a <__sflush_r+0xda>
 801d586:	bf00      	nop
 801d588:	20400001 	.word	0x20400001

0801d58c <_fflush_r>:
 801d58c:	b538      	push	{r3, r4, r5, lr}
 801d58e:	690b      	ldr	r3, [r1, #16]
 801d590:	4605      	mov	r5, r0
 801d592:	460c      	mov	r4, r1
 801d594:	b913      	cbnz	r3, 801d59c <_fflush_r+0x10>
 801d596:	2500      	movs	r5, #0
 801d598:	4628      	mov	r0, r5
 801d59a:	bd38      	pop	{r3, r4, r5, pc}
 801d59c:	b118      	cbz	r0, 801d5a6 <_fflush_r+0x1a>
 801d59e:	6983      	ldr	r3, [r0, #24]
 801d5a0:	b90b      	cbnz	r3, 801d5a6 <_fflush_r+0x1a>
 801d5a2:	f7fc fe55 	bl	801a250 <__sinit>
 801d5a6:	4b14      	ldr	r3, [pc, #80]	; (801d5f8 <_fflush_r+0x6c>)
 801d5a8:	429c      	cmp	r4, r3
 801d5aa:	d11b      	bne.n	801d5e4 <_fflush_r+0x58>
 801d5ac:	686c      	ldr	r4, [r5, #4]
 801d5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d0ef      	beq.n	801d596 <_fflush_r+0xa>
 801d5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d5b8:	07d0      	lsls	r0, r2, #31
 801d5ba:	d404      	bmi.n	801d5c6 <_fflush_r+0x3a>
 801d5bc:	0599      	lsls	r1, r3, #22
 801d5be:	d402      	bmi.n	801d5c6 <_fflush_r+0x3a>
 801d5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5c2:	f7fc ff08 	bl	801a3d6 <__retarget_lock_acquire_recursive>
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	4621      	mov	r1, r4
 801d5ca:	f7ff ff59 	bl	801d480 <__sflush_r>
 801d5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d5d0:	07da      	lsls	r2, r3, #31
 801d5d2:	4605      	mov	r5, r0
 801d5d4:	d4e0      	bmi.n	801d598 <_fflush_r+0xc>
 801d5d6:	89a3      	ldrh	r3, [r4, #12]
 801d5d8:	059b      	lsls	r3, r3, #22
 801d5da:	d4dd      	bmi.n	801d598 <_fflush_r+0xc>
 801d5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5de:	f7fc fefb 	bl	801a3d8 <__retarget_lock_release_recursive>
 801d5e2:	e7d9      	b.n	801d598 <_fflush_r+0xc>
 801d5e4:	4b05      	ldr	r3, [pc, #20]	; (801d5fc <_fflush_r+0x70>)
 801d5e6:	429c      	cmp	r4, r3
 801d5e8:	d101      	bne.n	801d5ee <_fflush_r+0x62>
 801d5ea:	68ac      	ldr	r4, [r5, #8]
 801d5ec:	e7df      	b.n	801d5ae <_fflush_r+0x22>
 801d5ee:	4b04      	ldr	r3, [pc, #16]	; (801d600 <_fflush_r+0x74>)
 801d5f0:	429c      	cmp	r4, r3
 801d5f2:	bf08      	it	eq
 801d5f4:	68ec      	ldreq	r4, [r5, #12]
 801d5f6:	e7da      	b.n	801d5ae <_fflush_r+0x22>
 801d5f8:	0802143c 	.word	0x0802143c
 801d5fc:	0802145c 	.word	0x0802145c
 801d600:	0802141c 	.word	0x0802141c

0801d604 <fiprintf>:
 801d604:	b40e      	push	{r1, r2, r3}
 801d606:	b503      	push	{r0, r1, lr}
 801d608:	4601      	mov	r1, r0
 801d60a:	ab03      	add	r3, sp, #12
 801d60c:	4805      	ldr	r0, [pc, #20]	; (801d624 <fiprintf+0x20>)
 801d60e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d612:	6800      	ldr	r0, [r0, #0]
 801d614:	9301      	str	r3, [sp, #4]
 801d616:	f001 fc57 	bl	801eec8 <_vfiprintf_r>
 801d61a:	b002      	add	sp, #8
 801d61c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d620:	b003      	add	sp, #12
 801d622:	4770      	bx	lr
 801d624:	200001f8 	.word	0x200001f8

0801d628 <rshift>:
 801d628:	6903      	ldr	r3, [r0, #16]
 801d62a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d62e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d632:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d636:	f100 0414 	add.w	r4, r0, #20
 801d63a:	dd45      	ble.n	801d6c8 <rshift+0xa0>
 801d63c:	f011 011f 	ands.w	r1, r1, #31
 801d640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d648:	d10c      	bne.n	801d664 <rshift+0x3c>
 801d64a:	f100 0710 	add.w	r7, r0, #16
 801d64e:	4629      	mov	r1, r5
 801d650:	42b1      	cmp	r1, r6
 801d652:	d334      	bcc.n	801d6be <rshift+0x96>
 801d654:	1a9b      	subs	r3, r3, r2
 801d656:	009b      	lsls	r3, r3, #2
 801d658:	1eea      	subs	r2, r5, #3
 801d65a:	4296      	cmp	r6, r2
 801d65c:	bf38      	it	cc
 801d65e:	2300      	movcc	r3, #0
 801d660:	4423      	add	r3, r4
 801d662:	e015      	b.n	801d690 <rshift+0x68>
 801d664:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d668:	f1c1 0820 	rsb	r8, r1, #32
 801d66c:	40cf      	lsrs	r7, r1
 801d66e:	f105 0e04 	add.w	lr, r5, #4
 801d672:	46a1      	mov	r9, r4
 801d674:	4576      	cmp	r6, lr
 801d676:	46f4      	mov	ip, lr
 801d678:	d815      	bhi.n	801d6a6 <rshift+0x7e>
 801d67a:	1a9b      	subs	r3, r3, r2
 801d67c:	009a      	lsls	r2, r3, #2
 801d67e:	3a04      	subs	r2, #4
 801d680:	3501      	adds	r5, #1
 801d682:	42ae      	cmp	r6, r5
 801d684:	bf38      	it	cc
 801d686:	2200      	movcc	r2, #0
 801d688:	18a3      	adds	r3, r4, r2
 801d68a:	50a7      	str	r7, [r4, r2]
 801d68c:	b107      	cbz	r7, 801d690 <rshift+0x68>
 801d68e:	3304      	adds	r3, #4
 801d690:	1b1a      	subs	r2, r3, r4
 801d692:	42a3      	cmp	r3, r4
 801d694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d698:	bf08      	it	eq
 801d69a:	2300      	moveq	r3, #0
 801d69c:	6102      	str	r2, [r0, #16]
 801d69e:	bf08      	it	eq
 801d6a0:	6143      	streq	r3, [r0, #20]
 801d6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6a6:	f8dc c000 	ldr.w	ip, [ip]
 801d6aa:	fa0c fc08 	lsl.w	ip, ip, r8
 801d6ae:	ea4c 0707 	orr.w	r7, ip, r7
 801d6b2:	f849 7b04 	str.w	r7, [r9], #4
 801d6b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d6ba:	40cf      	lsrs	r7, r1
 801d6bc:	e7da      	b.n	801d674 <rshift+0x4c>
 801d6be:	f851 cb04 	ldr.w	ip, [r1], #4
 801d6c2:	f847 cf04 	str.w	ip, [r7, #4]!
 801d6c6:	e7c3      	b.n	801d650 <rshift+0x28>
 801d6c8:	4623      	mov	r3, r4
 801d6ca:	e7e1      	b.n	801d690 <rshift+0x68>

0801d6cc <__hexdig_fun>:
 801d6cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d6d0:	2b09      	cmp	r3, #9
 801d6d2:	d802      	bhi.n	801d6da <__hexdig_fun+0xe>
 801d6d4:	3820      	subs	r0, #32
 801d6d6:	b2c0      	uxtb	r0, r0
 801d6d8:	4770      	bx	lr
 801d6da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d6de:	2b05      	cmp	r3, #5
 801d6e0:	d801      	bhi.n	801d6e6 <__hexdig_fun+0x1a>
 801d6e2:	3847      	subs	r0, #71	; 0x47
 801d6e4:	e7f7      	b.n	801d6d6 <__hexdig_fun+0xa>
 801d6e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d6ea:	2b05      	cmp	r3, #5
 801d6ec:	d801      	bhi.n	801d6f2 <__hexdig_fun+0x26>
 801d6ee:	3827      	subs	r0, #39	; 0x27
 801d6f0:	e7f1      	b.n	801d6d6 <__hexdig_fun+0xa>
 801d6f2:	2000      	movs	r0, #0
 801d6f4:	4770      	bx	lr
	...

0801d6f8 <__gethex>:
 801d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6fc:	ed2d 8b02 	vpush	{d8}
 801d700:	b089      	sub	sp, #36	; 0x24
 801d702:	ee08 0a10 	vmov	s16, r0
 801d706:	9304      	str	r3, [sp, #16]
 801d708:	4bbc      	ldr	r3, [pc, #752]	; (801d9fc <__gethex+0x304>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	9301      	str	r3, [sp, #4]
 801d70e:	4618      	mov	r0, r3
 801d710:	468b      	mov	fp, r1
 801d712:	4690      	mov	r8, r2
 801d714:	f7e2 fd6c 	bl	80001f0 <strlen>
 801d718:	9b01      	ldr	r3, [sp, #4]
 801d71a:	f8db 2000 	ldr.w	r2, [fp]
 801d71e:	4403      	add	r3, r0
 801d720:	4682      	mov	sl, r0
 801d722:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d726:	9305      	str	r3, [sp, #20]
 801d728:	1c93      	adds	r3, r2, #2
 801d72a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d72e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d732:	32fe      	adds	r2, #254	; 0xfe
 801d734:	18d1      	adds	r1, r2, r3
 801d736:	461f      	mov	r7, r3
 801d738:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d73c:	9100      	str	r1, [sp, #0]
 801d73e:	2830      	cmp	r0, #48	; 0x30
 801d740:	d0f8      	beq.n	801d734 <__gethex+0x3c>
 801d742:	f7ff ffc3 	bl	801d6cc <__hexdig_fun>
 801d746:	4604      	mov	r4, r0
 801d748:	2800      	cmp	r0, #0
 801d74a:	d13a      	bne.n	801d7c2 <__gethex+0xca>
 801d74c:	9901      	ldr	r1, [sp, #4]
 801d74e:	4652      	mov	r2, sl
 801d750:	4638      	mov	r0, r7
 801d752:	f7fd ff8a 	bl	801b66a <strncmp>
 801d756:	4605      	mov	r5, r0
 801d758:	2800      	cmp	r0, #0
 801d75a:	d168      	bne.n	801d82e <__gethex+0x136>
 801d75c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d760:	eb07 060a 	add.w	r6, r7, sl
 801d764:	f7ff ffb2 	bl	801d6cc <__hexdig_fun>
 801d768:	2800      	cmp	r0, #0
 801d76a:	d062      	beq.n	801d832 <__gethex+0x13a>
 801d76c:	4633      	mov	r3, r6
 801d76e:	7818      	ldrb	r0, [r3, #0]
 801d770:	2830      	cmp	r0, #48	; 0x30
 801d772:	461f      	mov	r7, r3
 801d774:	f103 0301 	add.w	r3, r3, #1
 801d778:	d0f9      	beq.n	801d76e <__gethex+0x76>
 801d77a:	f7ff ffa7 	bl	801d6cc <__hexdig_fun>
 801d77e:	2301      	movs	r3, #1
 801d780:	fab0 f480 	clz	r4, r0
 801d784:	0964      	lsrs	r4, r4, #5
 801d786:	4635      	mov	r5, r6
 801d788:	9300      	str	r3, [sp, #0]
 801d78a:	463a      	mov	r2, r7
 801d78c:	4616      	mov	r6, r2
 801d78e:	3201      	adds	r2, #1
 801d790:	7830      	ldrb	r0, [r6, #0]
 801d792:	f7ff ff9b 	bl	801d6cc <__hexdig_fun>
 801d796:	2800      	cmp	r0, #0
 801d798:	d1f8      	bne.n	801d78c <__gethex+0x94>
 801d79a:	9901      	ldr	r1, [sp, #4]
 801d79c:	4652      	mov	r2, sl
 801d79e:	4630      	mov	r0, r6
 801d7a0:	f7fd ff63 	bl	801b66a <strncmp>
 801d7a4:	b980      	cbnz	r0, 801d7c8 <__gethex+0xd0>
 801d7a6:	b94d      	cbnz	r5, 801d7bc <__gethex+0xc4>
 801d7a8:	eb06 050a 	add.w	r5, r6, sl
 801d7ac:	462a      	mov	r2, r5
 801d7ae:	4616      	mov	r6, r2
 801d7b0:	3201      	adds	r2, #1
 801d7b2:	7830      	ldrb	r0, [r6, #0]
 801d7b4:	f7ff ff8a 	bl	801d6cc <__hexdig_fun>
 801d7b8:	2800      	cmp	r0, #0
 801d7ba:	d1f8      	bne.n	801d7ae <__gethex+0xb6>
 801d7bc:	1bad      	subs	r5, r5, r6
 801d7be:	00ad      	lsls	r5, r5, #2
 801d7c0:	e004      	b.n	801d7cc <__gethex+0xd4>
 801d7c2:	2400      	movs	r4, #0
 801d7c4:	4625      	mov	r5, r4
 801d7c6:	e7e0      	b.n	801d78a <__gethex+0x92>
 801d7c8:	2d00      	cmp	r5, #0
 801d7ca:	d1f7      	bne.n	801d7bc <__gethex+0xc4>
 801d7cc:	7833      	ldrb	r3, [r6, #0]
 801d7ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d7d2:	2b50      	cmp	r3, #80	; 0x50
 801d7d4:	d13b      	bne.n	801d84e <__gethex+0x156>
 801d7d6:	7873      	ldrb	r3, [r6, #1]
 801d7d8:	2b2b      	cmp	r3, #43	; 0x2b
 801d7da:	d02c      	beq.n	801d836 <__gethex+0x13e>
 801d7dc:	2b2d      	cmp	r3, #45	; 0x2d
 801d7de:	d02e      	beq.n	801d83e <__gethex+0x146>
 801d7e0:	1c71      	adds	r1, r6, #1
 801d7e2:	f04f 0900 	mov.w	r9, #0
 801d7e6:	7808      	ldrb	r0, [r1, #0]
 801d7e8:	f7ff ff70 	bl	801d6cc <__hexdig_fun>
 801d7ec:	1e43      	subs	r3, r0, #1
 801d7ee:	b2db      	uxtb	r3, r3
 801d7f0:	2b18      	cmp	r3, #24
 801d7f2:	d82c      	bhi.n	801d84e <__gethex+0x156>
 801d7f4:	f1a0 0210 	sub.w	r2, r0, #16
 801d7f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d7fc:	f7ff ff66 	bl	801d6cc <__hexdig_fun>
 801d800:	1e43      	subs	r3, r0, #1
 801d802:	b2db      	uxtb	r3, r3
 801d804:	2b18      	cmp	r3, #24
 801d806:	d91d      	bls.n	801d844 <__gethex+0x14c>
 801d808:	f1b9 0f00 	cmp.w	r9, #0
 801d80c:	d000      	beq.n	801d810 <__gethex+0x118>
 801d80e:	4252      	negs	r2, r2
 801d810:	4415      	add	r5, r2
 801d812:	f8cb 1000 	str.w	r1, [fp]
 801d816:	b1e4      	cbz	r4, 801d852 <__gethex+0x15a>
 801d818:	9b00      	ldr	r3, [sp, #0]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	bf14      	ite	ne
 801d81e:	2700      	movne	r7, #0
 801d820:	2706      	moveq	r7, #6
 801d822:	4638      	mov	r0, r7
 801d824:	b009      	add	sp, #36	; 0x24
 801d826:	ecbd 8b02 	vpop	{d8}
 801d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d82e:	463e      	mov	r6, r7
 801d830:	4625      	mov	r5, r4
 801d832:	2401      	movs	r4, #1
 801d834:	e7ca      	b.n	801d7cc <__gethex+0xd4>
 801d836:	f04f 0900 	mov.w	r9, #0
 801d83a:	1cb1      	adds	r1, r6, #2
 801d83c:	e7d3      	b.n	801d7e6 <__gethex+0xee>
 801d83e:	f04f 0901 	mov.w	r9, #1
 801d842:	e7fa      	b.n	801d83a <__gethex+0x142>
 801d844:	230a      	movs	r3, #10
 801d846:	fb03 0202 	mla	r2, r3, r2, r0
 801d84a:	3a10      	subs	r2, #16
 801d84c:	e7d4      	b.n	801d7f8 <__gethex+0x100>
 801d84e:	4631      	mov	r1, r6
 801d850:	e7df      	b.n	801d812 <__gethex+0x11a>
 801d852:	1bf3      	subs	r3, r6, r7
 801d854:	3b01      	subs	r3, #1
 801d856:	4621      	mov	r1, r4
 801d858:	2b07      	cmp	r3, #7
 801d85a:	dc0b      	bgt.n	801d874 <__gethex+0x17c>
 801d85c:	ee18 0a10 	vmov	r0, s16
 801d860:	f000 faea 	bl	801de38 <_Balloc>
 801d864:	4604      	mov	r4, r0
 801d866:	b940      	cbnz	r0, 801d87a <__gethex+0x182>
 801d868:	4b65      	ldr	r3, [pc, #404]	; (801da00 <__gethex+0x308>)
 801d86a:	4602      	mov	r2, r0
 801d86c:	21de      	movs	r1, #222	; 0xde
 801d86e:	4865      	ldr	r0, [pc, #404]	; (801da04 <__gethex+0x30c>)
 801d870:	f7fe ff5e 	bl	801c730 <__assert_func>
 801d874:	3101      	adds	r1, #1
 801d876:	105b      	asrs	r3, r3, #1
 801d878:	e7ee      	b.n	801d858 <__gethex+0x160>
 801d87a:	f100 0914 	add.w	r9, r0, #20
 801d87e:	f04f 0b00 	mov.w	fp, #0
 801d882:	f1ca 0301 	rsb	r3, sl, #1
 801d886:	f8cd 9008 	str.w	r9, [sp, #8]
 801d88a:	f8cd b000 	str.w	fp, [sp]
 801d88e:	9306      	str	r3, [sp, #24]
 801d890:	42b7      	cmp	r7, r6
 801d892:	d340      	bcc.n	801d916 <__gethex+0x21e>
 801d894:	9802      	ldr	r0, [sp, #8]
 801d896:	9b00      	ldr	r3, [sp, #0]
 801d898:	f840 3b04 	str.w	r3, [r0], #4
 801d89c:	eba0 0009 	sub.w	r0, r0, r9
 801d8a0:	1080      	asrs	r0, r0, #2
 801d8a2:	0146      	lsls	r6, r0, #5
 801d8a4:	6120      	str	r0, [r4, #16]
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f000 fbbc 	bl	801e024 <__hi0bits>
 801d8ac:	1a30      	subs	r0, r6, r0
 801d8ae:	f8d8 6000 	ldr.w	r6, [r8]
 801d8b2:	42b0      	cmp	r0, r6
 801d8b4:	dd63      	ble.n	801d97e <__gethex+0x286>
 801d8b6:	1b87      	subs	r7, r0, r6
 801d8b8:	4639      	mov	r1, r7
 801d8ba:	4620      	mov	r0, r4
 801d8bc:	f000 ff56 	bl	801e76c <__any_on>
 801d8c0:	4682      	mov	sl, r0
 801d8c2:	b1a8      	cbz	r0, 801d8f0 <__gethex+0x1f8>
 801d8c4:	1e7b      	subs	r3, r7, #1
 801d8c6:	1159      	asrs	r1, r3, #5
 801d8c8:	f003 021f 	and.w	r2, r3, #31
 801d8cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d8d0:	f04f 0a01 	mov.w	sl, #1
 801d8d4:	fa0a f202 	lsl.w	r2, sl, r2
 801d8d8:	420a      	tst	r2, r1
 801d8da:	d009      	beq.n	801d8f0 <__gethex+0x1f8>
 801d8dc:	4553      	cmp	r3, sl
 801d8de:	dd05      	ble.n	801d8ec <__gethex+0x1f4>
 801d8e0:	1eb9      	subs	r1, r7, #2
 801d8e2:	4620      	mov	r0, r4
 801d8e4:	f000 ff42 	bl	801e76c <__any_on>
 801d8e8:	2800      	cmp	r0, #0
 801d8ea:	d145      	bne.n	801d978 <__gethex+0x280>
 801d8ec:	f04f 0a02 	mov.w	sl, #2
 801d8f0:	4639      	mov	r1, r7
 801d8f2:	4620      	mov	r0, r4
 801d8f4:	f7ff fe98 	bl	801d628 <rshift>
 801d8f8:	443d      	add	r5, r7
 801d8fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d8fe:	42ab      	cmp	r3, r5
 801d900:	da4c      	bge.n	801d99c <__gethex+0x2a4>
 801d902:	ee18 0a10 	vmov	r0, s16
 801d906:	4621      	mov	r1, r4
 801d908:	f000 fad6 	bl	801deb8 <_Bfree>
 801d90c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d90e:	2300      	movs	r3, #0
 801d910:	6013      	str	r3, [r2, #0]
 801d912:	27a3      	movs	r7, #163	; 0xa3
 801d914:	e785      	b.n	801d822 <__gethex+0x12a>
 801d916:	1e73      	subs	r3, r6, #1
 801d918:	9a05      	ldr	r2, [sp, #20]
 801d91a:	9303      	str	r3, [sp, #12]
 801d91c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d920:	4293      	cmp	r3, r2
 801d922:	d019      	beq.n	801d958 <__gethex+0x260>
 801d924:	f1bb 0f20 	cmp.w	fp, #32
 801d928:	d107      	bne.n	801d93a <__gethex+0x242>
 801d92a:	9b02      	ldr	r3, [sp, #8]
 801d92c:	9a00      	ldr	r2, [sp, #0]
 801d92e:	f843 2b04 	str.w	r2, [r3], #4
 801d932:	9302      	str	r3, [sp, #8]
 801d934:	2300      	movs	r3, #0
 801d936:	9300      	str	r3, [sp, #0]
 801d938:	469b      	mov	fp, r3
 801d93a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d93e:	f7ff fec5 	bl	801d6cc <__hexdig_fun>
 801d942:	9b00      	ldr	r3, [sp, #0]
 801d944:	f000 000f 	and.w	r0, r0, #15
 801d948:	fa00 f00b 	lsl.w	r0, r0, fp
 801d94c:	4303      	orrs	r3, r0
 801d94e:	9300      	str	r3, [sp, #0]
 801d950:	f10b 0b04 	add.w	fp, fp, #4
 801d954:	9b03      	ldr	r3, [sp, #12]
 801d956:	e00d      	b.n	801d974 <__gethex+0x27c>
 801d958:	9b03      	ldr	r3, [sp, #12]
 801d95a:	9a06      	ldr	r2, [sp, #24]
 801d95c:	4413      	add	r3, r2
 801d95e:	42bb      	cmp	r3, r7
 801d960:	d3e0      	bcc.n	801d924 <__gethex+0x22c>
 801d962:	4618      	mov	r0, r3
 801d964:	9901      	ldr	r1, [sp, #4]
 801d966:	9307      	str	r3, [sp, #28]
 801d968:	4652      	mov	r2, sl
 801d96a:	f7fd fe7e 	bl	801b66a <strncmp>
 801d96e:	9b07      	ldr	r3, [sp, #28]
 801d970:	2800      	cmp	r0, #0
 801d972:	d1d7      	bne.n	801d924 <__gethex+0x22c>
 801d974:	461e      	mov	r6, r3
 801d976:	e78b      	b.n	801d890 <__gethex+0x198>
 801d978:	f04f 0a03 	mov.w	sl, #3
 801d97c:	e7b8      	b.n	801d8f0 <__gethex+0x1f8>
 801d97e:	da0a      	bge.n	801d996 <__gethex+0x29e>
 801d980:	1a37      	subs	r7, r6, r0
 801d982:	4621      	mov	r1, r4
 801d984:	ee18 0a10 	vmov	r0, s16
 801d988:	463a      	mov	r2, r7
 801d98a:	f000 fcb1 	bl	801e2f0 <__lshift>
 801d98e:	1bed      	subs	r5, r5, r7
 801d990:	4604      	mov	r4, r0
 801d992:	f100 0914 	add.w	r9, r0, #20
 801d996:	f04f 0a00 	mov.w	sl, #0
 801d99a:	e7ae      	b.n	801d8fa <__gethex+0x202>
 801d99c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d9a0:	42a8      	cmp	r0, r5
 801d9a2:	dd72      	ble.n	801da8a <__gethex+0x392>
 801d9a4:	1b45      	subs	r5, r0, r5
 801d9a6:	42ae      	cmp	r6, r5
 801d9a8:	dc36      	bgt.n	801da18 <__gethex+0x320>
 801d9aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d9ae:	2b02      	cmp	r3, #2
 801d9b0:	d02a      	beq.n	801da08 <__gethex+0x310>
 801d9b2:	2b03      	cmp	r3, #3
 801d9b4:	d02c      	beq.n	801da10 <__gethex+0x318>
 801d9b6:	2b01      	cmp	r3, #1
 801d9b8:	d115      	bne.n	801d9e6 <__gethex+0x2ee>
 801d9ba:	42ae      	cmp	r6, r5
 801d9bc:	d113      	bne.n	801d9e6 <__gethex+0x2ee>
 801d9be:	2e01      	cmp	r6, #1
 801d9c0:	d10b      	bne.n	801d9da <__gethex+0x2e2>
 801d9c2:	9a04      	ldr	r2, [sp, #16]
 801d9c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d9c8:	6013      	str	r3, [r2, #0]
 801d9ca:	2301      	movs	r3, #1
 801d9cc:	6123      	str	r3, [r4, #16]
 801d9ce:	f8c9 3000 	str.w	r3, [r9]
 801d9d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d9d4:	2762      	movs	r7, #98	; 0x62
 801d9d6:	601c      	str	r4, [r3, #0]
 801d9d8:	e723      	b.n	801d822 <__gethex+0x12a>
 801d9da:	1e71      	subs	r1, r6, #1
 801d9dc:	4620      	mov	r0, r4
 801d9de:	f000 fec5 	bl	801e76c <__any_on>
 801d9e2:	2800      	cmp	r0, #0
 801d9e4:	d1ed      	bne.n	801d9c2 <__gethex+0x2ca>
 801d9e6:	ee18 0a10 	vmov	r0, s16
 801d9ea:	4621      	mov	r1, r4
 801d9ec:	f000 fa64 	bl	801deb8 <_Bfree>
 801d9f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	6013      	str	r3, [r2, #0]
 801d9f6:	2750      	movs	r7, #80	; 0x50
 801d9f8:	e713      	b.n	801d822 <__gethex+0x12a>
 801d9fa:	bf00      	nop
 801d9fc:	08021644 	.word	0x08021644
 801da00:	080215c7 	.word	0x080215c7
 801da04:	080215d8 	.word	0x080215d8
 801da08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d1eb      	bne.n	801d9e6 <__gethex+0x2ee>
 801da0e:	e7d8      	b.n	801d9c2 <__gethex+0x2ca>
 801da10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da12:	2b00      	cmp	r3, #0
 801da14:	d1d5      	bne.n	801d9c2 <__gethex+0x2ca>
 801da16:	e7e6      	b.n	801d9e6 <__gethex+0x2ee>
 801da18:	1e6f      	subs	r7, r5, #1
 801da1a:	f1ba 0f00 	cmp.w	sl, #0
 801da1e:	d131      	bne.n	801da84 <__gethex+0x38c>
 801da20:	b127      	cbz	r7, 801da2c <__gethex+0x334>
 801da22:	4639      	mov	r1, r7
 801da24:	4620      	mov	r0, r4
 801da26:	f000 fea1 	bl	801e76c <__any_on>
 801da2a:	4682      	mov	sl, r0
 801da2c:	117b      	asrs	r3, r7, #5
 801da2e:	2101      	movs	r1, #1
 801da30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801da34:	f007 071f 	and.w	r7, r7, #31
 801da38:	fa01 f707 	lsl.w	r7, r1, r7
 801da3c:	421f      	tst	r7, r3
 801da3e:	4629      	mov	r1, r5
 801da40:	4620      	mov	r0, r4
 801da42:	bf18      	it	ne
 801da44:	f04a 0a02 	orrne.w	sl, sl, #2
 801da48:	1b76      	subs	r6, r6, r5
 801da4a:	f7ff fded 	bl	801d628 <rshift>
 801da4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801da52:	2702      	movs	r7, #2
 801da54:	f1ba 0f00 	cmp.w	sl, #0
 801da58:	d048      	beq.n	801daec <__gethex+0x3f4>
 801da5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801da5e:	2b02      	cmp	r3, #2
 801da60:	d015      	beq.n	801da8e <__gethex+0x396>
 801da62:	2b03      	cmp	r3, #3
 801da64:	d017      	beq.n	801da96 <__gethex+0x39e>
 801da66:	2b01      	cmp	r3, #1
 801da68:	d109      	bne.n	801da7e <__gethex+0x386>
 801da6a:	f01a 0f02 	tst.w	sl, #2
 801da6e:	d006      	beq.n	801da7e <__gethex+0x386>
 801da70:	f8d9 0000 	ldr.w	r0, [r9]
 801da74:	ea4a 0a00 	orr.w	sl, sl, r0
 801da78:	f01a 0f01 	tst.w	sl, #1
 801da7c:	d10e      	bne.n	801da9c <__gethex+0x3a4>
 801da7e:	f047 0710 	orr.w	r7, r7, #16
 801da82:	e033      	b.n	801daec <__gethex+0x3f4>
 801da84:	f04f 0a01 	mov.w	sl, #1
 801da88:	e7d0      	b.n	801da2c <__gethex+0x334>
 801da8a:	2701      	movs	r7, #1
 801da8c:	e7e2      	b.n	801da54 <__gethex+0x35c>
 801da8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da90:	f1c3 0301 	rsb	r3, r3, #1
 801da94:	9315      	str	r3, [sp, #84]	; 0x54
 801da96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d0f0      	beq.n	801da7e <__gethex+0x386>
 801da9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801daa0:	f104 0314 	add.w	r3, r4, #20
 801daa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801daa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801daac:	f04f 0c00 	mov.w	ip, #0
 801dab0:	4618      	mov	r0, r3
 801dab2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dab6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801daba:	d01c      	beq.n	801daf6 <__gethex+0x3fe>
 801dabc:	3201      	adds	r2, #1
 801dabe:	6002      	str	r2, [r0, #0]
 801dac0:	2f02      	cmp	r7, #2
 801dac2:	f104 0314 	add.w	r3, r4, #20
 801dac6:	d13f      	bne.n	801db48 <__gethex+0x450>
 801dac8:	f8d8 2000 	ldr.w	r2, [r8]
 801dacc:	3a01      	subs	r2, #1
 801dace:	42b2      	cmp	r2, r6
 801dad0:	d10a      	bne.n	801dae8 <__gethex+0x3f0>
 801dad2:	1171      	asrs	r1, r6, #5
 801dad4:	2201      	movs	r2, #1
 801dad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801dada:	f006 061f 	and.w	r6, r6, #31
 801dade:	fa02 f606 	lsl.w	r6, r2, r6
 801dae2:	421e      	tst	r6, r3
 801dae4:	bf18      	it	ne
 801dae6:	4617      	movne	r7, r2
 801dae8:	f047 0720 	orr.w	r7, r7, #32
 801daec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801daee:	601c      	str	r4, [r3, #0]
 801daf0:	9b04      	ldr	r3, [sp, #16]
 801daf2:	601d      	str	r5, [r3, #0]
 801daf4:	e695      	b.n	801d822 <__gethex+0x12a>
 801daf6:	4299      	cmp	r1, r3
 801daf8:	f843 cc04 	str.w	ip, [r3, #-4]
 801dafc:	d8d8      	bhi.n	801dab0 <__gethex+0x3b8>
 801dafe:	68a3      	ldr	r3, [r4, #8]
 801db00:	459b      	cmp	fp, r3
 801db02:	db19      	blt.n	801db38 <__gethex+0x440>
 801db04:	6861      	ldr	r1, [r4, #4]
 801db06:	ee18 0a10 	vmov	r0, s16
 801db0a:	3101      	adds	r1, #1
 801db0c:	f000 f994 	bl	801de38 <_Balloc>
 801db10:	4681      	mov	r9, r0
 801db12:	b918      	cbnz	r0, 801db1c <__gethex+0x424>
 801db14:	4b1a      	ldr	r3, [pc, #104]	; (801db80 <__gethex+0x488>)
 801db16:	4602      	mov	r2, r0
 801db18:	2184      	movs	r1, #132	; 0x84
 801db1a:	e6a8      	b.n	801d86e <__gethex+0x176>
 801db1c:	6922      	ldr	r2, [r4, #16]
 801db1e:	3202      	adds	r2, #2
 801db20:	f104 010c 	add.w	r1, r4, #12
 801db24:	0092      	lsls	r2, r2, #2
 801db26:	300c      	adds	r0, #12
 801db28:	f7fc fc60 	bl	801a3ec <memcpy>
 801db2c:	4621      	mov	r1, r4
 801db2e:	ee18 0a10 	vmov	r0, s16
 801db32:	f000 f9c1 	bl	801deb8 <_Bfree>
 801db36:	464c      	mov	r4, r9
 801db38:	6923      	ldr	r3, [r4, #16]
 801db3a:	1c5a      	adds	r2, r3, #1
 801db3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801db40:	6122      	str	r2, [r4, #16]
 801db42:	2201      	movs	r2, #1
 801db44:	615a      	str	r2, [r3, #20]
 801db46:	e7bb      	b.n	801dac0 <__gethex+0x3c8>
 801db48:	6922      	ldr	r2, [r4, #16]
 801db4a:	455a      	cmp	r2, fp
 801db4c:	dd0b      	ble.n	801db66 <__gethex+0x46e>
 801db4e:	2101      	movs	r1, #1
 801db50:	4620      	mov	r0, r4
 801db52:	f7ff fd69 	bl	801d628 <rshift>
 801db56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801db5a:	3501      	adds	r5, #1
 801db5c:	42ab      	cmp	r3, r5
 801db5e:	f6ff aed0 	blt.w	801d902 <__gethex+0x20a>
 801db62:	2701      	movs	r7, #1
 801db64:	e7c0      	b.n	801dae8 <__gethex+0x3f0>
 801db66:	f016 061f 	ands.w	r6, r6, #31
 801db6a:	d0fa      	beq.n	801db62 <__gethex+0x46a>
 801db6c:	449a      	add	sl, r3
 801db6e:	f1c6 0620 	rsb	r6, r6, #32
 801db72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801db76:	f000 fa55 	bl	801e024 <__hi0bits>
 801db7a:	42b0      	cmp	r0, r6
 801db7c:	dbe7      	blt.n	801db4e <__gethex+0x456>
 801db7e:	e7f0      	b.n	801db62 <__gethex+0x46a>
 801db80:	080215c7 	.word	0x080215c7

0801db84 <L_shift>:
 801db84:	f1c2 0208 	rsb	r2, r2, #8
 801db88:	0092      	lsls	r2, r2, #2
 801db8a:	b570      	push	{r4, r5, r6, lr}
 801db8c:	f1c2 0620 	rsb	r6, r2, #32
 801db90:	6843      	ldr	r3, [r0, #4]
 801db92:	6804      	ldr	r4, [r0, #0]
 801db94:	fa03 f506 	lsl.w	r5, r3, r6
 801db98:	432c      	orrs	r4, r5
 801db9a:	40d3      	lsrs	r3, r2
 801db9c:	6004      	str	r4, [r0, #0]
 801db9e:	f840 3f04 	str.w	r3, [r0, #4]!
 801dba2:	4288      	cmp	r0, r1
 801dba4:	d3f4      	bcc.n	801db90 <L_shift+0xc>
 801dba6:	bd70      	pop	{r4, r5, r6, pc}

0801dba8 <__match>:
 801dba8:	b530      	push	{r4, r5, lr}
 801dbaa:	6803      	ldr	r3, [r0, #0]
 801dbac:	3301      	adds	r3, #1
 801dbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dbb2:	b914      	cbnz	r4, 801dbba <__match+0x12>
 801dbb4:	6003      	str	r3, [r0, #0]
 801dbb6:	2001      	movs	r0, #1
 801dbb8:	bd30      	pop	{r4, r5, pc}
 801dbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801dbc2:	2d19      	cmp	r5, #25
 801dbc4:	bf98      	it	ls
 801dbc6:	3220      	addls	r2, #32
 801dbc8:	42a2      	cmp	r2, r4
 801dbca:	d0f0      	beq.n	801dbae <__match+0x6>
 801dbcc:	2000      	movs	r0, #0
 801dbce:	e7f3      	b.n	801dbb8 <__match+0x10>

0801dbd0 <__hexnan>:
 801dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbd4:	680b      	ldr	r3, [r1, #0]
 801dbd6:	6801      	ldr	r1, [r0, #0]
 801dbd8:	115e      	asrs	r6, r3, #5
 801dbda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801dbde:	f013 031f 	ands.w	r3, r3, #31
 801dbe2:	b087      	sub	sp, #28
 801dbe4:	bf18      	it	ne
 801dbe6:	3604      	addne	r6, #4
 801dbe8:	2500      	movs	r5, #0
 801dbea:	1f37      	subs	r7, r6, #4
 801dbec:	4682      	mov	sl, r0
 801dbee:	4690      	mov	r8, r2
 801dbf0:	9301      	str	r3, [sp, #4]
 801dbf2:	f846 5c04 	str.w	r5, [r6, #-4]
 801dbf6:	46b9      	mov	r9, r7
 801dbf8:	463c      	mov	r4, r7
 801dbfa:	9502      	str	r5, [sp, #8]
 801dbfc:	46ab      	mov	fp, r5
 801dbfe:	784a      	ldrb	r2, [r1, #1]
 801dc00:	1c4b      	adds	r3, r1, #1
 801dc02:	9303      	str	r3, [sp, #12]
 801dc04:	b342      	cbz	r2, 801dc58 <__hexnan+0x88>
 801dc06:	4610      	mov	r0, r2
 801dc08:	9105      	str	r1, [sp, #20]
 801dc0a:	9204      	str	r2, [sp, #16]
 801dc0c:	f7ff fd5e 	bl	801d6cc <__hexdig_fun>
 801dc10:	2800      	cmp	r0, #0
 801dc12:	d14f      	bne.n	801dcb4 <__hexnan+0xe4>
 801dc14:	9a04      	ldr	r2, [sp, #16]
 801dc16:	9905      	ldr	r1, [sp, #20]
 801dc18:	2a20      	cmp	r2, #32
 801dc1a:	d818      	bhi.n	801dc4e <__hexnan+0x7e>
 801dc1c:	9b02      	ldr	r3, [sp, #8]
 801dc1e:	459b      	cmp	fp, r3
 801dc20:	dd13      	ble.n	801dc4a <__hexnan+0x7a>
 801dc22:	454c      	cmp	r4, r9
 801dc24:	d206      	bcs.n	801dc34 <__hexnan+0x64>
 801dc26:	2d07      	cmp	r5, #7
 801dc28:	dc04      	bgt.n	801dc34 <__hexnan+0x64>
 801dc2a:	462a      	mov	r2, r5
 801dc2c:	4649      	mov	r1, r9
 801dc2e:	4620      	mov	r0, r4
 801dc30:	f7ff ffa8 	bl	801db84 <L_shift>
 801dc34:	4544      	cmp	r4, r8
 801dc36:	d950      	bls.n	801dcda <__hexnan+0x10a>
 801dc38:	2300      	movs	r3, #0
 801dc3a:	f1a4 0904 	sub.w	r9, r4, #4
 801dc3e:	f844 3c04 	str.w	r3, [r4, #-4]
 801dc42:	f8cd b008 	str.w	fp, [sp, #8]
 801dc46:	464c      	mov	r4, r9
 801dc48:	461d      	mov	r5, r3
 801dc4a:	9903      	ldr	r1, [sp, #12]
 801dc4c:	e7d7      	b.n	801dbfe <__hexnan+0x2e>
 801dc4e:	2a29      	cmp	r2, #41	; 0x29
 801dc50:	d156      	bne.n	801dd00 <__hexnan+0x130>
 801dc52:	3102      	adds	r1, #2
 801dc54:	f8ca 1000 	str.w	r1, [sl]
 801dc58:	f1bb 0f00 	cmp.w	fp, #0
 801dc5c:	d050      	beq.n	801dd00 <__hexnan+0x130>
 801dc5e:	454c      	cmp	r4, r9
 801dc60:	d206      	bcs.n	801dc70 <__hexnan+0xa0>
 801dc62:	2d07      	cmp	r5, #7
 801dc64:	dc04      	bgt.n	801dc70 <__hexnan+0xa0>
 801dc66:	462a      	mov	r2, r5
 801dc68:	4649      	mov	r1, r9
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f7ff ff8a 	bl	801db84 <L_shift>
 801dc70:	4544      	cmp	r4, r8
 801dc72:	d934      	bls.n	801dcde <__hexnan+0x10e>
 801dc74:	f1a8 0204 	sub.w	r2, r8, #4
 801dc78:	4623      	mov	r3, r4
 801dc7a:	f853 1b04 	ldr.w	r1, [r3], #4
 801dc7e:	f842 1f04 	str.w	r1, [r2, #4]!
 801dc82:	429f      	cmp	r7, r3
 801dc84:	d2f9      	bcs.n	801dc7a <__hexnan+0xaa>
 801dc86:	1b3b      	subs	r3, r7, r4
 801dc88:	f023 0303 	bic.w	r3, r3, #3
 801dc8c:	3304      	adds	r3, #4
 801dc8e:	3401      	adds	r4, #1
 801dc90:	3e03      	subs	r6, #3
 801dc92:	42b4      	cmp	r4, r6
 801dc94:	bf88      	it	hi
 801dc96:	2304      	movhi	r3, #4
 801dc98:	4443      	add	r3, r8
 801dc9a:	2200      	movs	r2, #0
 801dc9c:	f843 2b04 	str.w	r2, [r3], #4
 801dca0:	429f      	cmp	r7, r3
 801dca2:	d2fb      	bcs.n	801dc9c <__hexnan+0xcc>
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	b91b      	cbnz	r3, 801dcb0 <__hexnan+0xe0>
 801dca8:	4547      	cmp	r7, r8
 801dcaa:	d127      	bne.n	801dcfc <__hexnan+0x12c>
 801dcac:	2301      	movs	r3, #1
 801dcae:	603b      	str	r3, [r7, #0]
 801dcb0:	2005      	movs	r0, #5
 801dcb2:	e026      	b.n	801dd02 <__hexnan+0x132>
 801dcb4:	3501      	adds	r5, #1
 801dcb6:	2d08      	cmp	r5, #8
 801dcb8:	f10b 0b01 	add.w	fp, fp, #1
 801dcbc:	dd06      	ble.n	801dccc <__hexnan+0xfc>
 801dcbe:	4544      	cmp	r4, r8
 801dcc0:	d9c3      	bls.n	801dc4a <__hexnan+0x7a>
 801dcc2:	2300      	movs	r3, #0
 801dcc4:	f844 3c04 	str.w	r3, [r4, #-4]
 801dcc8:	2501      	movs	r5, #1
 801dcca:	3c04      	subs	r4, #4
 801dccc:	6822      	ldr	r2, [r4, #0]
 801dcce:	f000 000f 	and.w	r0, r0, #15
 801dcd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801dcd6:	6022      	str	r2, [r4, #0]
 801dcd8:	e7b7      	b.n	801dc4a <__hexnan+0x7a>
 801dcda:	2508      	movs	r5, #8
 801dcdc:	e7b5      	b.n	801dc4a <__hexnan+0x7a>
 801dcde:	9b01      	ldr	r3, [sp, #4]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d0df      	beq.n	801dca4 <__hexnan+0xd4>
 801dce4:	f04f 32ff 	mov.w	r2, #4294967295
 801dce8:	f1c3 0320 	rsb	r3, r3, #32
 801dcec:	fa22 f303 	lsr.w	r3, r2, r3
 801dcf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801dcf4:	401a      	ands	r2, r3
 801dcf6:	f846 2c04 	str.w	r2, [r6, #-4]
 801dcfa:	e7d3      	b.n	801dca4 <__hexnan+0xd4>
 801dcfc:	3f04      	subs	r7, #4
 801dcfe:	e7d1      	b.n	801dca4 <__hexnan+0xd4>
 801dd00:	2004      	movs	r0, #4
 801dd02:	b007      	add	sp, #28
 801dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd08 <_localeconv_r>:
 801dd08:	4800      	ldr	r0, [pc, #0]	; (801dd0c <_localeconv_r+0x4>)
 801dd0a:	4770      	bx	lr
 801dd0c:	20000350 	.word	0x20000350

0801dd10 <_lseek_r>:
 801dd10:	b538      	push	{r3, r4, r5, lr}
 801dd12:	4d07      	ldr	r5, [pc, #28]	; (801dd30 <_lseek_r+0x20>)
 801dd14:	4604      	mov	r4, r0
 801dd16:	4608      	mov	r0, r1
 801dd18:	4611      	mov	r1, r2
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	602a      	str	r2, [r5, #0]
 801dd1e:	461a      	mov	r2, r3
 801dd20:	f7e5 f902 	bl	8002f28 <_lseek>
 801dd24:	1c43      	adds	r3, r0, #1
 801dd26:	d102      	bne.n	801dd2e <_lseek_r+0x1e>
 801dd28:	682b      	ldr	r3, [r5, #0]
 801dd2a:	b103      	cbz	r3, 801dd2e <_lseek_r+0x1e>
 801dd2c:	6023      	str	r3, [r4, #0]
 801dd2e:	bd38      	pop	{r3, r4, r5, pc}
 801dd30:	20008fb4 	.word	0x20008fb4

0801dd34 <__swhatbuf_r>:
 801dd34:	b570      	push	{r4, r5, r6, lr}
 801dd36:	460e      	mov	r6, r1
 801dd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd3c:	2900      	cmp	r1, #0
 801dd3e:	b096      	sub	sp, #88	; 0x58
 801dd40:	4614      	mov	r4, r2
 801dd42:	461d      	mov	r5, r3
 801dd44:	da07      	bge.n	801dd56 <__swhatbuf_r+0x22>
 801dd46:	2300      	movs	r3, #0
 801dd48:	602b      	str	r3, [r5, #0]
 801dd4a:	89b3      	ldrh	r3, [r6, #12]
 801dd4c:	061a      	lsls	r2, r3, #24
 801dd4e:	d410      	bmi.n	801dd72 <__swhatbuf_r+0x3e>
 801dd50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd54:	e00e      	b.n	801dd74 <__swhatbuf_r+0x40>
 801dd56:	466a      	mov	r2, sp
 801dd58:	f001 fbc6 	bl	801f4e8 <_fstat_r>
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	dbf2      	blt.n	801dd46 <__swhatbuf_r+0x12>
 801dd60:	9a01      	ldr	r2, [sp, #4]
 801dd62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd6a:	425a      	negs	r2, r3
 801dd6c:	415a      	adcs	r2, r3
 801dd6e:	602a      	str	r2, [r5, #0]
 801dd70:	e7ee      	b.n	801dd50 <__swhatbuf_r+0x1c>
 801dd72:	2340      	movs	r3, #64	; 0x40
 801dd74:	2000      	movs	r0, #0
 801dd76:	6023      	str	r3, [r4, #0]
 801dd78:	b016      	add	sp, #88	; 0x58
 801dd7a:	bd70      	pop	{r4, r5, r6, pc}

0801dd7c <__smakebuf_r>:
 801dd7c:	898b      	ldrh	r3, [r1, #12]
 801dd7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dd80:	079d      	lsls	r5, r3, #30
 801dd82:	4606      	mov	r6, r0
 801dd84:	460c      	mov	r4, r1
 801dd86:	d507      	bpl.n	801dd98 <__smakebuf_r+0x1c>
 801dd88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dd8c:	6023      	str	r3, [r4, #0]
 801dd8e:	6123      	str	r3, [r4, #16]
 801dd90:	2301      	movs	r3, #1
 801dd92:	6163      	str	r3, [r4, #20]
 801dd94:	b002      	add	sp, #8
 801dd96:	bd70      	pop	{r4, r5, r6, pc}
 801dd98:	ab01      	add	r3, sp, #4
 801dd9a:	466a      	mov	r2, sp
 801dd9c:	f7ff ffca 	bl	801dd34 <__swhatbuf_r>
 801dda0:	9900      	ldr	r1, [sp, #0]
 801dda2:	4605      	mov	r5, r0
 801dda4:	4630      	mov	r0, r6
 801dda6:	f7fc fba1 	bl	801a4ec <_malloc_r>
 801ddaa:	b948      	cbnz	r0, 801ddc0 <__smakebuf_r+0x44>
 801ddac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddb0:	059a      	lsls	r2, r3, #22
 801ddb2:	d4ef      	bmi.n	801dd94 <__smakebuf_r+0x18>
 801ddb4:	f023 0303 	bic.w	r3, r3, #3
 801ddb8:	f043 0302 	orr.w	r3, r3, #2
 801ddbc:	81a3      	strh	r3, [r4, #12]
 801ddbe:	e7e3      	b.n	801dd88 <__smakebuf_r+0xc>
 801ddc0:	4b0d      	ldr	r3, [pc, #52]	; (801ddf8 <__smakebuf_r+0x7c>)
 801ddc2:	62b3      	str	r3, [r6, #40]	; 0x28
 801ddc4:	89a3      	ldrh	r3, [r4, #12]
 801ddc6:	6020      	str	r0, [r4, #0]
 801ddc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddcc:	81a3      	strh	r3, [r4, #12]
 801ddce:	9b00      	ldr	r3, [sp, #0]
 801ddd0:	6163      	str	r3, [r4, #20]
 801ddd2:	9b01      	ldr	r3, [sp, #4]
 801ddd4:	6120      	str	r0, [r4, #16]
 801ddd6:	b15b      	cbz	r3, 801ddf0 <__smakebuf_r+0x74>
 801ddd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dddc:	4630      	mov	r0, r6
 801ddde:	f001 fb95 	bl	801f50c <_isatty_r>
 801dde2:	b128      	cbz	r0, 801ddf0 <__smakebuf_r+0x74>
 801dde4:	89a3      	ldrh	r3, [r4, #12]
 801dde6:	f023 0303 	bic.w	r3, r3, #3
 801ddea:	f043 0301 	orr.w	r3, r3, #1
 801ddee:	81a3      	strh	r3, [r4, #12]
 801ddf0:	89a0      	ldrh	r0, [r4, #12]
 801ddf2:	4305      	orrs	r5, r0
 801ddf4:	81a5      	strh	r5, [r4, #12]
 801ddf6:	e7cd      	b.n	801dd94 <__smakebuf_r+0x18>
 801ddf8:	0801a1e9 	.word	0x0801a1e9

0801ddfc <__ascii_mbtowc>:
 801ddfc:	b082      	sub	sp, #8
 801ddfe:	b901      	cbnz	r1, 801de02 <__ascii_mbtowc+0x6>
 801de00:	a901      	add	r1, sp, #4
 801de02:	b142      	cbz	r2, 801de16 <__ascii_mbtowc+0x1a>
 801de04:	b14b      	cbz	r3, 801de1a <__ascii_mbtowc+0x1e>
 801de06:	7813      	ldrb	r3, [r2, #0]
 801de08:	600b      	str	r3, [r1, #0]
 801de0a:	7812      	ldrb	r2, [r2, #0]
 801de0c:	1e10      	subs	r0, r2, #0
 801de0e:	bf18      	it	ne
 801de10:	2001      	movne	r0, #1
 801de12:	b002      	add	sp, #8
 801de14:	4770      	bx	lr
 801de16:	4610      	mov	r0, r2
 801de18:	e7fb      	b.n	801de12 <__ascii_mbtowc+0x16>
 801de1a:	f06f 0001 	mvn.w	r0, #1
 801de1e:	e7f8      	b.n	801de12 <__ascii_mbtowc+0x16>

0801de20 <__malloc_lock>:
 801de20:	4801      	ldr	r0, [pc, #4]	; (801de28 <__malloc_lock+0x8>)
 801de22:	f7fc bad8 	b.w	801a3d6 <__retarget_lock_acquire_recursive>
 801de26:	bf00      	nop
 801de28:	20008fac 	.word	0x20008fac

0801de2c <__malloc_unlock>:
 801de2c:	4801      	ldr	r0, [pc, #4]	; (801de34 <__malloc_unlock+0x8>)
 801de2e:	f7fc bad3 	b.w	801a3d8 <__retarget_lock_release_recursive>
 801de32:	bf00      	nop
 801de34:	20008fac 	.word	0x20008fac

0801de38 <_Balloc>:
 801de38:	b570      	push	{r4, r5, r6, lr}
 801de3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801de3c:	4604      	mov	r4, r0
 801de3e:	460d      	mov	r5, r1
 801de40:	b976      	cbnz	r6, 801de60 <_Balloc+0x28>
 801de42:	2010      	movs	r0, #16
 801de44:	f7fc faca 	bl	801a3dc <malloc>
 801de48:	4602      	mov	r2, r0
 801de4a:	6260      	str	r0, [r4, #36]	; 0x24
 801de4c:	b920      	cbnz	r0, 801de58 <_Balloc+0x20>
 801de4e:	4b18      	ldr	r3, [pc, #96]	; (801deb0 <_Balloc+0x78>)
 801de50:	4818      	ldr	r0, [pc, #96]	; (801deb4 <_Balloc+0x7c>)
 801de52:	2166      	movs	r1, #102	; 0x66
 801de54:	f7fe fc6c 	bl	801c730 <__assert_func>
 801de58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801de5c:	6006      	str	r6, [r0, #0]
 801de5e:	60c6      	str	r6, [r0, #12]
 801de60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801de62:	68f3      	ldr	r3, [r6, #12]
 801de64:	b183      	cbz	r3, 801de88 <_Balloc+0x50>
 801de66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de68:	68db      	ldr	r3, [r3, #12]
 801de6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801de6e:	b9b8      	cbnz	r0, 801dea0 <_Balloc+0x68>
 801de70:	2101      	movs	r1, #1
 801de72:	fa01 f605 	lsl.w	r6, r1, r5
 801de76:	1d72      	adds	r2, r6, #5
 801de78:	0092      	lsls	r2, r2, #2
 801de7a:	4620      	mov	r0, r4
 801de7c:	f000 fc97 	bl	801e7ae <_calloc_r>
 801de80:	b160      	cbz	r0, 801de9c <_Balloc+0x64>
 801de82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801de86:	e00e      	b.n	801dea6 <_Balloc+0x6e>
 801de88:	2221      	movs	r2, #33	; 0x21
 801de8a:	2104      	movs	r1, #4
 801de8c:	4620      	mov	r0, r4
 801de8e:	f000 fc8e 	bl	801e7ae <_calloc_r>
 801de92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de94:	60f0      	str	r0, [r6, #12]
 801de96:	68db      	ldr	r3, [r3, #12]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d1e4      	bne.n	801de66 <_Balloc+0x2e>
 801de9c:	2000      	movs	r0, #0
 801de9e:	bd70      	pop	{r4, r5, r6, pc}
 801dea0:	6802      	ldr	r2, [r0, #0]
 801dea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dea6:	2300      	movs	r3, #0
 801dea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801deac:	e7f7      	b.n	801de9e <_Balloc+0x66>
 801deae:	bf00      	nop
 801deb0:	08021551 	.word	0x08021551
 801deb4:	08021658 	.word	0x08021658

0801deb8 <_Bfree>:
 801deb8:	b570      	push	{r4, r5, r6, lr}
 801deba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801debc:	4605      	mov	r5, r0
 801debe:	460c      	mov	r4, r1
 801dec0:	b976      	cbnz	r6, 801dee0 <_Bfree+0x28>
 801dec2:	2010      	movs	r0, #16
 801dec4:	f7fc fa8a 	bl	801a3dc <malloc>
 801dec8:	4602      	mov	r2, r0
 801deca:	6268      	str	r0, [r5, #36]	; 0x24
 801decc:	b920      	cbnz	r0, 801ded8 <_Bfree+0x20>
 801dece:	4b09      	ldr	r3, [pc, #36]	; (801def4 <_Bfree+0x3c>)
 801ded0:	4809      	ldr	r0, [pc, #36]	; (801def8 <_Bfree+0x40>)
 801ded2:	218a      	movs	r1, #138	; 0x8a
 801ded4:	f7fe fc2c 	bl	801c730 <__assert_func>
 801ded8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dedc:	6006      	str	r6, [r0, #0]
 801dede:	60c6      	str	r6, [r0, #12]
 801dee0:	b13c      	cbz	r4, 801def2 <_Bfree+0x3a>
 801dee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dee4:	6862      	ldr	r2, [r4, #4]
 801dee6:	68db      	ldr	r3, [r3, #12]
 801dee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801deec:	6021      	str	r1, [r4, #0]
 801deee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801def2:	bd70      	pop	{r4, r5, r6, pc}
 801def4:	08021551 	.word	0x08021551
 801def8:	08021658 	.word	0x08021658

0801defc <__multadd>:
 801defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df00:	690e      	ldr	r6, [r1, #16]
 801df02:	4607      	mov	r7, r0
 801df04:	4698      	mov	r8, r3
 801df06:	460c      	mov	r4, r1
 801df08:	f101 0014 	add.w	r0, r1, #20
 801df0c:	2300      	movs	r3, #0
 801df0e:	6805      	ldr	r5, [r0, #0]
 801df10:	b2a9      	uxth	r1, r5
 801df12:	fb02 8101 	mla	r1, r2, r1, r8
 801df16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801df1a:	0c2d      	lsrs	r5, r5, #16
 801df1c:	fb02 c505 	mla	r5, r2, r5, ip
 801df20:	b289      	uxth	r1, r1
 801df22:	3301      	adds	r3, #1
 801df24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801df28:	429e      	cmp	r6, r3
 801df2a:	f840 1b04 	str.w	r1, [r0], #4
 801df2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801df32:	dcec      	bgt.n	801df0e <__multadd+0x12>
 801df34:	f1b8 0f00 	cmp.w	r8, #0
 801df38:	d022      	beq.n	801df80 <__multadd+0x84>
 801df3a:	68a3      	ldr	r3, [r4, #8]
 801df3c:	42b3      	cmp	r3, r6
 801df3e:	dc19      	bgt.n	801df74 <__multadd+0x78>
 801df40:	6861      	ldr	r1, [r4, #4]
 801df42:	4638      	mov	r0, r7
 801df44:	3101      	adds	r1, #1
 801df46:	f7ff ff77 	bl	801de38 <_Balloc>
 801df4a:	4605      	mov	r5, r0
 801df4c:	b928      	cbnz	r0, 801df5a <__multadd+0x5e>
 801df4e:	4602      	mov	r2, r0
 801df50:	4b0d      	ldr	r3, [pc, #52]	; (801df88 <__multadd+0x8c>)
 801df52:	480e      	ldr	r0, [pc, #56]	; (801df8c <__multadd+0x90>)
 801df54:	21b5      	movs	r1, #181	; 0xb5
 801df56:	f7fe fbeb 	bl	801c730 <__assert_func>
 801df5a:	6922      	ldr	r2, [r4, #16]
 801df5c:	3202      	adds	r2, #2
 801df5e:	f104 010c 	add.w	r1, r4, #12
 801df62:	0092      	lsls	r2, r2, #2
 801df64:	300c      	adds	r0, #12
 801df66:	f7fc fa41 	bl	801a3ec <memcpy>
 801df6a:	4621      	mov	r1, r4
 801df6c:	4638      	mov	r0, r7
 801df6e:	f7ff ffa3 	bl	801deb8 <_Bfree>
 801df72:	462c      	mov	r4, r5
 801df74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801df78:	3601      	adds	r6, #1
 801df7a:	f8c3 8014 	str.w	r8, [r3, #20]
 801df7e:	6126      	str	r6, [r4, #16]
 801df80:	4620      	mov	r0, r4
 801df82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df86:	bf00      	nop
 801df88:	080215c7 	.word	0x080215c7
 801df8c:	08021658 	.word	0x08021658

0801df90 <__s2b>:
 801df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df94:	460c      	mov	r4, r1
 801df96:	4615      	mov	r5, r2
 801df98:	461f      	mov	r7, r3
 801df9a:	2209      	movs	r2, #9
 801df9c:	3308      	adds	r3, #8
 801df9e:	4606      	mov	r6, r0
 801dfa0:	fb93 f3f2 	sdiv	r3, r3, r2
 801dfa4:	2100      	movs	r1, #0
 801dfa6:	2201      	movs	r2, #1
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	db09      	blt.n	801dfc0 <__s2b+0x30>
 801dfac:	4630      	mov	r0, r6
 801dfae:	f7ff ff43 	bl	801de38 <_Balloc>
 801dfb2:	b940      	cbnz	r0, 801dfc6 <__s2b+0x36>
 801dfb4:	4602      	mov	r2, r0
 801dfb6:	4b19      	ldr	r3, [pc, #100]	; (801e01c <__s2b+0x8c>)
 801dfb8:	4819      	ldr	r0, [pc, #100]	; (801e020 <__s2b+0x90>)
 801dfba:	21ce      	movs	r1, #206	; 0xce
 801dfbc:	f7fe fbb8 	bl	801c730 <__assert_func>
 801dfc0:	0052      	lsls	r2, r2, #1
 801dfc2:	3101      	adds	r1, #1
 801dfc4:	e7f0      	b.n	801dfa8 <__s2b+0x18>
 801dfc6:	9b08      	ldr	r3, [sp, #32]
 801dfc8:	6143      	str	r3, [r0, #20]
 801dfca:	2d09      	cmp	r5, #9
 801dfcc:	f04f 0301 	mov.w	r3, #1
 801dfd0:	6103      	str	r3, [r0, #16]
 801dfd2:	dd16      	ble.n	801e002 <__s2b+0x72>
 801dfd4:	f104 0909 	add.w	r9, r4, #9
 801dfd8:	46c8      	mov	r8, r9
 801dfda:	442c      	add	r4, r5
 801dfdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dfe0:	4601      	mov	r1, r0
 801dfe2:	3b30      	subs	r3, #48	; 0x30
 801dfe4:	220a      	movs	r2, #10
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	f7ff ff88 	bl	801defc <__multadd>
 801dfec:	45a0      	cmp	r8, r4
 801dfee:	d1f5      	bne.n	801dfdc <__s2b+0x4c>
 801dff0:	f1a5 0408 	sub.w	r4, r5, #8
 801dff4:	444c      	add	r4, r9
 801dff6:	1b2d      	subs	r5, r5, r4
 801dff8:	1963      	adds	r3, r4, r5
 801dffa:	42bb      	cmp	r3, r7
 801dffc:	db04      	blt.n	801e008 <__s2b+0x78>
 801dffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e002:	340a      	adds	r4, #10
 801e004:	2509      	movs	r5, #9
 801e006:	e7f6      	b.n	801dff6 <__s2b+0x66>
 801e008:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e00c:	4601      	mov	r1, r0
 801e00e:	3b30      	subs	r3, #48	; 0x30
 801e010:	220a      	movs	r2, #10
 801e012:	4630      	mov	r0, r6
 801e014:	f7ff ff72 	bl	801defc <__multadd>
 801e018:	e7ee      	b.n	801dff8 <__s2b+0x68>
 801e01a:	bf00      	nop
 801e01c:	080215c7 	.word	0x080215c7
 801e020:	08021658 	.word	0x08021658

0801e024 <__hi0bits>:
 801e024:	0c03      	lsrs	r3, r0, #16
 801e026:	041b      	lsls	r3, r3, #16
 801e028:	b9d3      	cbnz	r3, 801e060 <__hi0bits+0x3c>
 801e02a:	0400      	lsls	r0, r0, #16
 801e02c:	2310      	movs	r3, #16
 801e02e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e032:	bf04      	itt	eq
 801e034:	0200      	lsleq	r0, r0, #8
 801e036:	3308      	addeq	r3, #8
 801e038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e03c:	bf04      	itt	eq
 801e03e:	0100      	lsleq	r0, r0, #4
 801e040:	3304      	addeq	r3, #4
 801e042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e046:	bf04      	itt	eq
 801e048:	0080      	lsleq	r0, r0, #2
 801e04a:	3302      	addeq	r3, #2
 801e04c:	2800      	cmp	r0, #0
 801e04e:	db05      	blt.n	801e05c <__hi0bits+0x38>
 801e050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e054:	f103 0301 	add.w	r3, r3, #1
 801e058:	bf08      	it	eq
 801e05a:	2320      	moveq	r3, #32
 801e05c:	4618      	mov	r0, r3
 801e05e:	4770      	bx	lr
 801e060:	2300      	movs	r3, #0
 801e062:	e7e4      	b.n	801e02e <__hi0bits+0xa>

0801e064 <__lo0bits>:
 801e064:	6803      	ldr	r3, [r0, #0]
 801e066:	f013 0207 	ands.w	r2, r3, #7
 801e06a:	4601      	mov	r1, r0
 801e06c:	d00b      	beq.n	801e086 <__lo0bits+0x22>
 801e06e:	07da      	lsls	r2, r3, #31
 801e070:	d424      	bmi.n	801e0bc <__lo0bits+0x58>
 801e072:	0798      	lsls	r0, r3, #30
 801e074:	bf49      	itett	mi
 801e076:	085b      	lsrmi	r3, r3, #1
 801e078:	089b      	lsrpl	r3, r3, #2
 801e07a:	2001      	movmi	r0, #1
 801e07c:	600b      	strmi	r3, [r1, #0]
 801e07e:	bf5c      	itt	pl
 801e080:	600b      	strpl	r3, [r1, #0]
 801e082:	2002      	movpl	r0, #2
 801e084:	4770      	bx	lr
 801e086:	b298      	uxth	r0, r3
 801e088:	b9b0      	cbnz	r0, 801e0b8 <__lo0bits+0x54>
 801e08a:	0c1b      	lsrs	r3, r3, #16
 801e08c:	2010      	movs	r0, #16
 801e08e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e092:	bf04      	itt	eq
 801e094:	0a1b      	lsreq	r3, r3, #8
 801e096:	3008      	addeq	r0, #8
 801e098:	071a      	lsls	r2, r3, #28
 801e09a:	bf04      	itt	eq
 801e09c:	091b      	lsreq	r3, r3, #4
 801e09e:	3004      	addeq	r0, #4
 801e0a0:	079a      	lsls	r2, r3, #30
 801e0a2:	bf04      	itt	eq
 801e0a4:	089b      	lsreq	r3, r3, #2
 801e0a6:	3002      	addeq	r0, #2
 801e0a8:	07da      	lsls	r2, r3, #31
 801e0aa:	d403      	bmi.n	801e0b4 <__lo0bits+0x50>
 801e0ac:	085b      	lsrs	r3, r3, #1
 801e0ae:	f100 0001 	add.w	r0, r0, #1
 801e0b2:	d005      	beq.n	801e0c0 <__lo0bits+0x5c>
 801e0b4:	600b      	str	r3, [r1, #0]
 801e0b6:	4770      	bx	lr
 801e0b8:	4610      	mov	r0, r2
 801e0ba:	e7e8      	b.n	801e08e <__lo0bits+0x2a>
 801e0bc:	2000      	movs	r0, #0
 801e0be:	4770      	bx	lr
 801e0c0:	2020      	movs	r0, #32
 801e0c2:	4770      	bx	lr

0801e0c4 <__i2b>:
 801e0c4:	b510      	push	{r4, lr}
 801e0c6:	460c      	mov	r4, r1
 801e0c8:	2101      	movs	r1, #1
 801e0ca:	f7ff feb5 	bl	801de38 <_Balloc>
 801e0ce:	4602      	mov	r2, r0
 801e0d0:	b928      	cbnz	r0, 801e0de <__i2b+0x1a>
 801e0d2:	4b05      	ldr	r3, [pc, #20]	; (801e0e8 <__i2b+0x24>)
 801e0d4:	4805      	ldr	r0, [pc, #20]	; (801e0ec <__i2b+0x28>)
 801e0d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e0da:	f7fe fb29 	bl	801c730 <__assert_func>
 801e0de:	2301      	movs	r3, #1
 801e0e0:	6144      	str	r4, [r0, #20]
 801e0e2:	6103      	str	r3, [r0, #16]
 801e0e4:	bd10      	pop	{r4, pc}
 801e0e6:	bf00      	nop
 801e0e8:	080215c7 	.word	0x080215c7
 801e0ec:	08021658 	.word	0x08021658

0801e0f0 <__multiply>:
 801e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f4:	4614      	mov	r4, r2
 801e0f6:	690a      	ldr	r2, [r1, #16]
 801e0f8:	6923      	ldr	r3, [r4, #16]
 801e0fa:	429a      	cmp	r2, r3
 801e0fc:	bfb8      	it	lt
 801e0fe:	460b      	movlt	r3, r1
 801e100:	460d      	mov	r5, r1
 801e102:	bfbc      	itt	lt
 801e104:	4625      	movlt	r5, r4
 801e106:	461c      	movlt	r4, r3
 801e108:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e10c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e110:	68ab      	ldr	r3, [r5, #8]
 801e112:	6869      	ldr	r1, [r5, #4]
 801e114:	eb0a 0709 	add.w	r7, sl, r9
 801e118:	42bb      	cmp	r3, r7
 801e11a:	b085      	sub	sp, #20
 801e11c:	bfb8      	it	lt
 801e11e:	3101      	addlt	r1, #1
 801e120:	f7ff fe8a 	bl	801de38 <_Balloc>
 801e124:	b930      	cbnz	r0, 801e134 <__multiply+0x44>
 801e126:	4602      	mov	r2, r0
 801e128:	4b42      	ldr	r3, [pc, #264]	; (801e234 <__multiply+0x144>)
 801e12a:	4843      	ldr	r0, [pc, #268]	; (801e238 <__multiply+0x148>)
 801e12c:	f240 115d 	movw	r1, #349	; 0x15d
 801e130:	f7fe fafe 	bl	801c730 <__assert_func>
 801e134:	f100 0614 	add.w	r6, r0, #20
 801e138:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e13c:	4633      	mov	r3, r6
 801e13e:	2200      	movs	r2, #0
 801e140:	4543      	cmp	r3, r8
 801e142:	d31e      	bcc.n	801e182 <__multiply+0x92>
 801e144:	f105 0c14 	add.w	ip, r5, #20
 801e148:	f104 0314 	add.w	r3, r4, #20
 801e14c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e150:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e154:	9202      	str	r2, [sp, #8]
 801e156:	ebac 0205 	sub.w	r2, ip, r5
 801e15a:	3a15      	subs	r2, #21
 801e15c:	f022 0203 	bic.w	r2, r2, #3
 801e160:	3204      	adds	r2, #4
 801e162:	f105 0115 	add.w	r1, r5, #21
 801e166:	458c      	cmp	ip, r1
 801e168:	bf38      	it	cc
 801e16a:	2204      	movcc	r2, #4
 801e16c:	9201      	str	r2, [sp, #4]
 801e16e:	9a02      	ldr	r2, [sp, #8]
 801e170:	9303      	str	r3, [sp, #12]
 801e172:	429a      	cmp	r2, r3
 801e174:	d808      	bhi.n	801e188 <__multiply+0x98>
 801e176:	2f00      	cmp	r7, #0
 801e178:	dc55      	bgt.n	801e226 <__multiply+0x136>
 801e17a:	6107      	str	r7, [r0, #16]
 801e17c:	b005      	add	sp, #20
 801e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e182:	f843 2b04 	str.w	r2, [r3], #4
 801e186:	e7db      	b.n	801e140 <__multiply+0x50>
 801e188:	f8b3 a000 	ldrh.w	sl, [r3]
 801e18c:	f1ba 0f00 	cmp.w	sl, #0
 801e190:	d020      	beq.n	801e1d4 <__multiply+0xe4>
 801e192:	f105 0e14 	add.w	lr, r5, #20
 801e196:	46b1      	mov	r9, r6
 801e198:	2200      	movs	r2, #0
 801e19a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e19e:	f8d9 b000 	ldr.w	fp, [r9]
 801e1a2:	b2a1      	uxth	r1, r4
 801e1a4:	fa1f fb8b 	uxth.w	fp, fp
 801e1a8:	fb0a b101 	mla	r1, sl, r1, fp
 801e1ac:	4411      	add	r1, r2
 801e1ae:	f8d9 2000 	ldr.w	r2, [r9]
 801e1b2:	0c24      	lsrs	r4, r4, #16
 801e1b4:	0c12      	lsrs	r2, r2, #16
 801e1b6:	fb0a 2404 	mla	r4, sl, r4, r2
 801e1ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e1be:	b289      	uxth	r1, r1
 801e1c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e1c4:	45f4      	cmp	ip, lr
 801e1c6:	f849 1b04 	str.w	r1, [r9], #4
 801e1ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e1ce:	d8e4      	bhi.n	801e19a <__multiply+0xaa>
 801e1d0:	9901      	ldr	r1, [sp, #4]
 801e1d2:	5072      	str	r2, [r6, r1]
 801e1d4:	9a03      	ldr	r2, [sp, #12]
 801e1d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e1da:	3304      	adds	r3, #4
 801e1dc:	f1b9 0f00 	cmp.w	r9, #0
 801e1e0:	d01f      	beq.n	801e222 <__multiply+0x132>
 801e1e2:	6834      	ldr	r4, [r6, #0]
 801e1e4:	f105 0114 	add.w	r1, r5, #20
 801e1e8:	46b6      	mov	lr, r6
 801e1ea:	f04f 0a00 	mov.w	sl, #0
 801e1ee:	880a      	ldrh	r2, [r1, #0]
 801e1f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e1f4:	fb09 b202 	mla	r2, r9, r2, fp
 801e1f8:	4492      	add	sl, r2
 801e1fa:	b2a4      	uxth	r4, r4
 801e1fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e200:	f84e 4b04 	str.w	r4, [lr], #4
 801e204:	f851 4b04 	ldr.w	r4, [r1], #4
 801e208:	f8be 2000 	ldrh.w	r2, [lr]
 801e20c:	0c24      	lsrs	r4, r4, #16
 801e20e:	fb09 2404 	mla	r4, r9, r4, r2
 801e212:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e216:	458c      	cmp	ip, r1
 801e218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e21c:	d8e7      	bhi.n	801e1ee <__multiply+0xfe>
 801e21e:	9a01      	ldr	r2, [sp, #4]
 801e220:	50b4      	str	r4, [r6, r2]
 801e222:	3604      	adds	r6, #4
 801e224:	e7a3      	b.n	801e16e <__multiply+0x7e>
 801e226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d1a5      	bne.n	801e17a <__multiply+0x8a>
 801e22e:	3f01      	subs	r7, #1
 801e230:	e7a1      	b.n	801e176 <__multiply+0x86>
 801e232:	bf00      	nop
 801e234:	080215c7 	.word	0x080215c7
 801e238:	08021658 	.word	0x08021658

0801e23c <__pow5mult>:
 801e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e240:	4615      	mov	r5, r2
 801e242:	f012 0203 	ands.w	r2, r2, #3
 801e246:	4606      	mov	r6, r0
 801e248:	460f      	mov	r7, r1
 801e24a:	d007      	beq.n	801e25c <__pow5mult+0x20>
 801e24c:	4c25      	ldr	r4, [pc, #148]	; (801e2e4 <__pow5mult+0xa8>)
 801e24e:	3a01      	subs	r2, #1
 801e250:	2300      	movs	r3, #0
 801e252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e256:	f7ff fe51 	bl	801defc <__multadd>
 801e25a:	4607      	mov	r7, r0
 801e25c:	10ad      	asrs	r5, r5, #2
 801e25e:	d03d      	beq.n	801e2dc <__pow5mult+0xa0>
 801e260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e262:	b97c      	cbnz	r4, 801e284 <__pow5mult+0x48>
 801e264:	2010      	movs	r0, #16
 801e266:	f7fc f8b9 	bl	801a3dc <malloc>
 801e26a:	4602      	mov	r2, r0
 801e26c:	6270      	str	r0, [r6, #36]	; 0x24
 801e26e:	b928      	cbnz	r0, 801e27c <__pow5mult+0x40>
 801e270:	4b1d      	ldr	r3, [pc, #116]	; (801e2e8 <__pow5mult+0xac>)
 801e272:	481e      	ldr	r0, [pc, #120]	; (801e2ec <__pow5mult+0xb0>)
 801e274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e278:	f7fe fa5a 	bl	801c730 <__assert_func>
 801e27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e280:	6004      	str	r4, [r0, #0]
 801e282:	60c4      	str	r4, [r0, #12]
 801e284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e28c:	b94c      	cbnz	r4, 801e2a2 <__pow5mult+0x66>
 801e28e:	f240 2171 	movw	r1, #625	; 0x271
 801e292:	4630      	mov	r0, r6
 801e294:	f7ff ff16 	bl	801e0c4 <__i2b>
 801e298:	2300      	movs	r3, #0
 801e29a:	f8c8 0008 	str.w	r0, [r8, #8]
 801e29e:	4604      	mov	r4, r0
 801e2a0:	6003      	str	r3, [r0, #0]
 801e2a2:	f04f 0900 	mov.w	r9, #0
 801e2a6:	07eb      	lsls	r3, r5, #31
 801e2a8:	d50a      	bpl.n	801e2c0 <__pow5mult+0x84>
 801e2aa:	4639      	mov	r1, r7
 801e2ac:	4622      	mov	r2, r4
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	f7ff ff1e 	bl	801e0f0 <__multiply>
 801e2b4:	4639      	mov	r1, r7
 801e2b6:	4680      	mov	r8, r0
 801e2b8:	4630      	mov	r0, r6
 801e2ba:	f7ff fdfd 	bl	801deb8 <_Bfree>
 801e2be:	4647      	mov	r7, r8
 801e2c0:	106d      	asrs	r5, r5, #1
 801e2c2:	d00b      	beq.n	801e2dc <__pow5mult+0xa0>
 801e2c4:	6820      	ldr	r0, [r4, #0]
 801e2c6:	b938      	cbnz	r0, 801e2d8 <__pow5mult+0x9c>
 801e2c8:	4622      	mov	r2, r4
 801e2ca:	4621      	mov	r1, r4
 801e2cc:	4630      	mov	r0, r6
 801e2ce:	f7ff ff0f 	bl	801e0f0 <__multiply>
 801e2d2:	6020      	str	r0, [r4, #0]
 801e2d4:	f8c0 9000 	str.w	r9, [r0]
 801e2d8:	4604      	mov	r4, r0
 801e2da:	e7e4      	b.n	801e2a6 <__pow5mult+0x6a>
 801e2dc:	4638      	mov	r0, r7
 801e2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2e2:	bf00      	nop
 801e2e4:	080217a8 	.word	0x080217a8
 801e2e8:	08021551 	.word	0x08021551
 801e2ec:	08021658 	.word	0x08021658

0801e2f0 <__lshift>:
 801e2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2f4:	460c      	mov	r4, r1
 801e2f6:	6849      	ldr	r1, [r1, #4]
 801e2f8:	6923      	ldr	r3, [r4, #16]
 801e2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e2fe:	68a3      	ldr	r3, [r4, #8]
 801e300:	4607      	mov	r7, r0
 801e302:	4691      	mov	r9, r2
 801e304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e308:	f108 0601 	add.w	r6, r8, #1
 801e30c:	42b3      	cmp	r3, r6
 801e30e:	db0b      	blt.n	801e328 <__lshift+0x38>
 801e310:	4638      	mov	r0, r7
 801e312:	f7ff fd91 	bl	801de38 <_Balloc>
 801e316:	4605      	mov	r5, r0
 801e318:	b948      	cbnz	r0, 801e32e <__lshift+0x3e>
 801e31a:	4602      	mov	r2, r0
 801e31c:	4b28      	ldr	r3, [pc, #160]	; (801e3c0 <__lshift+0xd0>)
 801e31e:	4829      	ldr	r0, [pc, #164]	; (801e3c4 <__lshift+0xd4>)
 801e320:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e324:	f7fe fa04 	bl	801c730 <__assert_func>
 801e328:	3101      	adds	r1, #1
 801e32a:	005b      	lsls	r3, r3, #1
 801e32c:	e7ee      	b.n	801e30c <__lshift+0x1c>
 801e32e:	2300      	movs	r3, #0
 801e330:	f100 0114 	add.w	r1, r0, #20
 801e334:	f100 0210 	add.w	r2, r0, #16
 801e338:	4618      	mov	r0, r3
 801e33a:	4553      	cmp	r3, sl
 801e33c:	db33      	blt.n	801e3a6 <__lshift+0xb6>
 801e33e:	6920      	ldr	r0, [r4, #16]
 801e340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e344:	f104 0314 	add.w	r3, r4, #20
 801e348:	f019 091f 	ands.w	r9, r9, #31
 801e34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e354:	d02b      	beq.n	801e3ae <__lshift+0xbe>
 801e356:	f1c9 0e20 	rsb	lr, r9, #32
 801e35a:	468a      	mov	sl, r1
 801e35c:	2200      	movs	r2, #0
 801e35e:	6818      	ldr	r0, [r3, #0]
 801e360:	fa00 f009 	lsl.w	r0, r0, r9
 801e364:	4302      	orrs	r2, r0
 801e366:	f84a 2b04 	str.w	r2, [sl], #4
 801e36a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e36e:	459c      	cmp	ip, r3
 801e370:	fa22 f20e 	lsr.w	r2, r2, lr
 801e374:	d8f3      	bhi.n	801e35e <__lshift+0x6e>
 801e376:	ebac 0304 	sub.w	r3, ip, r4
 801e37a:	3b15      	subs	r3, #21
 801e37c:	f023 0303 	bic.w	r3, r3, #3
 801e380:	3304      	adds	r3, #4
 801e382:	f104 0015 	add.w	r0, r4, #21
 801e386:	4584      	cmp	ip, r0
 801e388:	bf38      	it	cc
 801e38a:	2304      	movcc	r3, #4
 801e38c:	50ca      	str	r2, [r1, r3]
 801e38e:	b10a      	cbz	r2, 801e394 <__lshift+0xa4>
 801e390:	f108 0602 	add.w	r6, r8, #2
 801e394:	3e01      	subs	r6, #1
 801e396:	4638      	mov	r0, r7
 801e398:	612e      	str	r6, [r5, #16]
 801e39a:	4621      	mov	r1, r4
 801e39c:	f7ff fd8c 	bl	801deb8 <_Bfree>
 801e3a0:	4628      	mov	r0, r5
 801e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 801e3aa:	3301      	adds	r3, #1
 801e3ac:	e7c5      	b.n	801e33a <__lshift+0x4a>
 801e3ae:	3904      	subs	r1, #4
 801e3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3b4:	f841 2f04 	str.w	r2, [r1, #4]!
 801e3b8:	459c      	cmp	ip, r3
 801e3ba:	d8f9      	bhi.n	801e3b0 <__lshift+0xc0>
 801e3bc:	e7ea      	b.n	801e394 <__lshift+0xa4>
 801e3be:	bf00      	nop
 801e3c0:	080215c7 	.word	0x080215c7
 801e3c4:	08021658 	.word	0x08021658

0801e3c8 <__mcmp>:
 801e3c8:	b530      	push	{r4, r5, lr}
 801e3ca:	6902      	ldr	r2, [r0, #16]
 801e3cc:	690c      	ldr	r4, [r1, #16]
 801e3ce:	1b12      	subs	r2, r2, r4
 801e3d0:	d10e      	bne.n	801e3f0 <__mcmp+0x28>
 801e3d2:	f100 0314 	add.w	r3, r0, #20
 801e3d6:	3114      	adds	r1, #20
 801e3d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e3dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e3e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e3e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e3e8:	42a5      	cmp	r5, r4
 801e3ea:	d003      	beq.n	801e3f4 <__mcmp+0x2c>
 801e3ec:	d305      	bcc.n	801e3fa <__mcmp+0x32>
 801e3ee:	2201      	movs	r2, #1
 801e3f0:	4610      	mov	r0, r2
 801e3f2:	bd30      	pop	{r4, r5, pc}
 801e3f4:	4283      	cmp	r3, r0
 801e3f6:	d3f3      	bcc.n	801e3e0 <__mcmp+0x18>
 801e3f8:	e7fa      	b.n	801e3f0 <__mcmp+0x28>
 801e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 801e3fe:	e7f7      	b.n	801e3f0 <__mcmp+0x28>

0801e400 <__mdiff>:
 801e400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e404:	460c      	mov	r4, r1
 801e406:	4606      	mov	r6, r0
 801e408:	4611      	mov	r1, r2
 801e40a:	4620      	mov	r0, r4
 801e40c:	4617      	mov	r7, r2
 801e40e:	f7ff ffdb 	bl	801e3c8 <__mcmp>
 801e412:	1e05      	subs	r5, r0, #0
 801e414:	d110      	bne.n	801e438 <__mdiff+0x38>
 801e416:	4629      	mov	r1, r5
 801e418:	4630      	mov	r0, r6
 801e41a:	f7ff fd0d 	bl	801de38 <_Balloc>
 801e41e:	b930      	cbnz	r0, 801e42e <__mdiff+0x2e>
 801e420:	4b39      	ldr	r3, [pc, #228]	; (801e508 <__mdiff+0x108>)
 801e422:	4602      	mov	r2, r0
 801e424:	f240 2132 	movw	r1, #562	; 0x232
 801e428:	4838      	ldr	r0, [pc, #224]	; (801e50c <__mdiff+0x10c>)
 801e42a:	f7fe f981 	bl	801c730 <__assert_func>
 801e42e:	2301      	movs	r3, #1
 801e430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e438:	bfa4      	itt	ge
 801e43a:	463b      	movge	r3, r7
 801e43c:	4627      	movge	r7, r4
 801e43e:	4630      	mov	r0, r6
 801e440:	6879      	ldr	r1, [r7, #4]
 801e442:	bfa6      	itte	ge
 801e444:	461c      	movge	r4, r3
 801e446:	2500      	movge	r5, #0
 801e448:	2501      	movlt	r5, #1
 801e44a:	f7ff fcf5 	bl	801de38 <_Balloc>
 801e44e:	b920      	cbnz	r0, 801e45a <__mdiff+0x5a>
 801e450:	4b2d      	ldr	r3, [pc, #180]	; (801e508 <__mdiff+0x108>)
 801e452:	4602      	mov	r2, r0
 801e454:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e458:	e7e6      	b.n	801e428 <__mdiff+0x28>
 801e45a:	693e      	ldr	r6, [r7, #16]
 801e45c:	60c5      	str	r5, [r0, #12]
 801e45e:	6925      	ldr	r5, [r4, #16]
 801e460:	f107 0114 	add.w	r1, r7, #20
 801e464:	f104 0914 	add.w	r9, r4, #20
 801e468:	f100 0e14 	add.w	lr, r0, #20
 801e46c:	f107 0210 	add.w	r2, r7, #16
 801e470:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e474:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e478:	46f2      	mov	sl, lr
 801e47a:	2700      	movs	r7, #0
 801e47c:	f859 3b04 	ldr.w	r3, [r9], #4
 801e480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e484:	fa1f f883 	uxth.w	r8, r3
 801e488:	fa17 f78b 	uxtah	r7, r7, fp
 801e48c:	0c1b      	lsrs	r3, r3, #16
 801e48e:	eba7 0808 	sub.w	r8, r7, r8
 801e492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e49a:	fa1f f888 	uxth.w	r8, r8
 801e49e:	141f      	asrs	r7, r3, #16
 801e4a0:	454d      	cmp	r5, r9
 801e4a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e4a6:	f84a 3b04 	str.w	r3, [sl], #4
 801e4aa:	d8e7      	bhi.n	801e47c <__mdiff+0x7c>
 801e4ac:	1b2b      	subs	r3, r5, r4
 801e4ae:	3b15      	subs	r3, #21
 801e4b0:	f023 0303 	bic.w	r3, r3, #3
 801e4b4:	3304      	adds	r3, #4
 801e4b6:	3415      	adds	r4, #21
 801e4b8:	42a5      	cmp	r5, r4
 801e4ba:	bf38      	it	cc
 801e4bc:	2304      	movcc	r3, #4
 801e4be:	4419      	add	r1, r3
 801e4c0:	4473      	add	r3, lr
 801e4c2:	469e      	mov	lr, r3
 801e4c4:	460d      	mov	r5, r1
 801e4c6:	4565      	cmp	r5, ip
 801e4c8:	d30e      	bcc.n	801e4e8 <__mdiff+0xe8>
 801e4ca:	f10c 0203 	add.w	r2, ip, #3
 801e4ce:	1a52      	subs	r2, r2, r1
 801e4d0:	f022 0203 	bic.w	r2, r2, #3
 801e4d4:	3903      	subs	r1, #3
 801e4d6:	458c      	cmp	ip, r1
 801e4d8:	bf38      	it	cc
 801e4da:	2200      	movcc	r2, #0
 801e4dc:	441a      	add	r2, r3
 801e4de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e4e2:	b17b      	cbz	r3, 801e504 <__mdiff+0x104>
 801e4e4:	6106      	str	r6, [r0, #16]
 801e4e6:	e7a5      	b.n	801e434 <__mdiff+0x34>
 801e4e8:	f855 8b04 	ldr.w	r8, [r5], #4
 801e4ec:	fa17 f488 	uxtah	r4, r7, r8
 801e4f0:	1422      	asrs	r2, r4, #16
 801e4f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e4f6:	b2a4      	uxth	r4, r4
 801e4f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e4fc:	f84e 4b04 	str.w	r4, [lr], #4
 801e500:	1417      	asrs	r7, r2, #16
 801e502:	e7e0      	b.n	801e4c6 <__mdiff+0xc6>
 801e504:	3e01      	subs	r6, #1
 801e506:	e7ea      	b.n	801e4de <__mdiff+0xde>
 801e508:	080215c7 	.word	0x080215c7
 801e50c:	08021658 	.word	0x08021658

0801e510 <__ulp>:
 801e510:	b082      	sub	sp, #8
 801e512:	ed8d 0b00 	vstr	d0, [sp]
 801e516:	9b01      	ldr	r3, [sp, #4]
 801e518:	4912      	ldr	r1, [pc, #72]	; (801e564 <__ulp+0x54>)
 801e51a:	4019      	ands	r1, r3
 801e51c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e520:	2900      	cmp	r1, #0
 801e522:	dd05      	ble.n	801e530 <__ulp+0x20>
 801e524:	2200      	movs	r2, #0
 801e526:	460b      	mov	r3, r1
 801e528:	ec43 2b10 	vmov	d0, r2, r3
 801e52c:	b002      	add	sp, #8
 801e52e:	4770      	bx	lr
 801e530:	4249      	negs	r1, r1
 801e532:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e536:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e53a:	f04f 0200 	mov.w	r2, #0
 801e53e:	f04f 0300 	mov.w	r3, #0
 801e542:	da04      	bge.n	801e54e <__ulp+0x3e>
 801e544:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e548:	fa41 f300 	asr.w	r3, r1, r0
 801e54c:	e7ec      	b.n	801e528 <__ulp+0x18>
 801e54e:	f1a0 0114 	sub.w	r1, r0, #20
 801e552:	291e      	cmp	r1, #30
 801e554:	bfda      	itte	le
 801e556:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e55a:	fa20 f101 	lsrle.w	r1, r0, r1
 801e55e:	2101      	movgt	r1, #1
 801e560:	460a      	mov	r2, r1
 801e562:	e7e1      	b.n	801e528 <__ulp+0x18>
 801e564:	7ff00000 	.word	0x7ff00000

0801e568 <__b2d>:
 801e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e56a:	6905      	ldr	r5, [r0, #16]
 801e56c:	f100 0714 	add.w	r7, r0, #20
 801e570:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e574:	1f2e      	subs	r6, r5, #4
 801e576:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e57a:	4620      	mov	r0, r4
 801e57c:	f7ff fd52 	bl	801e024 <__hi0bits>
 801e580:	f1c0 0320 	rsb	r3, r0, #32
 801e584:	280a      	cmp	r0, #10
 801e586:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e604 <__b2d+0x9c>
 801e58a:	600b      	str	r3, [r1, #0]
 801e58c:	dc14      	bgt.n	801e5b8 <__b2d+0x50>
 801e58e:	f1c0 0e0b 	rsb	lr, r0, #11
 801e592:	fa24 f10e 	lsr.w	r1, r4, lr
 801e596:	42b7      	cmp	r7, r6
 801e598:	ea41 030c 	orr.w	r3, r1, ip
 801e59c:	bf34      	ite	cc
 801e59e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e5a2:	2100      	movcs	r1, #0
 801e5a4:	3015      	adds	r0, #21
 801e5a6:	fa04 f000 	lsl.w	r0, r4, r0
 801e5aa:	fa21 f10e 	lsr.w	r1, r1, lr
 801e5ae:	ea40 0201 	orr.w	r2, r0, r1
 801e5b2:	ec43 2b10 	vmov	d0, r2, r3
 801e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5b8:	42b7      	cmp	r7, r6
 801e5ba:	bf3a      	itte	cc
 801e5bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e5c0:	f1a5 0608 	subcc.w	r6, r5, #8
 801e5c4:	2100      	movcs	r1, #0
 801e5c6:	380b      	subs	r0, #11
 801e5c8:	d017      	beq.n	801e5fa <__b2d+0x92>
 801e5ca:	f1c0 0c20 	rsb	ip, r0, #32
 801e5ce:	fa04 f500 	lsl.w	r5, r4, r0
 801e5d2:	42be      	cmp	r6, r7
 801e5d4:	fa21 f40c 	lsr.w	r4, r1, ip
 801e5d8:	ea45 0504 	orr.w	r5, r5, r4
 801e5dc:	bf8c      	ite	hi
 801e5de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e5e2:	2400      	movls	r4, #0
 801e5e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e5e8:	fa01 f000 	lsl.w	r0, r1, r0
 801e5ec:	fa24 f40c 	lsr.w	r4, r4, ip
 801e5f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e5f4:	ea40 0204 	orr.w	r2, r0, r4
 801e5f8:	e7db      	b.n	801e5b2 <__b2d+0x4a>
 801e5fa:	ea44 030c 	orr.w	r3, r4, ip
 801e5fe:	460a      	mov	r2, r1
 801e600:	e7d7      	b.n	801e5b2 <__b2d+0x4a>
 801e602:	bf00      	nop
 801e604:	3ff00000 	.word	0x3ff00000

0801e608 <__d2b>:
 801e608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e60c:	4689      	mov	r9, r1
 801e60e:	2101      	movs	r1, #1
 801e610:	ec57 6b10 	vmov	r6, r7, d0
 801e614:	4690      	mov	r8, r2
 801e616:	f7ff fc0f 	bl	801de38 <_Balloc>
 801e61a:	4604      	mov	r4, r0
 801e61c:	b930      	cbnz	r0, 801e62c <__d2b+0x24>
 801e61e:	4602      	mov	r2, r0
 801e620:	4b25      	ldr	r3, [pc, #148]	; (801e6b8 <__d2b+0xb0>)
 801e622:	4826      	ldr	r0, [pc, #152]	; (801e6bc <__d2b+0xb4>)
 801e624:	f240 310a 	movw	r1, #778	; 0x30a
 801e628:	f7fe f882 	bl	801c730 <__assert_func>
 801e62c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e634:	bb35      	cbnz	r5, 801e684 <__d2b+0x7c>
 801e636:	2e00      	cmp	r6, #0
 801e638:	9301      	str	r3, [sp, #4]
 801e63a:	d028      	beq.n	801e68e <__d2b+0x86>
 801e63c:	4668      	mov	r0, sp
 801e63e:	9600      	str	r6, [sp, #0]
 801e640:	f7ff fd10 	bl	801e064 <__lo0bits>
 801e644:	9900      	ldr	r1, [sp, #0]
 801e646:	b300      	cbz	r0, 801e68a <__d2b+0x82>
 801e648:	9a01      	ldr	r2, [sp, #4]
 801e64a:	f1c0 0320 	rsb	r3, r0, #32
 801e64e:	fa02 f303 	lsl.w	r3, r2, r3
 801e652:	430b      	orrs	r3, r1
 801e654:	40c2      	lsrs	r2, r0
 801e656:	6163      	str	r3, [r4, #20]
 801e658:	9201      	str	r2, [sp, #4]
 801e65a:	9b01      	ldr	r3, [sp, #4]
 801e65c:	61a3      	str	r3, [r4, #24]
 801e65e:	2b00      	cmp	r3, #0
 801e660:	bf14      	ite	ne
 801e662:	2202      	movne	r2, #2
 801e664:	2201      	moveq	r2, #1
 801e666:	6122      	str	r2, [r4, #16]
 801e668:	b1d5      	cbz	r5, 801e6a0 <__d2b+0x98>
 801e66a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e66e:	4405      	add	r5, r0
 801e670:	f8c9 5000 	str.w	r5, [r9]
 801e674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e678:	f8c8 0000 	str.w	r0, [r8]
 801e67c:	4620      	mov	r0, r4
 801e67e:	b003      	add	sp, #12
 801e680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e688:	e7d5      	b.n	801e636 <__d2b+0x2e>
 801e68a:	6161      	str	r1, [r4, #20]
 801e68c:	e7e5      	b.n	801e65a <__d2b+0x52>
 801e68e:	a801      	add	r0, sp, #4
 801e690:	f7ff fce8 	bl	801e064 <__lo0bits>
 801e694:	9b01      	ldr	r3, [sp, #4]
 801e696:	6163      	str	r3, [r4, #20]
 801e698:	2201      	movs	r2, #1
 801e69a:	6122      	str	r2, [r4, #16]
 801e69c:	3020      	adds	r0, #32
 801e69e:	e7e3      	b.n	801e668 <__d2b+0x60>
 801e6a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e6a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e6a8:	f8c9 0000 	str.w	r0, [r9]
 801e6ac:	6918      	ldr	r0, [r3, #16]
 801e6ae:	f7ff fcb9 	bl	801e024 <__hi0bits>
 801e6b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e6b6:	e7df      	b.n	801e678 <__d2b+0x70>
 801e6b8:	080215c7 	.word	0x080215c7
 801e6bc:	08021658 	.word	0x08021658

0801e6c0 <__ratio>:
 801e6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c4:	4688      	mov	r8, r1
 801e6c6:	4669      	mov	r1, sp
 801e6c8:	4681      	mov	r9, r0
 801e6ca:	f7ff ff4d 	bl	801e568 <__b2d>
 801e6ce:	a901      	add	r1, sp, #4
 801e6d0:	4640      	mov	r0, r8
 801e6d2:	ec55 4b10 	vmov	r4, r5, d0
 801e6d6:	f7ff ff47 	bl	801e568 <__b2d>
 801e6da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e6de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e6e2:	eba3 0c02 	sub.w	ip, r3, r2
 801e6e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e6ea:	1a9b      	subs	r3, r3, r2
 801e6ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e6f0:	ec51 0b10 	vmov	r0, r1, d0
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	bfd6      	itet	le
 801e6f8:	460a      	movle	r2, r1
 801e6fa:	462a      	movgt	r2, r5
 801e6fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e700:	468b      	mov	fp, r1
 801e702:	462f      	mov	r7, r5
 801e704:	bfd4      	ite	le
 801e706:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e70a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e70e:	4620      	mov	r0, r4
 801e710:	ee10 2a10 	vmov	r2, s0
 801e714:	465b      	mov	r3, fp
 801e716:	4639      	mov	r1, r7
 801e718:	f7e2 f8a8 	bl	800086c <__aeabi_ddiv>
 801e71c:	ec41 0b10 	vmov	d0, r0, r1
 801e720:	b003      	add	sp, #12
 801e722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e726 <__copybits>:
 801e726:	3901      	subs	r1, #1
 801e728:	b570      	push	{r4, r5, r6, lr}
 801e72a:	1149      	asrs	r1, r1, #5
 801e72c:	6914      	ldr	r4, [r2, #16]
 801e72e:	3101      	adds	r1, #1
 801e730:	f102 0314 	add.w	r3, r2, #20
 801e734:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e738:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e73c:	1f05      	subs	r5, r0, #4
 801e73e:	42a3      	cmp	r3, r4
 801e740:	d30c      	bcc.n	801e75c <__copybits+0x36>
 801e742:	1aa3      	subs	r3, r4, r2
 801e744:	3b11      	subs	r3, #17
 801e746:	f023 0303 	bic.w	r3, r3, #3
 801e74a:	3211      	adds	r2, #17
 801e74c:	42a2      	cmp	r2, r4
 801e74e:	bf88      	it	hi
 801e750:	2300      	movhi	r3, #0
 801e752:	4418      	add	r0, r3
 801e754:	2300      	movs	r3, #0
 801e756:	4288      	cmp	r0, r1
 801e758:	d305      	bcc.n	801e766 <__copybits+0x40>
 801e75a:	bd70      	pop	{r4, r5, r6, pc}
 801e75c:	f853 6b04 	ldr.w	r6, [r3], #4
 801e760:	f845 6f04 	str.w	r6, [r5, #4]!
 801e764:	e7eb      	b.n	801e73e <__copybits+0x18>
 801e766:	f840 3b04 	str.w	r3, [r0], #4
 801e76a:	e7f4      	b.n	801e756 <__copybits+0x30>

0801e76c <__any_on>:
 801e76c:	f100 0214 	add.w	r2, r0, #20
 801e770:	6900      	ldr	r0, [r0, #16]
 801e772:	114b      	asrs	r3, r1, #5
 801e774:	4298      	cmp	r0, r3
 801e776:	b510      	push	{r4, lr}
 801e778:	db11      	blt.n	801e79e <__any_on+0x32>
 801e77a:	dd0a      	ble.n	801e792 <__any_on+0x26>
 801e77c:	f011 011f 	ands.w	r1, r1, #31
 801e780:	d007      	beq.n	801e792 <__any_on+0x26>
 801e782:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e786:	fa24 f001 	lsr.w	r0, r4, r1
 801e78a:	fa00 f101 	lsl.w	r1, r0, r1
 801e78e:	428c      	cmp	r4, r1
 801e790:	d10b      	bne.n	801e7aa <__any_on+0x3e>
 801e792:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e796:	4293      	cmp	r3, r2
 801e798:	d803      	bhi.n	801e7a2 <__any_on+0x36>
 801e79a:	2000      	movs	r0, #0
 801e79c:	bd10      	pop	{r4, pc}
 801e79e:	4603      	mov	r3, r0
 801e7a0:	e7f7      	b.n	801e792 <__any_on+0x26>
 801e7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e7a6:	2900      	cmp	r1, #0
 801e7a8:	d0f5      	beq.n	801e796 <__any_on+0x2a>
 801e7aa:	2001      	movs	r0, #1
 801e7ac:	e7f6      	b.n	801e79c <__any_on+0x30>

0801e7ae <_calloc_r>:
 801e7ae:	b513      	push	{r0, r1, r4, lr}
 801e7b0:	434a      	muls	r2, r1
 801e7b2:	4611      	mov	r1, r2
 801e7b4:	9201      	str	r2, [sp, #4]
 801e7b6:	f7fb fe99 	bl	801a4ec <_malloc_r>
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	b118      	cbz	r0, 801e7c6 <_calloc_r+0x18>
 801e7be:	9a01      	ldr	r2, [sp, #4]
 801e7c0:	2100      	movs	r1, #0
 801e7c2:	f7fb fe3b 	bl	801a43c <memset>
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	b002      	add	sp, #8
 801e7ca:	bd10      	pop	{r4, pc}

0801e7cc <_realloc_r>:
 801e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7ce:	4607      	mov	r7, r0
 801e7d0:	4614      	mov	r4, r2
 801e7d2:	460e      	mov	r6, r1
 801e7d4:	b921      	cbnz	r1, 801e7e0 <_realloc_r+0x14>
 801e7d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e7da:	4611      	mov	r1, r2
 801e7dc:	f7fb be86 	b.w	801a4ec <_malloc_r>
 801e7e0:	b922      	cbnz	r2, 801e7ec <_realloc_r+0x20>
 801e7e2:	f7fb fe33 	bl	801a44c <_free_r>
 801e7e6:	4625      	mov	r5, r4
 801e7e8:	4628      	mov	r0, r5
 801e7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7ec:	f000 fe9e 	bl	801f52c <_malloc_usable_size_r>
 801e7f0:	42a0      	cmp	r0, r4
 801e7f2:	d20f      	bcs.n	801e814 <_realloc_r+0x48>
 801e7f4:	4621      	mov	r1, r4
 801e7f6:	4638      	mov	r0, r7
 801e7f8:	f7fb fe78 	bl	801a4ec <_malloc_r>
 801e7fc:	4605      	mov	r5, r0
 801e7fe:	2800      	cmp	r0, #0
 801e800:	d0f2      	beq.n	801e7e8 <_realloc_r+0x1c>
 801e802:	4631      	mov	r1, r6
 801e804:	4622      	mov	r2, r4
 801e806:	f7fb fdf1 	bl	801a3ec <memcpy>
 801e80a:	4631      	mov	r1, r6
 801e80c:	4638      	mov	r0, r7
 801e80e:	f7fb fe1d 	bl	801a44c <_free_r>
 801e812:	e7e9      	b.n	801e7e8 <_realloc_r+0x1c>
 801e814:	4635      	mov	r5, r6
 801e816:	e7e7      	b.n	801e7e8 <_realloc_r+0x1c>

0801e818 <__ssputs_r>:
 801e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e81c:	688e      	ldr	r6, [r1, #8]
 801e81e:	429e      	cmp	r6, r3
 801e820:	4682      	mov	sl, r0
 801e822:	460c      	mov	r4, r1
 801e824:	4690      	mov	r8, r2
 801e826:	461f      	mov	r7, r3
 801e828:	d838      	bhi.n	801e89c <__ssputs_r+0x84>
 801e82a:	898a      	ldrh	r2, [r1, #12]
 801e82c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e830:	d032      	beq.n	801e898 <__ssputs_r+0x80>
 801e832:	6825      	ldr	r5, [r4, #0]
 801e834:	6909      	ldr	r1, [r1, #16]
 801e836:	eba5 0901 	sub.w	r9, r5, r1
 801e83a:	6965      	ldr	r5, [r4, #20]
 801e83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e844:	3301      	adds	r3, #1
 801e846:	444b      	add	r3, r9
 801e848:	106d      	asrs	r5, r5, #1
 801e84a:	429d      	cmp	r5, r3
 801e84c:	bf38      	it	cc
 801e84e:	461d      	movcc	r5, r3
 801e850:	0553      	lsls	r3, r2, #21
 801e852:	d531      	bpl.n	801e8b8 <__ssputs_r+0xa0>
 801e854:	4629      	mov	r1, r5
 801e856:	f7fb fe49 	bl	801a4ec <_malloc_r>
 801e85a:	4606      	mov	r6, r0
 801e85c:	b950      	cbnz	r0, 801e874 <__ssputs_r+0x5c>
 801e85e:	230c      	movs	r3, #12
 801e860:	f8ca 3000 	str.w	r3, [sl]
 801e864:	89a3      	ldrh	r3, [r4, #12]
 801e866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e86a:	81a3      	strh	r3, [r4, #12]
 801e86c:	f04f 30ff 	mov.w	r0, #4294967295
 801e870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e874:	6921      	ldr	r1, [r4, #16]
 801e876:	464a      	mov	r2, r9
 801e878:	f7fb fdb8 	bl	801a3ec <memcpy>
 801e87c:	89a3      	ldrh	r3, [r4, #12]
 801e87e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e886:	81a3      	strh	r3, [r4, #12]
 801e888:	6126      	str	r6, [r4, #16]
 801e88a:	6165      	str	r5, [r4, #20]
 801e88c:	444e      	add	r6, r9
 801e88e:	eba5 0509 	sub.w	r5, r5, r9
 801e892:	6026      	str	r6, [r4, #0]
 801e894:	60a5      	str	r5, [r4, #8]
 801e896:	463e      	mov	r6, r7
 801e898:	42be      	cmp	r6, r7
 801e89a:	d900      	bls.n	801e89e <__ssputs_r+0x86>
 801e89c:	463e      	mov	r6, r7
 801e89e:	4632      	mov	r2, r6
 801e8a0:	6820      	ldr	r0, [r4, #0]
 801e8a2:	4641      	mov	r1, r8
 801e8a4:	f7fb fdb0 	bl	801a408 <memmove>
 801e8a8:	68a3      	ldr	r3, [r4, #8]
 801e8aa:	6822      	ldr	r2, [r4, #0]
 801e8ac:	1b9b      	subs	r3, r3, r6
 801e8ae:	4432      	add	r2, r6
 801e8b0:	60a3      	str	r3, [r4, #8]
 801e8b2:	6022      	str	r2, [r4, #0]
 801e8b4:	2000      	movs	r0, #0
 801e8b6:	e7db      	b.n	801e870 <__ssputs_r+0x58>
 801e8b8:	462a      	mov	r2, r5
 801e8ba:	f7ff ff87 	bl	801e7cc <_realloc_r>
 801e8be:	4606      	mov	r6, r0
 801e8c0:	2800      	cmp	r0, #0
 801e8c2:	d1e1      	bne.n	801e888 <__ssputs_r+0x70>
 801e8c4:	6921      	ldr	r1, [r4, #16]
 801e8c6:	4650      	mov	r0, sl
 801e8c8:	f7fb fdc0 	bl	801a44c <_free_r>
 801e8cc:	e7c7      	b.n	801e85e <__ssputs_r+0x46>
	...

0801e8d0 <_svfiprintf_r>:
 801e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d4:	4698      	mov	r8, r3
 801e8d6:	898b      	ldrh	r3, [r1, #12]
 801e8d8:	061b      	lsls	r3, r3, #24
 801e8da:	b09d      	sub	sp, #116	; 0x74
 801e8dc:	4607      	mov	r7, r0
 801e8de:	460d      	mov	r5, r1
 801e8e0:	4614      	mov	r4, r2
 801e8e2:	d50e      	bpl.n	801e902 <_svfiprintf_r+0x32>
 801e8e4:	690b      	ldr	r3, [r1, #16]
 801e8e6:	b963      	cbnz	r3, 801e902 <_svfiprintf_r+0x32>
 801e8e8:	2140      	movs	r1, #64	; 0x40
 801e8ea:	f7fb fdff 	bl	801a4ec <_malloc_r>
 801e8ee:	6028      	str	r0, [r5, #0]
 801e8f0:	6128      	str	r0, [r5, #16]
 801e8f2:	b920      	cbnz	r0, 801e8fe <_svfiprintf_r+0x2e>
 801e8f4:	230c      	movs	r3, #12
 801e8f6:	603b      	str	r3, [r7, #0]
 801e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8fc:	e0d1      	b.n	801eaa2 <_svfiprintf_r+0x1d2>
 801e8fe:	2340      	movs	r3, #64	; 0x40
 801e900:	616b      	str	r3, [r5, #20]
 801e902:	2300      	movs	r3, #0
 801e904:	9309      	str	r3, [sp, #36]	; 0x24
 801e906:	2320      	movs	r3, #32
 801e908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e90c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e910:	2330      	movs	r3, #48	; 0x30
 801e912:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801eabc <_svfiprintf_r+0x1ec>
 801e916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e91a:	f04f 0901 	mov.w	r9, #1
 801e91e:	4623      	mov	r3, r4
 801e920:	469a      	mov	sl, r3
 801e922:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e926:	b10a      	cbz	r2, 801e92c <_svfiprintf_r+0x5c>
 801e928:	2a25      	cmp	r2, #37	; 0x25
 801e92a:	d1f9      	bne.n	801e920 <_svfiprintf_r+0x50>
 801e92c:	ebba 0b04 	subs.w	fp, sl, r4
 801e930:	d00b      	beq.n	801e94a <_svfiprintf_r+0x7a>
 801e932:	465b      	mov	r3, fp
 801e934:	4622      	mov	r2, r4
 801e936:	4629      	mov	r1, r5
 801e938:	4638      	mov	r0, r7
 801e93a:	f7ff ff6d 	bl	801e818 <__ssputs_r>
 801e93e:	3001      	adds	r0, #1
 801e940:	f000 80aa 	beq.w	801ea98 <_svfiprintf_r+0x1c8>
 801e944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e946:	445a      	add	r2, fp
 801e948:	9209      	str	r2, [sp, #36]	; 0x24
 801e94a:	f89a 3000 	ldrb.w	r3, [sl]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	f000 80a2 	beq.w	801ea98 <_svfiprintf_r+0x1c8>
 801e954:	2300      	movs	r3, #0
 801e956:	f04f 32ff 	mov.w	r2, #4294967295
 801e95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e95e:	f10a 0a01 	add.w	sl, sl, #1
 801e962:	9304      	str	r3, [sp, #16]
 801e964:	9307      	str	r3, [sp, #28]
 801e966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e96a:	931a      	str	r3, [sp, #104]	; 0x68
 801e96c:	4654      	mov	r4, sl
 801e96e:	2205      	movs	r2, #5
 801e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e974:	4851      	ldr	r0, [pc, #324]	; (801eabc <_svfiprintf_r+0x1ec>)
 801e976:	f7e1 fc43 	bl	8000200 <memchr>
 801e97a:	9a04      	ldr	r2, [sp, #16]
 801e97c:	b9d8      	cbnz	r0, 801e9b6 <_svfiprintf_r+0xe6>
 801e97e:	06d0      	lsls	r0, r2, #27
 801e980:	bf44      	itt	mi
 801e982:	2320      	movmi	r3, #32
 801e984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e988:	0711      	lsls	r1, r2, #28
 801e98a:	bf44      	itt	mi
 801e98c:	232b      	movmi	r3, #43	; 0x2b
 801e98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e992:	f89a 3000 	ldrb.w	r3, [sl]
 801e996:	2b2a      	cmp	r3, #42	; 0x2a
 801e998:	d015      	beq.n	801e9c6 <_svfiprintf_r+0xf6>
 801e99a:	9a07      	ldr	r2, [sp, #28]
 801e99c:	4654      	mov	r4, sl
 801e99e:	2000      	movs	r0, #0
 801e9a0:	f04f 0c0a 	mov.w	ip, #10
 801e9a4:	4621      	mov	r1, r4
 801e9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e9aa:	3b30      	subs	r3, #48	; 0x30
 801e9ac:	2b09      	cmp	r3, #9
 801e9ae:	d94e      	bls.n	801ea4e <_svfiprintf_r+0x17e>
 801e9b0:	b1b0      	cbz	r0, 801e9e0 <_svfiprintf_r+0x110>
 801e9b2:	9207      	str	r2, [sp, #28]
 801e9b4:	e014      	b.n	801e9e0 <_svfiprintf_r+0x110>
 801e9b6:	eba0 0308 	sub.w	r3, r0, r8
 801e9ba:	fa09 f303 	lsl.w	r3, r9, r3
 801e9be:	4313      	orrs	r3, r2
 801e9c0:	9304      	str	r3, [sp, #16]
 801e9c2:	46a2      	mov	sl, r4
 801e9c4:	e7d2      	b.n	801e96c <_svfiprintf_r+0x9c>
 801e9c6:	9b03      	ldr	r3, [sp, #12]
 801e9c8:	1d19      	adds	r1, r3, #4
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	9103      	str	r1, [sp, #12]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	bfbb      	ittet	lt
 801e9d2:	425b      	neglt	r3, r3
 801e9d4:	f042 0202 	orrlt.w	r2, r2, #2
 801e9d8:	9307      	strge	r3, [sp, #28]
 801e9da:	9307      	strlt	r3, [sp, #28]
 801e9dc:	bfb8      	it	lt
 801e9de:	9204      	strlt	r2, [sp, #16]
 801e9e0:	7823      	ldrb	r3, [r4, #0]
 801e9e2:	2b2e      	cmp	r3, #46	; 0x2e
 801e9e4:	d10c      	bne.n	801ea00 <_svfiprintf_r+0x130>
 801e9e6:	7863      	ldrb	r3, [r4, #1]
 801e9e8:	2b2a      	cmp	r3, #42	; 0x2a
 801e9ea:	d135      	bne.n	801ea58 <_svfiprintf_r+0x188>
 801e9ec:	9b03      	ldr	r3, [sp, #12]
 801e9ee:	1d1a      	adds	r2, r3, #4
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	9203      	str	r2, [sp, #12]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	bfb8      	it	lt
 801e9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 801e9fc:	3402      	adds	r4, #2
 801e9fe:	9305      	str	r3, [sp, #20]
 801ea00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801eacc <_svfiprintf_r+0x1fc>
 801ea04:	7821      	ldrb	r1, [r4, #0]
 801ea06:	2203      	movs	r2, #3
 801ea08:	4650      	mov	r0, sl
 801ea0a:	f7e1 fbf9 	bl	8000200 <memchr>
 801ea0e:	b140      	cbz	r0, 801ea22 <_svfiprintf_r+0x152>
 801ea10:	2340      	movs	r3, #64	; 0x40
 801ea12:	eba0 000a 	sub.w	r0, r0, sl
 801ea16:	fa03 f000 	lsl.w	r0, r3, r0
 801ea1a:	9b04      	ldr	r3, [sp, #16]
 801ea1c:	4303      	orrs	r3, r0
 801ea1e:	3401      	adds	r4, #1
 801ea20:	9304      	str	r3, [sp, #16]
 801ea22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea26:	4826      	ldr	r0, [pc, #152]	; (801eac0 <_svfiprintf_r+0x1f0>)
 801ea28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ea2c:	2206      	movs	r2, #6
 801ea2e:	f7e1 fbe7 	bl	8000200 <memchr>
 801ea32:	2800      	cmp	r0, #0
 801ea34:	d038      	beq.n	801eaa8 <_svfiprintf_r+0x1d8>
 801ea36:	4b23      	ldr	r3, [pc, #140]	; (801eac4 <_svfiprintf_r+0x1f4>)
 801ea38:	bb1b      	cbnz	r3, 801ea82 <_svfiprintf_r+0x1b2>
 801ea3a:	9b03      	ldr	r3, [sp, #12]
 801ea3c:	3307      	adds	r3, #7
 801ea3e:	f023 0307 	bic.w	r3, r3, #7
 801ea42:	3308      	adds	r3, #8
 801ea44:	9303      	str	r3, [sp, #12]
 801ea46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea48:	4433      	add	r3, r6
 801ea4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ea4c:	e767      	b.n	801e91e <_svfiprintf_r+0x4e>
 801ea4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea52:	460c      	mov	r4, r1
 801ea54:	2001      	movs	r0, #1
 801ea56:	e7a5      	b.n	801e9a4 <_svfiprintf_r+0xd4>
 801ea58:	2300      	movs	r3, #0
 801ea5a:	3401      	adds	r4, #1
 801ea5c:	9305      	str	r3, [sp, #20]
 801ea5e:	4619      	mov	r1, r3
 801ea60:	f04f 0c0a 	mov.w	ip, #10
 801ea64:	4620      	mov	r0, r4
 801ea66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea6a:	3a30      	subs	r2, #48	; 0x30
 801ea6c:	2a09      	cmp	r2, #9
 801ea6e:	d903      	bls.n	801ea78 <_svfiprintf_r+0x1a8>
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d0c5      	beq.n	801ea00 <_svfiprintf_r+0x130>
 801ea74:	9105      	str	r1, [sp, #20]
 801ea76:	e7c3      	b.n	801ea00 <_svfiprintf_r+0x130>
 801ea78:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea7c:	4604      	mov	r4, r0
 801ea7e:	2301      	movs	r3, #1
 801ea80:	e7f0      	b.n	801ea64 <_svfiprintf_r+0x194>
 801ea82:	ab03      	add	r3, sp, #12
 801ea84:	9300      	str	r3, [sp, #0]
 801ea86:	462a      	mov	r2, r5
 801ea88:	4b0f      	ldr	r3, [pc, #60]	; (801eac8 <_svfiprintf_r+0x1f8>)
 801ea8a:	a904      	add	r1, sp, #16
 801ea8c:	4638      	mov	r0, r7
 801ea8e:	f7fb fe27 	bl	801a6e0 <_printf_float>
 801ea92:	1c42      	adds	r2, r0, #1
 801ea94:	4606      	mov	r6, r0
 801ea96:	d1d6      	bne.n	801ea46 <_svfiprintf_r+0x176>
 801ea98:	89ab      	ldrh	r3, [r5, #12]
 801ea9a:	065b      	lsls	r3, r3, #25
 801ea9c:	f53f af2c 	bmi.w	801e8f8 <_svfiprintf_r+0x28>
 801eaa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eaa2:	b01d      	add	sp, #116	; 0x74
 801eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaa8:	ab03      	add	r3, sp, #12
 801eaaa:	9300      	str	r3, [sp, #0]
 801eaac:	462a      	mov	r2, r5
 801eaae:	4b06      	ldr	r3, [pc, #24]	; (801eac8 <_svfiprintf_r+0x1f8>)
 801eab0:	a904      	add	r1, sp, #16
 801eab2:	4638      	mov	r0, r7
 801eab4:	f7fc f8b8 	bl	801ac28 <_printf_i>
 801eab8:	e7eb      	b.n	801ea92 <_svfiprintf_r+0x1c2>
 801eaba:	bf00      	nop
 801eabc:	080217b4 	.word	0x080217b4
 801eac0:	080217be 	.word	0x080217be
 801eac4:	0801a6e1 	.word	0x0801a6e1
 801eac8:	0801e819 	.word	0x0801e819
 801eacc:	080217ba 	.word	0x080217ba

0801ead0 <_sungetc_r>:
 801ead0:	b538      	push	{r3, r4, r5, lr}
 801ead2:	1c4b      	adds	r3, r1, #1
 801ead4:	4614      	mov	r4, r2
 801ead6:	d103      	bne.n	801eae0 <_sungetc_r+0x10>
 801ead8:	f04f 35ff 	mov.w	r5, #4294967295
 801eadc:	4628      	mov	r0, r5
 801eade:	bd38      	pop	{r3, r4, r5, pc}
 801eae0:	8993      	ldrh	r3, [r2, #12]
 801eae2:	f023 0320 	bic.w	r3, r3, #32
 801eae6:	8193      	strh	r3, [r2, #12]
 801eae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eaea:	6852      	ldr	r2, [r2, #4]
 801eaec:	b2cd      	uxtb	r5, r1
 801eaee:	b18b      	cbz	r3, 801eb14 <_sungetc_r+0x44>
 801eaf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	dd08      	ble.n	801eb08 <_sungetc_r+0x38>
 801eaf6:	6823      	ldr	r3, [r4, #0]
 801eaf8:	1e5a      	subs	r2, r3, #1
 801eafa:	6022      	str	r2, [r4, #0]
 801eafc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801eb00:	6863      	ldr	r3, [r4, #4]
 801eb02:	3301      	adds	r3, #1
 801eb04:	6063      	str	r3, [r4, #4]
 801eb06:	e7e9      	b.n	801eadc <_sungetc_r+0xc>
 801eb08:	4621      	mov	r1, r4
 801eb0a:	f000 fca5 	bl	801f458 <__submore>
 801eb0e:	2800      	cmp	r0, #0
 801eb10:	d0f1      	beq.n	801eaf6 <_sungetc_r+0x26>
 801eb12:	e7e1      	b.n	801ead8 <_sungetc_r+0x8>
 801eb14:	6921      	ldr	r1, [r4, #16]
 801eb16:	6823      	ldr	r3, [r4, #0]
 801eb18:	b151      	cbz	r1, 801eb30 <_sungetc_r+0x60>
 801eb1a:	4299      	cmp	r1, r3
 801eb1c:	d208      	bcs.n	801eb30 <_sungetc_r+0x60>
 801eb1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801eb22:	42a9      	cmp	r1, r5
 801eb24:	d104      	bne.n	801eb30 <_sungetc_r+0x60>
 801eb26:	3b01      	subs	r3, #1
 801eb28:	3201      	adds	r2, #1
 801eb2a:	6023      	str	r3, [r4, #0]
 801eb2c:	6062      	str	r2, [r4, #4]
 801eb2e:	e7d5      	b.n	801eadc <_sungetc_r+0xc>
 801eb30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801eb34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb38:	6363      	str	r3, [r4, #52]	; 0x34
 801eb3a:	2303      	movs	r3, #3
 801eb3c:	63a3      	str	r3, [r4, #56]	; 0x38
 801eb3e:	4623      	mov	r3, r4
 801eb40:	f803 5f46 	strb.w	r5, [r3, #70]!
 801eb44:	6023      	str	r3, [r4, #0]
 801eb46:	2301      	movs	r3, #1
 801eb48:	e7dc      	b.n	801eb04 <_sungetc_r+0x34>

0801eb4a <__ssrefill_r>:
 801eb4a:	b510      	push	{r4, lr}
 801eb4c:	460c      	mov	r4, r1
 801eb4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801eb50:	b169      	cbz	r1, 801eb6e <__ssrefill_r+0x24>
 801eb52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb56:	4299      	cmp	r1, r3
 801eb58:	d001      	beq.n	801eb5e <__ssrefill_r+0x14>
 801eb5a:	f7fb fc77 	bl	801a44c <_free_r>
 801eb5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eb60:	6063      	str	r3, [r4, #4]
 801eb62:	2000      	movs	r0, #0
 801eb64:	6360      	str	r0, [r4, #52]	; 0x34
 801eb66:	b113      	cbz	r3, 801eb6e <__ssrefill_r+0x24>
 801eb68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eb6a:	6023      	str	r3, [r4, #0]
 801eb6c:	bd10      	pop	{r4, pc}
 801eb6e:	6923      	ldr	r3, [r4, #16]
 801eb70:	6023      	str	r3, [r4, #0]
 801eb72:	2300      	movs	r3, #0
 801eb74:	6063      	str	r3, [r4, #4]
 801eb76:	89a3      	ldrh	r3, [r4, #12]
 801eb78:	f043 0320 	orr.w	r3, r3, #32
 801eb7c:	81a3      	strh	r3, [r4, #12]
 801eb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801eb82:	e7f3      	b.n	801eb6c <__ssrefill_r+0x22>

0801eb84 <__ssvfiscanf_r>:
 801eb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb88:	460c      	mov	r4, r1
 801eb8a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801eb8e:	2100      	movs	r1, #0
 801eb90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801eb94:	49b2      	ldr	r1, [pc, #712]	; (801ee60 <__ssvfiscanf_r+0x2dc>)
 801eb96:	91a0      	str	r1, [sp, #640]	; 0x280
 801eb98:	f10d 0804 	add.w	r8, sp, #4
 801eb9c:	49b1      	ldr	r1, [pc, #708]	; (801ee64 <__ssvfiscanf_r+0x2e0>)
 801eb9e:	4fb2      	ldr	r7, [pc, #712]	; (801ee68 <__ssvfiscanf_r+0x2e4>)
 801eba0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801ee6c <__ssvfiscanf_r+0x2e8>
 801eba4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801eba8:	4606      	mov	r6, r0
 801ebaa:	91a1      	str	r1, [sp, #644]	; 0x284
 801ebac:	9300      	str	r3, [sp, #0]
 801ebae:	f892 a000 	ldrb.w	sl, [r2]
 801ebb2:	f1ba 0f00 	cmp.w	sl, #0
 801ebb6:	f000 8151 	beq.w	801ee5c <__ssvfiscanf_r+0x2d8>
 801ebba:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801ebbe:	f013 0308 	ands.w	r3, r3, #8
 801ebc2:	f102 0501 	add.w	r5, r2, #1
 801ebc6:	d019      	beq.n	801ebfc <__ssvfiscanf_r+0x78>
 801ebc8:	6863      	ldr	r3, [r4, #4]
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	dd0f      	ble.n	801ebee <__ssvfiscanf_r+0x6a>
 801ebce:	6823      	ldr	r3, [r4, #0]
 801ebd0:	781a      	ldrb	r2, [r3, #0]
 801ebd2:	5cba      	ldrb	r2, [r7, r2]
 801ebd4:	0712      	lsls	r2, r2, #28
 801ebd6:	d401      	bmi.n	801ebdc <__ssvfiscanf_r+0x58>
 801ebd8:	462a      	mov	r2, r5
 801ebda:	e7e8      	b.n	801ebae <__ssvfiscanf_r+0x2a>
 801ebdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ebde:	3201      	adds	r2, #1
 801ebe0:	9245      	str	r2, [sp, #276]	; 0x114
 801ebe2:	6862      	ldr	r2, [r4, #4]
 801ebe4:	3301      	adds	r3, #1
 801ebe6:	3a01      	subs	r2, #1
 801ebe8:	6062      	str	r2, [r4, #4]
 801ebea:	6023      	str	r3, [r4, #0]
 801ebec:	e7ec      	b.n	801ebc8 <__ssvfiscanf_r+0x44>
 801ebee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ebf0:	4621      	mov	r1, r4
 801ebf2:	4630      	mov	r0, r6
 801ebf4:	4798      	blx	r3
 801ebf6:	2800      	cmp	r0, #0
 801ebf8:	d0e9      	beq.n	801ebce <__ssvfiscanf_r+0x4a>
 801ebfa:	e7ed      	b.n	801ebd8 <__ssvfiscanf_r+0x54>
 801ebfc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801ec00:	f040 8083 	bne.w	801ed0a <__ssvfiscanf_r+0x186>
 801ec04:	9341      	str	r3, [sp, #260]	; 0x104
 801ec06:	9343      	str	r3, [sp, #268]	; 0x10c
 801ec08:	7853      	ldrb	r3, [r2, #1]
 801ec0a:	2b2a      	cmp	r3, #42	; 0x2a
 801ec0c:	bf02      	ittt	eq
 801ec0e:	2310      	moveq	r3, #16
 801ec10:	1c95      	addeq	r5, r2, #2
 801ec12:	9341      	streq	r3, [sp, #260]	; 0x104
 801ec14:	220a      	movs	r2, #10
 801ec16:	46ab      	mov	fp, r5
 801ec18:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ec1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ec20:	2b09      	cmp	r3, #9
 801ec22:	d91d      	bls.n	801ec60 <__ssvfiscanf_r+0xdc>
 801ec24:	4891      	ldr	r0, [pc, #580]	; (801ee6c <__ssvfiscanf_r+0x2e8>)
 801ec26:	2203      	movs	r2, #3
 801ec28:	f7e1 faea 	bl	8000200 <memchr>
 801ec2c:	b140      	cbz	r0, 801ec40 <__ssvfiscanf_r+0xbc>
 801ec2e:	2301      	movs	r3, #1
 801ec30:	eba0 0009 	sub.w	r0, r0, r9
 801ec34:	fa03 f000 	lsl.w	r0, r3, r0
 801ec38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec3a:	4318      	orrs	r0, r3
 801ec3c:	9041      	str	r0, [sp, #260]	; 0x104
 801ec3e:	465d      	mov	r5, fp
 801ec40:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ec44:	2b78      	cmp	r3, #120	; 0x78
 801ec46:	d806      	bhi.n	801ec56 <__ssvfiscanf_r+0xd2>
 801ec48:	2b57      	cmp	r3, #87	; 0x57
 801ec4a:	d810      	bhi.n	801ec6e <__ssvfiscanf_r+0xea>
 801ec4c:	2b25      	cmp	r3, #37	; 0x25
 801ec4e:	d05c      	beq.n	801ed0a <__ssvfiscanf_r+0x186>
 801ec50:	d856      	bhi.n	801ed00 <__ssvfiscanf_r+0x17c>
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d074      	beq.n	801ed40 <__ssvfiscanf_r+0x1bc>
 801ec56:	2303      	movs	r3, #3
 801ec58:	9347      	str	r3, [sp, #284]	; 0x11c
 801ec5a:	230a      	movs	r3, #10
 801ec5c:	9342      	str	r3, [sp, #264]	; 0x108
 801ec5e:	e081      	b.n	801ed64 <__ssvfiscanf_r+0x1e0>
 801ec60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ec62:	fb02 1303 	mla	r3, r2, r3, r1
 801ec66:	3b30      	subs	r3, #48	; 0x30
 801ec68:	9343      	str	r3, [sp, #268]	; 0x10c
 801ec6a:	465d      	mov	r5, fp
 801ec6c:	e7d3      	b.n	801ec16 <__ssvfiscanf_r+0x92>
 801ec6e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ec72:	2a20      	cmp	r2, #32
 801ec74:	d8ef      	bhi.n	801ec56 <__ssvfiscanf_r+0xd2>
 801ec76:	a101      	add	r1, pc, #4	; (adr r1, 801ec7c <__ssvfiscanf_r+0xf8>)
 801ec78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ec7c:	0801ed4f 	.word	0x0801ed4f
 801ec80:	0801ec57 	.word	0x0801ec57
 801ec84:	0801ec57 	.word	0x0801ec57
 801ec88:	0801edad 	.word	0x0801edad
 801ec8c:	0801ec57 	.word	0x0801ec57
 801ec90:	0801ec57 	.word	0x0801ec57
 801ec94:	0801ec57 	.word	0x0801ec57
 801ec98:	0801ec57 	.word	0x0801ec57
 801ec9c:	0801ec57 	.word	0x0801ec57
 801eca0:	0801ec57 	.word	0x0801ec57
 801eca4:	0801ec57 	.word	0x0801ec57
 801eca8:	0801edc3 	.word	0x0801edc3
 801ecac:	0801ed99 	.word	0x0801ed99
 801ecb0:	0801ed07 	.word	0x0801ed07
 801ecb4:	0801ed07 	.word	0x0801ed07
 801ecb8:	0801ed07 	.word	0x0801ed07
 801ecbc:	0801ec57 	.word	0x0801ec57
 801ecc0:	0801ed9d 	.word	0x0801ed9d
 801ecc4:	0801ec57 	.word	0x0801ec57
 801ecc8:	0801ec57 	.word	0x0801ec57
 801eccc:	0801ec57 	.word	0x0801ec57
 801ecd0:	0801ec57 	.word	0x0801ec57
 801ecd4:	0801edd3 	.word	0x0801edd3
 801ecd8:	0801eda5 	.word	0x0801eda5
 801ecdc:	0801ed47 	.word	0x0801ed47
 801ece0:	0801ec57 	.word	0x0801ec57
 801ece4:	0801ec57 	.word	0x0801ec57
 801ece8:	0801edcf 	.word	0x0801edcf
 801ecec:	0801ec57 	.word	0x0801ec57
 801ecf0:	0801ed99 	.word	0x0801ed99
 801ecf4:	0801ec57 	.word	0x0801ec57
 801ecf8:	0801ec57 	.word	0x0801ec57
 801ecfc:	0801ed4f 	.word	0x0801ed4f
 801ed00:	3b45      	subs	r3, #69	; 0x45
 801ed02:	2b02      	cmp	r3, #2
 801ed04:	d8a7      	bhi.n	801ec56 <__ssvfiscanf_r+0xd2>
 801ed06:	2305      	movs	r3, #5
 801ed08:	e02b      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801ed0a:	6863      	ldr	r3, [r4, #4]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	dd0d      	ble.n	801ed2c <__ssvfiscanf_r+0x1a8>
 801ed10:	6823      	ldr	r3, [r4, #0]
 801ed12:	781a      	ldrb	r2, [r3, #0]
 801ed14:	4552      	cmp	r2, sl
 801ed16:	f040 80a1 	bne.w	801ee5c <__ssvfiscanf_r+0x2d8>
 801ed1a:	3301      	adds	r3, #1
 801ed1c:	6862      	ldr	r2, [r4, #4]
 801ed1e:	6023      	str	r3, [r4, #0]
 801ed20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ed22:	3a01      	subs	r2, #1
 801ed24:	3301      	adds	r3, #1
 801ed26:	6062      	str	r2, [r4, #4]
 801ed28:	9345      	str	r3, [sp, #276]	; 0x114
 801ed2a:	e755      	b.n	801ebd8 <__ssvfiscanf_r+0x54>
 801ed2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ed2e:	4621      	mov	r1, r4
 801ed30:	4630      	mov	r0, r6
 801ed32:	4798      	blx	r3
 801ed34:	2800      	cmp	r0, #0
 801ed36:	d0eb      	beq.n	801ed10 <__ssvfiscanf_r+0x18c>
 801ed38:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ed3a:	2800      	cmp	r0, #0
 801ed3c:	f040 8084 	bne.w	801ee48 <__ssvfiscanf_r+0x2c4>
 801ed40:	f04f 30ff 	mov.w	r0, #4294967295
 801ed44:	e086      	b.n	801ee54 <__ssvfiscanf_r+0x2d0>
 801ed46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ed48:	f042 0220 	orr.w	r2, r2, #32
 801ed4c:	9241      	str	r2, [sp, #260]	; 0x104
 801ed4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ed50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ed54:	9241      	str	r2, [sp, #260]	; 0x104
 801ed56:	2210      	movs	r2, #16
 801ed58:	2b6f      	cmp	r3, #111	; 0x6f
 801ed5a:	9242      	str	r2, [sp, #264]	; 0x108
 801ed5c:	bf34      	ite	cc
 801ed5e:	2303      	movcc	r3, #3
 801ed60:	2304      	movcs	r3, #4
 801ed62:	9347      	str	r3, [sp, #284]	; 0x11c
 801ed64:	6863      	ldr	r3, [r4, #4]
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	dd41      	ble.n	801edee <__ssvfiscanf_r+0x26a>
 801ed6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ed6c:	0659      	lsls	r1, r3, #25
 801ed6e:	d404      	bmi.n	801ed7a <__ssvfiscanf_r+0x1f6>
 801ed70:	6823      	ldr	r3, [r4, #0]
 801ed72:	781a      	ldrb	r2, [r3, #0]
 801ed74:	5cba      	ldrb	r2, [r7, r2]
 801ed76:	0712      	lsls	r2, r2, #28
 801ed78:	d440      	bmi.n	801edfc <__ssvfiscanf_r+0x278>
 801ed7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ed7c:	2b02      	cmp	r3, #2
 801ed7e:	dc4f      	bgt.n	801ee20 <__ssvfiscanf_r+0x29c>
 801ed80:	466b      	mov	r3, sp
 801ed82:	4622      	mov	r2, r4
 801ed84:	a941      	add	r1, sp, #260	; 0x104
 801ed86:	4630      	mov	r0, r6
 801ed88:	f000 f9ce 	bl	801f128 <_scanf_chars>
 801ed8c:	2801      	cmp	r0, #1
 801ed8e:	d065      	beq.n	801ee5c <__ssvfiscanf_r+0x2d8>
 801ed90:	2802      	cmp	r0, #2
 801ed92:	f47f af21 	bne.w	801ebd8 <__ssvfiscanf_r+0x54>
 801ed96:	e7cf      	b.n	801ed38 <__ssvfiscanf_r+0x1b4>
 801ed98:	220a      	movs	r2, #10
 801ed9a:	e7dd      	b.n	801ed58 <__ssvfiscanf_r+0x1d4>
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	9342      	str	r3, [sp, #264]	; 0x108
 801eda0:	2303      	movs	r3, #3
 801eda2:	e7de      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801eda4:	2308      	movs	r3, #8
 801eda6:	9342      	str	r3, [sp, #264]	; 0x108
 801eda8:	2304      	movs	r3, #4
 801edaa:	e7da      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801edac:	4629      	mov	r1, r5
 801edae:	4640      	mov	r0, r8
 801edb0:	f000 fb18 	bl	801f3e4 <__sccl>
 801edb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801edb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801edba:	9341      	str	r3, [sp, #260]	; 0x104
 801edbc:	4605      	mov	r5, r0
 801edbe:	2301      	movs	r3, #1
 801edc0:	e7cf      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801edc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801edc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801edc8:	9341      	str	r3, [sp, #260]	; 0x104
 801edca:	2300      	movs	r3, #0
 801edcc:	e7c9      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801edce:	2302      	movs	r3, #2
 801edd0:	e7c7      	b.n	801ed62 <__ssvfiscanf_r+0x1de>
 801edd2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801edd4:	06c3      	lsls	r3, r0, #27
 801edd6:	f53f aeff 	bmi.w	801ebd8 <__ssvfiscanf_r+0x54>
 801edda:	9b00      	ldr	r3, [sp, #0]
 801eddc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801edde:	1d19      	adds	r1, r3, #4
 801ede0:	9100      	str	r1, [sp, #0]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	07c0      	lsls	r0, r0, #31
 801ede6:	bf4c      	ite	mi
 801ede8:	801a      	strhmi	r2, [r3, #0]
 801edea:	601a      	strpl	r2, [r3, #0]
 801edec:	e6f4      	b.n	801ebd8 <__ssvfiscanf_r+0x54>
 801edee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801edf0:	4621      	mov	r1, r4
 801edf2:	4630      	mov	r0, r6
 801edf4:	4798      	blx	r3
 801edf6:	2800      	cmp	r0, #0
 801edf8:	d0b7      	beq.n	801ed6a <__ssvfiscanf_r+0x1e6>
 801edfa:	e79d      	b.n	801ed38 <__ssvfiscanf_r+0x1b4>
 801edfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801edfe:	3201      	adds	r2, #1
 801ee00:	9245      	str	r2, [sp, #276]	; 0x114
 801ee02:	6862      	ldr	r2, [r4, #4]
 801ee04:	3a01      	subs	r2, #1
 801ee06:	2a00      	cmp	r2, #0
 801ee08:	6062      	str	r2, [r4, #4]
 801ee0a:	dd02      	ble.n	801ee12 <__ssvfiscanf_r+0x28e>
 801ee0c:	3301      	adds	r3, #1
 801ee0e:	6023      	str	r3, [r4, #0]
 801ee10:	e7ae      	b.n	801ed70 <__ssvfiscanf_r+0x1ec>
 801ee12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ee14:	4621      	mov	r1, r4
 801ee16:	4630      	mov	r0, r6
 801ee18:	4798      	blx	r3
 801ee1a:	2800      	cmp	r0, #0
 801ee1c:	d0a8      	beq.n	801ed70 <__ssvfiscanf_r+0x1ec>
 801ee1e:	e78b      	b.n	801ed38 <__ssvfiscanf_r+0x1b4>
 801ee20:	2b04      	cmp	r3, #4
 801ee22:	dc06      	bgt.n	801ee32 <__ssvfiscanf_r+0x2ae>
 801ee24:	466b      	mov	r3, sp
 801ee26:	4622      	mov	r2, r4
 801ee28:	a941      	add	r1, sp, #260	; 0x104
 801ee2a:	4630      	mov	r0, r6
 801ee2c:	f000 f9d4 	bl	801f1d8 <_scanf_i>
 801ee30:	e7ac      	b.n	801ed8c <__ssvfiscanf_r+0x208>
 801ee32:	4b0f      	ldr	r3, [pc, #60]	; (801ee70 <__ssvfiscanf_r+0x2ec>)
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	f43f aecf 	beq.w	801ebd8 <__ssvfiscanf_r+0x54>
 801ee3a:	466b      	mov	r3, sp
 801ee3c:	4622      	mov	r2, r4
 801ee3e:	a941      	add	r1, sp, #260	; 0x104
 801ee40:	4630      	mov	r0, r6
 801ee42:	f7fc f817 	bl	801ae74 <_scanf_float>
 801ee46:	e7a1      	b.n	801ed8c <__ssvfiscanf_r+0x208>
 801ee48:	89a3      	ldrh	r3, [r4, #12]
 801ee4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ee4e:	bf18      	it	ne
 801ee50:	f04f 30ff 	movne.w	r0, #4294967295
 801ee54:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801ee58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ee5e:	e7f9      	b.n	801ee54 <__ssvfiscanf_r+0x2d0>
 801ee60:	0801ead1 	.word	0x0801ead1
 801ee64:	0801eb4b 	.word	0x0801eb4b
 801ee68:	08021319 	.word	0x08021319
 801ee6c:	080217ba 	.word	0x080217ba
 801ee70:	0801ae75 	.word	0x0801ae75

0801ee74 <__sfputc_r>:
 801ee74:	6893      	ldr	r3, [r2, #8]
 801ee76:	3b01      	subs	r3, #1
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	b410      	push	{r4}
 801ee7c:	6093      	str	r3, [r2, #8]
 801ee7e:	da08      	bge.n	801ee92 <__sfputc_r+0x1e>
 801ee80:	6994      	ldr	r4, [r2, #24]
 801ee82:	42a3      	cmp	r3, r4
 801ee84:	db01      	blt.n	801ee8a <__sfputc_r+0x16>
 801ee86:	290a      	cmp	r1, #10
 801ee88:	d103      	bne.n	801ee92 <__sfputc_r+0x1e>
 801ee8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee8e:	f7fd bb7d 	b.w	801c58c <__swbuf_r>
 801ee92:	6813      	ldr	r3, [r2, #0]
 801ee94:	1c58      	adds	r0, r3, #1
 801ee96:	6010      	str	r0, [r2, #0]
 801ee98:	7019      	strb	r1, [r3, #0]
 801ee9a:	4608      	mov	r0, r1
 801ee9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eea0:	4770      	bx	lr

0801eea2 <__sfputs_r>:
 801eea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eea4:	4606      	mov	r6, r0
 801eea6:	460f      	mov	r7, r1
 801eea8:	4614      	mov	r4, r2
 801eeaa:	18d5      	adds	r5, r2, r3
 801eeac:	42ac      	cmp	r4, r5
 801eeae:	d101      	bne.n	801eeb4 <__sfputs_r+0x12>
 801eeb0:	2000      	movs	r0, #0
 801eeb2:	e007      	b.n	801eec4 <__sfputs_r+0x22>
 801eeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eeb8:	463a      	mov	r2, r7
 801eeba:	4630      	mov	r0, r6
 801eebc:	f7ff ffda 	bl	801ee74 <__sfputc_r>
 801eec0:	1c43      	adds	r3, r0, #1
 801eec2:	d1f3      	bne.n	801eeac <__sfputs_r+0xa>
 801eec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eec8 <_vfiprintf_r>:
 801eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eecc:	460d      	mov	r5, r1
 801eece:	b09d      	sub	sp, #116	; 0x74
 801eed0:	4614      	mov	r4, r2
 801eed2:	4698      	mov	r8, r3
 801eed4:	4606      	mov	r6, r0
 801eed6:	b118      	cbz	r0, 801eee0 <_vfiprintf_r+0x18>
 801eed8:	6983      	ldr	r3, [r0, #24]
 801eeda:	b90b      	cbnz	r3, 801eee0 <_vfiprintf_r+0x18>
 801eedc:	f7fb f9b8 	bl	801a250 <__sinit>
 801eee0:	4b89      	ldr	r3, [pc, #548]	; (801f108 <_vfiprintf_r+0x240>)
 801eee2:	429d      	cmp	r5, r3
 801eee4:	d11b      	bne.n	801ef1e <_vfiprintf_r+0x56>
 801eee6:	6875      	ldr	r5, [r6, #4]
 801eee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eeea:	07d9      	lsls	r1, r3, #31
 801eeec:	d405      	bmi.n	801eefa <_vfiprintf_r+0x32>
 801eeee:	89ab      	ldrh	r3, [r5, #12]
 801eef0:	059a      	lsls	r2, r3, #22
 801eef2:	d402      	bmi.n	801eefa <_vfiprintf_r+0x32>
 801eef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eef6:	f7fb fa6e 	bl	801a3d6 <__retarget_lock_acquire_recursive>
 801eefa:	89ab      	ldrh	r3, [r5, #12]
 801eefc:	071b      	lsls	r3, r3, #28
 801eefe:	d501      	bpl.n	801ef04 <_vfiprintf_r+0x3c>
 801ef00:	692b      	ldr	r3, [r5, #16]
 801ef02:	b9eb      	cbnz	r3, 801ef40 <_vfiprintf_r+0x78>
 801ef04:	4629      	mov	r1, r5
 801ef06:	4630      	mov	r0, r6
 801ef08:	f7fd fba4 	bl	801c654 <__swsetup_r>
 801ef0c:	b1c0      	cbz	r0, 801ef40 <_vfiprintf_r+0x78>
 801ef0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef10:	07dc      	lsls	r4, r3, #31
 801ef12:	d50e      	bpl.n	801ef32 <_vfiprintf_r+0x6a>
 801ef14:	f04f 30ff 	mov.w	r0, #4294967295
 801ef18:	b01d      	add	sp, #116	; 0x74
 801ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef1e:	4b7b      	ldr	r3, [pc, #492]	; (801f10c <_vfiprintf_r+0x244>)
 801ef20:	429d      	cmp	r5, r3
 801ef22:	d101      	bne.n	801ef28 <_vfiprintf_r+0x60>
 801ef24:	68b5      	ldr	r5, [r6, #8]
 801ef26:	e7df      	b.n	801eee8 <_vfiprintf_r+0x20>
 801ef28:	4b79      	ldr	r3, [pc, #484]	; (801f110 <_vfiprintf_r+0x248>)
 801ef2a:	429d      	cmp	r5, r3
 801ef2c:	bf08      	it	eq
 801ef2e:	68f5      	ldreq	r5, [r6, #12]
 801ef30:	e7da      	b.n	801eee8 <_vfiprintf_r+0x20>
 801ef32:	89ab      	ldrh	r3, [r5, #12]
 801ef34:	0598      	lsls	r0, r3, #22
 801ef36:	d4ed      	bmi.n	801ef14 <_vfiprintf_r+0x4c>
 801ef38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef3a:	f7fb fa4d 	bl	801a3d8 <__retarget_lock_release_recursive>
 801ef3e:	e7e9      	b.n	801ef14 <_vfiprintf_r+0x4c>
 801ef40:	2300      	movs	r3, #0
 801ef42:	9309      	str	r3, [sp, #36]	; 0x24
 801ef44:	2320      	movs	r3, #32
 801ef46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef4e:	2330      	movs	r3, #48	; 0x30
 801ef50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f114 <_vfiprintf_r+0x24c>
 801ef54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef58:	f04f 0901 	mov.w	r9, #1
 801ef5c:	4623      	mov	r3, r4
 801ef5e:	469a      	mov	sl, r3
 801ef60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef64:	b10a      	cbz	r2, 801ef6a <_vfiprintf_r+0xa2>
 801ef66:	2a25      	cmp	r2, #37	; 0x25
 801ef68:	d1f9      	bne.n	801ef5e <_vfiprintf_r+0x96>
 801ef6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ef6e:	d00b      	beq.n	801ef88 <_vfiprintf_r+0xc0>
 801ef70:	465b      	mov	r3, fp
 801ef72:	4622      	mov	r2, r4
 801ef74:	4629      	mov	r1, r5
 801ef76:	4630      	mov	r0, r6
 801ef78:	f7ff ff93 	bl	801eea2 <__sfputs_r>
 801ef7c:	3001      	adds	r0, #1
 801ef7e:	f000 80aa 	beq.w	801f0d6 <_vfiprintf_r+0x20e>
 801ef82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef84:	445a      	add	r2, fp
 801ef86:	9209      	str	r2, [sp, #36]	; 0x24
 801ef88:	f89a 3000 	ldrb.w	r3, [sl]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	f000 80a2 	beq.w	801f0d6 <_vfiprintf_r+0x20e>
 801ef92:	2300      	movs	r3, #0
 801ef94:	f04f 32ff 	mov.w	r2, #4294967295
 801ef98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef9c:	f10a 0a01 	add.w	sl, sl, #1
 801efa0:	9304      	str	r3, [sp, #16]
 801efa2:	9307      	str	r3, [sp, #28]
 801efa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801efa8:	931a      	str	r3, [sp, #104]	; 0x68
 801efaa:	4654      	mov	r4, sl
 801efac:	2205      	movs	r2, #5
 801efae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efb2:	4858      	ldr	r0, [pc, #352]	; (801f114 <_vfiprintf_r+0x24c>)
 801efb4:	f7e1 f924 	bl	8000200 <memchr>
 801efb8:	9a04      	ldr	r2, [sp, #16]
 801efba:	b9d8      	cbnz	r0, 801eff4 <_vfiprintf_r+0x12c>
 801efbc:	06d1      	lsls	r1, r2, #27
 801efbe:	bf44      	itt	mi
 801efc0:	2320      	movmi	r3, #32
 801efc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efc6:	0713      	lsls	r3, r2, #28
 801efc8:	bf44      	itt	mi
 801efca:	232b      	movmi	r3, #43	; 0x2b
 801efcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efd0:	f89a 3000 	ldrb.w	r3, [sl]
 801efd4:	2b2a      	cmp	r3, #42	; 0x2a
 801efd6:	d015      	beq.n	801f004 <_vfiprintf_r+0x13c>
 801efd8:	9a07      	ldr	r2, [sp, #28]
 801efda:	4654      	mov	r4, sl
 801efdc:	2000      	movs	r0, #0
 801efde:	f04f 0c0a 	mov.w	ip, #10
 801efe2:	4621      	mov	r1, r4
 801efe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801efe8:	3b30      	subs	r3, #48	; 0x30
 801efea:	2b09      	cmp	r3, #9
 801efec:	d94e      	bls.n	801f08c <_vfiprintf_r+0x1c4>
 801efee:	b1b0      	cbz	r0, 801f01e <_vfiprintf_r+0x156>
 801eff0:	9207      	str	r2, [sp, #28]
 801eff2:	e014      	b.n	801f01e <_vfiprintf_r+0x156>
 801eff4:	eba0 0308 	sub.w	r3, r0, r8
 801eff8:	fa09 f303 	lsl.w	r3, r9, r3
 801effc:	4313      	orrs	r3, r2
 801effe:	9304      	str	r3, [sp, #16]
 801f000:	46a2      	mov	sl, r4
 801f002:	e7d2      	b.n	801efaa <_vfiprintf_r+0xe2>
 801f004:	9b03      	ldr	r3, [sp, #12]
 801f006:	1d19      	adds	r1, r3, #4
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	9103      	str	r1, [sp, #12]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	bfbb      	ittet	lt
 801f010:	425b      	neglt	r3, r3
 801f012:	f042 0202 	orrlt.w	r2, r2, #2
 801f016:	9307      	strge	r3, [sp, #28]
 801f018:	9307      	strlt	r3, [sp, #28]
 801f01a:	bfb8      	it	lt
 801f01c:	9204      	strlt	r2, [sp, #16]
 801f01e:	7823      	ldrb	r3, [r4, #0]
 801f020:	2b2e      	cmp	r3, #46	; 0x2e
 801f022:	d10c      	bne.n	801f03e <_vfiprintf_r+0x176>
 801f024:	7863      	ldrb	r3, [r4, #1]
 801f026:	2b2a      	cmp	r3, #42	; 0x2a
 801f028:	d135      	bne.n	801f096 <_vfiprintf_r+0x1ce>
 801f02a:	9b03      	ldr	r3, [sp, #12]
 801f02c:	1d1a      	adds	r2, r3, #4
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	9203      	str	r2, [sp, #12]
 801f032:	2b00      	cmp	r3, #0
 801f034:	bfb8      	it	lt
 801f036:	f04f 33ff 	movlt.w	r3, #4294967295
 801f03a:	3402      	adds	r4, #2
 801f03c:	9305      	str	r3, [sp, #20]
 801f03e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f124 <_vfiprintf_r+0x25c>
 801f042:	7821      	ldrb	r1, [r4, #0]
 801f044:	2203      	movs	r2, #3
 801f046:	4650      	mov	r0, sl
 801f048:	f7e1 f8da 	bl	8000200 <memchr>
 801f04c:	b140      	cbz	r0, 801f060 <_vfiprintf_r+0x198>
 801f04e:	2340      	movs	r3, #64	; 0x40
 801f050:	eba0 000a 	sub.w	r0, r0, sl
 801f054:	fa03 f000 	lsl.w	r0, r3, r0
 801f058:	9b04      	ldr	r3, [sp, #16]
 801f05a:	4303      	orrs	r3, r0
 801f05c:	3401      	adds	r4, #1
 801f05e:	9304      	str	r3, [sp, #16]
 801f060:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f064:	482c      	ldr	r0, [pc, #176]	; (801f118 <_vfiprintf_r+0x250>)
 801f066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f06a:	2206      	movs	r2, #6
 801f06c:	f7e1 f8c8 	bl	8000200 <memchr>
 801f070:	2800      	cmp	r0, #0
 801f072:	d03f      	beq.n	801f0f4 <_vfiprintf_r+0x22c>
 801f074:	4b29      	ldr	r3, [pc, #164]	; (801f11c <_vfiprintf_r+0x254>)
 801f076:	bb1b      	cbnz	r3, 801f0c0 <_vfiprintf_r+0x1f8>
 801f078:	9b03      	ldr	r3, [sp, #12]
 801f07a:	3307      	adds	r3, #7
 801f07c:	f023 0307 	bic.w	r3, r3, #7
 801f080:	3308      	adds	r3, #8
 801f082:	9303      	str	r3, [sp, #12]
 801f084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f086:	443b      	add	r3, r7
 801f088:	9309      	str	r3, [sp, #36]	; 0x24
 801f08a:	e767      	b.n	801ef5c <_vfiprintf_r+0x94>
 801f08c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f090:	460c      	mov	r4, r1
 801f092:	2001      	movs	r0, #1
 801f094:	e7a5      	b.n	801efe2 <_vfiprintf_r+0x11a>
 801f096:	2300      	movs	r3, #0
 801f098:	3401      	adds	r4, #1
 801f09a:	9305      	str	r3, [sp, #20]
 801f09c:	4619      	mov	r1, r3
 801f09e:	f04f 0c0a 	mov.w	ip, #10
 801f0a2:	4620      	mov	r0, r4
 801f0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0a8:	3a30      	subs	r2, #48	; 0x30
 801f0aa:	2a09      	cmp	r2, #9
 801f0ac:	d903      	bls.n	801f0b6 <_vfiprintf_r+0x1ee>
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d0c5      	beq.n	801f03e <_vfiprintf_r+0x176>
 801f0b2:	9105      	str	r1, [sp, #20]
 801f0b4:	e7c3      	b.n	801f03e <_vfiprintf_r+0x176>
 801f0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0ba:	4604      	mov	r4, r0
 801f0bc:	2301      	movs	r3, #1
 801f0be:	e7f0      	b.n	801f0a2 <_vfiprintf_r+0x1da>
 801f0c0:	ab03      	add	r3, sp, #12
 801f0c2:	9300      	str	r3, [sp, #0]
 801f0c4:	462a      	mov	r2, r5
 801f0c6:	4b16      	ldr	r3, [pc, #88]	; (801f120 <_vfiprintf_r+0x258>)
 801f0c8:	a904      	add	r1, sp, #16
 801f0ca:	4630      	mov	r0, r6
 801f0cc:	f7fb fb08 	bl	801a6e0 <_printf_float>
 801f0d0:	4607      	mov	r7, r0
 801f0d2:	1c78      	adds	r0, r7, #1
 801f0d4:	d1d6      	bne.n	801f084 <_vfiprintf_r+0x1bc>
 801f0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f0d8:	07d9      	lsls	r1, r3, #31
 801f0da:	d405      	bmi.n	801f0e8 <_vfiprintf_r+0x220>
 801f0dc:	89ab      	ldrh	r3, [r5, #12]
 801f0de:	059a      	lsls	r2, r3, #22
 801f0e0:	d402      	bmi.n	801f0e8 <_vfiprintf_r+0x220>
 801f0e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f0e4:	f7fb f978 	bl	801a3d8 <__retarget_lock_release_recursive>
 801f0e8:	89ab      	ldrh	r3, [r5, #12]
 801f0ea:	065b      	lsls	r3, r3, #25
 801f0ec:	f53f af12 	bmi.w	801ef14 <_vfiprintf_r+0x4c>
 801f0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f0f2:	e711      	b.n	801ef18 <_vfiprintf_r+0x50>
 801f0f4:	ab03      	add	r3, sp, #12
 801f0f6:	9300      	str	r3, [sp, #0]
 801f0f8:	462a      	mov	r2, r5
 801f0fa:	4b09      	ldr	r3, [pc, #36]	; (801f120 <_vfiprintf_r+0x258>)
 801f0fc:	a904      	add	r1, sp, #16
 801f0fe:	4630      	mov	r0, r6
 801f100:	f7fb fd92 	bl	801ac28 <_printf_i>
 801f104:	e7e4      	b.n	801f0d0 <_vfiprintf_r+0x208>
 801f106:	bf00      	nop
 801f108:	0802143c 	.word	0x0802143c
 801f10c:	0802145c 	.word	0x0802145c
 801f110:	0802141c 	.word	0x0802141c
 801f114:	080217b4 	.word	0x080217b4
 801f118:	080217be 	.word	0x080217be
 801f11c:	0801a6e1 	.word	0x0801a6e1
 801f120:	0801eea3 	.word	0x0801eea3
 801f124:	080217ba 	.word	0x080217ba

0801f128 <_scanf_chars>:
 801f128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f12c:	4615      	mov	r5, r2
 801f12e:	688a      	ldr	r2, [r1, #8]
 801f130:	4680      	mov	r8, r0
 801f132:	460c      	mov	r4, r1
 801f134:	b932      	cbnz	r2, 801f144 <_scanf_chars+0x1c>
 801f136:	698a      	ldr	r2, [r1, #24]
 801f138:	2a00      	cmp	r2, #0
 801f13a:	bf0c      	ite	eq
 801f13c:	2201      	moveq	r2, #1
 801f13e:	f04f 32ff 	movne.w	r2, #4294967295
 801f142:	608a      	str	r2, [r1, #8]
 801f144:	6822      	ldr	r2, [r4, #0]
 801f146:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f1d4 <_scanf_chars+0xac>
 801f14a:	06d1      	lsls	r1, r2, #27
 801f14c:	bf5f      	itttt	pl
 801f14e:	681a      	ldrpl	r2, [r3, #0]
 801f150:	1d11      	addpl	r1, r2, #4
 801f152:	6019      	strpl	r1, [r3, #0]
 801f154:	6816      	ldrpl	r6, [r2, #0]
 801f156:	2700      	movs	r7, #0
 801f158:	69a0      	ldr	r0, [r4, #24]
 801f15a:	b188      	cbz	r0, 801f180 <_scanf_chars+0x58>
 801f15c:	2801      	cmp	r0, #1
 801f15e:	d107      	bne.n	801f170 <_scanf_chars+0x48>
 801f160:	682b      	ldr	r3, [r5, #0]
 801f162:	781a      	ldrb	r2, [r3, #0]
 801f164:	6963      	ldr	r3, [r4, #20]
 801f166:	5c9b      	ldrb	r3, [r3, r2]
 801f168:	b953      	cbnz	r3, 801f180 <_scanf_chars+0x58>
 801f16a:	bb27      	cbnz	r7, 801f1b6 <_scanf_chars+0x8e>
 801f16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f170:	2802      	cmp	r0, #2
 801f172:	d120      	bne.n	801f1b6 <_scanf_chars+0x8e>
 801f174:	682b      	ldr	r3, [r5, #0]
 801f176:	781b      	ldrb	r3, [r3, #0]
 801f178:	f813 3009 	ldrb.w	r3, [r3, r9]
 801f17c:	071b      	lsls	r3, r3, #28
 801f17e:	d41a      	bmi.n	801f1b6 <_scanf_chars+0x8e>
 801f180:	6823      	ldr	r3, [r4, #0]
 801f182:	06da      	lsls	r2, r3, #27
 801f184:	bf5e      	ittt	pl
 801f186:	682b      	ldrpl	r3, [r5, #0]
 801f188:	781b      	ldrbpl	r3, [r3, #0]
 801f18a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f18e:	682a      	ldr	r2, [r5, #0]
 801f190:	686b      	ldr	r3, [r5, #4]
 801f192:	3201      	adds	r2, #1
 801f194:	602a      	str	r2, [r5, #0]
 801f196:	68a2      	ldr	r2, [r4, #8]
 801f198:	3b01      	subs	r3, #1
 801f19a:	3a01      	subs	r2, #1
 801f19c:	606b      	str	r3, [r5, #4]
 801f19e:	3701      	adds	r7, #1
 801f1a0:	60a2      	str	r2, [r4, #8]
 801f1a2:	b142      	cbz	r2, 801f1b6 <_scanf_chars+0x8e>
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	dcd7      	bgt.n	801f158 <_scanf_chars+0x30>
 801f1a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f1ac:	4629      	mov	r1, r5
 801f1ae:	4640      	mov	r0, r8
 801f1b0:	4798      	blx	r3
 801f1b2:	2800      	cmp	r0, #0
 801f1b4:	d0d0      	beq.n	801f158 <_scanf_chars+0x30>
 801f1b6:	6823      	ldr	r3, [r4, #0]
 801f1b8:	f013 0310 	ands.w	r3, r3, #16
 801f1bc:	d105      	bne.n	801f1ca <_scanf_chars+0xa2>
 801f1be:	68e2      	ldr	r2, [r4, #12]
 801f1c0:	3201      	adds	r2, #1
 801f1c2:	60e2      	str	r2, [r4, #12]
 801f1c4:	69a2      	ldr	r2, [r4, #24]
 801f1c6:	b102      	cbz	r2, 801f1ca <_scanf_chars+0xa2>
 801f1c8:	7033      	strb	r3, [r6, #0]
 801f1ca:	6923      	ldr	r3, [r4, #16]
 801f1cc:	441f      	add	r7, r3
 801f1ce:	6127      	str	r7, [r4, #16]
 801f1d0:	2000      	movs	r0, #0
 801f1d2:	e7cb      	b.n	801f16c <_scanf_chars+0x44>
 801f1d4:	08021319 	.word	0x08021319

0801f1d8 <_scanf_i>:
 801f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1dc:	4698      	mov	r8, r3
 801f1de:	4b74      	ldr	r3, [pc, #464]	; (801f3b0 <_scanf_i+0x1d8>)
 801f1e0:	460c      	mov	r4, r1
 801f1e2:	4682      	mov	sl, r0
 801f1e4:	4616      	mov	r6, r2
 801f1e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f1ea:	b087      	sub	sp, #28
 801f1ec:	ab03      	add	r3, sp, #12
 801f1ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f1f2:	4b70      	ldr	r3, [pc, #448]	; (801f3b4 <_scanf_i+0x1dc>)
 801f1f4:	69a1      	ldr	r1, [r4, #24]
 801f1f6:	4a70      	ldr	r2, [pc, #448]	; (801f3b8 <_scanf_i+0x1e0>)
 801f1f8:	2903      	cmp	r1, #3
 801f1fa:	bf18      	it	ne
 801f1fc:	461a      	movne	r2, r3
 801f1fe:	68a3      	ldr	r3, [r4, #8]
 801f200:	9201      	str	r2, [sp, #4]
 801f202:	1e5a      	subs	r2, r3, #1
 801f204:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f208:	bf88      	it	hi
 801f20a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f20e:	4627      	mov	r7, r4
 801f210:	bf82      	ittt	hi
 801f212:	eb03 0905 	addhi.w	r9, r3, r5
 801f216:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f21a:	60a3      	strhi	r3, [r4, #8]
 801f21c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f220:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f224:	bf98      	it	ls
 801f226:	f04f 0900 	movls.w	r9, #0
 801f22a:	6023      	str	r3, [r4, #0]
 801f22c:	463d      	mov	r5, r7
 801f22e:	f04f 0b00 	mov.w	fp, #0
 801f232:	6831      	ldr	r1, [r6, #0]
 801f234:	ab03      	add	r3, sp, #12
 801f236:	7809      	ldrb	r1, [r1, #0]
 801f238:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f23c:	2202      	movs	r2, #2
 801f23e:	f7e0 ffdf 	bl	8000200 <memchr>
 801f242:	b328      	cbz	r0, 801f290 <_scanf_i+0xb8>
 801f244:	f1bb 0f01 	cmp.w	fp, #1
 801f248:	d159      	bne.n	801f2fe <_scanf_i+0x126>
 801f24a:	6862      	ldr	r2, [r4, #4]
 801f24c:	b92a      	cbnz	r2, 801f25a <_scanf_i+0x82>
 801f24e:	6822      	ldr	r2, [r4, #0]
 801f250:	2308      	movs	r3, #8
 801f252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f256:	6063      	str	r3, [r4, #4]
 801f258:	6022      	str	r2, [r4, #0]
 801f25a:	6822      	ldr	r2, [r4, #0]
 801f25c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f260:	6022      	str	r2, [r4, #0]
 801f262:	68a2      	ldr	r2, [r4, #8]
 801f264:	1e51      	subs	r1, r2, #1
 801f266:	60a1      	str	r1, [r4, #8]
 801f268:	b192      	cbz	r2, 801f290 <_scanf_i+0xb8>
 801f26a:	6832      	ldr	r2, [r6, #0]
 801f26c:	1c51      	adds	r1, r2, #1
 801f26e:	6031      	str	r1, [r6, #0]
 801f270:	7812      	ldrb	r2, [r2, #0]
 801f272:	f805 2b01 	strb.w	r2, [r5], #1
 801f276:	6872      	ldr	r2, [r6, #4]
 801f278:	3a01      	subs	r2, #1
 801f27a:	2a00      	cmp	r2, #0
 801f27c:	6072      	str	r2, [r6, #4]
 801f27e:	dc07      	bgt.n	801f290 <_scanf_i+0xb8>
 801f280:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f284:	4631      	mov	r1, r6
 801f286:	4650      	mov	r0, sl
 801f288:	4790      	blx	r2
 801f28a:	2800      	cmp	r0, #0
 801f28c:	f040 8085 	bne.w	801f39a <_scanf_i+0x1c2>
 801f290:	f10b 0b01 	add.w	fp, fp, #1
 801f294:	f1bb 0f03 	cmp.w	fp, #3
 801f298:	d1cb      	bne.n	801f232 <_scanf_i+0x5a>
 801f29a:	6863      	ldr	r3, [r4, #4]
 801f29c:	b90b      	cbnz	r3, 801f2a2 <_scanf_i+0xca>
 801f29e:	230a      	movs	r3, #10
 801f2a0:	6063      	str	r3, [r4, #4]
 801f2a2:	6863      	ldr	r3, [r4, #4]
 801f2a4:	4945      	ldr	r1, [pc, #276]	; (801f3bc <_scanf_i+0x1e4>)
 801f2a6:	6960      	ldr	r0, [r4, #20]
 801f2a8:	1ac9      	subs	r1, r1, r3
 801f2aa:	f000 f89b 	bl	801f3e4 <__sccl>
 801f2ae:	f04f 0b00 	mov.w	fp, #0
 801f2b2:	68a3      	ldr	r3, [r4, #8]
 801f2b4:	6822      	ldr	r2, [r4, #0]
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d03d      	beq.n	801f336 <_scanf_i+0x15e>
 801f2ba:	6831      	ldr	r1, [r6, #0]
 801f2bc:	6960      	ldr	r0, [r4, #20]
 801f2be:	f891 c000 	ldrb.w	ip, [r1]
 801f2c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	d035      	beq.n	801f336 <_scanf_i+0x15e>
 801f2ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f2ce:	d124      	bne.n	801f31a <_scanf_i+0x142>
 801f2d0:	0510      	lsls	r0, r2, #20
 801f2d2:	d522      	bpl.n	801f31a <_scanf_i+0x142>
 801f2d4:	f10b 0b01 	add.w	fp, fp, #1
 801f2d8:	f1b9 0f00 	cmp.w	r9, #0
 801f2dc:	d003      	beq.n	801f2e6 <_scanf_i+0x10e>
 801f2de:	3301      	adds	r3, #1
 801f2e0:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2e4:	60a3      	str	r3, [r4, #8]
 801f2e6:	6873      	ldr	r3, [r6, #4]
 801f2e8:	3b01      	subs	r3, #1
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	6073      	str	r3, [r6, #4]
 801f2ee:	dd1b      	ble.n	801f328 <_scanf_i+0x150>
 801f2f0:	6833      	ldr	r3, [r6, #0]
 801f2f2:	3301      	adds	r3, #1
 801f2f4:	6033      	str	r3, [r6, #0]
 801f2f6:	68a3      	ldr	r3, [r4, #8]
 801f2f8:	3b01      	subs	r3, #1
 801f2fa:	60a3      	str	r3, [r4, #8]
 801f2fc:	e7d9      	b.n	801f2b2 <_scanf_i+0xda>
 801f2fe:	f1bb 0f02 	cmp.w	fp, #2
 801f302:	d1ae      	bne.n	801f262 <_scanf_i+0x8a>
 801f304:	6822      	ldr	r2, [r4, #0]
 801f306:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f30a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f30e:	d1bf      	bne.n	801f290 <_scanf_i+0xb8>
 801f310:	2310      	movs	r3, #16
 801f312:	6063      	str	r3, [r4, #4]
 801f314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f318:	e7a2      	b.n	801f260 <_scanf_i+0x88>
 801f31a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f31e:	6022      	str	r2, [r4, #0]
 801f320:	780b      	ldrb	r3, [r1, #0]
 801f322:	f805 3b01 	strb.w	r3, [r5], #1
 801f326:	e7de      	b.n	801f2e6 <_scanf_i+0x10e>
 801f328:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f32c:	4631      	mov	r1, r6
 801f32e:	4650      	mov	r0, sl
 801f330:	4798      	blx	r3
 801f332:	2800      	cmp	r0, #0
 801f334:	d0df      	beq.n	801f2f6 <_scanf_i+0x11e>
 801f336:	6823      	ldr	r3, [r4, #0]
 801f338:	05d9      	lsls	r1, r3, #23
 801f33a:	d50d      	bpl.n	801f358 <_scanf_i+0x180>
 801f33c:	42bd      	cmp	r5, r7
 801f33e:	d909      	bls.n	801f354 <_scanf_i+0x17c>
 801f340:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f348:	4632      	mov	r2, r6
 801f34a:	4650      	mov	r0, sl
 801f34c:	4798      	blx	r3
 801f34e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f352:	464d      	mov	r5, r9
 801f354:	42bd      	cmp	r5, r7
 801f356:	d028      	beq.n	801f3aa <_scanf_i+0x1d2>
 801f358:	6822      	ldr	r2, [r4, #0]
 801f35a:	f012 0210 	ands.w	r2, r2, #16
 801f35e:	d113      	bne.n	801f388 <_scanf_i+0x1b0>
 801f360:	702a      	strb	r2, [r5, #0]
 801f362:	6863      	ldr	r3, [r4, #4]
 801f364:	9e01      	ldr	r6, [sp, #4]
 801f366:	4639      	mov	r1, r7
 801f368:	4650      	mov	r0, sl
 801f36a:	47b0      	blx	r6
 801f36c:	f8d8 3000 	ldr.w	r3, [r8]
 801f370:	6821      	ldr	r1, [r4, #0]
 801f372:	1d1a      	adds	r2, r3, #4
 801f374:	f8c8 2000 	str.w	r2, [r8]
 801f378:	f011 0f20 	tst.w	r1, #32
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	d00f      	beq.n	801f3a0 <_scanf_i+0x1c8>
 801f380:	6018      	str	r0, [r3, #0]
 801f382:	68e3      	ldr	r3, [r4, #12]
 801f384:	3301      	adds	r3, #1
 801f386:	60e3      	str	r3, [r4, #12]
 801f388:	1bed      	subs	r5, r5, r7
 801f38a:	44ab      	add	fp, r5
 801f38c:	6925      	ldr	r5, [r4, #16]
 801f38e:	445d      	add	r5, fp
 801f390:	6125      	str	r5, [r4, #16]
 801f392:	2000      	movs	r0, #0
 801f394:	b007      	add	sp, #28
 801f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f39a:	f04f 0b00 	mov.w	fp, #0
 801f39e:	e7ca      	b.n	801f336 <_scanf_i+0x15e>
 801f3a0:	07ca      	lsls	r2, r1, #31
 801f3a2:	bf4c      	ite	mi
 801f3a4:	8018      	strhmi	r0, [r3, #0]
 801f3a6:	6018      	strpl	r0, [r3, #0]
 801f3a8:	e7eb      	b.n	801f382 <_scanf_i+0x1aa>
 801f3aa:	2001      	movs	r0, #1
 801f3ac:	e7f2      	b.n	801f394 <_scanf_i+0x1bc>
 801f3ae:	bf00      	nop
 801f3b0:	080210dc 	.word	0x080210dc
 801f3b4:	0801c501 	.word	0x0801c501
 801f3b8:	0801c3f1 	.word	0x0801c3f1
 801f3bc:	080217de 	.word	0x080217de

0801f3c0 <_read_r>:
 801f3c0:	b538      	push	{r3, r4, r5, lr}
 801f3c2:	4d07      	ldr	r5, [pc, #28]	; (801f3e0 <_read_r+0x20>)
 801f3c4:	4604      	mov	r4, r0
 801f3c6:	4608      	mov	r0, r1
 801f3c8:	4611      	mov	r1, r2
 801f3ca:	2200      	movs	r2, #0
 801f3cc:	602a      	str	r2, [r5, #0]
 801f3ce:	461a      	mov	r2, r3
 801f3d0:	f7e3 fd4a 	bl	8002e68 <_read>
 801f3d4:	1c43      	adds	r3, r0, #1
 801f3d6:	d102      	bne.n	801f3de <_read_r+0x1e>
 801f3d8:	682b      	ldr	r3, [r5, #0]
 801f3da:	b103      	cbz	r3, 801f3de <_read_r+0x1e>
 801f3dc:	6023      	str	r3, [r4, #0]
 801f3de:	bd38      	pop	{r3, r4, r5, pc}
 801f3e0:	20008fb4 	.word	0x20008fb4

0801f3e4 <__sccl>:
 801f3e4:	b570      	push	{r4, r5, r6, lr}
 801f3e6:	780b      	ldrb	r3, [r1, #0]
 801f3e8:	4604      	mov	r4, r0
 801f3ea:	2b5e      	cmp	r3, #94	; 0x5e
 801f3ec:	bf0b      	itete	eq
 801f3ee:	784b      	ldrbeq	r3, [r1, #1]
 801f3f0:	1c48      	addne	r0, r1, #1
 801f3f2:	1c88      	addeq	r0, r1, #2
 801f3f4:	2200      	movne	r2, #0
 801f3f6:	bf08      	it	eq
 801f3f8:	2201      	moveq	r2, #1
 801f3fa:	1e61      	subs	r1, r4, #1
 801f3fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f400:	f801 2f01 	strb.w	r2, [r1, #1]!
 801f404:	42a9      	cmp	r1, r5
 801f406:	d1fb      	bne.n	801f400 <__sccl+0x1c>
 801f408:	b90b      	cbnz	r3, 801f40e <__sccl+0x2a>
 801f40a:	3801      	subs	r0, #1
 801f40c:	bd70      	pop	{r4, r5, r6, pc}
 801f40e:	f082 0101 	eor.w	r1, r2, #1
 801f412:	54e1      	strb	r1, [r4, r3]
 801f414:	1c42      	adds	r2, r0, #1
 801f416:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801f41a:	2d2d      	cmp	r5, #45	; 0x2d
 801f41c:	f102 36ff 	add.w	r6, r2, #4294967295
 801f420:	4610      	mov	r0, r2
 801f422:	d006      	beq.n	801f432 <__sccl+0x4e>
 801f424:	2d5d      	cmp	r5, #93	; 0x5d
 801f426:	d0f1      	beq.n	801f40c <__sccl+0x28>
 801f428:	b90d      	cbnz	r5, 801f42e <__sccl+0x4a>
 801f42a:	4630      	mov	r0, r6
 801f42c:	e7ee      	b.n	801f40c <__sccl+0x28>
 801f42e:	462b      	mov	r3, r5
 801f430:	e7ef      	b.n	801f412 <__sccl+0x2e>
 801f432:	7816      	ldrb	r6, [r2, #0]
 801f434:	2e5d      	cmp	r6, #93	; 0x5d
 801f436:	d0fa      	beq.n	801f42e <__sccl+0x4a>
 801f438:	42b3      	cmp	r3, r6
 801f43a:	dcf8      	bgt.n	801f42e <__sccl+0x4a>
 801f43c:	4618      	mov	r0, r3
 801f43e:	3001      	adds	r0, #1
 801f440:	4286      	cmp	r6, r0
 801f442:	5421      	strb	r1, [r4, r0]
 801f444:	dcfb      	bgt.n	801f43e <__sccl+0x5a>
 801f446:	43d8      	mvns	r0, r3
 801f448:	4430      	add	r0, r6
 801f44a:	1c5d      	adds	r5, r3, #1
 801f44c:	42b3      	cmp	r3, r6
 801f44e:	bfa8      	it	ge
 801f450:	2000      	movge	r0, #0
 801f452:	182b      	adds	r3, r5, r0
 801f454:	3202      	adds	r2, #2
 801f456:	e7de      	b.n	801f416 <__sccl+0x32>

0801f458 <__submore>:
 801f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f45c:	460c      	mov	r4, r1
 801f45e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f464:	4299      	cmp	r1, r3
 801f466:	d11d      	bne.n	801f4a4 <__submore+0x4c>
 801f468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f46c:	f7fb f83e 	bl	801a4ec <_malloc_r>
 801f470:	b918      	cbnz	r0, 801f47a <__submore+0x22>
 801f472:	f04f 30ff 	mov.w	r0, #4294967295
 801f476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f47e:	63a3      	str	r3, [r4, #56]	; 0x38
 801f480:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f484:	6360      	str	r0, [r4, #52]	; 0x34
 801f486:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f48a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f48e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f492:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f496:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f49a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f49e:	6020      	str	r0, [r4, #0]
 801f4a0:	2000      	movs	r0, #0
 801f4a2:	e7e8      	b.n	801f476 <__submore+0x1e>
 801f4a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f4a6:	0077      	lsls	r7, r6, #1
 801f4a8:	463a      	mov	r2, r7
 801f4aa:	f7ff f98f 	bl	801e7cc <_realloc_r>
 801f4ae:	4605      	mov	r5, r0
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	d0de      	beq.n	801f472 <__submore+0x1a>
 801f4b4:	eb00 0806 	add.w	r8, r0, r6
 801f4b8:	4601      	mov	r1, r0
 801f4ba:	4632      	mov	r2, r6
 801f4bc:	4640      	mov	r0, r8
 801f4be:	f7fa ff95 	bl	801a3ec <memcpy>
 801f4c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f4c6:	f8c4 8000 	str.w	r8, [r4]
 801f4ca:	e7e9      	b.n	801f4a0 <__submore+0x48>

0801f4cc <__ascii_wctomb>:
 801f4cc:	b149      	cbz	r1, 801f4e2 <__ascii_wctomb+0x16>
 801f4ce:	2aff      	cmp	r2, #255	; 0xff
 801f4d0:	bf85      	ittet	hi
 801f4d2:	238a      	movhi	r3, #138	; 0x8a
 801f4d4:	6003      	strhi	r3, [r0, #0]
 801f4d6:	700a      	strbls	r2, [r1, #0]
 801f4d8:	f04f 30ff 	movhi.w	r0, #4294967295
 801f4dc:	bf98      	it	ls
 801f4de:	2001      	movls	r0, #1
 801f4e0:	4770      	bx	lr
 801f4e2:	4608      	mov	r0, r1
 801f4e4:	4770      	bx	lr
	...

0801f4e8 <_fstat_r>:
 801f4e8:	b538      	push	{r3, r4, r5, lr}
 801f4ea:	4d07      	ldr	r5, [pc, #28]	; (801f508 <_fstat_r+0x20>)
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	4604      	mov	r4, r0
 801f4f0:	4608      	mov	r0, r1
 801f4f2:	4611      	mov	r1, r2
 801f4f4:	602b      	str	r3, [r5, #0]
 801f4f6:	f7e3 fcfc 	bl	8002ef2 <_fstat>
 801f4fa:	1c43      	adds	r3, r0, #1
 801f4fc:	d102      	bne.n	801f504 <_fstat_r+0x1c>
 801f4fe:	682b      	ldr	r3, [r5, #0]
 801f500:	b103      	cbz	r3, 801f504 <_fstat_r+0x1c>
 801f502:	6023      	str	r3, [r4, #0]
 801f504:	bd38      	pop	{r3, r4, r5, pc}
 801f506:	bf00      	nop
 801f508:	20008fb4 	.word	0x20008fb4

0801f50c <_isatty_r>:
 801f50c:	b538      	push	{r3, r4, r5, lr}
 801f50e:	4d06      	ldr	r5, [pc, #24]	; (801f528 <_isatty_r+0x1c>)
 801f510:	2300      	movs	r3, #0
 801f512:	4604      	mov	r4, r0
 801f514:	4608      	mov	r0, r1
 801f516:	602b      	str	r3, [r5, #0]
 801f518:	f7e3 fcfb 	bl	8002f12 <_isatty>
 801f51c:	1c43      	adds	r3, r0, #1
 801f51e:	d102      	bne.n	801f526 <_isatty_r+0x1a>
 801f520:	682b      	ldr	r3, [r5, #0]
 801f522:	b103      	cbz	r3, 801f526 <_isatty_r+0x1a>
 801f524:	6023      	str	r3, [r4, #0]
 801f526:	bd38      	pop	{r3, r4, r5, pc}
 801f528:	20008fb4 	.word	0x20008fb4

0801f52c <_malloc_usable_size_r>:
 801f52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f530:	1f18      	subs	r0, r3, #4
 801f532:	2b00      	cmp	r3, #0
 801f534:	bfbc      	itt	lt
 801f536:	580b      	ldrlt	r3, [r1, r0]
 801f538:	18c0      	addlt	r0, r0, r3
 801f53a:	4770      	bx	lr

0801f53c <_init>:
 801f53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f53e:	bf00      	nop
 801f540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f542:	bc08      	pop	{r3}
 801f544:	469e      	mov	lr, r3
 801f546:	4770      	bx	lr

0801f548 <_fini>:
 801f548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f54a:	bf00      	nop
 801f54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f54e:	bc08      	pop	{r3}
 801f550:	469e      	mov	lr, r3
 801f552:	4770      	bx	lr
