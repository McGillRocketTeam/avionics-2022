
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08012650  08012650  00022650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013088  08013088  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013088  08013088  00023088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013090  08013090  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013090  08013090  00023090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013098  08013098  00023098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801309c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030204  2**0
                  CONTENTS
 10 .bss          0000551c  20000204  20000204  00030204  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20005720  20005720  00030204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049d1e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000676f  00000000  00000000  00079f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031d8  00000000  00000000  000806c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002fb8  00000000  00000000  000838a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009259  00000000  00000000  00086858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f5ab  00000000  00000000  0008fab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110951  00000000  00000000  000bf05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cf9ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ef80  00000000  00000000  001cfa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012638 	.word	0x08012638

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08012638 	.word	0x08012638

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f004 fc4a 	bl	80058d0 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f004 fd27 	bl	8005ac4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f008 f9ec 	bl	800947a <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f003 fd42 	bl	8004b38 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fb44 	bl	8004748 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f008 f9d5 	bl	800947a <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f008 f9c9 	bl	800947a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f008 f9c1 	bl	800947a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00d fae1 	bl	800e6cc <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f008 f9a7 	bl	800947a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f008 f99f 	bl	800947a <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f008 f996 	bl	800947a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fb08 	bl	800476a <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 fceb 	bl	8004b38 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fb24 	bl	80047b6 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f993 	bl	80044a8 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ff6f 	bl	800406c <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f88b 	bl	80042b0 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ff3d 	bl	8004020 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f859 	bl	8004264 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f008 f95c 	bl	800947a <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004eec 	.word	0x20004eec
 80011e0:	08012650 	.word	0x08012650
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000230 	.word	0x20000230
 80011f0:	08012668 	.word	0x08012668
 80011f4:	08012680 	.word	0x08012680
 80011f8:	0801268c 	.word	0x0801268c
 80011fc:	080126a0 	.word	0x080126a0
 8001200:	080126a8 	.word	0x080126a8
 8001204:	080126c0 	.word	0x080126c0
 8001208:	20000231 	.word	0x20000231
 800120c:	080126c8 	.word	0x080126c8

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f964 	bl	80044f4 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f00c fa58 	bl	800d6ec <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa10 	bl	8004666 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fe9b 	bl	8003f88 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f002 fe8e 	bl	8003f88 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f002 fe81 	bl	8003f88 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000220 	.word	0x20000220

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f950 	bl	8004558 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d017      	beq.n	80012ee <MRT_LSM6DSR_getTemperature+0x52>
		//Read temperature data
		memset(lsm_data_raw_temperature, 0x00, sizeof(int16_t));
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	2202      	movs	r2, #2
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c fa0f 	bl	800d6ec <memset>
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f959 	bl	800458a <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fe82 	bl	8003fe8 <lsm6dsr_from_lsb_to_celsius>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000022e 	.word	0x2000022e

080012fc <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	1d3c      	adds	r4, r7, #4
 8001304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001308:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 800130a:	f107 0217 	add.w	r2, r7, #23
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f907 	bl	8004526 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02d      	beq.n	800137a <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800131e:	2206      	movs	r2, #6
 8001320:	2100      	movs	r1, #0
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001324:	f00c f9e2 	bl	800d6ec <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4916      	ldr	r1, [pc, #88]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f94f 	bl	80045d0 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe3d 	bl	8003fb8 <lsm6dsr_from_fs2000dps_to_mdps>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800134a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fe30 	bl	8003fb8 <lsm6dsr_from_fs2000dps_to_mdps>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800135c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001362:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800136c:	4610      	mov	r0, r2
 800136e:	f002 fe23 	bl	8003fb8 <lsm6dsr_from_fs2000dps_to_mdps>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 8001376:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000228 	.word	0x20000228

08001388 <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08d      	sub	sp, #52	; 0x34
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2216      	movs	r2, #22
 80013a4:	4948      	ldr	r1, [pc, #288]	; (80014c8 <MRT_LPS22HH_Setup+0x140>)
 80013a6:	f008 f868 	bl	800947a <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MRT_LPS22HH_Setup+0x144>)
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <MRT_LPS22HH_Setup+0x148>)
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f003 fbbe 	bl	8004b38 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4943      	ldr	r1, [pc, #268]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd5c 	bl	8003e86 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2216      	movs	r2, #22
 80013d8:	493f      	ldr	r1, [pc, #252]	; (80014d8 <MRT_LPS22HH_Setup+0x150>)
 80013da:	f008 f84e 	bl	800947a <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bb3      	cmp	r3, #179	; 0xb3
 80013e4:	d031      	beq.n	800144a <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2208      	movs	r2, #8
 80013f0:	493a      	ldr	r1, [pc, #232]	; (80014dc <MRT_LPS22HH_Setup+0x154>)
 80013f2:	f008 f842 	bl	800947a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2210      	movs	r2, #16
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <MRT_LPS22HH_Setup+0x158>)
 8001402:	f008 f83a 	bl	800947a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <MRT_LPS22HH_Setup+0x15c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f00d f95a 	bl	800e6cc <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fee5 	bl	80001f0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0114 	add.w	r1, r7, #20
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4620      	mov	r0, r4
 8001434:	f008 f821 	bl	800947a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2216      	movs	r2, #22
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <MRT_LPS22HH_Setup+0x160>)
 8001444:	f008 f819 	bl	800947a <HAL_UART_Transmit>
		  while(1);
 8001448:	e7fe      	b.n	8001448 <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	2204      	movs	r2, #4
 8001454:	4925      	ldr	r1, [pc, #148]	; (80014ec <MRT_LPS22HH_Setup+0x164>)
 8001456:	f008 f810 	bl	800947a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fd21 	bl	8003ea8 <lps22hh_reset_set>

	  HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146a:	f003 fb65 	bl	8004b38 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fd3d 	bl	8003ef4 <lps22hh_reset_get>
	  } while (lps_rst);
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f5      	bne.n	800146e <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fc23 	bl	8003cd4 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2115      	movs	r1, #21
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc43 	bl	8003d20 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2218      	movs	r2, #24
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MRT_LPS22HH_Setup+0x16c>)
 80014a6:	f007 ffe8 	bl	800947a <HAL_UART_Transmit>

	  return lps_ctx;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	461c      	mov	r4, r3
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	3734      	adds	r7, #52	; 0x34
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20004eec 	.word	0x20004eec
 80014c8:	080126e0 	.word	0x080126e0
 80014cc:	080015b9 	.word	0x080015b9
 80014d0:	080015f3 	.word	0x080015f3
 80014d4:	2000023a 	.word	0x2000023a
 80014d8:	08012668 	.word	0x08012668
 80014dc:	08012680 	.word	0x08012680
 80014e0:	0801268c 	.word	0x0801268c
 80014e4:	080126a0 	.word	0x080126a0
 80014e8:	080126a8 	.word	0x080126a8
 80014ec:	080126c0 	.word	0x080126c0
 80014f0:	2000023b 	.word	0x2000023b
 80014f4:	080126f8 	.word	0x080126f8

080014f8 <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	1d3c      	adds	r4, r7, #4
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001504:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001506:	f107 0214 	add.w	r2, r7, #20
 800150a:	1d38      	adds	r0, r7, #4
 800150c:	2301      	movs	r3, #1
 800150e:	2127      	movs	r1, #39	; 0x27
 8001510:	f002 fb7e 	bl	8003c10 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <MRT_LPS22HH_getPressure+0x54>
	//if (reg) {
	  memset(data_raw_pressure, 0x00, sizeof(uint32_t));
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2204      	movs	r2, #4
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00c f8df 	bl	800d6ec <memset>
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fc5b 	bl	8003dee <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fb97 	bl	8003c70 <lps22hh_from_lsb_to_hpa>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	20000234 	.word	0x20000234

08001558 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	1d3c      	adds	r4, r7, #4
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001564:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001566:	f107 0217 	add.w	r2, r7, #23
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc24 	bl	8003dbc <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d017      	beq.n	80015aa <MRT_LPS22HH_getTemperature+0x52>
	  memset(lps_data_raw_temperature, 0x00, sizeof(int16_t));
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	2202      	movs	r2, #2
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00c f8b1 	bl	800d6ec <memset>
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fc56 	bl	8003e40 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fb80 	bl	8003ca0 <lps22hh_from_lsb_to_celsius>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000238 	.word	0x20000238

080015b8 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	21b9      	movs	r1, #185	; 0xb9
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f004 f974 	bl	80058d0 <HAL_I2C_Mem_Write>
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af04      	add	r7, sp, #16
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	4613      	mov	r3, r2
 8001604:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	21b9      	movs	r1, #185	; 0xb9
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f004 fa51 	bl	8005ac4 <HAL_I2C_Mem_Read>
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b0a7      	sub	sp, #156	; 0x9c
 8001630:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f003 fa3f 	bl	8004ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f99f 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fd2f 	bl	800209c <MX_GPIO_Init>
  MX_ADC1_Init();
 800163e:	f000 f9fd 	bl	8001a3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001642:	f000 fa4d 	bl	8001ae0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001646:	f000 fa8b 	bl	8001b60 <MX_I2C2_Init>
  MX_I2C3_Init();
 800164a:	f000 fac9 	bl	8001be0 <MX_I2C3_Init>
  MX_SPI2_Init();
 800164e:	f000 fbad 	bl	8001dac <MX_SPI2_Init>
  MX_SPI4_Init();
 8001652:	f000 fbe1 	bl	8001e18 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001656:	f000 fc15 	bl	8001e84 <MX_SPI5_Init>
  MX_TIM2_Init();
 800165a:	f000 fc49 	bl	8001ef0 <MX_TIM2_Init>
  MX_UART8_Init();
 800165e:	f000 fc9f 	bl	8001fa0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001662:	f000 fcc7 	bl	8001ff4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001666:	f000 fcef 	bl	8002048 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800166a:	f000 fb13 	bl	8001c94 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4899      	ldr	r0, [pc, #612]	; (80018d8 <main+0x2ac>)
 8001674:	f003 ffce 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	4896      	ldr	r0, [pc, #600]	; (80018d8 <main+0x2ac>)
 800167e:	f003 ffc9 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2108      	movs	r1, #8
 8001686:	4894      	ldr	r0, [pc, #592]	; (80018d8 <main+0x2ac>)
 8001688:	f003 ffc4 	bl	8005614 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	4892      	ldr	r0, [pc, #584]	; (80018dc <main+0x2b0>)
 8001694:	f003 ffbe 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	488f      	ldr	r0, [pc, #572]	; (80018dc <main+0x2b0>)
 80016a0:	f003 ffb8 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016aa:	488c      	ldr	r0, [pc, #560]	; (80018dc <main+0x2b0>)
 80016ac:	f003 ffb2 	bl	8005614 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4889      	ldr	r0, [pc, #548]	; (80018dc <main+0x2b0>)
 80016b6:	f003 ffad 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c0:	4887      	ldr	r0, [pc, #540]	; (80018e0 <main+0x2b4>)
 80016c2:	f003 ffa7 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	4884      	ldr	r0, [pc, #528]	; (80018e0 <main+0x2b4>)
 80016ce:	f003 ffa1 	bl	8005614 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	4883      	ldr	r0, [pc, #524]	; (80018e4 <main+0x2b8>)
 80016d8:	f003 ff9c 	bl	8005614 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e2:	4880      	ldr	r0, [pc, #512]	; (80018e4 <main+0x2b8>)
 80016e4:	f003 ff96 	bl	8005614 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	487b      	ldr	r0, [pc, #492]	; (80018dc <main+0x2b0>)
 80016f0:	f003 ff90 	bl	8005614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	487b      	ldr	r0, [pc, #492]	; (80018e8 <main+0x2bc>)
 80016fa:	f003 ff8b 	bl	8005614 <HAL_GPIO_WritePin>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 80016fe:	4e7b      	ldr	r6, [pc, #492]	; (80018ec <main+0x2c0>)
 8001700:	4a7b      	ldr	r2, [pc, #492]	; (80018f0 <main+0x2c4>)
 8001702:	ab0d      	add	r3, sp, #52	; 0x34
 8001704:	4611      	mov	r1, r2
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	4618      	mov	r0, r3
 800170a:	f00b ffc7 	bl	800d69c <memcpy>
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001728:	f001 ff4a 	bl	80035c0 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 800172c:	4e6f      	ldr	r6, [pc, #444]	; (80018ec <main+0x2c0>)
 800172e:	4a71      	ldr	r2, [pc, #452]	; (80018f4 <main+0x2c8>)
 8001730:	ab0d      	add	r3, sp, #52	; 0x34
 8001732:	4611      	mov	r1, r2
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	4618      	mov	r0, r3
 8001738:	f00b ffb0 	bl	800d69c <memcpy>
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001756:	f001 ff33 	bl	80035c0 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 800175a:	4e64      	ldr	r6, [pc, #400]	; (80018ec <main+0x2c0>)
 800175c:	4a66      	ldr	r2, [pc, #408]	; (80018f8 <main+0x2cc>)
 800175e:	ab0d      	add	r3, sp, #52	; 0x34
 8001760:	4611      	mov	r1, r2
 8001762:	2254      	movs	r2, #84	; 0x54
 8001764:	4618      	mov	r0, r3
 8001766:	f00b ff99 	bl	800d69c <memcpy>
 800176a:	466d      	mov	r5, sp
 800176c:	f106 0410 	add.w	r4, r6, #16
 8001770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001784:	f001 ff1c 	bl	80035c0 <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001788:	4c5c      	ldr	r4, [pc, #368]	; (80018fc <main+0x2d0>)
 800178a:	463b      	mov	r3, r7
 800178c:	4a57      	ldr	r2, [pc, #348]	; (80018ec <main+0x2c0>)
 800178e:	495a      	ldr	r1, [pc, #360]	; (80018f8 <main+0x2cc>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc75 	bl	8001080 <MRT_LSM6DSR_Setup>
 8001796:	463b      	mov	r3, r7
 8001798:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 80017a0:	4c57      	ldr	r4, [pc, #348]	; (8001900 <main+0x2d4>)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <main+0x2c0>)
 80017a6:	4954      	ldr	r1, [pc, #336]	; (80018f8 <main+0x2cc>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fded 	bl	8001388 <MRT_LPS22HH_Setup>
 80017ae:	463b      	mov	r3, r7
 80017b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 80017b8:	494c      	ldr	r1, [pc, #304]	; (80018ec <main+0x2c0>)
 80017ba:	4852      	ldr	r0, [pc, #328]	; (8001904 <main+0x2d8>)
 80017bc:	f001 fee2 	bl	8003584 <GPS_init>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ca:	f003 ff23 	bl	8005614 <HAL_GPIO_WritePin>
	set_hspi(SRADIO_SPI);
 80017ce:	4c4e      	ldr	r4, [pc, #312]	; (8001908 <main+0x2dc>)
 80017d0:	4668      	mov	r0, sp
 80017d2:	f104 0310 	add.w	r3, r4, #16
 80017d6:	2248      	movs	r2, #72	; 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	f00b ff5f 	bl	800d69c <memcpy>
 80017de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e2:	f008 fa9d 	bl	8009d20 <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	4848      	ldr	r0, [pc, #288]	; (800190c <main+0x2e0>)
 80017ec:	f008 fa40 	bl	8009c70 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80017f0:	2108      	movs	r1, #8
 80017f2:	483a      	ldr	r0, [pc, #232]	; (80018dc <main+0x2b0>)
 80017f4:	f008 fa52 	bl	8009c9c <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80017f8:	2104      	movs	r1, #4
 80017fa:	4838      	ldr	r0, [pc, #224]	; (80018dc <main+0x2b0>)
 80017fc:	f008 fa64 	bl	8009cc8 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001800:	2110      	movs	r1, #16
 8001802:	4836      	ldr	r0, [pc, #216]	; (80018dc <main+0x2b0>)
 8001804:	f008 fa76 	bl	8009cf4 <set_DIO1_pin>
	Tx_setup();
 8001808:	f008 faa2 	bl	8009d50 <Tx_setup>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 800180c:	4e37      	ldr	r6, [pc, #220]	; (80018ec <main+0x2c0>)
 800180e:	230a      	movs	r3, #10
 8001810:	930d      	str	r3, [sp, #52]	; 0x34
 8001812:	466d      	mov	r5, sp
 8001814:	f106 0410 	add.w	r4, r6, #16
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	602b      	str	r3, [r5, #0]
 8001828:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800182c:	f003 f868 	bl	8004900 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2213      	movs	r2, #19
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <main+0x2e4>)
 8001838:	482c      	ldr	r0, [pc, #176]	; (80018ec <main+0x2c0>)
 800183a:	f007 fe1e 	bl	800947a <HAL_UART_Transmit>
   *
   * 	-A global interrupts that acts as a watchdog:
   * 		If the interrupts fails, we are doomed
   *
   */
  MX_IWDG_Init();
 800183e:	f000 fa0f 	bl	8001c60 <MX_IWDG_Init>
  HAL_IWDG_Refresh(&hiwdg);
 8001842:	4834      	ldr	r0, [pc, #208]	; (8001914 <main+0x2e8>)
 8001844:	f005 f8e0 	bl	8006a08 <HAL_IWDG_Refresh>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001848:	f008 fec0 	bl	800a5cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <main+0x2ec>)
 800184e:	f008 ffc5 	bl	800a7dc <osMutexNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <main+0x2f0>)
 8001856:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 8001858:	4831      	ldr	r0, [pc, #196]	; (8001920 <main+0x2f4>)
 800185a:	f008 ffbf 	bl	800a7dc <osMutexNew>
 800185e:	4603      	mov	r3, r0
 8001860:	4a30      	ldr	r2, [pc, #192]	; (8001924 <main+0x2f8>)
 8001862:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 8001864:	4830      	ldr	r0, [pc, #192]	; (8001928 <main+0x2fc>)
 8001866:	f008 ffb9 	bl	800a7dc <osMutexNew>
 800186a:	4603      	mov	r3, r0
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <main+0x300>)
 800186e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001870:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <main+0x304>)
 8001872:	2100      	movs	r1, #0
 8001874:	482f      	ldr	r0, [pc, #188]	; (8001934 <main+0x308>)
 8001876:	f008 fef3 	bl	800a660 <osThreadNew>
 800187a:	4603      	mov	r3, r0
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <main+0x30c>)
 800187e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <main+0x310>)
 8001882:	2100      	movs	r1, #0
 8001884:	482e      	ldr	r0, [pc, #184]	; (8001940 <main+0x314>)
 8001886:	f008 feeb 	bl	800a660 <osThreadNew>
 800188a:	4603      	mov	r3, r0
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <main+0x318>)
 800188e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001890:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <main+0x31c>)
 8001892:	2100      	movs	r1, #0
 8001894:	482d      	ldr	r0, [pc, #180]	; (800194c <main+0x320>)
 8001896:	f008 fee3 	bl	800a660 <osThreadNew>
 800189a:	4603      	mov	r3, r0
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <main+0x324>)
 800189e:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018a0:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <main+0x328>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <main+0x32c>)
 80018a6:	f008 fedb 	bl	800a660 <osThreadNew>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <main+0x330>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <main+0x334>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	482b      	ldr	r0, [pc, #172]	; (8001964 <main+0x338>)
 80018b6:	f008 fed3 	bl	800a660 <osThreadNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <main+0x33c>)
 80018be:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <main+0x340>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	482a      	ldr	r0, [pc, #168]	; (8001970 <main+0x344>)
 80018c6:	f008 fecb 	bl	800a660 <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a29      	ldr	r2, [pc, #164]	; (8001974 <main+0x348>)
 80018ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d0:	f008 fea0 	bl	800a614 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <main+0x2a8>
 80018d6:	bf00      	nop
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	20005470 	.word	0x20005470
 80018f0:	20005058 	.word	0x20005058
 80018f4:	200050b8 	.word	0x200050b8
 80018f8:	20004ef0 	.word	0x20004ef0
 80018fc:	20005558 	.word	0x20005558
 8001900:	2000554c 	.word	0x2000554c
 8001904:	200054b4 	.word	0x200054b4
 8001908:	20004f44 	.word	0x20004f44
 800190c:	40020400 	.word	0x40020400
 8001910:	08012778 	.word	0x08012778
 8001914:	200050ac 	.word	0x200050ac
 8001918:	08012b2c 	.word	0x08012b2c
 800191c:	20005374 	.word	0x20005374
 8001920:	08012b3c 	.word	0x08012b3c
 8001924:	20005578 	.word	0x20005578
 8001928:	08012b4c 	.word	0x08012b4c
 800192c:	200053f0 	.word	0x200053f0
 8001930:	08012a54 	.word	0x08012a54
 8001934:	080023d9 	.word	0x080023d9
 8001938:	2000511c 	.word	0x2000511c
 800193c:	08012a78 	.word	0x08012a78
 8001940:	080023e5 	.word	0x080023e5
 8001944:	20005468 	.word	0x20005468
 8001948:	08012a9c 	.word	0x08012a9c
 800194c:	080023f5 	.word	0x080023f5
 8001950:	2000546c 	.word	0x2000546c
 8001954:	08012ac0 	.word	0x08012ac0
 8001958:	08002639 	.word	0x08002639
 800195c:	20005548 	.word	0x20005548
 8001960:	08012ae4 	.word	0x08012ae4
 8001964:	080026e1 	.word	0x080026e1
 8001968:	20005564 	.word	0x20005564
 800196c:	08012b08 	.word	0x08012b08
 8001970:	080026ed 	.word	0x080026ed
 8001974:	200053f8 	.word	0x200053f8

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00b feb0 	bl	800d6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <SystemClock_Config+0xbc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <SystemClock_Config+0xc0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <SystemClock_Config+0xc0>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <SystemClock_Config+0xc0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d8:	2309      	movs	r3, #9
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 f82e 	bl	8006a50 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80019fa:	f000 fe91 	bl	8002720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fa90 	bl	8006f40 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a26:	f000 fe7b 	bl	8002720 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x9c>)
 8001a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <MX_ADC1_Init+0xa0>)
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a9c:	f003 f870 	bl	8004b80 <HAL_ADC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 fe3b 	bl	8002720 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001abc:	f003 f8a4 	bl	8004c08 <HAL_ADC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 fe2b 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20005124 	.word	0x20005124
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	0f000001 	.word	0x0f000001

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_I2C1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x7c>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b1e:	f003 fd93 	bl	8005648 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 fdfa 	bl	8002720 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b30:	f004 fead 	bl	800688e <HAL_I2CEx_ConfigAnalogFilter>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3a:	f000 fdf1 	bl	8002720 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b42:	f004 fee0 	bl	8006906 <HAL_I2CEx_ConfigDigitalFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f000 fde8 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20005058 	.word	0x20005058
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_I2C2_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <MX_I2C2_Init+0x7c>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b9e:	f003 fd53 	bl	8005648 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fdba 	bl	8002720 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bb0:	f004 fe6d 	bl	800688e <HAL_I2CEx_ConfigAnalogFilter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f000 fdb1 	bl	8002720 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bc2:	f004 fea0 	bl	8006906 <HAL_I2CEx_ConfigDigitalFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 fda8 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200050b8 	.word	0x200050b8
 8001bd8:	40005800 	.word	0x40005800
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_I2C3_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <MX_I2C3_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c1e:	f003 fd13 	bl	8005648 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 fd7a 	bl	8002720 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c30:	f004 fe2d 	bl	800688e <HAL_I2CEx_ConfigAnalogFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f000 fd71 	bl	8002720 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c42:	f004 fe60 	bl	8006906 <HAL_I2CEx_ConfigDigitalFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c4c:	f000 fd68 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20004ef0 	.word	0x20004ef0
 8001c58:	40005c00 	.word	0x40005c00
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <MX_IWDG_Init+0x30>)
 8001c68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c72:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c76:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c7a:	f004 fe83 	bl	8006984 <HAL_IWDG_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c84:	f000 fd4c 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200050ac 	.word	0x200050ac
 8001c90:	40003000 	.word	0x40003000

08001c94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2228      	movs	r2, #40	; 0x28
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00b fd19 	bl	800d6ec <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <MX_RTC_Init+0x114>)
 8001cbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc8:	227f      	movs	r2, #127	; 0x7f
 8001cca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce4:	482f      	ldr	r0, [pc, #188]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce6:	f005 fd15 	bl	8007714 <HAL_RTC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cf0:	f000 fd16 	bl	8002720 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d18:	f005 fd8d 	bl	8007836 <HAL_RTC_SetTime>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d22:	f000 fcfd 	bl	8002720 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d48:	f005 fe32 	bl	80079b0 <HAL_RTC_SetDate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d52:	f000 fce5 	bl	8002720 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d8e:	f005 feb7 	bl	8007b00 <HAL_RTC_SetAlarm_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d98:	f000 fcc2 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3740      	adds	r7, #64	; 0x40
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200053d0 	.word	0x200053d0
 8001da8:	40002800 	.word	0x40002800

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_SPI2_Init+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df8:	220a      	movs	r2, #10
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dfe:	f006 f8d1 	bl	8007fa4 <HAL_SPI_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e08:	f000 fc8a 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20004f44 	.word	0x20004f44
 8001e14:	40003800 	.word	0x40003800

08001e18 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_SPI4_Init+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e64:	220a      	movs	r2, #10
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e6a:	f006 f89b 	bl	8007fa4 <HAL_SPI_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e74:	f000 fc54 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20005378 	.word	0x20005378
 8001e80:	40013400 	.word	0x40013400

08001e84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI5_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed6:	f006 f865 	bl	8007fa4 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fc1e 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20004fa4 	.word	0x20004fa4
 8001eec:	40015000 	.word	0x40015000

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3a:	4818      	ldr	r0, [pc, #96]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f3c:	f006 fd2e 	bl	800899c <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f46:	f000 fbeb 	bl	8002720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f5a:	f007 f9b1 	bl	80092c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f64:	f000 fbdc 	bl	8002720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f80:	f006 fe64 	bl	8008c4c <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f8a:	f000 fbc9 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f90:	f000 fe1c 	bl	8002bcc <HAL_TIM_MspPostInit>

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20005500 	.word	0x20005500

08001fa0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_UART8_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd8:	f007 fa02 	bl	80093e0 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f000 fb9d 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20005470 	.word	0x20005470
 8001ff0:	40007c00 	.word	0x40007c00

08001ff4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_USART3_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800202c:	f007 f9d8 	bl	80093e0 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002036:	f000 fb73 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20005000 	.word	0x20005000
 8002044:	40004800 	.word	0x40004800

08002048 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART6_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002080:	f007 f9ae 	bl	80093e0 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f000 fb49 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200054b4 	.word	0x200054b4
 8002098:	40011400 	.word	0x40011400

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4bb5      	ldr	r3, [pc, #724]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4ab4      	ldr	r2, [pc, #720]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4bb2      	ldr	r3, [pc, #712]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	4bae      	ldr	r3, [pc, #696]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4aad      	ldr	r2, [pc, #692]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4bab      	ldr	r3, [pc, #684]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4ba7      	ldr	r3, [pc, #668]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4aa6      	ldr	r2, [pc, #664]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4ba4      	ldr	r3, [pc, #656]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4ba0      	ldr	r3, [pc, #640]	; (800238c <MX_GPIO_Init+0x2f0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a9f      	ldr	r2, [pc, #636]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b9d      	ldr	r3, [pc, #628]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b99      	ldr	r3, [pc, #612]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a98      	ldr	r2, [pc, #608]	; (800238c <MX_GPIO_Init+0x2f0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b96      	ldr	r3, [pc, #600]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a91      	ldr	r2, [pc, #580]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a8a      	ldr	r2, [pc, #552]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <MX_GPIO_Init+0x2f0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b84      	ldr	r3, [pc, #528]	; (800238c <MX_GPIO_Init+0x2f0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a83      	ldr	r2, [pc, #524]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	f248 4184 	movw	r1, #33924	; 0x8484
 8002198:	487d      	ldr	r0, [pc, #500]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800219a:	f003 fa3b 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021a4:	487b      	ldr	r0, [pc, #492]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80021a6:	f003 fa35 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021b0:	4879      	ldr	r0, [pc, #484]	; (8002398 <MX_GPIO_Init+0x2fc>)
 80021b2:	f003 fa2f 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2108      	movs	r1, #8
 80021ba:	4878      	ldr	r0, [pc, #480]	; (800239c <MX_GPIO_Init+0x300>)
 80021bc:	f003 fa2a 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80021c0:	2200      	movs	r2, #0
 80021c2:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80021c6:	4876      	ldr	r0, [pc, #472]	; (80023a0 <MX_GPIO_Init+0x304>)
 80021c8:	f003 fa24 	bl	8005614 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	4874      	ldr	r0, [pc, #464]	; (80023a4 <MX_GPIO_Init+0x308>)
 80021d4:	f003 fa1e 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021d8:	2200      	movs	r2, #0
 80021da:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021de:	4872      	ldr	r0, [pc, #456]	; (80023a8 <MX_GPIO_Init+0x30c>)
 80021e0:	f003 fa18 	bl	8005614 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021e4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4864      	ldr	r0, [pc, #400]	; (8002390 <MX_GPIO_Init+0x2f4>)
 80021fe:	f003 f845 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002202:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	485e      	ldr	r0, [pc, #376]	; (8002394 <MX_GPIO_Init+0x2f8>)
 800221c:	f003 f836 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002220:	2301      	movs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002224:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	4858      	ldr	r0, [pc, #352]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002236:	f003 f829 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800223a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4851      	ldr	r0, [pc, #324]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002254:	f003 f81a 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002258:	2308      	movs	r3, #8
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <MX_GPIO_Init+0x300>)
 8002270:	f003 f80c 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002274:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_GPIO_Init+0x2fc>)
 800228a:	f002 ffff 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800228e:	2302      	movs	r3, #2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	4619      	mov	r1, r3
 80022a0:	4840      	ldr	r0, [pc, #256]	; (80023a4 <MX_GPIO_Init+0x308>)
 80022a2:	f002 fff3 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4836      	ldr	r0, [pc, #216]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80022bc:	f002 ffe6 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80022c0:	f242 4301 	movw	r3, #9217	; 0x2401
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4832      	ldr	r0, [pc, #200]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022d6:	f002 ffd9 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80022da:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	4619      	mov	r1, r3
 80022f2:	482b      	ldr	r0, [pc, #172]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022f4:	f002 ffca 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	4820      	ldr	r0, [pc, #128]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800230e:	f002 ffbd 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	481e      	ldr	r0, [pc, #120]	; (80023a4 <MX_GPIO_Init+0x308>)
 800232c:	f002 ffae 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002330:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4817      	ldr	r0, [pc, #92]	; (80023a8 <MX_GPIO_Init+0x30c>)
 800234a:	f002 ff9f 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <MX_GPIO_Init+0x30c>)
 8002364:	f002 ff92 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002368:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <MX_GPIO_Init+0x304>)
 8002380:	f002 ff84 	bl	800528c <HAL_GPIO_Init>

}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020c00 	.word	0x40020c00

080023ac <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_USART, Msg, strlen(Msg), HAL_Delay);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7fd ff1b 	bl	80001f0 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <XTend_Transmit+0x24>)
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4804      	ldr	r0, [pc, #16]	; (80023d4 <XTend_Transmit+0x28>)
 80023c4:	f007 f859 	bl	800947a <HAL_UART_Transmit>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	08004b39 	.word	0x08004b39
 80023d4:	20005000 	.word	0x20005000

080023d8 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	osThreadExit();
 80023e0:	f008 f9db 	bl	800a79a <osThreadExit>

080023e4 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0c2      	sub	sp, #264	; 0x108
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80023ee:	f008 f9d4 	bl	800a79a <osThreadExit>
	...

080023f4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0b0      	sub	sp, #192	; 0xc0
 80023fa:	af1a      	add	r7, sp, #104	; 0x68
 80023fc:	6578      	str	r0, [r7, #84]	; 0x54
  /* USER CODE BEGIN StartTelemetry2 */

	//osThreadExit();

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80023fe:	f008 f9c1 	bl	800a784 <osThreadGetId>
 8002402:	4603      	mov	r3, r0
 8002404:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <StartTelemetry2+0x1ec>)
 8002406:	6093      	str	r3, [r2, #8]

	osDelay(1000);
 8002408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240c:	f008 f9cb 	bl	800a7a6 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  //Poll sensors data in other thread

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2108      	movs	r1, #8
 8002414:	4873      	ldr	r0, [pc, #460]	; (80025e4 <StartTelemetry2+0x1f0>)
 8002416:	f003 f8fd 	bl	8005614 <HAL_GPIO_WritePin>

	  //Updating data variables

	  //Need to verify these six to make sure they are in the right order

  	  ACCx = acceleration_mg[0];
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <StartTelemetry2+0x1f4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a73      	ldr	r2, [pc, #460]	; (80025ec <StartTelemetry2+0x1f8>)
 8002420:	6013      	str	r3, [r2, #0]
  	  ACCy = acceleration_mg[1];
 8002422:	4b71      	ldr	r3, [pc, #452]	; (80025e8 <StartTelemetry2+0x1f4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <StartTelemetry2+0x1fc>)
 8002428:	6013      	str	r3, [r2, #0]
  	  ACCz = acceleration_mg[2];
 800242a:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <StartTelemetry2+0x1f4>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a71      	ldr	r2, [pc, #452]	; (80025f4 <StartTelemetry2+0x200>)
 8002430:	6013      	str	r3, [r2, #0]
  	  GYROx = angular_rate_mdps[0];
 8002432:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <StartTelemetry2+0x204>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a71      	ldr	r2, [pc, #452]	; (80025fc <StartTelemetry2+0x208>)
 8002438:	6013      	str	r3, [r2, #0]
  	  GYROy = angular_rate_mdps[1];
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <StartTelemetry2+0x204>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a70      	ldr	r2, [pc, #448]	; (8002600 <StartTelemetry2+0x20c>)
 8002440:	6013      	str	r3, [r2, #0]
  	  GYROz = angular_rate_mdps[2];
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <StartTelemetry2+0x204>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <StartTelemetry2+0x210>)
 8002448:	6013      	str	r3, [r2, #0]
  	  PRESSURE = pressure_hPa;
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <StartTelemetry2+0x214>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6f      	ldr	r2, [pc, #444]	; (800260c <StartTelemetry2+0x218>)
 8002450:	6013      	str	r3, [r2, #0]
  	  LAT = 0.0;
 8002452:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <StartTelemetry2+0x21c>)
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
  	  LONG = 0.0;
 800245a:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <StartTelemetry2+0x220>)
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
  	  MIN = 0.0;
 8002462:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <StartTelemetry2+0x224>)
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
  	  SEC = 0.0;
 800246a:	4b6c      	ldr	r3, [pc, #432]	; (800261c <StartTelemetry2+0x228>)
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
  	  SUBSEC = 0.0;
 8002472:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <StartTelemetry2+0x22c>)
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
  	  STATE = 0.0;
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <StartTelemetry2+0x230>)
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
  	  CONT = 0.0;
 8002482:	4b69      	ldr	r3, [pc, #420]	; (8002628 <StartTelemetry2+0x234>)
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
	  */


	  //TODO maybe add variable for GPS time and both temperature values?

  	  memset (xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	2100      	movs	r1, #0
 8002490:	4866      	ldr	r0, [pc, #408]	; (800262c <StartTelemetry2+0x238>)
 8002492:	f00b f92b 	bl	800d6ec <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%i,%i,%i,%i,%i,E", ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT);
 8002496:	4b55      	ldr	r3, [pc, #340]	; (80025ec <StartTelemetry2+0x1f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f864 	bl	8000568 <__aeabi_f2d>
 80024a0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 80024a4:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <StartTelemetry2+0x1fc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f85d 	bl	8000568 <__aeabi_f2d>
 80024ae:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <StartTelemetry2+0x200>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f856 	bl	8000568 <__aeabi_f2d>
 80024bc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80024c0:	4b4e      	ldr	r3, [pc, #312]	; (80025fc <StartTelemetry2+0x208>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f84f 	bl	8000568 <__aeabi_f2d>
 80024ca:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80024ce:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <StartTelemetry2+0x20c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f848 	bl	8000568 <__aeabi_f2d>
 80024d8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <StartTelemetry2+0x210>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f841 	bl	8000568 <__aeabi_f2d>
 80024e6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80024ea:	4b48      	ldr	r3, [pc, #288]	; (800260c <StartTelemetry2+0x218>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f83a 	bl	8000568 <__aeabi_f2d>
 80024f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <StartTelemetry2+0x21c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f833 	bl	8000568 <__aeabi_f2d>
 8002502:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <StartTelemetry2+0x220>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f82c 	bl	8000568 <__aeabi_f2d>
 8002510:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <StartTelemetry2+0x224>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f825 	bl	8000568 <__aeabi_f2d>
 800251e:	e9c7 0100 	strd	r0, r1, [r7]
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <StartTelemetry2+0x228>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f81e 	bl	8000568 <__aeabi_f2d>
 800252c:	4682      	mov	sl, r0
 800252e:	468b      	mov	fp, r1
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <StartTelemetry2+0x22c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f817 	bl	8000568 <__aeabi_f2d>
 800253a:	4680      	mov	r8, r0
 800253c:	4689      	mov	r9, r1
 800253e:	4b39      	ldr	r3, [pc, #228]	; (8002624 <StartTelemetry2+0x230>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f810 	bl	8000568 <__aeabi_f2d>
 8002548:	4604      	mov	r4, r0
 800254a:	460d      	mov	r5, r1
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <StartTelemetry2+0x234>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f809 	bl	8000568 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800255e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8002562:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8002566:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800256a:	ed97 7b00 	vldr	d7, [r7]
 800256e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002572:	ed97 7b02 	vldr	d7, [r7, #8]
 8002576:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800257a:	ed97 7b04 	vldr	d7, [r7, #16]
 800257e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002582:	ed97 7b06 	vldr	d7, [r7, #24]
 8002586:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800258a:	ed97 7b08 	vldr	d7, [r7, #32]
 800258e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002592:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002596:	ed8d 7b06 	vstr	d7, [sp, #24]
 800259a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800259e:	ed8d 7b04 	vstr	d7, [sp, #16]
 80025a2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80025a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025aa:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80025ae:	ed8d 7b00 	vstr	d7, [sp]
 80025b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025b6:	491e      	ldr	r1, [pc, #120]	; (8002630 <StartTelemetry2+0x23c>)
 80025b8:	481c      	ldr	r0, [pc, #112]	; (800262c <StartTelemetry2+0x238>)
 80025ba:	f00c f887 	bl	800e6cc <siprintf>

	  //Xtend send
	  XTend_Transmit(xtend_tx_buffer);
 80025be:	481b      	ldr	r0, [pc, #108]	; (800262c <StartTelemetry2+0x238>)
 80025c0:	f7ff fef4 	bl	80023ac <XTend_Transmit>

	  //Iridium send
	  //MRT_Static_Iridium_getTime(); TODO doesn't cost anything
	  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2108      	movs	r1, #8
 80025c8:	4806      	ldr	r0, [pc, #24]	; (80025e4 <StartTelemetry2+0x1f0>)
 80025ca:	f003 f823 	bl	8005614 <HAL_GPIO_WritePin>

	  HAL_IWDG_Refresh(&hiwdg);
 80025ce:	4819      	ldr	r0, [pc, #100]	; (8002634 <StartTelemetry2+0x240>)
 80025d0:	f004 fa1a 	bl	8006a08 <HAL_IWDG_Refresh>


    //osDelay(1000/SEND_FREQ);
    osDelay(1000);
 80025d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d8:	f008 f8e5 	bl	800a7a6 <osDelay>
  {
 80025dc:	e718      	b.n	8002410 <StartTelemetry2+0x1c>
 80025de:	bf00      	nop
 80025e0:	20005044 	.word	0x20005044
 80025e4:	40020800 	.word	0x40020800
 80025e8:	20000244 	.word	0x20000244
 80025ec:	20005464 	.word	0x20005464
 80025f0:	200054f8 	.word	0x200054f8
 80025f4:	20005120 	.word	0x20005120
 80025f8:	20000250 	.word	0x20000250
 80025fc:	20005114 	.word	0x20005114
 8002600:	2000510c 	.word	0x2000510c
 8002604:	2000516c 	.word	0x2000516c
 8002608:	2000023c 	.word	0x2000023c
 800260c:	20005110 	.word	0x20005110
 8002610:	20005574 	.word	0x20005574
 8002614:	20004ffc 	.word	0x20004ffc
 8002618:	20005570 	.word	0x20005570
 800261c:	20005118 	.word	0x20005118
 8002620:	2000556c 	.word	0x2000556c
 8002624:	20005370 	.word	0x20005370
 8002628:	20005568 	.word	0x20005568
 800262c:	20005170 	.word	0x20005170
 8002630:	0801278c 	.word	0x0801278c
 8002634:	200050ac 	.word	0x200050ac

08002638 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002640:	f008 f8a0 	bl	800a784 <osThreadGetId>
 8002644:	4603      	mov	r3, r0
 8002646:	4a19      	ldr	r2, [pc, #100]	; (80026ac <StartSensors3+0x74>)
 8002648:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800264a:	2201      	movs	r2, #1
 800264c:	2102      	movs	r1, #2
 800264e:	4818      	ldr	r0, [pc, #96]	; (80026b0 <StartSensors3+0x78>)
 8002650:	f002 ffe0 	bl	8005614 <HAL_GPIO_WritePin>



	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 8002654:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <StartSensors3+0x7c>)
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <StartSensors3+0x80>)
 8002658:	4818      	ldr	r0, [pc, #96]	; (80026bc <StartSensors3+0x84>)
 800265a:	f000 fd31 	bl	80030c0 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <StartSensors3+0x88>)
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <StartSensors3+0x8c>)
 8002662:	ca07      	ldmia	r2, {r0, r1, r2}
 8002664:	f7fe fdd4 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <StartSensors3+0x88>)
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <StartSensors3+0x90>)
 800266c:	ca07      	ldmia	r2, {r0, r1, r2}
 800266e:	f7fe fe45 	bl	80012fc <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <StartSensors3+0x88>)
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <StartSensors3+0x94>)
 8002676:	ca07      	ldmia	r2, {r0, r1, r2}
 8002678:	f7fe fe10 	bl	800129c <MRT_LSM6DSR_getTemperature>


	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <StartSensors3+0x98>)
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <StartSensors3+0x9c>)
 8002680:	ca07      	ldmia	r2, {r0, r1, r2}
 8002682:	f7fe ff39 	bl	80014f8 <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <StartSensors3+0x98>)
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <StartSensors3+0xa0>)
 800268a:	ca07      	ldmia	r2, {r0, r1, r2}
 800268c:	f7fe ff64 	bl	8001558 <MRT_LPS22HH_getTemperature>


	  //Thermocouple (don't have it)


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2102      	movs	r1, #2
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <StartSensors3+0x78>)
 8002696:	f002 ffbd 	bl	8005614 <HAL_GPIO_WritePin>

	  HAL_IWDG_Refresh(&hiwdg);
 800269a:	4810      	ldr	r0, [pc, #64]	; (80026dc <StartSensors3+0xa4>)
 800269c:	f004 f9b4 	bl	8006a08 <HAL_IWDG_Refresh>

	  osDelay(1000);
 80026a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a4:	f008 f87f 	bl	800a7a6 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80026a8:	e7cf      	b.n	800264a <StartSensors3+0x12>
 80026aa:	bf00      	nop
 80026ac:	20005044 	.word	0x20005044
 80026b0:	40020800 	.word	0x40020800
 80026b4:	20005460 	.word	0x20005460
 80026b8:	200053f4 	.word	0x200053f4
 80026bc:	200054fc 	.word	0x200054fc
 80026c0:	20005558 	.word	0x20005558
 80026c4:	20000244 	.word	0x20000244
 80026c8:	20000250 	.word	0x20000250
 80026cc:	2000025c 	.word	0x2000025c
 80026d0:	2000554c 	.word	0x2000554c
 80026d4:	2000023c 	.word	0x2000023c
 80026d8:	20000240 	.word	0x20000240
 80026dc:	200050ac 	.word	0x200050ac

080026e0 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 80026e8:	f008 f857 	bl	800a79a <osThreadExit>

080026ec <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0c2      	sub	sp, #264	; 0x108
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 80026f6:	f008 f850 	bl	800a79a <osThreadExit>
	...

080026fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800270e:	f002 f9f3 	bl	8004af8 <HAL_IncTick>
	  HAL_Delay(200);
  }
  */

  /* USER CODE END Callback 1 */
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40001000 	.word	0x40001000

08002720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_MspInit+0x54>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_MspInit+0x54>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_MspInit+0x54>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_MspInit+0x54>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_MspInit+0x54>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_MspInit+0x54>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	210f      	movs	r1, #15
 8002772:	f06f 0001 	mvn.w	r0, #1
 8002776:	f002 fd51 	bl	800521c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_ADC_MspInit+0x7c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d127      	bne.n	80027fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_ADC_MspInit+0x80>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e6:	2303      	movs	r3, #3
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_ADC_MspInit+0x84>)
 80027f6:	f002 fd49 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40012000 	.word	0x40012000
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000

08002810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08e      	sub	sp, #56	; 0x38
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5c      	ldr	r2, [pc, #368]	; (80029a0 <HAL_I2C_MspInit+0x190>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d12d      	bne.n	800288e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a5a      	ldr	r2, [pc, #360]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b58      	ldr	r3, [pc, #352]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800284e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002854:	2312      	movs	r3, #18
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002858:	2301      	movs	r3, #1
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002860:	2304      	movs	r3, #4
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002868:	4619      	mov	r1, r3
 800286a:	484f      	ldr	r0, [pc, #316]	; (80029a8 <HAL_I2C_MspInit+0x198>)
 800286c:	f002 fd0e 	bl	800528c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 800287a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287e:	6413      	str	r3, [r2, #64]	; 0x40
 8002880:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800288c:	e083      	b.n	8002996 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_I2C_MspInit+0x19c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12d      	bne.n	80028f4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ba:	2312      	movs	r3, #18
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028c6:	2304      	movs	r3, #4
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ce:	4619      	mov	r1, r3
 80028d0:	4835      	ldr	r0, [pc, #212]	; (80029a8 <HAL_I2C_MspInit+0x198>)
 80028d2:	f002 fcdb 	bl	800528c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 80028e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
}
 80028f2:	e050      	b.n	8002996 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a2d      	ldr	r2, [pc, #180]	; (80029b0 <HAL_I2C_MspInit+0x1a0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d14b      	bne.n	8002996 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293c:	2312      	movs	r3, #18
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002948:	2304      	movs	r3, #4
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4818      	ldr	r0, [pc, #96]	; (80029b4 <HAL_I2C_MspInit+0x1a4>)
 8002954:	f002 fc9a 	bl	800528c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295e:	2312      	movs	r3, #18
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800296a:	2304      	movs	r3, #4
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <HAL_I2C_MspInit+0x1a8>)
 8002976:	f002 fc89 	bl	800528c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 8002984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_I2C_MspInit+0x194>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
}
 8002996:	bf00      	nop
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40005400 	.word	0x40005400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40005800 	.word	0x40005800
 80029b0:	40005c00 	.word	0x40005c00
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08e      	sub	sp, #56	; 0x38
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	2230      	movs	r2, #48	; 0x30
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fe8d 	bl	800d6ec <memset>
  if(hrtc->Instance==RTC)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_RTC_MspInit+0x5c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d119      	bne.n	8002a10 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029dc:	2320      	movs	r3, #32
 80029de:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fcd4 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80029f6:	f7ff fe93 	bl	8002720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RTC_MspInit+0x60>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2105      	movs	r1, #5
 8002a04:	2029      	movs	r0, #41	; 0x29
 8002a06:	f002 fc09 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a0a:	2029      	movs	r0, #41	; 0x29
 8002a0c:	f002 fc22 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a10:	bf00      	nop
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40002800 	.word	0x40002800
 8002a1c:	42470e3c 	.word	0x42470e3c

08002a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_SPI_MspInit+0x150>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d12d      	bne.n	8002a9e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	4619      	mov	r1, r3
 8002a96:	4838      	ldr	r0, [pc, #224]	; (8002b78 <HAL_SPI_MspInit+0x158>)
 8002a98:	f002 fbf8 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002a9c:	e064      	b.n	8002b68 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a36      	ldr	r2, [pc, #216]	; (8002b7c <HAL_SPI_MspInit+0x15c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d12d      	bne.n	8002b04 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002ae0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002af2:	2305      	movs	r3, #5
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	4820      	ldr	r0, [pc, #128]	; (8002b80 <HAL_SPI_MspInit+0x160>)
 8002afe:	f002 fbc5 	bl	800528c <HAL_GPIO_Init>
}
 8002b02:	e031      	b.n	8002b68 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_SPI_MspInit+0x164>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12c      	bne.n	8002b68 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_SPI_MspInit+0x154>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b46:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b58:	2305      	movs	r3, #5
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <HAL_SPI_MspInit+0x168>)
 8002b64:	f002 fb92 	bl	800528c <HAL_GPIO_Init>
}
 8002b68:	bf00      	nop
 8002b6a:	3738      	adds	r7, #56	; 0x38
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40003800 	.word	0x40003800
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40013400 	.word	0x40013400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40015000 	.word	0x40015000
 8002b88:	40021400 	.word	0x40021400

08002b8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d10d      	bne.n	8002bba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d11d      	bne.n	8002c2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_TIM_MspPostInit+0x68>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_TIM_MspPostInit+0x68>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_TIM_MspPostInit+0x68>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4619      	mov	r1, r3
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <HAL_TIM_MspPostInit+0x6c>)
 8002c26:	f002 fb31 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c2a:	bf00      	nop
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	; 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4b      	ldr	r2, [pc, #300]	; (8002d88 <HAL_UART_MspInit+0x14c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12c      	bne.n	8002cb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a42      	ldr	r2, [pc, #264]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002c96:	2303      	movs	r3, #3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4837      	ldr	r0, [pc, #220]	; (8002d90 <HAL_UART_MspInit+0x154>)
 8002cb2:	f002 faeb 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cb6:	e063      	b.n	8002d80 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <HAL_UART_MspInit+0x158>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12d      	bne.n	8002d1e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	4619      	mov	r1, r3
 8002d16:	4820      	ldr	r0, [pc, #128]	; (8002d98 <HAL_UART_MspInit+0x15c>)
 8002d18:	f002 fab8 	bl	800528c <HAL_GPIO_Init>
}
 8002d1c:	e030      	b.n	8002d80 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_UART_MspInit+0x160>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d12b      	bne.n	8002d80 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	6453      	str	r3, [r2, #68]	; 0x44
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_UART_MspInit+0x150>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d70:	2308      	movs	r3, #8
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4809      	ldr	r0, [pc, #36]	; (8002da0 <HAL_UART_MspInit+0x164>)
 8002d7c:	f002 fa86 	bl	800528c <HAL_GPIO_Init>
}
 8002d80:	bf00      	nop
 8002d82:	3738      	adds	r7, #56	; 0x38
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40007c00 	.word	0x40007c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40004800 	.word	0x40004800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	40020800 	.word	0x40020800

08002da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	2036      	movs	r0, #54	; 0x36
 8002dba:	f002 fa2f 	bl	800521c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dbe:	2036      	movs	r0, #54	; 0x36
 8002dc0:	f002 fa48 	bl	8005254 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_InitTick+0xa4>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_InitTick+0xa4>)
 8002dce:	f043 0310 	orr.w	r3, r3, #16
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_InitTick+0xa4>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de0:	f107 0210 	add.w	r2, r7, #16
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 faa2 	bl	8007334 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002df0:	f004 fa78 	bl	80072e4 <HAL_RCC_GetPCLK1Freq>
 8002df4:	4603      	mov	r3, r0
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <HAL_InitTick+0xa8>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	3b01      	subs	r3, #1
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_InitTick+0xac>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_InitTick+0xb0>)
 8002e0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_InitTick+0xac>)
 8002e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_InitTick+0xac>)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_InitTick+0xac>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_InitTick+0xac>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <HAL_InitTick+0xac>)
 8002e2a:	f005 fced 	bl	8008808 <HAL_TIM_Base_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <HAL_InitTick+0xac>)
 8002e36:	f005 fd41 	bl	80088bc <HAL_TIM_Base_Start_IT>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	2000557c 	.word	0x2000557c
 8002e54:	40001000 	.word	0x40001000

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <HardFault_Handler+0x4>

08002e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <MemManage_Handler+0x4>

08002e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e76:	e7fe      	b.n	8002e76 <BusFault_Handler+0x4>

08002e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e7c:	e7fe      	b.n	8002e7c <UsageFault_Handler+0x4>

08002e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <RTC_Alarm_IRQHandler+0x10>)
 8002e92:	f004 ff6d 	bl	8007d70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200053d0 	.word	0x200053d0

08002ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TIM6_DAC_IRQHandler+0x10>)
 8002ea6:	f005 fdc8 	bl	8008a3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000557c 	.word	0x2000557c

08002eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	return 1;
 8002eb8:	2301      	movs	r3, #1
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_kill>:

int _kill(int pid, int sig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ece:	f00a fab1 	bl	800d434 <__errno>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2216      	movs	r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_exit>:

void _exit (int status)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ef6:	e7fe      	b.n	8002ef6 <_exit+0x12>

08002ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00a      	b.n	8002f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	4601      	mov	r1, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf0      	blt.n	8002f0a <_read+0x12>
	}

return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e009      	b.n	8002f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60ba      	str	r2, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf1      	blt.n	8002f44 <_write+0x12>
	}
	return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_close>:

int _close(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
	return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f92:	605a      	str	r2, [r3, #4]
	return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_isatty>:

int _isatty(int file)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f00a fa16 	bl	800d434 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20030000 	.word	0x20030000
 8003034:	00000400 	.word	0x00000400
 8003038:	20000260 	.word	0x20000260
 800303c:	20005720 	.word	0x20005720

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <SystemInit+0x28>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <SystemInit+0x28>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <SystemInit+0x28>)
 8003056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800305a:	609a      	str	r2, [r3, #8]
#endif
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800306c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003070:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003072:	e003      	b.n	800307c <LoopCopyDataInit>

08003074 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003076:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003078:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800307a:	3104      	adds	r1, #4

0800307c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003080:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003082:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003084:	d3f6      	bcc.n	8003074 <CopyDataInit>
  ldr  r2, =_sbss
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003088:	e002      	b.n	8003090 <LoopFillZerobss>

0800308a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800308a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800308c:	f842 3b04 	str.w	r3, [r2], #4

08003090 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003092:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003094:	d3f9      	bcc.n	800308a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003096:	f7ff ffd3 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309a:	f00a fac7 	bl	800d62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309e:	f7fe fac5 	bl	800162c <main>
  bx  lr    
 80030a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030a8:	0801309c 	.word	0x0801309c
  ldr  r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030b0:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80030b4:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80030b8:	20005720 	.word	0x20005720

080030bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC_IRQHandler>
	...

080030c0 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80030cc:	2364      	movs	r3, #100	; 0x64
 80030ce:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80030d8:	e073      	b.n	80031c2 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <GPS_Poll+0x118>)
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	2364      	movs	r3, #100	; 0x64
 80030e0:	2201      	movs	r2, #1
 80030e2:	493e      	ldr	r1, [pc, #248]	; (80031dc <GPS_Poll+0x11c>)
 80030e4:	f006 fa5b 	bl	800959e <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <GPS_Poll+0x11c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d00f      	beq.n	8003110 <GPS_Poll+0x50>
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <GPS_Poll+0x120>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b63      	cmp	r3, #99	; 0x63
 80030f6:	d80b      	bhi.n	8003110 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <GPS_Poll+0x120>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	b2d1      	uxtb	r1, r2
 8003100:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <GPS_Poll+0x120>)
 8003102:	7011      	strb	r1, [r2, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b35      	ldr	r3, [pc, #212]	; (80031dc <GPS_Poll+0x11c>)
 8003108:	7819      	ldrb	r1, [r3, #0]
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <GPS_Poll+0x124>)
 800310c:	5499      	strb	r1, [r3, r2]
 800310e:	e021      	b.n	8003154 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003110:	4834      	ldr	r0, [pc, #208]	; (80031e4 <GPS_Poll+0x124>)
 8003112:	f000 f86b 	bl	80031ec <GPS_validate>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 800311c:	4831      	ldr	r0, [pc, #196]	; (80031e4 <GPS_Poll+0x124>)
 800311e:	f000 f8c7 	bl	80032b0 <GPS_parse>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003128:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <GPS_Poll+0x128>)
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003130:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <GPS_Poll+0x128>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <GPS_Poll+0x128>)
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
					done = 1;
 8003140:	2301      	movs	r3, #1
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <GPS_Poll+0x120>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800314a:	2264      	movs	r2, #100	; 0x64
 800314c:	2100      	movs	r1, #0
 800314e:	4825      	ldr	r0, [pc, #148]	; (80031e4 <GPS_Poll+0x124>)
 8003150:	f00a facc 	bl	800d6ec <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <GPS_Poll+0x118>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <GPS_Poll+0x118>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <GPS_Poll+0x118>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <GPS_Poll+0x118>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <GPS_Poll+0x118>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <GPS_Poll+0x118>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <GPS_Poll+0x118>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <GPS_Poll+0x118>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80031bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031be:	3301      	adds	r3, #1
 80031c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80031c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d202      	bcs.n	80031d0 <GPS_Poll+0x110>
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d084      	beq.n	80030da <GPS_Poll+0x1a>
	}
}
 80031d0:	bf00      	nop
 80031d2:	3730      	adds	r7, #48	; 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20004f9c 	.word	0x20004f9c
 80031dc:	20000264 	.word	0x20000264
 80031e0:	20000265 	.word	0x20000265
 80031e4:	2000561c 	.word	0x2000561c
 80031e8:	200055c4 	.word	0x200055c4

080031ec <GPS_validate>:

int GPS_validate(char *nmeastr){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b24      	cmp	r3, #36	; 0x24
 8003206:	d103      	bne.n	8003210 <GPS_validate+0x24>
        i++;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800320e:	e00c      	b.n	800322a <GPS_validate+0x3e>
        return 0;
 8003210:	2300      	movs	r3, #0
 8003212:	e047      	b.n	80032a4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4053      	eors	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        i++;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <GPS_validate+0x5c>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b2a      	cmp	r3, #42	; 0x2a
 8003240:	d002      	beq.n	8003248 <GPS_validate+0x5c>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b4a      	cmp	r3, #74	; 0x4a
 8003246:	dde5      	ble.n	8003214 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b4a      	cmp	r3, #74	; 0x4a
 800324c:	dd01      	ble.n	8003252 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800324e:	2300      	movs	r3, #0
 8003250:	e028      	b.n	80032a4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d119      	bne.n	8003292 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3302      	adds	r3, #2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	490a      	ldr	r1, [pc, #40]	; (80032ac <GPS_validate+0xc0>)
 8003282:	4618      	mov	r0, r3
 8003284:	f00b fa22 	bl	800e6cc <siprintf>
    return((checkcalcstr[0] == check[0])
 8003288:	7a3a      	ldrb	r2, [r7, #8]
 800328a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800328c:	429a      	cmp	r2, r3
 800328e:	d108      	bne.n	80032a2 <GPS_validate+0xb6>
 8003290:	e001      	b.n	8003296 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003292:	2300      	movs	r3, #0
 8003294:	e006      	b.n	80032a4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003296:	7a7a      	ldrb	r2, [r7, #9]
 8003298:	7b7b      	ldrb	r3, [r7, #13]
 800329a:	429a      	cmp	r2, r3
 800329c:	d101      	bne.n	80032a2 <GPS_validate+0xb6>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <GPS_validate+0xb8>
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	080127cc 	.word	0x080127cc

080032b0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af08      	add	r7, sp, #32
 80032b6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80032b8:	2206      	movs	r2, #6
 80032ba:	496d      	ldr	r1, [pc, #436]	; (8003470 <GPS_parse+0x1c0>)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f00b fa96 	bl	800e7ee <strncmp>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d139      	bne.n	800333c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80032c8:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <GPS_parse+0x1c4>)
 80032ca:	9307      	str	r3, [sp, #28]
 80032cc:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <GPS_parse+0x1c8>)
 80032ce:	9306      	str	r3, [sp, #24]
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <GPS_parse+0x1cc>)
 80032d2:	9305      	str	r3, [sp, #20]
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <GPS_parse+0x1d0>)
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <GPS_parse+0x1d4>)
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <GPS_parse+0x1d8>)
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <GPS_parse+0x1dc>)
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <GPS_parse+0x1e0>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <GPS_parse+0x1e4>)
 80032ea:	4a6b      	ldr	r2, [pc, #428]	; (8003498 <GPS_parse+0x1e8>)
 80032ec:	496b      	ldr	r1, [pc, #428]	; (800349c <GPS_parse+0x1ec>)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00b fa0c 	bl	800e70c <siscanf>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f340 80b5 	ble.w	8003466 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <GPS_parse+0x1f0>)
 80032fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <GPS_parse+0x1f0>)
 8003304:	7e1b      	ldrb	r3, [r3, #24]
 8003306:	4618      	mov	r0, r3
 8003308:	eeb0 0a67 	vmov.f32	s0, s15
 800330c:	f000 f8ec 	bl	80034e8 <GPS_nmea_to_dec>
 8003310:	eef0 7a40 	vmov.f32	s15, s0
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <GPS_parse+0x1f0>)
 8003316:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <GPS_parse+0x1f0>)
 800331c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003320:	4b5f      	ldr	r3, [pc, #380]	; (80034a0 <GPS_parse+0x1f0>)
 8003322:	7e5b      	ldrb	r3, [r3, #25]
 8003324:	4618      	mov	r0, r3
 8003326:	eeb0 0a67 	vmov.f32	s0, s15
 800332a:	f000 f8dd 	bl	80034e8 <GPS_nmea_to_dec>
 800332e:	eef0 7a40 	vmov.f32	s15, s0
 8003332:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <GPS_parse+0x1f0>)
 8003334:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003338:	2301      	movs	r3, #1
 800333a:	e095      	b.n	8003468 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800333c:	2206      	movs	r2, #6
 800333e:	4959      	ldr	r1, [pc, #356]	; (80034a4 <GPS_parse+0x1f4>)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f00b fa54 	bl	800e7ee <strncmp>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d134      	bne.n	80033b6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800334c:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <GPS_parse+0x1f8>)
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	4b56      	ldr	r3, [pc, #344]	; (80034ac <GPS_parse+0x1fc>)
 8003352:	9304      	str	r3, [sp, #16]
 8003354:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <GPS_parse+0x200>)
 8003356:	9303      	str	r3, [sp, #12]
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <GPS_parse+0x1d8>)
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <GPS_parse+0x1dc>)
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <GPS_parse+0x1e0>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <GPS_parse+0x1e4>)
 8003366:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <GPS_parse+0x1e8>)
 8003368:	4952      	ldr	r1, [pc, #328]	; (80034b4 <GPS_parse+0x204>)
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f00b f9ce 	bl	800e70c <siscanf>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	dd77      	ble.n	8003466 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003376:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <GPS_parse+0x1f0>)
 8003378:	edd3 7a04 	vldr	s15, [r3, #16]
 800337c:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <GPS_parse+0x1f0>)
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	4618      	mov	r0, r3
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	f000 f8af 	bl	80034e8 <GPS_nmea_to_dec>
 800338a:	eef0 7a40 	vmov.f32	s15, s0
 800338e:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <GPS_parse+0x1f0>)
 8003390:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003394:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <GPS_parse+0x1f0>)
 8003396:	edd3 7a03 	vldr	s15, [r3, #12]
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <GPS_parse+0x1f0>)
 800339c:	7e5b      	ldrb	r3, [r3, #25]
 800339e:	4618      	mov	r0, r3
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	f000 f8a0 	bl	80034e8 <GPS_nmea_to_dec>
 80033a8:	eef0 7a40 	vmov.f32	s15, s0
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <GPS_parse+0x1f0>)
 80033ae:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e058      	b.n	8003468 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80033b6:	2206      	movs	r2, #6
 80033b8:	493f      	ldr	r1, [pc, #252]	; (80034b8 <GPS_parse+0x208>)
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f00b fa17 	bl	800e7ee <strncmp>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d130      	bne.n	8003428 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <GPS_parse+0x20c>)
 80033c8:	9303      	str	r3, [sp, #12]
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <GPS_parse+0x1e8>)
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <GPS_parse+0x1d8>)
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <GPS_parse+0x1dc>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <GPS_parse+0x1e0>)
 80033d8:	4a2e      	ldr	r2, [pc, #184]	; (8003494 <GPS_parse+0x1e4>)
 80033da:	4939      	ldr	r1, [pc, #228]	; (80034c0 <GPS_parse+0x210>)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f00b f995 	bl	800e70c <siscanf>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dd3e      	ble.n	8003466 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <GPS_parse+0x1f0>)
 80033ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80033ee:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <GPS_parse+0x1f0>)
 80033f0:	7e1b      	ldrb	r3, [r3, #24]
 80033f2:	4618      	mov	r0, r3
 80033f4:	eeb0 0a67 	vmov.f32	s0, s15
 80033f8:	f000 f876 	bl	80034e8 <GPS_nmea_to_dec>
 80033fc:	eef0 7a40 	vmov.f32	s15, s0
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <GPS_parse+0x1f0>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <GPS_parse+0x1f0>)
 8003408:	edd3 7a03 	vldr	s15, [r3, #12]
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <GPS_parse+0x1f0>)
 800340e:	7e5b      	ldrb	r3, [r3, #25]
 8003410:	4618      	mov	r0, r3
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f000 f867 	bl	80034e8 <GPS_nmea_to_dec>
 800341a:	eef0 7a40 	vmov.f32	s15, s0
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <GPS_parse+0x1f0>)
 8003420:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003424:	2301      	movs	r3, #1
 8003426:	e01f      	b.n	8003468 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003428:	2206      	movs	r2, #6
 800342a:	4926      	ldr	r1, [pc, #152]	; (80034c4 <GPS_parse+0x214>)
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f00b f9de 	bl	800e7ee <strncmp>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <GPS_parse+0x218>)
 800343a:	9305      	str	r3, [sp, #20]
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <GPS_parse+0x21c>)
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <GPS_parse+0x220>)
 8003442:	9303      	str	r3, [sp, #12]
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <GPS_parse+0x200>)
 8003446:	9302      	str	r3, [sp, #8]
 8003448:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <GPS_parse+0x224>)
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <GPS_parse+0x228>)
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <GPS_parse+0x22c>)
 8003452:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <GPS_parse+0x230>)
 8003454:	4923      	ldr	r1, [pc, #140]	; (80034e4 <GPS_parse+0x234>)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f00b f958 	bl	800e70c <siscanf>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	dd01      	ble.n	8003466 <GPS_parse+0x1b6>
            return 0;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <GPS_parse+0x1b8>
    }
    return 0;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	080127d4 	.word	0x080127d4
 8003474:	200055f0 	.word	0x200055f0
 8003478:	200055ec 	.word	0x200055ec
 800347c:	200055e8 	.word	0x200055e8
 8003480:	200055e4 	.word	0x200055e4
 8003484:	200055e0 	.word	0x200055e0
 8003488:	200055dd 	.word	0x200055dd
 800348c:	200055d0 	.word	0x200055d0
 8003490:	200055dc 	.word	0x200055dc
 8003494:	200055d4 	.word	0x200055d4
 8003498:	200055d8 	.word	0x200055d8
 800349c:	080127dc 	.word	0x080127dc
 80034a0:	200055c4 	.word	0x200055c4
 80034a4:	08012804 	.word	0x08012804
 80034a8:	200055fc 	.word	0x200055fc
 80034ac:	200055f8 	.word	0x200055f8
 80034b0:	200055f4 	.word	0x200055f4
 80034b4:	0801280c 	.word	0x0801280c
 80034b8:	0801282c 	.word	0x0801282c
 80034bc:	20005600 	.word	0x20005600
 80034c0:	08012834 	.word	0x08012834
 80034c4:	08012850 	.word	0x08012850
 80034c8:	20005618 	.word	0x20005618
 80034cc:	20005614 	.word	0x20005614
 80034d0:	20005611 	.word	0x20005611
 80034d4:	20005610 	.word	0x20005610
 80034d8:	2000560c 	.word	0x2000560c
 80034dc:	20005608 	.word	0x20005608
 80034e0:	20005604 	.word	0x20005604
 80034e4:	08012858 	.word	0x08012858

080034e8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80034f2:	4603      	mov	r3, r0
 80034f4:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80034f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80034fa:	eddf 6a20 	vldr	s13, [pc, #128]	; 800357c <GPS_nmea_to_dec+0x94>
 80034fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003506:	ee17 3a90 	vmov	r3, s15
 800350a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2264      	movs	r2, #100	; 0x64
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003528:	ed97 7a03 	vldr	s14, [r7, #12]
 800352c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003580 <GPS_nmea_to_dec+0x98>
 8003530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003534:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	ed97 7a02 	vldr	s14, [r7, #8]
 8003546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	2b53      	cmp	r3, #83	; 0x53
 8003552:	d002      	beq.n	800355a <GPS_nmea_to_dec+0x72>
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	2b57      	cmp	r3, #87	; 0x57
 8003558:	d105      	bne.n	8003566 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800355a:	edd7 7a05 	vldr	s15, [r7, #20]
 800355e:	eef1 7a67 	vneg.f32	s15, s15
 8003562:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	ee07 3a90 	vmov	s15, r3
}
 800356c:	eeb0 0a67 	vmov.f32	s0, s15
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	42c80000 	.word	0x42c80000
 8003580:	42700000 	.word	0x42700000

08003584 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <GPS_init+0x30>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <GPS_init+0x34>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <GPS_init+0x34>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	2210      	movs	r2, #16
 80035a4:	4905      	ldr	r1, [pc, #20]	; (80035bc <GPS_init+0x38>)
 80035a6:	f005 ff68 	bl	800947a <HAL_UART_Transmit>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20004f9c 	.word	0x20004f9c
 80035b8:	20005680 	.word	0x20005680
 80035bc:	08012878 	.word	0x08012878

080035c0 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 80035c0:	b084      	sub	sp, #16
 80035c2:	b5b0      	push	{r4, r5, r7, lr}
 80035c4:	b092      	sub	sp, #72	; 0x48
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80035cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <checkForI2CDevices+0x108>)
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <checkForI2CDevices+0x10c>)
 80035ec:	f107 040c 	add.w	r4, r7, #12
 80035f0:	461d      	mov	r5, r3
 80035f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035fa:	c403      	stmia	r4!, {r0, r1}
 80035fc:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 80035fe:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <checkForI2CDevices+0x110>)
 8003600:	463b      	mov	r3, r7
 8003602:	ca07      	ldmia	r2, {r0, r1, r2}
 8003604:	c303      	stmia	r3!, {r0, r1}
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	3302      	adds	r3, #2
 800360a:	0c12      	lsrs	r2, r2, #16
 800360c:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8003614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003618:	f001 fa8e 	bl	8004b38 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 800361c:	f107 010c 	add.w	r1, r7, #12
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	221a      	movs	r2, #26
 8003626:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800362a:	f005 ff26 	bl	800947a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003634:	e035      	b.n	80036a2 <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8003636:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800363a:	b29b      	uxth	r3, r3
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	b299      	uxth	r1, r3
 8003640:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8003644:	2305      	movs	r3, #5
 8003646:	2203      	movs	r2, #3
 8003648:	f002 fc62 	bl	8005f10 <HAL_I2C_IsDeviceReady>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8003652:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 800365a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	2204      	movs	r2, #4
 8003664:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003668:	f005 ff07 	bl	800947a <HAL_UART_Transmit>
 800366c:	e014      	b.n	8003698 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 800366e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003672:	2b00      	cmp	r3, #0
 8003674:	d110      	bne.n	8003698 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8003676:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800367a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367e:	4915      	ldr	r1, [pc, #84]	; (80036d4 <checkForI2CDevices+0x114>)
 8003680:	4618      	mov	r0, r3
 8003682:	f00b f823 	bl	800e6cc <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8003686:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	2219      	movs	r2, #25
 8003690:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003694:	f005 fef1 	bl	800947a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8003698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800369c:	3301      	adds	r3, #1
 800369e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80036a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	dac5      	bge.n	8003636 <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 80036aa:	4639      	mov	r1, r7
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	220b      	movs	r2, #11
 80036b2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036b6:	f005 fee0 	bl	800947a <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 80036ba:	bf00      	nop
 80036bc:	3748      	adds	r7, #72	; 0x48
 80036be:	46bd      	mov	sp, r7
 80036c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80036c4:	b004      	add	sp, #16
 80036c6:	4770      	bx	lr
 80036c8:	00202d20 	.word	0x00202d20
 80036cc:	08012894 	.word	0x08012894
 80036d0:	080128b0 	.word	0x080128b0
 80036d4:	0801288c 	.word	0x0801288c

080036d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	4790      	blx	r2
 8003710:	4602      	mov	r2, r0
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4413      	add	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003718:	e7e6      	b.n	80036e8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <_ZN5PrintC1Ev+0x24>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	08012b7c 	.word	0x08012b7c

0800374c <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ffe4 	bl	8003724 <_ZN5PrintC1Ev>
 800375c:	4a05      	ldr	r2, [pc, #20]	; (8003774 <_ZN6StreamC1Ev+0x28>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	08012bac 	.word	0x08012bac

08003778 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ffe1 	bl	800374c <_ZN6StreamC1Ev>
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3390      	adds	r3, #144	; 0x90
 800379a:	2220      	movs	r2, #32
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f009 ffa4 	bl	800d6ec <memset>
  rxBufferIndex = 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08012b8c 	.word	0x08012b8c

080037e8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01d      	beq.n	800383a <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003804:	2b1f      	cmp	r3, #31
 8003806:	d901      	bls.n	800380c <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003808:	2300      	movs	r3, #0
 800380a:	e028      	b.n	800385e <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003812:	4619      	mov	r1, r3
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	440b      	add	r3, r1
 800381a:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003822:	3301      	adds	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003838:	e010      	b.n	800385c <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f984 	bl	8003b48 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8003840:	1cfb      	adds	r3, r7, #3
 8003842:	2201      	movs	r2, #1
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8b7 	bl	80039ba <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f949 	bl	8003ae4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	333c      	adds	r3, #60	; 0x3c
 8003856:	4618      	mov	r0, r3
 8003858:	f002 fc88 	bl	800616c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d21e      	bcs.n	80038c6 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	440a      	add	r2, r1
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	4611      	mov	r1, r2
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e7ed      	b.n	8003880 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f94f 	bl	8003b48 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	461a      	mov	r2, r3
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f882 	bl	80039ba <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f914 	bl	8003ae4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	333c      	adds	r3, #60	; 0x3c
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fc53 	bl	800616c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80038c6:	687b      	ldr	r3, [r7, #4]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	1ad3      	subs	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800390c:	b2da      	uxtb	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	429a      	cmp	r2, r3
 8003918:	bf34      	ite	cc
 800391a:	2301      	movcc	r3, #1
 800391c:	2300      	movcs	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003936:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800394a:	68fb      	ldr	r3, [r7, #12]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800396c:	b2da      	uxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	429a      	cmp	r2, r3
 8003978:	bf34      	ite	cc
 800397a:	2301      	movcc	r3, #1
 800397c:	2300      	movcs	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003996:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8003998:	68fb      	ldr	r3, [r7, #12]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b089      	sub	sp, #36	; 0x24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dd41      	ble.n	8003a5a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80039d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039da:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ed      	bne.n	80039dc <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e068      	b.n	8003ad8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	60ba      	str	r2, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	611a      	str	r2, [r3, #16]
        length--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
        size++;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d104      	bne.n	8003a38 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0c8      	beq.n	80039d0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	611a      	str	r2, [r3, #16]
            length--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	607b      	str	r3, [r7, #4]
            size++;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8003a58:	e7ba      	b.n	80039d0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8003a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ec      	bne.n	8003a60 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	e025      	b.n	8003ad8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a94:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ed      	bne.n	8003a9c <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	e008      	b.n	8003ad8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3724      	adds	r7, #36	; 0x24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d106      	bne.n	8003b04 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003af6:	2049      	movs	r0, #73	; 0x49
 8003af8:	f001 fbac 	bl	8005254 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003afc:	2048      	movs	r0, #72	; 0x48
 8003afe:	f001 fba9 	bl	8005254 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b02:	e016      	b.n	8003b32 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d106      	bne.n	8003b1c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003b0e:	2022      	movs	r0, #34	; 0x22
 8003b10:	f001 fba0 	bl	8005254 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b14:	2021      	movs	r0, #33	; 0x21
 8003b16:	f001 fb9d 	bl	8005254 <HAL_NVIC_EnableIRQ>
}
 8003b1a:	e00a      	b.n	8003b32 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d105      	bne.n	8003b32 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b26:	2020      	movs	r0, #32
 8003b28:	f001 fb94 	bl	8005254 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b2c:	201f      	movs	r0, #31
 8003b2e:	f001 fb91 	bl	8005254 <HAL_NVIC_EnableIRQ>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40005c00 	.word	0x40005c00
 8003b40:	40005800 	.word	0x40005800
 8003b44:	40005400 	.word	0x40005400

08003b48 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d106      	bne.n	8003b68 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003b5a:	2049      	movs	r0, #73	; 0x49
 8003b5c:	f001 fb88 	bl	8005270 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003b60:	2048      	movs	r0, #72	; 0x48
 8003b62:	f001 fb85 	bl	8005270 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b66:	e016      	b.n	8003b96 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d106      	bne.n	8003b80 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003b72:	2022      	movs	r0, #34	; 0x22
 8003b74:	f001 fb7c 	bl	8005270 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003b78:	2021      	movs	r0, #33	; 0x21
 8003b7a:	f001 fb79 	bl	8005270 <HAL_NVIC_DisableIRQ>
}
 8003b7e:	e00a      	b.n	8003b96 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d105      	bne.n	8003b96 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b8a:	2020      	movs	r0, #32
 8003b8c:	f001 fb70 	bl	8005270 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003b90:	201f      	movs	r0, #31
 8003b92:	f001 fb6d 	bl	8005270 <HAL_NVIC_DisableIRQ>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40005c00 	.word	0x40005c00
 8003ba4:	40005800 	.word	0x40005800
 8003ba8:	40005400 	.word	0x40005400

08003bac <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d110      	bne.n	8003bde <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10b      	bne.n	8003bde <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003bc8:	4808      	ldr	r0, [pc, #32]	; (8003bec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003bca:	f7ff fdd5 	bl	8003778 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003bd0:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003bd2:	f7ff fdd1 	bl	8003778 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003bd6:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003bd8:	4808      	ldr	r0, [pc, #32]	; (8003bfc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003bda:	f7ff fdcd 	bl	8003778 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40005400 	.word	0x40005400
 8003bec:	20000268 	.word	0x20000268
 8003bf0:	40005800 	.word	0x40005800
 8003bf4:	20000320 	.word	0x20000320
 8003bf8:	40005c00 	.word	0x40005c00
 8003bfc:	200003d8 	.word	0x200003d8

08003c00 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff ffcf 	bl	8003bac <_Z41__static_initialization_and_destruction_0ii>
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	72fb      	strb	r3, [r7, #11]
 8003c20:	4613      	mov	r3, r2
 8003c22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685c      	ldr	r4, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6898      	ldr	r0, [r3, #8]
 8003c2c:	893b      	ldrh	r3, [r7, #8]
 8003c2e:	7af9      	ldrb	r1, [r7, #11]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	47a0      	blx	r4
 8003c34:	6178      	str	r0, [r7, #20]

  return ret;
 8003c36:	697b      	ldr	r3, [r7, #20]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}

08003c40 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	72fb      	strb	r3, [r7, #11]
 8003c50:	4613      	mov	r3, r2
 8003c52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681c      	ldr	r4, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6898      	ldr	r0, [r3, #8]
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	7af9      	ldrb	r1, [r7, #11]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	47a0      	blx	r4
 8003c64:	6178      	str	r0, [r7, #20]

  return ret;
 8003c66:	697b      	ldr	r3, [r7, #20]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003c9c <lps22hh_from_lsb_to_hpa+0x2c>
 8003c86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	49800000 	.word	0x49800000

08003ca0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003cd0 <lps22hh_from_lsb_to_celsius+0x30>
 8003cba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cbe:	eef0 7a66 	vmov.f32	s15, s13
}
 8003cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	42c80000 	.word	0x42c80000

08003cd4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003ce0:	f107 0208 	add.w	r2, r7, #8
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff91 	bl	8003c10 <lps22hh_read_reg>
 8003cee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	7a3b      	ldrb	r3, [r7, #8]
 8003d00:	f362 0341 	bfi	r3, r2, #1, #1
 8003d04:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d06:	f107 0208 	add.w	r2, r7, #8
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ff96 	bl	8003c40 <lps22hh_write_reg>
 8003d14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d2c:	f107 0210 	add.w	r2, r7, #16
 8003d30:	2301      	movs	r3, #1
 8003d32:	2110      	movs	r1, #16
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff6b 	bl	8003c10 <lps22hh_read_reg>
 8003d3a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003d42:	f107 020c 	add.w	r2, r7, #12
 8003d46:	2301      	movs	r3, #1
 8003d48:	2111      	movs	r1, #17
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff60 	bl	8003c10 <lps22hh_read_reg>
 8003d50:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10f      	bne.n	8003d78 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	7c3b      	ldrb	r3, [r7, #16]
 8003d62:	f362 1306 	bfi	r3, r2, #4, #3
 8003d66:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d68:	f107 0210 	add.w	r2, r7, #16
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	2110      	movs	r1, #16
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff65 	bl	8003c40 <lps22hh_write_reg>
 8003d76:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d119      	bne.n	8003db2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	7b3b      	ldrb	r3, [r7, #12]
 8003d8a:	f362 0341 	bfi	r3, r2, #1, #1
 8003d8e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	7b3b      	ldrb	r3, [r7, #12]
 8003d9c:	f362 0300 	bfi	r3, r2, #0, #1
 8003da0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003da2:	f107 020c 	add.w	r2, r7, #12
 8003da6:	2301      	movs	r3, #1
 8003da8:	2111      	movs	r1, #17
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff48 	bl	8003c40 <lps22hh_write_reg>
 8003db0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003db2:	697b      	ldr	r3, [r7, #20]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8003dc6:	f107 0208 	add.w	r2, r7, #8
 8003dca:	2301      	movs	r3, #1
 8003dcc:	2127      	movs	r1, #39	; 0x27
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff1e 	bl	8003c10 <lps22hh_read_reg>
 8003dd4:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8003dd6:	7a3b      	ldrb	r3, [r7, #8]
 8003dd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	701a      	strb	r2, [r3, #0]

  return ret;
 8003de4:	68fb      	ldr	r3, [r7, #12]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003df8:	f107 0208 	add.w	r2, r7, #8
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	2128      	movs	r1, #40	; 0x28
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff05 	bl	8003c10 <lps22hh_read_reg>
 8003e06:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003e08:	7abb      	ldrb	r3, [r7, #10]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	7a7a      	ldrb	r2, [r7, #9]
 8003e18:	441a      	add	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	7a3a      	ldrb	r2, [r7, #8]
 8003e26:	441a      	add	r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	601a      	str	r2, [r3, #0]

  return ret;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8003e4a:	f107 0208 	add.w	r2, r7, #8
 8003e4e:	2302      	movs	r3, #2
 8003e50:	212b      	movs	r1, #43	; 0x2b
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fedc 	bl	8003c10 <lps22hh_read_reg>
 8003e58:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8003e5a:	7a7b      	ldrb	r3, [r7, #9]
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	7a3b      	ldrb	r3, [r7, #8]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	801a      	strh	r2, [r3, #0]

  return ret;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003e90:	2301      	movs	r3, #1
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	210f      	movs	r1, #15
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff feba 	bl	8003c10 <lps22hh_read_reg>
 8003e9c:	60f8      	str	r0, [r7, #12]

  return ret;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003eb4:	f107 0208 	add.w	r2, r7, #8
 8003eb8:	2301      	movs	r3, #1
 8003eba:	2111      	movs	r1, #17
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fea7 	bl	8003c10 <lps22hh_read_reg>
 8003ec2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	7a3b      	ldrb	r3, [r7, #8]
 8003ed4:	f362 0382 	bfi	r3, r2, #2, #1
 8003ed8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003eda:	f107 0208 	add.w	r2, r7, #8
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2111      	movs	r1, #17
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff feac 	bl	8003c40 <lps22hh_write_reg>
 8003ee8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003efe:	f107 0208 	add.w	r2, r7, #8
 8003f02:	2301      	movs	r3, #1
 8003f04:	2111      	movs	r1, #17
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fe82 	bl	8003c10 <lps22hh_read_reg>
 8003f0c:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8003f0e:	7a3b      	ldrb	r3, [r7, #8]
 8003f10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	701a      	strb	r2, [r3, #0]

  return ret;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f26:	b590      	push	{r4, r7, lr}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	461a      	mov	r2, r3
 8003f32:	460b      	mov	r3, r1
 8003f34:	72fb      	strb	r3, [r7, #11]
 8003f36:	4613      	mov	r3, r2
 8003f38:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685c      	ldr	r4, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6898      	ldr	r0, [r3, #8]
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	7af9      	ldrb	r1, [r7, #11]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	47a0      	blx	r4
 8003f4a:	6178      	str	r0, [r7, #20]

  return ret;
 8003f4c:	697b      	ldr	r3, [r7, #20]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd90      	pop	{r4, r7, pc}

08003f56 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f56:	b590      	push	{r4, r7, lr}
 8003f58:	b087      	sub	sp, #28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	461a      	mov	r2, r3
 8003f62:	460b      	mov	r3, r1
 8003f64:	72fb      	strb	r3, [r7, #11]
 8003f66:	4613      	mov	r3, r2
 8003f68:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681c      	ldr	r4, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6898      	ldr	r0, [r3, #8]
 8003f72:	893b      	ldrh	r3, [r7, #8]
 8003f74:	7af9      	ldrb	r1, [r7, #11]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	47a0      	blx	r4
 8003f7a:	6178      	str	r0, [r7, #20]

  return ret;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd90      	pop	{r4, r7, pc}
	...

08003f88 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003fb4 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	3d79db23 	.word	0x3d79db23

08003fb8 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8003fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003fe4 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8003fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	428c0000 	.word	0x428c0000

08003fe8 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8003ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffe:	eddf 6a07 	vldr	s13, [pc, #28]	; 800401c <lsm6dsr_from_lsb_to_celsius+0x34>
 8004002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004006:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800400a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800400e:	eeb0 0a67 	vmov.f32	s0, s15
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	43800000 	.word	0x43800000

08004020 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800402c:	f107 0208 	add.w	r2, r7, #8
 8004030:	2301      	movs	r3, #1
 8004032:	2110      	movs	r1, #16
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff76 	bl	8003f26 <lsm6dsr_read_reg>
 800403a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	b2da      	uxtb	r2, r3
 800404a:	7a3b      	ldrb	r3, [r7, #8]
 800404c:	f362 0383 	bfi	r3, r2, #2, #2
 8004050:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004052:	f107 0208 	add.w	r2, r7, #8
 8004056:	2301      	movs	r3, #1
 8004058:	2110      	movs	r1, #16
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff7b 	bl	8003f56 <lsm6dsr_write_reg>
 8004060:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fbb0 	bl	80047e8 <lsm6dsr_fsm_enable_get>
 8004088:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 80c4 	bne.w	800421a <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004092:	7b3b      	ldrb	r3, [r7, #12]
 8004094:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004098:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800409a:	7b3b      	ldrb	r3, [r7, #12]
 800409c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040a6:	7b3b      	ldrb	r3, [r7, #12]
 80040a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040b2:	7b3b      	ldrb	r3, [r7, #12]
 80040b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040be:	7b3b      	ldrb	r3, [r7, #12]
 80040c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040c6:	4313      	orrs	r3, r2
 80040c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040ca:	7b3b      	ldrb	r3, [r7, #12]
 80040cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80040d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040d2:	4313      	orrs	r3, r2
 80040d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040d6:	7b3b      	ldrb	r3, [r7, #12]
 80040d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80040dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040de:	4313      	orrs	r3, r2
 80040e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80040e2:	7b3b      	ldrb	r3, [r7, #12]
 80040e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040ea:	4313      	orrs	r3, r2
 80040ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80040fa:	7b7b      	ldrb	r3, [r7, #13]
 80040fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004100:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004102:	4313      	orrs	r3, r2
 8004104:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004106:	7b7b      	ldrb	r3, [r7, #13]
 8004108:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800410c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800410e:	4313      	orrs	r3, r2
 8004110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004112:	7b7b      	ldrb	r3, [r7, #13]
 8004114:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004118:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800411a:	4313      	orrs	r3, r2
 800411c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800411e:	7b7b      	ldrb	r3, [r7, #13]
 8004120:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004124:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004126:	4313      	orrs	r3, r2
 8004128:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004130:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004132:	4313      	orrs	r3, r2
 8004134:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004136:	7b7b      	ldrb	r3, [r7, #13]
 8004138:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800413c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800413e:	4313      	orrs	r3, r2
 8004140:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004142:	7b7b      	ldrb	r3, [r7, #13]
 8004144:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004148:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800414a:	4313      	orrs	r3, r2
 800414c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800414e:	2b01      	cmp	r3, #1
 8004150:	d163      	bne.n	800421a <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004152:	f107 030b 	add.w	r3, r7, #11
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb71 	bl	8004840 <lsm6dsr_fsm_data_rate_get>
 800415e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d159      	bne.n	800421a <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d853      	bhi.n	8004214 <lsm6dsr_xl_data_rate_set+0x1a8>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <lsm6dsr_xl_data_rate_set+0x108>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004185 	.word	0x08004185
 8004178:	08004197 	.word	0x08004197
 800417c:	080041b5 	.word	0x080041b5
 8004180:	080041df 	.word	0x080041df
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800418e:	e045      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	75fb      	strb	r3, [r7, #23]
            break;
 8004194:	e042      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041a0:	e03c      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041a8:	2302      	movs	r3, #2
 80041aa:	75fb      	strb	r3, [r7, #23]
            break;
 80041ac:	e036      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	75fb      	strb	r3, [r7, #23]
            break;
 80041b2:	e033      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041ba:	2303      	movs	r3, #3
 80041bc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041be:	e02d      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041c6:	2303      	movs	r3, #3
 80041c8:	75fb      	strb	r3, [r7, #23]
            break;
 80041ca:	e027      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d102      	bne.n	80041d8 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041d2:	2303      	movs	r3, #3
 80041d4:	75fb      	strb	r3, [r7, #23]
            break;
 80041d6:	e021      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	75fb      	strb	r3, [r7, #23]
            break;
 80041dc:	e01e      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80041e4:	2304      	movs	r3, #4
 80041e6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041e8:	e018      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80041f0:	2304      	movs	r3, #4
 80041f2:	75fb      	strb	r3, [r7, #23]
            break;
 80041f4:	e012      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d102      	bne.n	8004202 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80041fc:	2304      	movs	r3, #4
 80041fe:	75fb      	strb	r3, [r7, #23]
            break;
 8004200:	e00c      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d102      	bne.n	800420e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004208:	2304      	movs	r3, #4
 800420a:	75fb      	strb	r3, [r7, #23]
            break;
 800420c:	e006      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	75fb      	strb	r3, [r7, #23]
            break;
 8004212:	e003      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	75fb      	strb	r3, [r7, #23]
            break;
 8004218:	e000      	b.n	800421c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800421a:	bf00      	nop
    }
  }

  if (ret == 0)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004222:	f107 0208 	add.w	r2, r7, #8
 8004226:	2301      	movs	r3, #1
 8004228:	2110      	movs	r1, #16
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff fe7b 	bl	8003f26 <lsm6dsr_read_reg>
 8004230:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	b2da      	uxtb	r2, r3
 8004240:	7a3b      	ldrb	r3, [r7, #8]
 8004242:	f362 1307 	bfi	r3, r2, #4, #4
 8004246:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004248:	f107 0208 	add.w	r2, r7, #8
 800424c:	2301      	movs	r3, #1
 800424e:	2110      	movs	r1, #16
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fe80 	bl	8003f56 <lsm6dsr_write_reg>
 8004256:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004258:	693b      	ldr	r3, [r7, #16]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004270:	f107 0208 	add.w	r2, r7, #8
 8004274:	2301      	movs	r3, #1
 8004276:	2111      	movs	r1, #17
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fe54 	bl	8003f26 <lsm6dsr_read_reg>
 800427e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	b2da      	uxtb	r2, r3
 800428e:	7a3b      	ldrb	r3, [r7, #8]
 8004290:	f362 0303 	bfi	r3, r2, #0, #4
 8004294:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004296:	f107 0208 	add.w	r2, r7, #8
 800429a:	2301      	movs	r3, #1
 800429c:	2111      	movs	r1, #17
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe59 	bl	8003f56 <lsm6dsr_write_reg>
 80042a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa8e 	bl	80047e8 <lsm6dsr_fsm_enable_get>
 80042cc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80c4 	bne.w	800445e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042d6:	7b3b      	ldrb	r3, [r7, #12]
 80042d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80042de:	7b3b      	ldrb	r3, [r7, #12]
 80042e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80042ea:	7b3b      	ldrb	r3, [r7, #12]
 80042ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80042f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80042f2:	4313      	orrs	r3, r2
 80042f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80042f6:	7b3b      	ldrb	r3, [r7, #12]
 80042f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80042fe:	4313      	orrs	r3, r2
 8004300:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004302:	7b3b      	ldrb	r3, [r7, #12]
 8004304:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004308:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800430a:	4313      	orrs	r3, r2
 800430c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800430e:	7b3b      	ldrb	r3, [r7, #12]
 8004310:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004314:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004316:	4313      	orrs	r3, r2
 8004318:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800431a:	7b3b      	ldrb	r3, [r7, #12]
 800431c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004320:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004322:	4313      	orrs	r3, r2
 8004324:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004326:	7b3b      	ldrb	r3, [r7, #12]
 8004328:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800432c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800432e:	4313      	orrs	r3, r2
 8004330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004338:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800433a:	4313      	orrs	r3, r2
 800433c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004346:	4313      	orrs	r3, r2
 8004348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800434a:	7b7b      	ldrb	r3, [r7, #13]
 800434c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004350:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004352:	4313      	orrs	r3, r2
 8004354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004356:	7b7b      	ldrb	r3, [r7, #13]
 8004358:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800435c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800435e:	4313      	orrs	r3, r2
 8004360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004362:	7b7b      	ldrb	r3, [r7, #13]
 8004364:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800436a:	4313      	orrs	r3, r2
 800436c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800436e:	7b7b      	ldrb	r3, [r7, #13]
 8004370:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004376:	4313      	orrs	r3, r2
 8004378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800437a:	7b7b      	ldrb	r3, [r7, #13]
 800437c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004382:	4313      	orrs	r3, r2
 8004384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004386:	7b7b      	ldrb	r3, [r7, #13]
 8004388:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800438c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800438e:	4313      	orrs	r3, r2
 8004390:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004392:	2b01      	cmp	r3, #1
 8004394:	d163      	bne.n	800445e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004396:	f107 030b 	add.w	r3, r7, #11
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa4f 	bl	8004840 <lsm6dsr_fsm_data_rate_get>
 80043a2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d159      	bne.n	800445e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d853      	bhi.n	8004458 <lsm6dsr_gy_data_rate_set+0x1a8>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <lsm6dsr_gy_data_rate_set+0x108>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043db 	.word	0x080043db
 80043c0:	080043f9 	.word	0x080043f9
 80043c4:	08004423 	.word	0x08004423
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80043d2:	e045      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	75fb      	strb	r3, [r7, #23]
            break;
 80043d8:	e042      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80043e0:	2302      	movs	r3, #2
 80043e2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80043e4:	e03c      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80043ec:	2302      	movs	r3, #2
 80043ee:	75fb      	strb	r3, [r7, #23]
            break;
 80043f0:	e036      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	75fb      	strb	r3, [r7, #23]
            break;
 80043f6:	e033      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80043fe:	2303      	movs	r3, #3
 8004400:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004402:	e02d      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800440a:	2303      	movs	r3, #3
 800440c:	75fb      	strb	r3, [r7, #23]
            break;
 800440e:	e027      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d102      	bne.n	800441c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004416:	2303      	movs	r3, #3
 8004418:	75fb      	strb	r3, [r7, #23]
            break;
 800441a:	e021      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	75fb      	strb	r3, [r7, #23]
            break;
 8004420:	e01e      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004428:	2304      	movs	r3, #4
 800442a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800442c:	e018      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d102      	bne.n	800443a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004434:	2304      	movs	r3, #4
 8004436:	75fb      	strb	r3, [r7, #23]
            break;
 8004438:	e012      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d102      	bne.n	8004446 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004440:	2304      	movs	r3, #4
 8004442:	75fb      	strb	r3, [r7, #23]
            break;
 8004444:	e00c      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d102      	bne.n	8004452 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800444c:	2304      	movs	r3, #4
 800444e:	75fb      	strb	r3, [r7, #23]
            break;
 8004450:	e006      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	75fb      	strb	r3, [r7, #23]
            break;
 8004456:	e003      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	75fb      	strb	r3, [r7, #23]
            break;
 800445c:	e000      	b.n	8004460 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800445e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004466:	f107 0208 	add.w	r2, r7, #8
 800446a:	2301      	movs	r3, #1
 800446c:	2111      	movs	r1, #17
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fd59 	bl	8003f26 <lsm6dsr_read_reg>
 8004474:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	b2da      	uxtb	r2, r3
 8004484:	7a3b      	ldrb	r3, [r7, #8]
 8004486:	f362 1307 	bfi	r3, r2, #4, #4
 800448a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800448c:	f107 0208 	add.w	r2, r7, #8
 8004490:	2301      	movs	r3, #1
 8004492:	2111      	movs	r1, #17
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fd5e 	bl	8003f56 <lsm6dsr_write_reg>
 800449a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800449c:	693b      	ldr	r3, [r7, #16]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop

080044a8 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044b4:	f107 0208 	add.w	r2, r7, #8
 80044b8:	2301      	movs	r3, #1
 80044ba:	2112      	movs	r1, #18
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fd32 	bl	8003f26 <lsm6dsr_read_reg>
 80044c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	7a3b      	ldrb	r3, [r7, #8]
 80044d4:	f362 1386 	bfi	r3, r2, #6, #1
 80044d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044da:	f107 0208 	add.w	r2, r7, #8
 80044de:	2301      	movs	r3, #1
 80044e0:	2112      	movs	r1, #18
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fd37 	bl	8003f56 <lsm6dsr_write_reg>
 80044e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044ea:	68fb      	ldr	r3, [r7, #12]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	2301      	movs	r3, #1
 8004504:	211e      	movs	r1, #30
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fd0d 	bl	8003f26 <lsm6dsr_read_reg>
 800450c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800450e:	7a3b      	ldrb	r3, [r7, #8]
 8004510:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	701a      	strb	r2, [r3, #0]

  return ret;
 800451c:	68fb      	ldr	r3, [r7, #12]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004530:	f107 0208 	add.w	r2, r7, #8
 8004534:	2301      	movs	r3, #1
 8004536:	211e      	movs	r1, #30
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fcf4 	bl	8003f26 <lsm6dsr_read_reg>
 800453e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004540:	7a3b      	ldrb	r3, [r7, #8]
 8004542:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	701a      	strb	r2, [r3, #0]

  return ret;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004562:	f107 0208 	add.w	r2, r7, #8
 8004566:	2301      	movs	r3, #1
 8004568:	211e      	movs	r1, #30
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fcdb 	bl	8003f26 <lsm6dsr_read_reg>
 8004570:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8004572:	7a3b      	ldrb	r3, [r7, #8]
 8004574:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004580:	68fb      	ldr	r3, [r7, #12]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8004594:	f107 0208 	add.w	r2, r7, #8
 8004598:	2302      	movs	r3, #2
 800459a:	2120      	movs	r1, #32
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fcc2 	bl	8003f26 <lsm6dsr_read_reg>
 80045a2:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80045a4:	7a7b      	ldrb	r3, [r7, #9]
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	7a3b      	ldrb	r3, [r7, #8]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4413      	add	r3, r2
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b21a      	sxth	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80045c6:	68fb      	ldr	r3, [r7, #12]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80045da:	f107 020c 	add.w	r2, r7, #12
 80045de:	2306      	movs	r3, #6
 80045e0:	2122      	movs	r1, #34	; 0x22
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fc9f 	bl	8003f26 <lsm6dsr_read_reg>
 80045e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80045ea:	7b7b      	ldrb	r3, [r7, #13]
 80045ec:	b21a      	sxth	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	7b3b      	ldrb	r3, [r7, #12]
 8004600:	b29b      	uxth	r3, r3
 8004602:	4413      	add	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	b21a      	sxth	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	3302      	adds	r3, #2
 8004612:	b212      	sxth	r2, r2
 8004614:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	3302      	adds	r3, #2
 800461a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461e:	b29b      	uxth	r3, r3
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	b29a      	uxth	r2, r3
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	b29b      	uxth	r3, r3
 8004628:	4413      	add	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	3302      	adds	r3, #2
 8004630:	b212      	sxth	r2, r2
 8004632:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004634:	7c7a      	ldrb	r2, [r7, #17]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3304      	adds	r3, #4
 800463a:	b212      	sxth	r2, r2
 800463c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3304      	adds	r3, #4
 8004642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004646:	b29b      	uxth	r3, r3
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b29a      	uxth	r2, r3
 800464c:	7c3b      	ldrb	r3, [r7, #16]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4413      	add	r3, r2
 8004652:	b29a      	uxth	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	3304      	adds	r3, #4
 8004658:	b212      	sxth	r2, r2
 800465a:	801a      	strh	r2, [r3, #0]

  return ret;
 800465c:	697b      	ldr	r3, [r7, #20]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8004670:	f107 020c 	add.w	r2, r7, #12
 8004674:	2306      	movs	r3, #6
 8004676:	2128      	movs	r1, #40	; 0x28
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fc54 	bl	8003f26 <lsm6dsr_read_reg>
 800467e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004680:	7b7b      	ldrb	r3, [r7, #13]
 8004682:	b21a      	sxth	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800468e:	b29b      	uxth	r3, r3
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	b29a      	uxth	r2, r3
 8004694:	7b3b      	ldrb	r3, [r7, #12]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4413      	add	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	b21a      	sxth	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3302      	adds	r3, #2
 80046a8:	b212      	sxth	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3302      	adds	r3, #2
 80046b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4413      	add	r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	3302      	adds	r3, #2
 80046c6:	b212      	sxth	r2, r2
 80046c8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80046ca:	7c7a      	ldrb	r2, [r7, #17]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3304      	adds	r3, #4
 80046d0:	b212      	sxth	r2, r2
 80046d2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	7c3b      	ldrb	r3, [r7, #16]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3304      	adds	r3, #4
 80046ee:	b212      	sxth	r2, r2
 80046f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004708:	f107 0208 	add.w	r2, r7, #8
 800470c:	2301      	movs	r3, #1
 800470e:	2101      	movs	r1, #1
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fc08 	bl	8003f26 <lsm6dsr_read_reg>
 8004716:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	7a3b      	ldrb	r3, [r7, #8]
 8004728:	f362 1387 	bfi	r3, r2, #6, #2
 800472c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800472e:	f107 0208 	add.w	r2, r7, #8
 8004732:	2301      	movs	r3, #1
 8004734:	2101      	movs	r1, #1
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fc0d 	bl	8003f56 <lsm6dsr_write_reg>
 800473c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8004752:	2301      	movs	r3, #1
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	210f      	movs	r1, #15
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fbe4 	bl	8003f26 <lsm6dsr_read_reg>
 800475e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004776:	f107 0208 	add.w	r2, r7, #8
 800477a:	2301      	movs	r3, #1
 800477c:	2112      	movs	r1, #18
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fbd1 	bl	8003f26 <lsm6dsr_read_reg>
 8004784:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	7a3b      	ldrb	r3, [r7, #8]
 8004796:	f362 0300 	bfi	r3, r2, #0, #1
 800479a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800479c:	f107 0208 	add.w	r2, r7, #8
 80047a0:	2301      	movs	r3, #1
 80047a2:	2112      	movs	r1, #18
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fbd6 	bl	8003f56 <lsm6dsr_write_reg>
 80047aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047ac:	68fb      	ldr	r3, [r7, #12]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047c0:	f107 0208 	add.w	r2, r7, #8
 80047c4:	2301      	movs	r3, #1
 80047c6:	2112      	movs	r1, #18
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fbac 	bl	8003f26 <lsm6dsr_read_reg>
 80047ce:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80047d0:	7a3b      	ldrb	r3, [r7, #8]
 80047d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80047f2:	2102      	movs	r1, #2
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff81 	bl	80046fc <lsm6dsr_mem_bank_set>
 80047fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8004802:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8004804:	2301      	movs	r3, #1
 8004806:	2146      	movs	r1, #70	; 0x46
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fb8c 	bl	8003f26 <lsm6dsr_read_reg>
 800480e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d107      	bne.n	8004826 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800481a:	2301      	movs	r3, #1
 800481c:	2147      	movs	r1, #71	; 0x47
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fb81 	bl	8003f26 <lsm6dsr_read_reg>
 8004824:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800482c:	2100      	movs	r1, #0
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff ff64 	bl	80046fc <lsm6dsr_mem_bank_set>
 8004834:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800484a:	2102      	movs	r1, #2
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff55 	bl	80046fc <lsm6dsr_mem_bank_set>
 8004852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800485a:	f107 0208 	add.w	r2, r7, #8
 800485e:	2301      	movs	r3, #1
 8004860:	215f      	movs	r1, #95	; 0x5f
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fb5f 	bl	8003f26 <lsm6dsr_read_reg>
 8004868:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004870:	2100      	movs	r1, #0
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff42 	bl	80046fc <lsm6dsr_mem_bank_set>
 8004878:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800487a:	7a3b      	ldrb	r3, [r7, #8]
 800487c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d81a      	bhi.n	80048bc <lsm6dsr_fsm_data_rate_get+0x7c>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048b5 	.word	0x080048b5
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
      break;
 80048a2:	e00f      	b.n	80048c4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
      break;
 80048aa:	e00b      	b.n	80048c4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	701a      	strb	r2, [r3, #0]
      break;
 80048b2:	e007      	b.n	80048c4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2203      	movs	r2, #3
 80048b8:	701a      	strb	r2, [r3, #0]
      break;
 80048ba:	e003      	b.n	80048c4 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
      break;
 80048c2:	bf00      	nop
  }

  return ret;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop

080048d0 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
 80048dc:	2208      	movs	r2, #8
 80048de:	4905      	ldr	r1, [pc, #20]	; (80048f4 <HAL_RTC_AlarmAEventCallback+0x24>)
 80048e0:	4805      	ldr	r0, [pc, #20]	; (80048f8 <HAL_RTC_AlarmAEventCallback+0x28>)
 80048e2:	f004 fdca 	bl	800947a <HAL_UART_Transmit>
	flagA = 1;
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RTC_AlarmAEventCallback+0x2c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	080128bc 	.word	0x080128bc
 80048f8:	20005684 	.word	0x20005684
 80048fc:	20000490 	.word	0x20000490

08004900 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8004900:	b084      	sub	sp, #16
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	f107 0c10 	add.w	ip, r7, #16
 800490c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	2211      	movs	r2, #17
 8004916:	490e      	ldr	r1, [pc, #56]	; (8004950 <MRT_SetupRTOS+0x50>)
 8004918:	480e      	ldr	r0, [pc, #56]	; (8004954 <MRT_SetupRTOS+0x54>)
 800491a:	f004 fdae 	bl	800947a <HAL_UART_Transmit>
	rtos.huart = uart;
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <MRT_SetupRTOS+0x54>)
 8004920:	4618      	mov	r0, r3
 8004922:	f107 0310 	add.w	r3, r7, #16
 8004926:	2244      	movs	r2, #68	; 0x44
 8004928:	4619      	mov	r1, r3
 800492a:	f008 feb7 	bl	800d69c <memcpy>
	rtos.sleepTime = sleepT;
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <MRT_SetupRTOS+0x54>)
 8004930:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004934:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004938:	f000 f80e 	bl	8004958 <MRT_WUProcedure>
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8004940:	79fb      	ldrb	r3, [r7, #7]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800494c:	b004      	add	sp, #16
 800494e:	4770      	bx	lr
 8004950:	080128d4 	.word	0x080128d4
 8004954:	20005684 	.word	0x20005684

08004958 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 800495e:	2300      	movs	r3, #0
 8004960:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <MRT_WUProcedure+0x5c>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d11b      	bne.n	80049a6 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 800496e:	2301      	movs	r3, #1
 8004970:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <MRT_WUProcedure+0x5c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <MRT_WUProcedure+0x5c>)
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <MRT_WUProcedure+0x60>)
 8004980:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	f7fb fc34 	bl	80001f0 <strlen>
 8004988:	4603      	mov	r3, r0
 800498a:	b29a      	uxth	r2, r3
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	480a      	ldr	r0, [pc, #40]	; (80049bc <MRT_WUProcedure+0x64>)
 8004994:	f004 fd71 	bl	800947a <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004998:	f44f 7080 	mov.w	r0, #256	; 0x100
 800499c:	f002 f844 	bl	8006a28 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80049a0:	4807      	ldr	r0, [pc, #28]	; (80049c0 <MRT_WUProcedure+0x68>)
 80049a2:	f003 fa9d 	bl	8007ee0 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80049a6:	f000 f80d 	bl	80049c4 <MRT_ClearFlags>

	return wakingUp;
 80049aa:	79fb      	ldrb	r3, [r7, #7]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40007000 	.word	0x40007000
 80049b8:	080128e8 	.word	0x080128e8
 80049bc:	20005684 	.word	0x20005684
 80049c0:	200053d0 	.word	0x200053d0

080049c4 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	2214      	movs	r2, #20
 80049ce:	4932      	ldr	r1, [pc, #200]	; (8004a98 <MRT_ClearFlags+0xd4>)
 80049d0:	4832      	ldr	r0, [pc, #200]	; (8004a9c <MRT_ClearFlags+0xd8>)
 80049d2:	f004 fd52 	bl	800947a <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80049d6:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ca      	movs	r2, #202	; 0xca
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
 80049de:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2253      	movs	r2, #83	; 0x53
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80049e6:	e00f      	b.n	8004a08 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	2217      	movs	r2, #23
 80049ee:	492d      	ldr	r1, [pc, #180]	; (8004aa4 <MRT_ClearFlags+0xe0>)
 80049f0:	482a      	ldr	r0, [pc, #168]	; (8004a9c <MRT_ClearFlags+0xd8>)
 80049f2:	f004 fd42 	bl	800947a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a06:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e8      	bne.n	80049e8 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <MRT_ClearFlags+0xe4>)
 8004a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a24:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	22ca      	movs	r2, #202	; 0xca
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2253      	movs	r2, #83	; 0x53
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a36:	e00f      	b.n	8004a58 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	2217      	movs	r2, #23
 8004a3e:	491b      	ldr	r1, [pc, #108]	; (8004aac <MRT_ClearFlags+0xe8>)
 8004a40:	4816      	ldr	r0, [pc, #88]	; (8004a9c <MRT_ClearFlags+0xd8>)
 8004a42:	f004 fd1a 	bl	800947a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004a56:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e8      	bne.n	8004a38 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ff      	movs	r2, #255	; 0xff
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <MRT_ClearFlags+0xe4>)
 8004a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a74:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <MRT_ClearFlags+0xec>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <MRT_ClearFlags+0xec>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <MRT_ClearFlags+0xdc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004a92:	60da      	str	r2, [r3, #12]
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	08012908 	.word	0x08012908
 8004a9c:	20005684 	.word	0x20005684
 8004aa0:	200053d0 	.word	0x200053d0
 8004aa4:	08012920 	.word	0x08012920
 8004aa8:	40013c00 	.word	0x40013c00
 8004aac:	08012938 	.word	0x08012938
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_Init+0x40>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <HAL_Init+0x40>)
 8004abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_Init+0x40>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <HAL_Init+0x40>)
 8004aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_Init+0x40>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <HAL_Init+0x40>)
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004adc:	2003      	movs	r0, #3
 8004ade:	f000 fb92 	bl	8005206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7fe f95e 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ae8:	f7fd fe22 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023c00 	.word	0x40023c00

08004af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_IncTick+0x20>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_IncTick+0x24>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4413      	add	r3, r2
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <HAL_IncTick+0x24>)
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000008 	.word	0x20000008
 8004b1c:	200056cc 	.word	0x200056cc

08004b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return uwTick;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_GetTick+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	200056cc 	.word	0x200056cc

08004b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7ff ffee 	bl	8004b20 <HAL_GetTick>
 8004b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d005      	beq.n	8004b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_Delay+0x44>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b5e:	bf00      	nop
 8004b60:	f7ff ffde 	bl	8004b20 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d8f7      	bhi.n	8004b60 <HAL_Delay+0x28>
  {
  }
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000008 	.word	0x20000008

08004b80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e033      	b.n	8004bfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd fdf2 	bl	8002788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d118      	bne.n	8004bf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bc6:	f023 0302 	bic.w	r3, r3, #2
 8004bca:	f043 0202 	orr.w	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f94a 	bl	8004e6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
 8004bee:	e001      	b.n	8004bf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e113      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x244>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b09      	cmp	r3, #9
 8004c32:	d925      	bls.n	8004c80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	4613      	mov	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4413      	add	r3, r2
 8004c48:	3b1e      	subs	r3, #30
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43da      	mvns	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	400a      	ands	r2, r1
 8004c58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68d9      	ldr	r1, [r3, #12]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4403      	add	r3, r0
 8004c72:	3b1e      	subs	r3, #30
 8004c74:	409a      	lsls	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	e022      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6919      	ldr	r1, [r3, #16]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	2207      	movs	r2, #7
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6919      	ldr	r1, [r3, #16]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4403      	add	r3, r0
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d824      	bhi.n	8004d18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	3b05      	subs	r3, #5
 8004ce0:	221f      	movs	r2, #31
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	400a      	ands	r2, r1
 8004cee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	3b05      	subs	r3, #5
 8004d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34
 8004d16:	e04c      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d824      	bhi.n	8004d6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	3b23      	subs	r3, #35	; 0x23
 8004d32:	221f      	movs	r2, #31
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	400a      	ands	r2, r1
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	4618      	mov	r0, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	3b23      	subs	r3, #35	; 0x23
 8004d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
 8004d68:	e023      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b41      	subs	r3, #65	; 0x41
 8004d7c:	221f      	movs	r2, #31
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	400a      	ands	r2, r1
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4618      	mov	r0, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	3b41      	subs	r3, #65	; 0x41
 8004da6:	fa00 f203 	lsl.w	r2, r0, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <HAL_ADC_ConfigChannel+0x250>)
 8004db4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <HAL_ADC_ConfigChannel+0x254>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10f      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x1d8>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b12      	cmp	r3, #18
 8004dc6:	d10b      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_ADC_ConfigChannel+0x254>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12b      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x23a>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <HAL_ADC_ConfigChannel+0x258>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x1f4>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b11      	cmp	r3, #17
 8004dfa:	d122      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a11      	ldr	r2, [pc, #68]	; (8004e60 <HAL_ADC_ConfigChannel+0x258>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d111      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_ADC_ConfigChannel+0x25c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_ADC_ConfigChannel+0x260>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0c9a      	lsrs	r2, r3, #18
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e34:	e002      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f9      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40012300 	.word	0x40012300
 8004e5c:	40012000 	.word	0x40012000
 8004e60:	10000012 	.word	0x10000012
 8004e64:	20000000 	.word	0x20000000
 8004e68:	431bde83 	.word	0x431bde83

08004e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <ADC_Init+0x1f0>)
 8004e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	021a      	lsls	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	4a58      	ldr	r2, [pc, #352]	; (8005060 <ADC_Init+0x1f4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6899      	ldr	r1, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	e00f      	b.n	8004f6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0202 	bic.w	r2, r2, #2
 8004f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7e1b      	ldrb	r3, [r3, #24]
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	035a      	lsls	r2, r3, #13
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e007      	b.n	8004fe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	051a      	lsls	r2, r3, #20
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6899      	ldr	r1, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005022:	025a      	lsls	r2, r3, #9
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	029a      	lsls	r2, r3, #10
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40012300 	.word	0x40012300
 8005060:	0f000001 	.word	0x0f000001

08005064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800508c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	60d3      	str	r3, [r2, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <__NVIC_GetPriorityGrouping+0x18>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0307 	and.w	r3, r3, #7
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db0b      	blt.n	80050f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f003 021f 	and.w	r2, r3, #31
 80050e0:	4907      	ldr	r1, [pc, #28]	; (8005100 <__NVIC_EnableIRQ+0x38>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2001      	movs	r0, #1
 80050ea:	fa00 f202 	lsl.w	r2, r0, r2
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e100 	.word	0xe000e100

08005104 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	2b00      	cmp	r3, #0
 8005114:	db12      	blt.n	800513c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	490a      	ldr	r1, [pc, #40]	; (8005148 <__NVIC_DisableIRQ+0x44>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2001      	movs	r0, #1
 8005126:	fa00 f202 	lsl.w	r2, r0, r2
 800512a:	3320      	adds	r3, #32
 800512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005130:	f3bf 8f4f 	dsb	sy
}
 8005134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005136:	f3bf 8f6f 	isb	sy
}
 800513a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000e100 	.word	0xe000e100

0800514c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db0a      	blt.n	8005176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	490c      	ldr	r1, [pc, #48]	; (8005198 <__NVIC_SetPriority+0x4c>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	440b      	add	r3, r1
 8005170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005174:	e00a      	b.n	800518c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4908      	ldr	r1, [pc, #32]	; (800519c <__NVIC_SetPriority+0x50>)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	3b04      	subs	r3, #4
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	440b      	add	r3, r1
 800518a:	761a      	strb	r2, [r3, #24]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000e100 	.word	0xe000e100
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f1c3 0307 	rsb	r3, r3, #7
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	bf28      	it	cs
 80051be:	2304      	movcs	r3, #4
 80051c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d902      	bls.n	80051d0 <NVIC_EncodePriority+0x30>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3b03      	subs	r3, #3
 80051ce:	e000      	b.n	80051d2 <NVIC_EncodePriority+0x32>
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	401a      	ands	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	43d9      	mvns	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	4313      	orrs	r3, r2
         );
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ff28 	bl	8005064 <__NVIC_SetPriorityGrouping>
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800522e:	f7ff ff3d 	bl	80050ac <__NVIC_GetPriorityGrouping>
 8005232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7ff ffb1 	bl	80051a0 <NVIC_EncodePriority>
 800523e:	4602      	mov	r2, r0
 8005240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff80 	bl	800514c <__NVIC_SetPriority>
}
 800524c:	bf00      	nop
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff30 	bl	80050c8 <__NVIC_EnableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ff40 	bl	8005104 <__NVIC_DisableIRQ>
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e177      	b.n	8005598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a8:	2201      	movs	r2, #1
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	f040 8166 	bne.w	8005592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d005      	beq.n	80052de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d130      	bne.n	8005340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2203      	movs	r2, #3
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005314:	2201      	movs	r2, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4013      	ands	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 0201 	and.w	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d017      	beq.n	800537c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2203      	movs	r2, #3
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d123      	bne.n	80053d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	08da      	lsrs	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3208      	adds	r2, #8
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	220f      	movs	r2, #15
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	08da      	lsrs	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	2203      	movs	r2, #3
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 0203 	and.w	r2, r3, #3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80c0 	beq.w	8005592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <HAL_GPIO_Init+0x324>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	4a65      	ldr	r2, [pc, #404]	; (80055b0 <HAL_GPIO_Init+0x324>)
 800541c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005420:	6453      	str	r3, [r2, #68]	; 0x44
 8005422:	4b63      	ldr	r3, [pc, #396]	; (80055b0 <HAL_GPIO_Init+0x324>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800542e:	4a61      	ldr	r2, [pc, #388]	; (80055b4 <HAL_GPIO_Init+0x328>)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3302      	adds	r3, #2
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a58      	ldr	r2, [pc, #352]	; (80055b8 <HAL_GPIO_Init+0x32c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d037      	beq.n	80054ca <HAL_GPIO_Init+0x23e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a57      	ldr	r2, [pc, #348]	; (80055bc <HAL_GPIO_Init+0x330>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_GPIO_Init+0x23a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <HAL_GPIO_Init+0x334>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x236>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a55      	ldr	r2, [pc, #340]	; (80055c4 <HAL_GPIO_Init+0x338>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x232>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a54      	ldr	r2, [pc, #336]	; (80055c8 <HAL_GPIO_Init+0x33c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x22e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a53      	ldr	r2, [pc, #332]	; (80055cc <HAL_GPIO_Init+0x340>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x22a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a52      	ldr	r2, [pc, #328]	; (80055d0 <HAL_GPIO_Init+0x344>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x226>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a51      	ldr	r2, [pc, #324]	; (80055d4 <HAL_GPIO_Init+0x348>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x222>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_GPIO_Init+0x34c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x21e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <HAL_GPIO_Init+0x350>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x21a>
 80054a2:	2309      	movs	r3, #9
 80054a4:	e012      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054a6:	230a      	movs	r3, #10
 80054a8:	e010      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054aa:	2308      	movs	r3, #8
 80054ac:	e00e      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ae:	2307      	movs	r3, #7
 80054b0:	e00c      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e00a      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e008      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ba:	2304      	movs	r3, #4
 80054bc:	e006      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054be:	2303      	movs	r3, #3
 80054c0:	e004      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e002      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ca:	2300      	movs	r3, #0
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f002 0203 	and.w	r2, r2, #3
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	4093      	lsls	r3, r2
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054dc:	4935      	ldr	r1, [pc, #212]	; (80055b4 <HAL_GPIO_Init+0x328>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_GPIO_Init+0x354>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800550e:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <HAL_GPIO_Init+0x354>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005514:	4b32      	ldr	r3, [pc, #200]	; (80055e0 <HAL_GPIO_Init+0x354>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005538:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <HAL_GPIO_Init+0x354>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <HAL_GPIO_Init+0x354>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <HAL_GPIO_Init+0x354>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_GPIO_Init+0x354>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800558c:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <HAL_GPIO_Init+0x354>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	f67f ae84 	bls.w	80052a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3724      	adds	r7, #36	; 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40021400 	.word	0x40021400
 80055d0:	40021800 	.word	0x40021800
 80055d4:	40021c00 	.word	0x40021c00
 80055d8:	40022000 	.word	0x40022000
 80055dc:	40022400 	.word	0x40022400
 80055e0:	40013c00 	.word	0x40013c00

080055e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	887b      	ldrh	r3, [r7, #2]
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e001      	b.n	8005606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
 8005620:	4613      	mov	r3, r2
 8005622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005624:	787b      	ldrb	r3, [r7, #1]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005630:	e003      	b.n	800563a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	041a      	lsls	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	619a      	str	r2, [r3, #24]
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e12b      	b.n	80058b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fd f8ce 	bl	8002810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800569a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056ac:	f001 fe1a 	bl	80072e4 <HAL_RCC_GetPCLK1Freq>
 80056b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4a81      	ldr	r2, [pc, #516]	; (80058bc <HAL_I2C_Init+0x274>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d807      	bhi.n	80056cc <HAL_I2C_Init+0x84>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a80      	ldr	r2, [pc, #512]	; (80058c0 <HAL_I2C_Init+0x278>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bf94      	ite	ls
 80056c4:	2301      	movls	r3, #1
 80056c6:	2300      	movhi	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e006      	b.n	80056da <HAL_I2C_Init+0x92>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a7d      	ldr	r2, [pc, #500]	; (80058c4 <HAL_I2C_Init+0x27c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0e7      	b.n	80058b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a78      	ldr	r2, [pc, #480]	; (80058c8 <HAL_I2C_Init+0x280>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0c9b      	lsrs	r3, r3, #18
 80056ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a6a      	ldr	r2, [pc, #424]	; (80058bc <HAL_I2C_Init+0x274>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d802      	bhi.n	800571c <HAL_I2C_Init+0xd4>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3301      	adds	r3, #1
 800571a:	e009      	b.n	8005730 <HAL_I2C_Init+0xe8>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	4a69      	ldr	r2, [pc, #420]	; (80058cc <HAL_I2C_Init+0x284>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	3301      	adds	r3, #1
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	430b      	orrs	r3, r1
 8005736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	495c      	ldr	r1, [pc, #368]	; (80058bc <HAL_I2C_Init+0x274>)
 800574c:	428b      	cmp	r3, r1
 800574e:	d819      	bhi.n	8005784 <HAL_I2C_Init+0x13c>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1e59      	subs	r1, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	fbb1 f3f3 	udiv	r3, r1, r3
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005764:	400b      	ands	r3, r1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_I2C_Init+0x138>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1e59      	subs	r1, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	fbb1 f3f3 	udiv	r3, r1, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577e:	e051      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005780:	2304      	movs	r3, #4
 8005782:	e04f      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d111      	bne.n	80057b0 <HAL_I2C_Init+0x168>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1e58      	subs	r0, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	440b      	add	r3, r1
 800579a:	fbb0 f3f3 	udiv	r3, r0, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e012      	b.n	80057d6 <HAL_I2C_Init+0x18e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1e58      	subs	r0, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	0099      	lsls	r1, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Init+0x196>
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10e      	bne.n	8005804 <HAL_I2C_Init+0x1bc>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1e58      	subs	r0, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	440b      	add	r3, r1
 80057f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f8:	3301      	adds	r3, #1
 80057fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005802:	e00f      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1e58      	subs	r0, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6859      	ldr	r1, [r3, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	0099      	lsls	r1, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	fbb0 f3f3 	udiv	r3, r0, r3
 800581a:	3301      	adds	r3, #1
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	6809      	ldr	r1, [r1, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6911      	ldr	r1, [r2, #16]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68d2      	ldr	r2, [r2, #12]
 800585e:	4311      	orrs	r1, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	430b      	orrs	r3, r1
 8005866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	000186a0 	.word	0x000186a0
 80058c0:	001e847f 	.word	0x001e847f
 80058c4:	003d08ff 	.word	0x003d08ff
 80058c8:	431bde83 	.word	0x431bde83
 80058cc:	10624dd3 	.word	0x10624dd3

080058d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	817b      	strh	r3, [r7, #10]
 80058e2:	460b      	mov	r3, r1
 80058e4:	813b      	strh	r3, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ea:	f7ff f919 	bl	8004b20 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	f040 80d9 	bne.w	8005ab0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2319      	movs	r3, #25
 8005904:	2201      	movs	r2, #1
 8005906:	496d      	ldr	r1, [pc, #436]	; (8005abc <HAL_I2C_Mem_Write+0x1ec>)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fde3 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
 8005916:	e0cc      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_I2C_Mem_Write+0x56>
 8005922:	2302      	movs	r3, #2
 8005924:	e0c5      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d007      	beq.n	800594c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2221      	movs	r2, #33	; 0x21
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800597c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a4d      	ldr	r2, [pc, #308]	; (8005ac0 <HAL_I2C_Mem_Write+0x1f0>)
 800598c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800598e:	88f8      	ldrh	r0, [r7, #6]
 8005990:	893a      	ldrh	r2, [r7, #8]
 8005992:	8979      	ldrh	r1, [r7, #10]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	4603      	mov	r3, r0
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fc1a 	bl	80061d8 <I2C_RequestMemoryWrite>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d052      	beq.n	8005a50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e081      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fe64 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d107      	bne.n	80059d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e06b      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	781a      	ldrb	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d11b      	bne.n	8005a50 <HAL_I2C_Mem_Write+0x180>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1aa      	bne.n	80059ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fe50 	bl	8006702 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d107      	bne.n	8005a80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e016      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	00100002 	.word	0x00100002
 8005ac0:	ffff0000 	.word	0xffff0000

08005ac4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	; 0x30
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ade:	f7ff f81f 	bl	8004b20 <HAL_GetTick>
 8005ae2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 8208 	bne.w	8005f02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2319      	movs	r3, #25
 8005af8:	2201      	movs	r2, #1
 8005afa:	497b      	ldr	r1, [pc, #492]	; (8005ce8 <HAL_I2C_Mem_Read+0x224>)
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fce9 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e1fb      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_I2C_Mem_Read+0x56>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e1f4      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d007      	beq.n	8005b40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2222      	movs	r2, #34	; 0x22
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a5b      	ldr	r2, [pc, #364]	; (8005cec <HAL_I2C_Mem_Read+0x228>)
 8005b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b82:	88f8      	ldrh	r0, [r7, #6]
 8005b84:	893a      	ldrh	r2, [r7, #8]
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4603      	mov	r3, r0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fbb6 	bl	8006304 <I2C_RequestMemoryRead>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e1b0      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d113      	bne.n	8005bd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	623b      	str	r3, [r7, #32]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e184      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d11b      	bne.n	8005c12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e164      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d11b      	bne.n	8005c52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	e144      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c68:	e138      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	f200 80f1 	bhi.w	8005e56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d123      	bne.n	8005cc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fd7f 	bl	8006784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e139      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc2:	e10b      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d14e      	bne.n	8005d6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4906      	ldr	r1, [pc, #24]	; (8005cf0 <HAL_I2C_Mem_Read+0x22c>)
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fbfc 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e10e      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
 8005ce6:	bf00      	nop
 8005ce8:	00100002 	.word	0x00100002
 8005cec:	ffff0000 	.word	0xffff0000
 8005cf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d68:	e0b8      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	2200      	movs	r2, #0
 8005d72:	4966      	ldr	r1, [pc, #408]	; (8005f0c <HAL_I2C_Mem_Read+0x448>)
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fbad 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0bf      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2200      	movs	r2, #0
 8005dce:	494f      	ldr	r1, [pc, #316]	; (8005f0c <HAL_I2C_Mem_Read+0x448>)
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fb7f 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e091      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e54:	e042      	b.n	8005edc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc92 	bl	8006784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e04c      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d118      	bne.n	8005edc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f aec2 	bne.w	8005c6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	; 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	00010004 	.word	0x00010004

08005f10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7fe fdfe 	bl	8004b20 <HAL_GetTick>
 8005f24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005f26:	2301      	movs	r3, #1
 8005f28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	f040 8111 	bne.w	800615a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2319      	movs	r3, #25
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4988      	ldr	r1, [pc, #544]	; (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fac6 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e104      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_I2C_IsDeviceReady+0x50>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e0fd      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d007      	beq.n	8005f86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2224      	movs	r2, #36	; 0x24
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a70      	ldr	r2, [pc, #448]	; (8006168 <HAL_I2C_IsDeviceReady+0x258>)
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa84 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe0:	d103      	bne.n	8005fea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0b6      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fee:	897b      	ldrh	r3, [r7, #10]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ffc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005ffe:	f7fe fd8f 	bl	8004b20 <HAL_GetTick>
 8006002:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	bf0c      	ite	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	2300      	movne	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006032:	e025      	b.n	8006080 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7fe fd74 	bl	8004b20 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <HAL_I2C_IsDeviceReady+0x13a>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22a0      	movs	r2, #160	; 0xa0
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2ba0      	cmp	r3, #160	; 0xa0
 800608a:	d005      	beq.n	8006098 <HAL_I2C_IsDeviceReady+0x188>
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <HAL_I2C_IsDeviceReady+0x188>
 8006092:	7dbb      	ldrb	r3, [r7, #22]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0cd      	beq.n	8006034 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d129      	bne.n	8006102 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2319      	movs	r3, #25
 80060da:	2201      	movs	r2, #1
 80060dc:	4921      	ldr	r1, [pc, #132]	; (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f9f8 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e036      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e02c      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006110:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800611a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2319      	movs	r3, #25
 8006122:	2201      	movs	r2, #1
 8006124:	490f      	ldr	r1, [pc, #60]	; (8006164 <HAL_I2C_IsDeviceReady+0x254>)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f9d4 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e012      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	3301      	adds	r3, #1
 800613a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	f4ff af32 	bcc.w	8005faa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00100002 	.word	0x00100002
 8006168:	ffff0000 	.word	0xffff0000

0800616c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	d124      	bne.n	80061ca <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2228      	movs	r2, #40	; 0x28
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d007      	beq.n	80061a6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80061c4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2200      	movs	r2, #0
 800620a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f960 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d103      	bne.n	8006232 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e05f      	b.n	80062f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	492d      	ldr	r1, [pc, #180]	; (8006300 <I2C_RequestMemoryWrite+0x128>)
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f998 	bl	8006582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04c      	b.n	80062f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006274:	6a39      	ldr	r1, [r7, #32]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa02 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b04      	cmp	r3, #4
 8006288:	d107      	bne.n	800629a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e02b      	b.n	80062f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d105      	bne.n	80062b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062a4:	893b      	ldrh	r3, [r7, #8]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	e021      	b.n	80062f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062b0:	893b      	ldrh	r3, [r7, #8]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f9dc 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00d      	beq.n	80062ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d107      	bne.n	80062e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e005      	b.n	80062f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ea:	893b      	ldrh	r3, [r7, #8]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	00010002 	.word	0x00010002

08006304 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4603      	mov	r3, r0
 8006314:	817b      	strh	r3, [r7, #10]
 8006316:	460b      	mov	r3, r1
 8006318:	813b      	strh	r3, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800632c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800633c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	2200      	movs	r2, #0
 8006346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f8c2 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006364:	d103      	bne.n	800636e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e0aa      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	4952      	ldr	r1, [pc, #328]	; (80064d0 <I2C_RequestMemoryRead+0x1cc>)
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f8fa 	bl	8006582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e097      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	6a39      	ldr	r1, [r7, #32]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f964 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00d      	beq.n	80063da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d107      	bne.n	80063d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e076      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d105      	bne.n	80063ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063e0:	893b      	ldrh	r3, [r7, #8]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]
 80063ea:	e021      	b.n	8006430 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063ec:	893b      	ldrh	r3, [r7, #8]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	6a39      	ldr	r1, [r7, #32]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f93e 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00d      	beq.n	8006426 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	2b04      	cmp	r3, #4
 8006410:	d107      	bne.n	8006422 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e050      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006426:	893b      	ldrh	r3, [r7, #8]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	6a39      	ldr	r1, [r7, #32]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f923 	bl	8006680 <I2C_WaitOnTXEFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00d      	beq.n	800645c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b04      	cmp	r3, #4
 8006446:	d107      	bne.n	8006458 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006456:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e035      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2200      	movs	r2, #0
 8006474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f82b 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006492:	d103      	bne.n	800649c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e013      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064a0:	897b      	ldrh	r3, [r7, #10]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	4906      	ldr	r1, [pc, #24]	; (80064d0 <I2C_RequestMemoryRead+0x1cc>)
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f863 	bl	8006582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	00010002 	.word	0x00010002

080064d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064e4:	e025      	b.n	8006532 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d021      	beq.n	8006532 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fe fb17 	bl	8004b20 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d116      	bne.n	8006532 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e023      	b.n	800657a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d10d      	bne.n	8006558 <I2C_WaitOnFlagUntilTimeout+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	e00c      	b.n	8006572 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	43da      	mvns	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4013      	ands	r3, r2
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	429a      	cmp	r2, r3
 8006576:	d0b6      	beq.n	80064e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006590:	e051      	b.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a0:	d123      	bne.n	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0204 	orr.w	r2, r3, #4
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e046      	b.n	8006678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d021      	beq.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fe fa95 	bl	8004b20 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d116      	bne.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e020      	b.n	8006678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10c      	bne.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	43da      	mvns	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	e00b      	b.n	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	43da      	mvns	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf14      	ite	ne
 800666c:	2301      	movne	r3, #1
 800666e:	2300      	moveq	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d18d      	bne.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668c:	e02d      	b.n	80066ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f8ce 	bl	8006830 <I2C_IsAcknowledgeFailed>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e02d      	b.n	80066fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d021      	beq.n	80066ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fe fa3b 	bl	8004b20 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d116      	bne.n	80066ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f043 0220 	orr.w	r2, r3, #32
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e007      	b.n	80066fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b80      	cmp	r3, #128	; 0x80
 80066f6:	d1ca      	bne.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800670e:	e02d      	b.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f88d 	bl	8006830 <I2C_IsAcknowledgeFailed>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e02d      	b.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d021      	beq.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006728:	f7fe f9fa 	bl	8004b20 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d302      	bcc.n	800673e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d116      	bne.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e007      	b.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b04      	cmp	r3, #4
 8006778:	d1ca      	bne.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006790:	e042      	b.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b10      	cmp	r3, #16
 800679e:	d119      	bne.n	80067d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0210 	mvn.w	r2, #16
 80067a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e029      	b.n	8006828 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d4:	f7fe f9a4 	bl	8004b20 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d116      	bne.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e007      	b.n	8006828 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d1b5      	bne.n	8006792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	d11b      	bne.n	8006880 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006850:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f043 0204 	orr.w	r2, r3, #4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d129      	bne.n	80068f8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0210 	bic.w	r2, r2, #16
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80068f8:	2302      	movs	r3, #2
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b20      	cmp	r3, #32
 800691e:	d12a      	bne.n	8006976 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2224      	movs	r2, #36	; 0x24
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	f023 030f 	bic.w	r3, r3, #15
 8006946:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	4313      	orrs	r3, r2
 8006950:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	89fa      	ldrh	r2, [r7, #14]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e034      	b.n	8006a00 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800699e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f245 5255 	movw	r2, #21845	; 0x5555
 80069a8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6852      	ldr	r2, [r2, #4]
 80069b2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6892      	ldr	r2, [r2, #8]
 80069bc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80069be:	f7fe f8af 	bl	8004b20 <HAL_GetTick>
 80069c2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80069c4:	e00f      	b.n	80069e6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80069c6:	f7fe f8ab 	bl	8004b20 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b31      	cmp	r3, #49	; 0x31
 80069d2:	d908      	bls.n	80069e6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e00c      	b.n	8006a00 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e8      	bne.n	80069c6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80069fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_PWR_DisableWakeUpPin+0x24>)
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	43db      	mvns	r3, r3
 8006a38:	4904      	ldr	r1, [pc, #16]	; (8006a4c <HAL_PWR_DisableWakeUpPin+0x24>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	604b      	str	r3, [r1, #4]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40007000 	.word	0x40007000

08006a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e264      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d075      	beq.n	8006b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a6e:	4ba3      	ldr	r3, [pc, #652]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d00c      	beq.n	8006a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	4ba0      	ldr	r3, [pc, #640]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d112      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a86:	4b9d      	ldr	r3, [pc, #628]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a92:	d10b      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a94:	4b99      	ldr	r3, [pc, #612]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05b      	beq.n	8006b58 <HAL_RCC_OscConfig+0x108>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d157      	bne.n	8006b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e23f      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d106      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x74>
 8006ab6:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a90      	ldr	r2, [pc, #576]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x98>
 8006ace:	4b8b      	ldr	r3, [pc, #556]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a8a      	ldr	r2, [pc, #552]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a87      	ldr	r2, [pc, #540]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	4b84      	ldr	r3, [pc, #528]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a83      	ldr	r2, [pc, #524]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a80      	ldr	r2, [pc, #512]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fe f80a 	bl	8004b20 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fe f806 	bl	8004b20 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	; 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e204      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b76      	ldr	r3, [pc, #472]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xc0>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fd fff6 	bl	8004b20 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fd fff2 	bl	8004b20 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	; 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1f0      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0xe8>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b66:	4b65      	ldr	r3, [pc, #404]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b72:	4b62      	ldr	r3, [pc, #392]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b5f      	ldr	r3, [pc, #380]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d116      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e1c4      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b56      	ldr	r3, [pc, #344]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4952      	ldr	r1, [pc, #328]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	e03a      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc0:	4b4f      	ldr	r3, [pc, #316]	; (8006d00 <HAL_RCC_OscConfig+0x2b0>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fd ffab 	bl	8004b20 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fd ffa7 	bl	8004b20 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e1a5      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	4b46      	ldr	r3, [pc, #280]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4940      	ldr	r1, [pc, #256]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
 8006c00:	e015      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_RCC_OscConfig+0x2b0>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fd ff8a 	bl	8004b20 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c10:	f7fd ff86 	bl	8004b20 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e184      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d030      	beq.n	8006c9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c42:	4b30      	ldr	r3, [pc, #192]	; (8006d04 <HAL_RCC_OscConfig+0x2b4>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fd ff6a 	bl	8004b20 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c50:	f7fd ff66 	bl	8004b20 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e164      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x200>
 8006c6e:	e015      	b.n	8006c9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c70:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <HAL_RCC_OscConfig+0x2b4>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c76:	f7fd ff53 	bl	8004b20 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7e:	f7fd ff4f 	bl	8004b20 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e14d      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f0      	bne.n	8006c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a0 	beq.w	8006dea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d121      	bne.n	8006d2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf2:	f7fd ff15 	bl	8004b20 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf8:	e011      	b.n	8006d1e <HAL_RCC_OscConfig+0x2ce>
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	42470000 	.word	0x42470000
 8006d04:	42470e80 	.word	0x42470e80
 8006d08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0c:	f7fd ff08 	bl	8004b20 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e106      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1e:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <HAL_RCC_OscConfig+0x4e4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d106      	bne.n	8006d40 <HAL_RCC_OscConfig+0x2f0>
 8006d32:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a80      	ldr	r2, [pc, #512]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3e:	e01c      	b.n	8006d7a <HAL_RCC_OscConfig+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCC_OscConfig+0x312>
 8006d48:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	4a7a      	ldr	r2, [pc, #488]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	6713      	str	r3, [r2, #112]	; 0x70
 8006d54:	4b78      	ldr	r3, [pc, #480]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	4a77      	ldr	r2, [pc, #476]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d60:	e00b      	b.n	8006d7a <HAL_RCC_OscConfig+0x32a>
 8006d62:	4b75      	ldr	r3, [pc, #468]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a74      	ldr	r2, [pc, #464]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6e:	4b72      	ldr	r3, [pc, #456]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	4a71      	ldr	r2, [pc, #452]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d74:	f023 0304 	bic.w	r3, r3, #4
 8006d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d015      	beq.n	8006dae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fd fecd 	bl	8004b20 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fd fec9 	bl	8004b20 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0c5      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da0:	4b65      	ldr	r3, [pc, #404]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ee      	beq.n	8006d8a <HAL_RCC_OscConfig+0x33a>
 8006dac:	e014      	b.n	8006dd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dae:	f7fd feb7 	bl	8004b20 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fd feb3 	bl	8004b20 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e0af      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dcc:	4b5a      	ldr	r3, [pc, #360]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ee      	bne.n	8006db6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b56      	ldr	r3, [pc, #344]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a55      	ldr	r2, [pc, #340]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 809b 	beq.w	8006f2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df4:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d05c      	beq.n	8006eba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d141      	bne.n	8006e8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fd fe87 	bl	8004b20 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fd fe83 	bl	8004b20 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e081      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e28:	4b43      	ldr	r3, [pc, #268]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	019b      	lsls	r3, r3, #6
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	061b      	lsls	r3, r3, #24
 8006e58:	4937      	ldr	r1, [pc, #220]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fd fe5c 	bl	8004b20 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fd fe58 	bl	8004b20 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e056      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x41c>
 8006e8a:	e04e      	b.n	8006f2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fd fe45 	bl	8004b20 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fd fe41 	bl	8004b20 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e03f      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eac:	4b22      	ldr	r3, [pc, #136]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCC_OscConfig+0x44a>
 8006eb8:	e037      	b.n	8006f2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e032      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ec6:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d028      	beq.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d121      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d11a      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006efc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d111      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40007000 	.word	0x40007000
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	42470060 	.word	0x42470060

08006f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0cc      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f54:	4b68      	ldr	r3, [pc, #416]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90c      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f62:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b63      	ldr	r3, [pc, #396]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0b8      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f94:	4b59      	ldr	r3, [pc, #356]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4a58      	ldr	r2, [pc, #352]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a52      	ldr	r2, [pc, #328]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b50      	ldr	r3, [pc, #320]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	494d      	ldr	r1, [pc, #308]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d044      	beq.n	8007060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fde:	4b47      	ldr	r3, [pc, #284]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e07f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e06f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700e:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e067      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f023 0203 	bic.w	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4934      	ldr	r1, [pc, #208]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007030:	f7fd fd76 	bl	8004b20 <HAL_GetTick>
 8007034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007036:	e00a      	b.n	800704e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007038:	f7fd fd72 	bl	8004b20 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	; 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e04f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 020c 	and.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	429a      	cmp	r2, r3
 800705e:	d1eb      	bne.n	8007038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007060:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20c      	bcs.n	8007088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800706e:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e032      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007094:	4b19      	ldr	r3, [pc, #100]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4916      	ldr	r1, [pc, #88]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	490e      	ldr	r1, [pc, #56]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070c6:	f000 f821 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	490a      	ldr	r1, [pc, #40]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 80070d8:	5ccb      	ldrb	r3, [r1, r3]
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fb fe5c 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40023c00 	.word	0x40023c00
 80070fc:	40023800 	.word	0x40023800
 8007100:	08012b5c 	.word	0x08012b5c
 8007104:	20000000 	.word	0x20000000
 8007108:	20000004 	.word	0x20000004

0800710c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	2300      	movs	r3, #0
 800711e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007124:	4b67      	ldr	r3, [pc, #412]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b08      	cmp	r3, #8
 800712e:	d00d      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x40>
 8007130:	2b08      	cmp	r3, #8
 8007132:	f200 80bd 	bhi.w	80072b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x34>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d003      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x3a>
 800713e:	e0b7      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b61      	ldr	r3, [pc, #388]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007142:	60bb      	str	r3, [r7, #8]
       break;
 8007144:	e0b7      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007146:	4b60      	ldr	r3, [pc, #384]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007148:	60bb      	str	r3, [r7, #8]
      break;
 800714a:	e0b4      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800714c:	4b5d      	ldr	r3, [pc, #372]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007154:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007156:	4b5b      	ldr	r3, [pc, #364]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d04d      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b58      	ldr	r3, [pc, #352]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007172:	f04f 0100 	mov.w	r1, #0
 8007176:	ea02 0800 	and.w	r8, r2, r0
 800717a:	ea03 0901 	and.w	r9, r3, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	014b      	lsls	r3, r1, #5
 800718c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007190:	0142      	lsls	r2, r0, #5
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	ebb0 0008 	subs.w	r0, r0, r8
 800719a:	eb61 0109 	sbc.w	r1, r1, r9
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	018b      	lsls	r3, r1, #6
 80071a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ac:	0182      	lsls	r2, r0, #6
 80071ae:	1a12      	subs	r2, r2, r0
 80071b0:	eb63 0301 	sbc.w	r3, r3, r1
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	00d9      	lsls	r1, r3, #3
 80071be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071c2:	00d0      	lsls	r0, r2, #3
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	eb12 0208 	adds.w	r2, r2, r8
 80071cc:	eb43 0309 	adc.w	r3, r3, r9
 80071d0:	f04f 0000 	mov.w	r0, #0
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	0299      	lsls	r1, r3, #10
 80071da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071de:	0290      	lsls	r0, r2, #10
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	f7f9 fd5a 	bl	8000ca8 <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e04a      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fe:	4b31      	ldr	r3, [pc, #196]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	099b      	lsrs	r3, r3, #6
 8007204:	461a      	mov	r2, r3
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	ea02 0400 	and.w	r4, r2, r0
 8007216:	ea03 0501 	and.w	r5, r3, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	014b      	lsls	r3, r1, #5
 8007228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800722c:	0142      	lsls	r2, r0, #5
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	1b00      	subs	r0, r0, r4
 8007234:	eb61 0105 	sbc.w	r1, r1, r5
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	018b      	lsls	r3, r1, #6
 8007242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007246:	0182      	lsls	r2, r0, #6
 8007248:	1a12      	subs	r2, r2, r0
 800724a:	eb63 0301 	sbc.w	r3, r3, r1
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	00d9      	lsls	r1, r3, #3
 8007258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800725c:	00d0      	lsls	r0, r2, #3
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	1912      	adds	r2, r2, r4
 8007264:	eb45 0303 	adc.w	r3, r5, r3
 8007268:	f04f 0000 	mov.w	r0, #0
 800726c:	f04f 0100 	mov.w	r1, #0
 8007270:	0299      	lsls	r1, r3, #10
 8007272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007276:	0290      	lsls	r0, r2, #10
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	f7f9 fd0e 	bl	8000ca8 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4613      	mov	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	3301      	adds	r3, #1
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	60bb      	str	r3, [r7, #8]
      break;
 80072ae:	e002      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072b2:	60bb      	str	r3, [r7, #8]
      break;
 80072b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b6:	68bb      	ldr	r3, [r7, #8]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800
 80072c8:	00f42400 	.word	0x00f42400

080072cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072d0:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072d2:	681b      	ldr	r3, [r3, #0]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000000 	.word	0x20000000

080072e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072e8:	f7ff fff0 	bl	80072cc <HAL_RCC_GetHCLKFreq>
 80072ec:	4602      	mov	r2, r0
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	0a9b      	lsrs	r3, r3, #10
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	4903      	ldr	r1, [pc, #12]	; (8007308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072fa:	5ccb      	ldrb	r3, [r1, r3]
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007300:	4618      	mov	r0, r3
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40023800 	.word	0x40023800
 8007308:	08012b6c 	.word	0x08012b6c

0800730c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007310:	f7ff ffdc 	bl	80072cc <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	0b5b      	lsrs	r3, r3, #13
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4903      	ldr	r1, [pc, #12]	; (8007330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007322:	5ccb      	ldrb	r3, [r1, r3]
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40023800 	.word	0x40023800
 8007330:	08012b6c 	.word	0x08012b6c

08007334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220f      	movs	r2, #15
 8007342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007344:	4b12      	ldr	r3, [pc, #72]	; (8007390 <HAL_RCC_GetClockConfig+0x5c>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0203 	and.w	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <HAL_RCC_GetClockConfig+0x5c>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <HAL_RCC_GetClockConfig+0x5c>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <HAL_RCC_GetClockConfig+0x5c>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	08db      	lsrs	r3, r3, #3
 800736e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <HAL_RCC_GetClockConfig+0x60>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 020f 	and.w	r2, r3, #15
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	601a      	str	r2, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800
 8007394:	40023c00 	.word	0x40023c00

08007398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10b      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d075      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073cc:	4bad      	ldr	r3, [pc, #692]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073d2:	f7fd fba5 	bl	8004b20 <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073d8:	e008      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073da:	f7fd fba1 	bl	8004b20 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e18b      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ec:	4ba6      	ldr	r3, [pc, #664]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	019a      	lsls	r2, r3, #6
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	071b      	lsls	r3, r3, #28
 8007410:	499d      	ldr	r1, [pc, #628]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01f      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007424:	4b98      	ldr	r3, [pc, #608]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742a:	0f1b      	lsrs	r3, r3, #28
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	019a      	lsls	r2, r3, #6
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	061b      	lsls	r3, r3, #24
 800743e:	431a      	orrs	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	071b      	lsls	r3, r3, #28
 8007444:	4990      	ldr	r1, [pc, #576]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800744c:	4b8e      	ldr	r3, [pc, #568]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800744e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007452:	f023 021f 	bic.w	r2, r3, #31
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	3b01      	subs	r3, #1
 800745c:	498a      	ldr	r1, [pc, #552]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	019a      	lsls	r2, r3, #6
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	061b      	lsls	r3, r3, #24
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	071b      	lsls	r3, r3, #28
 8007484:	4980      	ldr	r1, [pc, #512]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800748c:	4b7d      	ldr	r3, [pc, #500]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007492:	f7fd fb45 	bl	8004b20 <HAL_GetTick>
 8007496:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007498:	e008      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800749a:	f7fd fb41 	bl	8004b20 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d901      	bls.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e12b      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ac:	4b76      	ldr	r3, [pc, #472]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d079      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074d0:	4b6e      	ldr	r3, [pc, #440]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074d6:	f7fd fb23 	bl	8004b20 <HAL_GetTick>
 80074da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074dc:	e008      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80074de:	f7fd fb1f 	bl	8004b20 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e109      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074f0:	4b65      	ldr	r3, [pc, #404]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fc:	d0ef      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d020      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800750a:	4b5f      	ldr	r3, [pc, #380]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	0f1b      	lsrs	r3, r3, #28
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	019a      	lsls	r2, r3, #6
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	431a      	orrs	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	071b      	lsls	r3, r3, #28
 800752a:	4957      	ldr	r1, [pc, #348]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007532:	4b55      	ldr	r3, [pc, #340]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	3b01      	subs	r3, #1
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	4950      	ldr	r1, [pc, #320]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007558:	4b4b      	ldr	r3, [pc, #300]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755e:	0e1b      	lsrs	r3, r3, #24
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	019a      	lsls	r2, r3, #6
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	061b      	lsls	r3, r3, #24
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	071b      	lsls	r3, r3, #28
 8007578:	4943      	ldr	r1, [pc, #268]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007580:	4b41      	ldr	r3, [pc, #260]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	493e      	ldr	r1, [pc, #248]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007596:	4b3d      	ldr	r3, [pc, #244]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800759c:	f7fd fac0 	bl	8004b20 <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075a2:	e008      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80075a4:	f7fd fabc 	bl	8004b20 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0a6      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075b6:	4b34      	ldr	r3, [pc, #208]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c2:	d1ef      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 808d 	beq.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e0:	6413      	str	r3, [r2, #64]	; 0x40
 80075e2:	4b29      	ldr	r3, [pc, #164]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075ee:	4b28      	ldr	r3, [pc, #160]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a27      	ldr	r2, [pc, #156]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80075f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075fa:	f7fd fa91 	bl	8004b20 <HAL_GetTick>
 80075fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007600:	e008      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007602:	f7fd fa8d 	bl	8004b20 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d901      	bls.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e077      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0f0      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007620:	4b19      	ldr	r3, [pc, #100]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007628:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d039      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	429a      	cmp	r2, r3
 800763c:	d032      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007646:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007648:	4b12      	ldr	r3, [pc, #72]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b01      	cmp	r3, #1
 8007664:	d11e      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007666:	f7fd fa5b 	bl	8004b20 <HAL_GetTick>
 800766a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766c:	e014      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fd fa57 	bl	8004b20 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f241 3288 	movw	r2, #5000	; 0x1388
 800767c:	4293      	cmp	r3, r2
 800767e:	d90b      	bls.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e03f      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007684:	42470068 	.word	0x42470068
 8007688:	40023800 	.word	0x40023800
 800768c:	42470070 	.word	0x42470070
 8007690:	40007000 	.word	0x40007000
 8007694:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0e4      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b0:	d10d      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x336>
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c6:	4911      	ldr	r1, [pc, #68]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	608b      	str	r3, [r1, #8]
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076ce:	4b0f      	ldr	r3, [pc, #60]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4a0e      	ldr	r2, [pc, #56]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076d8:	6093      	str	r3, [r2, #8]
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e6:	4909      	ldr	r1, [pc, #36]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007700:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40023800 	.word	0x40023800
 8007710:	424711e0 	.word	0x424711e0

08007714 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e083      	b.n	800782e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7f5b      	ldrb	r3, [r3, #29]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fb f940 	bl	80029bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	22ca      	movs	r2, #202	; 0xca
 8007748:	625a      	str	r2, [r3, #36]	; 0x24
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2253      	movs	r2, #83	; 0x53
 8007750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb7a 	bl	8007e4c <RTC_EnterInitMode>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	22ff      	movs	r2, #255	; 0xff
 8007764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e05e      	b.n	800782e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800777e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007782:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6899      	ldr	r1, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	68d2      	ldr	r2, [r2, #12]
 80077aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6919      	ldr	r1, [r3, #16]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	041a      	lsls	r2, r3, #16
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10e      	bne.n	80077fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fb0c 	bl	8007dfc <HAL_RTC_WaitForSynchro>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	22ff      	movs	r2, #255	; 0xff
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2204      	movs	r2, #4
 80077f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e018      	b.n	800782e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800782c:	2300      	movs	r3, #0
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007836:	b590      	push	{r4, r7, lr}
 8007838:	b087      	sub	sp, #28
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	7f1b      	ldrb	r3, [r3, #28]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_RTC_SetTime+0x1c>
 800784e:	2302      	movs	r3, #2
 8007850:	e0aa      	b.n	80079a8 <HAL_RTC_SetTime+0x172>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2202      	movs	r2, #2
 800785c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d126      	bne.n	80078b2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fb11 	bl	8007ea4 <RTC_ByteToBcd2>
 8007882:	4603      	mov	r3, r0
 8007884:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fb0a 	bl	8007ea4 <RTC_ByteToBcd2>
 8007890:	4603      	mov	r3, r0
 8007892:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007894:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	789b      	ldrb	r3, [r3, #2]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fb02 	bl	8007ea4 <RTC_ByteToBcd2>
 80078a0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80078a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e018      	b.n	80078e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80078d2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80078d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	22ca      	movs	r2, #202	; 0xca
 80078ea:	625a      	str	r2, [r3, #36]	; 0x24
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2253      	movs	r2, #83	; 0x53
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 faa9 	bl	8007e4c <RTC_EnterInitMode>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2204      	movs	r2, #4
 800790c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e047      	b.n	80079a8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007922:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007926:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007936:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6899      	ldr	r1, [r3, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	431a      	orrs	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800795e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d111      	bne.n	8007992 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fa44 	bl	8007dfc <HAL_RTC_WaitForSynchro>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	22ff      	movs	r2, #255	; 0xff
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2204      	movs	r2, #4
 8007986:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e00a      	b.n	80079a8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	22ff      	movs	r2, #255	; 0xff
 8007998:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80079a6:	2300      	movs	r3, #0
  }
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd90      	pop	{r4, r7, pc}

080079b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7f1b      	ldrb	r3, [r3, #28]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_RTC_SetDate+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e094      	b.n	8007af6 <HAL_RTC_SetDate+0x146>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10e      	bne.n	80079fc <HAL_RTC_SetDate+0x4c>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	330a      	adds	r3, #10
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11c      	bne.n	8007a3c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	78db      	ldrb	r3, [r3, #3]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fa4c 	bl	8007ea4 <RTC_ByteToBcd2>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fa45 	bl	8007ea4 <RTC_ByteToBcd2>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a1e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	789b      	ldrb	r3, [r3, #2]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fa3d 	bl	8007ea4 <RTC_ByteToBcd2>
 8007a2a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007a2c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e00e      	b.n	8007a5a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	78db      	ldrb	r3, [r3, #3]
 8007a40:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a48:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007a4e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	22ca      	movs	r2, #202	; 0xca
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2253      	movs	r2, #83	; 0x53
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f9ee 	bl	8007e4c <RTC_EnterInitMode>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	22ff      	movs	r2, #255	; 0xff
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2204      	movs	r2, #4
 8007a82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e033      	b.n	8007af6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d111      	bne.n	8007ae0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f99d 	bl	8007dfc <HAL_RTC_WaitForSynchro>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	22ff      	movs	r2, #255	; 0xff
 8007ace:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e00a      	b.n	8007af6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd90      	pop	{r4, r7, pc}
	...

08007b00 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b089      	sub	sp, #36	; 0x24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007b14:	4b93      	ldr	r3, [pc, #588]	; (8007d64 <HAL_RTC_SetAlarm_IT+0x264>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a93      	ldr	r2, [pc, #588]	; (8007d68 <HAL_RTC_SetAlarm_IT+0x268>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	0adb      	lsrs	r3, r3, #11
 8007b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	7f1b      	ldrb	r3, [r3, #28]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_RTC_SetAlarm_IT+0x36>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e111      	b.n	8007d5a <HAL_RTC_SetAlarm_IT+0x25a>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d137      	bne.n	8007bb8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f99f 	bl	8007ea4 <RTC_ByteToBcd2>
 8007b66:	4603      	mov	r3, r0
 8007b68:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f998 	bl	8007ea4 <RTC_ByteToBcd2>
 8007b74:	4603      	mov	r3, r0
 8007b76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007b78:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	789b      	ldrb	r3, [r3, #2]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f990 	bl	8007ea4 <RTC_ByteToBcd2>
 8007b84:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007b86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78db      	ldrb	r3, [r3, #3]
 8007b8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b90:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f982 	bl	8007ea4 <RTC_ByteToBcd2>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007ba4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007bac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	e023      	b.n	8007c00 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007bd8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007bde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	78db      	ldrb	r3, [r3, #3]
 8007be4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007be6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007bf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007bf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	22ca      	movs	r2, #202	; 0xca
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2253      	movs	r2, #83	; 0x53
 8007c1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c24:	d141      	bne.n	8007caa <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c34:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007c46:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	1e5a      	subs	r2, r3, #1
 8007c4c:	617a      	str	r2, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	22ff      	movs	r2, #255	; 0xff
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e077      	b.n	8007d5a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0e7      	beq.n	8007c48 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	e040      	b.n	8007d2c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cb8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007cca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	617a      	str	r2, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	22ff      	movs	r2, #255	; 0xff
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e035      	b.n	8007d5a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0e7      	beq.n	8007ccc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d2a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <HAL_RTC_SetAlarm_IT+0x26c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <HAL_RTC_SetAlarm_IT+0x26c>)
 8007d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d36:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <HAL_RTC_SetAlarm_IT+0x26c>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <HAL_RTC_SetAlarm_IT+0x26c>)
 8007d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d42:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	22ff      	movs	r2, #255	; 0xff
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3724      	adds	r7, #36	; 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd90      	pop	{r4, r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000000 	.word	0x20000000
 8007d68:	10624dd3 	.word	0x10624dd3
 8007d6c:	40013c00 	.word	0x40013c00

08007d70 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d012      	beq.n	8007dac <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7fc fd9b 	bl	80048d0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007daa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d012      	beq.n	8007de0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8e1 	bl	8007f90 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007dde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007de6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	775a      	strb	r2, [r3, #29]
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40013c00 	.word	0x40013c00

08007dfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e18:	f7fc fe82 	bl	8004b20 <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e1e:	e009      	b.n	8007e34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e20:	f7fc fe7e 	bl	8004b20 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2e:	d901      	bls.n	8007e34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e007      	b.n	8007e44 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ee      	beq.n	8007e20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d119      	bne.n	8007e9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e70:	f7fc fe56 	bl	8004b20 <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e76:	e009      	b.n	8007e8c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e78:	f7fc fe52 	bl	8004b20 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e86:	d901      	bls.n	8007e8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e007      	b.n	8007e9c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ee      	beq.n	8007e78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007eb2:	e005      	b.n	8007ec0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	3b0a      	subs	r3, #10
 8007ebe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	d8f6      	bhi.n	8007eb4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	7f1b      	ldrb	r3, [r3, #28]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e047      	b.n	8007f88 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	22ca      	movs	r2, #202	; 0xca
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2253      	movs	r2, #83	; 0x53
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f22:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f32:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f34:	f7fc fdf4 	bl	8004b20 <HAL_GetTick>
 8007f38:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f3a:	e013      	b.n	8007f64 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f3c:	f7fc fdf0 	bl	8004b20 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f4a:	d90b      	bls.n	8007f64 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2203      	movs	r2, #3
 8007f58:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e011      	b.n	8007f88 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0e4      	beq.n	8007f3c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e07b      	b.n	80080ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d108      	bne.n	8007fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fc6:	d009      	beq.n	8007fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	61da      	str	r2, [r3, #28]
 8007fce:	e005      	b.n	8007fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fa fd12 	bl	8002a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008060:	ea42 0103 	orr.w	r1, r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	f003 0104 	and.w	r1, r3, #4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	f003 0210 	and.w	r2, r3, #16
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800809c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_SPI_Transmit+0x22>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e126      	b.n	8008326 <HAL_SPI_Transmit+0x270>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080e0:	f7fc fd1e 	bl	8004b20 <HAL_GetTick>
 80080e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d002      	beq.n	80080fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080f6:	2302      	movs	r3, #2
 80080f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080fa:	e10b      	b.n	8008314 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_SPI_Transmit+0x52>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800810c:	e102      	b.n	8008314 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2203      	movs	r2, #3
 8008112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008154:	d10f      	bne.n	8008176 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d007      	beq.n	8008194 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800819c:	d14b      	bne.n	8008236 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_SPI_Transmit+0xf6>
 80081a6:	8afb      	ldrh	r3, [r7, #22]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d13e      	bne.n	800822a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	881a      	ldrh	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	1c9a      	adds	r2, r3, #2
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081d0:	e02b      	b.n	800822a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d112      	bne.n	8008206 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	881a      	ldrh	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	1c9a      	adds	r2, r3, #2
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	86da      	strh	r2, [r3, #54]	; 0x36
 8008204:	e011      	b.n	800822a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008206:	f7fc fc8b 	bl	8004b20 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d803      	bhi.n	800821e <HAL_SPI_Transmit+0x168>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d102      	bne.n	8008224 <HAL_SPI_Transmit+0x16e>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008228:	e074      	b.n	8008314 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800822e:	b29b      	uxth	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1ce      	bne.n	80081d2 <HAL_SPI_Transmit+0x11c>
 8008234:	e04c      	b.n	80082d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_SPI_Transmit+0x18e>
 800823e:	8afb      	ldrh	r3, [r7, #22]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d140      	bne.n	80082c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	330c      	adds	r3, #12
 800824e:	7812      	ldrb	r2, [r2, #0]
 8008250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800826a:	e02c      	b.n	80082c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b02      	cmp	r3, #2
 8008278:	d113      	bne.n	80082a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	7812      	ldrb	r2, [r2, #0]
 8008286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	86da      	strh	r2, [r3, #54]	; 0x36
 80082a0:	e011      	b.n	80082c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082a2:	f7fc fc3d 	bl	8004b20 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d803      	bhi.n	80082ba <HAL_SPI_Transmit+0x204>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d102      	bne.n	80082c0 <HAL_SPI_Transmit+0x20a>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082c4:	e026      	b.n	8008314 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1cd      	bne.n	800826c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fa55 	bl	8008784 <SPI_EndRxTxTransaction>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082ee:	2300      	movs	r3, #0
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	77fb      	strb	r3, [r7, #31]
 8008310:	e000      	b.n	8008314 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008312:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008324:	7ffb      	ldrb	r3, [r7, #31]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b08c      	sub	sp, #48	; 0x30
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800833c:	2301      	movs	r3, #1
 800833e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <HAL_SPI_TransmitReceive+0x26>
 8008350:	2302      	movs	r3, #2
 8008352:	e18a      	b.n	800866a <HAL_SPI_TransmitReceive+0x33c>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800835c:	f7fc fbe0 	bl	8004b20 <HAL_GetTick>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008372:	887b      	ldrh	r3, [r7, #2]
 8008374:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800837a:	2b01      	cmp	r3, #1
 800837c:	d00f      	beq.n	800839e <HAL_SPI_TransmitReceive+0x70>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008384:	d107      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x68>
 800838e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008392:	2b04      	cmp	r3, #4
 8008394:	d003      	beq.n	800839e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008396:	2302      	movs	r3, #2
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800839c:	e15b      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x82>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x82>
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083b6:	e14e      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d003      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2205      	movs	r2, #5
 80083c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	887a      	ldrh	r2, [r7, #2]
 80083dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	887a      	ldrh	r2, [r7, #2]
 80083e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	887a      	ldrh	r2, [r7, #2]
 80083ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	887a      	ldrh	r2, [r7, #2]
 80083f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d007      	beq.n	8008420 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800841e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008428:	d178      	bne.n	800851c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_SPI_TransmitReceive+0x10a>
 8008432:	8b7b      	ldrh	r3, [r7, #26]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d166      	bne.n	8008506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	881a      	ldrh	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	1c9a      	adds	r2, r3, #2
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800845c:	e053      	b.n	8008506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d11b      	bne.n	80084a4 <HAL_SPI_TransmitReceive+0x176>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d016      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x176>
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d113      	bne.n	80084a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d119      	bne.n	80084e6 <HAL_SPI_TransmitReceive+0x1b8>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d014      	beq.n	80084e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	b292      	uxth	r2, r2
 80084c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084e2:	2301      	movs	r3, #1
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084e6:	f7fc fb1b 	bl	8004b20 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d807      	bhi.n	8008506 <HAL_SPI_TransmitReceive+0x1d8>
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d003      	beq.n	8008506 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008504:	e0a7      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1a6      	bne.n	800845e <HAL_SPI_TransmitReceive+0x130>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1a1      	bne.n	800845e <HAL_SPI_TransmitReceive+0x130>
 800851a:	e07c      	b.n	8008616 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_SPI_TransmitReceive+0x1fc>
 8008524:	8b7b      	ldrh	r3, [r7, #26]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d16b      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	330c      	adds	r3, #12
 8008534:	7812      	ldrb	r2, [r2, #0]
 8008536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008550:	e057      	b.n	8008602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b02      	cmp	r3, #2
 800855e:	d11c      	bne.n	800859a <HAL_SPI_TransmitReceive+0x26c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d017      	beq.n	800859a <HAL_SPI_TransmitReceive+0x26c>
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d114      	bne.n	800859a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d119      	bne.n	80085dc <HAL_SPI_TransmitReceive+0x2ae>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d014      	beq.n	80085dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	b2d2      	uxtb	r2, r2
 80085be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085d8:	2301      	movs	r3, #1
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085dc:	f7fc faa0 	bl	8004b20 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d803      	bhi.n	80085f4 <HAL_SPI_TransmitReceive+0x2c6>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d102      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x2cc>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008600:	e029      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1a2      	bne.n	8008552 <HAL_SPI_TransmitReceive+0x224>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d19d      	bne.n	8008552 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f8b2 	bl	8008784 <SPI_EndRxTxTransaction>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008632:	e010      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	e000      	b.n	8008656 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800866a:	4618      	mov	r0, r3
 800866c:	3730      	adds	r7, #48	; 0x30
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008684:	f7fc fa4c 	bl	8004b20 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4413      	add	r3, r2
 8008692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008694:	f7fc fa44 	bl	8004b20 <HAL_GetTick>
 8008698:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800869a:	4b39      	ldr	r3, [pc, #228]	; (8008780 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	015b      	lsls	r3, r3, #5
 80086a0:	0d1b      	lsrs	r3, r3, #20
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
 80086a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086aa:	e054      	b.n	8008756 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b2:	d050      	beq.n	8008756 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086b4:	f7fc fa34 	bl	8004b20 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d902      	bls.n	80086ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d13d      	bne.n	8008746 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e2:	d111      	bne.n	8008708 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ec:	d004      	beq.n	80086f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f6:	d107      	bne.n	8008708 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008710:	d10f      	bne.n	8008732 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e017      	b.n	8008776 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	3b01      	subs	r3, #1
 8008754:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4013      	ands	r3, r2
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	429a      	cmp	r2, r3
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	429a      	cmp	r2, r3
 8008772:	d19b      	bne.n	80086ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3720      	adds	r7, #32
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000000 	.word	0x20000000

08008784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008790:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <SPI_EndRxTxTransaction+0x7c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1b      	ldr	r2, [pc, #108]	; (8008804 <SPI_EndRxTxTransaction+0x80>)
 8008796:	fba2 2303 	umull	r2, r3, r2, r3
 800879a:	0d5b      	lsrs	r3, r3, #21
 800879c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087a0:	fb02 f303 	mul.w	r3, r2, r3
 80087a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ae:	d112      	bne.n	80087d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	2180      	movs	r1, #128	; 0x80
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff ff5a 	bl	8008674 <SPI_WaitFlagStateUntilTimeout>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d016      	beq.n	80087f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	f043 0220 	orr.w	r2, r3, #32
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e00f      	b.n	80087f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00a      	beq.n	80087f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	3b01      	subs	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ec:	2b80      	cmp	r3, #128	; 0x80
 80087ee:	d0f2      	beq.n	80087d6 <SPI_EndRxTxTransaction+0x52>
 80087f0:	e000      	b.n	80087f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80087f2:	bf00      	nop
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000000 	.word	0x20000000
 8008804:	165e9f81 	.word	0x165e9f81

08008808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e041      	b.n	800889e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f839 	bl	80088a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f000 faea 	bl	8008e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d001      	beq.n	80088d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e04e      	b.n	8008972 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0201 	orr.w	r2, r2, #1
 80088ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a23      	ldr	r2, [pc, #140]	; (8008980 <HAL_TIM_Base_Start_IT+0xc4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d022      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fe:	d01d      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1f      	ldr	r2, [pc, #124]	; (8008984 <HAL_TIM_Base_Start_IT+0xc8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d018      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <HAL_TIM_Base_Start_IT+0xcc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d013      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1c      	ldr	r2, [pc, #112]	; (800898c <HAL_TIM_Base_Start_IT+0xd0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00e      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <HAL_TIM_Base_Start_IT+0xd4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d009      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a19      	ldr	r2, [pc, #100]	; (8008994 <HAL_TIM_Base_Start_IT+0xd8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x80>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <HAL_TIM_Base_Start_IT+0xdc>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d111      	bne.n	8008960 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b06      	cmp	r3, #6
 800894c:	d010      	beq.n	8008970 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f042 0201 	orr.w	r2, r2, #1
 800895c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895e:	e007      	b.n	8008970 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40010000 	.word	0x40010000
 8008984:	40000400 	.word	0x40000400
 8008988:	40000800 	.word	0x40000800
 800898c:	40000c00 	.word	0x40000c00
 8008990:	40010400 	.word	0x40010400
 8008994:	40014000 	.word	0x40014000
 8008998:	40001800 	.word	0x40001800

0800899c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e041      	b.n	8008a32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fa f8e2 	bl	8002b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f000 fa20 	bl	8008e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d122      	bne.n	8008a96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d11b      	bne.n	8008a96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f06f 0202 	mvn.w	r2, #2
 8008a66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9b1 	bl	8008de4 <HAL_TIM_IC_CaptureCallback>
 8008a82:	e005      	b.n	8008a90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9a3 	bl	8008dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9b4 	bl	8008df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d122      	bne.n	8008aea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d11b      	bne.n	8008aea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f06f 0204 	mvn.w	r2, #4
 8008aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f987 	bl	8008de4 <HAL_TIM_IC_CaptureCallback>
 8008ad6:	e005      	b.n	8008ae4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f979 	bl	8008dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f98a 	bl	8008df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f003 0308 	and.w	r3, r3, #8
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d122      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b08      	cmp	r3, #8
 8008b04:	d11b      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f06f 0208 	mvn.w	r2, #8
 8008b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2204      	movs	r2, #4
 8008b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f95d 	bl	8008de4 <HAL_TIM_IC_CaptureCallback>
 8008b2a:	e005      	b.n	8008b38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f94f 	bl	8008dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f960 	bl	8008df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b10      	cmp	r3, #16
 8008b4a:	d122      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d11b      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0210 	mvn.w	r2, #16
 8008b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2208      	movs	r2, #8
 8008b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f933 	bl	8008de4 <HAL_TIM_IC_CaptureCallback>
 8008b7e:	e005      	b.n	8008b8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f925 	bl	8008dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f936 	bl	8008df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10e      	bne.n	8008bbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d107      	bne.n	8008bbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f06f 0201 	mvn.w	r2, #1
 8008bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7f9 fd9f 	bl	80026fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc8:	2b80      	cmp	r3, #128	; 0x80
 8008bca:	d10e      	bne.n	8008bea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d107      	bne.n	8008bea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fbf1 	bl	80093cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	d10e      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	d107      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f8fb 	bl	8008e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d10e      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f06f 0220 	mvn.w	r2, #32
 8008c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fbbb 	bl	80093b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e0ae      	b.n	8008dc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	f200 809f 	bhi.w	8008db8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008cb5 	.word	0x08008cb5
 8008c84:	08008db9 	.word	0x08008db9
 8008c88:	08008db9 	.word	0x08008db9
 8008c8c:	08008db9 	.word	0x08008db9
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008db9 	.word	0x08008db9
 8008c98:	08008db9 	.word	0x08008db9
 8008c9c:	08008db9 	.word	0x08008db9
 8008ca0:	08008d37 	.word	0x08008d37
 8008ca4:	08008db9 	.word	0x08008db9
 8008ca8:	08008db9 	.word	0x08008db9
 8008cac:	08008db9 	.word	0x08008db9
 8008cb0:	08008d77 	.word	0x08008d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f950 	bl	8008f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0208 	orr.w	r2, r2, #8
 8008cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0204 	bic.w	r2, r2, #4
 8008cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6999      	ldr	r1, [r3, #24]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	619a      	str	r2, [r3, #24]
      break;
 8008cf2:	e064      	b.n	8008dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68b9      	ldr	r1, [r7, #8]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f9a0 	bl	8009040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699a      	ldr	r2, [r3, #24]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6999      	ldr	r1, [r3, #24]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	021a      	lsls	r2, r3, #8
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	619a      	str	r2, [r3, #24]
      break;
 8008d34:	e043      	b.n	8008dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 f9f5 	bl	800912c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69da      	ldr	r2, [r3, #28]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f042 0208 	orr.w	r2, r2, #8
 8008d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69da      	ldr	r2, [r3, #28]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0204 	bic.w	r2, r2, #4
 8008d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69d9      	ldr	r1, [r3, #28]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	61da      	str	r2, [r3, #28]
      break;
 8008d74:	e023      	b.n	8008dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fa49 	bl	8009214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69da      	ldr	r2, [r3, #28]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69d9      	ldr	r1, [r3, #28]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	021a      	lsls	r2, r3, #8
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	61da      	str	r2, [r3, #28]
      break;
 8008db6:	e002      	b.n	8008dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a40      	ldr	r2, [pc, #256]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d00f      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a3d      	ldr	r2, [pc, #244]	; (8008f38 <TIM_Base_SetConfig+0x118>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00b      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a3c      	ldr	r2, [pc, #240]	; (8008f3c <TIM_Base_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d007      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a3b      	ldr	r2, [pc, #236]	; (8008f40 <TIM_Base_SetConfig+0x120>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a3a      	ldr	r2, [pc, #232]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d108      	bne.n	8008e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2f      	ldr	r2, [pc, #188]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d02b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e80:	d027      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a2c      	ldr	r2, [pc, #176]	; (8008f38 <TIM_Base_SetConfig+0x118>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d023      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a2b      	ldr	r2, [pc, #172]	; (8008f3c <TIM_Base_SetConfig+0x11c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d01f      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a2a      	ldr	r2, [pc, #168]	; (8008f40 <TIM_Base_SetConfig+0x120>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d017      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a28      	ldr	r2, [pc, #160]	; (8008f48 <TIM_Base_SetConfig+0x128>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <TIM_Base_SetConfig+0x12c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00f      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a26      	ldr	r2, [pc, #152]	; (8008f50 <TIM_Base_SetConfig+0x130>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00b      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a25      	ldr	r2, [pc, #148]	; (8008f54 <TIM_Base_SetConfig+0x134>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d007      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a24      	ldr	r2, [pc, #144]	; (8008f58 <TIM_Base_SetConfig+0x138>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a23      	ldr	r2, [pc, #140]	; (8008f5c <TIM_Base_SetConfig+0x13c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d108      	bne.n	8008ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <TIM_Base_SetConfig+0x114>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_Base_SetConfig+0xf8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <TIM_Base_SetConfig+0x124>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d103      	bne.n	8008f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	615a      	str	r2, [r3, #20]
}
 8008f26:	bf00      	nop
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000
 8008f38:	40000400 	.word	0x40000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	40000c00 	.word	0x40000c00
 8008f44:	40010400 	.word	0x40010400
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800
 8008f54:	40001800 	.word	0x40001800
 8008f58:	40001c00 	.word	0x40001c00
 8008f5c:	40002000 	.word	0x40002000

08008f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f023 0201 	bic.w	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0303 	bic.w	r3, r3, #3
 8008f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f023 0302 	bic.w	r3, r3, #2
 8008fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a20      	ldr	r2, [pc, #128]	; (8009038 <TIM_OC1_SetConfig+0xd8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d003      	beq.n	8008fc4 <TIM_OC1_SetConfig+0x64>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1f      	ldr	r2, [pc, #124]	; (800903c <TIM_OC1_SetConfig+0xdc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d10c      	bne.n	8008fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f023 0308 	bic.w	r3, r3, #8
 8008fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 0304 	bic.w	r3, r3, #4
 8008fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a15      	ldr	r2, [pc, #84]	; (8009038 <TIM_OC1_SetConfig+0xd8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d003      	beq.n	8008fee <TIM_OC1_SetConfig+0x8e>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a14      	ldr	r2, [pc, #80]	; (800903c <TIM_OC1_SetConfig+0xdc>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d111      	bne.n	8009012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	621a      	str	r2, [r3, #32]
}
 800902c:	bf00      	nop
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	40010000 	.word	0x40010000
 800903c:	40010400 	.word	0x40010400

08009040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	f023 0210 	bic.w	r2, r3, #16
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800906e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f023 0320 	bic.w	r3, r3, #32
 800908a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a22      	ldr	r2, [pc, #136]	; (8009124 <TIM_OC2_SetConfig+0xe4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_OC2_SetConfig+0x68>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a21      	ldr	r2, [pc, #132]	; (8009128 <TIM_OC2_SetConfig+0xe8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d10d      	bne.n	80090c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a17      	ldr	r2, [pc, #92]	; (8009124 <TIM_OC2_SetConfig+0xe4>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_OC2_SetConfig+0x94>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a16      	ldr	r2, [pc, #88]	; (8009128 <TIM_OC2_SetConfig+0xe8>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d113      	bne.n	80090fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	621a      	str	r2, [r3, #32]
}
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40010000 	.word	0x40010000
 8009128:	40010400 	.word	0x40010400

0800912c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a21      	ldr	r2, [pc, #132]	; (800920c <TIM_OC3_SetConfig+0xe0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_OC3_SetConfig+0x66>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a20      	ldr	r2, [pc, #128]	; (8009210 <TIM_OC3_SetConfig+0xe4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d10d      	bne.n	80091ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a16      	ldr	r2, [pc, #88]	; (800920c <TIM_OC3_SetConfig+0xe0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_OC3_SetConfig+0x92>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a15      	ldr	r2, [pc, #84]	; (8009210 <TIM_OC3_SetConfig+0xe4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d113      	bne.n	80091e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	621a      	str	r2, [r3, #32]
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	40010000 	.word	0x40010000
 8009210:	40010400 	.word	0x40010400

08009214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800924a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800925e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	031b      	lsls	r3, r3, #12
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a12      	ldr	r2, [pc, #72]	; (80092b8 <TIM_OC4_SetConfig+0xa4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_OC4_SetConfig+0x68>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a11      	ldr	r2, [pc, #68]	; (80092bc <TIM_OC4_SetConfig+0xa8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d109      	bne.n	8009290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	019b      	lsls	r3, r3, #6
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	621a      	str	r2, [r3, #32]
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010400 	.word	0x40010400

080092c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e05a      	b.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a21      	ldr	r2, [pc, #132]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d022      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009324:	d01d      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d018      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1b      	ldr	r2, [pc, #108]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d013      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00e      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a18      	ldr	r2, [pc, #96]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d009      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a17      	ldr	r2, [pc, #92]	; (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d004      	beq.n	8009362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d10c      	bne.n	800937c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4313      	orrs	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40000c00 	.word	0x40000c00
 80093ac:	40010400 	.word	0x40010400
 80093b0:	40014000 	.word	0x40014000
 80093b4:	40001800 	.word	0x40001800

080093b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e03f      	b.n	8009472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7f9 fc18 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2224      	movs	r2, #36	; 0x24
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f9cb 	bl	80097c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	695a      	ldr	r2, [r3, #20]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68da      	ldr	r2, [r3, #12]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b08a      	sub	sp, #40	; 0x28
 800947e:	af02      	add	r7, sp, #8
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b20      	cmp	r3, #32
 8009498:	d17c      	bne.n	8009594 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <HAL_UART_Transmit+0x2c>
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e075      	b.n	8009596 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_UART_Transmit+0x3e>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e06e      	b.n	8009596 <HAL_UART_Transmit+0x11c>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2221      	movs	r2, #33	; 0x21
 80094ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094ce:	f7fb fb27 	bl	8004b20 <HAL_GetTick>
 80094d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	88fa      	ldrh	r2, [r7, #6]
 80094d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	88fa      	ldrh	r2, [r7, #6]
 80094de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e8:	d108      	bne.n	80094fc <HAL_UART_Transmit+0x82>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	61bb      	str	r3, [r7, #24]
 80094fa:	e003      	b.n	8009504 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009500:	2300      	movs	r3, #0
 8009502:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800950c:	e02a      	b.n	8009564 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	2180      	movs	r1, #128	; 0x80
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f8e2 	bl	80096e2 <UART_WaitOnFlagUntilTimeout>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e036      	b.n	8009596 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800953c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	3302      	adds	r3, #2
 8009542:	61bb      	str	r3, [r7, #24]
 8009544:	e007      	b.n	8009556 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1cf      	bne.n	800950e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2200      	movs	r2, #0
 8009576:	2140      	movs	r1, #64	; 0x40
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f8b2 	bl	80096e2 <UART_WaitOnFlagUntilTimeout>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e006      	b.n	8009596 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	e000      	b.n	8009596 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009594:	2302      	movs	r3, #2
  }
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b08a      	sub	sp, #40	; 0x28
 80095a2:	af02      	add	r7, sp, #8
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	f040 808c 	bne.w	80096d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_UART_Receive+0x2e>
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e084      	b.n	80096da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <HAL_UART_Receive+0x40>
 80095da:	2302      	movs	r3, #2
 80095dc:	e07d      	b.n	80096da <HAL_UART_Receive+0x13c>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2222      	movs	r2, #34	; 0x22
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095fa:	f7fb fa91 	bl	8004b20 <HAL_GetTick>
 80095fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	88fa      	ldrh	r2, [r7, #6]
 800960a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009614:	d108      	bne.n	8009628 <HAL_UART_Receive+0x8a>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	e003      	b.n	8009630 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009638:	e043      	b.n	80096c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2200      	movs	r2, #0
 8009642:	2120      	movs	r1, #32
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f84c 	bl	80096e2 <UART_WaitOnFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e042      	b.n	80096da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10c      	bne.n	8009674 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	b29a      	uxth	r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	3302      	adds	r3, #2
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	e01f      	b.n	80096b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967c:	d007      	beq.n	800968e <HAL_UART_Receive+0xf0>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <HAL_UART_Receive+0xfe>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	b2da      	uxtb	r2, r3
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	e008      	b.n	80096ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3301      	adds	r3, #1
 80096b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1b6      	bne.n	800963a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e000      	b.n	80096da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80096d8:	2302      	movs	r3, #2
  }
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3720      	adds	r7, #32
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b090      	sub	sp, #64	; 0x40
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	4613      	mov	r3, r2
 80096f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f2:	e050      	b.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d04c      	beq.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <UART_WaitOnFlagUntilTimeout+0x30>
 8009702:	f7fb fa0d 	bl	8004b20 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800970e:	429a      	cmp	r2, r3
 8009710:	d241      	bcs.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	330c      	adds	r3, #12
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	330c      	adds	r3, #12
 8009730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009732:	637a      	str	r2, [r7, #52]	; 0x34
 8009734:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e5      	bne.n	8009712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3314      	adds	r3, #20
 800974c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	613b      	str	r3, [r7, #16]
   return(result);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	63bb      	str	r3, [r7, #56]	; 0x38
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3314      	adds	r3, #20
 8009764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009766:	623a      	str	r2, [r7, #32]
 8009768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	69f9      	ldr	r1, [r7, #28]
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	61bb      	str	r3, [r7, #24]
   return(result);
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e5      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2220      	movs	r2, #32
 800977e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e00f      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4013      	ands	r3, r2
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	bf0c      	ite	eq
 80097a6:	2301      	moveq	r3, #1
 80097a8:	2300      	movne	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d09f      	beq.n	80096f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3740      	adds	r7, #64	; 0x40
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	b09f      	sub	sp, #124	; 0x7c
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d6:	68d9      	ldr	r1, [r3, #12]
 80097d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	ea40 0301 	orr.w	r3, r0, r1
 80097e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e4:	689a      	ldr	r2, [r3, #8]
 80097e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80097fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009804:	f021 010c 	bic.w	r1, r1, #12
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800980e:	430b      	orrs	r3, r1
 8009810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800981c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800981e:	6999      	ldr	r1, [r3, #24]
 8009820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	ea40 0301 	orr.w	r3, r0, r1
 8009828:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800982a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4bc5      	ldr	r3, [pc, #788]	; (8009b44 <UART_SetConfig+0x384>)
 8009830:	429a      	cmp	r2, r3
 8009832:	d004      	beq.n	800983e <UART_SetConfig+0x7e>
 8009834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	4bc3      	ldr	r3, [pc, #780]	; (8009b48 <UART_SetConfig+0x388>)
 800983a:	429a      	cmp	r2, r3
 800983c:	d103      	bne.n	8009846 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800983e:	f7fd fd65 	bl	800730c <HAL_RCC_GetPCLK2Freq>
 8009842:	6778      	str	r0, [r7, #116]	; 0x74
 8009844:	e002      	b.n	800984c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009846:	f7fd fd4d 	bl	80072e4 <HAL_RCC_GetPCLK1Freq>
 800984a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800984c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009854:	f040 80b6 	bne.w	80099c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800985a:	461c      	mov	r4, r3
 800985c:	f04f 0500 	mov.w	r5, #0
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	1891      	adds	r1, r2, r2
 8009866:	6439      	str	r1, [r7, #64]	; 0x40
 8009868:	415b      	adcs	r3, r3
 800986a:	647b      	str	r3, [r7, #68]	; 0x44
 800986c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009870:	1912      	adds	r2, r2, r4
 8009872:	eb45 0303 	adc.w	r3, r5, r3
 8009876:	f04f 0000 	mov.w	r0, #0
 800987a:	f04f 0100 	mov.w	r1, #0
 800987e:	00d9      	lsls	r1, r3, #3
 8009880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009884:	00d0      	lsls	r0, r2, #3
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	1911      	adds	r1, r2, r4
 800988c:	6639      	str	r1, [r7, #96]	; 0x60
 800988e:	416b      	adcs	r3, r5
 8009890:	667b      	str	r3, [r7, #100]	; 0x64
 8009892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	461a      	mov	r2, r3
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	1891      	adds	r1, r2, r2
 800989e:	63b9      	str	r1, [r7, #56]	; 0x38
 80098a0:	415b      	adcs	r3, r3
 80098a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80098ac:	f7f7 f9fc 	bl	8000ca8 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4ba5      	ldr	r3, [pc, #660]	; (8009b4c <UART_SetConfig+0x38c>)
 80098b6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	011e      	lsls	r6, r3, #4
 80098be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098c0:	461c      	mov	r4, r3
 80098c2:	f04f 0500 	mov.w	r5, #0
 80098c6:	4622      	mov	r2, r4
 80098c8:	462b      	mov	r3, r5
 80098ca:	1891      	adds	r1, r2, r2
 80098cc:	6339      	str	r1, [r7, #48]	; 0x30
 80098ce:	415b      	adcs	r3, r3
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
 80098d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80098d6:	1912      	adds	r2, r2, r4
 80098d8:	eb45 0303 	adc.w	r3, r5, r3
 80098dc:	f04f 0000 	mov.w	r0, #0
 80098e0:	f04f 0100 	mov.w	r1, #0
 80098e4:	00d9      	lsls	r1, r3, #3
 80098e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098ea:	00d0      	lsls	r0, r2, #3
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	1911      	adds	r1, r2, r4
 80098f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80098f4:	416b      	adcs	r3, r5
 80098f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	461a      	mov	r2, r3
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	1891      	adds	r1, r2, r2
 8009904:	62b9      	str	r1, [r7, #40]	; 0x28
 8009906:	415b      	adcs	r3, r3
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800990a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800990e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009912:	f7f7 f9c9 	bl	8000ca8 <__aeabi_uldivmod>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4b8c      	ldr	r3, [pc, #560]	; (8009b4c <UART_SetConfig+0x38c>)
 800991c:	fba3 1302 	umull	r1, r3, r3, r2
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	2164      	movs	r1, #100	; 0x64
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	3332      	adds	r3, #50	; 0x32
 800992e:	4a87      	ldr	r2, [pc, #540]	; (8009b4c <UART_SetConfig+0x38c>)
 8009930:	fba2 2303 	umull	r2, r3, r2, r3
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800993c:	441e      	add	r6, r3
 800993e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009940:	4618      	mov	r0, r3
 8009942:	f04f 0100 	mov.w	r1, #0
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	1894      	adds	r4, r2, r2
 800994c:	623c      	str	r4, [r7, #32]
 800994e:	415b      	adcs	r3, r3
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
 8009952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009956:	1812      	adds	r2, r2, r0
 8009958:	eb41 0303 	adc.w	r3, r1, r3
 800995c:	f04f 0400 	mov.w	r4, #0
 8009960:	f04f 0500 	mov.w	r5, #0
 8009964:	00dd      	lsls	r5, r3, #3
 8009966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800996a:	00d4      	lsls	r4, r2, #3
 800996c:	4622      	mov	r2, r4
 800996e:	462b      	mov	r3, r5
 8009970:	1814      	adds	r4, r2, r0
 8009972:	653c      	str	r4, [r7, #80]	; 0x50
 8009974:	414b      	adcs	r3, r1
 8009976:	657b      	str	r3, [r7, #84]	; 0x54
 8009978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	461a      	mov	r2, r3
 800997e:	f04f 0300 	mov.w	r3, #0
 8009982:	1891      	adds	r1, r2, r2
 8009984:	61b9      	str	r1, [r7, #24]
 8009986:	415b      	adcs	r3, r3
 8009988:	61fb      	str	r3, [r7, #28]
 800998a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800998e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009992:	f7f7 f989 	bl	8000ca8 <__aeabi_uldivmod>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4b6c      	ldr	r3, [pc, #432]	; (8009b4c <UART_SetConfig+0x38c>)
 800999c:	fba3 1302 	umull	r1, r3, r3, r2
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	2164      	movs	r1, #100	; 0x64
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	3332      	adds	r3, #50	; 0x32
 80099ae:	4a67      	ldr	r2, [pc, #412]	; (8009b4c <UART_SetConfig+0x38c>)
 80099b0:	fba2 2303 	umull	r2, r3, r2, r3
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	f003 0207 	and.w	r2, r3, #7
 80099ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4432      	add	r2, r6
 80099c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099c2:	e0b9      	b.n	8009b38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099c6:	461c      	mov	r4, r3
 80099c8:	f04f 0500 	mov.w	r5, #0
 80099cc:	4622      	mov	r2, r4
 80099ce:	462b      	mov	r3, r5
 80099d0:	1891      	adds	r1, r2, r2
 80099d2:	6139      	str	r1, [r7, #16]
 80099d4:	415b      	adcs	r3, r3
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099dc:	1912      	adds	r2, r2, r4
 80099de:	eb45 0303 	adc.w	r3, r5, r3
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f04f 0100 	mov.w	r1, #0
 80099ea:	00d9      	lsls	r1, r3, #3
 80099ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099f0:	00d0      	lsls	r0, r2, #3
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	eb12 0804 	adds.w	r8, r2, r4
 80099fa:	eb43 0905 	adc.w	r9, r3, r5
 80099fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f04f 0100 	mov.w	r1, #0
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	008b      	lsls	r3, r1, #2
 8009a12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a16:	0082      	lsls	r2, r0, #2
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f944 	bl	8000ca8 <__aeabi_uldivmod>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4b49      	ldr	r3, [pc, #292]	; (8009b4c <UART_SetConfig+0x38c>)
 8009a26:	fba3 2302 	umull	r2, r3, r3, r2
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	011e      	lsls	r6, r3, #4
 8009a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a30:	4618      	mov	r0, r3
 8009a32:	f04f 0100 	mov.w	r1, #0
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	1894      	adds	r4, r2, r2
 8009a3c:	60bc      	str	r4, [r7, #8]
 8009a3e:	415b      	adcs	r3, r3
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a46:	1812      	adds	r2, r2, r0
 8009a48:	eb41 0303 	adc.w	r3, r1, r3
 8009a4c:	f04f 0400 	mov.w	r4, #0
 8009a50:	f04f 0500 	mov.w	r5, #0
 8009a54:	00dd      	lsls	r5, r3, #3
 8009a56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a5a:	00d4      	lsls	r4, r2, #3
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	1814      	adds	r4, r2, r0
 8009a62:	64bc      	str	r4, [r7, #72]	; 0x48
 8009a64:	414b      	adcs	r3, r1
 8009a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f04f 0100 	mov.w	r1, #0
 8009a72:	f04f 0200 	mov.w	r2, #0
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	008b      	lsls	r3, r1, #2
 8009a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a80:	0082      	lsls	r2, r0, #2
 8009a82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a86:	f7f7 f90f 	bl	8000ca8 <__aeabi_uldivmod>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <UART_SetConfig+0x38c>)
 8009a90:	fba3 1302 	umull	r1, r3, r3, r2
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	2164      	movs	r1, #100	; 0x64
 8009a98:	fb01 f303 	mul.w	r3, r1, r3
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	3332      	adds	r3, #50	; 0x32
 8009aa2:	4a2a      	ldr	r2, [pc, #168]	; (8009b4c <UART_SetConfig+0x38c>)
 8009aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa8:	095b      	lsrs	r3, r3, #5
 8009aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aae:	441e      	add	r6, r3
 8009ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	1894      	adds	r4, r2, r2
 8009abe:	603c      	str	r4, [r7, #0]
 8009ac0:	415b      	adcs	r3, r3
 8009ac2:	607b      	str	r3, [r7, #4]
 8009ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac8:	1812      	adds	r2, r2, r0
 8009aca:	eb41 0303 	adc.w	r3, r1, r3
 8009ace:	f04f 0400 	mov.w	r4, #0
 8009ad2:	f04f 0500 	mov.w	r5, #0
 8009ad6:	00dd      	lsls	r5, r3, #3
 8009ad8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009adc:	00d4      	lsls	r4, r2, #3
 8009ade:	4622      	mov	r2, r4
 8009ae0:	462b      	mov	r3, r5
 8009ae2:	eb12 0a00 	adds.w	sl, r2, r0
 8009ae6:	eb43 0b01 	adc.w	fp, r3, r1
 8009aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f04f 0100 	mov.w	r1, #0
 8009af4:	f04f 0200 	mov.w	r2, #0
 8009af8:	f04f 0300 	mov.w	r3, #0
 8009afc:	008b      	lsls	r3, r1, #2
 8009afe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b02:	0082      	lsls	r2, r0, #2
 8009b04:	4650      	mov	r0, sl
 8009b06:	4659      	mov	r1, fp
 8009b08:	f7f7 f8ce 	bl	8000ca8 <__aeabi_uldivmod>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <UART_SetConfig+0x38c>)
 8009b12:	fba3 1302 	umull	r1, r3, r3, r2
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2164      	movs	r1, #100	; 0x64
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	3332      	adds	r3, #50	; 0x32
 8009b24:	4a09      	ldr	r2, [pc, #36]	; (8009b4c <UART_SetConfig+0x38c>)
 8009b26:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2a:	095b      	lsrs	r3, r3, #5
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4432      	add	r2, r6
 8009b36:	609a      	str	r2, [r3, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	377c      	adds	r7, #124	; 0x7c
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	bf00      	nop
 8009b44:	40011000 	.word	0x40011000
 8009b48:	40011400 	.word	0x40011400
 8009b4c:	51eb851f 	.word	0x51eb851f

08009b50 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8009b60:	bf00      	nop
 8009b62:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <sx126x_hal_write+0x74>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <sx126x_hal_write+0x78>)
 8009b68:	8812      	ldrh	r2, [r2, #0]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fb fd39 	bl	80055e4 <HAL_GPIO_ReadPin>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d0f4      	beq.n	8009b62 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009b78:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <sx126x_hal_write+0x7c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a14      	ldr	r2, [pc, #80]	; (8009bd0 <sx126x_hal_write+0x80>)
 8009b7e:	8811      	ldrh	r1, [r2, #0]
 8009b80:	2200      	movs	r2, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fb fd46 	bl	8005614 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8009b88:	88fa      	ldrh	r2, [r7, #6]
 8009b8a:	2364      	movs	r3, #100	; 0x64
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7fe fa91 	bl	80080b6 <HAL_SPI_Transmit>
 8009b94:	4603      	mov	r3, r0
 8009b96:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8009b98:	8c3a      	ldrh	r2, [r7, #32]
 8009b9a:	2364      	movs	r3, #100	; 0x64
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7fe fa89 	bl	80080b6 <HAL_SPI_Transmit>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8009ba8:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <sx126x_hal_write+0x7c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <sx126x_hal_write+0x80>)
 8009bae:	8811      	ldrh	r1, [r2, #0]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fb fd2e 	bl	8005614 <HAL_GPIO_WritePin>
    return status;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200004a4 	.word	0x200004a4
 8009bc8:	200004a0 	.word	0x200004a0
 8009bcc:	20000494 	.word	0x20000494
 8009bd0:	20000492 	.word	0x20000492

08009bd4 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	4613      	mov	r3, r2
 8009be2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8009be4:	bf00      	nop
 8009be6:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <sx126x_hal_read+0x8c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a1e      	ldr	r2, [pc, #120]	; (8009c64 <sx126x_hal_read+0x90>)
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fb fcf7 	bl	80055e4 <HAL_GPIO_ReadPin>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d0f4      	beq.n	8009be6 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009bfc:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <sx126x_hal_read+0x94>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a1a      	ldr	r2, [pc, #104]	; (8009c6c <sx126x_hal_read+0x98>)
 8009c02:	8811      	ldrh	r1, [r2, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fb fd04 	bl	8005614 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8009c0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	2364      	movs	r3, #100	; 0x64
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7fe fa4d 	bl	80080b6 <HAL_SPI_Transmit>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8009c20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	18d1      	adds	r1, r2, r3
 8009c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	88fa      	ldrh	r2, [r7, #6]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2264      	movs	r2, #100	; 0x64
 8009c36:	9200      	str	r2, [sp, #0]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7fe fb77 	bl	800832e <HAL_SPI_TransmitReceive>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8009c44:	4b08      	ldr	r3, [pc, #32]	; (8009c68 <sx126x_hal_read+0x94>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a08      	ldr	r2, [pc, #32]	; (8009c6c <sx126x_hal_read+0x98>)
 8009c4a:	8811      	ldrh	r1, [r2, #0]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fb fce0 	bl	8005614 <HAL_GPIO_WritePin>
    return status;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200004a4 	.word	0x200004a4
 8009c64:	200004a0 	.word	0x200004a0
 8009c68:	20000494 	.word	0x20000494
 8009c6c:	20000492 	.word	0x20000492

08009c70 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8009c7c:	4a05      	ldr	r2, [pc, #20]	; (8009c94 <set_NSS_pin+0x24>)
 8009c7e:	887b      	ldrh	r3, [r7, #2]
 8009c80:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8009c82:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <set_NSS_pin+0x28>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	20000492 	.word	0x20000492
 8009c98:	20000494 	.word	0x20000494

08009c9c <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8009ca8:	4a05      	ldr	r2, [pc, #20]	; (8009cc0 <set_BUSY_pin+0x24>)
 8009caa:	887b      	ldrh	r3, [r7, #2]
 8009cac:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8009cae:	4a05      	ldr	r2, [pc, #20]	; (8009cc4 <set_BUSY_pin+0x28>)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6013      	str	r3, [r2, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	200004a0 	.word	0x200004a0
 8009cc4:	200004a4 	.word	0x200004a4

08009cc8 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8009cd4:	4a05      	ldr	r2, [pc, #20]	; (8009cec <set_NRESET_pin+0x24>)
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8009cda:	4a05      	ldr	r2, [pc, #20]	; (8009cf0 <set_NRESET_pin+0x28>)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6013      	str	r3, [r2, #0]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000498 	.word	0x20000498
 8009cf0:	2000049c 	.word	0x2000049c

08009cf4 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8009d00:	4a05      	ldr	r2, [pc, #20]	; (8009d18 <set_DIO1_pin+0x24>)
 8009d02:	887b      	ldrh	r3, [r7, #2]
 8009d04:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8009d06:	4a05      	ldr	r2, [pc, #20]	; (8009d1c <set_DIO1_pin+0x28>)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6013      	str	r3, [r2, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	200004a8 	.word	0x200004a8
 8009d1c:	200004ac 	.word	0x200004ac

08009d20 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8009d20:	b084      	sub	sp, #16
 8009d22:	b580      	push	{r7, lr}
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	f107 0c08 	add.w	ip, r7, #8
 8009d2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8009d2e:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <set_hspi+0x2c>)
 8009d30:	4618      	mov	r0, r3
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	2258      	movs	r2, #88	; 0x58
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f003 fcaf 	bl	800d69c <memcpy>
}
 8009d3e:	bf00      	nop
 8009d40:	46bd      	mov	sp, r7
 8009d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d46:	b004      	add	sp, #16
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200004b0 	.word	0x200004b0

08009d50 <Tx_setup>:

void Tx_setup(){
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8009d56:	4b66      	ldr	r3, [pc, #408]	; (8009ef0 <Tx_setup+0x1a0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a66      	ldr	r2, [pc, #408]	; (8009ef4 <Tx_setup+0x1a4>)
 8009d5c:	8811      	ldrh	r1, [r2, #0]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fb fc57 	bl	8005614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009d66:	4b64      	ldr	r3, [pc, #400]	; (8009ef8 <Tx_setup+0x1a8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a64      	ldr	r2, [pc, #400]	; (8009efc <Tx_setup+0x1ac>)
 8009d6c:	8811      	ldrh	r1, [r2, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fb fc4f 	bl	8005614 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8009d76:	2032      	movs	r0, #50	; 0x32
 8009d78:	f7fa fede 	bl	8004b38 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8009d7c:	4b5e      	ldr	r3, [pc, #376]	; (8009ef8 <Tx_setup+0x1a8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a5e      	ldr	r2, [pc, #376]	; (8009efc <Tx_setup+0x1ac>)
 8009d82:	8811      	ldrh	r1, [r2, #0]
 8009d84:	2201      	movs	r2, #1
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fb fc44 	bl	8005614 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	485c      	ldr	r0, [pc, #368]	; (8009f00 <Tx_setup+0x1b0>)
 8009d90:	f000 f8f2 	bl	8009f78 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8009d94:	4b5b      	ldr	r3, [pc, #364]	; (8009f04 <Tx_setup+0x1b4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4859      	ldr	r0, [pc, #356]	; (8009f00 <Tx_setup+0x1b0>)
 8009d9c:	f000 fa76 	bl	800a28c <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8009da0:	4b59      	ldr	r3, [pc, #356]	; (8009f08 <Tx_setup+0x1b8>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4856      	ldr	r0, [pc, #344]	; (8009f00 <Tx_setup+0x1b0>)
 8009da8:	f000 faaa 	bl	800a300 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8009dac:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <Tx_setup+0x1bc>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	4853      	ldr	r0, [pc, #332]	; (8009f00 <Tx_setup+0x1b0>)
 8009db4:	f000 f977 	bl	800a0a6 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8009db8:	2101      	movs	r1, #1
 8009dba:	4851      	ldr	r0, [pc, #324]	; (8009f00 <Tx_setup+0x1b0>)
 8009dbc:	f000 fa24 	bl	800a208 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8009dc0:	4b53      	ldr	r3, [pc, #332]	; (8009f10 <Tx_setup+0x1c0>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2264      	movs	r2, #100	; 0x64
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	484d      	ldr	r0, [pc, #308]	; (8009f00 <Tx_setup+0x1b0>)
 8009dca:	f000 fa37 	bl	800a23c <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8009dce:	4b51      	ldr	r3, [pc, #324]	; (8009f14 <Tx_setup+0x1c4>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	484a      	ldr	r0, [pc, #296]	; (8009f00 <Tx_setup+0x1b0>)
 8009dd6:	f000 f903 	bl	8009fe0 <sx126x_cal>
    HAL_Delay(50);
 8009dda:	2032      	movs	r0, #50	; 0x32
 8009ddc:	f7fa feac 	bl	8004b38 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8009de0:	4b4d      	ldr	r3, [pc, #308]	; (8009f18 <Tx_setup+0x1c8>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	4846      	ldr	r0, [pc, #280]	; (8009f00 <Tx_setup+0x1b0>)
 8009de8:	f000 f8e0 	bl	8009fac <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8009dec:	4b4b      	ldr	r3, [pc, #300]	; (8009f1c <Tx_setup+0x1cc>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	4a4b      	ldr	r2, [pc, #300]	; (8009f20 <Tx_setup+0x1d0>)
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	4619      	mov	r1, r3
 8009df6:	4842      	ldr	r0, [pc, #264]	; (8009f00 <Tx_setup+0x1b0>)
 8009df8:	f000 f90c 	bl	800a014 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8009dfc:	2004      	movs	r0, #4
 8009dfe:	f003 fc3d 	bl	800d67c <malloc>
 8009e02:	4603      	mov	r3, r0
 8009e04:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8009e06:	4b47      	ldr	r3, [pc, #284]	; (8009f24 <Tx_setup+0x1d4>)
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8009e0e:	4b46      	ldr	r3, [pc, #280]	; (8009f28 <Tx_setup+0x1d8>)
 8009e10:	781a      	ldrb	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8009e16:	4b45      	ldr	r3, [pc, #276]	; (8009f2c <Tx_setup+0x1dc>)
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8009e1e:	4b44      	ldr	r3, [pc, #272]	; (8009f30 <Tx_setup+0x1e0>)
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	4835      	ldr	r0, [pc, #212]	; (8009f00 <Tx_setup+0x1b0>)
 8009e2a:	f000 f917 	bl	800a05c <sx126x_set_pa_cfg>
    free(params);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f003 fc2c 	bl	800d68c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8009e34:	4b3f      	ldr	r3, [pc, #252]	; (8009f34 <Tx_setup+0x1e4>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <Tx_setup+0x1e8>)
 8009e3c:	7812      	ldrb	r2, [r2, #0]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	482f      	ldr	r0, [pc, #188]	; (8009f00 <Tx_setup+0x1b0>)
 8009e42:	f000 fa77 	bl	800a334 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8009e46:	4b3d      	ldr	r3, [pc, #244]	; (8009f3c <Tx_setup+0x1ec>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	4a3d      	ldr	r2, [pc, #244]	; (8009f40 <Tx_setup+0x1f0>)
 8009e4c:	7812      	ldrb	r2, [r2, #0]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	482b      	ldr	r0, [pc, #172]	; (8009f00 <Tx_setup+0x1b0>)
 8009e52:	f000 fb2d 	bl	800a4b0 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8009e56:	2004      	movs	r0, #4
 8009e58:	f003 fc10 	bl	800d67c <malloc>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8009e60:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <Tx_setup+0x1f4>)
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8009e68:	4b37      	ldr	r3, [pc, #220]	; (8009f48 <Tx_setup+0x1f8>)
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8009e70:	4b36      	ldr	r3, [pc, #216]	; (8009f4c <Tx_setup+0x1fc>)
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8009e78:	4b35      	ldr	r3, [pc, #212]	; (8009f50 <Tx_setup+0x200>)
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	481f      	ldr	r0, [pc, #124]	; (8009f00 <Tx_setup+0x1b0>)
 8009e84:	f000 fa7a 	bl	800a37c <sx126x_set_lora_mod_params>
    free(mod_params);
 8009e88:	68b8      	ldr	r0, [r7, #8]
 8009e8a:	f003 fbff 	bl	800d68c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8009e8e:	2006      	movs	r0, #6
 8009e90:	f003 fbf4 	bl	800d67c <malloc>
 8009e94:	4603      	mov	r3, r0
 8009e96:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8009e98:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <Tx_setup+0x204>)
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8009ea0:	4b2d      	ldr	r3, [pc, #180]	; (8009f58 <Tx_setup+0x208>)
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8009ea8:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <Tx_setup+0x20c>)
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8009eb0:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <Tx_setup+0x210>)
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8009eb8:	4b2a      	ldr	r3, [pc, #168]	; (8009f64 <Tx_setup+0x214>)
 8009eba:	781a      	ldrb	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	480f      	ldr	r0, [pc, #60]	; (8009f00 <Tx_setup+0x1b0>)
 8009ec4:	f000 fa86 	bl	800a3d4 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f003 fbdf 	bl	800d68c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <Tx_setup+0x218>)
 8009ed0:	8819      	ldrh	r1, [r3, #0]
 8009ed2:	4b26      	ldr	r3, [pc, #152]	; (8009f6c <Tx_setup+0x21c>)
 8009ed4:	881a      	ldrh	r2, [r3, #0]
 8009ed6:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <Tx_setup+0x220>)
 8009ed8:	8818      	ldrh	r0, [r3, #0]
 8009eda:	4b26      	ldr	r3, [pc, #152]	; (8009f74 <Tx_setup+0x224>)
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	4807      	ldr	r0, [pc, #28]	; (8009f00 <Tx_setup+0x1b0>)
 8009ee4:	f000 f94c 	bl	800a180 <sx126x_set_dio_irq_params>

}
 8009ee8:	bf00      	nop
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	2000049c 	.word	0x2000049c
 8009ef4:	20000498 	.word	0x20000498
 8009ef8:	20000494 	.word	0x20000494
 8009efc:	20000492 	.word	0x20000492
 8009f00:	200004b0 	.word	0x200004b0
 8009f04:	2000000c 	.word	0x2000000c
 8009f08:	20000010 	.word	0x20000010
 8009f0c:	20000011 	.word	0x20000011
 8009f10:	20000012 	.word	0x20000012
 8009f14:	20000014 	.word	0x20000014
 8009f18:	20000013 	.word	0x20000013
 8009f1c:	20000015 	.word	0x20000015
 8009f20:	20000016 	.word	0x20000016
 8009f24:	20000017 	.word	0x20000017
 8009f28:	20000018 	.word	0x20000018
 8009f2c:	20000508 	.word	0x20000508
 8009f30:	20000019 	.word	0x20000019
 8009f34:	2000001a 	.word	0x2000001a
 8009f38:	2000001b 	.word	0x2000001b
 8009f3c:	20000509 	.word	0x20000509
 8009f40:	2000050a 	.word	0x2000050a
 8009f44:	2000001c 	.word	0x2000001c
 8009f48:	2000001d 	.word	0x2000001d
 8009f4c:	2000001e 	.word	0x2000001e
 8009f50:	2000050b 	.word	0x2000050b
 8009f54:	20000020 	.word	0x20000020
 8009f58:	2000050c 	.word	0x2000050c
 8009f5c:	20000022 	.word	0x20000022
 8009f60:	20000023 	.word	0x20000023
 8009f64:	2000050d 	.word	0x2000050d
 8009f68:	20000024 	.word	0x20000024
 8009f6c:	20000026 	.word	0x20000026
 8009f70:	2000050e 	.word	0x2000050e
 8009f74:	20000510 	.word	0x20000510

08009f78 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8009f84:	2300      	movs	r3, #0
 8009f86:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8009f88:	2380      	movs	r3, #128	; 0x80
 8009f8a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8009f90:	f107 010c 	add.w	r1, r7, #12
 8009f94:	2300      	movs	r3, #0
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fdd7 	bl	8009b50 <sx126x_hal_write>
 8009fa2:	4603      	mov	r3, r0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8009fb8:	2300      	movs	r3, #0
 8009fba:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8009fbc:	2396      	movs	r3, #150	; 0x96
 8009fbe:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8009fc4:	f107 010c 	add.w	r1, r7, #12
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2202      	movs	r2, #2
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff fdbd 	bl	8009b50 <sx126x_hal_write>
 8009fd6:	4603      	mov	r3, r0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8009fec:	2300      	movs	r3, #0
 8009fee:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8009ff0:	2389      	movs	r3, #137	; 0x89
 8009ff2:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8009ff8:	f107 010c 	add.w	r1, r7, #12
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	2202      	movs	r2, #2
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fda3 	bl	8009b50 <sx126x_hal_write>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af02      	add	r7, sp, #8
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
 800a020:	4613      	mov	r3, r2
 800a022:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <sx126x_cal_img_hex+0x44>)
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	81bb      	strh	r3, [r7, #12]
 800a02a:	2300      	movs	r3, #0
 800a02c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800a02e:	2398      	movs	r3, #152	; 0x98
 800a030:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800a036:	78bb      	ldrb	r3, [r7, #2]
 800a038:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800a03a:	f107 010c 	add.w	r1, r7, #12
 800a03e:	2300      	movs	r3, #0
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	2300      	movs	r3, #0
 800a044:	2203      	movs	r2, #3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fd82 	bl	8009b50 <sx126x_hal_write>
 800a04c:	4603      	mov	r3, r0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	08012a2c 	.word	0x08012a2c

0800a05c <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af02      	add	r7, sp, #8
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800a066:	2300      	movs	r3, #0
 800a068:	60bb      	str	r3, [r7, #8]
 800a06a:	2300      	movs	r3, #0
 800a06c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800a06e:	2395      	movs	r3, #149	; 0x95
 800a070:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	789b      	ldrb	r3, [r3, #2]
 800a082:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	78db      	ldrb	r3, [r3, #3]
 800a088:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a08a:	f107 0108 	add.w	r1, r7, #8
 800a08e:	2300      	movs	r3, #0
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	2300      	movs	r3, #0
 800a094:	2205      	movs	r2, #5
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff fd5a 	bl	8009b50 <sx126x_hal_write>
 800a09c:	4603      	mov	r3, r0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af02      	add	r7, sp, #8
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800a0b6:	2393      	movs	r3, #147	; 0x93
 800a0b8:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800a0be:	f107 010c 	add.w	r1, r7, #12
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fd40 	bl	8009b50 <sx126x_hal_write>
 800a0d0:	4603      	mov	r3, r0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	817b      	strh	r3, [r7, #10]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <sx126x_write_register+0x50>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	82bb      	strh	r3, [r7, #20]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800a0fa:	230d      	movs	r3, #13
 800a0fc:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	0a1b      	lsrs	r3, r3, #8
 800a102:	b29b      	uxth	r3, r3
 800a104:	b2db      	uxtb	r3, r3
 800a106:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800a108:	897b      	ldrh	r3, [r7, #10]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a10e:	7a7b      	ldrb	r3, [r7, #9]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f107 0114 	add.w	r1, r7, #20
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2203      	movs	r2, #3
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f7ff fd17 	bl	8009b50 <sx126x_hal_write>
 800a122:	4603      	mov	r3, r0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	08012a2c 	.word	0x08012a2c

0800a130 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	461a      	mov	r2, r3
 800a13c:	460b      	mov	r3, r1
 800a13e:	817b      	strh	r3, [r7, #10]
 800a140:	4613      	mov	r3, r2
 800a142:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800a148:	2303      	movs	r3, #3
 800a14a:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800a14c:	231d      	movs	r3, #29
 800a14e:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800a150:	897b      	ldrh	r3, [r7, #10]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	b29b      	uxth	r3, r3
 800a156:	b2db      	uxtb	r3, r3
 800a158:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800a15a:	897b      	ldrh	r3, [r7, #10]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a160:	f107 0110 	add.w	r1, r7, #16
 800a164:	7a7b      	ldrb	r3, [r7, #9]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2204      	movs	r2, #4
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff fd31 	bl	8009bd4 <sx126x_hal_read>
 800a172:	4603      	mov	r3, r0
 800a174:	75fb      	strb	r3, [r7, #23]

    return status;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08a      	sub	sp, #40	; 0x28
 800a184:	af02      	add	r7, sp, #8
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	4608      	mov	r0, r1
 800a18a:	4611      	mov	r1, r2
 800a18c:	461a      	mov	r2, r3
 800a18e:	4603      	mov	r3, r0
 800a190:	817b      	strh	r3, [r7, #10]
 800a192:	460b      	mov	r3, r1
 800a194:	813b      	strh	r3, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	f107 0318 	add.w	r3, r7, #24
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800a1ac:	897b      	ldrh	r3, [r7, #10]
 800a1ae:	0a1b      	lsrs	r3, r3, #8
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800a1b6:	897b      	ldrh	r3, [r7, #10]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800a1dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800a1e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a1ec:	f107 0114 	add.w	r1, r7, #20
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2209      	movs	r2, #9
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff fca9 	bl	8009b50 <sx126x_hal_write>
 800a1fe:	4603      	mov	r3, r0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af02      	add	r7, sp, #8
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800a214:	2300      	movs	r3, #0
 800a216:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800a218:	239d      	movs	r3, #157	; 0x9d
 800a21a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800a220:	f107 010c 	add.w	r1, r7, #12
 800a224:	2300      	movs	r3, #0
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2300      	movs	r3, #0
 800a22a:	2202      	movs	r2, #2
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff fc8f 	bl	8009b50 <sx126x_hal_write>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	460b      	mov	r3, r1
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800a24a:	2300      	movs	r3, #0
 800a24c:	613b      	str	r3, [r7, #16]
 800a24e:	2300      	movs	r3, #0
 800a250:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800a252:	2397      	movs	r3, #151	; 0x97
 800a254:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	b2db      	uxtb	r3, r3
 800a268:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a270:	f107 0110 	add.w	r1, r7, #16
 800a274:	2300      	movs	r3, #0
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	2300      	movs	r3, #0
 800a27a:	2205      	movs	r2, #5
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fc67 	bl	8009b50 <sx126x_hal_write>
 800a282:	4603      	mov	r3, r0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a296:	6838      	ldr	r0, [r7, #0]
 800a298:	f000 f92e 	bl	800a4f8 <sx126x_convert_freq_in_hz_to_pll_step>
 800a29c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f805 	bl	800a2b0 <sx126x_set_rf_freq_in_pll_steps>
 800a2a6:	4603      	mov	r3, r0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800a2c2:	2386      	movs	r3, #134	; 0x86
 800a2c4:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	0e1b      	lsrs	r3, r3, #24
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	0c1b      	lsrs	r3, r3, #16
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	0a1b      	lsrs	r3, r3, #8
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff fc2d 	bl	8009b50 <sx126x_hal_write>
 800a2f6:	4603      	mov	r3, r0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af02      	add	r7, sp, #8
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800a30c:	2300      	movs	r3, #0
 800a30e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800a310:	238a      	movs	r3, #138	; 0x8a
 800a312:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a318:	f107 010c 	add.w	r1, r7, #12
 800a31c:	2300      	movs	r3, #0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	2300      	movs	r3, #0
 800a322:	2202      	movs	r2, #2
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fc13 	bl	8009b50 <sx126x_hal_write>
 800a32a:	4603      	mov	r3, r0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af02      	add	r7, sp, #8
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
 800a340:	4613      	mov	r3, r2
 800a342:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <sx126x_set_tx_params+0x44>)
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	81bb      	strh	r3, [r7, #12]
 800a34a:	2300      	movs	r3, #0
 800a34c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800a34e:	238e      	movs	r3, #142	; 0x8e
 800a350:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800a356:	78bb      	ldrb	r3, [r7, #2]
 800a358:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a35a:	f107 010c 	add.w	r1, r7, #12
 800a35e:	2300      	movs	r3, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	2203      	movs	r2, #3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff fbf2 	bl	8009b50 <sx126x_hal_write>
 800a36c:	4603      	mov	r3, r0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	08012a2c 	.word	0x08012a2c

0800a37c <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af02      	add	r7, sp, #8
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a386:	2303      	movs	r3, #3
 800a388:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800a38a:	2300      	movs	r3, #0
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	2300      	movs	r3, #0
 800a390:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800a392:	238b      	movs	r3, #139	; 0x8b
 800a394:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	789b      	ldrb	r3, [r3, #2]
 800a3a6:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	78db      	ldrb	r3, [r3, #3]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a3b4:	f107 0108 	add.w	r1, r7, #8
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2205      	movs	r2, #5
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fbc5 	bl	8009b50 <sx126x_hal_write>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
 800a3e6:	f107 0314 	add.w	r3, r7, #20
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	460a      	mov	r2, r1
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	460a      	mov	r2, r1
 800a3f2:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800a3f4:	238c      	movs	r3, #140	; 0x8c
 800a3f6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	b2db      	uxtb	r3, r3
 800a402:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	789b      	ldrb	r3, [r3, #2]
 800a410:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	78db      	ldrb	r3, [r3, #3]
 800a416:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	791b      	ldrb	r3, [r3, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <sx126x_set_lora_pkt_params+0x50>
 800a420:	2301      	movs	r3, #1
 800a422:	e000      	b.n	800a426 <sx126x_set_lora_pkt_params+0x52>
 800a424:	2300      	movs	r3, #0
 800a426:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	795b      	ldrb	r3, [r3, #5]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <sx126x_set_lora_pkt_params+0x60>
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <sx126x_set_lora_pkt_params+0x62>
 800a434:	2300      	movs	r3, #0
 800a436:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a438:	f107 0110 	add.w	r1, r7, #16
 800a43c:	2300      	movs	r3, #0
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	2207      	movs	r2, #7
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff fb83 	bl	8009b50 <sx126x_hal_write>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d127      	bne.n	800a4a4 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a458:	f107 020f 	add.w	r2, r7, #15
 800a45c:	2301      	movs	r3, #1
 800a45e:	f240 7136 	movw	r1, #1846	; 0x736
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff fe64 	bl	800a130 <sx126x_read_register>
 800a468:	4603      	mov	r3, r0
 800a46a:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d118      	bne.n	800a4a4 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	795b      	ldrb	r3, [r3, #5]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	f023 0304 	bic.w	r3, r3, #4
 800a480:	b2db      	uxtb	r3, r3
 800a482:	73fb      	strb	r3, [r7, #15]
 800a484:	e004      	b.n	800a490 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	f043 0304 	orr.w	r3, r3, #4
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a490:	f107 020f 	add.w	r2, r7, #15
 800a494:	2301      	movs	r3, #1
 800a496:	f240 7136 	movw	r1, #1846	; 0x736
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fe1e 	bl	800a0dc <sx126x_write_register>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <sx126x_set_buffer_base_address+0x44>)
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	81bb      	strh	r3, [r7, #12]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800a4ca:	238f      	movs	r3, #143	; 0x8f
 800a4cc:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800a4d2:	78bb      	ldrb	r3, [r7, #2]
 800a4d4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800a4d6:	f107 010c 	add.w	r1, r7, #12
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fb34 	bl	8009b50 <sx126x_hal_write>
 800a4e8:	4603      	mov	r3, r0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	08012a2c 	.word	0x08012a2c

0800a4f8 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a504:	fba2 2303 	umull	r2, r3, r2, r3
 800a508:	0b1b      	lsrs	r3, r3, #12
 800a50a:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f643 5209 	movw	r2, #15625	; 0x3d09
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	039b      	lsls	r3, r3, #14
 800a524:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800a528:	3304      	adds	r3, #4
 800a52a:	4905      	ldr	r1, [pc, #20]	; (800a540 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a52c:	fba1 1303 	umull	r1, r3, r1, r3
 800a530:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a532:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	431bde83 	.word	0x431bde83

0800a544 <__NVIC_SetPriority>:
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a554:	2b00      	cmp	r3, #0
 800a556:	db0a      	blt.n	800a56e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	490c      	ldr	r1, [pc, #48]	; (800a590 <__NVIC_SetPriority+0x4c>)
 800a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a562:	0112      	lsls	r2, r2, #4
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	440b      	add	r3, r1
 800a568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a56c:	e00a      	b.n	800a584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	b2da      	uxtb	r2, r3
 800a572:	4908      	ldr	r1, [pc, #32]	; (800a594 <__NVIC_SetPriority+0x50>)
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	3b04      	subs	r3, #4
 800a57c:	0112      	lsls	r2, r2, #4
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	440b      	add	r3, r1
 800a582:	761a      	strb	r2, [r3, #24]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	e000e100 	.word	0xe000e100
 800a594:	e000ed00 	.word	0xe000ed00

0800a598 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <SysTick_Handler+0x1c>)
 800a59e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a5a0:	f001 fec6 	bl	800c330 <xTaskGetSchedulerState>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d001      	beq.n	800a5ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a5aa:	f002 fcad 	bl	800cf08 <xPortSysTickHandler>
  }
}
 800a5ae:	bf00      	nop
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	e000e010 	.word	0xe000e010

0800a5b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a5bc:	2100      	movs	r1, #0
 800a5be:	f06f 0004 	mvn.w	r0, #4
 800a5c2:	f7ff ffbf 	bl	800a544 <__NVIC_SetPriority>
#endif
}
 800a5c6:	bf00      	nop
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d2:	f3ef 8305 	mrs	r3, IPSR
 800a5d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a5d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5de:	f06f 0305 	mvn.w	r3, #5
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	e00c      	b.n	800a600 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <osKernelInitialize+0x44>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5ee:	4b08      	ldr	r3, [pc, #32]	; (800a610 <osKernelInitialize+0x44>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	607b      	str	r3, [r7, #4]
 800a5f8:	e002      	b.n	800a600 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a600:	687b      	ldr	r3, [r7, #4]
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20000514 	.word	0x20000514

0800a614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a61a:	f3ef 8305 	mrs	r3, IPSR
 800a61e:	603b      	str	r3, [r7, #0]
  return(result);
 800a620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a626:	f06f 0305 	mvn.w	r3, #5
 800a62a:	607b      	str	r3, [r7, #4]
 800a62c:	e010      	b.n	800a650 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <osKernelStart+0x48>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d109      	bne.n	800a64a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a636:	f7ff ffbf 	bl	800a5b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <osKernelStart+0x48>)
 800a63c:	2202      	movs	r2, #2
 800a63e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a640:	f001 fa0a 	bl	800ba58 <vTaskStartScheduler>
      stat = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	607b      	str	r3, [r7, #4]
 800a648:	e002      	b.n	800a650 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a64a:	f04f 33ff 	mov.w	r3, #4294967295
 800a64e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a650:	687b      	ldr	r3, [r7, #4]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000514 	.word	0x20000514

0800a660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a670:	f3ef 8305 	mrs	r3, IPSR
 800a674:	617b      	str	r3, [r7, #20]
  return(result);
 800a676:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d17e      	bne.n	800a77a <osThreadNew+0x11a>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d07b      	beq.n	800a77a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a682:	2380      	movs	r3, #128	; 0x80
 800a684:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a686:	2318      	movs	r3, #24
 800a688:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d045      	beq.n	800a726 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <osThreadNew+0x48>
        name = attr->name;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d008      	beq.n	800a6ce <osThreadNew+0x6e>
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b38      	cmp	r3, #56	; 0x38
 800a6c0:	d805      	bhi.n	800a6ce <osThreadNew+0x6e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <osThreadNew+0x72>
        return (NULL);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e054      	b.n	800a77c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	089b      	lsrs	r3, r3, #2
 800a6e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00e      	beq.n	800a708 <osThreadNew+0xa8>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	2bbb      	cmp	r3, #187	; 0xbb
 800a6f0:	d90a      	bls.n	800a708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <osThreadNew+0xa8>
        mem = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	61bb      	str	r3, [r7, #24]
 800a706:	e010      	b.n	800a72a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <osThreadNew+0xca>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d108      	bne.n	800a72a <osThreadNew+0xca>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <osThreadNew+0xca>
          mem = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	61bb      	str	r3, [r7, #24]
 800a724:	e001      	b.n	800a72a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d110      	bne.n	800a752 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a738:	9202      	str	r2, [sp, #8]
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	6a3a      	ldr	r2, [r7, #32]
 800a744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 ff28 	bl	800b59c <xTaskCreateStatic>
 800a74c:	4603      	mov	r3, r0
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	e013      	b.n	800a77a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d110      	bne.n	800a77a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	f107 0310 	add.w	r3, r7, #16
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 ff73 	bl	800b656 <xTaskCreate>
 800a770:	4603      	mov	r3, r0
 800a772:	2b01      	cmp	r3, #1
 800a774:	d001      	beq.n	800a77a <osThreadNew+0x11a>
            hTask = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a77a:	693b      	ldr	r3, [r7, #16]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3728      	adds	r7, #40	; 0x28
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800a78a:	f001 fdc1 	bl	800c310 <xTaskGetCurrentTaskHandle>
 800a78e:	6078      	str	r0, [r7, #4]

  return (id);
 800a790:	687b      	ldr	r3, [r7, #4]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800a79a:	b580      	push	{r7, lr}
 800a79c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f001 f8b4 	bl	800b90c <vTaskDelete>
#endif
  for (;;);
 800a7a4:	e7fe      	b.n	800a7a4 <osThreadExit+0xa>

0800a7a6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ae:	f3ef 8305 	mrs	r3, IPSR
 800a7b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <osDelay+0x1c>
    stat = osErrorISR;
 800a7ba:	f06f 0305 	mvn.w	r3, #5
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e007      	b.n	800a7d2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 f90f 	bl	800b9f0 <vTaskDelay>
    }
  }

  return (stat);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7e8:	f3ef 8305 	mrs	r3, IPSR
 800a7ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7ee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d174      	bne.n	800a8de <osMutexNew+0x102>
    if (attr != NULL) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	61bb      	str	r3, [r7, #24]
 800a800:	e001      	b.n	800a806 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <osMutexNew+0x3a>
      rmtx = 1U;
 800a810:	2301      	movs	r3, #1
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	e001      	b.n	800a81a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	f003 0308 	and.w	r3, r3, #8
 800a820:	2b00      	cmp	r3, #0
 800a822:	d15c      	bne.n	800a8de <osMutexNew+0x102>
      mem = -1;
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d015      	beq.n	800a85c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d006      	beq.n	800a846 <osMutexNew+0x6a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2b4f      	cmp	r3, #79	; 0x4f
 800a83e:	d902      	bls.n	800a846 <osMutexNew+0x6a>
          mem = 1;
 800a840:	2301      	movs	r3, #1
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	e00c      	b.n	800a860 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d108      	bne.n	800a860 <osMutexNew+0x84>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d104      	bne.n	800a860 <osMutexNew+0x84>
            mem = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	613b      	str	r3, [r7, #16]
 800a85a:	e001      	b.n	800a860 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d112      	bne.n	800a88c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d007      	beq.n	800a87c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	4619      	mov	r1, r3
 800a872:	2004      	movs	r0, #4
 800a874:	f000 fa8f 	bl	800ad96 <xQueueCreateMutexStatic>
 800a878:	61f8      	str	r0, [r7, #28]
 800a87a:	e016      	b.n	800a8aa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	4619      	mov	r1, r3
 800a882:	2001      	movs	r0, #1
 800a884:	f000 fa87 	bl	800ad96 <xQueueCreateMutexStatic>
 800a888:	61f8      	str	r0, [r7, #28]
 800a88a:	e00e      	b.n	800a8aa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10b      	bne.n	800a8aa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d004      	beq.n	800a8a2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a898:	2004      	movs	r0, #4
 800a89a:	f000 fa64 	bl	800ad66 <xQueueCreateMutex>
 800a89e:	61f8      	str	r0, [r7, #28]
 800a8a0:	e003      	b.n	800a8aa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	f000 fa5f 	bl	800ad66 <xQueueCreateMutex>
 800a8a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00c      	beq.n	800a8ca <osMutexNew+0xee>
        if (attr != NULL) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <osMutexNew+0xe2>
          name = attr->name;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a8c2:	68f9      	ldr	r1, [r7, #12]
 800a8c4:	69f8      	ldr	r0, [r7, #28]
 800a8c6:	f000 fe0b 	bl	800b4e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <osMutexNew+0x102>
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f043 0301 	orr.w	r3, r3, #1
 800a8dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a8de:	69fb      	ldr	r3, [r7, #28]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4a07      	ldr	r2, [pc, #28]	; (800a914 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4a06      	ldr	r2, [pc, #24]	; (800a918 <vApplicationGetIdleTaskMemory+0x30>)
 800a8fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2280      	movs	r2, #128	; 0x80
 800a904:	601a      	str	r2, [r3, #0]
}
 800a906:	bf00      	nop
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20000518 	.word	0x20000518
 800a918:	200005d4 	.word	0x200005d4

0800a91c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4a07      	ldr	r2, [pc, #28]	; (800a948 <vApplicationGetTimerTaskMemory+0x2c>)
 800a92c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	4a06      	ldr	r2, [pc, #24]	; (800a94c <vApplicationGetTimerTaskMemory+0x30>)
 800a932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a93a:	601a      	str	r2, [r3, #0]
}
 800a93c:	bf00      	nop
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	200007d4 	.word	0x200007d4
 800a94c:	20000890 	.word	0x20000890

0800a950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f103 0208 	add.w	r2, r3, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f04f 32ff 	mov.w	r2, #4294967295
 800a968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f103 0208 	add.w	r2, r3, #8
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f103 0208 	add.w	r2, r3, #8
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a99e:	bf00      	nop
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	e00c      	b.n	800aa2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3308      	adds	r3, #8
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	e002      	b.n	800aa20 <vListInsert+0x2e>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d2f6      	bcs.n	800aa1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	601a      	str	r2, [r3, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6892      	ldr	r2, [r2, #8]
 800aa7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6852      	ldr	r2, [r2, #4]
 800aa84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d103      	bne.n	800aa98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	1e5a      	subs	r2, r3, #1
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aae2:	f002 f97f 	bl	800cde4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aaf2:	fb01 f303 	mul.w	r3, r1, r3
 800aaf6:	441a      	add	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	3b01      	subs	r3, #1
 800ab14:	68f9      	ldr	r1, [r7, #12]
 800ab16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab18:	fb01 f303 	mul.w	r3, r1, r3
 800ab1c:	441a      	add	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	22ff      	movs	r2, #255	; 0xff
 800ab26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	22ff      	movs	r2, #255	; 0xff
 800ab2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d114      	bne.n	800ab62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01a      	beq.n	800ab76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3310      	adds	r3, #16
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 fa21 	bl	800bf8c <xTaskRemoveFromEventList>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d012      	beq.n	800ab76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab50:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <xQueueGenericReset+0xcc>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	e009      	b.n	800ab76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3310      	adds	r3, #16
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fef2 	bl	800a950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff feed 	bl	800a950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab76:	f002 f965 	bl	800ce44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab7a:	2301      	movs	r3, #1
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed04 	.word	0xe000ed04

0800ab88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	; 0x38
 800ab8c:	af02      	add	r7, sp, #8
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <xQueueGenericCreateStatic+0x52>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <xQueueGenericCreateStatic+0x56>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <xQueueGenericCreateStatic+0x58>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	623b      	str	r3, [r7, #32]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <xQueueGenericCreateStatic+0x7e>
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <xQueueGenericCreateStatic+0x82>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <xQueueGenericCreateStatic+0x84>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	61fb      	str	r3, [r7, #28]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac26:	2350      	movs	r3, #80	; 0x50
 800ac28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b50      	cmp	r3, #80	; 0x50
 800ac2e:	d00a      	beq.n	800ac46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61bb      	str	r3, [r7, #24]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00d      	beq.n	800ac6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4613      	mov	r3, r2
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f83f 	bl	800acec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3730      	adds	r7, #48	; 0x30
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	4613      	mov	r3, r2
 800ac84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	613b      	str	r3, [r7, #16]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
 800acaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	3350      	adds	r3, #80	; 0x50
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 f9b9 	bl	800d028 <pvPortMalloc>
 800acb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d011      	beq.n	800ace2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	3350      	adds	r3, #80	; 0x50
 800acc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acd0:	79fa      	ldrb	r2, [r7, #7]
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4613      	mov	r3, r2
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 f805 	bl	800acec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ace2:	69bb      	ldr	r3, [r7, #24]
	}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	69ba      	ldr	r2, [r7, #24]
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	e002      	b.n	800ad0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	69b8      	ldr	r0, [r7, #24]
 800ad1e:	f7ff fecb 	bl	800aab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad2a:	bf00      	nop
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ad52:	2300      	movs	r3, #0
 800ad54:	2200      	movs	r2, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f837 	bl	800adcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b086      	sub	sp, #24
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad70:	2301      	movs	r3, #1
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	2300      	movs	r3, #0
 800ad76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6939      	ldr	r1, [r7, #16]
 800ad7e:	6978      	ldr	r0, [r7, #20]
 800ad80:	f7ff ff7a 	bl	800ac78 <xQueueGenericCreate>
 800ad84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff ffd3 	bl	800ad32 <prvInitialiseMutex>

		return xNewQueue;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b088      	sub	sp, #32
 800ad9a:	af02      	add	r7, sp, #8
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	6039      	str	r1, [r7, #0]
 800ada0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ada2:	2301      	movs	r3, #1
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2200      	movs	r2, #0
 800adb2:	6939      	ldr	r1, [r7, #16]
 800adb4:	6978      	ldr	r0, [r7, #20]
 800adb6:	f7ff fee7 	bl	800ab88 <xQueueGenericCreateStatic>
 800adba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff ffb8 	bl	800ad32 <prvInitialiseMutex>

		return xNewQueue;
 800adc2:	68fb      	ldr	r3, [r7, #12]
	}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08e      	sub	sp, #56	; 0x38
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adda:	2300      	movs	r3, #0
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <xQueueGenericSend+0x32>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <xQueueGenericSend+0x40>
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <xQueueGenericSend+0x44>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <xQueueGenericSend+0x46>
 800ae10:	2300      	movs	r3, #0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10a      	bne.n	800ae2c <xQueueGenericSend+0x60>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae28:	bf00      	nop
 800ae2a:	e7fe      	b.n	800ae2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d103      	bne.n	800ae3a <xQueueGenericSend+0x6e>
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d101      	bne.n	800ae3e <xQueueGenericSend+0x72>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <xQueueGenericSend+0x74>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xQueueGenericSend+0x8e>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	623b      	str	r3, [r7, #32]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae5a:	f001 fa69 	bl	800c330 <xTaskGetSchedulerState>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <xQueueGenericSend+0x9e>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <xQueueGenericSend+0xa2>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <xQueueGenericSend+0xa4>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <xQueueGenericSend+0xbe>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	61fb      	str	r3, [r7, #28]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae8a:	f001 ffab 	bl	800cde4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d302      	bcc.n	800aea0 <xQueueGenericSend+0xd4>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d129      	bne.n	800aef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea6:	f000 fa0b 	bl	800b2c0 <prvCopyDataToQueue>
 800aeaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d010      	beq.n	800aed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	3324      	adds	r3, #36	; 0x24
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 f867 	bl	800bf8c <xTaskRemoveFromEventList>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d013      	beq.n	800aeec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aec4:	4b3f      	ldr	r3, [pc, #252]	; (800afc4 <xQueueGenericSend+0x1f8>)
 800aec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	e00a      	b.n	800aeec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aedc:	4b39      	ldr	r3, [pc, #228]	; (800afc4 <xQueueGenericSend+0x1f8>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aeec:	f001 ffaa 	bl	800ce44 <vPortExitCritical>
				return pdPASS;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e063      	b.n	800afbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d103      	bne.n	800af02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aefa:	f001 ffa3 	bl	800ce44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	e05c      	b.n	800afbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f8a1 	bl	800c054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af12:	2301      	movs	r3, #1
 800af14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af16:	f001 ff95 	bl	800ce44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af1a:	f000 fe0d 	bl	800bb38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af1e:	f001 ff61 	bl	800cde4 <vPortEnterCritical>
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af28:	b25b      	sxtb	r3, r3
 800af2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2e:	d103      	bne.n	800af38 <xQueueGenericSend+0x16c>
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af3e:	b25b      	sxtb	r3, r3
 800af40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af44:	d103      	bne.n	800af4e <xQueueGenericSend+0x182>
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af4e:	f001 ff79 	bl	800ce44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af52:	1d3a      	adds	r2, r7, #4
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 f890 	bl	800c080 <xTaskCheckForTimeOut>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d124      	bne.n	800afb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af68:	f000 faa2 	bl	800b4b0 <prvIsQueueFull>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d018      	beq.n	800afa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	3310      	adds	r3, #16
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	4611      	mov	r1, r2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 ffb6 	bl	800beec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af82:	f000 fa2d 	bl	800b3e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af86:	f000 fde5 	bl	800bb54 <xTaskResumeAll>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f47f af7c 	bne.w	800ae8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af92:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <xQueueGenericSend+0x1f8>)
 800af94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	e772      	b.n	800ae8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa6:	f000 fa1b 	bl	800b3e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afaa:	f000 fdd3 	bl	800bb54 <xTaskResumeAll>
 800afae:	e76c      	b.n	800ae8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb2:	f000 fa15 	bl	800b3e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afb6:	f000 fdcd 	bl	800bb54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3738      	adds	r7, #56	; 0x38
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	e000ed04 	.word	0xe000ed04

0800afc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b090      	sub	sp, #64	; 0x40
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <xQueueGenericSendFromISR+0x3c>
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <xQueueGenericSendFromISR+0x40>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <xQueueGenericSendFromISR+0x42>
 800b008:	2300      	movs	r3, #0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d103      	bne.n	800b032 <xQueueGenericSendFromISR+0x6a>
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <xQueueGenericSendFromISR+0x6e>
 800b032:	2301      	movs	r3, #1
 800b034:	e000      	b.n	800b038 <xQueueGenericSendFromISR+0x70>
 800b036:	2300      	movs	r3, #0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	623b      	str	r3, [r7, #32]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b052:	f001 ffa9 	bl	800cfa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b056:	f3ef 8211 	mrs	r2, BASEPRI
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	61fa      	str	r2, [r7, #28]
 800b06c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b06e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d302      	bcc.n	800b084 <xQueueGenericSendFromISR+0xbc>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d12f      	bne.n	800b0e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	68b9      	ldr	r1, [r7, #8]
 800b098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b09a:	f000 f911 	bl	800b2c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b09e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d112      	bne.n	800b0ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d016      	beq.n	800b0de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	3324      	adds	r3, #36	; 0x24
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 ff69 	bl	800bf8c <xTaskRemoveFromEventList>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00e      	beq.n	800b0de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	e007      	b.n	800b0de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	b25a      	sxtb	r2, r3
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b0e2:	e001      	b.n	800b0e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3740      	adds	r7, #64	; 0x40
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08c      	sub	sp, #48	; 0x30
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <xQueueReceive+0x30>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	623b      	str	r3, [r7, #32]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d103      	bne.n	800b13e <xQueueReceive+0x3e>
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <xQueueReceive+0x42>
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <xQueueReceive+0x44>
 800b142:	2300      	movs	r3, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <xQueueReceive+0x5e>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	61fb      	str	r3, [r7, #28]
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b15e:	f001 f8e7 	bl	800c330 <xTaskGetSchedulerState>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <xQueueReceive+0x6e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <xQueueReceive+0x72>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <xQueueReceive+0x74>
 800b172:	2300      	movs	r3, #0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <xQueueReceive+0x8e>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	61bb      	str	r3, [r7, #24]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b18e:	f001 fe29 	bl	800cde4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01f      	beq.n	800b1de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a2:	f000 f8f7 	bl	800b394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	1e5a      	subs	r2, r3, #1
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00f      	beq.n	800b1d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	3310      	adds	r3, #16
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fee6 	bl	800bf8c <xTaskRemoveFromEventList>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d007      	beq.n	800b1d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1c6:	4b3d      	ldr	r3, [pc, #244]	; (800b2bc <xQueueReceive+0x1bc>)
 800b1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1d6:	f001 fe35 	bl	800ce44 <vPortExitCritical>
				return pdPASS;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e069      	b.n	800b2b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1e4:	f001 fe2e 	bl	800ce44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e062      	b.n	800b2b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1f2:	f107 0310 	add.w	r3, r7, #16
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 ff2c 	bl	800c054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b200:	f001 fe20 	bl	800ce44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b204:	f000 fc98 	bl	800bb38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b208:	f001 fdec 	bl	800cde4 <vPortEnterCritical>
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b212:	b25b      	sxtb	r3, r3
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b218:	d103      	bne.n	800b222 <xQueueReceive+0x122>
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b228:	b25b      	sxtb	r3, r3
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	d103      	bne.n	800b238 <xQueueReceive+0x138>
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b238:	f001 fe04 	bl	800ce44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b23c:	1d3a      	adds	r2, r7, #4
 800b23e:	f107 0310 	add.w	r3, r7, #16
 800b242:	4611      	mov	r1, r2
 800b244:	4618      	mov	r0, r3
 800b246:	f000 ff1b 	bl	800c080 <xTaskCheckForTimeOut>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d123      	bne.n	800b298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b252:	f000 f917 	bl	800b484 <prvIsQueueEmpty>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d017      	beq.n	800b28c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	3324      	adds	r3, #36	; 0x24
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	4611      	mov	r1, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fe41 	bl	800beec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26c:	f000 f8b8 	bl	800b3e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b270:	f000 fc70 	bl	800bb54 <xTaskResumeAll>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d189      	bne.n	800b18e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b27a:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <xQueueReceive+0x1bc>)
 800b27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	e780      	b.n	800b18e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28e:	f000 f8a7 	bl	800b3e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b292:	f000 fc5f 	bl	800bb54 <xTaskResumeAll>
 800b296:	e77a      	b.n	800b18e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29a:	f000 f8a1 	bl	800b3e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b29e:	f000 fc59 	bl	800bb54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a4:	f000 f8ee 	bl	800b484 <prvIsQueueEmpty>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f43f af6f 	beq.w	800b18e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3730      	adds	r7, #48	; 0x30
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10d      	bne.n	800b2fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d14d      	bne.n	800b382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f001 f83e 	bl	800c36c <xTaskPriorityDisinherit>
 800b2f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	609a      	str	r2, [r3, #8]
 800b2f8:	e043      	b.n	800b382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d119      	bne.n	800b334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6858      	ldr	r0, [r3, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b308:	461a      	mov	r2, r3
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	f002 f9c6 	bl	800d69c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	441a      	add	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	429a      	cmp	r2, r3
 800b328:	d32b      	bcc.n	800b382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	605a      	str	r2, [r3, #4]
 800b332:	e026      	b.n	800b382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	68d8      	ldr	r0, [r3, #12]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33c:	461a      	mov	r2, r3
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	f002 f9ac 	bl	800d69c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34c:	425b      	negs	r3, r3
 800b34e:	441a      	add	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d207      	bcs.n	800b370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	425b      	negs	r3, r3
 800b36a:	441a      	add	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d105      	bne.n	800b382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	3b01      	subs	r3, #1
 800b380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b38a:	697b      	ldr	r3, [r7, #20]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d018      	beq.n	800b3d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68da      	ldr	r2, [r3, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	441a      	add	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d303      	bcc.n	800b3c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68d9      	ldr	r1, [r3, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	6838      	ldr	r0, [r7, #0]
 800b3d4:	f002 f962 	bl	800d69c <memcpy>
	}
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3e8:	f001 fcfc 	bl	800cde4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3f4:	e011      	b.n	800b41a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d012      	beq.n	800b424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3324      	adds	r3, #36	; 0x24
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fdc2 	bl	800bf8c <xTaskRemoveFromEventList>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b40e:	f000 fe99 	bl	800c144 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	3b01      	subs	r3, #1
 800b416:	b2db      	uxtb	r3, r3
 800b418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dce9      	bgt.n	800b3f6 <prvUnlockQueue+0x16>
 800b422:	e000      	b.n	800b426 <prvUnlockQueue+0x46>
					break;
 800b424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	22ff      	movs	r2, #255	; 0xff
 800b42a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b42e:	f001 fd09 	bl	800ce44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b432:	f001 fcd7 	bl	800cde4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b43c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b43e:	e011      	b.n	800b464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d012      	beq.n	800b46e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3310      	adds	r3, #16
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 fd9d 	bl	800bf8c <xTaskRemoveFromEventList>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b458:	f000 fe74 	bl	800c144 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	3b01      	subs	r3, #1
 800b460:	b2db      	uxtb	r3, r3
 800b462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dce9      	bgt.n	800b440 <prvUnlockQueue+0x60>
 800b46c:	e000      	b.n	800b470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b46e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	22ff      	movs	r2, #255	; 0xff
 800b474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b478:	f001 fce4 	bl	800ce44 <vPortExitCritical>
}
 800b47c:	bf00      	nop
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b48c:	f001 fcaa 	bl	800cde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b498:	2301      	movs	r3, #1
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	e001      	b.n	800b4a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4a2:	f001 fccf 	bl	800ce44 <vPortExitCritical>

	return xReturn;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4b8:	f001 fc94 	bl	800cde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d102      	bne.n	800b4ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e001      	b.n	800b4d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4d2:	f001 fcb7 	bl	800ce44 <vPortExitCritical>

	return xReturn;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e014      	b.n	800b51a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4f0:	4a0f      	ldr	r2, [pc, #60]	; (800b530 <vQueueAddToRegistry+0x50>)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4fc:	490c      	ldr	r1, [pc, #48]	; (800b530 <vQueueAddToRegistry+0x50>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b506:	4a0a      	ldr	r2, [pc, #40]	; (800b530 <vQueueAddToRegistry+0x50>)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	4413      	add	r3, r2
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b512:	e006      	b.n	800b522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3301      	adds	r3, #1
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b07      	cmp	r3, #7
 800b51e:	d9e7      	bls.n	800b4f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	200056d0 	.word	0x200056d0

0800b534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b544:	f001 fc4e 	bl	800cde4 <vPortEnterCritical>
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b54e:	b25b      	sxtb	r3, r3
 800b550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b554:	d103      	bne.n	800b55e <vQueueWaitForMessageRestricted+0x2a>
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b564:	b25b      	sxtb	r3, r3
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d103      	bne.n	800b574 <vQueueWaitForMessageRestricted+0x40>
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b574:	f001 fc66 	bl	800ce44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	3324      	adds	r3, #36	; 0x24
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fcd3 	bl	800bf34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b58e:	6978      	ldr	r0, [r7, #20]
 800b590:	f7ff ff26 	bl	800b3e0 <prvUnlockQueue>
	}
 800b594:	bf00      	nop
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08e      	sub	sp, #56	; 0x38
 800b5a0:	af04      	add	r7, sp, #16
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	623b      	str	r3, [r7, #32]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	61fb      	str	r3, [r7, #28]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5e2:	23bc      	movs	r3, #188	; 0xbc
 800b5e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2bbc      	cmp	r3, #188	; 0xbc
 800b5ea:	d00a      	beq.n	800b602 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	61bb      	str	r3, [r7, #24]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01e      	beq.n	800b648 <xTaskCreateStatic+0xac>
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01b      	beq.n	800b648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	2202      	movs	r2, #2
 800b61e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b622:	2300      	movs	r3, #0
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	9302      	str	r3, [sp, #8]
 800b62a:	f107 0314 	add.w	r3, r7, #20
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f850 	bl	800b6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b642:	f000 f8f3 	bl	800b82c <prvAddNewTaskToReadyList>
 800b646:	e001      	b.n	800b64c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b648:	2300      	movs	r3, #0
 800b64a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b64c:	697b      	ldr	r3, [r7, #20]
	}
 800b64e:	4618      	mov	r0, r3
 800b650:	3728      	adds	r7, #40	; 0x28
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b656:	b580      	push	{r7, lr}
 800b658:	b08c      	sub	sp, #48	; 0x30
 800b65a:	af04      	add	r7, sp, #16
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	603b      	str	r3, [r7, #0]
 800b662:	4613      	mov	r3, r2
 800b664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b666:	88fb      	ldrh	r3, [r7, #6]
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 fcdc 	bl	800d028 <pvPortMalloc>
 800b670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00e      	beq.n	800b696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b678:	20bc      	movs	r0, #188	; 0xbc
 800b67a:	f001 fcd5 	bl	800d028 <pvPortMalloc>
 800b67e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	631a      	str	r2, [r3, #48]	; 0x30
 800b68c:	e005      	b.n	800b69a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b68e:	6978      	ldr	r0, [r7, #20]
 800b690:	f001 fd96 	bl	800d1c0 <vPortFree>
 800b694:	e001      	b.n	800b69a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d017      	beq.n	800b6d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6a8:	88fa      	ldrh	r2, [r7, #6]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	9302      	str	r3, [sp, #8]
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f80e 	bl	800b6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6c4:	69f8      	ldr	r0, [r7, #28]
 800b6c6:	f000 f8b1 	bl	800b82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	61bb      	str	r3, [r7, #24]
 800b6ce:	e002      	b.n	800b6d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
	}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	21a5      	movs	r1, #165	; 0xa5
 800b6fa:	f001 fff7 	bl	800d6ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b708:	3b01      	subs	r3, #1
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	f023 0307 	bic.w	r3, r3, #7
 800b716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	617b      	str	r3, [r7, #20]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d01f      	beq.n	800b77e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b73e:	2300      	movs	r3, #0
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	e012      	b.n	800b76a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	4413      	add	r3, r2
 800b74a:	7819      	ldrb	r1, [r3, #0]
 800b74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	4413      	add	r3, r2
 800b752:	3334      	adds	r3, #52	; 0x34
 800b754:	460a      	mov	r2, r1
 800b756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	4413      	add	r3, r2
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d006      	beq.n	800b772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	3301      	adds	r3, #1
 800b768:	61fb      	str	r3, [r7, #28]
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	2b0f      	cmp	r3, #15
 800b76e:	d9e9      	bls.n	800b744 <prvInitialiseNewTask+0x64>
 800b770:	e000      	b.n	800b774 <prvInitialiseNewTask+0x94>
			{
				break;
 800b772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b77c:	e003      	b.n	800b786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	2b37      	cmp	r3, #55	; 0x37
 800b78a:	d901      	bls.n	800b790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b78c:	2337      	movs	r3, #55	; 0x37
 800b78e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	2200      	movs	r2, #0
 800b7a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff f8f2 	bl	800a990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	3318      	adds	r3, #24
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff f8ed 	bl	800a990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	3354      	adds	r3, #84	; 0x54
 800b7e0:	2260      	movs	r2, #96	; 0x60
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 ff81 	bl	800d6ec <memset>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	4a0c      	ldr	r2, [pc, #48]	; (800b820 <prvInitialiseNewTask+0x140>)
 800b7ee:	659a      	str	r2, [r3, #88]	; 0x58
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <prvInitialiseNewTask+0x144>)
 800b7f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	4a0b      	ldr	r2, [pc, #44]	; (800b828 <prvInitialiseNewTask+0x148>)
 800b7fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	69b8      	ldr	r0, [r7, #24]
 800b802:	f001 f9c3 	bl	800cb8c <pxPortInitialiseStack>
 800b806:	4602      	mov	r2, r0
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b818:	bf00      	nop
 800b81a:	3720      	adds	r7, #32
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	08012be4 	.word	0x08012be4
 800b824:	08012c04 	.word	0x08012c04
 800b828:	08012bc4 	.word	0x08012bc4

0800b82c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b834:	f001 fad6 	bl	800cde4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b838:	4b2d      	ldr	r3, [pc, #180]	; (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3301      	adds	r3, #1
 800b83e:	4a2c      	ldr	r2, [pc, #176]	; (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b842:	4b2c      	ldr	r3, [pc, #176]	; (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d109      	bne.n	800b85e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b84a:	4a2a      	ldr	r2, [pc, #168]	; (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b850:	4b27      	ldr	r3, [pc, #156]	; (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d110      	bne.n	800b87a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b858:	f000 fc98 	bl	800c18c <prvInitialiseTaskLists>
 800b85c:	e00d      	b.n	800b87a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <prvAddNewTaskToReadyList+0xcc>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d109      	bne.n	800b87a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b866:	4b23      	ldr	r3, [pc, #140]	; (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b870:	429a      	cmp	r2, r3
 800b872:	d802      	bhi.n	800b87a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b874:	4a1f      	ldr	r2, [pc, #124]	; (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b87a:	4b20      	ldr	r3, [pc, #128]	; (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3301      	adds	r3, #1
 800b880:	4a1e      	ldr	r2, [pc, #120]	; (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b884:	4b1d      	ldr	r3, [pc, #116]	; (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <prvAddNewTaskToReadyList+0xd4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d903      	bls.n	800b8a0 <prvAddNewTaskToReadyList+0x74>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	4a18      	ldr	r2, [pc, #96]	; (800b900 <prvAddNewTaskToReadyList+0xd4>)
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a15      	ldr	r2, [pc, #84]	; (800b904 <prvAddNewTaskToReadyList+0xd8>)
 800b8ae:	441a      	add	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7ff f877 	bl	800a9aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8bc:	f001 fac2 	bl	800ce44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <prvAddNewTaskToReadyList+0xcc>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d207      	bcs.n	800b8e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8d6:	4b0c      	ldr	r3, [pc, #48]	; (800b908 <prvAddNewTaskToReadyList+0xdc>)
 800b8d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20001164 	.word	0x20001164
 800b8f4:	20000c90 	.word	0x20000c90
 800b8f8:	20001170 	.word	0x20001170
 800b8fc:	20001180 	.word	0x20001180
 800b900:	2000116c 	.word	0x2000116c
 800b904:	20000c94 	.word	0x20000c94
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b914:	f001 fa66 	bl	800cde4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d102      	bne.n	800b924 <vTaskDelete+0x18>
 800b91e:	4b2c      	ldr	r3, [pc, #176]	; (800b9d0 <vTaskDelete+0xc4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	e000      	b.n	800b926 <vTaskDelete+0x1a>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3304      	adds	r3, #4
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff f899 	bl	800aa64 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b936:	2b00      	cmp	r3, #0
 800b938:	d004      	beq.n	800b944 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3318      	adds	r3, #24
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff f890 	bl	800aa64 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b944:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <vTaskDelete+0xc8>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3301      	adds	r3, #1
 800b94a:	4a22      	ldr	r2, [pc, #136]	; (800b9d4 <vTaskDelete+0xc8>)
 800b94c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b94e:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <vTaskDelete+0xc4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d10b      	bne.n	800b970 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	481e      	ldr	r0, [pc, #120]	; (800b9d8 <vTaskDelete+0xcc>)
 800b960:	f7ff f823 	bl	800a9aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b964:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <vTaskDelete+0xd0>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	4a1c      	ldr	r2, [pc, #112]	; (800b9dc <vTaskDelete+0xd0>)
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	e009      	b.n	800b984 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b970:	4b1b      	ldr	r3, [pc, #108]	; (800b9e0 <vTaskDelete+0xd4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3b01      	subs	r3, #1
 800b976:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <vTaskDelete+0xd4>)
 800b978:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fc74 	bl	800c268 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b980:	f000 fca6 	bl	800c2d0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b984:	f001 fa5e 	bl	800ce44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b988:	4b16      	ldr	r3, [pc, #88]	; (800b9e4 <vTaskDelete+0xd8>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d01b      	beq.n	800b9c8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800b990:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <vTaskDelete+0xc4>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	429a      	cmp	r2, r3
 800b998:	d116      	bne.n	800b9c8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <vTaskDelete+0xdc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <vTaskDelete+0xac>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	60bb      	str	r3, [r7, #8]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800b9b8:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <vTaskDelete+0xe0>)
 800b9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000c90 	.word	0x20000c90
 800b9d4:	20001180 	.word	0x20001180
 800b9d8:	20001138 	.word	0x20001138
 800b9dc:	2000114c 	.word	0x2000114c
 800b9e0:	20001164 	.word	0x20001164
 800b9e4:	20001170 	.word	0x20001170
 800b9e8:	2000118c 	.word	0x2000118c
 800b9ec:	e000ed04 	.word	0xe000ed04

0800b9f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba02:	4b13      	ldr	r3, [pc, #76]	; (800ba50 <vTaskDelay+0x60>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <vTaskDelay+0x30>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	60bb      	str	r3, [r7, #8]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba20:	f000 f88a 	bl	800bb38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba24:	2100      	movs	r1, #0
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fd0e 	bl	800c448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba2c:	f000 f892 	bl	800bb54 <xTaskResumeAll>
 800ba30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d107      	bne.n	800ba48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <vTaskDelay+0x64>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba48:	bf00      	nop
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	2000118c 	.word	0x2000118c
 800ba54:	e000ed04 	.word	0xe000ed04

0800ba58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba66:	463a      	mov	r2, r7
 800ba68:	1d39      	adds	r1, r7, #4
 800ba6a:	f107 0308 	add.w	r3, r7, #8
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe ff3a 	bl	800a8e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba74:	6839      	ldr	r1, [r7, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	9202      	str	r2, [sp, #8]
 800ba7c:	9301      	str	r3, [sp, #4]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	460a      	mov	r2, r1
 800ba86:	4924      	ldr	r1, [pc, #144]	; (800bb18 <vTaskStartScheduler+0xc0>)
 800ba88:	4824      	ldr	r0, [pc, #144]	; (800bb1c <vTaskStartScheduler+0xc4>)
 800ba8a:	f7ff fd87 	bl	800b59c <xTaskCreateStatic>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4a23      	ldr	r2, [pc, #140]	; (800bb20 <vTaskStartScheduler+0xc8>)
 800ba92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba94:	4b22      	ldr	r3, [pc, #136]	; (800bb20 <vTaskStartScheduler+0xc8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e001      	b.n	800baa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d102      	bne.n	800bab2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800baac:	f000 fd20 	bl	800c4f0 <xTimerCreateTimerTask>
 800bab0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d11b      	bne.n	800baf0 <vTaskStartScheduler+0x98>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	613b      	str	r3, [r7, #16]
}
 800baca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bacc:	4b15      	ldr	r3, [pc, #84]	; (800bb24 <vTaskStartScheduler+0xcc>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3354      	adds	r3, #84	; 0x54
 800bad2:	4a15      	ldr	r2, [pc, #84]	; (800bb28 <vTaskStartScheduler+0xd0>)
 800bad4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bad6:	4b15      	ldr	r3, [pc, #84]	; (800bb2c <vTaskStartScheduler+0xd4>)
 800bad8:	f04f 32ff 	mov.w	r2, #4294967295
 800badc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bade:	4b14      	ldr	r3, [pc, #80]	; (800bb30 <vTaskStartScheduler+0xd8>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bae4:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <vTaskStartScheduler+0xdc>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baea:	f001 f8d9 	bl	800cca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baee:	e00e      	b.n	800bb0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf6:	d10a      	bne.n	800bb0e <vTaskStartScheduler+0xb6>
	__asm volatile
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	60fb      	str	r3, [r7, #12]
}
 800bb0a:	bf00      	nop
 800bb0c:	e7fe      	b.n	800bb0c <vTaskStartScheduler+0xb4>
}
 800bb0e:	bf00      	nop
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	08012a30 	.word	0x08012a30
 800bb1c:	0800c15d 	.word	0x0800c15d
 800bb20:	20001188 	.word	0x20001188
 800bb24:	20000c90 	.word	0x20000c90
 800bb28:	20000030 	.word	0x20000030
 800bb2c:	20001184 	.word	0x20001184
 800bb30:	20001170 	.word	0x20001170
 800bb34:	20001168 	.word	0x20001168

0800bb38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb3c:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <vTaskSuspendAll+0x18>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	4a03      	ldr	r2, [pc, #12]	; (800bb50 <vTaskSuspendAll+0x18>)
 800bb44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb46:	bf00      	nop
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	2000118c 	.word	0x2000118c

0800bb54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb62:	4b42      	ldr	r3, [pc, #264]	; (800bc6c <xTaskResumeAll+0x118>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	603b      	str	r3, [r7, #0]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb80:	f001 f930 	bl	800cde4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb84:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <xTaskResumeAll+0x118>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	4a38      	ldr	r2, [pc, #224]	; (800bc6c <xTaskResumeAll+0x118>)
 800bb8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8e:	4b37      	ldr	r3, [pc, #220]	; (800bc6c <xTaskResumeAll+0x118>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d162      	bne.n	800bc5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb96:	4b36      	ldr	r3, [pc, #216]	; (800bc70 <xTaskResumeAll+0x11c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d05e      	beq.n	800bc5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb9e:	e02f      	b.n	800bc00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba0:	4b34      	ldr	r3, [pc, #208]	; (800bc74 <xTaskResumeAll+0x120>)
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3318      	adds	r3, #24
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe ff59 	bl	800aa64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ff54 	bl	800aa64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc0:	4b2d      	ldr	r3, [pc, #180]	; (800bc78 <xTaskResumeAll+0x124>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d903      	bls.n	800bbd0 <xTaskResumeAll+0x7c>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	4a2a      	ldr	r2, [pc, #168]	; (800bc78 <xTaskResumeAll+0x124>)
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4a27      	ldr	r2, [pc, #156]	; (800bc7c <xTaskResumeAll+0x128>)
 800bbde:	441a      	add	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f7fe fedf 	bl	800a9aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf0:	4b23      	ldr	r3, [pc, #140]	; (800bc80 <xTaskResumeAll+0x12c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bbfa:	4b22      	ldr	r3, [pc, #136]	; (800bc84 <xTaskResumeAll+0x130>)
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc00:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <xTaskResumeAll+0x120>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1cb      	bne.n	800bba0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc0e:	f000 fb5f 	bl	800c2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc12:	4b1d      	ldr	r3, [pc, #116]	; (800bc88 <xTaskResumeAll+0x134>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d010      	beq.n	800bc40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc1e:	f000 f847 	bl	800bcb0 <xTaskIncrementTick>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bc28:	4b16      	ldr	r3, [pc, #88]	; (800bc84 <xTaskResumeAll+0x130>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f1      	bne.n	800bc1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bc3a:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <xTaskResumeAll+0x134>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc40:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <xTaskResumeAll+0x130>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc4c:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <xTaskResumeAll+0x138>)
 800bc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc5c:	f001 f8f2 	bl	800ce44 <vPortExitCritical>

	return xAlreadyYielded;
 800bc60:	68bb      	ldr	r3, [r7, #8]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000118c 	.word	0x2000118c
 800bc70:	20001164 	.word	0x20001164
 800bc74:	20001124 	.word	0x20001124
 800bc78:	2000116c 	.word	0x2000116c
 800bc7c:	20000c94 	.word	0x20000c94
 800bc80:	20000c90 	.word	0x20000c90
 800bc84:	20001178 	.word	0x20001178
 800bc88:	20001174 	.word	0x20001174
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc96:	4b05      	ldr	r3, [pc, #20]	; (800bcac <xTaskGetTickCount+0x1c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc9c:	687b      	ldr	r3, [r7, #4]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	20001168 	.word	0x20001168

0800bcb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcba:	4b4f      	ldr	r3, [pc, #316]	; (800bdf8 <xTaskIncrementTick+0x148>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f040 808f 	bne.w	800bde2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcc4:	4b4d      	ldr	r3, [pc, #308]	; (800bdfc <xTaskIncrementTick+0x14c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bccc:	4a4b      	ldr	r2, [pc, #300]	; (800bdfc <xTaskIncrementTick+0x14c>)
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d120      	bne.n	800bd1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcd8:	4b49      	ldr	r3, [pc, #292]	; (800be00 <xTaskIncrementTick+0x150>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	603b      	str	r3, [r7, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <xTaskIncrementTick+0x46>
 800bcf8:	4b41      	ldr	r3, [pc, #260]	; (800be00 <xTaskIncrementTick+0x150>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	4b41      	ldr	r3, [pc, #260]	; (800be04 <xTaskIncrementTick+0x154>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a3f      	ldr	r2, [pc, #252]	; (800be00 <xTaskIncrementTick+0x150>)
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	4a3f      	ldr	r2, [pc, #252]	; (800be04 <xTaskIncrementTick+0x154>)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	4b3e      	ldr	r3, [pc, #248]	; (800be08 <xTaskIncrementTick+0x158>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3301      	adds	r3, #1
 800bd12:	4a3d      	ldr	r2, [pc, #244]	; (800be08 <xTaskIncrementTick+0x158>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	f000 fadb 	bl	800c2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd1a:	4b3c      	ldr	r3, [pc, #240]	; (800be0c <xTaskIncrementTick+0x15c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d349      	bcc.n	800bdb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd24:	4b36      	ldr	r3, [pc, #216]	; (800be00 <xTaskIncrementTick+0x150>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d104      	bne.n	800bd38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd2e:	4b37      	ldr	r3, [pc, #220]	; (800be0c <xTaskIncrementTick+0x15c>)
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295
 800bd34:	601a      	str	r2, [r3, #0]
					break;
 800bd36:	e03f      	b.n	800bdb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd38:	4b31      	ldr	r3, [pc, #196]	; (800be00 <xTaskIncrementTick+0x150>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d203      	bcs.n	800bd58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd50:	4a2e      	ldr	r2, [pc, #184]	; (800be0c <xTaskIncrementTick+0x15c>)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd56:	e02f      	b.n	800bdb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe fe81 	bl	800aa64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	3318      	adds	r3, #24
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fe78 	bl	800aa64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd78:	4b25      	ldr	r3, [pc, #148]	; (800be10 <xTaskIncrementTick+0x160>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d903      	bls.n	800bd88 <xTaskIncrementTick+0xd8>
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	4a22      	ldr	r2, [pc, #136]	; (800be10 <xTaskIncrementTick+0x160>)
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4a1f      	ldr	r2, [pc, #124]	; (800be14 <xTaskIncrementTick+0x164>)
 800bd96:	441a      	add	r2, r3
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f7fe fe03 	bl	800a9aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda8:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <xTaskIncrementTick+0x168>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3b8      	bcc.n	800bd24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdb6:	e7b5      	b.n	800bd24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdb8:	4b17      	ldr	r3, [pc, #92]	; (800be18 <xTaskIncrementTick+0x168>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbe:	4915      	ldr	r1, [pc, #84]	; (800be14 <xTaskIncrementTick+0x164>)
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	440b      	add	r3, r1
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d901      	bls.n	800bdd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdd4:	4b11      	ldr	r3, [pc, #68]	; (800be1c <xTaskIncrementTick+0x16c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d007      	beq.n	800bdec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	e004      	b.n	800bdec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bde2:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <xTaskIncrementTick+0x170>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	4a0d      	ldr	r2, [pc, #52]	; (800be20 <xTaskIncrementTick+0x170>)
 800bdea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdec:	697b      	ldr	r3, [r7, #20]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000118c 	.word	0x2000118c
 800bdfc:	20001168 	.word	0x20001168
 800be00:	2000111c 	.word	0x2000111c
 800be04:	20001120 	.word	0x20001120
 800be08:	2000117c 	.word	0x2000117c
 800be0c:	20001184 	.word	0x20001184
 800be10:	2000116c 	.word	0x2000116c
 800be14:	20000c94 	.word	0x20000c94
 800be18:	20000c90 	.word	0x20000c90
 800be1c:	20001178 	.word	0x20001178
 800be20:	20001174 	.word	0x20001174

0800be24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be2a:	4b2a      	ldr	r3, [pc, #168]	; (800bed4 <vTaskSwitchContext+0xb0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be32:	4b29      	ldr	r3, [pc, #164]	; (800bed8 <vTaskSwitchContext+0xb4>)
 800be34:	2201      	movs	r2, #1
 800be36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be38:	e046      	b.n	800bec8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800be3a:	4b27      	ldr	r3, [pc, #156]	; (800bed8 <vTaskSwitchContext+0xb4>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be40:	4b26      	ldr	r3, [pc, #152]	; (800bedc <vTaskSwitchContext+0xb8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	e010      	b.n	800be6a <vTaskSwitchContext+0x46>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <vTaskSwitchContext+0x40>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vTaskSwitchContext+0x3e>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b01      	subs	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	491d      	ldr	r1, [pc, #116]	; (800bee0 <vTaskSwitchContext+0xbc>)
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	440b      	add	r3, r1
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0e4      	beq.n	800be48 <vTaskSwitchContext+0x24>
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <vTaskSwitchContext+0xbc>)
 800be8a:	4413      	add	r3, r2
 800be8c:	60bb      	str	r3, [r7, #8]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	3308      	adds	r3, #8
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d104      	bne.n	800beae <vTaskSwitchContext+0x8a>
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	605a      	str	r2, [r3, #4]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <vTaskSwitchContext+0xc0>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	4a08      	ldr	r2, [pc, #32]	; (800bedc <vTaskSwitchContext+0xb8>)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <vTaskSwitchContext+0xc0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3354      	adds	r3, #84	; 0x54
 800bec4:	4a08      	ldr	r2, [pc, #32]	; (800bee8 <vTaskSwitchContext+0xc4>)
 800bec6:	6013      	str	r3, [r2, #0]
}
 800bec8:	bf00      	nop
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	2000118c 	.word	0x2000118c
 800bed8:	20001178 	.word	0x20001178
 800bedc:	2000116c 	.word	0x2000116c
 800bee0:	20000c94 	.word	0x20000c94
 800bee4:	20000c90 	.word	0x20000c90
 800bee8:	20000030 	.word	0x20000030

0800beec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60fb      	str	r3, [r7, #12]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf12:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <vTaskPlaceOnEventList+0x44>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3318      	adds	r3, #24
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7fe fd69 	bl	800a9f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf20:	2101      	movs	r1, #1
 800bf22:	6838      	ldr	r0, [r7, #0]
 800bf24:	f000 fa90 	bl	800c448 <prvAddCurrentTaskToDelayedList>
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	20000c90 	.word	0x20000c90

0800bf34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10a      	bne.n	800bf5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	617b      	str	r3, [r7, #20]
}
 800bf58:	bf00      	nop
 800bf5a:	e7fe      	b.n	800bf5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf5c:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3318      	adds	r3, #24
 800bf62:	4619      	mov	r1, r3
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7fe fd20 	bl	800a9aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf70:	f04f 33ff 	mov.w	r3, #4294967295
 800bf74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf76:	6879      	ldr	r1, [r7, #4]
 800bf78:	68b8      	ldr	r0, [r7, #8]
 800bf7a:	f000 fa65 	bl	800c448 <prvAddCurrentTaskToDelayedList>
	}
 800bf7e:	bf00      	nop
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000c90 	.word	0x20000c90

0800bf8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60fb      	str	r3, [r7, #12]
}
 800bfb4:	bf00      	nop
 800bfb6:	e7fe      	b.n	800bfb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	3318      	adds	r3, #24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fd51 	bl	800aa64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfc2:	4b1e      	ldr	r3, [pc, #120]	; (800c03c <xTaskRemoveFromEventList+0xb0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d11d      	bne.n	800c006 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe fd48 	bl	800aa64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd8:	4b19      	ldr	r3, [pc, #100]	; (800c040 <xTaskRemoveFromEventList+0xb4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d903      	bls.n	800bfe8 <xTaskRemoveFromEventList+0x5c>
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe4:	4a16      	ldr	r2, [pc, #88]	; (800c040 <xTaskRemoveFromEventList+0xb4>)
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4a13      	ldr	r2, [pc, #76]	; (800c044 <xTaskRemoveFromEventList+0xb8>)
 800bff6:	441a      	add	r2, r3
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	3304      	adds	r3, #4
 800bffc:	4619      	mov	r1, r3
 800bffe:	4610      	mov	r0, r2
 800c000:	f7fe fcd3 	bl	800a9aa <vListInsertEnd>
 800c004:	e005      	b.n	800c012 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3318      	adds	r3, #24
 800c00a:	4619      	mov	r1, r3
 800c00c:	480e      	ldr	r0, [pc, #56]	; (800c048 <xTaskRemoveFromEventList+0xbc>)
 800c00e:	f7fe fccc 	bl	800a9aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <xTaskRemoveFromEventList+0xc0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d905      	bls.n	800c02c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c020:	2301      	movs	r3, #1
 800c022:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c024:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <xTaskRemoveFromEventList+0xc4>)
 800c026:	2201      	movs	r2, #1
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	e001      	b.n	800c030 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c030:	697b      	ldr	r3, [r7, #20]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	2000118c 	.word	0x2000118c
 800c040:	2000116c 	.word	0x2000116c
 800c044:	20000c94 	.word	0x20000c94
 800c048:	20001124 	.word	0x20001124
 800c04c:	20000c90 	.word	0x20000c90
 800c050:	20001178 	.word	0x20001178

0800c054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c05c:	4b06      	ldr	r3, [pc, #24]	; (800c078 <vTaskInternalSetTimeOutState+0x24>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <vTaskInternalSetTimeOutState+0x28>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	605a      	str	r2, [r3, #4]
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	2000117c 	.word	0x2000117c
 800c07c:	20001168 	.word	0x20001168

0800c080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	613b      	str	r3, [r7, #16]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60fb      	str	r3, [r7, #12]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0c2:	f000 fe8f 	bl	800cde4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0c6:	4b1d      	ldr	r3, [pc, #116]	; (800c13c <xTaskCheckForTimeOut+0xbc>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0de:	d102      	bne.n	800c0e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	e023      	b.n	800c12e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	4b15      	ldr	r3, [pc, #84]	; (800c140 <xTaskCheckForTimeOut+0xc0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d007      	beq.n	800c102 <xTaskCheckForTimeOut+0x82>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d302      	bcc.n	800c102 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	e015      	b.n	800c12e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d20b      	bcs.n	800c124 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	1ad2      	subs	r2, r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff ff9b 	bl	800c054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c11e:	2300      	movs	r3, #0
 800c120:	61fb      	str	r3, [r7, #28]
 800c122:	e004      	b.n	800c12e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c12a:	2301      	movs	r3, #1
 800c12c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c12e:	f000 fe89 	bl	800ce44 <vPortExitCritical>

	return xReturn;
 800c132:	69fb      	ldr	r3, [r7, #28]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20001168 	.word	0x20001168
 800c140:	2000117c 	.word	0x2000117c

0800c144 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c144:	b480      	push	{r7}
 800c146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c148:	4b03      	ldr	r3, [pc, #12]	; (800c158 <vTaskMissedYield+0x14>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	601a      	str	r2, [r3, #0]
}
 800c14e:	bf00      	nop
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	20001178 	.word	0x20001178

0800c15c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c164:	f000 f852 	bl	800c20c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <prvIdleTask+0x28>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d9f9      	bls.n	800c164 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <prvIdleTask+0x2c>)
 800c172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c180:	e7f0      	b.n	800c164 <prvIdleTask+0x8>
 800c182:	bf00      	nop
 800c184:	20000c94 	.word	0x20000c94
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c192:	2300      	movs	r3, #0
 800c194:	607b      	str	r3, [r7, #4]
 800c196:	e00c      	b.n	800c1b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4a12      	ldr	r2, [pc, #72]	; (800c1ec <prvInitialiseTaskLists+0x60>)
 800c1a4:	4413      	add	r3, r2
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fbd2 	bl	800a950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b37      	cmp	r3, #55	; 0x37
 800c1b6:	d9ef      	bls.n	800c198 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1b8:	480d      	ldr	r0, [pc, #52]	; (800c1f0 <prvInitialiseTaskLists+0x64>)
 800c1ba:	f7fe fbc9 	bl	800a950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1be:	480d      	ldr	r0, [pc, #52]	; (800c1f4 <prvInitialiseTaskLists+0x68>)
 800c1c0:	f7fe fbc6 	bl	800a950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1c4:	480c      	ldr	r0, [pc, #48]	; (800c1f8 <prvInitialiseTaskLists+0x6c>)
 800c1c6:	f7fe fbc3 	bl	800a950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1ca:	480c      	ldr	r0, [pc, #48]	; (800c1fc <prvInitialiseTaskLists+0x70>)
 800c1cc:	f7fe fbc0 	bl	800a950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1d0:	480b      	ldr	r0, [pc, #44]	; (800c200 <prvInitialiseTaskLists+0x74>)
 800c1d2:	f7fe fbbd 	bl	800a950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <prvInitialiseTaskLists+0x78>)
 800c1d8:	4a05      	ldr	r2, [pc, #20]	; (800c1f0 <prvInitialiseTaskLists+0x64>)
 800c1da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <prvInitialiseTaskLists+0x7c>)
 800c1de:	4a05      	ldr	r2, [pc, #20]	; (800c1f4 <prvInitialiseTaskLists+0x68>)
 800c1e0:	601a      	str	r2, [r3, #0]
}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20000c94 	.word	0x20000c94
 800c1f0:	200010f4 	.word	0x200010f4
 800c1f4:	20001108 	.word	0x20001108
 800c1f8:	20001124 	.word	0x20001124
 800c1fc:	20001138 	.word	0x20001138
 800c200:	20001150 	.word	0x20001150
 800c204:	2000111c 	.word	0x2000111c
 800c208:	20001120 	.word	0x20001120

0800c20c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c212:	e019      	b.n	800c248 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c214:	f000 fde6 	bl	800cde4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c218:	4b10      	ldr	r3, [pc, #64]	; (800c25c <prvCheckTasksWaitingTermination+0x50>)
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe fc1d 	bl	800aa64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c22a:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <prvCheckTasksWaitingTermination+0x54>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3b01      	subs	r3, #1
 800c230:	4a0b      	ldr	r2, [pc, #44]	; (800c260 <prvCheckTasksWaitingTermination+0x54>)
 800c232:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <prvCheckTasksWaitingTermination+0x58>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3b01      	subs	r3, #1
 800c23a:	4a0a      	ldr	r2, [pc, #40]	; (800c264 <prvCheckTasksWaitingTermination+0x58>)
 800c23c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c23e:	f000 fe01 	bl	800ce44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f810 	bl	800c268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c248:	4b06      	ldr	r3, [pc, #24]	; (800c264 <prvCheckTasksWaitingTermination+0x58>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e1      	bne.n	800c214 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20001138 	.word	0x20001138
 800c260:	20001164 	.word	0x20001164
 800c264:	2000114c 	.word	0x2000114c

0800c268 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3354      	adds	r3, #84	; 0x54
 800c274:	4618      	mov	r0, r3
 800c276:	f002 f973 	bl	800e560 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c280:	2b00      	cmp	r3, #0
 800c282:	d108      	bne.n	800c296 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 ff99 	bl	800d1c0 <vPortFree>
				vPortFree( pxTCB );
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 ff96 	bl	800d1c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c294:	e018      	b.n	800c2c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d103      	bne.n	800c2a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 ff8d 	bl	800d1c0 <vPortFree>
	}
 800c2a6:	e00f      	b.n	800c2c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d00a      	beq.n	800c2c8 <prvDeleteTCB+0x60>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	60fb      	str	r3, [r7, #12]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <prvDeleteTCB+0x5e>
	}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <prvResetNextTaskUnblockTime+0x38>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d104      	bne.n	800c2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <prvResetNextTaskUnblockTime+0x3c>)
 800c2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2e8:	e008      	b.n	800c2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ea:	4b07      	ldr	r3, [pc, #28]	; (800c308 <prvResetNextTaskUnblockTime+0x38>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a04      	ldr	r2, [pc, #16]	; (800c30c <prvResetNextTaskUnblockTime+0x3c>)
 800c2fa:	6013      	str	r3, [r2, #0]
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	2000111c 	.word	0x2000111c
 800c30c:	20001184 	.word	0x20001184

0800c310 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <xTaskGetCurrentTaskHandle+0x1c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c31c:	687b      	ldr	r3, [r7, #4]
	}
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	20000c90 	.word	0x20000c90

0800c330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c336:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <xTaskGetSchedulerState+0x34>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c33e:	2301      	movs	r3, #1
 800c340:	607b      	str	r3, [r7, #4]
 800c342:	e008      	b.n	800c356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c344:	4b08      	ldr	r3, [pc, #32]	; (800c368 <xTaskGetSchedulerState+0x38>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c34c:	2302      	movs	r3, #2
 800c34e:	607b      	str	r3, [r7, #4]
 800c350:	e001      	b.n	800c356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c352:	2300      	movs	r3, #0
 800c354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c356:	687b      	ldr	r3, [r7, #4]
	}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	20001170 	.word	0x20001170
 800c368:	2000118c 	.word	0x2000118c

0800c36c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c378:	2300      	movs	r3, #0
 800c37a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d056      	beq.n	800c430 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c382:	4b2e      	ldr	r3, [pc, #184]	; (800c43c <xTaskPriorityDisinherit+0xd0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d00a      	beq.n	800c3a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60fb      	str	r3, [r7, #12]
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10a      	bne.n	800c3c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	60bb      	str	r3, [r7, #8]
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c4:	1e5a      	subs	r2, r3, #1
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d02c      	beq.n	800c430 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d128      	bne.n	800c430 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fb3e 	bl	800aa64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c400:	4b0f      	ldr	r3, [pc, #60]	; (800c440 <xTaskPriorityDisinherit+0xd4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	429a      	cmp	r2, r3
 800c406:	d903      	bls.n	800c410 <xTaskPriorityDisinherit+0xa4>
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	4a0c      	ldr	r2, [pc, #48]	; (800c440 <xTaskPriorityDisinherit+0xd4>)
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c414:	4613      	mov	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4a09      	ldr	r2, [pc, #36]	; (800c444 <xTaskPriorityDisinherit+0xd8>)
 800c41e:	441a      	add	r2, r3
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	3304      	adds	r3, #4
 800c424:	4619      	mov	r1, r3
 800c426:	4610      	mov	r0, r2
 800c428:	f7fe fabf 	bl	800a9aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c42c:	2301      	movs	r3, #1
 800c42e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c430:	697b      	ldr	r3, [r7, #20]
	}
 800c432:	4618      	mov	r0, r3
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20000c90 	.word	0x20000c90
 800c440:	2000116c 	.word	0x2000116c
 800c444:	20000c94 	.word	0x20000c94

0800c448 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c452:	4b21      	ldr	r3, [pc, #132]	; (800c4d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c458:	4b20      	ldr	r3, [pc, #128]	; (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fb00 	bl	800aa64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d10a      	bne.n	800c482 <prvAddCurrentTaskToDelayedList+0x3a>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d007      	beq.n	800c482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c472:	4b1a      	ldr	r3, [pc, #104]	; (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3304      	adds	r3, #4
 800c478:	4619      	mov	r1, r3
 800c47a:	4819      	ldr	r0, [pc, #100]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c47c:	f7fe fa95 	bl	800a9aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c480:	e026      	b.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4413      	add	r3, r2
 800c488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c48a:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	429a      	cmp	r2, r3
 800c498:	d209      	bcs.n	800c4ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c49a:	4b12      	ldr	r3, [pc, #72]	; (800c4e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f7fe faa3 	bl	800a9f2 <vListInsert>
}
 800c4ac:	e010      	b.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ae:	4b0e      	ldr	r3, [pc, #56]	; (800c4e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7fe fa99 	bl	800a9f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d202      	bcs.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4ca:	4a08      	ldr	r2, [pc, #32]	; (800c4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	6013      	str	r3, [r2, #0]
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20001168 	.word	0x20001168
 800c4dc:	20000c90 	.word	0x20000c90
 800c4e0:	20001150 	.word	0x20001150
 800c4e4:	20001120 	.word	0x20001120
 800c4e8:	2000111c 	.word	0x2000111c
 800c4ec:	20001184 	.word	0x20001184

0800c4f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c4fa:	f000 fb07 	bl	800cb0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4fe:	4b1c      	ldr	r3, [pc, #112]	; (800c570 <xTimerCreateTimerTask+0x80>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d021      	beq.n	800c54a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c50e:	1d3a      	adds	r2, r7, #4
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe f9ff 	bl	800a91c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c51e:	6879      	ldr	r1, [r7, #4]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	9202      	str	r2, [sp, #8]
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	2302      	movs	r3, #2
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	2300      	movs	r3, #0
 800c52e:	460a      	mov	r2, r1
 800c530:	4910      	ldr	r1, [pc, #64]	; (800c574 <xTimerCreateTimerTask+0x84>)
 800c532:	4811      	ldr	r0, [pc, #68]	; (800c578 <xTimerCreateTimerTask+0x88>)
 800c534:	f7ff f832 	bl	800b59c <xTaskCreateStatic>
 800c538:	4603      	mov	r3, r0
 800c53a:	4a10      	ldr	r2, [pc, #64]	; (800c57c <xTimerCreateTimerTask+0x8c>)
 800c53c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c53e:	4b0f      	ldr	r3, [pc, #60]	; (800c57c <xTimerCreateTimerTask+0x8c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	613b      	str	r3, [r7, #16]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c566:	697b      	ldr	r3, [r7, #20]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	200011c0 	.word	0x200011c0
 800c574:	08012a38 	.word	0x08012a38
 800c578:	0800c6b5 	.word	0x0800c6b5
 800c57c:	200011c4 	.word	0x200011c4

0800c580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c58e:	2300      	movs	r3, #0
 800c590:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	623b      	str	r3, [r7, #32]
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5ae:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <xTimerGenericCommand+0x98>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d02a      	beq.n	800c60c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b05      	cmp	r3, #5
 800c5c6:	dc18      	bgt.n	800c5fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5c8:	f7ff feb2 	bl	800c330 <xTaskGetSchedulerState>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d109      	bne.n	800c5e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5d2:	4b11      	ldr	r3, [pc, #68]	; (800c618 <xTimerGenericCommand+0x98>)
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	f107 0110 	add.w	r1, r7, #16
 800c5da:	2300      	movs	r3, #0
 800c5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5de:	f7fe fbf5 	bl	800adcc <xQueueGenericSend>
 800c5e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c5e4:	e012      	b.n	800c60c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5e6:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <xTimerGenericCommand+0x98>)
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f107 0110 	add.w	r1, r7, #16
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f7fe fbeb 	bl	800adcc <xQueueGenericSend>
 800c5f6:	6278      	str	r0, [r7, #36]	; 0x24
 800c5f8:	e008      	b.n	800c60c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <xTimerGenericCommand+0x98>)
 800c5fc:	6818      	ldr	r0, [r3, #0]
 800c5fe:	f107 0110 	add.w	r1, r7, #16
 800c602:	2300      	movs	r3, #0
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	f7fe fcdf 	bl	800afc8 <xQueueGenericSendFromISR>
 800c60a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3728      	adds	r7, #40	; 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200011c0 	.word	0x200011c0

0800c61c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af02      	add	r7, sp, #8
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c626:	4b22      	ldr	r3, [pc, #136]	; (800c6b0 <prvProcessExpiredTimer+0x94>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	3304      	adds	r3, #4
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fa15 	bl	800aa64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d022      	beq.n	800c68e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	699a      	ldr	r2, [r3, #24]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	18d1      	adds	r1, r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	6978      	ldr	r0, [r7, #20]
 800c656:	f000 f8d1 	bl	800c7fc <prvInsertTimerInActiveList>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01f      	beq.n	800c6a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	2100      	movs	r1, #0
 800c66a:	6978      	ldr	r0, [r7, #20]
 800c66c:	f7ff ff88 	bl	800c580 <xTimerGenericCommand>
 800c670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d113      	bne.n	800c6a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	60fb      	str	r3, [r7, #12]
}
 800c68a:	bf00      	nop
 800c68c:	e7fe      	b.n	800c68c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c694:	f023 0301 	bic.w	r3, r3, #1
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	6978      	ldr	r0, [r7, #20]
 800c6a6:	4798      	blx	r3
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	200011b8 	.word	0x200011b8

0800c6b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 f857 	bl	800c774 <prvGetNextExpireTime>
 800c6c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 f803 	bl	800c6d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6d2:	f000 f8d5 	bl	800c880 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6d6:	e7f1      	b.n	800c6bc <prvTimerTask+0x8>

0800c6d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6e2:	f7ff fa29 	bl	800bb38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6e6:	f107 0308 	add.w	r3, r7, #8
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 f866 	bl	800c7bc <prvSampleTimeNow>
 800c6f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d130      	bne.n	800c75a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10a      	bne.n	800c714 <prvProcessTimerOrBlockTask+0x3c>
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	429a      	cmp	r2, r3
 800c704:	d806      	bhi.n	800c714 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c706:	f7ff fa25 	bl	800bb54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c70a:	68f9      	ldr	r1, [r7, #12]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff ff85 	bl	800c61c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c712:	e024      	b.n	800c75e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d008      	beq.n	800c72c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c71a:	4b13      	ldr	r3, [pc, #76]	; (800c768 <prvProcessTimerOrBlockTask+0x90>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <prvProcessTimerOrBlockTask+0x50>
 800c724:	2301      	movs	r3, #1
 800c726:	e000      	b.n	800c72a <prvProcessTimerOrBlockTask+0x52>
 800c728:	2300      	movs	r3, #0
 800c72a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c72c:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <prvProcessTimerOrBlockTask+0x94>)
 800c72e:	6818      	ldr	r0, [r3, #0]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4619      	mov	r1, r3
 800c73a:	f7fe fefb 	bl	800b534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c73e:	f7ff fa09 	bl	800bb54 <xTaskResumeAll>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <prvProcessTimerOrBlockTask+0x98>)
 800c74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	f3bf 8f6f 	isb	sy
}
 800c758:	e001      	b.n	800c75e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c75a:	f7ff f9fb 	bl	800bb54 <xTaskResumeAll>
}
 800c75e:	bf00      	nop
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200011bc 	.word	0x200011bc
 800c76c:	200011c0 	.word	0x200011c0
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c77c:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <prvGetNextExpireTime+0x44>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <prvGetNextExpireTime+0x16>
 800c786:	2201      	movs	r2, #1
 800c788:	e000      	b.n	800c78c <prvGetNextExpireTime+0x18>
 800c78a:	2200      	movs	r2, #0
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d105      	bne.n	800c7a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c798:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <prvGetNextExpireTime+0x44>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	e001      	b.n	800c7a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	200011b8 	.word	0x200011b8

0800c7bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7c4:	f7ff fa64 	bl	800bc90 <xTaskGetTickCount>
 800c7c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7ca:	4b0b      	ldr	r3, [pc, #44]	; (800c7f8 <prvSampleTimeNow+0x3c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d205      	bcs.n	800c7e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7d4:	f000 f936 	bl	800ca44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e002      	b.n	800c7e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7e6:	4a04      	ldr	r2, [pc, #16]	; (800c7f8 <prvSampleTimeNow+0x3c>)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200011c8 	.word	0x200011c8

0800c7fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
 800c808:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d812      	bhi.n	800c848 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	1ad2      	subs	r2, r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d302      	bcc.n	800c836 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	e01b      	b.n	800c86e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c836:	4b10      	ldr	r3, [pc, #64]	; (800c878 <prvInsertTimerInActiveList+0x7c>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3304      	adds	r3, #4
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f7fe f8d6 	bl	800a9f2 <vListInsert>
 800c846:	e012      	b.n	800c86e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d206      	bcs.n	800c85e <prvInsertTimerInActiveList+0x62>
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d302      	bcc.n	800c85e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c858:	2301      	movs	r3, #1
 800c85a:	617b      	str	r3, [r7, #20]
 800c85c:	e007      	b.n	800c86e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c85e:	4b07      	ldr	r3, [pc, #28]	; (800c87c <prvInsertTimerInActiveList+0x80>)
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3304      	adds	r3, #4
 800c866:	4619      	mov	r1, r3
 800c868:	4610      	mov	r0, r2
 800c86a:	f7fe f8c2 	bl	800a9f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c86e:	697b      	ldr	r3, [r7, #20]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200011bc 	.word	0x200011bc
 800c87c:	200011b8 	.word	0x200011b8

0800c880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08e      	sub	sp, #56	; 0x38
 800c884:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c886:	e0ca      	b.n	800ca1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	da18      	bge.n	800c8c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c88e:	1d3b      	adds	r3, r7, #4
 800c890:	3304      	adds	r3, #4
 800c892:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	61fb      	str	r3, [r7, #28]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8b6:	6850      	ldr	r0, [r2, #4]
 800c8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ba:	6892      	ldr	r2, [r2, #8]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f2c0 80aa 	blt.w	800ca1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d004      	beq.n	800c8de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe f8c3 	bl	800aa64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8de:	463b      	mov	r3, r7
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff ff6b 	bl	800c7bc <prvSampleTimeNow>
 800c8e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b09      	cmp	r3, #9
 800c8ec:	f200 8097 	bhi.w	800ca1e <prvProcessReceivedCommands+0x19e>
 800c8f0:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <prvProcessReceivedCommands+0x78>)
 800c8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f6:	bf00      	nop
 800c8f8:	0800c921 	.word	0x0800c921
 800c8fc:	0800c921 	.word	0x0800c921
 800c900:	0800c921 	.word	0x0800c921
 800c904:	0800c995 	.word	0x0800c995
 800c908:	0800c9a9 	.word	0x0800c9a9
 800c90c:	0800c9f3 	.word	0x0800c9f3
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c921 	.word	0x0800c921
 800c918:	0800c995 	.word	0x0800c995
 800c91c:	0800c9a9 	.word	0x0800c9a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c926:	f043 0301 	orr.w	r3, r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	18d1      	adds	r1, r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c940:	f7ff ff5c 	bl	800c7fc <prvInsertTimerInActiveList>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d069      	beq.n	800ca1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c950:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c958:	f003 0304 	and.w	r3, r3, #4
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d05e      	beq.n	800ca1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	441a      	add	r2, r3
 800c968:	2300      	movs	r3, #0
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	2300      	movs	r3, #0
 800c96e:	2100      	movs	r1, #0
 800c970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c972:	f7ff fe05 	bl	800c580 <xTimerGenericCommand>
 800c976:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d14f      	bne.n	800ca1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61bb      	str	r3, [r7, #24]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c99a:	f023 0301 	bic.w	r3, r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c9a6:	e03a      	b.n	800ca1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ae:	f043 0301 	orr.w	r3, r3, #1
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10a      	bne.n	800c9de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	617b      	str	r3, [r7, #20]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	699a      	ldr	r2, [r3, #24]
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	18d1      	adds	r1, r2, r3
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ec:	f7ff ff06 	bl	800c7fc <prvInsertTimerInActiveList>
					break;
 800c9f0:	e015      	b.n	800ca1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d103      	bne.n	800ca08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f000 fbdd 	bl	800d1c0 <vPortFree>
 800ca06:	e00a      	b.n	800ca1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca0e:	f023 0301 	bic.w	r3, r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca1a:	e000      	b.n	800ca1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca1e:	4b08      	ldr	r3, [pc, #32]	; (800ca40 <prvProcessReceivedCommands+0x1c0>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	1d39      	adds	r1, r7, #4
 800ca24:	2200      	movs	r2, #0
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fb6a 	bl	800b100 <xQueueReceive>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f47f af2a 	bne.w	800c888 <prvProcessReceivedCommands+0x8>
	}
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop
 800ca38:	3730      	adds	r7, #48	; 0x30
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	200011c0 	.word	0x200011c0

0800ca44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca4a:	e048      	b.n	800cade <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca4c:	4b2d      	ldr	r3, [pc, #180]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca56:	4b2b      	ldr	r3, [pc, #172]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fd fffd 	bl	800aa64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d02e      	beq.n	800cade <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	4413      	add	r3, r2
 800ca88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d90e      	bls.n	800cab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca9e:	4b19      	ldr	r3, [pc, #100]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3304      	adds	r3, #4
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f7fd ffa2 	bl	800a9f2 <vListInsert>
 800caae:	e016      	b.n	800cade <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cab0:	2300      	movs	r3, #0
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	2300      	movs	r3, #0
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	2100      	movs	r1, #0
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7ff fd60 	bl	800c580 <xTimerGenericCommand>
 800cac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10a      	bne.n	800cade <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	603b      	str	r3, [r7, #0]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cade:	4b09      	ldr	r3, [pc, #36]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1b1      	bne.n	800ca4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cae8:	4b06      	ldr	r3, [pc, #24]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800caee:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <prvSwitchTimerLists+0xc4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a04      	ldr	r2, [pc, #16]	; (800cb04 <prvSwitchTimerLists+0xc0>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800caf6:	4a04      	ldr	r2, [pc, #16]	; (800cb08 <prvSwitchTimerLists+0xc4>)
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	6013      	str	r3, [r2, #0]
}
 800cafc:	bf00      	nop
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	200011b8 	.word	0x200011b8
 800cb08:	200011bc 	.word	0x200011bc

0800cb0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb12:	f000 f967 	bl	800cde4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb16:	4b15      	ldr	r3, [pc, #84]	; (800cb6c <prvCheckForValidListAndQueue+0x60>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d120      	bne.n	800cb60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb1e:	4814      	ldr	r0, [pc, #80]	; (800cb70 <prvCheckForValidListAndQueue+0x64>)
 800cb20:	f7fd ff16 	bl	800a950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb24:	4813      	ldr	r0, [pc, #76]	; (800cb74 <prvCheckForValidListAndQueue+0x68>)
 800cb26:	f7fd ff13 	bl	800a950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb2a:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <prvCheckForValidListAndQueue+0x6c>)
 800cb2c:	4a10      	ldr	r2, [pc, #64]	; (800cb70 <prvCheckForValidListAndQueue+0x64>)
 800cb2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb30:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <prvCheckForValidListAndQueue+0x70>)
 800cb32:	4a10      	ldr	r2, [pc, #64]	; (800cb74 <prvCheckForValidListAndQueue+0x68>)
 800cb34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb36:	2300      	movs	r3, #0
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4b11      	ldr	r3, [pc, #68]	; (800cb80 <prvCheckForValidListAndQueue+0x74>)
 800cb3c:	4a11      	ldr	r2, [pc, #68]	; (800cb84 <prvCheckForValidListAndQueue+0x78>)
 800cb3e:	2110      	movs	r1, #16
 800cb40:	200a      	movs	r0, #10
 800cb42:	f7fe f821 	bl	800ab88 <xQueueGenericCreateStatic>
 800cb46:	4603      	mov	r3, r0
 800cb48:	4a08      	ldr	r2, [pc, #32]	; (800cb6c <prvCheckForValidListAndQueue+0x60>)
 800cb4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb4c:	4b07      	ldr	r3, [pc, #28]	; (800cb6c <prvCheckForValidListAndQueue+0x60>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <prvCheckForValidListAndQueue+0x60>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	490b      	ldr	r1, [pc, #44]	; (800cb88 <prvCheckForValidListAndQueue+0x7c>)
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fcc0 	bl	800b4e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb60:	f000 f970 	bl	800ce44 <vPortExitCritical>
}
 800cb64:	bf00      	nop
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	200011c0 	.word	0x200011c0
 800cb70:	20001190 	.word	0x20001190
 800cb74:	200011a4 	.word	0x200011a4
 800cb78:	200011b8 	.word	0x200011b8
 800cb7c:	200011bc 	.word	0x200011bc
 800cb80:	2000126c 	.word	0x2000126c
 800cb84:	200011cc 	.word	0x200011cc
 800cb88:	08012a40 	.word	0x08012a40

0800cb8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3b04      	subs	r3, #4
 800cb9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3b04      	subs	r3, #4
 800cbaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f023 0201 	bic.w	r2, r3, #1
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3b04      	subs	r3, #4
 800cbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbbc:	4a0c      	ldr	r2, [pc, #48]	; (800cbf0 <pxPortInitialiseStack+0x64>)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3b14      	subs	r3, #20
 800cbc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3b04      	subs	r3, #4
 800cbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f06f 0202 	mvn.w	r2, #2
 800cbda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3b20      	subs	r3, #32
 800cbe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	0800cbf5 	.word	0x0800cbf5

0800cbf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbfe:	4b12      	ldr	r3, [pc, #72]	; (800cc48 <prvTaskExitError+0x54>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc06:	d00a      	beq.n	800cc1e <prvTaskExitError+0x2a>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	60fb      	str	r3, [r7, #12]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <prvTaskExitError+0x28>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	60bb      	str	r3, [r7, #8]
}
 800cc30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc32:	bf00      	nop
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0fc      	beq.n	800cc34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000028 	.word	0x20000028
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc50:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <pxCurrentTCBConst2>)
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	6808      	ldr	r0, [r1, #0]
 800cc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	f380 8809 	msr	PSP, r0
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f04f 0000 	mov.w	r0, #0
 800cc66:	f380 8811 	msr	BASEPRI, r0
 800cc6a:	4770      	bx	lr
 800cc6c:	f3af 8000 	nop.w

0800cc70 <pxCurrentTCBConst2>:
 800cc70:	20000c90 	.word	0x20000c90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc78:	4808      	ldr	r0, [pc, #32]	; (800cc9c <prvPortStartFirstTask+0x24>)
 800cc7a:	6800      	ldr	r0, [r0, #0]
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	f380 8808 	msr	MSP, r0
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8814 	msr	CONTROL, r0
 800cc8a:	b662      	cpsie	i
 800cc8c:	b661      	cpsie	f
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	df00      	svc	0
 800cc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc9a:	bf00      	nop
 800cc9c:	e000ed08 	.word	0xe000ed08

0800cca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cca6:	4b46      	ldr	r3, [pc, #280]	; (800cdc0 <xPortStartScheduler+0x120>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a46      	ldr	r2, [pc, #280]	; (800cdc4 <xPortStartScheduler+0x124>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d10a      	bne.n	800ccc6 <xPortStartScheduler+0x26>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	613b      	str	r3, [r7, #16]
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccc6:	4b3e      	ldr	r3, [pc, #248]	; (800cdc0 <xPortStartScheduler+0x120>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a3f      	ldr	r2, [pc, #252]	; (800cdc8 <xPortStartScheduler+0x128>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d10a      	bne.n	800cce6 <xPortStartScheduler+0x46>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	60fb      	str	r3, [r7, #12]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cce6:	4b39      	ldr	r3, [pc, #228]	; (800cdcc <xPortStartScheduler+0x12c>)
 800cce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	22ff      	movs	r2, #255	; 0xff
 800ccf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	4b31      	ldr	r3, [pc, #196]	; (800cdd0 <xPortStartScheduler+0x130>)
 800cd0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd0e:	4b31      	ldr	r3, [pc, #196]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd10:	2207      	movs	r2, #7
 800cd12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd14:	e009      	b.n	800cd2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd16:	4b2f      	ldr	r3, [pc, #188]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	4a2d      	ldr	r2, [pc, #180]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd2a:	78fb      	ldrb	r3, [r7, #3]
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd32:	2b80      	cmp	r3, #128	; 0x80
 800cd34:	d0ef      	beq.n	800cd16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd36:	4b27      	ldr	r3, [pc, #156]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f1c3 0307 	rsb	r3, r3, #7
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d00a      	beq.n	800cd58 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	60bb      	str	r3, [r7, #8]
}
 800cd54:	bf00      	nop
 800cd56:	e7fe      	b.n	800cd56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd58:	4b1e      	ldr	r3, [pc, #120]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	4a1d      	ldr	r2, [pc, #116]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd62:	4b1c      	ldr	r3, [pc, #112]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd6a:	4a1a      	ldr	r2, [pc, #104]	; (800cdd4 <xPortStartScheduler+0x134>)
 800cd6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd76:	4b18      	ldr	r3, [pc, #96]	; (800cdd8 <xPortStartScheduler+0x138>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <xPortStartScheduler+0x138>)
 800cd7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd82:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <xPortStartScheduler+0x138>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a14      	ldr	r2, [pc, #80]	; (800cdd8 <xPortStartScheduler+0x138>)
 800cd88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd8e:	f000 f8dd 	bl	800cf4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd92:	4b12      	ldr	r3, [pc, #72]	; (800cddc <xPortStartScheduler+0x13c>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd98:	f000 f8fc 	bl	800cf94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd9c:	4b10      	ldr	r3, [pc, #64]	; (800cde0 <xPortStartScheduler+0x140>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a0f      	ldr	r2, [pc, #60]	; (800cde0 <xPortStartScheduler+0x140>)
 800cda2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cda6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cda8:	f7ff ff66 	bl	800cc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdac:	f7ff f83a 	bl	800be24 <vTaskSwitchContext>
	prvTaskExitError();
 800cdb0:	f7ff ff20 	bl	800cbf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3718      	adds	r7, #24
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	e000ed00 	.word	0xe000ed00
 800cdc4:	410fc271 	.word	0x410fc271
 800cdc8:	410fc270 	.word	0x410fc270
 800cdcc:	e000e400 	.word	0xe000e400
 800cdd0:	200012bc 	.word	0x200012bc
 800cdd4:	200012c0 	.word	0x200012c0
 800cdd8:	e000ed20 	.word	0xe000ed20
 800cddc:	20000028 	.word	0x20000028
 800cde0:	e000ef34 	.word	0xe000ef34

0800cde4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	607b      	str	r3, [r7, #4]
}
 800cdfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdfe:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <vPortEnterCritical+0x58>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3301      	adds	r3, #1
 800ce04:	4a0d      	ldr	r2, [pc, #52]	; (800ce3c <vPortEnterCritical+0x58>)
 800ce06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce08:	4b0c      	ldr	r3, [pc, #48]	; (800ce3c <vPortEnterCritical+0x58>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d10f      	bne.n	800ce30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce10:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <vPortEnterCritical+0x5c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1e:	f383 8811 	msr	BASEPRI, r3
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	603b      	str	r3, [r7, #0]
}
 800ce2c:	bf00      	nop
 800ce2e:	e7fe      	b.n	800ce2e <vPortEnterCritical+0x4a>
	}
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	20000028 	.word	0x20000028
 800ce40:	e000ed04 	.word	0xe000ed04

0800ce44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce4a:	4b12      	ldr	r3, [pc, #72]	; (800ce94 <vPortExitCritical+0x50>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10a      	bne.n	800ce68 <vPortExitCritical+0x24>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	607b      	str	r3, [r7, #4]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce68:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <vPortExitCritical+0x50>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <vPortExitCritical+0x50>)
 800ce70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce72:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <vPortExitCritical+0x50>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d105      	bne.n	800ce86 <vPortExitCritical+0x42>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f383 8811 	msr	BASEPRI, r3
}
 800ce84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce86:	bf00      	nop
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000028 	.word	0x20000028
	...

0800cea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cea0:	f3ef 8009 	mrs	r0, PSP
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4b15      	ldr	r3, [pc, #84]	; (800cf00 <pxCurrentTCBConst>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	f01e 0f10 	tst.w	lr, #16
 800ceb0:	bf08      	it	eq
 800ceb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ceb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	6010      	str	r0, [r2, #0]
 800cebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cec4:	f380 8811 	msr	BASEPRI, r0
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f7fe ffa8 	bl	800be24 <vTaskSwitchContext>
 800ced4:	f04f 0000 	mov.w	r0, #0
 800ced8:	f380 8811 	msr	BASEPRI, r0
 800cedc:	bc09      	pop	{r0, r3}
 800cede:	6819      	ldr	r1, [r3, #0]
 800cee0:	6808      	ldr	r0, [r1, #0]
 800cee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee6:	f01e 0f10 	tst.w	lr, #16
 800ceea:	bf08      	it	eq
 800ceec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cef0:	f380 8809 	msr	PSP, r0
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	f3af 8000 	nop.w

0800cf00 <pxCurrentTCBConst>:
 800cf00:	20000c90 	.word	0x20000c90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop

0800cf08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	607b      	str	r3, [r7, #4]
}
 800cf20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf22:	f7fe fec5 	bl	800bcb0 <xTaskIncrementTick>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf2c:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <xPortSysTickHandler+0x40>)
 800cf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	2300      	movs	r3, #0
 800cf36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f383 8811 	msr	BASEPRI, r3
}
 800cf3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf50:	4b0b      	ldr	r3, [pc, #44]	; (800cf80 <vPortSetupTimerInterrupt+0x34>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf56:	4b0b      	ldr	r3, [pc, #44]	; (800cf84 <vPortSetupTimerInterrupt+0x38>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf5c:	4b0a      	ldr	r3, [pc, #40]	; (800cf88 <vPortSetupTimerInterrupt+0x3c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a0a      	ldr	r2, [pc, #40]	; (800cf8c <vPortSetupTimerInterrupt+0x40>)
 800cf62:	fba2 2303 	umull	r2, r3, r2, r3
 800cf66:	099b      	lsrs	r3, r3, #6
 800cf68:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <vPortSetupTimerInterrupt+0x44>)
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf6e:	4b04      	ldr	r3, [pc, #16]	; (800cf80 <vPortSetupTimerInterrupt+0x34>)
 800cf70:	2207      	movs	r2, #7
 800cf72:	601a      	str	r2, [r3, #0]
}
 800cf74:	bf00      	nop
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	e000e010 	.word	0xe000e010
 800cf84:	e000e018 	.word	0xe000e018
 800cf88:	20000000 	.word	0x20000000
 800cf8c:	10624dd3 	.word	0x10624dd3
 800cf90:	e000e014 	.word	0xe000e014

0800cf94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfa4 <vPortEnableVFP+0x10>
 800cf98:	6801      	ldr	r1, [r0, #0]
 800cf9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf9e:	6001      	str	r1, [r0, #0]
 800cfa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfa2:	bf00      	nop
 800cfa4:	e000ed88 	.word	0xe000ed88

0800cfa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfae:	f3ef 8305 	mrs	r3, IPSR
 800cfb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b0f      	cmp	r3, #15
 800cfb8:	d914      	bls.n	800cfe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfba:	4a17      	ldr	r2, [pc, #92]	; (800d018 <vPortValidateInterruptPriority+0x70>)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfc4:	4b15      	ldr	r3, [pc, #84]	; (800d01c <vPortValidateInterruptPriority+0x74>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	7afa      	ldrb	r2, [r7, #11]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d20a      	bcs.n	800cfe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfe4:	4b0e      	ldr	r3, [pc, #56]	; (800d020 <vPortValidateInterruptPriority+0x78>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <vPortValidateInterruptPriority+0x7c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d90a      	bls.n	800d00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	603b      	str	r3, [r7, #0]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <vPortValidateInterruptPriority+0x60>
	}
 800d00a:	bf00      	nop
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	e000e3f0 	.word	0xe000e3f0
 800d01c:	200012bc 	.word	0x200012bc
 800d020:	e000ed0c 	.word	0xe000ed0c
 800d024:	200012c0 	.word	0x200012c0

0800d028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08a      	sub	sp, #40	; 0x28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d030:	2300      	movs	r3, #0
 800d032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d034:	f7fe fd80 	bl	800bb38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d038:	4b5b      	ldr	r3, [pc, #364]	; (800d1a8 <pvPortMalloc+0x180>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d040:	f000 f920 	bl	800d284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d044:	4b59      	ldr	r3, [pc, #356]	; (800d1ac <pvPortMalloc+0x184>)
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4013      	ands	r3, r2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f040 8093 	bne.w	800d178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01d      	beq.n	800d094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d058:	2208      	movs	r2, #8
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d014      	beq.n	800d094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f023 0307 	bic.w	r3, r3, #7
 800d070:	3308      	adds	r3, #8
 800d072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f003 0307 	and.w	r3, r3, #7
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <pvPortMalloc+0x6c>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	617b      	str	r3, [r7, #20]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d06e      	beq.n	800d178 <pvPortMalloc+0x150>
 800d09a:	4b45      	ldr	r3, [pc, #276]	; (800d1b0 <pvPortMalloc+0x188>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d869      	bhi.n	800d178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0a4:	4b43      	ldr	r3, [pc, #268]	; (800d1b4 <pvPortMalloc+0x18c>)
 800d0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0a8:	4b42      	ldr	r3, [pc, #264]	; (800d1b4 <pvPortMalloc+0x18c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0ae:	e004      	b.n	800d0ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d903      	bls.n	800d0cc <pvPortMalloc+0xa4>
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1f1      	bne.n	800d0b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0cc:	4b36      	ldr	r3, [pc, #216]	; (800d1a8 <pvPortMalloc+0x180>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d050      	beq.n	800d178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2208      	movs	r2, #8
 800d0dc:	4413      	add	r3, r2
 800d0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	1ad2      	subs	r2, r2, r3
 800d0f0:	2308      	movs	r3, #8
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d91f      	bls.n	800d138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00a      	beq.n	800d120 <pvPortMalloc+0xf8>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	613b      	str	r3, [r7, #16]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	1ad2      	subs	r2, r2, r3
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d132:	69b8      	ldr	r0, [r7, #24]
 800d134:	f000 f908 	bl	800d348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d138:	4b1d      	ldr	r3, [pc, #116]	; (800d1b0 <pvPortMalloc+0x188>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	4a1b      	ldr	r2, [pc, #108]	; (800d1b0 <pvPortMalloc+0x188>)
 800d144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d146:	4b1a      	ldr	r3, [pc, #104]	; (800d1b0 <pvPortMalloc+0x188>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	4b1b      	ldr	r3, [pc, #108]	; (800d1b8 <pvPortMalloc+0x190>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d203      	bcs.n	800d15a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d152:	4b17      	ldr	r3, [pc, #92]	; (800d1b0 <pvPortMalloc+0x188>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a18      	ldr	r2, [pc, #96]	; (800d1b8 <pvPortMalloc+0x190>)
 800d158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <pvPortMalloc+0x184>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	431a      	orrs	r2, r3
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	2200      	movs	r2, #0
 800d16c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <pvPortMalloc+0x194>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	3301      	adds	r3, #1
 800d174:	4a11      	ldr	r2, [pc, #68]	; (800d1bc <pvPortMalloc+0x194>)
 800d176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d178:	f7fe fcec 	bl	800bb54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <pvPortMalloc+0x174>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	60fb      	str	r3, [r7, #12]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <pvPortMalloc+0x172>
	return pvReturn;
 800d19c:	69fb      	ldr	r3, [r7, #28]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3728      	adds	r7, #40	; 0x28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20004ecc 	.word	0x20004ecc
 800d1ac:	20004ee0 	.word	0x20004ee0
 800d1b0:	20004ed0 	.word	0x20004ed0
 800d1b4:	20004ec4 	.word	0x20004ec4
 800d1b8:	20004ed4 	.word	0x20004ed4
 800d1bc:	20004ed8 	.word	0x20004ed8

0800d1c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d04d      	beq.n	800d26e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1d2:	2308      	movs	r3, #8
 800d1d4:	425b      	negs	r3, r3
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	4413      	add	r3, r2
 800d1da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	4b24      	ldr	r3, [pc, #144]	; (800d278 <vPortFree+0xb8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <vPortFree+0x44>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	60fb      	str	r3, [r7, #12]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00a      	beq.n	800d222 <vPortFree+0x62>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	60bb      	str	r3, [r7, #8]
}
 800d21e:	bf00      	nop
 800d220:	e7fe      	b.n	800d220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	4b14      	ldr	r3, [pc, #80]	; (800d278 <vPortFree+0xb8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4013      	ands	r3, r2
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d01e      	beq.n	800d26e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d11a      	bne.n	800d26e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	4b0e      	ldr	r3, [pc, #56]	; (800d278 <vPortFree+0xb8>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	43db      	mvns	r3, r3
 800d242:	401a      	ands	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d248:	f7fe fc76 	bl	800bb38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	4b0a      	ldr	r3, [pc, #40]	; (800d27c <vPortFree+0xbc>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4413      	add	r3, r2
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <vPortFree+0xbc>)
 800d258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d25a:	6938      	ldr	r0, [r7, #16]
 800d25c:	f000 f874 	bl	800d348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <vPortFree+0xc0>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	4a06      	ldr	r2, [pc, #24]	; (800d280 <vPortFree+0xc0>)
 800d268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d26a:	f7fe fc73 	bl	800bb54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d26e:	bf00      	nop
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20004ee0 	.word	0x20004ee0
 800d27c:	20004ed0 	.word	0x20004ed0
 800d280:	20004edc 	.word	0x20004edc

0800d284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d28a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d290:	4b27      	ldr	r3, [pc, #156]	; (800d330 <prvHeapInit+0xac>)
 800d292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00c      	beq.n	800d2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3307      	adds	r3, #7
 800d2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f023 0307 	bic.w	r3, r3, #7
 800d2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	4a1f      	ldr	r2, [pc, #124]	; (800d330 <prvHeapInit+0xac>)
 800d2b4:	4413      	add	r3, r2
 800d2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2bc:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <prvHeapInit+0xb0>)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <prvHeapInit+0xb0>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2d0:	2208      	movs	r2, #8
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	1a9b      	subs	r3, r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4a15      	ldr	r2, [pc, #84]	; (800d338 <prvHeapInit+0xb4>)
 800d2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2e6:	4b14      	ldr	r3, [pc, #80]	; (800d338 <prvHeapInit+0xb4>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2ee:	4b12      	ldr	r3, [pc, #72]	; (800d338 <prvHeapInit+0xb4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d304:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <prvHeapInit+0xb4>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <prvHeapInit+0xb8>)
 800d312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	4a09      	ldr	r2, [pc, #36]	; (800d340 <prvHeapInit+0xbc>)
 800d31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d31c:	4b09      	ldr	r3, [pc, #36]	; (800d344 <prvHeapInit+0xc0>)
 800d31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	200012c4 	.word	0x200012c4
 800d334:	20004ec4 	.word	0x20004ec4
 800d338:	20004ecc 	.word	0x20004ecc
 800d33c:	20004ed4 	.word	0x20004ed4
 800d340:	20004ed0 	.word	0x20004ed0
 800d344:	20004ee0 	.word	0x20004ee0

0800d348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d350:	4b28      	ldr	r3, [pc, #160]	; (800d3f4 <prvInsertBlockIntoFreeList+0xac>)
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	e002      	b.n	800d35c <prvInsertBlockIntoFreeList+0x14>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	429a      	cmp	r2, r3
 800d364:	d8f7      	bhi.n	800d356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	4413      	add	r3, r2
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d108      	bne.n	800d38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	441a      	add	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	441a      	add	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d118      	bne.n	800d3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d00d      	beq.n	800d3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	e008      	b.n	800d3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	e003      	b.n	800d3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d002      	beq.n	800d3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3e6:	bf00      	nop
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	20004ec4 	.word	0x20004ec4
 800d3f8:	20004ecc 	.word	0x20004ecc

0800d3fc <__cxa_pure_virtual>:
 800d3fc:	b508      	push	{r3, lr}
 800d3fe:	f000 f80d 	bl	800d41c <_ZSt9terminatev>

0800d402 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d402:	b508      	push	{r3, lr}
 800d404:	4780      	blx	r0
 800d406:	f000 f80e 	bl	800d426 <abort>
	...

0800d40c <_ZSt13get_terminatev>:
 800d40c:	4b02      	ldr	r3, [pc, #8]	; (800d418 <_ZSt13get_terminatev+0xc>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	f3bf 8f5b 	dmb	ish
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	2000002c 	.word	0x2000002c

0800d41c <_ZSt9terminatev>:
 800d41c:	b508      	push	{r3, lr}
 800d41e:	f7ff fff5 	bl	800d40c <_ZSt13get_terminatev>
 800d422:	f7ff ffee 	bl	800d402 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d426 <abort>:
 800d426:	b508      	push	{r3, lr}
 800d428:	2006      	movs	r0, #6
 800d42a:	f001 f933 	bl	800e694 <raise>
 800d42e:	2001      	movs	r0, #1
 800d430:	f7f5 fd58 	bl	8002ee4 <_exit>

0800d434 <__errno>:
 800d434:	4b01      	ldr	r3, [pc, #4]	; (800d43c <__errno+0x8>)
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	20000030 	.word	0x20000030

0800d440 <std>:
 800d440:	2300      	movs	r3, #0
 800d442:	b510      	push	{r4, lr}
 800d444:	4604      	mov	r4, r0
 800d446:	e9c0 3300 	strd	r3, r3, [r0]
 800d44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d44e:	6083      	str	r3, [r0, #8]
 800d450:	8181      	strh	r1, [r0, #12]
 800d452:	6643      	str	r3, [r0, #100]	; 0x64
 800d454:	81c2      	strh	r2, [r0, #14]
 800d456:	6183      	str	r3, [r0, #24]
 800d458:	4619      	mov	r1, r3
 800d45a:	2208      	movs	r2, #8
 800d45c:	305c      	adds	r0, #92	; 0x5c
 800d45e:	f000 f945 	bl	800d6ec <memset>
 800d462:	4b05      	ldr	r3, [pc, #20]	; (800d478 <std+0x38>)
 800d464:	6263      	str	r3, [r4, #36]	; 0x24
 800d466:	4b05      	ldr	r3, [pc, #20]	; (800d47c <std+0x3c>)
 800d468:	62a3      	str	r3, [r4, #40]	; 0x28
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <std+0x40>)
 800d46c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <std+0x44>)
 800d470:	6224      	str	r4, [r4, #32]
 800d472:	6323      	str	r3, [r4, #48]	; 0x30
 800d474:	bd10      	pop	{r4, pc}
 800d476:	bf00      	nop
 800d478:	0800e765 	.word	0x0800e765
 800d47c:	0800e78b 	.word	0x0800e78b
 800d480:	0800e7c3 	.word	0x0800e7c3
 800d484:	0800e7e7 	.word	0x0800e7e7

0800d488 <_cleanup_r>:
 800d488:	4901      	ldr	r1, [pc, #4]	; (800d490 <_cleanup_r+0x8>)
 800d48a:	f000 b8af 	b.w	800d5ec <_fwalk_reent>
 800d48e:	bf00      	nop
 800d490:	080104f5 	.word	0x080104f5

0800d494 <__sfmoreglue>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	1e4a      	subs	r2, r1, #1
 800d498:	2568      	movs	r5, #104	; 0x68
 800d49a:	4355      	muls	r5, r2
 800d49c:	460e      	mov	r6, r1
 800d49e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4a2:	f000 f97b 	bl	800d79c <_malloc_r>
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	b140      	cbz	r0, 800d4bc <__sfmoreglue+0x28>
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	e9c0 1600 	strd	r1, r6, [r0]
 800d4b0:	300c      	adds	r0, #12
 800d4b2:	60a0      	str	r0, [r4, #8]
 800d4b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4b8:	f000 f918 	bl	800d6ec <memset>
 800d4bc:	4620      	mov	r0, r4
 800d4be:	bd70      	pop	{r4, r5, r6, pc}

0800d4c0 <__sfp_lock_acquire>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	; (800d4c8 <__sfp_lock_acquire+0x8>)
 800d4c2:	f000 b8d8 	b.w	800d676 <__retarget_lock_acquire_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	20005718 	.word	0x20005718

0800d4cc <__sfp_lock_release>:
 800d4cc:	4801      	ldr	r0, [pc, #4]	; (800d4d4 <__sfp_lock_release+0x8>)
 800d4ce:	f000 b8d3 	b.w	800d678 <__retarget_lock_release_recursive>
 800d4d2:	bf00      	nop
 800d4d4:	20005718 	.word	0x20005718

0800d4d8 <__sinit_lock_acquire>:
 800d4d8:	4801      	ldr	r0, [pc, #4]	; (800d4e0 <__sinit_lock_acquire+0x8>)
 800d4da:	f000 b8cc 	b.w	800d676 <__retarget_lock_acquire_recursive>
 800d4de:	bf00      	nop
 800d4e0:	20005713 	.word	0x20005713

0800d4e4 <__sinit_lock_release>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	; (800d4ec <__sinit_lock_release+0x8>)
 800d4e6:	f000 b8c7 	b.w	800d678 <__retarget_lock_release_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	20005713 	.word	0x20005713

0800d4f0 <__sinit>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	f7ff fff0 	bl	800d4d8 <__sinit_lock_acquire>
 800d4f8:	69a3      	ldr	r3, [r4, #24]
 800d4fa:	b11b      	cbz	r3, 800d504 <__sinit+0x14>
 800d4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d500:	f7ff bff0 	b.w	800d4e4 <__sinit_lock_release>
 800d504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d508:	6523      	str	r3, [r4, #80]	; 0x50
 800d50a:	4b13      	ldr	r3, [pc, #76]	; (800d558 <__sinit+0x68>)
 800d50c:	4a13      	ldr	r2, [pc, #76]	; (800d55c <__sinit+0x6c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	62a2      	str	r2, [r4, #40]	; 0x28
 800d512:	42a3      	cmp	r3, r4
 800d514:	bf04      	itt	eq
 800d516:	2301      	moveq	r3, #1
 800d518:	61a3      	streq	r3, [r4, #24]
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 f820 	bl	800d560 <__sfp>
 800d520:	6060      	str	r0, [r4, #4]
 800d522:	4620      	mov	r0, r4
 800d524:	f000 f81c 	bl	800d560 <__sfp>
 800d528:	60a0      	str	r0, [r4, #8]
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 f818 	bl	800d560 <__sfp>
 800d530:	2200      	movs	r2, #0
 800d532:	60e0      	str	r0, [r4, #12]
 800d534:	2104      	movs	r1, #4
 800d536:	6860      	ldr	r0, [r4, #4]
 800d538:	f7ff ff82 	bl	800d440 <std>
 800d53c:	68a0      	ldr	r0, [r4, #8]
 800d53e:	2201      	movs	r2, #1
 800d540:	2109      	movs	r1, #9
 800d542:	f7ff ff7d 	bl	800d440 <std>
 800d546:	68e0      	ldr	r0, [r4, #12]
 800d548:	2202      	movs	r2, #2
 800d54a:	2112      	movs	r1, #18
 800d54c:	f7ff ff78 	bl	800d440 <std>
 800d550:	2301      	movs	r3, #1
 800d552:	61a3      	str	r3, [r4, #24]
 800d554:	e7d2      	b.n	800d4fc <__sinit+0xc>
 800d556:	bf00      	nop
 800d558:	08012c24 	.word	0x08012c24
 800d55c:	0800d489 	.word	0x0800d489

0800d560 <__sfp>:
 800d560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d562:	4607      	mov	r7, r0
 800d564:	f7ff ffac 	bl	800d4c0 <__sfp_lock_acquire>
 800d568:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <__sfp+0x84>)
 800d56a:	681e      	ldr	r6, [r3, #0]
 800d56c:	69b3      	ldr	r3, [r6, #24]
 800d56e:	b913      	cbnz	r3, 800d576 <__sfp+0x16>
 800d570:	4630      	mov	r0, r6
 800d572:	f7ff ffbd 	bl	800d4f0 <__sinit>
 800d576:	3648      	adds	r6, #72	; 0x48
 800d578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	d503      	bpl.n	800d588 <__sfp+0x28>
 800d580:	6833      	ldr	r3, [r6, #0]
 800d582:	b30b      	cbz	r3, 800d5c8 <__sfp+0x68>
 800d584:	6836      	ldr	r6, [r6, #0]
 800d586:	e7f7      	b.n	800d578 <__sfp+0x18>
 800d588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d58c:	b9d5      	cbnz	r5, 800d5c4 <__sfp+0x64>
 800d58e:	4b16      	ldr	r3, [pc, #88]	; (800d5e8 <__sfp+0x88>)
 800d590:	60e3      	str	r3, [r4, #12]
 800d592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d596:	6665      	str	r5, [r4, #100]	; 0x64
 800d598:	f000 f86c 	bl	800d674 <__retarget_lock_init_recursive>
 800d59c:	f7ff ff96 	bl	800d4cc <__sfp_lock_release>
 800d5a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5a8:	6025      	str	r5, [r4, #0]
 800d5aa:	61a5      	str	r5, [r4, #24]
 800d5ac:	2208      	movs	r2, #8
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5b4:	f000 f89a 	bl	800d6ec <memset>
 800d5b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c4:	3468      	adds	r4, #104	; 0x68
 800d5c6:	e7d9      	b.n	800d57c <__sfp+0x1c>
 800d5c8:	2104      	movs	r1, #4
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	f7ff ff62 	bl	800d494 <__sfmoreglue>
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	6030      	str	r0, [r6, #0]
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d1d5      	bne.n	800d584 <__sfp+0x24>
 800d5d8:	f7ff ff78 	bl	800d4cc <__sfp_lock_release>
 800d5dc:	230c      	movs	r3, #12
 800d5de:	603b      	str	r3, [r7, #0]
 800d5e0:	e7ee      	b.n	800d5c0 <__sfp+0x60>
 800d5e2:	bf00      	nop
 800d5e4:	08012c24 	.word	0x08012c24
 800d5e8:	ffff0001 	.word	0xffff0001

0800d5ec <_fwalk_reent>:
 800d5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	4688      	mov	r8, r1
 800d5f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5f8:	2700      	movs	r7, #0
 800d5fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5fe:	f1b9 0901 	subs.w	r9, r9, #1
 800d602:	d505      	bpl.n	800d610 <_fwalk_reent+0x24>
 800d604:	6824      	ldr	r4, [r4, #0]
 800d606:	2c00      	cmp	r4, #0
 800d608:	d1f7      	bne.n	800d5fa <_fwalk_reent+0xe>
 800d60a:	4638      	mov	r0, r7
 800d60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d610:	89ab      	ldrh	r3, [r5, #12]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d907      	bls.n	800d626 <_fwalk_reent+0x3a>
 800d616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d61a:	3301      	adds	r3, #1
 800d61c:	d003      	beq.n	800d626 <_fwalk_reent+0x3a>
 800d61e:	4629      	mov	r1, r5
 800d620:	4630      	mov	r0, r6
 800d622:	47c0      	blx	r8
 800d624:	4307      	orrs	r7, r0
 800d626:	3568      	adds	r5, #104	; 0x68
 800d628:	e7e9      	b.n	800d5fe <_fwalk_reent+0x12>
	...

0800d62c <__libc_init_array>:
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	4d0d      	ldr	r5, [pc, #52]	; (800d664 <__libc_init_array+0x38>)
 800d630:	4c0d      	ldr	r4, [pc, #52]	; (800d668 <__libc_init_array+0x3c>)
 800d632:	1b64      	subs	r4, r4, r5
 800d634:	10a4      	asrs	r4, r4, #2
 800d636:	2600      	movs	r6, #0
 800d638:	42a6      	cmp	r6, r4
 800d63a:	d109      	bne.n	800d650 <__libc_init_array+0x24>
 800d63c:	4d0b      	ldr	r5, [pc, #44]	; (800d66c <__libc_init_array+0x40>)
 800d63e:	4c0c      	ldr	r4, [pc, #48]	; (800d670 <__libc_init_array+0x44>)
 800d640:	f004 fffa 	bl	8012638 <_init>
 800d644:	1b64      	subs	r4, r4, r5
 800d646:	10a4      	asrs	r4, r4, #2
 800d648:	2600      	movs	r6, #0
 800d64a:	42a6      	cmp	r6, r4
 800d64c:	d105      	bne.n	800d65a <__libc_init_array+0x2e>
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	f855 3b04 	ldr.w	r3, [r5], #4
 800d654:	4798      	blx	r3
 800d656:	3601      	adds	r6, #1
 800d658:	e7ee      	b.n	800d638 <__libc_init_array+0xc>
 800d65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d65e:	4798      	blx	r3
 800d660:	3601      	adds	r6, #1
 800d662:	e7f2      	b.n	800d64a <__libc_init_array+0x1e>
 800d664:	08013090 	.word	0x08013090
 800d668:	08013090 	.word	0x08013090
 800d66c:	08013090 	.word	0x08013090
 800d670:	08013098 	.word	0x08013098

0800d674 <__retarget_lock_init_recursive>:
 800d674:	4770      	bx	lr

0800d676 <__retarget_lock_acquire_recursive>:
 800d676:	4770      	bx	lr

0800d678 <__retarget_lock_release_recursive>:
 800d678:	4770      	bx	lr
	...

0800d67c <malloc>:
 800d67c:	4b02      	ldr	r3, [pc, #8]	; (800d688 <malloc+0xc>)
 800d67e:	4601      	mov	r1, r0
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	f000 b88b 	b.w	800d79c <_malloc_r>
 800d686:	bf00      	nop
 800d688:	20000030 	.word	0x20000030

0800d68c <free>:
 800d68c:	4b02      	ldr	r3, [pc, #8]	; (800d698 <free+0xc>)
 800d68e:	4601      	mov	r1, r0
 800d690:	6818      	ldr	r0, [r3, #0]
 800d692:	f000 b833 	b.w	800d6fc <_free_r>
 800d696:	bf00      	nop
 800d698:	20000030 	.word	0x20000030

0800d69c <memcpy>:
 800d69c:	440a      	add	r2, r1
 800d69e:	4291      	cmp	r1, r2
 800d6a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6a4:	d100      	bne.n	800d6a8 <memcpy+0xc>
 800d6a6:	4770      	bx	lr
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6b2:	4291      	cmp	r1, r2
 800d6b4:	d1f9      	bne.n	800d6aa <memcpy+0xe>
 800d6b6:	bd10      	pop	{r4, pc}

0800d6b8 <memmove>:
 800d6b8:	4288      	cmp	r0, r1
 800d6ba:	b510      	push	{r4, lr}
 800d6bc:	eb01 0402 	add.w	r4, r1, r2
 800d6c0:	d902      	bls.n	800d6c8 <memmove+0x10>
 800d6c2:	4284      	cmp	r4, r0
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	d807      	bhi.n	800d6d8 <memmove+0x20>
 800d6c8:	1e43      	subs	r3, r0, #1
 800d6ca:	42a1      	cmp	r1, r4
 800d6cc:	d008      	beq.n	800d6e0 <memmove+0x28>
 800d6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6d6:	e7f8      	b.n	800d6ca <memmove+0x12>
 800d6d8:	4402      	add	r2, r0
 800d6da:	4601      	mov	r1, r0
 800d6dc:	428a      	cmp	r2, r1
 800d6de:	d100      	bne.n	800d6e2 <memmove+0x2a>
 800d6e0:	bd10      	pop	{r4, pc}
 800d6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6ea:	e7f7      	b.n	800d6dc <memmove+0x24>

0800d6ec <memset>:
 800d6ec:	4402      	add	r2, r0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d100      	bne.n	800d6f6 <memset+0xa>
 800d6f4:	4770      	bx	lr
 800d6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6fa:	e7f9      	b.n	800d6f0 <memset+0x4>

0800d6fc <_free_r>:
 800d6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6fe:	2900      	cmp	r1, #0
 800d700:	d048      	beq.n	800d794 <_free_r+0x98>
 800d702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d706:	9001      	str	r0, [sp, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f1a1 0404 	sub.w	r4, r1, #4
 800d70e:	bfb8      	it	lt
 800d710:	18e4      	addlt	r4, r4, r3
 800d712:	f003 fad5 	bl	8010cc0 <__malloc_lock>
 800d716:	4a20      	ldr	r2, [pc, #128]	; (800d798 <_free_r+0x9c>)
 800d718:	9801      	ldr	r0, [sp, #4]
 800d71a:	6813      	ldr	r3, [r2, #0]
 800d71c:	4615      	mov	r5, r2
 800d71e:	b933      	cbnz	r3, 800d72e <_free_r+0x32>
 800d720:	6063      	str	r3, [r4, #4]
 800d722:	6014      	str	r4, [r2, #0]
 800d724:	b003      	add	sp, #12
 800d726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d72a:	f003 bacf 	b.w	8010ccc <__malloc_unlock>
 800d72e:	42a3      	cmp	r3, r4
 800d730:	d90b      	bls.n	800d74a <_free_r+0x4e>
 800d732:	6821      	ldr	r1, [r4, #0]
 800d734:	1862      	adds	r2, r4, r1
 800d736:	4293      	cmp	r3, r2
 800d738:	bf04      	itt	eq
 800d73a:	681a      	ldreq	r2, [r3, #0]
 800d73c:	685b      	ldreq	r3, [r3, #4]
 800d73e:	6063      	str	r3, [r4, #4]
 800d740:	bf04      	itt	eq
 800d742:	1852      	addeq	r2, r2, r1
 800d744:	6022      	streq	r2, [r4, #0]
 800d746:	602c      	str	r4, [r5, #0]
 800d748:	e7ec      	b.n	800d724 <_free_r+0x28>
 800d74a:	461a      	mov	r2, r3
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	b10b      	cbz	r3, 800d754 <_free_r+0x58>
 800d750:	42a3      	cmp	r3, r4
 800d752:	d9fa      	bls.n	800d74a <_free_r+0x4e>
 800d754:	6811      	ldr	r1, [r2, #0]
 800d756:	1855      	adds	r5, r2, r1
 800d758:	42a5      	cmp	r5, r4
 800d75a:	d10b      	bne.n	800d774 <_free_r+0x78>
 800d75c:	6824      	ldr	r4, [r4, #0]
 800d75e:	4421      	add	r1, r4
 800d760:	1854      	adds	r4, r2, r1
 800d762:	42a3      	cmp	r3, r4
 800d764:	6011      	str	r1, [r2, #0]
 800d766:	d1dd      	bne.n	800d724 <_free_r+0x28>
 800d768:	681c      	ldr	r4, [r3, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	6053      	str	r3, [r2, #4]
 800d76e:	4421      	add	r1, r4
 800d770:	6011      	str	r1, [r2, #0]
 800d772:	e7d7      	b.n	800d724 <_free_r+0x28>
 800d774:	d902      	bls.n	800d77c <_free_r+0x80>
 800d776:	230c      	movs	r3, #12
 800d778:	6003      	str	r3, [r0, #0]
 800d77a:	e7d3      	b.n	800d724 <_free_r+0x28>
 800d77c:	6825      	ldr	r5, [r4, #0]
 800d77e:	1961      	adds	r1, r4, r5
 800d780:	428b      	cmp	r3, r1
 800d782:	bf04      	itt	eq
 800d784:	6819      	ldreq	r1, [r3, #0]
 800d786:	685b      	ldreq	r3, [r3, #4]
 800d788:	6063      	str	r3, [r4, #4]
 800d78a:	bf04      	itt	eq
 800d78c:	1949      	addeq	r1, r1, r5
 800d78e:	6021      	streq	r1, [r4, #0]
 800d790:	6054      	str	r4, [r2, #4]
 800d792:	e7c7      	b.n	800d724 <_free_r+0x28>
 800d794:	b003      	add	sp, #12
 800d796:	bd30      	pop	{r4, r5, pc}
 800d798:	20004ee4 	.word	0x20004ee4

0800d79c <_malloc_r>:
 800d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79e:	1ccd      	adds	r5, r1, #3
 800d7a0:	f025 0503 	bic.w	r5, r5, #3
 800d7a4:	3508      	adds	r5, #8
 800d7a6:	2d0c      	cmp	r5, #12
 800d7a8:	bf38      	it	cc
 800d7aa:	250c      	movcc	r5, #12
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	db01      	blt.n	800d7b6 <_malloc_r+0x1a>
 800d7b2:	42a9      	cmp	r1, r5
 800d7b4:	d903      	bls.n	800d7be <_malloc_r+0x22>
 800d7b6:	230c      	movs	r3, #12
 800d7b8:	6033      	str	r3, [r6, #0]
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7be:	f003 fa7f 	bl	8010cc0 <__malloc_lock>
 800d7c2:	4921      	ldr	r1, [pc, #132]	; (800d848 <_malloc_r+0xac>)
 800d7c4:	680a      	ldr	r2, [r1, #0]
 800d7c6:	4614      	mov	r4, r2
 800d7c8:	b99c      	cbnz	r4, 800d7f2 <_malloc_r+0x56>
 800d7ca:	4f20      	ldr	r7, [pc, #128]	; (800d84c <_malloc_r+0xb0>)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	b923      	cbnz	r3, 800d7da <_malloc_r+0x3e>
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f000 ff20 	bl	800e618 <_sbrk_r>
 800d7d8:	6038      	str	r0, [r7, #0]
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f000 ff1b 	bl	800e618 <_sbrk_r>
 800d7e2:	1c43      	adds	r3, r0, #1
 800d7e4:	d123      	bne.n	800d82e <_malloc_r+0x92>
 800d7e6:	230c      	movs	r3, #12
 800d7e8:	6033      	str	r3, [r6, #0]
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f003 fa6e 	bl	8010ccc <__malloc_unlock>
 800d7f0:	e7e3      	b.n	800d7ba <_malloc_r+0x1e>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	1b5b      	subs	r3, r3, r5
 800d7f6:	d417      	bmi.n	800d828 <_malloc_r+0x8c>
 800d7f8:	2b0b      	cmp	r3, #11
 800d7fa:	d903      	bls.n	800d804 <_malloc_r+0x68>
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	441c      	add	r4, r3
 800d800:	6025      	str	r5, [r4, #0]
 800d802:	e004      	b.n	800d80e <_malloc_r+0x72>
 800d804:	6863      	ldr	r3, [r4, #4]
 800d806:	42a2      	cmp	r2, r4
 800d808:	bf0c      	ite	eq
 800d80a:	600b      	streq	r3, [r1, #0]
 800d80c:	6053      	strne	r3, [r2, #4]
 800d80e:	4630      	mov	r0, r6
 800d810:	f003 fa5c 	bl	8010ccc <__malloc_unlock>
 800d814:	f104 000b 	add.w	r0, r4, #11
 800d818:	1d23      	adds	r3, r4, #4
 800d81a:	f020 0007 	bic.w	r0, r0, #7
 800d81e:	1ac2      	subs	r2, r0, r3
 800d820:	d0cc      	beq.n	800d7bc <_malloc_r+0x20>
 800d822:	1a1b      	subs	r3, r3, r0
 800d824:	50a3      	str	r3, [r4, r2]
 800d826:	e7c9      	b.n	800d7bc <_malloc_r+0x20>
 800d828:	4622      	mov	r2, r4
 800d82a:	6864      	ldr	r4, [r4, #4]
 800d82c:	e7cc      	b.n	800d7c8 <_malloc_r+0x2c>
 800d82e:	1cc4      	adds	r4, r0, #3
 800d830:	f024 0403 	bic.w	r4, r4, #3
 800d834:	42a0      	cmp	r0, r4
 800d836:	d0e3      	beq.n	800d800 <_malloc_r+0x64>
 800d838:	1a21      	subs	r1, r4, r0
 800d83a:	4630      	mov	r0, r6
 800d83c:	f000 feec 	bl	800e618 <_sbrk_r>
 800d840:	3001      	adds	r0, #1
 800d842:	d1dd      	bne.n	800d800 <_malloc_r+0x64>
 800d844:	e7cf      	b.n	800d7e6 <_malloc_r+0x4a>
 800d846:	bf00      	nop
 800d848:	20004ee4 	.word	0x20004ee4
 800d84c:	20004ee8 	.word	0x20004ee8

0800d850 <__cvt>:
 800d850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d854:	ec55 4b10 	vmov	r4, r5, d0
 800d858:	2d00      	cmp	r5, #0
 800d85a:	460e      	mov	r6, r1
 800d85c:	4619      	mov	r1, r3
 800d85e:	462b      	mov	r3, r5
 800d860:	bfbb      	ittet	lt
 800d862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d866:	461d      	movlt	r5, r3
 800d868:	2300      	movge	r3, #0
 800d86a:	232d      	movlt	r3, #45	; 0x2d
 800d86c:	700b      	strb	r3, [r1, #0]
 800d86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d870:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d874:	4691      	mov	r9, r2
 800d876:	f023 0820 	bic.w	r8, r3, #32
 800d87a:	bfbc      	itt	lt
 800d87c:	4622      	movlt	r2, r4
 800d87e:	4614      	movlt	r4, r2
 800d880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d884:	d005      	beq.n	800d892 <__cvt+0x42>
 800d886:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d88a:	d100      	bne.n	800d88e <__cvt+0x3e>
 800d88c:	3601      	adds	r6, #1
 800d88e:	2102      	movs	r1, #2
 800d890:	e000      	b.n	800d894 <__cvt+0x44>
 800d892:	2103      	movs	r1, #3
 800d894:	ab03      	add	r3, sp, #12
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	ab02      	add	r3, sp, #8
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	ec45 4b10 	vmov	d0, r4, r5
 800d8a0:	4653      	mov	r3, sl
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	f001 ffb4 	bl	800f810 <_dtoa_r>
 800d8a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	d102      	bne.n	800d8b6 <__cvt+0x66>
 800d8b0:	f019 0f01 	tst.w	r9, #1
 800d8b4:	d022      	beq.n	800d8fc <__cvt+0xac>
 800d8b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8ba:	eb07 0906 	add.w	r9, r7, r6
 800d8be:	d110      	bne.n	800d8e2 <__cvt+0x92>
 800d8c0:	783b      	ldrb	r3, [r7, #0]
 800d8c2:	2b30      	cmp	r3, #48	; 0x30
 800d8c4:	d10a      	bne.n	800d8dc <__cvt+0x8c>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	f7f3 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8d2:	b918      	cbnz	r0, 800d8dc <__cvt+0x8c>
 800d8d4:	f1c6 0601 	rsb	r6, r6, #1
 800d8d8:	f8ca 6000 	str.w	r6, [sl]
 800d8dc:	f8da 3000 	ldr.w	r3, [sl]
 800d8e0:	4499      	add	r9, r3
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f3 f8fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8ee:	b108      	cbz	r0, 800d8f4 <__cvt+0xa4>
 800d8f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8f4:	2230      	movs	r2, #48	; 0x30
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	454b      	cmp	r3, r9
 800d8fa:	d307      	bcc.n	800d90c <__cvt+0xbc>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d900:	1bdb      	subs	r3, r3, r7
 800d902:	4638      	mov	r0, r7
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	b004      	add	sp, #16
 800d908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90c:	1c59      	adds	r1, r3, #1
 800d90e:	9103      	str	r1, [sp, #12]
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	e7f0      	b.n	800d8f6 <__cvt+0xa6>

0800d914 <__exponent>:
 800d914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d916:	4603      	mov	r3, r0
 800d918:	2900      	cmp	r1, #0
 800d91a:	bfb8      	it	lt
 800d91c:	4249      	neglt	r1, r1
 800d91e:	f803 2b02 	strb.w	r2, [r3], #2
 800d922:	bfb4      	ite	lt
 800d924:	222d      	movlt	r2, #45	; 0x2d
 800d926:	222b      	movge	r2, #43	; 0x2b
 800d928:	2909      	cmp	r1, #9
 800d92a:	7042      	strb	r2, [r0, #1]
 800d92c:	dd2a      	ble.n	800d984 <__exponent+0x70>
 800d92e:	f10d 0407 	add.w	r4, sp, #7
 800d932:	46a4      	mov	ip, r4
 800d934:	270a      	movs	r7, #10
 800d936:	46a6      	mov	lr, r4
 800d938:	460a      	mov	r2, r1
 800d93a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d93e:	fb07 1516 	mls	r5, r7, r6, r1
 800d942:	3530      	adds	r5, #48	; 0x30
 800d944:	2a63      	cmp	r2, #99	; 0x63
 800d946:	f104 34ff 	add.w	r4, r4, #4294967295
 800d94a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d94e:	4631      	mov	r1, r6
 800d950:	dcf1      	bgt.n	800d936 <__exponent+0x22>
 800d952:	3130      	adds	r1, #48	; 0x30
 800d954:	f1ae 0502 	sub.w	r5, lr, #2
 800d958:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d95c:	1c44      	adds	r4, r0, #1
 800d95e:	4629      	mov	r1, r5
 800d960:	4561      	cmp	r1, ip
 800d962:	d30a      	bcc.n	800d97a <__exponent+0x66>
 800d964:	f10d 0209 	add.w	r2, sp, #9
 800d968:	eba2 020e 	sub.w	r2, r2, lr
 800d96c:	4565      	cmp	r5, ip
 800d96e:	bf88      	it	hi
 800d970:	2200      	movhi	r2, #0
 800d972:	4413      	add	r3, r2
 800d974:	1a18      	subs	r0, r3, r0
 800d976:	b003      	add	sp, #12
 800d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d97e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d982:	e7ed      	b.n	800d960 <__exponent+0x4c>
 800d984:	2330      	movs	r3, #48	; 0x30
 800d986:	3130      	adds	r1, #48	; 0x30
 800d988:	7083      	strb	r3, [r0, #2]
 800d98a:	70c1      	strb	r1, [r0, #3]
 800d98c:	1d03      	adds	r3, r0, #4
 800d98e:	e7f1      	b.n	800d974 <__exponent+0x60>

0800d990 <_printf_float>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	ed2d 8b02 	vpush	{d8}
 800d998:	b08d      	sub	sp, #52	; 0x34
 800d99a:	460c      	mov	r4, r1
 800d99c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	461f      	mov	r7, r3
 800d9a4:	4605      	mov	r5, r0
 800d9a6:	f003 f963 	bl	8010c70 <_localeconv_r>
 800d9aa:	f8d0 a000 	ldr.w	sl, [r0]
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	f7f2 fc1e 	bl	80001f0 <strlen>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	9305      	str	r3, [sp, #20]
 800d9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d9c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9c4:	3307      	adds	r3, #7
 800d9c6:	f023 0307 	bic.w	r3, r3, #7
 800d9ca:	f103 0208 	add.w	r2, r3, #8
 800d9ce:	f8c8 2000 	str.w	r2, [r8]
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d9da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d9de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9e2:	9307      	str	r3, [sp, #28]
 800d9e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9e8:	ee08 0a10 	vmov	s16, r0
 800d9ec:	4b9f      	ldr	r3, [pc, #636]	; (800dc6c <_printf_float+0x2dc>)
 800d9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f6:	f7f3 f8a9 	bl	8000b4c <__aeabi_dcmpun>
 800d9fa:	bb88      	cbnz	r0, 800da60 <_printf_float+0xd0>
 800d9fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da00:	4b9a      	ldr	r3, [pc, #616]	; (800dc6c <_printf_float+0x2dc>)
 800da02:	f04f 32ff 	mov.w	r2, #4294967295
 800da06:	f7f3 f883 	bl	8000b10 <__aeabi_dcmple>
 800da0a:	bb48      	cbnz	r0, 800da60 <_printf_float+0xd0>
 800da0c:	2200      	movs	r2, #0
 800da0e:	2300      	movs	r3, #0
 800da10:	4640      	mov	r0, r8
 800da12:	4649      	mov	r1, r9
 800da14:	f7f3 f872 	bl	8000afc <__aeabi_dcmplt>
 800da18:	b110      	cbz	r0, 800da20 <_printf_float+0x90>
 800da1a:	232d      	movs	r3, #45	; 0x2d
 800da1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da20:	4b93      	ldr	r3, [pc, #588]	; (800dc70 <_printf_float+0x2e0>)
 800da22:	4894      	ldr	r0, [pc, #592]	; (800dc74 <_printf_float+0x2e4>)
 800da24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da28:	bf94      	ite	ls
 800da2a:	4698      	movls	r8, r3
 800da2c:	4680      	movhi	r8, r0
 800da2e:	2303      	movs	r3, #3
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	9b05      	ldr	r3, [sp, #20]
 800da34:	f023 0204 	bic.w	r2, r3, #4
 800da38:	6022      	str	r2, [r4, #0]
 800da3a:	f04f 0900 	mov.w	r9, #0
 800da3e:	9700      	str	r7, [sp, #0]
 800da40:	4633      	mov	r3, r6
 800da42:	aa0b      	add	r2, sp, #44	; 0x2c
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f9d8 	bl	800ddfc <_printf_common>
 800da4c:	3001      	adds	r0, #1
 800da4e:	f040 8090 	bne.w	800db72 <_printf_float+0x1e2>
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	b00d      	add	sp, #52	; 0x34
 800da58:	ecbd 8b02 	vpop	{d8}
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da60:	4642      	mov	r2, r8
 800da62:	464b      	mov	r3, r9
 800da64:	4640      	mov	r0, r8
 800da66:	4649      	mov	r1, r9
 800da68:	f7f3 f870 	bl	8000b4c <__aeabi_dcmpun>
 800da6c:	b140      	cbz	r0, 800da80 <_printf_float+0xf0>
 800da6e:	464b      	mov	r3, r9
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfbc      	itt	lt
 800da74:	232d      	movlt	r3, #45	; 0x2d
 800da76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da7a:	487f      	ldr	r0, [pc, #508]	; (800dc78 <_printf_float+0x2e8>)
 800da7c:	4b7f      	ldr	r3, [pc, #508]	; (800dc7c <_printf_float+0x2ec>)
 800da7e:	e7d1      	b.n	800da24 <_printf_float+0x94>
 800da80:	6863      	ldr	r3, [r4, #4]
 800da82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da86:	9206      	str	r2, [sp, #24]
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	d13f      	bne.n	800db0c <_printf_float+0x17c>
 800da8c:	2306      	movs	r3, #6
 800da8e:	6063      	str	r3, [r4, #4]
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	6861      	ldr	r1, [r4, #4]
 800da94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da98:	2300      	movs	r3, #0
 800da9a:	9303      	str	r3, [sp, #12]
 800da9c:	ab0a      	add	r3, sp, #40	; 0x28
 800da9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800daa2:	ab09      	add	r3, sp, #36	; 0x24
 800daa4:	ec49 8b10 	vmov	d0, r8, r9
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	6022      	str	r2, [r4, #0]
 800daac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dab0:	4628      	mov	r0, r5
 800dab2:	f7ff fecd 	bl	800d850 <__cvt>
 800dab6:	9b06      	ldr	r3, [sp, #24]
 800dab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800daba:	2b47      	cmp	r3, #71	; 0x47
 800dabc:	4680      	mov	r8, r0
 800dabe:	d108      	bne.n	800dad2 <_printf_float+0x142>
 800dac0:	1cc8      	adds	r0, r1, #3
 800dac2:	db02      	blt.n	800daca <_printf_float+0x13a>
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	4299      	cmp	r1, r3
 800dac8:	dd41      	ble.n	800db4e <_printf_float+0x1be>
 800daca:	f1ab 0b02 	sub.w	fp, fp, #2
 800dace:	fa5f fb8b 	uxtb.w	fp, fp
 800dad2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dad6:	d820      	bhi.n	800db1a <_printf_float+0x18a>
 800dad8:	3901      	subs	r1, #1
 800dada:	465a      	mov	r2, fp
 800dadc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dae0:	9109      	str	r1, [sp, #36]	; 0x24
 800dae2:	f7ff ff17 	bl	800d914 <__exponent>
 800dae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dae8:	1813      	adds	r3, r2, r0
 800daea:	2a01      	cmp	r2, #1
 800daec:	4681      	mov	r9, r0
 800daee:	6123      	str	r3, [r4, #16]
 800daf0:	dc02      	bgt.n	800daf8 <_printf_float+0x168>
 800daf2:	6822      	ldr	r2, [r4, #0]
 800daf4:	07d2      	lsls	r2, r2, #31
 800daf6:	d501      	bpl.n	800dafc <_printf_float+0x16c>
 800daf8:	3301      	adds	r3, #1
 800dafa:	6123      	str	r3, [r4, #16]
 800dafc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db00:	2b00      	cmp	r3, #0
 800db02:	d09c      	beq.n	800da3e <_printf_float+0xae>
 800db04:	232d      	movs	r3, #45	; 0x2d
 800db06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0a:	e798      	b.n	800da3e <_printf_float+0xae>
 800db0c:	9a06      	ldr	r2, [sp, #24]
 800db0e:	2a47      	cmp	r2, #71	; 0x47
 800db10:	d1be      	bne.n	800da90 <_printf_float+0x100>
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1bc      	bne.n	800da90 <_printf_float+0x100>
 800db16:	2301      	movs	r3, #1
 800db18:	e7b9      	b.n	800da8e <_printf_float+0xfe>
 800db1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db1e:	d118      	bne.n	800db52 <_printf_float+0x1c2>
 800db20:	2900      	cmp	r1, #0
 800db22:	6863      	ldr	r3, [r4, #4]
 800db24:	dd0b      	ble.n	800db3e <_printf_float+0x1ae>
 800db26:	6121      	str	r1, [r4, #16]
 800db28:	b913      	cbnz	r3, 800db30 <_printf_float+0x1a0>
 800db2a:	6822      	ldr	r2, [r4, #0]
 800db2c:	07d0      	lsls	r0, r2, #31
 800db2e:	d502      	bpl.n	800db36 <_printf_float+0x1a6>
 800db30:	3301      	adds	r3, #1
 800db32:	440b      	add	r3, r1
 800db34:	6123      	str	r3, [r4, #16]
 800db36:	65a1      	str	r1, [r4, #88]	; 0x58
 800db38:	f04f 0900 	mov.w	r9, #0
 800db3c:	e7de      	b.n	800dafc <_printf_float+0x16c>
 800db3e:	b913      	cbnz	r3, 800db46 <_printf_float+0x1b6>
 800db40:	6822      	ldr	r2, [r4, #0]
 800db42:	07d2      	lsls	r2, r2, #31
 800db44:	d501      	bpl.n	800db4a <_printf_float+0x1ba>
 800db46:	3302      	adds	r3, #2
 800db48:	e7f4      	b.n	800db34 <_printf_float+0x1a4>
 800db4a:	2301      	movs	r3, #1
 800db4c:	e7f2      	b.n	800db34 <_printf_float+0x1a4>
 800db4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db54:	4299      	cmp	r1, r3
 800db56:	db05      	blt.n	800db64 <_printf_float+0x1d4>
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	6121      	str	r1, [r4, #16]
 800db5c:	07d8      	lsls	r0, r3, #31
 800db5e:	d5ea      	bpl.n	800db36 <_printf_float+0x1a6>
 800db60:	1c4b      	adds	r3, r1, #1
 800db62:	e7e7      	b.n	800db34 <_printf_float+0x1a4>
 800db64:	2900      	cmp	r1, #0
 800db66:	bfd4      	ite	le
 800db68:	f1c1 0202 	rsble	r2, r1, #2
 800db6c:	2201      	movgt	r2, #1
 800db6e:	4413      	add	r3, r2
 800db70:	e7e0      	b.n	800db34 <_printf_float+0x1a4>
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	055a      	lsls	r2, r3, #21
 800db76:	d407      	bmi.n	800db88 <_printf_float+0x1f8>
 800db78:	6923      	ldr	r3, [r4, #16]
 800db7a:	4642      	mov	r2, r8
 800db7c:	4631      	mov	r1, r6
 800db7e:	4628      	mov	r0, r5
 800db80:	47b8      	blx	r7
 800db82:	3001      	adds	r0, #1
 800db84:	d12c      	bne.n	800dbe0 <_printf_float+0x250>
 800db86:	e764      	b.n	800da52 <_printf_float+0xc2>
 800db88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db8c:	f240 80e0 	bls.w	800dd50 <_printf_float+0x3c0>
 800db90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db94:	2200      	movs	r2, #0
 800db96:	2300      	movs	r3, #0
 800db98:	f7f2 ffa6 	bl	8000ae8 <__aeabi_dcmpeq>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d034      	beq.n	800dc0a <_printf_float+0x27a>
 800dba0:	4a37      	ldr	r2, [pc, #220]	; (800dc80 <_printf_float+0x2f0>)
 800dba2:	2301      	movs	r3, #1
 800dba4:	4631      	mov	r1, r6
 800dba6:	4628      	mov	r0, r5
 800dba8:	47b8      	blx	r7
 800dbaa:	3001      	adds	r0, #1
 800dbac:	f43f af51 	beq.w	800da52 <_printf_float+0xc2>
 800dbb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	db02      	blt.n	800dbbe <_printf_float+0x22e>
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	07d8      	lsls	r0, r3, #31
 800dbbc:	d510      	bpl.n	800dbe0 <_printf_float+0x250>
 800dbbe:	ee18 3a10 	vmov	r3, s16
 800dbc2:	4652      	mov	r2, sl
 800dbc4:	4631      	mov	r1, r6
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b8      	blx	r7
 800dbca:	3001      	adds	r0, #1
 800dbcc:	f43f af41 	beq.w	800da52 <_printf_float+0xc2>
 800dbd0:	f04f 0800 	mov.w	r8, #0
 800dbd4:	f104 091a 	add.w	r9, r4, #26
 800dbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	4543      	cmp	r3, r8
 800dbde:	dc09      	bgt.n	800dbf4 <_printf_float+0x264>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	079b      	lsls	r3, r3, #30
 800dbe4:	f100 8105 	bmi.w	800ddf2 <_printf_float+0x462>
 800dbe8:	68e0      	ldr	r0, [r4, #12]
 800dbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbec:	4298      	cmp	r0, r3
 800dbee:	bfb8      	it	lt
 800dbf0:	4618      	movlt	r0, r3
 800dbf2:	e730      	b.n	800da56 <_printf_float+0xc6>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	464a      	mov	r2, r9
 800dbf8:	4631      	mov	r1, r6
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	47b8      	blx	r7
 800dbfe:	3001      	adds	r0, #1
 800dc00:	f43f af27 	beq.w	800da52 <_printf_float+0xc2>
 800dc04:	f108 0801 	add.w	r8, r8, #1
 800dc08:	e7e6      	b.n	800dbd8 <_printf_float+0x248>
 800dc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dc39      	bgt.n	800dc84 <_printf_float+0x2f4>
 800dc10:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <_printf_float+0x2f0>)
 800dc12:	2301      	movs	r3, #1
 800dc14:	4631      	mov	r1, r6
 800dc16:	4628      	mov	r0, r5
 800dc18:	47b8      	blx	r7
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	f43f af19 	beq.w	800da52 <_printf_float+0xc2>
 800dc20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc24:	4313      	orrs	r3, r2
 800dc26:	d102      	bne.n	800dc2e <_printf_float+0x29e>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	07d9      	lsls	r1, r3, #31
 800dc2c:	d5d8      	bpl.n	800dbe0 <_printf_float+0x250>
 800dc2e:	ee18 3a10 	vmov	r3, s16
 800dc32:	4652      	mov	r2, sl
 800dc34:	4631      	mov	r1, r6
 800dc36:	4628      	mov	r0, r5
 800dc38:	47b8      	blx	r7
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	f43f af09 	beq.w	800da52 <_printf_float+0xc2>
 800dc40:	f04f 0900 	mov.w	r9, #0
 800dc44:	f104 0a1a 	add.w	sl, r4, #26
 800dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4a:	425b      	negs	r3, r3
 800dc4c:	454b      	cmp	r3, r9
 800dc4e:	dc01      	bgt.n	800dc54 <_printf_float+0x2c4>
 800dc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc52:	e792      	b.n	800db7a <_printf_float+0x1ea>
 800dc54:	2301      	movs	r3, #1
 800dc56:	4652      	mov	r2, sl
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	f43f aef7 	beq.w	800da52 <_printf_float+0xc2>
 800dc64:	f109 0901 	add.w	r9, r9, #1
 800dc68:	e7ee      	b.n	800dc48 <_printf_float+0x2b8>
 800dc6a:	bf00      	nop
 800dc6c:	7fefffff 	.word	0x7fefffff
 800dc70:	08012c28 	.word	0x08012c28
 800dc74:	08012c2c 	.word	0x08012c2c
 800dc78:	08012c34 	.word	0x08012c34
 800dc7c:	08012c30 	.word	0x08012c30
 800dc80:	08013071 	.word	0x08013071
 800dc84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	bfa8      	it	ge
 800dc8c:	461a      	movge	r2, r3
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	4691      	mov	r9, r2
 800dc92:	dc37      	bgt.n	800dd04 <_printf_float+0x374>
 800dc94:	f04f 0b00 	mov.w	fp, #0
 800dc98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc9c:	f104 021a 	add.w	r2, r4, #26
 800dca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dca2:	9305      	str	r3, [sp, #20]
 800dca4:	eba3 0309 	sub.w	r3, r3, r9
 800dca8:	455b      	cmp	r3, fp
 800dcaa:	dc33      	bgt.n	800dd14 <_printf_float+0x384>
 800dcac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	db3b      	blt.n	800dd2c <_printf_float+0x39c>
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	07da      	lsls	r2, r3, #31
 800dcb8:	d438      	bmi.n	800dd2c <_printf_float+0x39c>
 800dcba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcbc:	9b05      	ldr	r3, [sp, #20]
 800dcbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	eba2 0901 	sub.w	r9, r2, r1
 800dcc6:	4599      	cmp	r9, r3
 800dcc8:	bfa8      	it	ge
 800dcca:	4699      	movge	r9, r3
 800dccc:	f1b9 0f00 	cmp.w	r9, #0
 800dcd0:	dc35      	bgt.n	800dd3e <_printf_float+0x3ae>
 800dcd2:	f04f 0800 	mov.w	r8, #0
 800dcd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcda:	f104 0a1a 	add.w	sl, r4, #26
 800dcde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dce2:	1a9b      	subs	r3, r3, r2
 800dce4:	eba3 0309 	sub.w	r3, r3, r9
 800dce8:	4543      	cmp	r3, r8
 800dcea:	f77f af79 	ble.w	800dbe0 <_printf_float+0x250>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	4652      	mov	r2, sl
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	47b8      	blx	r7
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	f43f aeaa 	beq.w	800da52 <_printf_float+0xc2>
 800dcfe:	f108 0801 	add.w	r8, r8, #1
 800dd02:	e7ec      	b.n	800dcde <_printf_float+0x34e>
 800dd04:	4613      	mov	r3, r2
 800dd06:	4631      	mov	r1, r6
 800dd08:	4642      	mov	r2, r8
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	47b8      	blx	r7
 800dd0e:	3001      	adds	r0, #1
 800dd10:	d1c0      	bne.n	800dc94 <_printf_float+0x304>
 800dd12:	e69e      	b.n	800da52 <_printf_float+0xc2>
 800dd14:	2301      	movs	r3, #1
 800dd16:	4631      	mov	r1, r6
 800dd18:	4628      	mov	r0, r5
 800dd1a:	9205      	str	r2, [sp, #20]
 800dd1c:	47b8      	blx	r7
 800dd1e:	3001      	adds	r0, #1
 800dd20:	f43f ae97 	beq.w	800da52 <_printf_float+0xc2>
 800dd24:	9a05      	ldr	r2, [sp, #20]
 800dd26:	f10b 0b01 	add.w	fp, fp, #1
 800dd2a:	e7b9      	b.n	800dca0 <_printf_float+0x310>
 800dd2c:	ee18 3a10 	vmov	r3, s16
 800dd30:	4652      	mov	r2, sl
 800dd32:	4631      	mov	r1, r6
 800dd34:	4628      	mov	r0, r5
 800dd36:	47b8      	blx	r7
 800dd38:	3001      	adds	r0, #1
 800dd3a:	d1be      	bne.n	800dcba <_printf_float+0x32a>
 800dd3c:	e689      	b.n	800da52 <_printf_float+0xc2>
 800dd3e:	9a05      	ldr	r2, [sp, #20]
 800dd40:	464b      	mov	r3, r9
 800dd42:	4442      	add	r2, r8
 800dd44:	4631      	mov	r1, r6
 800dd46:	4628      	mov	r0, r5
 800dd48:	47b8      	blx	r7
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d1c1      	bne.n	800dcd2 <_printf_float+0x342>
 800dd4e:	e680      	b.n	800da52 <_printf_float+0xc2>
 800dd50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd52:	2a01      	cmp	r2, #1
 800dd54:	dc01      	bgt.n	800dd5a <_printf_float+0x3ca>
 800dd56:	07db      	lsls	r3, r3, #31
 800dd58:	d538      	bpl.n	800ddcc <_printf_float+0x43c>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	4642      	mov	r2, r8
 800dd5e:	4631      	mov	r1, r6
 800dd60:	4628      	mov	r0, r5
 800dd62:	47b8      	blx	r7
 800dd64:	3001      	adds	r0, #1
 800dd66:	f43f ae74 	beq.w	800da52 <_printf_float+0xc2>
 800dd6a:	ee18 3a10 	vmov	r3, s16
 800dd6e:	4652      	mov	r2, sl
 800dd70:	4631      	mov	r1, r6
 800dd72:	4628      	mov	r0, r5
 800dd74:	47b8      	blx	r7
 800dd76:	3001      	adds	r0, #1
 800dd78:	f43f ae6b 	beq.w	800da52 <_printf_float+0xc2>
 800dd7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd80:	2200      	movs	r2, #0
 800dd82:	2300      	movs	r3, #0
 800dd84:	f7f2 feb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd88:	b9d8      	cbnz	r0, 800ddc2 <_printf_float+0x432>
 800dd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd8c:	f108 0201 	add.w	r2, r8, #1
 800dd90:	3b01      	subs	r3, #1
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d10e      	bne.n	800ddba <_printf_float+0x42a>
 800dd9c:	e659      	b.n	800da52 <_printf_float+0xc2>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	4652      	mov	r2, sl
 800dda2:	4631      	mov	r1, r6
 800dda4:	4628      	mov	r0, r5
 800dda6:	47b8      	blx	r7
 800dda8:	3001      	adds	r0, #1
 800ddaa:	f43f ae52 	beq.w	800da52 <_printf_float+0xc2>
 800ddae:	f108 0801 	add.w	r8, r8, #1
 800ddb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	4543      	cmp	r3, r8
 800ddb8:	dcf1      	bgt.n	800dd9e <_printf_float+0x40e>
 800ddba:	464b      	mov	r3, r9
 800ddbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddc0:	e6dc      	b.n	800db7c <_printf_float+0x1ec>
 800ddc2:	f04f 0800 	mov.w	r8, #0
 800ddc6:	f104 0a1a 	add.w	sl, r4, #26
 800ddca:	e7f2      	b.n	800ddb2 <_printf_float+0x422>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	4642      	mov	r2, r8
 800ddd0:	e7df      	b.n	800dd92 <_printf_float+0x402>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	464a      	mov	r2, r9
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	4628      	mov	r0, r5
 800ddda:	47b8      	blx	r7
 800dddc:	3001      	adds	r0, #1
 800ddde:	f43f ae38 	beq.w	800da52 <_printf_float+0xc2>
 800dde2:	f108 0801 	add.w	r8, r8, #1
 800dde6:	68e3      	ldr	r3, [r4, #12]
 800dde8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddea:	1a5b      	subs	r3, r3, r1
 800ddec:	4543      	cmp	r3, r8
 800ddee:	dcf0      	bgt.n	800ddd2 <_printf_float+0x442>
 800ddf0:	e6fa      	b.n	800dbe8 <_printf_float+0x258>
 800ddf2:	f04f 0800 	mov.w	r8, #0
 800ddf6:	f104 0919 	add.w	r9, r4, #25
 800ddfa:	e7f4      	b.n	800dde6 <_printf_float+0x456>

0800ddfc <_printf_common>:
 800ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de00:	4616      	mov	r6, r2
 800de02:	4699      	mov	r9, r3
 800de04:	688a      	ldr	r2, [r1, #8]
 800de06:	690b      	ldr	r3, [r1, #16]
 800de08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de0c:	4293      	cmp	r3, r2
 800de0e:	bfb8      	it	lt
 800de10:	4613      	movlt	r3, r2
 800de12:	6033      	str	r3, [r6, #0]
 800de14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de18:	4607      	mov	r7, r0
 800de1a:	460c      	mov	r4, r1
 800de1c:	b10a      	cbz	r2, 800de22 <_printf_common+0x26>
 800de1e:	3301      	adds	r3, #1
 800de20:	6033      	str	r3, [r6, #0]
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	0699      	lsls	r1, r3, #26
 800de26:	bf42      	ittt	mi
 800de28:	6833      	ldrmi	r3, [r6, #0]
 800de2a:	3302      	addmi	r3, #2
 800de2c:	6033      	strmi	r3, [r6, #0]
 800de2e:	6825      	ldr	r5, [r4, #0]
 800de30:	f015 0506 	ands.w	r5, r5, #6
 800de34:	d106      	bne.n	800de44 <_printf_common+0x48>
 800de36:	f104 0a19 	add.w	sl, r4, #25
 800de3a:	68e3      	ldr	r3, [r4, #12]
 800de3c:	6832      	ldr	r2, [r6, #0]
 800de3e:	1a9b      	subs	r3, r3, r2
 800de40:	42ab      	cmp	r3, r5
 800de42:	dc26      	bgt.n	800de92 <_printf_common+0x96>
 800de44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de48:	1e13      	subs	r3, r2, #0
 800de4a:	6822      	ldr	r2, [r4, #0]
 800de4c:	bf18      	it	ne
 800de4e:	2301      	movne	r3, #1
 800de50:	0692      	lsls	r2, r2, #26
 800de52:	d42b      	bmi.n	800deac <_printf_common+0xb0>
 800de54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de58:	4649      	mov	r1, r9
 800de5a:	4638      	mov	r0, r7
 800de5c:	47c0      	blx	r8
 800de5e:	3001      	adds	r0, #1
 800de60:	d01e      	beq.n	800dea0 <_printf_common+0xa4>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	68e5      	ldr	r5, [r4, #12]
 800de66:	6832      	ldr	r2, [r6, #0]
 800de68:	f003 0306 	and.w	r3, r3, #6
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	bf08      	it	eq
 800de70:	1aad      	subeq	r5, r5, r2
 800de72:	68a3      	ldr	r3, [r4, #8]
 800de74:	6922      	ldr	r2, [r4, #16]
 800de76:	bf0c      	ite	eq
 800de78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de7c:	2500      	movne	r5, #0
 800de7e:	4293      	cmp	r3, r2
 800de80:	bfc4      	itt	gt
 800de82:	1a9b      	subgt	r3, r3, r2
 800de84:	18ed      	addgt	r5, r5, r3
 800de86:	2600      	movs	r6, #0
 800de88:	341a      	adds	r4, #26
 800de8a:	42b5      	cmp	r5, r6
 800de8c:	d11a      	bne.n	800dec4 <_printf_common+0xc8>
 800de8e:	2000      	movs	r0, #0
 800de90:	e008      	b.n	800dea4 <_printf_common+0xa8>
 800de92:	2301      	movs	r3, #1
 800de94:	4652      	mov	r2, sl
 800de96:	4649      	mov	r1, r9
 800de98:	4638      	mov	r0, r7
 800de9a:	47c0      	blx	r8
 800de9c:	3001      	adds	r0, #1
 800de9e:	d103      	bne.n	800dea8 <_printf_common+0xac>
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea8:	3501      	adds	r5, #1
 800deaa:	e7c6      	b.n	800de3a <_printf_common+0x3e>
 800deac:	18e1      	adds	r1, r4, r3
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	2030      	movs	r0, #48	; 0x30
 800deb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800deb6:	4422      	add	r2, r4
 800deb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800debc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dec0:	3302      	adds	r3, #2
 800dec2:	e7c7      	b.n	800de54 <_printf_common+0x58>
 800dec4:	2301      	movs	r3, #1
 800dec6:	4622      	mov	r2, r4
 800dec8:	4649      	mov	r1, r9
 800deca:	4638      	mov	r0, r7
 800decc:	47c0      	blx	r8
 800dece:	3001      	adds	r0, #1
 800ded0:	d0e6      	beq.n	800dea0 <_printf_common+0xa4>
 800ded2:	3601      	adds	r6, #1
 800ded4:	e7d9      	b.n	800de8a <_printf_common+0x8e>
	...

0800ded8 <_printf_i>:
 800ded8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dedc:	460c      	mov	r4, r1
 800dede:	4691      	mov	r9, r2
 800dee0:	7e27      	ldrb	r7, [r4, #24]
 800dee2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dee4:	2f78      	cmp	r7, #120	; 0x78
 800dee6:	4680      	mov	r8, r0
 800dee8:	469a      	mov	sl, r3
 800deea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800deee:	d807      	bhi.n	800df00 <_printf_i+0x28>
 800def0:	2f62      	cmp	r7, #98	; 0x62
 800def2:	d80a      	bhi.n	800df0a <_printf_i+0x32>
 800def4:	2f00      	cmp	r7, #0
 800def6:	f000 80d8 	beq.w	800e0aa <_printf_i+0x1d2>
 800defa:	2f58      	cmp	r7, #88	; 0x58
 800defc:	f000 80a3 	beq.w	800e046 <_printf_i+0x16e>
 800df00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df08:	e03a      	b.n	800df80 <_printf_i+0xa8>
 800df0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df0e:	2b15      	cmp	r3, #21
 800df10:	d8f6      	bhi.n	800df00 <_printf_i+0x28>
 800df12:	a001      	add	r0, pc, #4	; (adr r0, 800df18 <_printf_i+0x40>)
 800df14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df18:	0800df71 	.word	0x0800df71
 800df1c:	0800df85 	.word	0x0800df85
 800df20:	0800df01 	.word	0x0800df01
 800df24:	0800df01 	.word	0x0800df01
 800df28:	0800df01 	.word	0x0800df01
 800df2c:	0800df01 	.word	0x0800df01
 800df30:	0800df85 	.word	0x0800df85
 800df34:	0800df01 	.word	0x0800df01
 800df38:	0800df01 	.word	0x0800df01
 800df3c:	0800df01 	.word	0x0800df01
 800df40:	0800df01 	.word	0x0800df01
 800df44:	0800e091 	.word	0x0800e091
 800df48:	0800dfb5 	.word	0x0800dfb5
 800df4c:	0800e073 	.word	0x0800e073
 800df50:	0800df01 	.word	0x0800df01
 800df54:	0800df01 	.word	0x0800df01
 800df58:	0800e0b3 	.word	0x0800e0b3
 800df5c:	0800df01 	.word	0x0800df01
 800df60:	0800dfb5 	.word	0x0800dfb5
 800df64:	0800df01 	.word	0x0800df01
 800df68:	0800df01 	.word	0x0800df01
 800df6c:	0800e07b 	.word	0x0800e07b
 800df70:	680b      	ldr	r3, [r1, #0]
 800df72:	1d1a      	adds	r2, r3, #4
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	600a      	str	r2, [r1, #0]
 800df78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df80:	2301      	movs	r3, #1
 800df82:	e0a3      	b.n	800e0cc <_printf_i+0x1f4>
 800df84:	6825      	ldr	r5, [r4, #0]
 800df86:	6808      	ldr	r0, [r1, #0]
 800df88:	062e      	lsls	r6, r5, #24
 800df8a:	f100 0304 	add.w	r3, r0, #4
 800df8e:	d50a      	bpl.n	800dfa6 <_printf_i+0xce>
 800df90:	6805      	ldr	r5, [r0, #0]
 800df92:	600b      	str	r3, [r1, #0]
 800df94:	2d00      	cmp	r5, #0
 800df96:	da03      	bge.n	800dfa0 <_printf_i+0xc8>
 800df98:	232d      	movs	r3, #45	; 0x2d
 800df9a:	426d      	negs	r5, r5
 800df9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfa0:	485e      	ldr	r0, [pc, #376]	; (800e11c <_printf_i+0x244>)
 800dfa2:	230a      	movs	r3, #10
 800dfa4:	e019      	b.n	800dfda <_printf_i+0x102>
 800dfa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dfaa:	6805      	ldr	r5, [r0, #0]
 800dfac:	600b      	str	r3, [r1, #0]
 800dfae:	bf18      	it	ne
 800dfb0:	b22d      	sxthne	r5, r5
 800dfb2:	e7ef      	b.n	800df94 <_printf_i+0xbc>
 800dfb4:	680b      	ldr	r3, [r1, #0]
 800dfb6:	6825      	ldr	r5, [r4, #0]
 800dfb8:	1d18      	adds	r0, r3, #4
 800dfba:	6008      	str	r0, [r1, #0]
 800dfbc:	0628      	lsls	r0, r5, #24
 800dfbe:	d501      	bpl.n	800dfc4 <_printf_i+0xec>
 800dfc0:	681d      	ldr	r5, [r3, #0]
 800dfc2:	e002      	b.n	800dfca <_printf_i+0xf2>
 800dfc4:	0669      	lsls	r1, r5, #25
 800dfc6:	d5fb      	bpl.n	800dfc0 <_printf_i+0xe8>
 800dfc8:	881d      	ldrh	r5, [r3, #0]
 800dfca:	4854      	ldr	r0, [pc, #336]	; (800e11c <_printf_i+0x244>)
 800dfcc:	2f6f      	cmp	r7, #111	; 0x6f
 800dfce:	bf0c      	ite	eq
 800dfd0:	2308      	moveq	r3, #8
 800dfd2:	230a      	movne	r3, #10
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfda:	6866      	ldr	r6, [r4, #4]
 800dfdc:	60a6      	str	r6, [r4, #8]
 800dfde:	2e00      	cmp	r6, #0
 800dfe0:	bfa2      	ittt	ge
 800dfe2:	6821      	ldrge	r1, [r4, #0]
 800dfe4:	f021 0104 	bicge.w	r1, r1, #4
 800dfe8:	6021      	strge	r1, [r4, #0]
 800dfea:	b90d      	cbnz	r5, 800dff0 <_printf_i+0x118>
 800dfec:	2e00      	cmp	r6, #0
 800dfee:	d04d      	beq.n	800e08c <_printf_i+0x1b4>
 800dff0:	4616      	mov	r6, r2
 800dff2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dff6:	fb03 5711 	mls	r7, r3, r1, r5
 800dffa:	5dc7      	ldrb	r7, [r0, r7]
 800dffc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e000:	462f      	mov	r7, r5
 800e002:	42bb      	cmp	r3, r7
 800e004:	460d      	mov	r5, r1
 800e006:	d9f4      	bls.n	800dff2 <_printf_i+0x11a>
 800e008:	2b08      	cmp	r3, #8
 800e00a:	d10b      	bne.n	800e024 <_printf_i+0x14c>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	07df      	lsls	r7, r3, #31
 800e010:	d508      	bpl.n	800e024 <_printf_i+0x14c>
 800e012:	6923      	ldr	r3, [r4, #16]
 800e014:	6861      	ldr	r1, [r4, #4]
 800e016:	4299      	cmp	r1, r3
 800e018:	bfde      	ittt	le
 800e01a:	2330      	movle	r3, #48	; 0x30
 800e01c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e020:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e024:	1b92      	subs	r2, r2, r6
 800e026:	6122      	str	r2, [r4, #16]
 800e028:	f8cd a000 	str.w	sl, [sp]
 800e02c:	464b      	mov	r3, r9
 800e02e:	aa03      	add	r2, sp, #12
 800e030:	4621      	mov	r1, r4
 800e032:	4640      	mov	r0, r8
 800e034:	f7ff fee2 	bl	800ddfc <_printf_common>
 800e038:	3001      	adds	r0, #1
 800e03a:	d14c      	bne.n	800e0d6 <_printf_i+0x1fe>
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	b004      	add	sp, #16
 800e042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e046:	4835      	ldr	r0, [pc, #212]	; (800e11c <_printf_i+0x244>)
 800e048:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e04c:	6823      	ldr	r3, [r4, #0]
 800e04e:	680e      	ldr	r6, [r1, #0]
 800e050:	061f      	lsls	r7, r3, #24
 800e052:	f856 5b04 	ldr.w	r5, [r6], #4
 800e056:	600e      	str	r6, [r1, #0]
 800e058:	d514      	bpl.n	800e084 <_printf_i+0x1ac>
 800e05a:	07d9      	lsls	r1, r3, #31
 800e05c:	bf44      	itt	mi
 800e05e:	f043 0320 	orrmi.w	r3, r3, #32
 800e062:	6023      	strmi	r3, [r4, #0]
 800e064:	b91d      	cbnz	r5, 800e06e <_printf_i+0x196>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	f023 0320 	bic.w	r3, r3, #32
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	2310      	movs	r3, #16
 800e070:	e7b0      	b.n	800dfd4 <_printf_i+0xfc>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	f043 0320 	orr.w	r3, r3, #32
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	2378      	movs	r3, #120	; 0x78
 800e07c:	4828      	ldr	r0, [pc, #160]	; (800e120 <_printf_i+0x248>)
 800e07e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e082:	e7e3      	b.n	800e04c <_printf_i+0x174>
 800e084:	065e      	lsls	r6, r3, #25
 800e086:	bf48      	it	mi
 800e088:	b2ad      	uxthmi	r5, r5
 800e08a:	e7e6      	b.n	800e05a <_printf_i+0x182>
 800e08c:	4616      	mov	r6, r2
 800e08e:	e7bb      	b.n	800e008 <_printf_i+0x130>
 800e090:	680b      	ldr	r3, [r1, #0]
 800e092:	6826      	ldr	r6, [r4, #0]
 800e094:	6960      	ldr	r0, [r4, #20]
 800e096:	1d1d      	adds	r5, r3, #4
 800e098:	600d      	str	r5, [r1, #0]
 800e09a:	0635      	lsls	r5, r6, #24
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	d501      	bpl.n	800e0a4 <_printf_i+0x1cc>
 800e0a0:	6018      	str	r0, [r3, #0]
 800e0a2:	e002      	b.n	800e0aa <_printf_i+0x1d2>
 800e0a4:	0671      	lsls	r1, r6, #25
 800e0a6:	d5fb      	bpl.n	800e0a0 <_printf_i+0x1c8>
 800e0a8:	8018      	strh	r0, [r3, #0]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	6123      	str	r3, [r4, #16]
 800e0ae:	4616      	mov	r6, r2
 800e0b0:	e7ba      	b.n	800e028 <_printf_i+0x150>
 800e0b2:	680b      	ldr	r3, [r1, #0]
 800e0b4:	1d1a      	adds	r2, r3, #4
 800e0b6:	600a      	str	r2, [r1, #0]
 800e0b8:	681e      	ldr	r6, [r3, #0]
 800e0ba:	6862      	ldr	r2, [r4, #4]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7f2 f89e 	bl	8000200 <memchr>
 800e0c4:	b108      	cbz	r0, 800e0ca <_printf_i+0x1f2>
 800e0c6:	1b80      	subs	r0, r0, r6
 800e0c8:	6060      	str	r0, [r4, #4]
 800e0ca:	6863      	ldr	r3, [r4, #4]
 800e0cc:	6123      	str	r3, [r4, #16]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0d4:	e7a8      	b.n	800e028 <_printf_i+0x150>
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	4632      	mov	r2, r6
 800e0da:	4649      	mov	r1, r9
 800e0dc:	4640      	mov	r0, r8
 800e0de:	47d0      	blx	sl
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	d0ab      	beq.n	800e03c <_printf_i+0x164>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	079b      	lsls	r3, r3, #30
 800e0e8:	d413      	bmi.n	800e112 <_printf_i+0x23a>
 800e0ea:	68e0      	ldr	r0, [r4, #12]
 800e0ec:	9b03      	ldr	r3, [sp, #12]
 800e0ee:	4298      	cmp	r0, r3
 800e0f0:	bfb8      	it	lt
 800e0f2:	4618      	movlt	r0, r3
 800e0f4:	e7a4      	b.n	800e040 <_printf_i+0x168>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	4632      	mov	r2, r6
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	47d0      	blx	sl
 800e100:	3001      	adds	r0, #1
 800e102:	d09b      	beq.n	800e03c <_printf_i+0x164>
 800e104:	3501      	adds	r5, #1
 800e106:	68e3      	ldr	r3, [r4, #12]
 800e108:	9903      	ldr	r1, [sp, #12]
 800e10a:	1a5b      	subs	r3, r3, r1
 800e10c:	42ab      	cmp	r3, r5
 800e10e:	dcf2      	bgt.n	800e0f6 <_printf_i+0x21e>
 800e110:	e7eb      	b.n	800e0ea <_printf_i+0x212>
 800e112:	2500      	movs	r5, #0
 800e114:	f104 0619 	add.w	r6, r4, #25
 800e118:	e7f5      	b.n	800e106 <_printf_i+0x22e>
 800e11a:	bf00      	nop
 800e11c:	08012c38 	.word	0x08012c38
 800e120:	08012c49 	.word	0x08012c49

0800e124 <_scanf_float>:
 800e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	b087      	sub	sp, #28
 800e12a:	4617      	mov	r7, r2
 800e12c:	9303      	str	r3, [sp, #12]
 800e12e:	688b      	ldr	r3, [r1, #8]
 800e130:	1e5a      	subs	r2, r3, #1
 800e132:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e136:	bf83      	ittte	hi
 800e138:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e13c:	195b      	addhi	r3, r3, r5
 800e13e:	9302      	strhi	r3, [sp, #8]
 800e140:	2300      	movls	r3, #0
 800e142:	bf86      	itte	hi
 800e144:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e148:	608b      	strhi	r3, [r1, #8]
 800e14a:	9302      	strls	r3, [sp, #8]
 800e14c:	680b      	ldr	r3, [r1, #0]
 800e14e:	468b      	mov	fp, r1
 800e150:	2500      	movs	r5, #0
 800e152:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e156:	f84b 3b1c 	str.w	r3, [fp], #28
 800e15a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e15e:	4680      	mov	r8, r0
 800e160:	460c      	mov	r4, r1
 800e162:	465e      	mov	r6, fp
 800e164:	46aa      	mov	sl, r5
 800e166:	46a9      	mov	r9, r5
 800e168:	9501      	str	r5, [sp, #4]
 800e16a:	68a2      	ldr	r2, [r4, #8]
 800e16c:	b152      	cbz	r2, 800e184 <_scanf_float+0x60>
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b4e      	cmp	r3, #78	; 0x4e
 800e174:	d864      	bhi.n	800e240 <_scanf_float+0x11c>
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d83c      	bhi.n	800e1f4 <_scanf_float+0xd0>
 800e17a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e17e:	b2c8      	uxtb	r0, r1
 800e180:	280e      	cmp	r0, #14
 800e182:	d93a      	bls.n	800e1fa <_scanf_float+0xd6>
 800e184:	f1b9 0f00 	cmp.w	r9, #0
 800e188:	d003      	beq.n	800e192 <_scanf_float+0x6e>
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e196:	f1ba 0f01 	cmp.w	sl, #1
 800e19a:	f200 8113 	bhi.w	800e3c4 <_scanf_float+0x2a0>
 800e19e:	455e      	cmp	r6, fp
 800e1a0:	f200 8105 	bhi.w	800e3ae <_scanf_float+0x28a>
 800e1a4:	2501      	movs	r5, #1
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	b007      	add	sp, #28
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e1b2:	2a0d      	cmp	r2, #13
 800e1b4:	d8e6      	bhi.n	800e184 <_scanf_float+0x60>
 800e1b6:	a101      	add	r1, pc, #4	; (adr r1, 800e1bc <_scanf_float+0x98>)
 800e1b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e1bc:	0800e2fb 	.word	0x0800e2fb
 800e1c0:	0800e185 	.word	0x0800e185
 800e1c4:	0800e185 	.word	0x0800e185
 800e1c8:	0800e185 	.word	0x0800e185
 800e1cc:	0800e35b 	.word	0x0800e35b
 800e1d0:	0800e333 	.word	0x0800e333
 800e1d4:	0800e185 	.word	0x0800e185
 800e1d8:	0800e185 	.word	0x0800e185
 800e1dc:	0800e309 	.word	0x0800e309
 800e1e0:	0800e185 	.word	0x0800e185
 800e1e4:	0800e185 	.word	0x0800e185
 800e1e8:	0800e185 	.word	0x0800e185
 800e1ec:	0800e185 	.word	0x0800e185
 800e1f0:	0800e2c1 	.word	0x0800e2c1
 800e1f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e1f8:	e7db      	b.n	800e1b2 <_scanf_float+0x8e>
 800e1fa:	290e      	cmp	r1, #14
 800e1fc:	d8c2      	bhi.n	800e184 <_scanf_float+0x60>
 800e1fe:	a001      	add	r0, pc, #4	; (adr r0, 800e204 <_scanf_float+0xe0>)
 800e200:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e204:	0800e2b3 	.word	0x0800e2b3
 800e208:	0800e185 	.word	0x0800e185
 800e20c:	0800e2b3 	.word	0x0800e2b3
 800e210:	0800e347 	.word	0x0800e347
 800e214:	0800e185 	.word	0x0800e185
 800e218:	0800e261 	.word	0x0800e261
 800e21c:	0800e29d 	.word	0x0800e29d
 800e220:	0800e29d 	.word	0x0800e29d
 800e224:	0800e29d 	.word	0x0800e29d
 800e228:	0800e29d 	.word	0x0800e29d
 800e22c:	0800e29d 	.word	0x0800e29d
 800e230:	0800e29d 	.word	0x0800e29d
 800e234:	0800e29d 	.word	0x0800e29d
 800e238:	0800e29d 	.word	0x0800e29d
 800e23c:	0800e29d 	.word	0x0800e29d
 800e240:	2b6e      	cmp	r3, #110	; 0x6e
 800e242:	d809      	bhi.n	800e258 <_scanf_float+0x134>
 800e244:	2b60      	cmp	r3, #96	; 0x60
 800e246:	d8b2      	bhi.n	800e1ae <_scanf_float+0x8a>
 800e248:	2b54      	cmp	r3, #84	; 0x54
 800e24a:	d077      	beq.n	800e33c <_scanf_float+0x218>
 800e24c:	2b59      	cmp	r3, #89	; 0x59
 800e24e:	d199      	bne.n	800e184 <_scanf_float+0x60>
 800e250:	2d07      	cmp	r5, #7
 800e252:	d197      	bne.n	800e184 <_scanf_float+0x60>
 800e254:	2508      	movs	r5, #8
 800e256:	e029      	b.n	800e2ac <_scanf_float+0x188>
 800e258:	2b74      	cmp	r3, #116	; 0x74
 800e25a:	d06f      	beq.n	800e33c <_scanf_float+0x218>
 800e25c:	2b79      	cmp	r3, #121	; 0x79
 800e25e:	e7f6      	b.n	800e24e <_scanf_float+0x12a>
 800e260:	6821      	ldr	r1, [r4, #0]
 800e262:	05c8      	lsls	r0, r1, #23
 800e264:	d51a      	bpl.n	800e29c <_scanf_float+0x178>
 800e266:	9b02      	ldr	r3, [sp, #8]
 800e268:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e26c:	6021      	str	r1, [r4, #0]
 800e26e:	f109 0901 	add.w	r9, r9, #1
 800e272:	b11b      	cbz	r3, 800e27c <_scanf_float+0x158>
 800e274:	3b01      	subs	r3, #1
 800e276:	3201      	adds	r2, #1
 800e278:	9302      	str	r3, [sp, #8]
 800e27a:	60a2      	str	r2, [r4, #8]
 800e27c:	68a3      	ldr	r3, [r4, #8]
 800e27e:	3b01      	subs	r3, #1
 800e280:	60a3      	str	r3, [r4, #8]
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	3301      	adds	r3, #1
 800e286:	6123      	str	r3, [r4, #16]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	607b      	str	r3, [r7, #4]
 800e290:	f340 8084 	ble.w	800e39c <_scanf_float+0x278>
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	3301      	adds	r3, #1
 800e298:	603b      	str	r3, [r7, #0]
 800e29a:	e766      	b.n	800e16a <_scanf_float+0x46>
 800e29c:	eb1a 0f05 	cmn.w	sl, r5
 800e2a0:	f47f af70 	bne.w	800e184 <_scanf_float+0x60>
 800e2a4:	6822      	ldr	r2, [r4, #0]
 800e2a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	f806 3b01 	strb.w	r3, [r6], #1
 800e2b0:	e7e4      	b.n	800e27c <_scanf_float+0x158>
 800e2b2:	6822      	ldr	r2, [r4, #0]
 800e2b4:	0610      	lsls	r0, r2, #24
 800e2b6:	f57f af65 	bpl.w	800e184 <_scanf_float+0x60>
 800e2ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2be:	e7f4      	b.n	800e2aa <_scanf_float+0x186>
 800e2c0:	f1ba 0f00 	cmp.w	sl, #0
 800e2c4:	d10e      	bne.n	800e2e4 <_scanf_float+0x1c0>
 800e2c6:	f1b9 0f00 	cmp.w	r9, #0
 800e2ca:	d10e      	bne.n	800e2ea <_scanf_float+0x1c6>
 800e2cc:	6822      	ldr	r2, [r4, #0]
 800e2ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e2d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e2d6:	d108      	bne.n	800e2ea <_scanf_float+0x1c6>
 800e2d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2dc:	6022      	str	r2, [r4, #0]
 800e2de:	f04f 0a01 	mov.w	sl, #1
 800e2e2:	e7e3      	b.n	800e2ac <_scanf_float+0x188>
 800e2e4:	f1ba 0f02 	cmp.w	sl, #2
 800e2e8:	d055      	beq.n	800e396 <_scanf_float+0x272>
 800e2ea:	2d01      	cmp	r5, #1
 800e2ec:	d002      	beq.n	800e2f4 <_scanf_float+0x1d0>
 800e2ee:	2d04      	cmp	r5, #4
 800e2f0:	f47f af48 	bne.w	800e184 <_scanf_float+0x60>
 800e2f4:	3501      	adds	r5, #1
 800e2f6:	b2ed      	uxtb	r5, r5
 800e2f8:	e7d8      	b.n	800e2ac <_scanf_float+0x188>
 800e2fa:	f1ba 0f01 	cmp.w	sl, #1
 800e2fe:	f47f af41 	bne.w	800e184 <_scanf_float+0x60>
 800e302:	f04f 0a02 	mov.w	sl, #2
 800e306:	e7d1      	b.n	800e2ac <_scanf_float+0x188>
 800e308:	b97d      	cbnz	r5, 800e32a <_scanf_float+0x206>
 800e30a:	f1b9 0f00 	cmp.w	r9, #0
 800e30e:	f47f af3c 	bne.w	800e18a <_scanf_float+0x66>
 800e312:	6822      	ldr	r2, [r4, #0]
 800e314:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e318:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e31c:	f47f af39 	bne.w	800e192 <_scanf_float+0x6e>
 800e320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e324:	6022      	str	r2, [r4, #0]
 800e326:	2501      	movs	r5, #1
 800e328:	e7c0      	b.n	800e2ac <_scanf_float+0x188>
 800e32a:	2d03      	cmp	r5, #3
 800e32c:	d0e2      	beq.n	800e2f4 <_scanf_float+0x1d0>
 800e32e:	2d05      	cmp	r5, #5
 800e330:	e7de      	b.n	800e2f0 <_scanf_float+0x1cc>
 800e332:	2d02      	cmp	r5, #2
 800e334:	f47f af26 	bne.w	800e184 <_scanf_float+0x60>
 800e338:	2503      	movs	r5, #3
 800e33a:	e7b7      	b.n	800e2ac <_scanf_float+0x188>
 800e33c:	2d06      	cmp	r5, #6
 800e33e:	f47f af21 	bne.w	800e184 <_scanf_float+0x60>
 800e342:	2507      	movs	r5, #7
 800e344:	e7b2      	b.n	800e2ac <_scanf_float+0x188>
 800e346:	6822      	ldr	r2, [r4, #0]
 800e348:	0591      	lsls	r1, r2, #22
 800e34a:	f57f af1b 	bpl.w	800e184 <_scanf_float+0x60>
 800e34e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	f8cd 9004 	str.w	r9, [sp, #4]
 800e358:	e7a8      	b.n	800e2ac <_scanf_float+0x188>
 800e35a:	6822      	ldr	r2, [r4, #0]
 800e35c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e360:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e364:	d006      	beq.n	800e374 <_scanf_float+0x250>
 800e366:	0550      	lsls	r0, r2, #21
 800e368:	f57f af0c 	bpl.w	800e184 <_scanf_float+0x60>
 800e36c:	f1b9 0f00 	cmp.w	r9, #0
 800e370:	f43f af0f 	beq.w	800e192 <_scanf_float+0x6e>
 800e374:	0591      	lsls	r1, r2, #22
 800e376:	bf58      	it	pl
 800e378:	9901      	ldrpl	r1, [sp, #4]
 800e37a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e37e:	bf58      	it	pl
 800e380:	eba9 0101 	subpl.w	r1, r9, r1
 800e384:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e388:	bf58      	it	pl
 800e38a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e38e:	6022      	str	r2, [r4, #0]
 800e390:	f04f 0900 	mov.w	r9, #0
 800e394:	e78a      	b.n	800e2ac <_scanf_float+0x188>
 800e396:	f04f 0a03 	mov.w	sl, #3
 800e39a:	e787      	b.n	800e2ac <_scanf_float+0x188>
 800e39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	4798      	blx	r3
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	f43f aedf 	beq.w	800e16a <_scanf_float+0x46>
 800e3ac:	e6ea      	b.n	800e184 <_scanf_float+0x60>
 800e3ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3b6:	463a      	mov	r2, r7
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	4798      	blx	r3
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	6123      	str	r3, [r4, #16]
 800e3c2:	e6ec      	b.n	800e19e <_scanf_float+0x7a>
 800e3c4:	1e6b      	subs	r3, r5, #1
 800e3c6:	2b06      	cmp	r3, #6
 800e3c8:	d825      	bhi.n	800e416 <_scanf_float+0x2f2>
 800e3ca:	2d02      	cmp	r5, #2
 800e3cc:	d836      	bhi.n	800e43c <_scanf_float+0x318>
 800e3ce:	455e      	cmp	r6, fp
 800e3d0:	f67f aee8 	bls.w	800e1a4 <_scanf_float+0x80>
 800e3d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3dc:	463a      	mov	r2, r7
 800e3de:	4640      	mov	r0, r8
 800e3e0:	4798      	blx	r3
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	e7f1      	b.n	800e3ce <_scanf_float+0x2aa>
 800e3ea:	9802      	ldr	r0, [sp, #8]
 800e3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e3f4:	9002      	str	r0, [sp, #8]
 800e3f6:	463a      	mov	r2, r7
 800e3f8:	4640      	mov	r0, r8
 800e3fa:	4798      	blx	r3
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	6123      	str	r3, [r4, #16]
 800e402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e406:	fa5f fa8a 	uxtb.w	sl, sl
 800e40a:	f1ba 0f02 	cmp.w	sl, #2
 800e40e:	d1ec      	bne.n	800e3ea <_scanf_float+0x2c6>
 800e410:	3d03      	subs	r5, #3
 800e412:	b2ed      	uxtb	r5, r5
 800e414:	1b76      	subs	r6, r6, r5
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	05da      	lsls	r2, r3, #23
 800e41a:	d52f      	bpl.n	800e47c <_scanf_float+0x358>
 800e41c:	055b      	lsls	r3, r3, #21
 800e41e:	d510      	bpl.n	800e442 <_scanf_float+0x31e>
 800e420:	455e      	cmp	r6, fp
 800e422:	f67f aebf 	bls.w	800e1a4 <_scanf_float+0x80>
 800e426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e42a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e42e:	463a      	mov	r2, r7
 800e430:	4640      	mov	r0, r8
 800e432:	4798      	blx	r3
 800e434:	6923      	ldr	r3, [r4, #16]
 800e436:	3b01      	subs	r3, #1
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	e7f1      	b.n	800e420 <_scanf_float+0x2fc>
 800e43c:	46aa      	mov	sl, r5
 800e43e:	9602      	str	r6, [sp, #8]
 800e440:	e7df      	b.n	800e402 <_scanf_float+0x2de>
 800e442:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e446:	6923      	ldr	r3, [r4, #16]
 800e448:	2965      	cmp	r1, #101	; 0x65
 800e44a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e44e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e452:	6123      	str	r3, [r4, #16]
 800e454:	d00c      	beq.n	800e470 <_scanf_float+0x34c>
 800e456:	2945      	cmp	r1, #69	; 0x45
 800e458:	d00a      	beq.n	800e470 <_scanf_float+0x34c>
 800e45a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e45e:	463a      	mov	r2, r7
 800e460:	4640      	mov	r0, r8
 800e462:	4798      	blx	r3
 800e464:	6923      	ldr	r3, [r4, #16]
 800e466:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	1eb5      	subs	r5, r6, #2
 800e46e:	6123      	str	r3, [r4, #16]
 800e470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e474:	463a      	mov	r2, r7
 800e476:	4640      	mov	r0, r8
 800e478:	4798      	blx	r3
 800e47a:	462e      	mov	r6, r5
 800e47c:	6825      	ldr	r5, [r4, #0]
 800e47e:	f015 0510 	ands.w	r5, r5, #16
 800e482:	d158      	bne.n	800e536 <_scanf_float+0x412>
 800e484:	7035      	strb	r5, [r6, #0]
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e490:	d11c      	bne.n	800e4cc <_scanf_float+0x3a8>
 800e492:	9b01      	ldr	r3, [sp, #4]
 800e494:	454b      	cmp	r3, r9
 800e496:	eba3 0209 	sub.w	r2, r3, r9
 800e49a:	d124      	bne.n	800e4e6 <_scanf_float+0x3c2>
 800e49c:	2200      	movs	r2, #0
 800e49e:	4659      	mov	r1, fp
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	f000 ffdf 	bl	800f464 <_strtod_r>
 800e4a6:	9b03      	ldr	r3, [sp, #12]
 800e4a8:	6821      	ldr	r1, [r4, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f011 0f02 	tst.w	r1, #2
 800e4b0:	ec57 6b10 	vmov	r6, r7, d0
 800e4b4:	f103 0204 	add.w	r2, r3, #4
 800e4b8:	d020      	beq.n	800e4fc <_scanf_float+0x3d8>
 800e4ba:	9903      	ldr	r1, [sp, #12]
 800e4bc:	600a      	str	r2, [r1, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	e9c3 6700 	strd	r6, r7, [r3]
 800e4c4:	68e3      	ldr	r3, [r4, #12]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	60e3      	str	r3, [r4, #12]
 800e4ca:	e66c      	b.n	800e1a6 <_scanf_float+0x82>
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0e4      	beq.n	800e49c <_scanf_float+0x378>
 800e4d2:	9905      	ldr	r1, [sp, #20]
 800e4d4:	230a      	movs	r3, #10
 800e4d6:	462a      	mov	r2, r5
 800e4d8:	3101      	adds	r1, #1
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f001 f84c 	bl	800f578 <_strtol_r>
 800e4e0:	9b04      	ldr	r3, [sp, #16]
 800e4e2:	9e05      	ldr	r6, [sp, #20]
 800e4e4:	1ac2      	subs	r2, r0, r3
 800e4e6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e4ea:	429e      	cmp	r6, r3
 800e4ec:	bf28      	it	cs
 800e4ee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e4f2:	4912      	ldr	r1, [pc, #72]	; (800e53c <_scanf_float+0x418>)
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 f8e9 	bl	800e6cc <siprintf>
 800e4fa:	e7cf      	b.n	800e49c <_scanf_float+0x378>
 800e4fc:	f011 0f04 	tst.w	r1, #4
 800e500:	9903      	ldr	r1, [sp, #12]
 800e502:	600a      	str	r2, [r1, #0]
 800e504:	d1db      	bne.n	800e4be <_scanf_float+0x39a>
 800e506:	f8d3 8000 	ldr.w	r8, [r3]
 800e50a:	ee10 2a10 	vmov	r2, s0
 800e50e:	ee10 0a10 	vmov	r0, s0
 800e512:	463b      	mov	r3, r7
 800e514:	4639      	mov	r1, r7
 800e516:	f7f2 fb19 	bl	8000b4c <__aeabi_dcmpun>
 800e51a:	b128      	cbz	r0, 800e528 <_scanf_float+0x404>
 800e51c:	4808      	ldr	r0, [pc, #32]	; (800e540 <_scanf_float+0x41c>)
 800e51e:	f000 f88b 	bl	800e638 <nanf>
 800e522:	ed88 0a00 	vstr	s0, [r8]
 800e526:	e7cd      	b.n	800e4c4 <_scanf_float+0x3a0>
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f2 fb6c 	bl	8000c08 <__aeabi_d2f>
 800e530:	f8c8 0000 	str.w	r0, [r8]
 800e534:	e7c6      	b.n	800e4c4 <_scanf_float+0x3a0>
 800e536:	2500      	movs	r5, #0
 800e538:	e635      	b.n	800e1a6 <_scanf_float+0x82>
 800e53a:	bf00      	nop
 800e53c:	08012c5a 	.word	0x08012c5a
 800e540:	08012ceb 	.word	0x08012ceb

0800e544 <cleanup_glue>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	460c      	mov	r4, r1
 800e548:	6809      	ldr	r1, [r1, #0]
 800e54a:	4605      	mov	r5, r0
 800e54c:	b109      	cbz	r1, 800e552 <cleanup_glue+0xe>
 800e54e:	f7ff fff9 	bl	800e544 <cleanup_glue>
 800e552:	4621      	mov	r1, r4
 800e554:	4628      	mov	r0, r5
 800e556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55a:	f7ff b8cf 	b.w	800d6fc <_free_r>
	...

0800e560 <_reclaim_reent>:
 800e560:	4b2c      	ldr	r3, [pc, #176]	; (800e614 <_reclaim_reent+0xb4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4283      	cmp	r3, r0
 800e566:	b570      	push	{r4, r5, r6, lr}
 800e568:	4604      	mov	r4, r0
 800e56a:	d051      	beq.n	800e610 <_reclaim_reent+0xb0>
 800e56c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e56e:	b143      	cbz	r3, 800e582 <_reclaim_reent+0x22>
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d14a      	bne.n	800e60c <_reclaim_reent+0xac>
 800e576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e578:	6819      	ldr	r1, [r3, #0]
 800e57a:	b111      	cbz	r1, 800e582 <_reclaim_reent+0x22>
 800e57c:	4620      	mov	r0, r4
 800e57e:	f7ff f8bd 	bl	800d6fc <_free_r>
 800e582:	6961      	ldr	r1, [r4, #20]
 800e584:	b111      	cbz	r1, 800e58c <_reclaim_reent+0x2c>
 800e586:	4620      	mov	r0, r4
 800e588:	f7ff f8b8 	bl	800d6fc <_free_r>
 800e58c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e58e:	b111      	cbz	r1, 800e596 <_reclaim_reent+0x36>
 800e590:	4620      	mov	r0, r4
 800e592:	f7ff f8b3 	bl	800d6fc <_free_r>
 800e596:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e598:	b111      	cbz	r1, 800e5a0 <_reclaim_reent+0x40>
 800e59a:	4620      	mov	r0, r4
 800e59c:	f7ff f8ae 	bl	800d6fc <_free_r>
 800e5a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e5a2:	b111      	cbz	r1, 800e5aa <_reclaim_reent+0x4a>
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f7ff f8a9 	bl	800d6fc <_free_r>
 800e5aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e5ac:	b111      	cbz	r1, 800e5b4 <_reclaim_reent+0x54>
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f7ff f8a4 	bl	800d6fc <_free_r>
 800e5b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e5b6:	b111      	cbz	r1, 800e5be <_reclaim_reent+0x5e>
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff f89f 	bl	800d6fc <_free_r>
 800e5be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e5c0:	b111      	cbz	r1, 800e5c8 <_reclaim_reent+0x68>
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f7ff f89a 	bl	800d6fc <_free_r>
 800e5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5ca:	b111      	cbz	r1, 800e5d2 <_reclaim_reent+0x72>
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f7ff f895 	bl	800d6fc <_free_r>
 800e5d2:	69a3      	ldr	r3, [r4, #24]
 800e5d4:	b1e3      	cbz	r3, 800e610 <_reclaim_reent+0xb0>
 800e5d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5d8:	4620      	mov	r0, r4
 800e5da:	4798      	blx	r3
 800e5dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e5de:	b1b9      	cbz	r1, 800e610 <_reclaim_reent+0xb0>
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5e6:	f7ff bfad 	b.w	800e544 <cleanup_glue>
 800e5ea:	5949      	ldr	r1, [r1, r5]
 800e5ec:	b941      	cbnz	r1, 800e600 <_reclaim_reent+0xa0>
 800e5ee:	3504      	adds	r5, #4
 800e5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5f2:	2d80      	cmp	r5, #128	; 0x80
 800e5f4:	68d9      	ldr	r1, [r3, #12]
 800e5f6:	d1f8      	bne.n	800e5ea <_reclaim_reent+0x8a>
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f7ff f87f 	bl	800d6fc <_free_r>
 800e5fe:	e7ba      	b.n	800e576 <_reclaim_reent+0x16>
 800e600:	680e      	ldr	r6, [r1, #0]
 800e602:	4620      	mov	r0, r4
 800e604:	f7ff f87a 	bl	800d6fc <_free_r>
 800e608:	4631      	mov	r1, r6
 800e60a:	e7ef      	b.n	800e5ec <_reclaim_reent+0x8c>
 800e60c:	2500      	movs	r5, #0
 800e60e:	e7ef      	b.n	800e5f0 <_reclaim_reent+0x90>
 800e610:	bd70      	pop	{r4, r5, r6, pc}
 800e612:	bf00      	nop
 800e614:	20000030 	.word	0x20000030

0800e618 <_sbrk_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4d06      	ldr	r5, [pc, #24]	; (800e634 <_sbrk_r+0x1c>)
 800e61c:	2300      	movs	r3, #0
 800e61e:	4604      	mov	r4, r0
 800e620:	4608      	mov	r0, r1
 800e622:	602b      	str	r3, [r5, #0]
 800e624:	f7f4 fcd6 	bl	8002fd4 <_sbrk>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_sbrk_r+0x1a>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_sbrk_r+0x1a>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	2000571c 	.word	0x2000571c

0800e638 <nanf>:
 800e638:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e640 <nanf+0x8>
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	7fc00000 	.word	0x7fc00000

0800e644 <_raise_r>:
 800e644:	291f      	cmp	r1, #31
 800e646:	b538      	push	{r3, r4, r5, lr}
 800e648:	4604      	mov	r4, r0
 800e64a:	460d      	mov	r5, r1
 800e64c:	d904      	bls.n	800e658 <_raise_r+0x14>
 800e64e:	2316      	movs	r3, #22
 800e650:	6003      	str	r3, [r0, #0]
 800e652:	f04f 30ff 	mov.w	r0, #4294967295
 800e656:	bd38      	pop	{r3, r4, r5, pc}
 800e658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e65a:	b112      	cbz	r2, 800e662 <_raise_r+0x1e>
 800e65c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e660:	b94b      	cbnz	r3, 800e676 <_raise_r+0x32>
 800e662:	4620      	mov	r0, r4
 800e664:	f000 f830 	bl	800e6c8 <_getpid_r>
 800e668:	462a      	mov	r2, r5
 800e66a:	4601      	mov	r1, r0
 800e66c:	4620      	mov	r0, r4
 800e66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e672:	f000 b817 	b.w	800e6a4 <_kill_r>
 800e676:	2b01      	cmp	r3, #1
 800e678:	d00a      	beq.n	800e690 <_raise_r+0x4c>
 800e67a:	1c59      	adds	r1, r3, #1
 800e67c:	d103      	bne.n	800e686 <_raise_r+0x42>
 800e67e:	2316      	movs	r3, #22
 800e680:	6003      	str	r3, [r0, #0]
 800e682:	2001      	movs	r0, #1
 800e684:	e7e7      	b.n	800e656 <_raise_r+0x12>
 800e686:	2400      	movs	r4, #0
 800e688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e68c:	4628      	mov	r0, r5
 800e68e:	4798      	blx	r3
 800e690:	2000      	movs	r0, #0
 800e692:	e7e0      	b.n	800e656 <_raise_r+0x12>

0800e694 <raise>:
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <raise+0xc>)
 800e696:	4601      	mov	r1, r0
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	f7ff bfd3 	b.w	800e644 <_raise_r>
 800e69e:	bf00      	nop
 800e6a0:	20000030 	.word	0x20000030

0800e6a4 <_kill_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d07      	ldr	r5, [pc, #28]	; (800e6c4 <_kill_r+0x20>)
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	f7f4 fc07 	bl	8002ec4 <_kill>
 800e6b6:	1c43      	adds	r3, r0, #1
 800e6b8:	d102      	bne.n	800e6c0 <_kill_r+0x1c>
 800e6ba:	682b      	ldr	r3, [r5, #0]
 800e6bc:	b103      	cbz	r3, 800e6c0 <_kill_r+0x1c>
 800e6be:	6023      	str	r3, [r4, #0]
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	bf00      	nop
 800e6c4:	2000571c 	.word	0x2000571c

0800e6c8 <_getpid_r>:
 800e6c8:	f7f4 bbf4 	b.w	8002eb4 <_getpid>

0800e6cc <siprintf>:
 800e6cc:	b40e      	push	{r1, r2, r3}
 800e6ce:	b500      	push	{lr}
 800e6d0:	b09c      	sub	sp, #112	; 0x70
 800e6d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e6d4:	9002      	str	r0, [sp, #8]
 800e6d6:	9006      	str	r0, [sp, #24]
 800e6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6dc:	4809      	ldr	r0, [pc, #36]	; (800e704 <siprintf+0x38>)
 800e6de:	9107      	str	r1, [sp, #28]
 800e6e0:	9104      	str	r1, [sp, #16]
 800e6e2:	4909      	ldr	r1, [pc, #36]	; (800e708 <siprintf+0x3c>)
 800e6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e8:	9105      	str	r1, [sp, #20]
 800e6ea:	6800      	ldr	r0, [r0, #0]
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	a902      	add	r1, sp, #8
 800e6f0:	f003 f83e 	bl	8011770 <_svfiprintf_r>
 800e6f4:	9b02      	ldr	r3, [sp, #8]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	701a      	strb	r2, [r3, #0]
 800e6fa:	b01c      	add	sp, #112	; 0x70
 800e6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e700:	b003      	add	sp, #12
 800e702:	4770      	bx	lr
 800e704:	20000030 	.word	0x20000030
 800e708:	ffff0208 	.word	0xffff0208

0800e70c <siscanf>:
 800e70c:	b40e      	push	{r1, r2, r3}
 800e70e:	b510      	push	{r4, lr}
 800e710:	b09f      	sub	sp, #124	; 0x7c
 800e712:	ac21      	add	r4, sp, #132	; 0x84
 800e714:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e718:	f854 2b04 	ldr.w	r2, [r4], #4
 800e71c:	9201      	str	r2, [sp, #4]
 800e71e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e722:	9004      	str	r0, [sp, #16]
 800e724:	9008      	str	r0, [sp, #32]
 800e726:	f7f1 fd63 	bl	80001f0 <strlen>
 800e72a:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <siscanf+0x50>)
 800e72c:	9005      	str	r0, [sp, #20]
 800e72e:	9009      	str	r0, [sp, #36]	; 0x24
 800e730:	930d      	str	r3, [sp, #52]	; 0x34
 800e732:	480b      	ldr	r0, [pc, #44]	; (800e760 <siscanf+0x54>)
 800e734:	9a01      	ldr	r2, [sp, #4]
 800e736:	6800      	ldr	r0, [r0, #0]
 800e738:	9403      	str	r4, [sp, #12]
 800e73a:	2300      	movs	r3, #0
 800e73c:	9311      	str	r3, [sp, #68]	; 0x44
 800e73e:	9316      	str	r3, [sp, #88]	; 0x58
 800e740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e744:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e748:	a904      	add	r1, sp, #16
 800e74a:	4623      	mov	r3, r4
 800e74c:	f003 f96a 	bl	8011a24 <__ssvfiscanf_r>
 800e750:	b01f      	add	sp, #124	; 0x7c
 800e752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e756:	b003      	add	sp, #12
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	0800e787 	.word	0x0800e787
 800e760:	20000030 	.word	0x20000030

0800e764 <__sread>:
 800e764:	b510      	push	{r4, lr}
 800e766:	460c      	mov	r4, r1
 800e768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e76c:	f003 fd78 	bl	8012260 <_read_r>
 800e770:	2800      	cmp	r0, #0
 800e772:	bfab      	itete	ge
 800e774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e776:	89a3      	ldrhlt	r3, [r4, #12]
 800e778:	181b      	addge	r3, r3, r0
 800e77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e77e:	bfac      	ite	ge
 800e780:	6563      	strge	r3, [r4, #84]	; 0x54
 800e782:	81a3      	strhlt	r3, [r4, #12]
 800e784:	bd10      	pop	{r4, pc}

0800e786 <__seofread>:
 800e786:	2000      	movs	r0, #0
 800e788:	4770      	bx	lr

0800e78a <__swrite>:
 800e78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78e:	461f      	mov	r7, r3
 800e790:	898b      	ldrh	r3, [r1, #12]
 800e792:	05db      	lsls	r3, r3, #23
 800e794:	4605      	mov	r5, r0
 800e796:	460c      	mov	r4, r1
 800e798:	4616      	mov	r6, r2
 800e79a:	d505      	bpl.n	800e7a8 <__swrite+0x1e>
 800e79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f002 fa68 	bl	8010c78 <_lseek_r>
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7b2:	81a3      	strh	r3, [r4, #12]
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	463b      	mov	r3, r7
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7be:	f000 bf5b 	b.w	800f678 <_write_r>

0800e7c2 <__sseek>:
 800e7c2:	b510      	push	{r4, lr}
 800e7c4:	460c      	mov	r4, r1
 800e7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ca:	f002 fa55 	bl	8010c78 <_lseek_r>
 800e7ce:	1c43      	adds	r3, r0, #1
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	bf15      	itete	ne
 800e7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7de:	81a3      	strheq	r3, [r4, #12]
 800e7e0:	bf18      	it	ne
 800e7e2:	81a3      	strhne	r3, [r4, #12]
 800e7e4:	bd10      	pop	{r4, pc}

0800e7e6 <__sclose>:
 800e7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ea:	f000 bf75 	b.w	800f6d8 <_close_r>

0800e7ee <strncmp>:
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	b16a      	cbz	r2, 800e80e <strncmp+0x20>
 800e7f2:	3901      	subs	r1, #1
 800e7f4:	1884      	adds	r4, r0, r2
 800e7f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e7fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d103      	bne.n	800e80a <strncmp+0x1c>
 800e802:	42a0      	cmp	r0, r4
 800e804:	d001      	beq.n	800e80a <strncmp+0x1c>
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1f5      	bne.n	800e7f6 <strncmp+0x8>
 800e80a:	1a98      	subs	r0, r3, r2
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	4610      	mov	r0, r2
 800e810:	e7fc      	b.n	800e80c <strncmp+0x1e>

0800e812 <sulp>:
 800e812:	b570      	push	{r4, r5, r6, lr}
 800e814:	4604      	mov	r4, r0
 800e816:	460d      	mov	r5, r1
 800e818:	ec45 4b10 	vmov	d0, r4, r5
 800e81c:	4616      	mov	r6, r2
 800e81e:	f002 fdc7 	bl	80113b0 <__ulp>
 800e822:	ec51 0b10 	vmov	r0, r1, d0
 800e826:	b17e      	cbz	r6, 800e848 <sulp+0x36>
 800e828:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e82c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e830:	2b00      	cmp	r3, #0
 800e832:	dd09      	ble.n	800e848 <sulp+0x36>
 800e834:	051b      	lsls	r3, r3, #20
 800e836:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e83a:	2400      	movs	r4, #0
 800e83c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e840:	4622      	mov	r2, r4
 800e842:	462b      	mov	r3, r5
 800e844:	f7f1 fee8 	bl	8000618 <__aeabi_dmul>
 800e848:	bd70      	pop	{r4, r5, r6, pc}
 800e84a:	0000      	movs	r0, r0
 800e84c:	0000      	movs	r0, r0
	...

0800e850 <_strtod_l>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	b0a3      	sub	sp, #140	; 0x8c
 800e856:	461f      	mov	r7, r3
 800e858:	2300      	movs	r3, #0
 800e85a:	931e      	str	r3, [sp, #120]	; 0x78
 800e85c:	4ba4      	ldr	r3, [pc, #656]	; (800eaf0 <_strtod_l+0x2a0>)
 800e85e:	9219      	str	r2, [sp, #100]	; 0x64
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	9307      	str	r3, [sp, #28]
 800e864:	4604      	mov	r4, r0
 800e866:	4618      	mov	r0, r3
 800e868:	4688      	mov	r8, r1
 800e86a:	f7f1 fcc1 	bl	80001f0 <strlen>
 800e86e:	f04f 0a00 	mov.w	sl, #0
 800e872:	4605      	mov	r5, r0
 800e874:	f04f 0b00 	mov.w	fp, #0
 800e878:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e87c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	2a2b      	cmp	r2, #43	; 0x2b
 800e882:	d04c      	beq.n	800e91e <_strtod_l+0xce>
 800e884:	d839      	bhi.n	800e8fa <_strtod_l+0xaa>
 800e886:	2a0d      	cmp	r2, #13
 800e888:	d832      	bhi.n	800e8f0 <_strtod_l+0xa0>
 800e88a:	2a08      	cmp	r2, #8
 800e88c:	d832      	bhi.n	800e8f4 <_strtod_l+0xa4>
 800e88e:	2a00      	cmp	r2, #0
 800e890:	d03c      	beq.n	800e90c <_strtod_l+0xbc>
 800e892:	2300      	movs	r3, #0
 800e894:	930e      	str	r3, [sp, #56]	; 0x38
 800e896:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e898:	7833      	ldrb	r3, [r6, #0]
 800e89a:	2b30      	cmp	r3, #48	; 0x30
 800e89c:	f040 80b4 	bne.w	800ea08 <_strtod_l+0x1b8>
 800e8a0:	7873      	ldrb	r3, [r6, #1]
 800e8a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e8a6:	2b58      	cmp	r3, #88	; 0x58
 800e8a8:	d16c      	bne.n	800e984 <_strtod_l+0x134>
 800e8aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	ab1e      	add	r3, sp, #120	; 0x78
 800e8b0:	9702      	str	r7, [sp, #8]
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	4a8f      	ldr	r2, [pc, #572]	; (800eaf4 <_strtod_l+0x2a4>)
 800e8b6:	ab1f      	add	r3, sp, #124	; 0x7c
 800e8b8:	a91d      	add	r1, sp, #116	; 0x74
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f001 fed0 	bl	8010660 <__gethex>
 800e8c0:	f010 0707 	ands.w	r7, r0, #7
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	d005      	beq.n	800e8d4 <_strtod_l+0x84>
 800e8c8:	2f06      	cmp	r7, #6
 800e8ca:	d12a      	bne.n	800e922 <_strtod_l+0xd2>
 800e8cc:	3601      	adds	r6, #1
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	961d      	str	r6, [sp, #116]	; 0x74
 800e8d2:	930e      	str	r3, [sp, #56]	; 0x38
 800e8d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f040 8596 	bne.w	800f408 <_strtod_l+0xbb8>
 800e8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8de:	b1db      	cbz	r3, 800e918 <_strtod_l+0xc8>
 800e8e0:	4652      	mov	r2, sl
 800e8e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e8e6:	ec43 2b10 	vmov	d0, r2, r3
 800e8ea:	b023      	add	sp, #140	; 0x8c
 800e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f0:	2a20      	cmp	r2, #32
 800e8f2:	d1ce      	bne.n	800e892 <_strtod_l+0x42>
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	931d      	str	r3, [sp, #116]	; 0x74
 800e8f8:	e7c0      	b.n	800e87c <_strtod_l+0x2c>
 800e8fa:	2a2d      	cmp	r2, #45	; 0x2d
 800e8fc:	d1c9      	bne.n	800e892 <_strtod_l+0x42>
 800e8fe:	2201      	movs	r2, #1
 800e900:	920e      	str	r2, [sp, #56]	; 0x38
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	921d      	str	r2, [sp, #116]	; 0x74
 800e906:	785b      	ldrb	r3, [r3, #1]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1c4      	bne.n	800e896 <_strtod_l+0x46>
 800e90c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e90e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e912:	2b00      	cmp	r3, #0
 800e914:	f040 8576 	bne.w	800f404 <_strtod_l+0xbb4>
 800e918:	4652      	mov	r2, sl
 800e91a:	465b      	mov	r3, fp
 800e91c:	e7e3      	b.n	800e8e6 <_strtod_l+0x96>
 800e91e:	2200      	movs	r2, #0
 800e920:	e7ee      	b.n	800e900 <_strtod_l+0xb0>
 800e922:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e924:	b13a      	cbz	r2, 800e936 <_strtod_l+0xe6>
 800e926:	2135      	movs	r1, #53	; 0x35
 800e928:	a820      	add	r0, sp, #128	; 0x80
 800e92a:	f002 fe4c 	bl	80115c6 <__copybits>
 800e92e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e930:	4620      	mov	r0, r4
 800e932:	f002 fa11 	bl	8010d58 <_Bfree>
 800e936:	3f01      	subs	r7, #1
 800e938:	2f05      	cmp	r7, #5
 800e93a:	d807      	bhi.n	800e94c <_strtod_l+0xfc>
 800e93c:	e8df f007 	tbb	[pc, r7]
 800e940:	1d180b0e 	.word	0x1d180b0e
 800e944:	030e      	.short	0x030e
 800e946:	f04f 0b00 	mov.w	fp, #0
 800e94a:	46da      	mov	sl, fp
 800e94c:	0728      	lsls	r0, r5, #28
 800e94e:	d5c1      	bpl.n	800e8d4 <_strtod_l+0x84>
 800e950:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e954:	e7be      	b.n	800e8d4 <_strtod_l+0x84>
 800e956:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e95a:	e7f7      	b.n	800e94c <_strtod_l+0xfc>
 800e95c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e960:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e962:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e966:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e96a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e96e:	e7ed      	b.n	800e94c <_strtod_l+0xfc>
 800e970:	f8df b184 	ldr.w	fp, [pc, #388]	; 800eaf8 <_strtod_l+0x2a8>
 800e974:	f04f 0a00 	mov.w	sl, #0
 800e978:	e7e8      	b.n	800e94c <_strtod_l+0xfc>
 800e97a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e97e:	f04f 3aff 	mov.w	sl, #4294967295
 800e982:	e7e3      	b.n	800e94c <_strtod_l+0xfc>
 800e984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	921d      	str	r2, [sp, #116]	; 0x74
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	2b30      	cmp	r3, #48	; 0x30
 800e98e:	d0f9      	beq.n	800e984 <_strtod_l+0x134>
 800e990:	2b00      	cmp	r3, #0
 800e992:	d09f      	beq.n	800e8d4 <_strtod_l+0x84>
 800e994:	2301      	movs	r3, #1
 800e996:	f04f 0900 	mov.w	r9, #0
 800e99a:	9304      	str	r3, [sp, #16]
 800e99c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e99e:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e9a4:	464f      	mov	r7, r9
 800e9a6:	220a      	movs	r2, #10
 800e9a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e9aa:	7806      	ldrb	r6, [r0, #0]
 800e9ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e9b0:	b2d9      	uxtb	r1, r3
 800e9b2:	2909      	cmp	r1, #9
 800e9b4:	d92a      	bls.n	800ea0c <_strtod_l+0x1bc>
 800e9b6:	9907      	ldr	r1, [sp, #28]
 800e9b8:	462a      	mov	r2, r5
 800e9ba:	f7ff ff18 	bl	800e7ee <strncmp>
 800e9be:	b398      	cbz	r0, 800ea28 <_strtod_l+0x1d8>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	4633      	mov	r3, r6
 800e9c4:	463d      	mov	r5, r7
 800e9c6:	9007      	str	r0, [sp, #28]
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	2b65      	cmp	r3, #101	; 0x65
 800e9cc:	d001      	beq.n	800e9d2 <_strtod_l+0x182>
 800e9ce:	2b45      	cmp	r3, #69	; 0x45
 800e9d0:	d118      	bne.n	800ea04 <_strtod_l+0x1b4>
 800e9d2:	b91d      	cbnz	r5, 800e9dc <_strtod_l+0x18c>
 800e9d4:	9b04      	ldr	r3, [sp, #16]
 800e9d6:	4303      	orrs	r3, r0
 800e9d8:	d098      	beq.n	800e90c <_strtod_l+0xbc>
 800e9da:	2500      	movs	r5, #0
 800e9dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e9e0:	f108 0301 	add.w	r3, r8, #1
 800e9e4:	931d      	str	r3, [sp, #116]	; 0x74
 800e9e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e9ea:	2b2b      	cmp	r3, #43	; 0x2b
 800e9ec:	d075      	beq.n	800eada <_strtod_l+0x28a>
 800e9ee:	2b2d      	cmp	r3, #45	; 0x2d
 800e9f0:	d07b      	beq.n	800eaea <_strtod_l+0x29a>
 800e9f2:	f04f 0c00 	mov.w	ip, #0
 800e9f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e9fa:	2909      	cmp	r1, #9
 800e9fc:	f240 8082 	bls.w	800eb04 <_strtod_l+0x2b4>
 800ea00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ea04:	2600      	movs	r6, #0
 800ea06:	e09d      	b.n	800eb44 <_strtod_l+0x2f4>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e7c4      	b.n	800e996 <_strtod_l+0x146>
 800ea0c:	2f08      	cmp	r7, #8
 800ea0e:	bfd8      	it	le
 800ea10:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ea12:	f100 0001 	add.w	r0, r0, #1
 800ea16:	bfda      	itte	le
 800ea18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea1c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ea1e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ea22:	3701      	adds	r7, #1
 800ea24:	901d      	str	r0, [sp, #116]	; 0x74
 800ea26:	e7bf      	b.n	800e9a8 <_strtod_l+0x158>
 800ea28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea2a:	195a      	adds	r2, r3, r5
 800ea2c:	921d      	str	r2, [sp, #116]	; 0x74
 800ea2e:	5d5b      	ldrb	r3, [r3, r5]
 800ea30:	2f00      	cmp	r7, #0
 800ea32:	d037      	beq.n	800eaa4 <_strtod_l+0x254>
 800ea34:	9007      	str	r0, [sp, #28]
 800ea36:	463d      	mov	r5, r7
 800ea38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ea3c:	2a09      	cmp	r2, #9
 800ea3e:	d912      	bls.n	800ea66 <_strtod_l+0x216>
 800ea40:	2201      	movs	r2, #1
 800ea42:	e7c2      	b.n	800e9ca <_strtod_l+0x17a>
 800ea44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	921d      	str	r2, [sp, #116]	; 0x74
 800ea4a:	785b      	ldrb	r3, [r3, #1]
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	2b30      	cmp	r3, #48	; 0x30
 800ea50:	d0f8      	beq.n	800ea44 <_strtod_l+0x1f4>
 800ea52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ea56:	2a08      	cmp	r2, #8
 800ea58:	f200 84db 	bhi.w	800f412 <_strtod_l+0xbc2>
 800ea5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ea5e:	9007      	str	r0, [sp, #28]
 800ea60:	2000      	movs	r0, #0
 800ea62:	920a      	str	r2, [sp, #40]	; 0x28
 800ea64:	4605      	mov	r5, r0
 800ea66:	3b30      	subs	r3, #48	; 0x30
 800ea68:	f100 0201 	add.w	r2, r0, #1
 800ea6c:	d014      	beq.n	800ea98 <_strtod_l+0x248>
 800ea6e:	9907      	ldr	r1, [sp, #28]
 800ea70:	4411      	add	r1, r2
 800ea72:	9107      	str	r1, [sp, #28]
 800ea74:	462a      	mov	r2, r5
 800ea76:	eb00 0e05 	add.w	lr, r0, r5
 800ea7a:	210a      	movs	r1, #10
 800ea7c:	4572      	cmp	r2, lr
 800ea7e:	d113      	bne.n	800eaa8 <_strtod_l+0x258>
 800ea80:	182a      	adds	r2, r5, r0
 800ea82:	2a08      	cmp	r2, #8
 800ea84:	f105 0501 	add.w	r5, r5, #1
 800ea88:	4405      	add	r5, r0
 800ea8a:	dc1c      	bgt.n	800eac6 <_strtod_l+0x276>
 800ea8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea8e:	220a      	movs	r2, #10
 800ea90:	fb02 3301 	mla	r3, r2, r1, r3
 800ea94:	9309      	str	r3, [sp, #36]	; 0x24
 800ea96:	2200      	movs	r2, #0
 800ea98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea9a:	1c59      	adds	r1, r3, #1
 800ea9c:	911d      	str	r1, [sp, #116]	; 0x74
 800ea9e:	785b      	ldrb	r3, [r3, #1]
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	e7c9      	b.n	800ea38 <_strtod_l+0x1e8>
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	e7d2      	b.n	800ea4e <_strtod_l+0x1fe>
 800eaa8:	2a08      	cmp	r2, #8
 800eaaa:	dc04      	bgt.n	800eab6 <_strtod_l+0x266>
 800eaac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eaae:	434e      	muls	r6, r1
 800eab0:	9609      	str	r6, [sp, #36]	; 0x24
 800eab2:	3201      	adds	r2, #1
 800eab4:	e7e2      	b.n	800ea7c <_strtod_l+0x22c>
 800eab6:	f102 0c01 	add.w	ip, r2, #1
 800eaba:	f1bc 0f10 	cmp.w	ip, #16
 800eabe:	bfd8      	it	le
 800eac0:	fb01 f909 	mulle.w	r9, r1, r9
 800eac4:	e7f5      	b.n	800eab2 <_strtod_l+0x262>
 800eac6:	2d10      	cmp	r5, #16
 800eac8:	bfdc      	itt	le
 800eaca:	220a      	movle	r2, #10
 800eacc:	fb02 3909 	mlale	r9, r2, r9, r3
 800ead0:	e7e1      	b.n	800ea96 <_strtod_l+0x246>
 800ead2:	2300      	movs	r3, #0
 800ead4:	9307      	str	r3, [sp, #28]
 800ead6:	2201      	movs	r2, #1
 800ead8:	e77c      	b.n	800e9d4 <_strtod_l+0x184>
 800eada:	f04f 0c00 	mov.w	ip, #0
 800eade:	f108 0302 	add.w	r3, r8, #2
 800eae2:	931d      	str	r3, [sp, #116]	; 0x74
 800eae4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eae8:	e785      	b.n	800e9f6 <_strtod_l+0x1a6>
 800eaea:	f04f 0c01 	mov.w	ip, #1
 800eaee:	e7f6      	b.n	800eade <_strtod_l+0x28e>
 800eaf0:	08012eec 	.word	0x08012eec
 800eaf4:	08012c60 	.word	0x08012c60
 800eaf8:	7ff00000 	.word	0x7ff00000
 800eafc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eafe:	1c59      	adds	r1, r3, #1
 800eb00:	911d      	str	r1, [sp, #116]	; 0x74
 800eb02:	785b      	ldrb	r3, [r3, #1]
 800eb04:	2b30      	cmp	r3, #48	; 0x30
 800eb06:	d0f9      	beq.n	800eafc <_strtod_l+0x2ac>
 800eb08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800eb0c:	2908      	cmp	r1, #8
 800eb0e:	f63f af79 	bhi.w	800ea04 <_strtod_l+0x1b4>
 800eb12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800eb16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb18:	9308      	str	r3, [sp, #32]
 800eb1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb1c:	1c59      	adds	r1, r3, #1
 800eb1e:	911d      	str	r1, [sp, #116]	; 0x74
 800eb20:	785b      	ldrb	r3, [r3, #1]
 800eb22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800eb26:	2e09      	cmp	r6, #9
 800eb28:	d937      	bls.n	800eb9a <_strtod_l+0x34a>
 800eb2a:	9e08      	ldr	r6, [sp, #32]
 800eb2c:	1b89      	subs	r1, r1, r6
 800eb2e:	2908      	cmp	r1, #8
 800eb30:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800eb34:	dc02      	bgt.n	800eb3c <_strtod_l+0x2ec>
 800eb36:	4576      	cmp	r6, lr
 800eb38:	bfa8      	it	ge
 800eb3a:	4676      	movge	r6, lr
 800eb3c:	f1bc 0f00 	cmp.w	ip, #0
 800eb40:	d000      	beq.n	800eb44 <_strtod_l+0x2f4>
 800eb42:	4276      	negs	r6, r6
 800eb44:	2d00      	cmp	r5, #0
 800eb46:	d14f      	bne.n	800ebe8 <_strtod_l+0x398>
 800eb48:	9904      	ldr	r1, [sp, #16]
 800eb4a:	4301      	orrs	r1, r0
 800eb4c:	f47f aec2 	bne.w	800e8d4 <_strtod_l+0x84>
 800eb50:	2a00      	cmp	r2, #0
 800eb52:	f47f aedb 	bne.w	800e90c <_strtod_l+0xbc>
 800eb56:	2b69      	cmp	r3, #105	; 0x69
 800eb58:	d027      	beq.n	800ebaa <_strtod_l+0x35a>
 800eb5a:	dc24      	bgt.n	800eba6 <_strtod_l+0x356>
 800eb5c:	2b49      	cmp	r3, #73	; 0x49
 800eb5e:	d024      	beq.n	800ebaa <_strtod_l+0x35a>
 800eb60:	2b4e      	cmp	r3, #78	; 0x4e
 800eb62:	f47f aed3 	bne.w	800e90c <_strtod_l+0xbc>
 800eb66:	499e      	ldr	r1, [pc, #632]	; (800ede0 <_strtod_l+0x590>)
 800eb68:	a81d      	add	r0, sp, #116	; 0x74
 800eb6a:	f001 ffd1 	bl	8010b10 <__match>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	f43f aecc 	beq.w	800e90c <_strtod_l+0xbc>
 800eb74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b28      	cmp	r3, #40	; 0x28
 800eb7a:	d12d      	bne.n	800ebd8 <_strtod_l+0x388>
 800eb7c:	4999      	ldr	r1, [pc, #612]	; (800ede4 <_strtod_l+0x594>)
 800eb7e:	aa20      	add	r2, sp, #128	; 0x80
 800eb80:	a81d      	add	r0, sp, #116	; 0x74
 800eb82:	f001 ffd9 	bl	8010b38 <__hexnan>
 800eb86:	2805      	cmp	r0, #5
 800eb88:	d126      	bne.n	800ebd8 <_strtod_l+0x388>
 800eb8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800eb90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eb94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eb98:	e69c      	b.n	800e8d4 <_strtod_l+0x84>
 800eb9a:	210a      	movs	r1, #10
 800eb9c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800eba0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eba4:	e7b9      	b.n	800eb1a <_strtod_l+0x2ca>
 800eba6:	2b6e      	cmp	r3, #110	; 0x6e
 800eba8:	e7db      	b.n	800eb62 <_strtod_l+0x312>
 800ebaa:	498f      	ldr	r1, [pc, #572]	; (800ede8 <_strtod_l+0x598>)
 800ebac:	a81d      	add	r0, sp, #116	; 0x74
 800ebae:	f001 ffaf 	bl	8010b10 <__match>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f aeaa 	beq.w	800e90c <_strtod_l+0xbc>
 800ebb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebba:	498c      	ldr	r1, [pc, #560]	; (800edec <_strtod_l+0x59c>)
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	a81d      	add	r0, sp, #116	; 0x74
 800ebc0:	931d      	str	r3, [sp, #116]	; 0x74
 800ebc2:	f001 ffa5 	bl	8010b10 <__match>
 800ebc6:	b910      	cbnz	r0, 800ebce <_strtod_l+0x37e>
 800ebc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebca:	3301      	adds	r3, #1
 800ebcc:	931d      	str	r3, [sp, #116]	; 0x74
 800ebce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800edfc <_strtod_l+0x5ac>
 800ebd2:	f04f 0a00 	mov.w	sl, #0
 800ebd6:	e67d      	b.n	800e8d4 <_strtod_l+0x84>
 800ebd8:	4885      	ldr	r0, [pc, #532]	; (800edf0 <_strtod_l+0x5a0>)
 800ebda:	f003 fb55 	bl	8012288 <nan>
 800ebde:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ebe2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ebe6:	e675      	b.n	800e8d4 <_strtod_l+0x84>
 800ebe8:	9b07      	ldr	r3, [sp, #28]
 800ebea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebec:	1af3      	subs	r3, r6, r3
 800ebee:	2f00      	cmp	r7, #0
 800ebf0:	bf08      	it	eq
 800ebf2:	462f      	moveq	r7, r5
 800ebf4:	2d10      	cmp	r5, #16
 800ebf6:	9308      	str	r3, [sp, #32]
 800ebf8:	46a8      	mov	r8, r5
 800ebfa:	bfa8      	it	ge
 800ebfc:	f04f 0810 	movge.w	r8, #16
 800ec00:	f7f1 fc90 	bl	8000524 <__aeabi_ui2d>
 800ec04:	2d09      	cmp	r5, #9
 800ec06:	4682      	mov	sl, r0
 800ec08:	468b      	mov	fp, r1
 800ec0a:	dd13      	ble.n	800ec34 <_strtod_l+0x3e4>
 800ec0c:	4b79      	ldr	r3, [pc, #484]	; (800edf4 <_strtod_l+0x5a4>)
 800ec0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ec12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ec16:	f7f1 fcff 	bl	8000618 <__aeabi_dmul>
 800ec1a:	4682      	mov	sl, r0
 800ec1c:	4648      	mov	r0, r9
 800ec1e:	468b      	mov	fp, r1
 800ec20:	f7f1 fc80 	bl	8000524 <__aeabi_ui2d>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4650      	mov	r0, sl
 800ec2a:	4659      	mov	r1, fp
 800ec2c:	f7f1 fb3e 	bl	80002ac <__adddf3>
 800ec30:	4682      	mov	sl, r0
 800ec32:	468b      	mov	fp, r1
 800ec34:	2d0f      	cmp	r5, #15
 800ec36:	dc38      	bgt.n	800ecaa <_strtod_l+0x45a>
 800ec38:	9b08      	ldr	r3, [sp, #32]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f43f ae4a 	beq.w	800e8d4 <_strtod_l+0x84>
 800ec40:	dd24      	ble.n	800ec8c <_strtod_l+0x43c>
 800ec42:	2b16      	cmp	r3, #22
 800ec44:	dc0b      	bgt.n	800ec5e <_strtod_l+0x40e>
 800ec46:	4d6b      	ldr	r5, [pc, #428]	; (800edf4 <_strtod_l+0x5a4>)
 800ec48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ec4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ec50:	4652      	mov	r2, sl
 800ec52:	465b      	mov	r3, fp
 800ec54:	f7f1 fce0 	bl	8000618 <__aeabi_dmul>
 800ec58:	4682      	mov	sl, r0
 800ec5a:	468b      	mov	fp, r1
 800ec5c:	e63a      	b.n	800e8d4 <_strtod_l+0x84>
 800ec5e:	9a08      	ldr	r2, [sp, #32]
 800ec60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ec64:	4293      	cmp	r3, r2
 800ec66:	db20      	blt.n	800ecaa <_strtod_l+0x45a>
 800ec68:	4c62      	ldr	r4, [pc, #392]	; (800edf4 <_strtod_l+0x5a4>)
 800ec6a:	f1c5 050f 	rsb	r5, r5, #15
 800ec6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ec72:	4652      	mov	r2, sl
 800ec74:	465b      	mov	r3, fp
 800ec76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec7a:	f7f1 fccd 	bl	8000618 <__aeabi_dmul>
 800ec7e:	9b08      	ldr	r3, [sp, #32]
 800ec80:	1b5d      	subs	r5, r3, r5
 800ec82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ec86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec8a:	e7e3      	b.n	800ec54 <_strtod_l+0x404>
 800ec8c:	9b08      	ldr	r3, [sp, #32]
 800ec8e:	3316      	adds	r3, #22
 800ec90:	db0b      	blt.n	800ecaa <_strtod_l+0x45a>
 800ec92:	9b07      	ldr	r3, [sp, #28]
 800ec94:	4a57      	ldr	r2, [pc, #348]	; (800edf4 <_strtod_l+0x5a4>)
 800ec96:	1b9e      	subs	r6, r3, r6
 800ec98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ec9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eca0:	4650      	mov	r0, sl
 800eca2:	4659      	mov	r1, fp
 800eca4:	f7f1 fde2 	bl	800086c <__aeabi_ddiv>
 800eca8:	e7d6      	b.n	800ec58 <_strtod_l+0x408>
 800ecaa:	9b08      	ldr	r3, [sp, #32]
 800ecac:	eba5 0808 	sub.w	r8, r5, r8
 800ecb0:	4498      	add	r8, r3
 800ecb2:	f1b8 0f00 	cmp.w	r8, #0
 800ecb6:	dd71      	ble.n	800ed9c <_strtod_l+0x54c>
 800ecb8:	f018 030f 	ands.w	r3, r8, #15
 800ecbc:	d00a      	beq.n	800ecd4 <_strtod_l+0x484>
 800ecbe:	494d      	ldr	r1, [pc, #308]	; (800edf4 <_strtod_l+0x5a4>)
 800ecc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecc4:	4652      	mov	r2, sl
 800ecc6:	465b      	mov	r3, fp
 800ecc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eccc:	f7f1 fca4 	bl	8000618 <__aeabi_dmul>
 800ecd0:	4682      	mov	sl, r0
 800ecd2:	468b      	mov	fp, r1
 800ecd4:	f038 080f 	bics.w	r8, r8, #15
 800ecd8:	d04d      	beq.n	800ed76 <_strtod_l+0x526>
 800ecda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ecde:	dd22      	ble.n	800ed26 <_strtod_l+0x4d6>
 800ece0:	2500      	movs	r5, #0
 800ece2:	462e      	mov	r6, r5
 800ece4:	9509      	str	r5, [sp, #36]	; 0x24
 800ece6:	9507      	str	r5, [sp, #28]
 800ece8:	2322      	movs	r3, #34	; 0x22
 800ecea:	f8df b110 	ldr.w	fp, [pc, #272]	; 800edfc <_strtod_l+0x5ac>
 800ecee:	6023      	str	r3, [r4, #0]
 800ecf0:	f04f 0a00 	mov.w	sl, #0
 800ecf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f43f adec 	beq.w	800e8d4 <_strtod_l+0x84>
 800ecfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f002 f82a 	bl	8010d58 <_Bfree>
 800ed04:	9907      	ldr	r1, [sp, #28]
 800ed06:	4620      	mov	r0, r4
 800ed08:	f002 f826 	bl	8010d58 <_Bfree>
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f002 f822 	bl	8010d58 <_Bfree>
 800ed14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed16:	4620      	mov	r0, r4
 800ed18:	f002 f81e 	bl	8010d58 <_Bfree>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f002 f81a 	bl	8010d58 <_Bfree>
 800ed24:	e5d6      	b.n	800e8d4 <_strtod_l+0x84>
 800ed26:	2300      	movs	r3, #0
 800ed28:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	4659      	mov	r1, fp
 800ed30:	4699      	mov	r9, r3
 800ed32:	f1b8 0f01 	cmp.w	r8, #1
 800ed36:	dc21      	bgt.n	800ed7c <_strtod_l+0x52c>
 800ed38:	b10b      	cbz	r3, 800ed3e <_strtod_l+0x4ee>
 800ed3a:	4682      	mov	sl, r0
 800ed3c:	468b      	mov	fp, r1
 800ed3e:	4b2e      	ldr	r3, [pc, #184]	; (800edf8 <_strtod_l+0x5a8>)
 800ed40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ed44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ed48:	4652      	mov	r2, sl
 800ed4a:	465b      	mov	r3, fp
 800ed4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ed50:	f7f1 fc62 	bl	8000618 <__aeabi_dmul>
 800ed54:	4b29      	ldr	r3, [pc, #164]	; (800edfc <_strtod_l+0x5ac>)
 800ed56:	460a      	mov	r2, r1
 800ed58:	400b      	ands	r3, r1
 800ed5a:	4929      	ldr	r1, [pc, #164]	; (800ee00 <_strtod_l+0x5b0>)
 800ed5c:	428b      	cmp	r3, r1
 800ed5e:	4682      	mov	sl, r0
 800ed60:	d8be      	bhi.n	800ece0 <_strtod_l+0x490>
 800ed62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ed66:	428b      	cmp	r3, r1
 800ed68:	bf86      	itte	hi
 800ed6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ee04 <_strtod_l+0x5b4>
 800ed6e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ed76:	2300      	movs	r3, #0
 800ed78:	9304      	str	r3, [sp, #16]
 800ed7a:	e081      	b.n	800ee80 <_strtod_l+0x630>
 800ed7c:	f018 0f01 	tst.w	r8, #1
 800ed80:	d007      	beq.n	800ed92 <_strtod_l+0x542>
 800ed82:	4b1d      	ldr	r3, [pc, #116]	; (800edf8 <_strtod_l+0x5a8>)
 800ed84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	f7f1 fc44 	bl	8000618 <__aeabi_dmul>
 800ed90:	2301      	movs	r3, #1
 800ed92:	f109 0901 	add.w	r9, r9, #1
 800ed96:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed9a:	e7ca      	b.n	800ed32 <_strtod_l+0x4e2>
 800ed9c:	d0eb      	beq.n	800ed76 <_strtod_l+0x526>
 800ed9e:	f1c8 0800 	rsb	r8, r8, #0
 800eda2:	f018 020f 	ands.w	r2, r8, #15
 800eda6:	d00a      	beq.n	800edbe <_strtod_l+0x56e>
 800eda8:	4b12      	ldr	r3, [pc, #72]	; (800edf4 <_strtod_l+0x5a4>)
 800edaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edae:	4650      	mov	r0, sl
 800edb0:	4659      	mov	r1, fp
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	f7f1 fd59 	bl	800086c <__aeabi_ddiv>
 800edba:	4682      	mov	sl, r0
 800edbc:	468b      	mov	fp, r1
 800edbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 800edc2:	d0d8      	beq.n	800ed76 <_strtod_l+0x526>
 800edc4:	f1b8 0f1f 	cmp.w	r8, #31
 800edc8:	dd1e      	ble.n	800ee08 <_strtod_l+0x5b8>
 800edca:	2500      	movs	r5, #0
 800edcc:	462e      	mov	r6, r5
 800edce:	9509      	str	r5, [sp, #36]	; 0x24
 800edd0:	9507      	str	r5, [sp, #28]
 800edd2:	2322      	movs	r3, #34	; 0x22
 800edd4:	f04f 0a00 	mov.w	sl, #0
 800edd8:	f04f 0b00 	mov.w	fp, #0
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	e789      	b.n	800ecf4 <_strtod_l+0x4a4>
 800ede0:	08012c35 	.word	0x08012c35
 800ede4:	08012c74 	.word	0x08012c74
 800ede8:	08012c2d 	.word	0x08012c2d
 800edec:	08012df0 	.word	0x08012df0
 800edf0:	08012ceb 	.word	0x08012ceb
 800edf4:	08012f88 	.word	0x08012f88
 800edf8:	08012f60 	.word	0x08012f60
 800edfc:	7ff00000 	.word	0x7ff00000
 800ee00:	7ca00000 	.word	0x7ca00000
 800ee04:	7fefffff 	.word	0x7fefffff
 800ee08:	f018 0310 	ands.w	r3, r8, #16
 800ee0c:	bf18      	it	ne
 800ee0e:	236a      	movne	r3, #106	; 0x6a
 800ee10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f1c8 <_strtod_l+0x978>
 800ee14:	9304      	str	r3, [sp, #16]
 800ee16:	4650      	mov	r0, sl
 800ee18:	4659      	mov	r1, fp
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f018 0f01 	tst.w	r8, #1
 800ee20:	d004      	beq.n	800ee2c <_strtod_l+0x5dc>
 800ee22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ee26:	f7f1 fbf7 	bl	8000618 <__aeabi_dmul>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ee30:	f109 0908 	add.w	r9, r9, #8
 800ee34:	d1f2      	bne.n	800ee1c <_strtod_l+0x5cc>
 800ee36:	b10b      	cbz	r3, 800ee3c <_strtod_l+0x5ec>
 800ee38:	4682      	mov	sl, r0
 800ee3a:	468b      	mov	fp, r1
 800ee3c:	9b04      	ldr	r3, [sp, #16]
 800ee3e:	b1bb      	cbz	r3, 800ee70 <_strtod_l+0x620>
 800ee40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ee44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	4659      	mov	r1, fp
 800ee4c:	dd10      	ble.n	800ee70 <_strtod_l+0x620>
 800ee4e:	2b1f      	cmp	r3, #31
 800ee50:	f340 8128 	ble.w	800f0a4 <_strtod_l+0x854>
 800ee54:	2b34      	cmp	r3, #52	; 0x34
 800ee56:	bfde      	ittt	le
 800ee58:	3b20      	suble	r3, #32
 800ee5a:	f04f 32ff 	movle.w	r2, #4294967295
 800ee5e:	fa02 f303 	lslle.w	r3, r2, r3
 800ee62:	f04f 0a00 	mov.w	sl, #0
 800ee66:	bfcc      	ite	gt
 800ee68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ee6c:	ea03 0b01 	andle.w	fp, r3, r1
 800ee70:	2200      	movs	r2, #0
 800ee72:	2300      	movs	r3, #0
 800ee74:	4650      	mov	r0, sl
 800ee76:	4659      	mov	r1, fp
 800ee78:	f7f1 fe36 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d1a4      	bne.n	800edca <_strtod_l+0x57a>
 800ee80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee86:	462b      	mov	r3, r5
 800ee88:	463a      	mov	r2, r7
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f001 ffd0 	bl	8010e30 <__s2b>
 800ee90:	9009      	str	r0, [sp, #36]	; 0x24
 800ee92:	2800      	cmp	r0, #0
 800ee94:	f43f af24 	beq.w	800ece0 <_strtod_l+0x490>
 800ee98:	9b07      	ldr	r3, [sp, #28]
 800ee9a:	1b9e      	subs	r6, r3, r6
 800ee9c:	9b08      	ldr	r3, [sp, #32]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfb4      	ite	lt
 800eea2:	4633      	movlt	r3, r6
 800eea4:	2300      	movge	r3, #0
 800eea6:	9310      	str	r3, [sp, #64]	; 0x40
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	2500      	movs	r5, #0
 800eeac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eeb0:	9318      	str	r3, [sp, #96]	; 0x60
 800eeb2:	462e      	mov	r6, r5
 800eeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	6859      	ldr	r1, [r3, #4]
 800eeba:	f001 ff0d 	bl	8010cd8 <_Balloc>
 800eebe:	9007      	str	r0, [sp, #28]
 800eec0:	2800      	cmp	r0, #0
 800eec2:	f43f af11 	beq.w	800ece8 <_strtod_l+0x498>
 800eec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec8:	691a      	ldr	r2, [r3, #16]
 800eeca:	3202      	adds	r2, #2
 800eecc:	f103 010c 	add.w	r1, r3, #12
 800eed0:	0092      	lsls	r2, r2, #2
 800eed2:	300c      	adds	r0, #12
 800eed4:	f7fe fbe2 	bl	800d69c <memcpy>
 800eed8:	ec4b ab10 	vmov	d0, sl, fp
 800eedc:	aa20      	add	r2, sp, #128	; 0x80
 800eede:	a91f      	add	r1, sp, #124	; 0x7c
 800eee0:	4620      	mov	r0, r4
 800eee2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eee6:	f002 fadf 	bl	80114a8 <__d2b>
 800eeea:	901e      	str	r0, [sp, #120]	; 0x78
 800eeec:	2800      	cmp	r0, #0
 800eeee:	f43f aefb 	beq.w	800ece8 <_strtod_l+0x498>
 800eef2:	2101      	movs	r1, #1
 800eef4:	4620      	mov	r0, r4
 800eef6:	f002 f835 	bl	8010f64 <__i2b>
 800eefa:	4606      	mov	r6, r0
 800eefc:	2800      	cmp	r0, #0
 800eefe:	f43f aef3 	beq.w	800ece8 <_strtod_l+0x498>
 800ef02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef04:	9904      	ldr	r1, [sp, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	bfab      	itete	ge
 800ef0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ef0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ef0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ef10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ef14:	bfac      	ite	ge
 800ef16:	eb03 0902 	addge.w	r9, r3, r2
 800ef1a:	1ad7      	sublt	r7, r2, r3
 800ef1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef1e:	eba3 0801 	sub.w	r8, r3, r1
 800ef22:	4490      	add	r8, r2
 800ef24:	4ba3      	ldr	r3, [pc, #652]	; (800f1b4 <_strtod_l+0x964>)
 800ef26:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef2a:	4598      	cmp	r8, r3
 800ef2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ef30:	f280 80cc 	bge.w	800f0cc <_strtod_l+0x87c>
 800ef34:	eba3 0308 	sub.w	r3, r3, r8
 800ef38:	2b1f      	cmp	r3, #31
 800ef3a:	eba2 0203 	sub.w	r2, r2, r3
 800ef3e:	f04f 0101 	mov.w	r1, #1
 800ef42:	f300 80b6 	bgt.w	800f0b2 <_strtod_l+0x862>
 800ef46:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ef50:	eb09 0802 	add.w	r8, r9, r2
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	45c1      	cmp	r9, r8
 800ef58:	4417      	add	r7, r2
 800ef5a:	441f      	add	r7, r3
 800ef5c:	464b      	mov	r3, r9
 800ef5e:	bfa8      	it	ge
 800ef60:	4643      	movge	r3, r8
 800ef62:	42bb      	cmp	r3, r7
 800ef64:	bfa8      	it	ge
 800ef66:	463b      	movge	r3, r7
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	bfc2      	ittt	gt
 800ef6c:	eba8 0803 	subgt.w	r8, r8, r3
 800ef70:	1aff      	subgt	r7, r7, r3
 800ef72:	eba9 0903 	subgt.w	r9, r9, r3
 800ef76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dd17      	ble.n	800efac <_strtod_l+0x75c>
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	461a      	mov	r2, r3
 800ef80:	4620      	mov	r0, r4
 800ef82:	f002 f8ab 	bl	80110dc <__pow5mult>
 800ef86:	4606      	mov	r6, r0
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f43f aead 	beq.w	800ece8 <_strtod_l+0x498>
 800ef8e:	4601      	mov	r1, r0
 800ef90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef92:	4620      	mov	r0, r4
 800ef94:	f001 fffc 	bl	8010f90 <__multiply>
 800ef98:	900f      	str	r0, [sp, #60]	; 0x3c
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	f43f aea4 	beq.w	800ece8 <_strtod_l+0x498>
 800efa0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800efa2:	4620      	mov	r0, r4
 800efa4:	f001 fed8 	bl	8010d58 <_Bfree>
 800efa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efaa:	931e      	str	r3, [sp, #120]	; 0x78
 800efac:	f1b8 0f00 	cmp.w	r8, #0
 800efb0:	f300 8091 	bgt.w	800f0d6 <_strtod_l+0x886>
 800efb4:	9b08      	ldr	r3, [sp, #32]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dd08      	ble.n	800efcc <_strtod_l+0x77c>
 800efba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800efbc:	9907      	ldr	r1, [sp, #28]
 800efbe:	4620      	mov	r0, r4
 800efc0:	f002 f88c 	bl	80110dc <__pow5mult>
 800efc4:	9007      	str	r0, [sp, #28]
 800efc6:	2800      	cmp	r0, #0
 800efc8:	f43f ae8e 	beq.w	800ece8 <_strtod_l+0x498>
 800efcc:	2f00      	cmp	r7, #0
 800efce:	dd08      	ble.n	800efe2 <_strtod_l+0x792>
 800efd0:	9907      	ldr	r1, [sp, #28]
 800efd2:	463a      	mov	r2, r7
 800efd4:	4620      	mov	r0, r4
 800efd6:	f002 f8db 	bl	8011190 <__lshift>
 800efda:	9007      	str	r0, [sp, #28]
 800efdc:	2800      	cmp	r0, #0
 800efde:	f43f ae83 	beq.w	800ece8 <_strtod_l+0x498>
 800efe2:	f1b9 0f00 	cmp.w	r9, #0
 800efe6:	dd08      	ble.n	800effa <_strtod_l+0x7aa>
 800efe8:	4631      	mov	r1, r6
 800efea:	464a      	mov	r2, r9
 800efec:	4620      	mov	r0, r4
 800efee:	f002 f8cf 	bl	8011190 <__lshift>
 800eff2:	4606      	mov	r6, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f43f ae77 	beq.w	800ece8 <_strtod_l+0x498>
 800effa:	9a07      	ldr	r2, [sp, #28]
 800effc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800effe:	4620      	mov	r0, r4
 800f000:	f002 f94e 	bl	80112a0 <__mdiff>
 800f004:	4605      	mov	r5, r0
 800f006:	2800      	cmp	r0, #0
 800f008:	f43f ae6e 	beq.w	800ece8 <_strtod_l+0x498>
 800f00c:	68c3      	ldr	r3, [r0, #12]
 800f00e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f010:	2300      	movs	r3, #0
 800f012:	60c3      	str	r3, [r0, #12]
 800f014:	4631      	mov	r1, r6
 800f016:	f002 f927 	bl	8011268 <__mcmp>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	da65      	bge.n	800f0ea <_strtod_l+0x89a>
 800f01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f020:	ea53 030a 	orrs.w	r3, r3, sl
 800f024:	f040 8087 	bne.w	800f136 <_strtod_l+0x8e6>
 800f028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f040 8082 	bne.w	800f136 <_strtod_l+0x8e6>
 800f032:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f036:	0d1b      	lsrs	r3, r3, #20
 800f038:	051b      	lsls	r3, r3, #20
 800f03a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f03e:	d97a      	bls.n	800f136 <_strtod_l+0x8e6>
 800f040:	696b      	ldr	r3, [r5, #20]
 800f042:	b913      	cbnz	r3, 800f04a <_strtod_l+0x7fa>
 800f044:	692b      	ldr	r3, [r5, #16]
 800f046:	2b01      	cmp	r3, #1
 800f048:	dd75      	ble.n	800f136 <_strtod_l+0x8e6>
 800f04a:	4629      	mov	r1, r5
 800f04c:	2201      	movs	r2, #1
 800f04e:	4620      	mov	r0, r4
 800f050:	f002 f89e 	bl	8011190 <__lshift>
 800f054:	4631      	mov	r1, r6
 800f056:	4605      	mov	r5, r0
 800f058:	f002 f906 	bl	8011268 <__mcmp>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	dd6a      	ble.n	800f136 <_strtod_l+0x8e6>
 800f060:	9904      	ldr	r1, [sp, #16]
 800f062:	4a55      	ldr	r2, [pc, #340]	; (800f1b8 <_strtod_l+0x968>)
 800f064:	465b      	mov	r3, fp
 800f066:	2900      	cmp	r1, #0
 800f068:	f000 8085 	beq.w	800f176 <_strtod_l+0x926>
 800f06c:	ea02 010b 	and.w	r1, r2, fp
 800f070:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f074:	dc7f      	bgt.n	800f176 <_strtod_l+0x926>
 800f076:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f07a:	f77f aeaa 	ble.w	800edd2 <_strtod_l+0x582>
 800f07e:	4a4f      	ldr	r2, [pc, #316]	; (800f1bc <_strtod_l+0x96c>)
 800f080:	2300      	movs	r3, #0
 800f082:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f086:	4650      	mov	r0, sl
 800f088:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f08c:	4659      	mov	r1, fp
 800f08e:	f7f1 fac3 	bl	8000618 <__aeabi_dmul>
 800f092:	460b      	mov	r3, r1
 800f094:	4303      	orrs	r3, r0
 800f096:	bf08      	it	eq
 800f098:	2322      	moveq	r3, #34	; 0x22
 800f09a:	4682      	mov	sl, r0
 800f09c:	468b      	mov	fp, r1
 800f09e:	bf08      	it	eq
 800f0a0:	6023      	streq	r3, [r4, #0]
 800f0a2:	e62b      	b.n	800ecfc <_strtod_l+0x4ac>
 800f0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ac:	ea03 0a0a 	and.w	sl, r3, sl
 800f0b0:	e6de      	b.n	800ee70 <_strtod_l+0x620>
 800f0b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f0b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f0ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f0be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f0c2:	fa01 f308 	lsl.w	r3, r1, r8
 800f0c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f0c8:	9111      	str	r1, [sp, #68]	; 0x44
 800f0ca:	e741      	b.n	800ef50 <_strtod_l+0x700>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	9311      	str	r3, [sp, #68]	; 0x44
 800f0d4:	e73c      	b.n	800ef50 <_strtod_l+0x700>
 800f0d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f0d8:	4642      	mov	r2, r8
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f002 f858 	bl	8011190 <__lshift>
 800f0e0:	901e      	str	r0, [sp, #120]	; 0x78
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	f47f af66 	bne.w	800efb4 <_strtod_l+0x764>
 800f0e8:	e5fe      	b.n	800ece8 <_strtod_l+0x498>
 800f0ea:	465f      	mov	r7, fp
 800f0ec:	d16e      	bne.n	800f1cc <_strtod_l+0x97c>
 800f0ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0f4:	b342      	cbz	r2, 800f148 <_strtod_l+0x8f8>
 800f0f6:	4a32      	ldr	r2, [pc, #200]	; (800f1c0 <_strtod_l+0x970>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d128      	bne.n	800f14e <_strtod_l+0x8fe>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	4650      	mov	r0, sl
 800f100:	b1eb      	cbz	r3, 800f13e <_strtod_l+0x8ee>
 800f102:	4a2d      	ldr	r2, [pc, #180]	; (800f1b8 <_strtod_l+0x968>)
 800f104:	403a      	ands	r2, r7
 800f106:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f10a:	f04f 31ff 	mov.w	r1, #4294967295
 800f10e:	d819      	bhi.n	800f144 <_strtod_l+0x8f4>
 800f110:	0d12      	lsrs	r2, r2, #20
 800f112:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f116:	fa01 f303 	lsl.w	r3, r1, r3
 800f11a:	4298      	cmp	r0, r3
 800f11c:	d117      	bne.n	800f14e <_strtod_l+0x8fe>
 800f11e:	4b29      	ldr	r3, [pc, #164]	; (800f1c4 <_strtod_l+0x974>)
 800f120:	429f      	cmp	r7, r3
 800f122:	d102      	bne.n	800f12a <_strtod_l+0x8da>
 800f124:	3001      	adds	r0, #1
 800f126:	f43f addf 	beq.w	800ece8 <_strtod_l+0x498>
 800f12a:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <_strtod_l+0x968>)
 800f12c:	403b      	ands	r3, r7
 800f12e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f132:	f04f 0a00 	mov.w	sl, #0
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1a0      	bne.n	800f07e <_strtod_l+0x82e>
 800f13c:	e5de      	b.n	800ecfc <_strtod_l+0x4ac>
 800f13e:	f04f 33ff 	mov.w	r3, #4294967295
 800f142:	e7ea      	b.n	800f11a <_strtod_l+0x8ca>
 800f144:	460b      	mov	r3, r1
 800f146:	e7e8      	b.n	800f11a <_strtod_l+0x8ca>
 800f148:	ea53 030a 	orrs.w	r3, r3, sl
 800f14c:	d088      	beq.n	800f060 <_strtod_l+0x810>
 800f14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f150:	b1db      	cbz	r3, 800f18a <_strtod_l+0x93a>
 800f152:	423b      	tst	r3, r7
 800f154:	d0ef      	beq.n	800f136 <_strtod_l+0x8e6>
 800f156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f158:	9a04      	ldr	r2, [sp, #16]
 800f15a:	4650      	mov	r0, sl
 800f15c:	4659      	mov	r1, fp
 800f15e:	b1c3      	cbz	r3, 800f192 <_strtod_l+0x942>
 800f160:	f7ff fb57 	bl	800e812 <sulp>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f16c:	f7f1 f89e 	bl	80002ac <__adddf3>
 800f170:	4682      	mov	sl, r0
 800f172:	468b      	mov	fp, r1
 800f174:	e7df      	b.n	800f136 <_strtod_l+0x8e6>
 800f176:	4013      	ands	r3, r2
 800f178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f17c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f184:	f04f 3aff 	mov.w	sl, #4294967295
 800f188:	e7d5      	b.n	800f136 <_strtod_l+0x8e6>
 800f18a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f18c:	ea13 0f0a 	tst.w	r3, sl
 800f190:	e7e0      	b.n	800f154 <_strtod_l+0x904>
 800f192:	f7ff fb3e 	bl	800e812 <sulp>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f19e:	f7f1 f883 	bl	80002a8 <__aeabi_dsub>
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4682      	mov	sl, r0
 800f1a8:	468b      	mov	fp, r1
 800f1aa:	f7f1 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d0c1      	beq.n	800f136 <_strtod_l+0x8e6>
 800f1b2:	e60e      	b.n	800edd2 <_strtod_l+0x582>
 800f1b4:	fffffc02 	.word	0xfffffc02
 800f1b8:	7ff00000 	.word	0x7ff00000
 800f1bc:	39500000 	.word	0x39500000
 800f1c0:	000fffff 	.word	0x000fffff
 800f1c4:	7fefffff 	.word	0x7fefffff
 800f1c8:	08012c88 	.word	0x08012c88
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f002 f9c6 	bl	8011560 <__ratio>
 800f1d4:	ec59 8b10 	vmov	r8, r9, d0
 800f1d8:	ee10 0a10 	vmov	r0, s0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	f7f1 fc94 	bl	8000b10 <__aeabi_dcmple>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d07c      	beq.n	800f2e6 <_strtod_l+0xa96>
 800f1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d04c      	beq.n	800f28c <_strtod_l+0xa3c>
 800f1f2:	4b95      	ldr	r3, [pc, #596]	; (800f448 <_strtod_l+0xbf8>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f1fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f448 <_strtod_l+0xbf8>
 800f1fe:	f04f 0800 	mov.w	r8, #0
 800f202:	4b92      	ldr	r3, [pc, #584]	; (800f44c <_strtod_l+0xbfc>)
 800f204:	403b      	ands	r3, r7
 800f206:	9311      	str	r3, [sp, #68]	; 0x44
 800f208:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f20a:	4b91      	ldr	r3, [pc, #580]	; (800f450 <_strtod_l+0xc00>)
 800f20c:	429a      	cmp	r2, r3
 800f20e:	f040 80b2 	bne.w	800f376 <_strtod_l+0xb26>
 800f212:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f21a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f21e:	ec4b ab10 	vmov	d0, sl, fp
 800f222:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f226:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f22a:	f002 f8c1 	bl	80113b0 <__ulp>
 800f22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f232:	ec53 2b10 	vmov	r2, r3, d0
 800f236:	f7f1 f9ef 	bl	8000618 <__aeabi_dmul>
 800f23a:	4652      	mov	r2, sl
 800f23c:	465b      	mov	r3, fp
 800f23e:	f7f1 f835 	bl	80002ac <__adddf3>
 800f242:	460b      	mov	r3, r1
 800f244:	4981      	ldr	r1, [pc, #516]	; (800f44c <_strtod_l+0xbfc>)
 800f246:	4a83      	ldr	r2, [pc, #524]	; (800f454 <_strtod_l+0xc04>)
 800f248:	4019      	ands	r1, r3
 800f24a:	4291      	cmp	r1, r2
 800f24c:	4682      	mov	sl, r0
 800f24e:	d95e      	bls.n	800f30e <_strtod_l+0xabe>
 800f250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f252:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f256:	4293      	cmp	r3, r2
 800f258:	d103      	bne.n	800f262 <_strtod_l+0xa12>
 800f25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25c:	3301      	adds	r3, #1
 800f25e:	f43f ad43 	beq.w	800ece8 <_strtod_l+0x498>
 800f262:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f460 <_strtod_l+0xc10>
 800f266:	f04f 3aff 	mov.w	sl, #4294967295
 800f26a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f26c:	4620      	mov	r0, r4
 800f26e:	f001 fd73 	bl	8010d58 <_Bfree>
 800f272:	9907      	ldr	r1, [sp, #28]
 800f274:	4620      	mov	r0, r4
 800f276:	f001 fd6f 	bl	8010d58 <_Bfree>
 800f27a:	4631      	mov	r1, r6
 800f27c:	4620      	mov	r0, r4
 800f27e:	f001 fd6b 	bl	8010d58 <_Bfree>
 800f282:	4629      	mov	r1, r5
 800f284:	4620      	mov	r0, r4
 800f286:	f001 fd67 	bl	8010d58 <_Bfree>
 800f28a:	e613      	b.n	800eeb4 <_strtod_l+0x664>
 800f28c:	f1ba 0f00 	cmp.w	sl, #0
 800f290:	d11b      	bne.n	800f2ca <_strtod_l+0xa7a>
 800f292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f296:	b9f3      	cbnz	r3, 800f2d6 <_strtod_l+0xa86>
 800f298:	4b6b      	ldr	r3, [pc, #428]	; (800f448 <_strtod_l+0xbf8>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	4640      	mov	r0, r8
 800f29e:	4649      	mov	r1, r9
 800f2a0:	f7f1 fc2c 	bl	8000afc <__aeabi_dcmplt>
 800f2a4:	b9d0      	cbnz	r0, 800f2dc <_strtod_l+0xa8c>
 800f2a6:	4640      	mov	r0, r8
 800f2a8:	4649      	mov	r1, r9
 800f2aa:	4b6b      	ldr	r3, [pc, #428]	; (800f458 <_strtod_l+0xc08>)
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f7f1 f9b3 	bl	8000618 <__aeabi_dmul>
 800f2b2:	4680      	mov	r8, r0
 800f2b4:	4689      	mov	r9, r1
 800f2b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f2ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f2be:	931b      	str	r3, [sp, #108]	; 0x6c
 800f2c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f2c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f2c8:	e79b      	b.n	800f202 <_strtod_l+0x9b2>
 800f2ca:	f1ba 0f01 	cmp.w	sl, #1
 800f2ce:	d102      	bne.n	800f2d6 <_strtod_l+0xa86>
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	f43f ad7e 	beq.w	800edd2 <_strtod_l+0x582>
 800f2d6:	4b61      	ldr	r3, [pc, #388]	; (800f45c <_strtod_l+0xc0c>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	e78c      	b.n	800f1f6 <_strtod_l+0x9a6>
 800f2dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f458 <_strtod_l+0xc08>
 800f2e0:	f04f 0800 	mov.w	r8, #0
 800f2e4:	e7e7      	b.n	800f2b6 <_strtod_l+0xa66>
 800f2e6:	4b5c      	ldr	r3, [pc, #368]	; (800f458 <_strtod_l+0xc08>)
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f7f1 f993 	bl	8000618 <__aeabi_dmul>
 800f2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2f4:	4680      	mov	r8, r0
 800f2f6:	4689      	mov	r9, r1
 800f2f8:	b933      	cbnz	r3, 800f308 <_strtod_l+0xab8>
 800f2fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2fe:	9012      	str	r0, [sp, #72]	; 0x48
 800f300:	9313      	str	r3, [sp, #76]	; 0x4c
 800f302:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f306:	e7dd      	b.n	800f2c4 <_strtod_l+0xa74>
 800f308:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f30c:	e7f9      	b.n	800f302 <_strtod_l+0xab2>
 800f30e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1a8      	bne.n	800f26a <_strtod_l+0xa1a>
 800f318:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f31c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f31e:	0d1b      	lsrs	r3, r3, #20
 800f320:	051b      	lsls	r3, r3, #20
 800f322:	429a      	cmp	r2, r3
 800f324:	d1a1      	bne.n	800f26a <_strtod_l+0xa1a>
 800f326:	4640      	mov	r0, r8
 800f328:	4649      	mov	r1, r9
 800f32a:	f7f1 fcd5 	bl	8000cd8 <__aeabi_d2lz>
 800f32e:	f7f1 f945 	bl	80005bc <__aeabi_l2d>
 800f332:	4602      	mov	r2, r0
 800f334:	460b      	mov	r3, r1
 800f336:	4640      	mov	r0, r8
 800f338:	4649      	mov	r1, r9
 800f33a:	f7f0 ffb5 	bl	80002a8 <__aeabi_dsub>
 800f33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f344:	ea43 030a 	orr.w	r3, r3, sl
 800f348:	4313      	orrs	r3, r2
 800f34a:	4680      	mov	r8, r0
 800f34c:	4689      	mov	r9, r1
 800f34e:	d053      	beq.n	800f3f8 <_strtod_l+0xba8>
 800f350:	a335      	add	r3, pc, #212	; (adr r3, 800f428 <_strtod_l+0xbd8>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f1 fbd1 	bl	8000afc <__aeabi_dcmplt>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	f47f acce 	bne.w	800ecfc <_strtod_l+0x4ac>
 800f360:	a333      	add	r3, pc, #204	; (adr r3, 800f430 <_strtod_l+0xbe0>)
 800f362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f366:	4640      	mov	r0, r8
 800f368:	4649      	mov	r1, r9
 800f36a:	f7f1 fbe5 	bl	8000b38 <__aeabi_dcmpgt>
 800f36e:	2800      	cmp	r0, #0
 800f370:	f43f af7b 	beq.w	800f26a <_strtod_l+0xa1a>
 800f374:	e4c2      	b.n	800ecfc <_strtod_l+0x4ac>
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	b333      	cbz	r3, 800f3c8 <_strtod_l+0xb78>
 800f37a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f37c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f380:	d822      	bhi.n	800f3c8 <_strtod_l+0xb78>
 800f382:	a32d      	add	r3, pc, #180	; (adr r3, 800f438 <_strtod_l+0xbe8>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	4640      	mov	r0, r8
 800f38a:	4649      	mov	r1, r9
 800f38c:	f7f1 fbc0 	bl	8000b10 <__aeabi_dcmple>
 800f390:	b1a0      	cbz	r0, 800f3bc <_strtod_l+0xb6c>
 800f392:	4649      	mov	r1, r9
 800f394:	4640      	mov	r0, r8
 800f396:	f7f1 fc17 	bl	8000bc8 <__aeabi_d2uiz>
 800f39a:	2801      	cmp	r0, #1
 800f39c:	bf38      	it	cc
 800f39e:	2001      	movcc	r0, #1
 800f3a0:	f7f1 f8c0 	bl	8000524 <__aeabi_ui2d>
 800f3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3a6:	4680      	mov	r8, r0
 800f3a8:	4689      	mov	r9, r1
 800f3aa:	bb13      	cbnz	r3, 800f3f2 <_strtod_l+0xba2>
 800f3ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3b0:	9014      	str	r0, [sp, #80]	; 0x50
 800f3b2:	9315      	str	r3, [sp, #84]	; 0x54
 800f3b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f3b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f3bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f3c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	930d      	str	r3, [sp, #52]	; 0x34
 800f3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f3d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f3d4:	f001 ffec 	bl	80113b0 <__ulp>
 800f3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3dc:	ec53 2b10 	vmov	r2, r3, d0
 800f3e0:	f7f1 f91a 	bl	8000618 <__aeabi_dmul>
 800f3e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f3e8:	f7f0 ff60 	bl	80002ac <__adddf3>
 800f3ec:	4682      	mov	sl, r0
 800f3ee:	468b      	mov	fp, r1
 800f3f0:	e78f      	b.n	800f312 <_strtod_l+0xac2>
 800f3f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f3f6:	e7dd      	b.n	800f3b4 <_strtod_l+0xb64>
 800f3f8:	a311      	add	r3, pc, #68	; (adr r3, 800f440 <_strtod_l+0xbf0>)
 800f3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fe:	f7f1 fb7d 	bl	8000afc <__aeabi_dcmplt>
 800f402:	e7b4      	b.n	800f36e <_strtod_l+0xb1e>
 800f404:	2300      	movs	r3, #0
 800f406:	930e      	str	r3, [sp, #56]	; 0x38
 800f408:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f40a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f40c:	6013      	str	r3, [r2, #0]
 800f40e:	f7ff ba65 	b.w	800e8dc <_strtod_l+0x8c>
 800f412:	2b65      	cmp	r3, #101	; 0x65
 800f414:	f43f ab5d 	beq.w	800ead2 <_strtod_l+0x282>
 800f418:	2b45      	cmp	r3, #69	; 0x45
 800f41a:	f43f ab5a 	beq.w	800ead2 <_strtod_l+0x282>
 800f41e:	2201      	movs	r2, #1
 800f420:	f7ff bb92 	b.w	800eb48 <_strtod_l+0x2f8>
 800f424:	f3af 8000 	nop.w
 800f428:	94a03595 	.word	0x94a03595
 800f42c:	3fdfffff 	.word	0x3fdfffff
 800f430:	35afe535 	.word	0x35afe535
 800f434:	3fe00000 	.word	0x3fe00000
 800f438:	ffc00000 	.word	0xffc00000
 800f43c:	41dfffff 	.word	0x41dfffff
 800f440:	94a03595 	.word	0x94a03595
 800f444:	3fcfffff 	.word	0x3fcfffff
 800f448:	3ff00000 	.word	0x3ff00000
 800f44c:	7ff00000 	.word	0x7ff00000
 800f450:	7fe00000 	.word	0x7fe00000
 800f454:	7c9fffff 	.word	0x7c9fffff
 800f458:	3fe00000 	.word	0x3fe00000
 800f45c:	bff00000 	.word	0xbff00000
 800f460:	7fefffff 	.word	0x7fefffff

0800f464 <_strtod_r>:
 800f464:	4b01      	ldr	r3, [pc, #4]	; (800f46c <_strtod_r+0x8>)
 800f466:	f7ff b9f3 	b.w	800e850 <_strtod_l>
 800f46a:	bf00      	nop
 800f46c:	20000098 	.word	0x20000098

0800f470 <_strtol_l.isra.0>:
 800f470:	2b01      	cmp	r3, #1
 800f472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f476:	d001      	beq.n	800f47c <_strtol_l.isra.0+0xc>
 800f478:	2b24      	cmp	r3, #36	; 0x24
 800f47a:	d906      	bls.n	800f48a <_strtol_l.isra.0+0x1a>
 800f47c:	f7fd ffda 	bl	800d434 <__errno>
 800f480:	2316      	movs	r3, #22
 800f482:	6003      	str	r3, [r0, #0]
 800f484:	2000      	movs	r0, #0
 800f486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48a:	4f3a      	ldr	r7, [pc, #232]	; (800f574 <_strtol_l.isra.0+0x104>)
 800f48c:	468e      	mov	lr, r1
 800f48e:	4676      	mov	r6, lr
 800f490:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f494:	5de5      	ldrb	r5, [r4, r7]
 800f496:	f015 0508 	ands.w	r5, r5, #8
 800f49a:	d1f8      	bne.n	800f48e <_strtol_l.isra.0+0x1e>
 800f49c:	2c2d      	cmp	r4, #45	; 0x2d
 800f49e:	d134      	bne.n	800f50a <_strtol_l.isra.0+0x9a>
 800f4a0:	f89e 4000 	ldrb.w	r4, [lr]
 800f4a4:	f04f 0801 	mov.w	r8, #1
 800f4a8:	f106 0e02 	add.w	lr, r6, #2
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d05c      	beq.n	800f56a <_strtol_l.isra.0+0xfa>
 800f4b0:	2b10      	cmp	r3, #16
 800f4b2:	d10c      	bne.n	800f4ce <_strtol_l.isra.0+0x5e>
 800f4b4:	2c30      	cmp	r4, #48	; 0x30
 800f4b6:	d10a      	bne.n	800f4ce <_strtol_l.isra.0+0x5e>
 800f4b8:	f89e 4000 	ldrb.w	r4, [lr]
 800f4bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f4c0:	2c58      	cmp	r4, #88	; 0x58
 800f4c2:	d14d      	bne.n	800f560 <_strtol_l.isra.0+0xf0>
 800f4c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f4c8:	2310      	movs	r3, #16
 800f4ca:	f10e 0e02 	add.w	lr, lr, #2
 800f4ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f4d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f4d6:	2600      	movs	r6, #0
 800f4d8:	fbbc f9f3 	udiv	r9, ip, r3
 800f4dc:	4635      	mov	r5, r6
 800f4de:	fb03 ca19 	mls	sl, r3, r9, ip
 800f4e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f4e6:	2f09      	cmp	r7, #9
 800f4e8:	d818      	bhi.n	800f51c <_strtol_l.isra.0+0xac>
 800f4ea:	463c      	mov	r4, r7
 800f4ec:	42a3      	cmp	r3, r4
 800f4ee:	dd24      	ble.n	800f53a <_strtol_l.isra.0+0xca>
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	db1f      	blt.n	800f534 <_strtol_l.isra.0+0xc4>
 800f4f4:	45a9      	cmp	r9, r5
 800f4f6:	d31d      	bcc.n	800f534 <_strtol_l.isra.0+0xc4>
 800f4f8:	d101      	bne.n	800f4fe <_strtol_l.isra.0+0x8e>
 800f4fa:	45a2      	cmp	sl, r4
 800f4fc:	db1a      	blt.n	800f534 <_strtol_l.isra.0+0xc4>
 800f4fe:	fb05 4503 	mla	r5, r5, r3, r4
 800f502:	2601      	movs	r6, #1
 800f504:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f508:	e7eb      	b.n	800f4e2 <_strtol_l.isra.0+0x72>
 800f50a:	2c2b      	cmp	r4, #43	; 0x2b
 800f50c:	bf08      	it	eq
 800f50e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f512:	46a8      	mov	r8, r5
 800f514:	bf08      	it	eq
 800f516:	f106 0e02 	addeq.w	lr, r6, #2
 800f51a:	e7c7      	b.n	800f4ac <_strtol_l.isra.0+0x3c>
 800f51c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f520:	2f19      	cmp	r7, #25
 800f522:	d801      	bhi.n	800f528 <_strtol_l.isra.0+0xb8>
 800f524:	3c37      	subs	r4, #55	; 0x37
 800f526:	e7e1      	b.n	800f4ec <_strtol_l.isra.0+0x7c>
 800f528:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f52c:	2f19      	cmp	r7, #25
 800f52e:	d804      	bhi.n	800f53a <_strtol_l.isra.0+0xca>
 800f530:	3c57      	subs	r4, #87	; 0x57
 800f532:	e7db      	b.n	800f4ec <_strtol_l.isra.0+0x7c>
 800f534:	f04f 36ff 	mov.w	r6, #4294967295
 800f538:	e7e4      	b.n	800f504 <_strtol_l.isra.0+0x94>
 800f53a:	2e00      	cmp	r6, #0
 800f53c:	da05      	bge.n	800f54a <_strtol_l.isra.0+0xda>
 800f53e:	2322      	movs	r3, #34	; 0x22
 800f540:	6003      	str	r3, [r0, #0]
 800f542:	4665      	mov	r5, ip
 800f544:	b942      	cbnz	r2, 800f558 <_strtol_l.isra.0+0xe8>
 800f546:	4628      	mov	r0, r5
 800f548:	e79d      	b.n	800f486 <_strtol_l.isra.0+0x16>
 800f54a:	f1b8 0f00 	cmp.w	r8, #0
 800f54e:	d000      	beq.n	800f552 <_strtol_l.isra.0+0xe2>
 800f550:	426d      	negs	r5, r5
 800f552:	2a00      	cmp	r2, #0
 800f554:	d0f7      	beq.n	800f546 <_strtol_l.isra.0+0xd6>
 800f556:	b10e      	cbz	r6, 800f55c <_strtol_l.isra.0+0xec>
 800f558:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f55c:	6011      	str	r1, [r2, #0]
 800f55e:	e7f2      	b.n	800f546 <_strtol_l.isra.0+0xd6>
 800f560:	2430      	movs	r4, #48	; 0x30
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1b3      	bne.n	800f4ce <_strtol_l.isra.0+0x5e>
 800f566:	2308      	movs	r3, #8
 800f568:	e7b1      	b.n	800f4ce <_strtol_l.isra.0+0x5e>
 800f56a:	2c30      	cmp	r4, #48	; 0x30
 800f56c:	d0a4      	beq.n	800f4b8 <_strtol_l.isra.0+0x48>
 800f56e:	230a      	movs	r3, #10
 800f570:	e7ad      	b.n	800f4ce <_strtol_l.isra.0+0x5e>
 800f572:	bf00      	nop
 800f574:	08012ced 	.word	0x08012ced

0800f578 <_strtol_r>:
 800f578:	f7ff bf7a 	b.w	800f470 <_strtol_l.isra.0>

0800f57c <_strtoul_l.isra.0>:
 800f57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f580:	4e3b      	ldr	r6, [pc, #236]	; (800f670 <_strtoul_l.isra.0+0xf4>)
 800f582:	4686      	mov	lr, r0
 800f584:	468c      	mov	ip, r1
 800f586:	4660      	mov	r0, ip
 800f588:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f58c:	5da5      	ldrb	r5, [r4, r6]
 800f58e:	f015 0508 	ands.w	r5, r5, #8
 800f592:	d1f8      	bne.n	800f586 <_strtoul_l.isra.0+0xa>
 800f594:	2c2d      	cmp	r4, #45	; 0x2d
 800f596:	d134      	bne.n	800f602 <_strtoul_l.isra.0+0x86>
 800f598:	f89c 4000 	ldrb.w	r4, [ip]
 800f59c:	f04f 0801 	mov.w	r8, #1
 800f5a0:	f100 0c02 	add.w	ip, r0, #2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d05e      	beq.n	800f666 <_strtoul_l.isra.0+0xea>
 800f5a8:	2b10      	cmp	r3, #16
 800f5aa:	d10c      	bne.n	800f5c6 <_strtoul_l.isra.0+0x4a>
 800f5ac:	2c30      	cmp	r4, #48	; 0x30
 800f5ae:	d10a      	bne.n	800f5c6 <_strtoul_l.isra.0+0x4a>
 800f5b0:	f89c 0000 	ldrb.w	r0, [ip]
 800f5b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f5b8:	2858      	cmp	r0, #88	; 0x58
 800f5ba:	d14f      	bne.n	800f65c <_strtoul_l.isra.0+0xe0>
 800f5bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800f5c0:	2310      	movs	r3, #16
 800f5c2:	f10c 0c02 	add.w	ip, ip, #2
 800f5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800f5ca:	2500      	movs	r5, #0
 800f5cc:	fbb7 f7f3 	udiv	r7, r7, r3
 800f5d0:	fb03 f907 	mul.w	r9, r3, r7
 800f5d4:	ea6f 0909 	mvn.w	r9, r9
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800f5de:	2e09      	cmp	r6, #9
 800f5e0:	d818      	bhi.n	800f614 <_strtoul_l.isra.0+0x98>
 800f5e2:	4634      	mov	r4, r6
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	dd24      	ble.n	800f632 <_strtoul_l.isra.0+0xb6>
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	db1f      	blt.n	800f62c <_strtoul_l.isra.0+0xb0>
 800f5ec:	4287      	cmp	r7, r0
 800f5ee:	d31d      	bcc.n	800f62c <_strtoul_l.isra.0+0xb0>
 800f5f0:	d101      	bne.n	800f5f6 <_strtoul_l.isra.0+0x7a>
 800f5f2:	45a1      	cmp	r9, r4
 800f5f4:	db1a      	blt.n	800f62c <_strtoul_l.isra.0+0xb0>
 800f5f6:	fb00 4003 	mla	r0, r0, r3, r4
 800f5fa:	2501      	movs	r5, #1
 800f5fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f600:	e7eb      	b.n	800f5da <_strtoul_l.isra.0+0x5e>
 800f602:	2c2b      	cmp	r4, #43	; 0x2b
 800f604:	bf08      	it	eq
 800f606:	f89c 4000 	ldrbeq.w	r4, [ip]
 800f60a:	46a8      	mov	r8, r5
 800f60c:	bf08      	it	eq
 800f60e:	f100 0c02 	addeq.w	ip, r0, #2
 800f612:	e7c7      	b.n	800f5a4 <_strtoul_l.isra.0+0x28>
 800f614:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800f618:	2e19      	cmp	r6, #25
 800f61a:	d801      	bhi.n	800f620 <_strtoul_l.isra.0+0xa4>
 800f61c:	3c37      	subs	r4, #55	; 0x37
 800f61e:	e7e1      	b.n	800f5e4 <_strtoul_l.isra.0+0x68>
 800f620:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800f624:	2e19      	cmp	r6, #25
 800f626:	d804      	bhi.n	800f632 <_strtoul_l.isra.0+0xb6>
 800f628:	3c57      	subs	r4, #87	; 0x57
 800f62a:	e7db      	b.n	800f5e4 <_strtoul_l.isra.0+0x68>
 800f62c:	f04f 35ff 	mov.w	r5, #4294967295
 800f630:	e7e4      	b.n	800f5fc <_strtoul_l.isra.0+0x80>
 800f632:	2d00      	cmp	r5, #0
 800f634:	da07      	bge.n	800f646 <_strtoul_l.isra.0+0xca>
 800f636:	2322      	movs	r3, #34	; 0x22
 800f638:	f8ce 3000 	str.w	r3, [lr]
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	b942      	cbnz	r2, 800f654 <_strtoul_l.isra.0+0xd8>
 800f642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f646:	f1b8 0f00 	cmp.w	r8, #0
 800f64a:	d000      	beq.n	800f64e <_strtoul_l.isra.0+0xd2>
 800f64c:	4240      	negs	r0, r0
 800f64e:	2a00      	cmp	r2, #0
 800f650:	d0f7      	beq.n	800f642 <_strtoul_l.isra.0+0xc6>
 800f652:	b10d      	cbz	r5, 800f658 <_strtoul_l.isra.0+0xdc>
 800f654:	f10c 31ff 	add.w	r1, ip, #4294967295
 800f658:	6011      	str	r1, [r2, #0]
 800f65a:	e7f2      	b.n	800f642 <_strtoul_l.isra.0+0xc6>
 800f65c:	2430      	movs	r4, #48	; 0x30
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1b1      	bne.n	800f5c6 <_strtoul_l.isra.0+0x4a>
 800f662:	2308      	movs	r3, #8
 800f664:	e7af      	b.n	800f5c6 <_strtoul_l.isra.0+0x4a>
 800f666:	2c30      	cmp	r4, #48	; 0x30
 800f668:	d0a2      	beq.n	800f5b0 <_strtoul_l.isra.0+0x34>
 800f66a:	230a      	movs	r3, #10
 800f66c:	e7ab      	b.n	800f5c6 <_strtoul_l.isra.0+0x4a>
 800f66e:	bf00      	nop
 800f670:	08012ced 	.word	0x08012ced

0800f674 <_strtoul_r>:
 800f674:	f7ff bf82 	b.w	800f57c <_strtoul_l.isra.0>

0800f678 <_write_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4d07      	ldr	r5, [pc, #28]	; (800f698 <_write_r+0x20>)
 800f67c:	4604      	mov	r4, r0
 800f67e:	4608      	mov	r0, r1
 800f680:	4611      	mov	r1, r2
 800f682:	2200      	movs	r2, #0
 800f684:	602a      	str	r2, [r5, #0]
 800f686:	461a      	mov	r2, r3
 800f688:	f7f3 fc53 	bl	8002f32 <_write>
 800f68c:	1c43      	adds	r3, r0, #1
 800f68e:	d102      	bne.n	800f696 <_write_r+0x1e>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b103      	cbz	r3, 800f696 <_write_r+0x1e>
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	2000571c 	.word	0x2000571c

0800f69c <__assert_func>:
 800f69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f69e:	4614      	mov	r4, r2
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <__assert_func+0x2c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	68d8      	ldr	r0, [r3, #12]
 800f6aa:	b14c      	cbz	r4, 800f6c0 <__assert_func+0x24>
 800f6ac:	4b07      	ldr	r3, [pc, #28]	; (800f6cc <__assert_func+0x30>)
 800f6ae:	9100      	str	r1, [sp, #0]
 800f6b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6b4:	4906      	ldr	r1, [pc, #24]	; (800f6d0 <__assert_func+0x34>)
 800f6b6:	462b      	mov	r3, r5
 800f6b8:	f000 ff58 	bl	801056c <fiprintf>
 800f6bc:	f7fd feb3 	bl	800d426 <abort>
 800f6c0:	4b04      	ldr	r3, [pc, #16]	; (800f6d4 <__assert_func+0x38>)
 800f6c2:	461c      	mov	r4, r3
 800f6c4:	e7f3      	b.n	800f6ae <__assert_func+0x12>
 800f6c6:	bf00      	nop
 800f6c8:	20000030 	.word	0x20000030
 800f6cc:	08012cb0 	.word	0x08012cb0
 800f6d0:	08012cbd 	.word	0x08012cbd
 800f6d4:	08012ceb 	.word	0x08012ceb

0800f6d8 <_close_r>:
 800f6d8:	b538      	push	{r3, r4, r5, lr}
 800f6da:	4d06      	ldr	r5, [pc, #24]	; (800f6f4 <_close_r+0x1c>)
 800f6dc:	2300      	movs	r3, #0
 800f6de:	4604      	mov	r4, r0
 800f6e0:	4608      	mov	r0, r1
 800f6e2:	602b      	str	r3, [r5, #0]
 800f6e4:	f7f3 fc41 	bl	8002f6a <_close>
 800f6e8:	1c43      	adds	r3, r0, #1
 800f6ea:	d102      	bne.n	800f6f2 <_close_r+0x1a>
 800f6ec:	682b      	ldr	r3, [r5, #0]
 800f6ee:	b103      	cbz	r3, 800f6f2 <_close_r+0x1a>
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	bd38      	pop	{r3, r4, r5, pc}
 800f6f4:	2000571c 	.word	0x2000571c

0800f6f8 <quorem>:
 800f6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	6903      	ldr	r3, [r0, #16]
 800f6fe:	690c      	ldr	r4, [r1, #16]
 800f700:	42a3      	cmp	r3, r4
 800f702:	4607      	mov	r7, r0
 800f704:	f2c0 8081 	blt.w	800f80a <quorem+0x112>
 800f708:	3c01      	subs	r4, #1
 800f70a:	f101 0814 	add.w	r8, r1, #20
 800f70e:	f100 0514 	add.w	r5, r0, #20
 800f712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f716:	9301      	str	r3, [sp, #4]
 800f718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f720:	3301      	adds	r3, #1
 800f722:	429a      	cmp	r2, r3
 800f724:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f728:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f72c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f730:	d331      	bcc.n	800f796 <quorem+0x9e>
 800f732:	f04f 0e00 	mov.w	lr, #0
 800f736:	4640      	mov	r0, r8
 800f738:	46ac      	mov	ip, r5
 800f73a:	46f2      	mov	sl, lr
 800f73c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f740:	b293      	uxth	r3, r2
 800f742:	fb06 e303 	mla	r3, r6, r3, lr
 800f746:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	ebaa 0303 	sub.w	r3, sl, r3
 800f750:	0c12      	lsrs	r2, r2, #16
 800f752:	f8dc a000 	ldr.w	sl, [ip]
 800f756:	fb06 e202 	mla	r2, r6, r2, lr
 800f75a:	fa13 f38a 	uxtah	r3, r3, sl
 800f75e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f762:	fa1f fa82 	uxth.w	sl, r2
 800f766:	f8dc 2000 	ldr.w	r2, [ip]
 800f76a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f76e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f772:	b29b      	uxth	r3, r3
 800f774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f778:	4581      	cmp	r9, r0
 800f77a:	f84c 3b04 	str.w	r3, [ip], #4
 800f77e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f782:	d2db      	bcs.n	800f73c <quorem+0x44>
 800f784:	f855 300b 	ldr.w	r3, [r5, fp]
 800f788:	b92b      	cbnz	r3, 800f796 <quorem+0x9e>
 800f78a:	9b01      	ldr	r3, [sp, #4]
 800f78c:	3b04      	subs	r3, #4
 800f78e:	429d      	cmp	r5, r3
 800f790:	461a      	mov	r2, r3
 800f792:	d32e      	bcc.n	800f7f2 <quorem+0xfa>
 800f794:	613c      	str	r4, [r7, #16]
 800f796:	4638      	mov	r0, r7
 800f798:	f001 fd66 	bl	8011268 <__mcmp>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	db24      	blt.n	800f7ea <quorem+0xf2>
 800f7a0:	3601      	adds	r6, #1
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f04f 0c00 	mov.w	ip, #0
 800f7a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f7ac:	f8d0 e000 	ldr.w	lr, [r0]
 800f7b0:	b293      	uxth	r3, r2
 800f7b2:	ebac 0303 	sub.w	r3, ip, r3
 800f7b6:	0c12      	lsrs	r2, r2, #16
 800f7b8:	fa13 f38e 	uxtah	r3, r3, lr
 800f7bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f7c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7ca:	45c1      	cmp	r9, r8
 800f7cc:	f840 3b04 	str.w	r3, [r0], #4
 800f7d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f7d4:	d2e8      	bcs.n	800f7a8 <quorem+0xb0>
 800f7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7de:	b922      	cbnz	r2, 800f7ea <quorem+0xf2>
 800f7e0:	3b04      	subs	r3, #4
 800f7e2:	429d      	cmp	r5, r3
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	d30a      	bcc.n	800f7fe <quorem+0x106>
 800f7e8:	613c      	str	r4, [r7, #16]
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	b003      	add	sp, #12
 800f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f2:	6812      	ldr	r2, [r2, #0]
 800f7f4:	3b04      	subs	r3, #4
 800f7f6:	2a00      	cmp	r2, #0
 800f7f8:	d1cc      	bne.n	800f794 <quorem+0x9c>
 800f7fa:	3c01      	subs	r4, #1
 800f7fc:	e7c7      	b.n	800f78e <quorem+0x96>
 800f7fe:	6812      	ldr	r2, [r2, #0]
 800f800:	3b04      	subs	r3, #4
 800f802:	2a00      	cmp	r2, #0
 800f804:	d1f0      	bne.n	800f7e8 <quorem+0xf0>
 800f806:	3c01      	subs	r4, #1
 800f808:	e7eb      	b.n	800f7e2 <quorem+0xea>
 800f80a:	2000      	movs	r0, #0
 800f80c:	e7ee      	b.n	800f7ec <quorem+0xf4>
	...

0800f810 <_dtoa_r>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	ed2d 8b02 	vpush	{d8}
 800f818:	ec57 6b10 	vmov	r6, r7, d0
 800f81c:	b095      	sub	sp, #84	; 0x54
 800f81e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f824:	9105      	str	r1, [sp, #20]
 800f826:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f82a:	4604      	mov	r4, r0
 800f82c:	9209      	str	r2, [sp, #36]	; 0x24
 800f82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f830:	b975      	cbnz	r5, 800f850 <_dtoa_r+0x40>
 800f832:	2010      	movs	r0, #16
 800f834:	f7fd ff22 	bl	800d67c <malloc>
 800f838:	4602      	mov	r2, r0
 800f83a:	6260      	str	r0, [r4, #36]	; 0x24
 800f83c:	b920      	cbnz	r0, 800f848 <_dtoa_r+0x38>
 800f83e:	4bb2      	ldr	r3, [pc, #712]	; (800fb08 <_dtoa_r+0x2f8>)
 800f840:	21ea      	movs	r1, #234	; 0xea
 800f842:	48b2      	ldr	r0, [pc, #712]	; (800fb0c <_dtoa_r+0x2fc>)
 800f844:	f7ff ff2a 	bl	800f69c <__assert_func>
 800f848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f84c:	6005      	str	r5, [r0, #0]
 800f84e:	60c5      	str	r5, [r0, #12]
 800f850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f852:	6819      	ldr	r1, [r3, #0]
 800f854:	b151      	cbz	r1, 800f86c <_dtoa_r+0x5c>
 800f856:	685a      	ldr	r2, [r3, #4]
 800f858:	604a      	str	r2, [r1, #4]
 800f85a:	2301      	movs	r3, #1
 800f85c:	4093      	lsls	r3, r2
 800f85e:	608b      	str	r3, [r1, #8]
 800f860:	4620      	mov	r0, r4
 800f862:	f001 fa79 	bl	8010d58 <_Bfree>
 800f866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f868:	2200      	movs	r2, #0
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	1e3b      	subs	r3, r7, #0
 800f86e:	bfb9      	ittee	lt
 800f870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f874:	9303      	strlt	r3, [sp, #12]
 800f876:	2300      	movge	r3, #0
 800f878:	f8c8 3000 	strge.w	r3, [r8]
 800f87c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f880:	4ba3      	ldr	r3, [pc, #652]	; (800fb10 <_dtoa_r+0x300>)
 800f882:	bfbc      	itt	lt
 800f884:	2201      	movlt	r2, #1
 800f886:	f8c8 2000 	strlt.w	r2, [r8]
 800f88a:	ea33 0309 	bics.w	r3, r3, r9
 800f88e:	d11b      	bne.n	800f8c8 <_dtoa_r+0xb8>
 800f890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f892:	f242 730f 	movw	r3, #9999	; 0x270f
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f89c:	4333      	orrs	r3, r6
 800f89e:	f000 857a 	beq.w	8010396 <_dtoa_r+0xb86>
 800f8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a4:	b963      	cbnz	r3, 800f8c0 <_dtoa_r+0xb0>
 800f8a6:	4b9b      	ldr	r3, [pc, #620]	; (800fb14 <_dtoa_r+0x304>)
 800f8a8:	e024      	b.n	800f8f4 <_dtoa_r+0xe4>
 800f8aa:	4b9b      	ldr	r3, [pc, #620]	; (800fb18 <_dtoa_r+0x308>)
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	3308      	adds	r3, #8
 800f8b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	9800      	ldr	r0, [sp, #0]
 800f8b6:	b015      	add	sp, #84	; 0x54
 800f8b8:	ecbd 8b02 	vpop	{d8}
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	4b94      	ldr	r3, [pc, #592]	; (800fb14 <_dtoa_r+0x304>)
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	3303      	adds	r3, #3
 800f8c6:	e7f3      	b.n	800f8b0 <_dtoa_r+0xa0>
 800f8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	ec51 0b17 	vmov	r0, r1, d7
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f8d8:	f7f1 f906 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8dc:	4680      	mov	r8, r0
 800f8de:	b158      	cbz	r0, 800f8f8 <_dtoa_r+0xe8>
 800f8e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	6013      	str	r3, [r2, #0]
 800f8e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 8551 	beq.w	8010390 <_dtoa_r+0xb80>
 800f8ee:	488b      	ldr	r0, [pc, #556]	; (800fb1c <_dtoa_r+0x30c>)
 800f8f0:	6018      	str	r0, [r3, #0]
 800f8f2:	1e43      	subs	r3, r0, #1
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	e7dd      	b.n	800f8b4 <_dtoa_r+0xa4>
 800f8f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f8fc:	aa12      	add	r2, sp, #72	; 0x48
 800f8fe:	a913      	add	r1, sp, #76	; 0x4c
 800f900:	4620      	mov	r0, r4
 800f902:	f001 fdd1 	bl	80114a8 <__d2b>
 800f906:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f90a:	4683      	mov	fp, r0
 800f90c:	2d00      	cmp	r5, #0
 800f90e:	d07c      	beq.n	800fa0a <_dtoa_r+0x1fa>
 800f910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f912:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f91a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f91e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f922:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f92a:	4b7d      	ldr	r3, [pc, #500]	; (800fb20 <_dtoa_r+0x310>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	4630      	mov	r0, r6
 800f930:	4639      	mov	r1, r7
 800f932:	f7f0 fcb9 	bl	80002a8 <__aeabi_dsub>
 800f936:	a36e      	add	r3, pc, #440	; (adr r3, 800faf0 <_dtoa_r+0x2e0>)
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f7f0 fe6c 	bl	8000618 <__aeabi_dmul>
 800f940:	a36d      	add	r3, pc, #436	; (adr r3, 800faf8 <_dtoa_r+0x2e8>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	f7f0 fcb1 	bl	80002ac <__adddf3>
 800f94a:	4606      	mov	r6, r0
 800f94c:	4628      	mov	r0, r5
 800f94e:	460f      	mov	r7, r1
 800f950:	f7f0 fdf8 	bl	8000544 <__aeabi_i2d>
 800f954:	a36a      	add	r3, pc, #424	; (adr r3, 800fb00 <_dtoa_r+0x2f0>)
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	f7f0 fe5d 	bl	8000618 <__aeabi_dmul>
 800f95e:	4602      	mov	r2, r0
 800f960:	460b      	mov	r3, r1
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f0 fca1 	bl	80002ac <__adddf3>
 800f96a:	4606      	mov	r6, r0
 800f96c:	460f      	mov	r7, r1
 800f96e:	f7f1 f903 	bl	8000b78 <__aeabi_d2iz>
 800f972:	2200      	movs	r2, #0
 800f974:	4682      	mov	sl, r0
 800f976:	2300      	movs	r3, #0
 800f978:	4630      	mov	r0, r6
 800f97a:	4639      	mov	r1, r7
 800f97c:	f7f1 f8be 	bl	8000afc <__aeabi_dcmplt>
 800f980:	b148      	cbz	r0, 800f996 <_dtoa_r+0x186>
 800f982:	4650      	mov	r0, sl
 800f984:	f7f0 fdde 	bl	8000544 <__aeabi_i2d>
 800f988:	4632      	mov	r2, r6
 800f98a:	463b      	mov	r3, r7
 800f98c:	f7f1 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 800f990:	b908      	cbnz	r0, 800f996 <_dtoa_r+0x186>
 800f992:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f996:	f1ba 0f16 	cmp.w	sl, #22
 800f99a:	d854      	bhi.n	800fa46 <_dtoa_r+0x236>
 800f99c:	4b61      	ldr	r3, [pc, #388]	; (800fb24 <_dtoa_r+0x314>)
 800f99e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f9aa:	f7f1 f8a7 	bl	8000afc <__aeabi_dcmplt>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d04b      	beq.n	800fa4a <_dtoa_r+0x23a>
 800f9b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	930e      	str	r3, [sp, #56]	; 0x38
 800f9ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f9bc:	1b5d      	subs	r5, r3, r5
 800f9be:	1e6b      	subs	r3, r5, #1
 800f9c0:	9304      	str	r3, [sp, #16]
 800f9c2:	bf43      	ittte	mi
 800f9c4:	2300      	movmi	r3, #0
 800f9c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f9ca:	9304      	strmi	r3, [sp, #16]
 800f9cc:	f04f 0800 	movpl.w	r8, #0
 800f9d0:	f1ba 0f00 	cmp.w	sl, #0
 800f9d4:	db3b      	blt.n	800fa4e <_dtoa_r+0x23e>
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f9dc:	4453      	add	r3, sl
 800f9de:	9304      	str	r3, [sp, #16]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	9306      	str	r3, [sp, #24]
 800f9e4:	9b05      	ldr	r3, [sp, #20]
 800f9e6:	2b09      	cmp	r3, #9
 800f9e8:	d869      	bhi.n	800fabe <_dtoa_r+0x2ae>
 800f9ea:	2b05      	cmp	r3, #5
 800f9ec:	bfc4      	itt	gt
 800f9ee:	3b04      	subgt	r3, #4
 800f9f0:	9305      	strgt	r3, [sp, #20]
 800f9f2:	9b05      	ldr	r3, [sp, #20]
 800f9f4:	f1a3 0302 	sub.w	r3, r3, #2
 800f9f8:	bfcc      	ite	gt
 800f9fa:	2500      	movgt	r5, #0
 800f9fc:	2501      	movle	r5, #1
 800f9fe:	2b03      	cmp	r3, #3
 800fa00:	d869      	bhi.n	800fad6 <_dtoa_r+0x2c6>
 800fa02:	e8df f003 	tbb	[pc, r3]
 800fa06:	4e2c      	.short	0x4e2c
 800fa08:	5a4c      	.short	0x5a4c
 800fa0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fa0e:	441d      	add	r5, r3
 800fa10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fa14:	2b20      	cmp	r3, #32
 800fa16:	bfc1      	itttt	gt
 800fa18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fa1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fa20:	fa09 f303 	lslgt.w	r3, r9, r3
 800fa24:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fa28:	bfda      	itte	le
 800fa2a:	f1c3 0320 	rsble	r3, r3, #32
 800fa2e:	fa06 f003 	lslle.w	r0, r6, r3
 800fa32:	4318      	orrgt	r0, r3
 800fa34:	f7f0 fd76 	bl	8000524 <__aeabi_ui2d>
 800fa38:	2301      	movs	r3, #1
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fa40:	3d01      	subs	r5, #1
 800fa42:	9310      	str	r3, [sp, #64]	; 0x40
 800fa44:	e771      	b.n	800f92a <_dtoa_r+0x11a>
 800fa46:	2301      	movs	r3, #1
 800fa48:	e7b6      	b.n	800f9b8 <_dtoa_r+0x1a8>
 800fa4a:	900e      	str	r0, [sp, #56]	; 0x38
 800fa4c:	e7b5      	b.n	800f9ba <_dtoa_r+0x1aa>
 800fa4e:	f1ca 0300 	rsb	r3, sl, #0
 800fa52:	9306      	str	r3, [sp, #24]
 800fa54:	2300      	movs	r3, #0
 800fa56:	eba8 080a 	sub.w	r8, r8, sl
 800fa5a:	930d      	str	r3, [sp, #52]	; 0x34
 800fa5c:	e7c2      	b.n	800f9e4 <_dtoa_r+0x1d4>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	9308      	str	r3, [sp, #32]
 800fa62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dc39      	bgt.n	800fadc <_dtoa_r+0x2cc>
 800fa68:	f04f 0901 	mov.w	r9, #1
 800fa6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa70:	464b      	mov	r3, r9
 800fa72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fa76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa78:	2200      	movs	r2, #0
 800fa7a:	6042      	str	r2, [r0, #4]
 800fa7c:	2204      	movs	r2, #4
 800fa7e:	f102 0614 	add.w	r6, r2, #20
 800fa82:	429e      	cmp	r6, r3
 800fa84:	6841      	ldr	r1, [r0, #4]
 800fa86:	d92f      	bls.n	800fae8 <_dtoa_r+0x2d8>
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f001 f925 	bl	8010cd8 <_Balloc>
 800fa8e:	9000      	str	r0, [sp, #0]
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d14b      	bne.n	800fb2c <_dtoa_r+0x31c>
 800fa94:	4b24      	ldr	r3, [pc, #144]	; (800fb28 <_dtoa_r+0x318>)
 800fa96:	4602      	mov	r2, r0
 800fa98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa9c:	e6d1      	b.n	800f842 <_dtoa_r+0x32>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	e7de      	b.n	800fa60 <_dtoa_r+0x250>
 800faa2:	2300      	movs	r3, #0
 800faa4:	9308      	str	r3, [sp, #32]
 800faa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa8:	eb0a 0903 	add.w	r9, sl, r3
 800faac:	f109 0301 	add.w	r3, r9, #1
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	9301      	str	r3, [sp, #4]
 800fab4:	bfb8      	it	lt
 800fab6:	2301      	movlt	r3, #1
 800fab8:	e7dd      	b.n	800fa76 <_dtoa_r+0x266>
 800faba:	2301      	movs	r3, #1
 800fabc:	e7f2      	b.n	800faa4 <_dtoa_r+0x294>
 800fabe:	2501      	movs	r5, #1
 800fac0:	2300      	movs	r3, #0
 800fac2:	9305      	str	r3, [sp, #20]
 800fac4:	9508      	str	r5, [sp, #32]
 800fac6:	f04f 39ff 	mov.w	r9, #4294967295
 800faca:	2200      	movs	r2, #0
 800facc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fad0:	2312      	movs	r3, #18
 800fad2:	9209      	str	r2, [sp, #36]	; 0x24
 800fad4:	e7cf      	b.n	800fa76 <_dtoa_r+0x266>
 800fad6:	2301      	movs	r3, #1
 800fad8:	9308      	str	r3, [sp, #32]
 800fada:	e7f4      	b.n	800fac6 <_dtoa_r+0x2b6>
 800fadc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fae0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fae4:	464b      	mov	r3, r9
 800fae6:	e7c6      	b.n	800fa76 <_dtoa_r+0x266>
 800fae8:	3101      	adds	r1, #1
 800faea:	6041      	str	r1, [r0, #4]
 800faec:	0052      	lsls	r2, r2, #1
 800faee:	e7c6      	b.n	800fa7e <_dtoa_r+0x26e>
 800faf0:	636f4361 	.word	0x636f4361
 800faf4:	3fd287a7 	.word	0x3fd287a7
 800faf8:	8b60c8b3 	.word	0x8b60c8b3
 800fafc:	3fc68a28 	.word	0x3fc68a28
 800fb00:	509f79fb 	.word	0x509f79fb
 800fb04:	3fd34413 	.word	0x3fd34413
 800fb08:	08012dfa 	.word	0x08012dfa
 800fb0c:	08012e11 	.word	0x08012e11
 800fb10:	7ff00000 	.word	0x7ff00000
 800fb14:	08012df6 	.word	0x08012df6
 800fb18:	08012ded 	.word	0x08012ded
 800fb1c:	08013072 	.word	0x08013072
 800fb20:	3ff80000 	.word	0x3ff80000
 800fb24:	08012f88 	.word	0x08012f88
 800fb28:	08012e70 	.word	0x08012e70
 800fb2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb2e:	9a00      	ldr	r2, [sp, #0]
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	9b01      	ldr	r3, [sp, #4]
 800fb34:	2b0e      	cmp	r3, #14
 800fb36:	f200 80ad 	bhi.w	800fc94 <_dtoa_r+0x484>
 800fb3a:	2d00      	cmp	r5, #0
 800fb3c:	f000 80aa 	beq.w	800fc94 <_dtoa_r+0x484>
 800fb40:	f1ba 0f00 	cmp.w	sl, #0
 800fb44:	dd36      	ble.n	800fbb4 <_dtoa_r+0x3a4>
 800fb46:	4ac3      	ldr	r2, [pc, #780]	; (800fe54 <_dtoa_r+0x644>)
 800fb48:	f00a 030f 	and.w	r3, sl, #15
 800fb4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb50:	ed93 7b00 	vldr	d7, [r3]
 800fb54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fb58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800fb5c:	eeb0 8a47 	vmov.f32	s16, s14
 800fb60:	eef0 8a67 	vmov.f32	s17, s15
 800fb64:	d016      	beq.n	800fb94 <_dtoa_r+0x384>
 800fb66:	4bbc      	ldr	r3, [pc, #752]	; (800fe58 <_dtoa_r+0x648>)
 800fb68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb70:	f7f0 fe7c 	bl	800086c <__aeabi_ddiv>
 800fb74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb78:	f007 070f 	and.w	r7, r7, #15
 800fb7c:	2503      	movs	r5, #3
 800fb7e:	4eb6      	ldr	r6, [pc, #728]	; (800fe58 <_dtoa_r+0x648>)
 800fb80:	b957      	cbnz	r7, 800fb98 <_dtoa_r+0x388>
 800fb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb86:	ec53 2b18 	vmov	r2, r3, d8
 800fb8a:	f7f0 fe6f 	bl	800086c <__aeabi_ddiv>
 800fb8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb92:	e029      	b.n	800fbe8 <_dtoa_r+0x3d8>
 800fb94:	2502      	movs	r5, #2
 800fb96:	e7f2      	b.n	800fb7e <_dtoa_r+0x36e>
 800fb98:	07f9      	lsls	r1, r7, #31
 800fb9a:	d508      	bpl.n	800fbae <_dtoa_r+0x39e>
 800fb9c:	ec51 0b18 	vmov	r0, r1, d8
 800fba0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fba4:	f7f0 fd38 	bl	8000618 <__aeabi_dmul>
 800fba8:	ec41 0b18 	vmov	d8, r0, r1
 800fbac:	3501      	adds	r5, #1
 800fbae:	107f      	asrs	r7, r7, #1
 800fbb0:	3608      	adds	r6, #8
 800fbb2:	e7e5      	b.n	800fb80 <_dtoa_r+0x370>
 800fbb4:	f000 80a6 	beq.w	800fd04 <_dtoa_r+0x4f4>
 800fbb8:	f1ca 0600 	rsb	r6, sl, #0
 800fbbc:	4ba5      	ldr	r3, [pc, #660]	; (800fe54 <_dtoa_r+0x644>)
 800fbbe:	4fa6      	ldr	r7, [pc, #664]	; (800fe58 <_dtoa_r+0x648>)
 800fbc0:	f006 020f 	and.w	r2, r6, #15
 800fbc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fbd0:	f7f0 fd22 	bl	8000618 <__aeabi_dmul>
 800fbd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbd8:	1136      	asrs	r6, r6, #4
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2502      	movs	r5, #2
 800fbde:	2e00      	cmp	r6, #0
 800fbe0:	f040 8085 	bne.w	800fcee <_dtoa_r+0x4de>
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1d2      	bne.n	800fb8e <_dtoa_r+0x37e>
 800fbe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f000 808c 	beq.w	800fd08 <_dtoa_r+0x4f8>
 800fbf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbf4:	4b99      	ldr	r3, [pc, #612]	; (800fe5c <_dtoa_r+0x64c>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	f7f0 ff7e 	bl	8000afc <__aeabi_dcmplt>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	f000 8081 	beq.w	800fd08 <_dtoa_r+0x4f8>
 800fc06:	9b01      	ldr	r3, [sp, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d07d      	beq.n	800fd08 <_dtoa_r+0x4f8>
 800fc0c:	f1b9 0f00 	cmp.w	r9, #0
 800fc10:	dd3c      	ble.n	800fc8c <_dtoa_r+0x47c>
 800fc12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fc16:	9307      	str	r3, [sp, #28]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	4b91      	ldr	r3, [pc, #580]	; (800fe60 <_dtoa_r+0x650>)
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	4639      	mov	r1, r7
 800fc20:	f7f0 fcfa 	bl	8000618 <__aeabi_dmul>
 800fc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc28:	3501      	adds	r5, #1
 800fc2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fc2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc32:	4628      	mov	r0, r5
 800fc34:	f7f0 fc86 	bl	8000544 <__aeabi_i2d>
 800fc38:	4632      	mov	r2, r6
 800fc3a:	463b      	mov	r3, r7
 800fc3c:	f7f0 fcec 	bl	8000618 <__aeabi_dmul>
 800fc40:	4b88      	ldr	r3, [pc, #544]	; (800fe64 <_dtoa_r+0x654>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 fb32 	bl	80002ac <__adddf3>
 800fc48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fc4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d15c      	bne.n	800fd12 <_dtoa_r+0x502>
 800fc58:	4b83      	ldr	r3, [pc, #524]	; (800fe68 <_dtoa_r+0x658>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f0 fb22 	bl	80002a8 <__aeabi_dsub>
 800fc64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc68:	4606      	mov	r6, r0
 800fc6a:	460f      	mov	r7, r1
 800fc6c:	f7f0 ff64 	bl	8000b38 <__aeabi_dcmpgt>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	f040 8296 	bne.w	80101a2 <_dtoa_r+0x992>
 800fc76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc80:	4639      	mov	r1, r7
 800fc82:	f7f0 ff3b 	bl	8000afc <__aeabi_dcmplt>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f040 8288 	bne.w	801019c <_dtoa_r+0x98c>
 800fc8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fc90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fc94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f2c0 8158 	blt.w	800ff4c <_dtoa_r+0x73c>
 800fc9c:	f1ba 0f0e 	cmp.w	sl, #14
 800fca0:	f300 8154 	bgt.w	800ff4c <_dtoa_r+0x73c>
 800fca4:	4b6b      	ldr	r3, [pc, #428]	; (800fe54 <_dtoa_r+0x644>)
 800fca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fcaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f280 80e3 	bge.w	800fe7c <_dtoa_r+0x66c>
 800fcb6:	9b01      	ldr	r3, [sp, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f300 80df 	bgt.w	800fe7c <_dtoa_r+0x66c>
 800fcbe:	f040 826d 	bne.w	801019c <_dtoa_r+0x98c>
 800fcc2:	4b69      	ldr	r3, [pc, #420]	; (800fe68 <_dtoa_r+0x658>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	4649      	mov	r1, r9
 800fcca:	f7f0 fca5 	bl	8000618 <__aeabi_dmul>
 800fcce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcd2:	f7f0 ff27 	bl	8000b24 <__aeabi_dcmpge>
 800fcd6:	9e01      	ldr	r6, [sp, #4]
 800fcd8:	4637      	mov	r7, r6
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f040 8243 	bne.w	8010166 <_dtoa_r+0x956>
 800fce0:	9d00      	ldr	r5, [sp, #0]
 800fce2:	2331      	movs	r3, #49	; 0x31
 800fce4:	f805 3b01 	strb.w	r3, [r5], #1
 800fce8:	f10a 0a01 	add.w	sl, sl, #1
 800fcec:	e23f      	b.n	801016e <_dtoa_r+0x95e>
 800fcee:	07f2      	lsls	r2, r6, #31
 800fcf0:	d505      	bpl.n	800fcfe <_dtoa_r+0x4ee>
 800fcf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcf6:	f7f0 fc8f 	bl	8000618 <__aeabi_dmul>
 800fcfa:	3501      	adds	r5, #1
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	1076      	asrs	r6, r6, #1
 800fd00:	3708      	adds	r7, #8
 800fd02:	e76c      	b.n	800fbde <_dtoa_r+0x3ce>
 800fd04:	2502      	movs	r5, #2
 800fd06:	e76f      	b.n	800fbe8 <_dtoa_r+0x3d8>
 800fd08:	9b01      	ldr	r3, [sp, #4]
 800fd0a:	f8cd a01c 	str.w	sl, [sp, #28]
 800fd0e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd10:	e78d      	b.n	800fc2e <_dtoa_r+0x41e>
 800fd12:	9900      	ldr	r1, [sp, #0]
 800fd14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fd16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd18:	4b4e      	ldr	r3, [pc, #312]	; (800fe54 <_dtoa_r+0x644>)
 800fd1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd1e:	4401      	add	r1, r0
 800fd20:	9102      	str	r1, [sp, #8]
 800fd22:	9908      	ldr	r1, [sp, #32]
 800fd24:	eeb0 8a47 	vmov.f32	s16, s14
 800fd28:	eef0 8a67 	vmov.f32	s17, s15
 800fd2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd34:	2900      	cmp	r1, #0
 800fd36:	d045      	beq.n	800fdc4 <_dtoa_r+0x5b4>
 800fd38:	494c      	ldr	r1, [pc, #304]	; (800fe6c <_dtoa_r+0x65c>)
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f7f0 fd96 	bl	800086c <__aeabi_ddiv>
 800fd40:	ec53 2b18 	vmov	r2, r3, d8
 800fd44:	f7f0 fab0 	bl	80002a8 <__aeabi_dsub>
 800fd48:	9d00      	ldr	r5, [sp, #0]
 800fd4a:	ec41 0b18 	vmov	d8, r0, r1
 800fd4e:	4639      	mov	r1, r7
 800fd50:	4630      	mov	r0, r6
 800fd52:	f7f0 ff11 	bl	8000b78 <__aeabi_d2iz>
 800fd56:	900c      	str	r0, [sp, #48]	; 0x30
 800fd58:	f7f0 fbf4 	bl	8000544 <__aeabi_i2d>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	460b      	mov	r3, r1
 800fd60:	4630      	mov	r0, r6
 800fd62:	4639      	mov	r1, r7
 800fd64:	f7f0 faa0 	bl	80002a8 <__aeabi_dsub>
 800fd68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd6a:	3330      	adds	r3, #48	; 0x30
 800fd6c:	f805 3b01 	strb.w	r3, [r5], #1
 800fd70:	ec53 2b18 	vmov	r2, r3, d8
 800fd74:	4606      	mov	r6, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	f7f0 fec0 	bl	8000afc <__aeabi_dcmplt>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d165      	bne.n	800fe4c <_dtoa_r+0x63c>
 800fd80:	4632      	mov	r2, r6
 800fd82:	463b      	mov	r3, r7
 800fd84:	4935      	ldr	r1, [pc, #212]	; (800fe5c <_dtoa_r+0x64c>)
 800fd86:	2000      	movs	r0, #0
 800fd88:	f7f0 fa8e 	bl	80002a8 <__aeabi_dsub>
 800fd8c:	ec53 2b18 	vmov	r2, r3, d8
 800fd90:	f7f0 feb4 	bl	8000afc <__aeabi_dcmplt>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f040 80b9 	bne.w	800ff0c <_dtoa_r+0x6fc>
 800fd9a:	9b02      	ldr	r3, [sp, #8]
 800fd9c:	429d      	cmp	r5, r3
 800fd9e:	f43f af75 	beq.w	800fc8c <_dtoa_r+0x47c>
 800fda2:	4b2f      	ldr	r3, [pc, #188]	; (800fe60 <_dtoa_r+0x650>)
 800fda4:	ec51 0b18 	vmov	r0, r1, d8
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f7f0 fc35 	bl	8000618 <__aeabi_dmul>
 800fdae:	4b2c      	ldr	r3, [pc, #176]	; (800fe60 <_dtoa_r+0x650>)
 800fdb0:	ec41 0b18 	vmov	d8, r0, r1
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	4639      	mov	r1, r7
 800fdba:	f7f0 fc2d 	bl	8000618 <__aeabi_dmul>
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	460f      	mov	r7, r1
 800fdc2:	e7c4      	b.n	800fd4e <_dtoa_r+0x53e>
 800fdc4:	ec51 0b17 	vmov	r0, r1, d7
 800fdc8:	f7f0 fc26 	bl	8000618 <__aeabi_dmul>
 800fdcc:	9b02      	ldr	r3, [sp, #8]
 800fdce:	9d00      	ldr	r5, [sp, #0]
 800fdd0:	930c      	str	r3, [sp, #48]	; 0x30
 800fdd2:	ec41 0b18 	vmov	d8, r0, r1
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f7f0 fecd 	bl	8000b78 <__aeabi_d2iz>
 800fdde:	9011      	str	r0, [sp, #68]	; 0x44
 800fde0:	f7f0 fbb0 	bl	8000544 <__aeabi_i2d>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4630      	mov	r0, r6
 800fdea:	4639      	mov	r1, r7
 800fdec:	f7f0 fa5c 	bl	80002a8 <__aeabi_dsub>
 800fdf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fdf2:	3330      	adds	r3, #48	; 0x30
 800fdf4:	f805 3b01 	strb.w	r3, [r5], #1
 800fdf8:	9b02      	ldr	r3, [sp, #8]
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	460f      	mov	r7, r1
 800fe00:	f04f 0200 	mov.w	r2, #0
 800fe04:	d134      	bne.n	800fe70 <_dtoa_r+0x660>
 800fe06:	4b19      	ldr	r3, [pc, #100]	; (800fe6c <_dtoa_r+0x65c>)
 800fe08:	ec51 0b18 	vmov	r0, r1, d8
 800fe0c:	f7f0 fa4e 	bl	80002ac <__adddf3>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	4630      	mov	r0, r6
 800fe16:	4639      	mov	r1, r7
 800fe18:	f7f0 fe8e 	bl	8000b38 <__aeabi_dcmpgt>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d175      	bne.n	800ff0c <_dtoa_r+0x6fc>
 800fe20:	ec53 2b18 	vmov	r2, r3, d8
 800fe24:	4911      	ldr	r1, [pc, #68]	; (800fe6c <_dtoa_r+0x65c>)
 800fe26:	2000      	movs	r0, #0
 800fe28:	f7f0 fa3e 	bl	80002a8 <__aeabi_dsub>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	460b      	mov	r3, r1
 800fe30:	4630      	mov	r0, r6
 800fe32:	4639      	mov	r1, r7
 800fe34:	f7f0 fe62 	bl	8000afc <__aeabi_dcmplt>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	f43f af27 	beq.w	800fc8c <_dtoa_r+0x47c>
 800fe3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe40:	1e6b      	subs	r3, r5, #1
 800fe42:	930c      	str	r3, [sp, #48]	; 0x30
 800fe44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe48:	2b30      	cmp	r3, #48	; 0x30
 800fe4a:	d0f8      	beq.n	800fe3e <_dtoa_r+0x62e>
 800fe4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fe50:	e04a      	b.n	800fee8 <_dtoa_r+0x6d8>
 800fe52:	bf00      	nop
 800fe54:	08012f88 	.word	0x08012f88
 800fe58:	08012f60 	.word	0x08012f60
 800fe5c:	3ff00000 	.word	0x3ff00000
 800fe60:	40240000 	.word	0x40240000
 800fe64:	401c0000 	.word	0x401c0000
 800fe68:	40140000 	.word	0x40140000
 800fe6c:	3fe00000 	.word	0x3fe00000
 800fe70:	4baf      	ldr	r3, [pc, #700]	; (8010130 <_dtoa_r+0x920>)
 800fe72:	f7f0 fbd1 	bl	8000618 <__aeabi_dmul>
 800fe76:	4606      	mov	r6, r0
 800fe78:	460f      	mov	r7, r1
 800fe7a:	e7ac      	b.n	800fdd6 <_dtoa_r+0x5c6>
 800fe7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fe80:	9d00      	ldr	r5, [sp, #0]
 800fe82:	4642      	mov	r2, r8
 800fe84:	464b      	mov	r3, r9
 800fe86:	4630      	mov	r0, r6
 800fe88:	4639      	mov	r1, r7
 800fe8a:	f7f0 fcef 	bl	800086c <__aeabi_ddiv>
 800fe8e:	f7f0 fe73 	bl	8000b78 <__aeabi_d2iz>
 800fe92:	9002      	str	r0, [sp, #8]
 800fe94:	f7f0 fb56 	bl	8000544 <__aeabi_i2d>
 800fe98:	4642      	mov	r2, r8
 800fe9a:	464b      	mov	r3, r9
 800fe9c:	f7f0 fbbc 	bl	8000618 <__aeabi_dmul>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4630      	mov	r0, r6
 800fea6:	4639      	mov	r1, r7
 800fea8:	f7f0 f9fe 	bl	80002a8 <__aeabi_dsub>
 800feac:	9e02      	ldr	r6, [sp, #8]
 800feae:	9f01      	ldr	r7, [sp, #4]
 800feb0:	3630      	adds	r6, #48	; 0x30
 800feb2:	f805 6b01 	strb.w	r6, [r5], #1
 800feb6:	9e00      	ldr	r6, [sp, #0]
 800feb8:	1bae      	subs	r6, r5, r6
 800feba:	42b7      	cmp	r7, r6
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	d137      	bne.n	800ff32 <_dtoa_r+0x722>
 800fec2:	f7f0 f9f3 	bl	80002ac <__adddf3>
 800fec6:	4642      	mov	r2, r8
 800fec8:	464b      	mov	r3, r9
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	f7f0 fe33 	bl	8000b38 <__aeabi_dcmpgt>
 800fed2:	b9c8      	cbnz	r0, 800ff08 <_dtoa_r+0x6f8>
 800fed4:	4642      	mov	r2, r8
 800fed6:	464b      	mov	r3, r9
 800fed8:	4630      	mov	r0, r6
 800feda:	4639      	mov	r1, r7
 800fedc:	f7f0 fe04 	bl	8000ae8 <__aeabi_dcmpeq>
 800fee0:	b110      	cbz	r0, 800fee8 <_dtoa_r+0x6d8>
 800fee2:	9b02      	ldr	r3, [sp, #8]
 800fee4:	07d9      	lsls	r1, r3, #31
 800fee6:	d40f      	bmi.n	800ff08 <_dtoa_r+0x6f8>
 800fee8:	4620      	mov	r0, r4
 800feea:	4659      	mov	r1, fp
 800feec:	f000 ff34 	bl	8010d58 <_Bfree>
 800fef0:	2300      	movs	r3, #0
 800fef2:	702b      	strb	r3, [r5, #0]
 800fef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fef6:	f10a 0001 	add.w	r0, sl, #1
 800fefa:	6018      	str	r0, [r3, #0]
 800fefc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f43f acd8 	beq.w	800f8b4 <_dtoa_r+0xa4>
 800ff04:	601d      	str	r5, [r3, #0]
 800ff06:	e4d5      	b.n	800f8b4 <_dtoa_r+0xa4>
 800ff08:	f8cd a01c 	str.w	sl, [sp, #28]
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	461d      	mov	r5, r3
 800ff10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff14:	2a39      	cmp	r2, #57	; 0x39
 800ff16:	d108      	bne.n	800ff2a <_dtoa_r+0x71a>
 800ff18:	9a00      	ldr	r2, [sp, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d1f7      	bne.n	800ff0e <_dtoa_r+0x6fe>
 800ff1e:	9a07      	ldr	r2, [sp, #28]
 800ff20:	9900      	ldr	r1, [sp, #0]
 800ff22:	3201      	adds	r2, #1
 800ff24:	9207      	str	r2, [sp, #28]
 800ff26:	2230      	movs	r2, #48	; 0x30
 800ff28:	700a      	strb	r2, [r1, #0]
 800ff2a:	781a      	ldrb	r2, [r3, #0]
 800ff2c:	3201      	adds	r2, #1
 800ff2e:	701a      	strb	r2, [r3, #0]
 800ff30:	e78c      	b.n	800fe4c <_dtoa_r+0x63c>
 800ff32:	4b7f      	ldr	r3, [pc, #508]	; (8010130 <_dtoa_r+0x920>)
 800ff34:	2200      	movs	r2, #0
 800ff36:	f7f0 fb6f 	bl	8000618 <__aeabi_dmul>
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460f      	mov	r7, r1
 800ff42:	f7f0 fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d09b      	beq.n	800fe82 <_dtoa_r+0x672>
 800ff4a:	e7cd      	b.n	800fee8 <_dtoa_r+0x6d8>
 800ff4c:	9a08      	ldr	r2, [sp, #32]
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	f000 80c4 	beq.w	80100dc <_dtoa_r+0x8cc>
 800ff54:	9a05      	ldr	r2, [sp, #20]
 800ff56:	2a01      	cmp	r2, #1
 800ff58:	f300 80a8 	bgt.w	80100ac <_dtoa_r+0x89c>
 800ff5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff5e:	2a00      	cmp	r2, #0
 800ff60:	f000 80a0 	beq.w	80100a4 <_dtoa_r+0x894>
 800ff64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff68:	9e06      	ldr	r6, [sp, #24]
 800ff6a:	4645      	mov	r5, r8
 800ff6c:	9a04      	ldr	r2, [sp, #16]
 800ff6e:	2101      	movs	r1, #1
 800ff70:	441a      	add	r2, r3
 800ff72:	4620      	mov	r0, r4
 800ff74:	4498      	add	r8, r3
 800ff76:	9204      	str	r2, [sp, #16]
 800ff78:	f000 fff4 	bl	8010f64 <__i2b>
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	2d00      	cmp	r5, #0
 800ff80:	dd0b      	ble.n	800ff9a <_dtoa_r+0x78a>
 800ff82:	9b04      	ldr	r3, [sp, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dd08      	ble.n	800ff9a <_dtoa_r+0x78a>
 800ff88:	42ab      	cmp	r3, r5
 800ff8a:	9a04      	ldr	r2, [sp, #16]
 800ff8c:	bfa8      	it	ge
 800ff8e:	462b      	movge	r3, r5
 800ff90:	eba8 0803 	sub.w	r8, r8, r3
 800ff94:	1aed      	subs	r5, r5, r3
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	9b06      	ldr	r3, [sp, #24]
 800ff9c:	b1fb      	cbz	r3, 800ffde <_dtoa_r+0x7ce>
 800ff9e:	9b08      	ldr	r3, [sp, #32]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 809f 	beq.w	80100e4 <_dtoa_r+0x8d4>
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	dd11      	ble.n	800ffce <_dtoa_r+0x7be>
 800ffaa:	4639      	mov	r1, r7
 800ffac:	4632      	mov	r2, r6
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f001 f894 	bl	80110dc <__pow5mult>
 800ffb4:	465a      	mov	r2, fp
 800ffb6:	4601      	mov	r1, r0
 800ffb8:	4607      	mov	r7, r0
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 ffe8 	bl	8010f90 <__multiply>
 800ffc0:	4659      	mov	r1, fp
 800ffc2:	9007      	str	r0, [sp, #28]
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f000 fec7 	bl	8010d58 <_Bfree>
 800ffca:	9b07      	ldr	r3, [sp, #28]
 800ffcc:	469b      	mov	fp, r3
 800ffce:	9b06      	ldr	r3, [sp, #24]
 800ffd0:	1b9a      	subs	r2, r3, r6
 800ffd2:	d004      	beq.n	800ffde <_dtoa_r+0x7ce>
 800ffd4:	4659      	mov	r1, fp
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f001 f880 	bl	80110dc <__pow5mult>
 800ffdc:	4683      	mov	fp, r0
 800ffde:	2101      	movs	r1, #1
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 ffbf 	bl	8010f64 <__i2b>
 800ffe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	4606      	mov	r6, r0
 800ffec:	dd7c      	ble.n	80100e8 <_dtoa_r+0x8d8>
 800ffee:	461a      	mov	r2, r3
 800fff0:	4601      	mov	r1, r0
 800fff2:	4620      	mov	r0, r4
 800fff4:	f001 f872 	bl	80110dc <__pow5mult>
 800fff8:	9b05      	ldr	r3, [sp, #20]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	4606      	mov	r6, r0
 800fffe:	dd76      	ble.n	80100ee <_dtoa_r+0x8de>
 8010000:	2300      	movs	r3, #0
 8010002:	9306      	str	r3, [sp, #24]
 8010004:	6933      	ldr	r3, [r6, #16]
 8010006:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801000a:	6918      	ldr	r0, [r3, #16]
 801000c:	f000 ff5a 	bl	8010ec4 <__hi0bits>
 8010010:	f1c0 0020 	rsb	r0, r0, #32
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	4418      	add	r0, r3
 8010018:	f010 001f 	ands.w	r0, r0, #31
 801001c:	f000 8086 	beq.w	801012c <_dtoa_r+0x91c>
 8010020:	f1c0 0320 	rsb	r3, r0, #32
 8010024:	2b04      	cmp	r3, #4
 8010026:	dd7f      	ble.n	8010128 <_dtoa_r+0x918>
 8010028:	f1c0 001c 	rsb	r0, r0, #28
 801002c:	9b04      	ldr	r3, [sp, #16]
 801002e:	4403      	add	r3, r0
 8010030:	4480      	add	r8, r0
 8010032:	4405      	add	r5, r0
 8010034:	9304      	str	r3, [sp, #16]
 8010036:	f1b8 0f00 	cmp.w	r8, #0
 801003a:	dd05      	ble.n	8010048 <_dtoa_r+0x838>
 801003c:	4659      	mov	r1, fp
 801003e:	4642      	mov	r2, r8
 8010040:	4620      	mov	r0, r4
 8010042:	f001 f8a5 	bl	8011190 <__lshift>
 8010046:	4683      	mov	fp, r0
 8010048:	9b04      	ldr	r3, [sp, #16]
 801004a:	2b00      	cmp	r3, #0
 801004c:	dd05      	ble.n	801005a <_dtoa_r+0x84a>
 801004e:	4631      	mov	r1, r6
 8010050:	461a      	mov	r2, r3
 8010052:	4620      	mov	r0, r4
 8010054:	f001 f89c 	bl	8011190 <__lshift>
 8010058:	4606      	mov	r6, r0
 801005a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801005c:	2b00      	cmp	r3, #0
 801005e:	d069      	beq.n	8010134 <_dtoa_r+0x924>
 8010060:	4631      	mov	r1, r6
 8010062:	4658      	mov	r0, fp
 8010064:	f001 f900 	bl	8011268 <__mcmp>
 8010068:	2800      	cmp	r0, #0
 801006a:	da63      	bge.n	8010134 <_dtoa_r+0x924>
 801006c:	2300      	movs	r3, #0
 801006e:	4659      	mov	r1, fp
 8010070:	220a      	movs	r2, #10
 8010072:	4620      	mov	r0, r4
 8010074:	f000 fe92 	bl	8010d9c <__multadd>
 8010078:	9b08      	ldr	r3, [sp, #32]
 801007a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801007e:	4683      	mov	fp, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	f000 818f 	beq.w	80103a4 <_dtoa_r+0xb94>
 8010086:	4639      	mov	r1, r7
 8010088:	2300      	movs	r3, #0
 801008a:	220a      	movs	r2, #10
 801008c:	4620      	mov	r0, r4
 801008e:	f000 fe85 	bl	8010d9c <__multadd>
 8010092:	f1b9 0f00 	cmp.w	r9, #0
 8010096:	4607      	mov	r7, r0
 8010098:	f300 808e 	bgt.w	80101b8 <_dtoa_r+0x9a8>
 801009c:	9b05      	ldr	r3, [sp, #20]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	dc50      	bgt.n	8010144 <_dtoa_r+0x934>
 80100a2:	e089      	b.n	80101b8 <_dtoa_r+0x9a8>
 80100a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80100aa:	e75d      	b.n	800ff68 <_dtoa_r+0x758>
 80100ac:	9b01      	ldr	r3, [sp, #4]
 80100ae:	1e5e      	subs	r6, r3, #1
 80100b0:	9b06      	ldr	r3, [sp, #24]
 80100b2:	42b3      	cmp	r3, r6
 80100b4:	bfbf      	itttt	lt
 80100b6:	9b06      	ldrlt	r3, [sp, #24]
 80100b8:	9606      	strlt	r6, [sp, #24]
 80100ba:	1af2      	sublt	r2, r6, r3
 80100bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80100be:	bfb6      	itet	lt
 80100c0:	189b      	addlt	r3, r3, r2
 80100c2:	1b9e      	subge	r6, r3, r6
 80100c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80100c6:	9b01      	ldr	r3, [sp, #4]
 80100c8:	bfb8      	it	lt
 80100ca:	2600      	movlt	r6, #0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	bfb5      	itete	lt
 80100d0:	eba8 0503 	sublt.w	r5, r8, r3
 80100d4:	9b01      	ldrge	r3, [sp, #4]
 80100d6:	2300      	movlt	r3, #0
 80100d8:	4645      	movge	r5, r8
 80100da:	e747      	b.n	800ff6c <_dtoa_r+0x75c>
 80100dc:	9e06      	ldr	r6, [sp, #24]
 80100de:	9f08      	ldr	r7, [sp, #32]
 80100e0:	4645      	mov	r5, r8
 80100e2:	e74c      	b.n	800ff7e <_dtoa_r+0x76e>
 80100e4:	9a06      	ldr	r2, [sp, #24]
 80100e6:	e775      	b.n	800ffd4 <_dtoa_r+0x7c4>
 80100e8:	9b05      	ldr	r3, [sp, #20]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	dc18      	bgt.n	8010120 <_dtoa_r+0x910>
 80100ee:	9b02      	ldr	r3, [sp, #8]
 80100f0:	b9b3      	cbnz	r3, 8010120 <_dtoa_r+0x910>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100f8:	b9a3      	cbnz	r3, 8010124 <_dtoa_r+0x914>
 80100fa:	9b03      	ldr	r3, [sp, #12]
 80100fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010100:	0d1b      	lsrs	r3, r3, #20
 8010102:	051b      	lsls	r3, r3, #20
 8010104:	b12b      	cbz	r3, 8010112 <_dtoa_r+0x902>
 8010106:	9b04      	ldr	r3, [sp, #16]
 8010108:	3301      	adds	r3, #1
 801010a:	9304      	str	r3, [sp, #16]
 801010c:	f108 0801 	add.w	r8, r8, #1
 8010110:	2301      	movs	r3, #1
 8010112:	9306      	str	r3, [sp, #24]
 8010114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010116:	2b00      	cmp	r3, #0
 8010118:	f47f af74 	bne.w	8010004 <_dtoa_r+0x7f4>
 801011c:	2001      	movs	r0, #1
 801011e:	e779      	b.n	8010014 <_dtoa_r+0x804>
 8010120:	2300      	movs	r3, #0
 8010122:	e7f6      	b.n	8010112 <_dtoa_r+0x902>
 8010124:	9b02      	ldr	r3, [sp, #8]
 8010126:	e7f4      	b.n	8010112 <_dtoa_r+0x902>
 8010128:	d085      	beq.n	8010036 <_dtoa_r+0x826>
 801012a:	4618      	mov	r0, r3
 801012c:	301c      	adds	r0, #28
 801012e:	e77d      	b.n	801002c <_dtoa_r+0x81c>
 8010130:	40240000 	.word	0x40240000
 8010134:	9b01      	ldr	r3, [sp, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	dc38      	bgt.n	80101ac <_dtoa_r+0x99c>
 801013a:	9b05      	ldr	r3, [sp, #20]
 801013c:	2b02      	cmp	r3, #2
 801013e:	dd35      	ble.n	80101ac <_dtoa_r+0x99c>
 8010140:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010144:	f1b9 0f00 	cmp.w	r9, #0
 8010148:	d10d      	bne.n	8010166 <_dtoa_r+0x956>
 801014a:	4631      	mov	r1, r6
 801014c:	464b      	mov	r3, r9
 801014e:	2205      	movs	r2, #5
 8010150:	4620      	mov	r0, r4
 8010152:	f000 fe23 	bl	8010d9c <__multadd>
 8010156:	4601      	mov	r1, r0
 8010158:	4606      	mov	r6, r0
 801015a:	4658      	mov	r0, fp
 801015c:	f001 f884 	bl	8011268 <__mcmp>
 8010160:	2800      	cmp	r0, #0
 8010162:	f73f adbd 	bgt.w	800fce0 <_dtoa_r+0x4d0>
 8010166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010168:	9d00      	ldr	r5, [sp, #0]
 801016a:	ea6f 0a03 	mvn.w	sl, r3
 801016e:	f04f 0800 	mov.w	r8, #0
 8010172:	4631      	mov	r1, r6
 8010174:	4620      	mov	r0, r4
 8010176:	f000 fdef 	bl	8010d58 <_Bfree>
 801017a:	2f00      	cmp	r7, #0
 801017c:	f43f aeb4 	beq.w	800fee8 <_dtoa_r+0x6d8>
 8010180:	f1b8 0f00 	cmp.w	r8, #0
 8010184:	d005      	beq.n	8010192 <_dtoa_r+0x982>
 8010186:	45b8      	cmp	r8, r7
 8010188:	d003      	beq.n	8010192 <_dtoa_r+0x982>
 801018a:	4641      	mov	r1, r8
 801018c:	4620      	mov	r0, r4
 801018e:	f000 fde3 	bl	8010d58 <_Bfree>
 8010192:	4639      	mov	r1, r7
 8010194:	4620      	mov	r0, r4
 8010196:	f000 fddf 	bl	8010d58 <_Bfree>
 801019a:	e6a5      	b.n	800fee8 <_dtoa_r+0x6d8>
 801019c:	2600      	movs	r6, #0
 801019e:	4637      	mov	r7, r6
 80101a0:	e7e1      	b.n	8010166 <_dtoa_r+0x956>
 80101a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80101a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80101a8:	4637      	mov	r7, r6
 80101aa:	e599      	b.n	800fce0 <_dtoa_r+0x4d0>
 80101ac:	9b08      	ldr	r3, [sp, #32]
 80101ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 80fd 	beq.w	80103b2 <_dtoa_r+0xba2>
 80101b8:	2d00      	cmp	r5, #0
 80101ba:	dd05      	ble.n	80101c8 <_dtoa_r+0x9b8>
 80101bc:	4639      	mov	r1, r7
 80101be:	462a      	mov	r2, r5
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 ffe5 	bl	8011190 <__lshift>
 80101c6:	4607      	mov	r7, r0
 80101c8:	9b06      	ldr	r3, [sp, #24]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d05c      	beq.n	8010288 <_dtoa_r+0xa78>
 80101ce:	6879      	ldr	r1, [r7, #4]
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 fd81 	bl	8010cd8 <_Balloc>
 80101d6:	4605      	mov	r5, r0
 80101d8:	b928      	cbnz	r0, 80101e6 <_dtoa_r+0x9d6>
 80101da:	4b80      	ldr	r3, [pc, #512]	; (80103dc <_dtoa_r+0xbcc>)
 80101dc:	4602      	mov	r2, r0
 80101de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80101e2:	f7ff bb2e 	b.w	800f842 <_dtoa_r+0x32>
 80101e6:	693a      	ldr	r2, [r7, #16]
 80101e8:	3202      	adds	r2, #2
 80101ea:	0092      	lsls	r2, r2, #2
 80101ec:	f107 010c 	add.w	r1, r7, #12
 80101f0:	300c      	adds	r0, #12
 80101f2:	f7fd fa53 	bl	800d69c <memcpy>
 80101f6:	2201      	movs	r2, #1
 80101f8:	4629      	mov	r1, r5
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 ffc8 	bl	8011190 <__lshift>
 8010200:	9b00      	ldr	r3, [sp, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	9301      	str	r3, [sp, #4]
 8010206:	9b00      	ldr	r3, [sp, #0]
 8010208:	444b      	add	r3, r9
 801020a:	9307      	str	r3, [sp, #28]
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	46b8      	mov	r8, r7
 8010214:	9306      	str	r3, [sp, #24]
 8010216:	4607      	mov	r7, r0
 8010218:	9b01      	ldr	r3, [sp, #4]
 801021a:	4631      	mov	r1, r6
 801021c:	3b01      	subs	r3, #1
 801021e:	4658      	mov	r0, fp
 8010220:	9302      	str	r3, [sp, #8]
 8010222:	f7ff fa69 	bl	800f6f8 <quorem>
 8010226:	4603      	mov	r3, r0
 8010228:	3330      	adds	r3, #48	; 0x30
 801022a:	9004      	str	r0, [sp, #16]
 801022c:	4641      	mov	r1, r8
 801022e:	4658      	mov	r0, fp
 8010230:	9308      	str	r3, [sp, #32]
 8010232:	f001 f819 	bl	8011268 <__mcmp>
 8010236:	463a      	mov	r2, r7
 8010238:	4681      	mov	r9, r0
 801023a:	4631      	mov	r1, r6
 801023c:	4620      	mov	r0, r4
 801023e:	f001 f82f 	bl	80112a0 <__mdiff>
 8010242:	68c2      	ldr	r2, [r0, #12]
 8010244:	9b08      	ldr	r3, [sp, #32]
 8010246:	4605      	mov	r5, r0
 8010248:	bb02      	cbnz	r2, 801028c <_dtoa_r+0xa7c>
 801024a:	4601      	mov	r1, r0
 801024c:	4658      	mov	r0, fp
 801024e:	f001 f80b 	bl	8011268 <__mcmp>
 8010252:	9b08      	ldr	r3, [sp, #32]
 8010254:	4602      	mov	r2, r0
 8010256:	4629      	mov	r1, r5
 8010258:	4620      	mov	r0, r4
 801025a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801025e:	f000 fd7b 	bl	8010d58 <_Bfree>
 8010262:	9b05      	ldr	r3, [sp, #20]
 8010264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010266:	9d01      	ldr	r5, [sp, #4]
 8010268:	ea43 0102 	orr.w	r1, r3, r2
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	430b      	orrs	r3, r1
 8010270:	9b08      	ldr	r3, [sp, #32]
 8010272:	d10d      	bne.n	8010290 <_dtoa_r+0xa80>
 8010274:	2b39      	cmp	r3, #57	; 0x39
 8010276:	d029      	beq.n	80102cc <_dtoa_r+0xabc>
 8010278:	f1b9 0f00 	cmp.w	r9, #0
 801027c:	dd01      	ble.n	8010282 <_dtoa_r+0xa72>
 801027e:	9b04      	ldr	r3, [sp, #16]
 8010280:	3331      	adds	r3, #49	; 0x31
 8010282:	9a02      	ldr	r2, [sp, #8]
 8010284:	7013      	strb	r3, [r2, #0]
 8010286:	e774      	b.n	8010172 <_dtoa_r+0x962>
 8010288:	4638      	mov	r0, r7
 801028a:	e7b9      	b.n	8010200 <_dtoa_r+0x9f0>
 801028c:	2201      	movs	r2, #1
 801028e:	e7e2      	b.n	8010256 <_dtoa_r+0xa46>
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	db06      	blt.n	80102a4 <_dtoa_r+0xa94>
 8010296:	9905      	ldr	r1, [sp, #20]
 8010298:	ea41 0909 	orr.w	r9, r1, r9
 801029c:	9906      	ldr	r1, [sp, #24]
 801029e:	ea59 0101 	orrs.w	r1, r9, r1
 80102a2:	d120      	bne.n	80102e6 <_dtoa_r+0xad6>
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	ddec      	ble.n	8010282 <_dtoa_r+0xa72>
 80102a8:	4659      	mov	r1, fp
 80102aa:	2201      	movs	r2, #1
 80102ac:	4620      	mov	r0, r4
 80102ae:	9301      	str	r3, [sp, #4]
 80102b0:	f000 ff6e 	bl	8011190 <__lshift>
 80102b4:	4631      	mov	r1, r6
 80102b6:	4683      	mov	fp, r0
 80102b8:	f000 ffd6 	bl	8011268 <__mcmp>
 80102bc:	2800      	cmp	r0, #0
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	dc02      	bgt.n	80102c8 <_dtoa_r+0xab8>
 80102c2:	d1de      	bne.n	8010282 <_dtoa_r+0xa72>
 80102c4:	07da      	lsls	r2, r3, #31
 80102c6:	d5dc      	bpl.n	8010282 <_dtoa_r+0xa72>
 80102c8:	2b39      	cmp	r3, #57	; 0x39
 80102ca:	d1d8      	bne.n	801027e <_dtoa_r+0xa6e>
 80102cc:	9a02      	ldr	r2, [sp, #8]
 80102ce:	2339      	movs	r3, #57	; 0x39
 80102d0:	7013      	strb	r3, [r2, #0]
 80102d2:	462b      	mov	r3, r5
 80102d4:	461d      	mov	r5, r3
 80102d6:	3b01      	subs	r3, #1
 80102d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102dc:	2a39      	cmp	r2, #57	; 0x39
 80102de:	d050      	beq.n	8010382 <_dtoa_r+0xb72>
 80102e0:	3201      	adds	r2, #1
 80102e2:	701a      	strb	r2, [r3, #0]
 80102e4:	e745      	b.n	8010172 <_dtoa_r+0x962>
 80102e6:	2a00      	cmp	r2, #0
 80102e8:	dd03      	ble.n	80102f2 <_dtoa_r+0xae2>
 80102ea:	2b39      	cmp	r3, #57	; 0x39
 80102ec:	d0ee      	beq.n	80102cc <_dtoa_r+0xabc>
 80102ee:	3301      	adds	r3, #1
 80102f0:	e7c7      	b.n	8010282 <_dtoa_r+0xa72>
 80102f2:	9a01      	ldr	r2, [sp, #4]
 80102f4:	9907      	ldr	r1, [sp, #28]
 80102f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80102fa:	428a      	cmp	r2, r1
 80102fc:	d02a      	beq.n	8010354 <_dtoa_r+0xb44>
 80102fe:	4659      	mov	r1, fp
 8010300:	2300      	movs	r3, #0
 8010302:	220a      	movs	r2, #10
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fd49 	bl	8010d9c <__multadd>
 801030a:	45b8      	cmp	r8, r7
 801030c:	4683      	mov	fp, r0
 801030e:	f04f 0300 	mov.w	r3, #0
 8010312:	f04f 020a 	mov.w	r2, #10
 8010316:	4641      	mov	r1, r8
 8010318:	4620      	mov	r0, r4
 801031a:	d107      	bne.n	801032c <_dtoa_r+0xb1c>
 801031c:	f000 fd3e 	bl	8010d9c <__multadd>
 8010320:	4680      	mov	r8, r0
 8010322:	4607      	mov	r7, r0
 8010324:	9b01      	ldr	r3, [sp, #4]
 8010326:	3301      	adds	r3, #1
 8010328:	9301      	str	r3, [sp, #4]
 801032a:	e775      	b.n	8010218 <_dtoa_r+0xa08>
 801032c:	f000 fd36 	bl	8010d9c <__multadd>
 8010330:	4639      	mov	r1, r7
 8010332:	4680      	mov	r8, r0
 8010334:	2300      	movs	r3, #0
 8010336:	220a      	movs	r2, #10
 8010338:	4620      	mov	r0, r4
 801033a:	f000 fd2f 	bl	8010d9c <__multadd>
 801033e:	4607      	mov	r7, r0
 8010340:	e7f0      	b.n	8010324 <_dtoa_r+0xb14>
 8010342:	f1b9 0f00 	cmp.w	r9, #0
 8010346:	9a00      	ldr	r2, [sp, #0]
 8010348:	bfcc      	ite	gt
 801034a:	464d      	movgt	r5, r9
 801034c:	2501      	movle	r5, #1
 801034e:	4415      	add	r5, r2
 8010350:	f04f 0800 	mov.w	r8, #0
 8010354:	4659      	mov	r1, fp
 8010356:	2201      	movs	r2, #1
 8010358:	4620      	mov	r0, r4
 801035a:	9301      	str	r3, [sp, #4]
 801035c:	f000 ff18 	bl	8011190 <__lshift>
 8010360:	4631      	mov	r1, r6
 8010362:	4683      	mov	fp, r0
 8010364:	f000 ff80 	bl	8011268 <__mcmp>
 8010368:	2800      	cmp	r0, #0
 801036a:	dcb2      	bgt.n	80102d2 <_dtoa_r+0xac2>
 801036c:	d102      	bne.n	8010374 <_dtoa_r+0xb64>
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	07db      	lsls	r3, r3, #31
 8010372:	d4ae      	bmi.n	80102d2 <_dtoa_r+0xac2>
 8010374:	462b      	mov	r3, r5
 8010376:	461d      	mov	r5, r3
 8010378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801037c:	2a30      	cmp	r2, #48	; 0x30
 801037e:	d0fa      	beq.n	8010376 <_dtoa_r+0xb66>
 8010380:	e6f7      	b.n	8010172 <_dtoa_r+0x962>
 8010382:	9a00      	ldr	r2, [sp, #0]
 8010384:	429a      	cmp	r2, r3
 8010386:	d1a5      	bne.n	80102d4 <_dtoa_r+0xac4>
 8010388:	f10a 0a01 	add.w	sl, sl, #1
 801038c:	2331      	movs	r3, #49	; 0x31
 801038e:	e779      	b.n	8010284 <_dtoa_r+0xa74>
 8010390:	4b13      	ldr	r3, [pc, #76]	; (80103e0 <_dtoa_r+0xbd0>)
 8010392:	f7ff baaf 	b.w	800f8f4 <_dtoa_r+0xe4>
 8010396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010398:	2b00      	cmp	r3, #0
 801039a:	f47f aa86 	bne.w	800f8aa <_dtoa_r+0x9a>
 801039e:	4b11      	ldr	r3, [pc, #68]	; (80103e4 <_dtoa_r+0xbd4>)
 80103a0:	f7ff baa8 	b.w	800f8f4 <_dtoa_r+0xe4>
 80103a4:	f1b9 0f00 	cmp.w	r9, #0
 80103a8:	dc03      	bgt.n	80103b2 <_dtoa_r+0xba2>
 80103aa:	9b05      	ldr	r3, [sp, #20]
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	f73f aec9 	bgt.w	8010144 <_dtoa_r+0x934>
 80103b2:	9d00      	ldr	r5, [sp, #0]
 80103b4:	4631      	mov	r1, r6
 80103b6:	4658      	mov	r0, fp
 80103b8:	f7ff f99e 	bl	800f6f8 <quorem>
 80103bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80103c0:	f805 3b01 	strb.w	r3, [r5], #1
 80103c4:	9a00      	ldr	r2, [sp, #0]
 80103c6:	1aaa      	subs	r2, r5, r2
 80103c8:	4591      	cmp	r9, r2
 80103ca:	ddba      	ble.n	8010342 <_dtoa_r+0xb32>
 80103cc:	4659      	mov	r1, fp
 80103ce:	2300      	movs	r3, #0
 80103d0:	220a      	movs	r2, #10
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 fce2 	bl	8010d9c <__multadd>
 80103d8:	4683      	mov	fp, r0
 80103da:	e7eb      	b.n	80103b4 <_dtoa_r+0xba4>
 80103dc:	08012e70 	.word	0x08012e70
 80103e0:	08013071 	.word	0x08013071
 80103e4:	08012ded 	.word	0x08012ded

080103e8 <__sflush_r>:
 80103e8:	898a      	ldrh	r2, [r1, #12]
 80103ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	4605      	mov	r5, r0
 80103f0:	0710      	lsls	r0, r2, #28
 80103f2:	460c      	mov	r4, r1
 80103f4:	d458      	bmi.n	80104a8 <__sflush_r+0xc0>
 80103f6:	684b      	ldr	r3, [r1, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	dc05      	bgt.n	8010408 <__sflush_r+0x20>
 80103fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103fe:	2b00      	cmp	r3, #0
 8010400:	dc02      	bgt.n	8010408 <__sflush_r+0x20>
 8010402:	2000      	movs	r0, #0
 8010404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801040a:	2e00      	cmp	r6, #0
 801040c:	d0f9      	beq.n	8010402 <__sflush_r+0x1a>
 801040e:	2300      	movs	r3, #0
 8010410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010414:	682f      	ldr	r7, [r5, #0]
 8010416:	602b      	str	r3, [r5, #0]
 8010418:	d032      	beq.n	8010480 <__sflush_r+0x98>
 801041a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	075a      	lsls	r2, r3, #29
 8010420:	d505      	bpl.n	801042e <__sflush_r+0x46>
 8010422:	6863      	ldr	r3, [r4, #4]
 8010424:	1ac0      	subs	r0, r0, r3
 8010426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010428:	b10b      	cbz	r3, 801042e <__sflush_r+0x46>
 801042a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801042c:	1ac0      	subs	r0, r0, r3
 801042e:	2300      	movs	r3, #0
 8010430:	4602      	mov	r2, r0
 8010432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010434:	6a21      	ldr	r1, [r4, #32]
 8010436:	4628      	mov	r0, r5
 8010438:	47b0      	blx	r6
 801043a:	1c43      	adds	r3, r0, #1
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	d106      	bne.n	801044e <__sflush_r+0x66>
 8010440:	6829      	ldr	r1, [r5, #0]
 8010442:	291d      	cmp	r1, #29
 8010444:	d82c      	bhi.n	80104a0 <__sflush_r+0xb8>
 8010446:	4a2a      	ldr	r2, [pc, #168]	; (80104f0 <__sflush_r+0x108>)
 8010448:	40ca      	lsrs	r2, r1
 801044a:	07d6      	lsls	r6, r2, #31
 801044c:	d528      	bpl.n	80104a0 <__sflush_r+0xb8>
 801044e:	2200      	movs	r2, #0
 8010450:	6062      	str	r2, [r4, #4]
 8010452:	04d9      	lsls	r1, r3, #19
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	6022      	str	r2, [r4, #0]
 8010458:	d504      	bpl.n	8010464 <__sflush_r+0x7c>
 801045a:	1c42      	adds	r2, r0, #1
 801045c:	d101      	bne.n	8010462 <__sflush_r+0x7a>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b903      	cbnz	r3, 8010464 <__sflush_r+0x7c>
 8010462:	6560      	str	r0, [r4, #84]	; 0x54
 8010464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010466:	602f      	str	r7, [r5, #0]
 8010468:	2900      	cmp	r1, #0
 801046a:	d0ca      	beq.n	8010402 <__sflush_r+0x1a>
 801046c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010470:	4299      	cmp	r1, r3
 8010472:	d002      	beq.n	801047a <__sflush_r+0x92>
 8010474:	4628      	mov	r0, r5
 8010476:	f7fd f941 	bl	800d6fc <_free_r>
 801047a:	2000      	movs	r0, #0
 801047c:	6360      	str	r0, [r4, #52]	; 0x34
 801047e:	e7c1      	b.n	8010404 <__sflush_r+0x1c>
 8010480:	6a21      	ldr	r1, [r4, #32]
 8010482:	2301      	movs	r3, #1
 8010484:	4628      	mov	r0, r5
 8010486:	47b0      	blx	r6
 8010488:	1c41      	adds	r1, r0, #1
 801048a:	d1c7      	bne.n	801041c <__sflush_r+0x34>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d0c4      	beq.n	801041c <__sflush_r+0x34>
 8010492:	2b1d      	cmp	r3, #29
 8010494:	d001      	beq.n	801049a <__sflush_r+0xb2>
 8010496:	2b16      	cmp	r3, #22
 8010498:	d101      	bne.n	801049e <__sflush_r+0xb6>
 801049a:	602f      	str	r7, [r5, #0]
 801049c:	e7b1      	b.n	8010402 <__sflush_r+0x1a>
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a4:	81a3      	strh	r3, [r4, #12]
 80104a6:	e7ad      	b.n	8010404 <__sflush_r+0x1c>
 80104a8:	690f      	ldr	r7, [r1, #16]
 80104aa:	2f00      	cmp	r7, #0
 80104ac:	d0a9      	beq.n	8010402 <__sflush_r+0x1a>
 80104ae:	0793      	lsls	r3, r2, #30
 80104b0:	680e      	ldr	r6, [r1, #0]
 80104b2:	bf08      	it	eq
 80104b4:	694b      	ldreq	r3, [r1, #20]
 80104b6:	600f      	str	r7, [r1, #0]
 80104b8:	bf18      	it	ne
 80104ba:	2300      	movne	r3, #0
 80104bc:	eba6 0807 	sub.w	r8, r6, r7
 80104c0:	608b      	str	r3, [r1, #8]
 80104c2:	f1b8 0f00 	cmp.w	r8, #0
 80104c6:	dd9c      	ble.n	8010402 <__sflush_r+0x1a>
 80104c8:	6a21      	ldr	r1, [r4, #32]
 80104ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104cc:	4643      	mov	r3, r8
 80104ce:	463a      	mov	r2, r7
 80104d0:	4628      	mov	r0, r5
 80104d2:	47b0      	blx	r6
 80104d4:	2800      	cmp	r0, #0
 80104d6:	dc06      	bgt.n	80104e6 <__sflush_r+0xfe>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104de:	81a3      	strh	r3, [r4, #12]
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
 80104e4:	e78e      	b.n	8010404 <__sflush_r+0x1c>
 80104e6:	4407      	add	r7, r0
 80104e8:	eba8 0800 	sub.w	r8, r8, r0
 80104ec:	e7e9      	b.n	80104c2 <__sflush_r+0xda>
 80104ee:	bf00      	nop
 80104f0:	20400001 	.word	0x20400001

080104f4 <_fflush_r>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	690b      	ldr	r3, [r1, #16]
 80104f8:	4605      	mov	r5, r0
 80104fa:	460c      	mov	r4, r1
 80104fc:	b913      	cbnz	r3, 8010504 <_fflush_r+0x10>
 80104fe:	2500      	movs	r5, #0
 8010500:	4628      	mov	r0, r5
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	b118      	cbz	r0, 801050e <_fflush_r+0x1a>
 8010506:	6983      	ldr	r3, [r0, #24]
 8010508:	b90b      	cbnz	r3, 801050e <_fflush_r+0x1a>
 801050a:	f7fc fff1 	bl	800d4f0 <__sinit>
 801050e:	4b14      	ldr	r3, [pc, #80]	; (8010560 <_fflush_r+0x6c>)
 8010510:	429c      	cmp	r4, r3
 8010512:	d11b      	bne.n	801054c <_fflush_r+0x58>
 8010514:	686c      	ldr	r4, [r5, #4]
 8010516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d0ef      	beq.n	80104fe <_fflush_r+0xa>
 801051e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010520:	07d0      	lsls	r0, r2, #31
 8010522:	d404      	bmi.n	801052e <_fflush_r+0x3a>
 8010524:	0599      	lsls	r1, r3, #22
 8010526:	d402      	bmi.n	801052e <_fflush_r+0x3a>
 8010528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801052a:	f7fd f8a4 	bl	800d676 <__retarget_lock_acquire_recursive>
 801052e:	4628      	mov	r0, r5
 8010530:	4621      	mov	r1, r4
 8010532:	f7ff ff59 	bl	80103e8 <__sflush_r>
 8010536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010538:	07da      	lsls	r2, r3, #31
 801053a:	4605      	mov	r5, r0
 801053c:	d4e0      	bmi.n	8010500 <_fflush_r+0xc>
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	059b      	lsls	r3, r3, #22
 8010542:	d4dd      	bmi.n	8010500 <_fflush_r+0xc>
 8010544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010546:	f7fd f897 	bl	800d678 <__retarget_lock_release_recursive>
 801054a:	e7d9      	b.n	8010500 <_fflush_r+0xc>
 801054c:	4b05      	ldr	r3, [pc, #20]	; (8010564 <_fflush_r+0x70>)
 801054e:	429c      	cmp	r4, r3
 8010550:	d101      	bne.n	8010556 <_fflush_r+0x62>
 8010552:	68ac      	ldr	r4, [r5, #8]
 8010554:	e7df      	b.n	8010516 <_fflush_r+0x22>
 8010556:	4b04      	ldr	r3, [pc, #16]	; (8010568 <_fflush_r+0x74>)
 8010558:	429c      	cmp	r4, r3
 801055a:	bf08      	it	eq
 801055c:	68ec      	ldreq	r4, [r5, #12]
 801055e:	e7da      	b.n	8010516 <_fflush_r+0x22>
 8010560:	08012be4 	.word	0x08012be4
 8010564:	08012c04 	.word	0x08012c04
 8010568:	08012bc4 	.word	0x08012bc4

0801056c <fiprintf>:
 801056c:	b40e      	push	{r1, r2, r3}
 801056e:	b503      	push	{r0, r1, lr}
 8010570:	4601      	mov	r1, r0
 8010572:	ab03      	add	r3, sp, #12
 8010574:	4805      	ldr	r0, [pc, #20]	; (801058c <fiprintf+0x20>)
 8010576:	f853 2b04 	ldr.w	r2, [r3], #4
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	f001 fbf3 	bl	8011d68 <_vfiprintf_r>
 8010582:	b002      	add	sp, #8
 8010584:	f85d eb04 	ldr.w	lr, [sp], #4
 8010588:	b003      	add	sp, #12
 801058a:	4770      	bx	lr
 801058c:	20000030 	.word	0x20000030

08010590 <rshift>:
 8010590:	6903      	ldr	r3, [r0, #16]
 8010592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801059a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801059e:	f100 0414 	add.w	r4, r0, #20
 80105a2:	dd45      	ble.n	8010630 <rshift+0xa0>
 80105a4:	f011 011f 	ands.w	r1, r1, #31
 80105a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105b0:	d10c      	bne.n	80105cc <rshift+0x3c>
 80105b2:	f100 0710 	add.w	r7, r0, #16
 80105b6:	4629      	mov	r1, r5
 80105b8:	42b1      	cmp	r1, r6
 80105ba:	d334      	bcc.n	8010626 <rshift+0x96>
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	1eea      	subs	r2, r5, #3
 80105c2:	4296      	cmp	r6, r2
 80105c4:	bf38      	it	cc
 80105c6:	2300      	movcc	r3, #0
 80105c8:	4423      	add	r3, r4
 80105ca:	e015      	b.n	80105f8 <rshift+0x68>
 80105cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80105d0:	f1c1 0820 	rsb	r8, r1, #32
 80105d4:	40cf      	lsrs	r7, r1
 80105d6:	f105 0e04 	add.w	lr, r5, #4
 80105da:	46a1      	mov	r9, r4
 80105dc:	4576      	cmp	r6, lr
 80105de:	46f4      	mov	ip, lr
 80105e0:	d815      	bhi.n	801060e <rshift+0x7e>
 80105e2:	1a9b      	subs	r3, r3, r2
 80105e4:	009a      	lsls	r2, r3, #2
 80105e6:	3a04      	subs	r2, #4
 80105e8:	3501      	adds	r5, #1
 80105ea:	42ae      	cmp	r6, r5
 80105ec:	bf38      	it	cc
 80105ee:	2200      	movcc	r2, #0
 80105f0:	18a3      	adds	r3, r4, r2
 80105f2:	50a7      	str	r7, [r4, r2]
 80105f4:	b107      	cbz	r7, 80105f8 <rshift+0x68>
 80105f6:	3304      	adds	r3, #4
 80105f8:	1b1a      	subs	r2, r3, r4
 80105fa:	42a3      	cmp	r3, r4
 80105fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010600:	bf08      	it	eq
 8010602:	2300      	moveq	r3, #0
 8010604:	6102      	str	r2, [r0, #16]
 8010606:	bf08      	it	eq
 8010608:	6143      	streq	r3, [r0, #20]
 801060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801060e:	f8dc c000 	ldr.w	ip, [ip]
 8010612:	fa0c fc08 	lsl.w	ip, ip, r8
 8010616:	ea4c 0707 	orr.w	r7, ip, r7
 801061a:	f849 7b04 	str.w	r7, [r9], #4
 801061e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010622:	40cf      	lsrs	r7, r1
 8010624:	e7da      	b.n	80105dc <rshift+0x4c>
 8010626:	f851 cb04 	ldr.w	ip, [r1], #4
 801062a:	f847 cf04 	str.w	ip, [r7, #4]!
 801062e:	e7c3      	b.n	80105b8 <rshift+0x28>
 8010630:	4623      	mov	r3, r4
 8010632:	e7e1      	b.n	80105f8 <rshift+0x68>

08010634 <__hexdig_fun>:
 8010634:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010638:	2b09      	cmp	r3, #9
 801063a:	d802      	bhi.n	8010642 <__hexdig_fun+0xe>
 801063c:	3820      	subs	r0, #32
 801063e:	b2c0      	uxtb	r0, r0
 8010640:	4770      	bx	lr
 8010642:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010646:	2b05      	cmp	r3, #5
 8010648:	d801      	bhi.n	801064e <__hexdig_fun+0x1a>
 801064a:	3847      	subs	r0, #71	; 0x47
 801064c:	e7f7      	b.n	801063e <__hexdig_fun+0xa>
 801064e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010652:	2b05      	cmp	r3, #5
 8010654:	d801      	bhi.n	801065a <__hexdig_fun+0x26>
 8010656:	3827      	subs	r0, #39	; 0x27
 8010658:	e7f1      	b.n	801063e <__hexdig_fun+0xa>
 801065a:	2000      	movs	r0, #0
 801065c:	4770      	bx	lr
	...

08010660 <__gethex>:
 8010660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010664:	ed2d 8b02 	vpush	{d8}
 8010668:	b089      	sub	sp, #36	; 0x24
 801066a:	ee08 0a10 	vmov	s16, r0
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	4bbc      	ldr	r3, [pc, #752]	; (8010964 <__gethex+0x304>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	468b      	mov	fp, r1
 801067a:	4690      	mov	r8, r2
 801067c:	f7ef fdb8 	bl	80001f0 <strlen>
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	f8db 2000 	ldr.w	r2, [fp]
 8010686:	4403      	add	r3, r0
 8010688:	4682      	mov	sl, r0
 801068a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801068e:	9305      	str	r3, [sp, #20]
 8010690:	1c93      	adds	r3, r2, #2
 8010692:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010696:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801069a:	32fe      	adds	r2, #254	; 0xfe
 801069c:	18d1      	adds	r1, r2, r3
 801069e:	461f      	mov	r7, r3
 80106a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106a4:	9100      	str	r1, [sp, #0]
 80106a6:	2830      	cmp	r0, #48	; 0x30
 80106a8:	d0f8      	beq.n	801069c <__gethex+0x3c>
 80106aa:	f7ff ffc3 	bl	8010634 <__hexdig_fun>
 80106ae:	4604      	mov	r4, r0
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d13a      	bne.n	801072a <__gethex+0xca>
 80106b4:	9901      	ldr	r1, [sp, #4]
 80106b6:	4652      	mov	r2, sl
 80106b8:	4638      	mov	r0, r7
 80106ba:	f7fe f898 	bl	800e7ee <strncmp>
 80106be:	4605      	mov	r5, r0
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d168      	bne.n	8010796 <__gethex+0x136>
 80106c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80106c8:	eb07 060a 	add.w	r6, r7, sl
 80106cc:	f7ff ffb2 	bl	8010634 <__hexdig_fun>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d062      	beq.n	801079a <__gethex+0x13a>
 80106d4:	4633      	mov	r3, r6
 80106d6:	7818      	ldrb	r0, [r3, #0]
 80106d8:	2830      	cmp	r0, #48	; 0x30
 80106da:	461f      	mov	r7, r3
 80106dc:	f103 0301 	add.w	r3, r3, #1
 80106e0:	d0f9      	beq.n	80106d6 <__gethex+0x76>
 80106e2:	f7ff ffa7 	bl	8010634 <__hexdig_fun>
 80106e6:	2301      	movs	r3, #1
 80106e8:	fab0 f480 	clz	r4, r0
 80106ec:	0964      	lsrs	r4, r4, #5
 80106ee:	4635      	mov	r5, r6
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	463a      	mov	r2, r7
 80106f4:	4616      	mov	r6, r2
 80106f6:	3201      	adds	r2, #1
 80106f8:	7830      	ldrb	r0, [r6, #0]
 80106fa:	f7ff ff9b 	bl	8010634 <__hexdig_fun>
 80106fe:	2800      	cmp	r0, #0
 8010700:	d1f8      	bne.n	80106f4 <__gethex+0x94>
 8010702:	9901      	ldr	r1, [sp, #4]
 8010704:	4652      	mov	r2, sl
 8010706:	4630      	mov	r0, r6
 8010708:	f7fe f871 	bl	800e7ee <strncmp>
 801070c:	b980      	cbnz	r0, 8010730 <__gethex+0xd0>
 801070e:	b94d      	cbnz	r5, 8010724 <__gethex+0xc4>
 8010710:	eb06 050a 	add.w	r5, r6, sl
 8010714:	462a      	mov	r2, r5
 8010716:	4616      	mov	r6, r2
 8010718:	3201      	adds	r2, #1
 801071a:	7830      	ldrb	r0, [r6, #0]
 801071c:	f7ff ff8a 	bl	8010634 <__hexdig_fun>
 8010720:	2800      	cmp	r0, #0
 8010722:	d1f8      	bne.n	8010716 <__gethex+0xb6>
 8010724:	1bad      	subs	r5, r5, r6
 8010726:	00ad      	lsls	r5, r5, #2
 8010728:	e004      	b.n	8010734 <__gethex+0xd4>
 801072a:	2400      	movs	r4, #0
 801072c:	4625      	mov	r5, r4
 801072e:	e7e0      	b.n	80106f2 <__gethex+0x92>
 8010730:	2d00      	cmp	r5, #0
 8010732:	d1f7      	bne.n	8010724 <__gethex+0xc4>
 8010734:	7833      	ldrb	r3, [r6, #0]
 8010736:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801073a:	2b50      	cmp	r3, #80	; 0x50
 801073c:	d13b      	bne.n	80107b6 <__gethex+0x156>
 801073e:	7873      	ldrb	r3, [r6, #1]
 8010740:	2b2b      	cmp	r3, #43	; 0x2b
 8010742:	d02c      	beq.n	801079e <__gethex+0x13e>
 8010744:	2b2d      	cmp	r3, #45	; 0x2d
 8010746:	d02e      	beq.n	80107a6 <__gethex+0x146>
 8010748:	1c71      	adds	r1, r6, #1
 801074a:	f04f 0900 	mov.w	r9, #0
 801074e:	7808      	ldrb	r0, [r1, #0]
 8010750:	f7ff ff70 	bl	8010634 <__hexdig_fun>
 8010754:	1e43      	subs	r3, r0, #1
 8010756:	b2db      	uxtb	r3, r3
 8010758:	2b18      	cmp	r3, #24
 801075a:	d82c      	bhi.n	80107b6 <__gethex+0x156>
 801075c:	f1a0 0210 	sub.w	r2, r0, #16
 8010760:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010764:	f7ff ff66 	bl	8010634 <__hexdig_fun>
 8010768:	1e43      	subs	r3, r0, #1
 801076a:	b2db      	uxtb	r3, r3
 801076c:	2b18      	cmp	r3, #24
 801076e:	d91d      	bls.n	80107ac <__gethex+0x14c>
 8010770:	f1b9 0f00 	cmp.w	r9, #0
 8010774:	d000      	beq.n	8010778 <__gethex+0x118>
 8010776:	4252      	negs	r2, r2
 8010778:	4415      	add	r5, r2
 801077a:	f8cb 1000 	str.w	r1, [fp]
 801077e:	b1e4      	cbz	r4, 80107ba <__gethex+0x15a>
 8010780:	9b00      	ldr	r3, [sp, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	bf14      	ite	ne
 8010786:	2700      	movne	r7, #0
 8010788:	2706      	moveq	r7, #6
 801078a:	4638      	mov	r0, r7
 801078c:	b009      	add	sp, #36	; 0x24
 801078e:	ecbd 8b02 	vpop	{d8}
 8010792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010796:	463e      	mov	r6, r7
 8010798:	4625      	mov	r5, r4
 801079a:	2401      	movs	r4, #1
 801079c:	e7ca      	b.n	8010734 <__gethex+0xd4>
 801079e:	f04f 0900 	mov.w	r9, #0
 80107a2:	1cb1      	adds	r1, r6, #2
 80107a4:	e7d3      	b.n	801074e <__gethex+0xee>
 80107a6:	f04f 0901 	mov.w	r9, #1
 80107aa:	e7fa      	b.n	80107a2 <__gethex+0x142>
 80107ac:	230a      	movs	r3, #10
 80107ae:	fb03 0202 	mla	r2, r3, r2, r0
 80107b2:	3a10      	subs	r2, #16
 80107b4:	e7d4      	b.n	8010760 <__gethex+0x100>
 80107b6:	4631      	mov	r1, r6
 80107b8:	e7df      	b.n	801077a <__gethex+0x11a>
 80107ba:	1bf3      	subs	r3, r6, r7
 80107bc:	3b01      	subs	r3, #1
 80107be:	4621      	mov	r1, r4
 80107c0:	2b07      	cmp	r3, #7
 80107c2:	dc0b      	bgt.n	80107dc <__gethex+0x17c>
 80107c4:	ee18 0a10 	vmov	r0, s16
 80107c8:	f000 fa86 	bl	8010cd8 <_Balloc>
 80107cc:	4604      	mov	r4, r0
 80107ce:	b940      	cbnz	r0, 80107e2 <__gethex+0x182>
 80107d0:	4b65      	ldr	r3, [pc, #404]	; (8010968 <__gethex+0x308>)
 80107d2:	4602      	mov	r2, r0
 80107d4:	21de      	movs	r1, #222	; 0xde
 80107d6:	4865      	ldr	r0, [pc, #404]	; (801096c <__gethex+0x30c>)
 80107d8:	f7fe ff60 	bl	800f69c <__assert_func>
 80107dc:	3101      	adds	r1, #1
 80107de:	105b      	asrs	r3, r3, #1
 80107e0:	e7ee      	b.n	80107c0 <__gethex+0x160>
 80107e2:	f100 0914 	add.w	r9, r0, #20
 80107e6:	f04f 0b00 	mov.w	fp, #0
 80107ea:	f1ca 0301 	rsb	r3, sl, #1
 80107ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80107f2:	f8cd b000 	str.w	fp, [sp]
 80107f6:	9306      	str	r3, [sp, #24]
 80107f8:	42b7      	cmp	r7, r6
 80107fa:	d340      	bcc.n	801087e <__gethex+0x21e>
 80107fc:	9802      	ldr	r0, [sp, #8]
 80107fe:	9b00      	ldr	r3, [sp, #0]
 8010800:	f840 3b04 	str.w	r3, [r0], #4
 8010804:	eba0 0009 	sub.w	r0, r0, r9
 8010808:	1080      	asrs	r0, r0, #2
 801080a:	0146      	lsls	r6, r0, #5
 801080c:	6120      	str	r0, [r4, #16]
 801080e:	4618      	mov	r0, r3
 8010810:	f000 fb58 	bl	8010ec4 <__hi0bits>
 8010814:	1a30      	subs	r0, r6, r0
 8010816:	f8d8 6000 	ldr.w	r6, [r8]
 801081a:	42b0      	cmp	r0, r6
 801081c:	dd63      	ble.n	80108e6 <__gethex+0x286>
 801081e:	1b87      	subs	r7, r0, r6
 8010820:	4639      	mov	r1, r7
 8010822:	4620      	mov	r0, r4
 8010824:	f000 fef2 	bl	801160c <__any_on>
 8010828:	4682      	mov	sl, r0
 801082a:	b1a8      	cbz	r0, 8010858 <__gethex+0x1f8>
 801082c:	1e7b      	subs	r3, r7, #1
 801082e:	1159      	asrs	r1, r3, #5
 8010830:	f003 021f 	and.w	r2, r3, #31
 8010834:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010838:	f04f 0a01 	mov.w	sl, #1
 801083c:	fa0a f202 	lsl.w	r2, sl, r2
 8010840:	420a      	tst	r2, r1
 8010842:	d009      	beq.n	8010858 <__gethex+0x1f8>
 8010844:	4553      	cmp	r3, sl
 8010846:	dd05      	ble.n	8010854 <__gethex+0x1f4>
 8010848:	1eb9      	subs	r1, r7, #2
 801084a:	4620      	mov	r0, r4
 801084c:	f000 fede 	bl	801160c <__any_on>
 8010850:	2800      	cmp	r0, #0
 8010852:	d145      	bne.n	80108e0 <__gethex+0x280>
 8010854:	f04f 0a02 	mov.w	sl, #2
 8010858:	4639      	mov	r1, r7
 801085a:	4620      	mov	r0, r4
 801085c:	f7ff fe98 	bl	8010590 <rshift>
 8010860:	443d      	add	r5, r7
 8010862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010866:	42ab      	cmp	r3, r5
 8010868:	da4c      	bge.n	8010904 <__gethex+0x2a4>
 801086a:	ee18 0a10 	vmov	r0, s16
 801086e:	4621      	mov	r1, r4
 8010870:	f000 fa72 	bl	8010d58 <_Bfree>
 8010874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010876:	2300      	movs	r3, #0
 8010878:	6013      	str	r3, [r2, #0]
 801087a:	27a3      	movs	r7, #163	; 0xa3
 801087c:	e785      	b.n	801078a <__gethex+0x12a>
 801087e:	1e73      	subs	r3, r6, #1
 8010880:	9a05      	ldr	r2, [sp, #20]
 8010882:	9303      	str	r3, [sp, #12]
 8010884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010888:	4293      	cmp	r3, r2
 801088a:	d019      	beq.n	80108c0 <__gethex+0x260>
 801088c:	f1bb 0f20 	cmp.w	fp, #32
 8010890:	d107      	bne.n	80108a2 <__gethex+0x242>
 8010892:	9b02      	ldr	r3, [sp, #8]
 8010894:	9a00      	ldr	r2, [sp, #0]
 8010896:	f843 2b04 	str.w	r2, [r3], #4
 801089a:	9302      	str	r3, [sp, #8]
 801089c:	2300      	movs	r3, #0
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	469b      	mov	fp, r3
 80108a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80108a6:	f7ff fec5 	bl	8010634 <__hexdig_fun>
 80108aa:	9b00      	ldr	r3, [sp, #0]
 80108ac:	f000 000f 	and.w	r0, r0, #15
 80108b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80108b4:	4303      	orrs	r3, r0
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	f10b 0b04 	add.w	fp, fp, #4
 80108bc:	9b03      	ldr	r3, [sp, #12]
 80108be:	e00d      	b.n	80108dc <__gethex+0x27c>
 80108c0:	9b03      	ldr	r3, [sp, #12]
 80108c2:	9a06      	ldr	r2, [sp, #24]
 80108c4:	4413      	add	r3, r2
 80108c6:	42bb      	cmp	r3, r7
 80108c8:	d3e0      	bcc.n	801088c <__gethex+0x22c>
 80108ca:	4618      	mov	r0, r3
 80108cc:	9901      	ldr	r1, [sp, #4]
 80108ce:	9307      	str	r3, [sp, #28]
 80108d0:	4652      	mov	r2, sl
 80108d2:	f7fd ff8c 	bl	800e7ee <strncmp>
 80108d6:	9b07      	ldr	r3, [sp, #28]
 80108d8:	2800      	cmp	r0, #0
 80108da:	d1d7      	bne.n	801088c <__gethex+0x22c>
 80108dc:	461e      	mov	r6, r3
 80108de:	e78b      	b.n	80107f8 <__gethex+0x198>
 80108e0:	f04f 0a03 	mov.w	sl, #3
 80108e4:	e7b8      	b.n	8010858 <__gethex+0x1f8>
 80108e6:	da0a      	bge.n	80108fe <__gethex+0x29e>
 80108e8:	1a37      	subs	r7, r6, r0
 80108ea:	4621      	mov	r1, r4
 80108ec:	ee18 0a10 	vmov	r0, s16
 80108f0:	463a      	mov	r2, r7
 80108f2:	f000 fc4d 	bl	8011190 <__lshift>
 80108f6:	1bed      	subs	r5, r5, r7
 80108f8:	4604      	mov	r4, r0
 80108fa:	f100 0914 	add.w	r9, r0, #20
 80108fe:	f04f 0a00 	mov.w	sl, #0
 8010902:	e7ae      	b.n	8010862 <__gethex+0x202>
 8010904:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010908:	42a8      	cmp	r0, r5
 801090a:	dd72      	ble.n	80109f2 <__gethex+0x392>
 801090c:	1b45      	subs	r5, r0, r5
 801090e:	42ae      	cmp	r6, r5
 8010910:	dc36      	bgt.n	8010980 <__gethex+0x320>
 8010912:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010916:	2b02      	cmp	r3, #2
 8010918:	d02a      	beq.n	8010970 <__gethex+0x310>
 801091a:	2b03      	cmp	r3, #3
 801091c:	d02c      	beq.n	8010978 <__gethex+0x318>
 801091e:	2b01      	cmp	r3, #1
 8010920:	d115      	bne.n	801094e <__gethex+0x2ee>
 8010922:	42ae      	cmp	r6, r5
 8010924:	d113      	bne.n	801094e <__gethex+0x2ee>
 8010926:	2e01      	cmp	r6, #1
 8010928:	d10b      	bne.n	8010942 <__gethex+0x2e2>
 801092a:	9a04      	ldr	r2, [sp, #16]
 801092c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	2301      	movs	r3, #1
 8010934:	6123      	str	r3, [r4, #16]
 8010936:	f8c9 3000 	str.w	r3, [r9]
 801093a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801093c:	2762      	movs	r7, #98	; 0x62
 801093e:	601c      	str	r4, [r3, #0]
 8010940:	e723      	b.n	801078a <__gethex+0x12a>
 8010942:	1e71      	subs	r1, r6, #1
 8010944:	4620      	mov	r0, r4
 8010946:	f000 fe61 	bl	801160c <__any_on>
 801094a:	2800      	cmp	r0, #0
 801094c:	d1ed      	bne.n	801092a <__gethex+0x2ca>
 801094e:	ee18 0a10 	vmov	r0, s16
 8010952:	4621      	mov	r1, r4
 8010954:	f000 fa00 	bl	8010d58 <_Bfree>
 8010958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801095a:	2300      	movs	r3, #0
 801095c:	6013      	str	r3, [r2, #0]
 801095e:	2750      	movs	r7, #80	; 0x50
 8010960:	e713      	b.n	801078a <__gethex+0x12a>
 8010962:	bf00      	nop
 8010964:	08012eec 	.word	0x08012eec
 8010968:	08012e70 	.word	0x08012e70
 801096c:	08012e81 	.word	0x08012e81
 8010970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010972:	2b00      	cmp	r3, #0
 8010974:	d1eb      	bne.n	801094e <__gethex+0x2ee>
 8010976:	e7d8      	b.n	801092a <__gethex+0x2ca>
 8010978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1d5      	bne.n	801092a <__gethex+0x2ca>
 801097e:	e7e6      	b.n	801094e <__gethex+0x2ee>
 8010980:	1e6f      	subs	r7, r5, #1
 8010982:	f1ba 0f00 	cmp.w	sl, #0
 8010986:	d131      	bne.n	80109ec <__gethex+0x38c>
 8010988:	b127      	cbz	r7, 8010994 <__gethex+0x334>
 801098a:	4639      	mov	r1, r7
 801098c:	4620      	mov	r0, r4
 801098e:	f000 fe3d 	bl	801160c <__any_on>
 8010992:	4682      	mov	sl, r0
 8010994:	117b      	asrs	r3, r7, #5
 8010996:	2101      	movs	r1, #1
 8010998:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801099c:	f007 071f 	and.w	r7, r7, #31
 80109a0:	fa01 f707 	lsl.w	r7, r1, r7
 80109a4:	421f      	tst	r7, r3
 80109a6:	4629      	mov	r1, r5
 80109a8:	4620      	mov	r0, r4
 80109aa:	bf18      	it	ne
 80109ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80109b0:	1b76      	subs	r6, r6, r5
 80109b2:	f7ff fded 	bl	8010590 <rshift>
 80109b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80109ba:	2702      	movs	r7, #2
 80109bc:	f1ba 0f00 	cmp.w	sl, #0
 80109c0:	d048      	beq.n	8010a54 <__gethex+0x3f4>
 80109c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109c6:	2b02      	cmp	r3, #2
 80109c8:	d015      	beq.n	80109f6 <__gethex+0x396>
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	d017      	beq.n	80109fe <__gethex+0x39e>
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d109      	bne.n	80109e6 <__gethex+0x386>
 80109d2:	f01a 0f02 	tst.w	sl, #2
 80109d6:	d006      	beq.n	80109e6 <__gethex+0x386>
 80109d8:	f8d9 0000 	ldr.w	r0, [r9]
 80109dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80109e0:	f01a 0f01 	tst.w	sl, #1
 80109e4:	d10e      	bne.n	8010a04 <__gethex+0x3a4>
 80109e6:	f047 0710 	orr.w	r7, r7, #16
 80109ea:	e033      	b.n	8010a54 <__gethex+0x3f4>
 80109ec:	f04f 0a01 	mov.w	sl, #1
 80109f0:	e7d0      	b.n	8010994 <__gethex+0x334>
 80109f2:	2701      	movs	r7, #1
 80109f4:	e7e2      	b.n	80109bc <__gethex+0x35c>
 80109f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109f8:	f1c3 0301 	rsb	r3, r3, #1
 80109fc:	9315      	str	r3, [sp, #84]	; 0x54
 80109fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d0f0      	beq.n	80109e6 <__gethex+0x386>
 8010a04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a08:	f104 0314 	add.w	r3, r4, #20
 8010a0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a14:	f04f 0c00 	mov.w	ip, #0
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a22:	d01c      	beq.n	8010a5e <__gethex+0x3fe>
 8010a24:	3201      	adds	r2, #1
 8010a26:	6002      	str	r2, [r0, #0]
 8010a28:	2f02      	cmp	r7, #2
 8010a2a:	f104 0314 	add.w	r3, r4, #20
 8010a2e:	d13f      	bne.n	8010ab0 <__gethex+0x450>
 8010a30:	f8d8 2000 	ldr.w	r2, [r8]
 8010a34:	3a01      	subs	r2, #1
 8010a36:	42b2      	cmp	r2, r6
 8010a38:	d10a      	bne.n	8010a50 <__gethex+0x3f0>
 8010a3a:	1171      	asrs	r1, r6, #5
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a42:	f006 061f 	and.w	r6, r6, #31
 8010a46:	fa02 f606 	lsl.w	r6, r2, r6
 8010a4a:	421e      	tst	r6, r3
 8010a4c:	bf18      	it	ne
 8010a4e:	4617      	movne	r7, r2
 8010a50:	f047 0720 	orr.w	r7, r7, #32
 8010a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a56:	601c      	str	r4, [r3, #0]
 8010a58:	9b04      	ldr	r3, [sp, #16]
 8010a5a:	601d      	str	r5, [r3, #0]
 8010a5c:	e695      	b.n	801078a <__gethex+0x12a>
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a64:	d8d8      	bhi.n	8010a18 <__gethex+0x3b8>
 8010a66:	68a3      	ldr	r3, [r4, #8]
 8010a68:	459b      	cmp	fp, r3
 8010a6a:	db19      	blt.n	8010aa0 <__gethex+0x440>
 8010a6c:	6861      	ldr	r1, [r4, #4]
 8010a6e:	ee18 0a10 	vmov	r0, s16
 8010a72:	3101      	adds	r1, #1
 8010a74:	f000 f930 	bl	8010cd8 <_Balloc>
 8010a78:	4681      	mov	r9, r0
 8010a7a:	b918      	cbnz	r0, 8010a84 <__gethex+0x424>
 8010a7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ae8 <__gethex+0x488>)
 8010a7e:	4602      	mov	r2, r0
 8010a80:	2184      	movs	r1, #132	; 0x84
 8010a82:	e6a8      	b.n	80107d6 <__gethex+0x176>
 8010a84:	6922      	ldr	r2, [r4, #16]
 8010a86:	3202      	adds	r2, #2
 8010a88:	f104 010c 	add.w	r1, r4, #12
 8010a8c:	0092      	lsls	r2, r2, #2
 8010a8e:	300c      	adds	r0, #12
 8010a90:	f7fc fe04 	bl	800d69c <memcpy>
 8010a94:	4621      	mov	r1, r4
 8010a96:	ee18 0a10 	vmov	r0, s16
 8010a9a:	f000 f95d 	bl	8010d58 <_Bfree>
 8010a9e:	464c      	mov	r4, r9
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	1c5a      	adds	r2, r3, #1
 8010aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010aa8:	6122      	str	r2, [r4, #16]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	615a      	str	r2, [r3, #20]
 8010aae:	e7bb      	b.n	8010a28 <__gethex+0x3c8>
 8010ab0:	6922      	ldr	r2, [r4, #16]
 8010ab2:	455a      	cmp	r2, fp
 8010ab4:	dd0b      	ble.n	8010ace <__gethex+0x46e>
 8010ab6:	2101      	movs	r1, #1
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f7ff fd69 	bl	8010590 <rshift>
 8010abe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ac2:	3501      	adds	r5, #1
 8010ac4:	42ab      	cmp	r3, r5
 8010ac6:	f6ff aed0 	blt.w	801086a <__gethex+0x20a>
 8010aca:	2701      	movs	r7, #1
 8010acc:	e7c0      	b.n	8010a50 <__gethex+0x3f0>
 8010ace:	f016 061f 	ands.w	r6, r6, #31
 8010ad2:	d0fa      	beq.n	8010aca <__gethex+0x46a>
 8010ad4:	449a      	add	sl, r3
 8010ad6:	f1c6 0620 	rsb	r6, r6, #32
 8010ada:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010ade:	f000 f9f1 	bl	8010ec4 <__hi0bits>
 8010ae2:	42b0      	cmp	r0, r6
 8010ae4:	dbe7      	blt.n	8010ab6 <__gethex+0x456>
 8010ae6:	e7f0      	b.n	8010aca <__gethex+0x46a>
 8010ae8:	08012e70 	.word	0x08012e70

08010aec <L_shift>:
 8010aec:	f1c2 0208 	rsb	r2, r2, #8
 8010af0:	0092      	lsls	r2, r2, #2
 8010af2:	b570      	push	{r4, r5, r6, lr}
 8010af4:	f1c2 0620 	rsb	r6, r2, #32
 8010af8:	6843      	ldr	r3, [r0, #4]
 8010afa:	6804      	ldr	r4, [r0, #0]
 8010afc:	fa03 f506 	lsl.w	r5, r3, r6
 8010b00:	432c      	orrs	r4, r5
 8010b02:	40d3      	lsrs	r3, r2
 8010b04:	6004      	str	r4, [r0, #0]
 8010b06:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b0a:	4288      	cmp	r0, r1
 8010b0c:	d3f4      	bcc.n	8010af8 <L_shift+0xc>
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}

08010b10 <__match>:
 8010b10:	b530      	push	{r4, r5, lr}
 8010b12:	6803      	ldr	r3, [r0, #0]
 8010b14:	3301      	adds	r3, #1
 8010b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b1a:	b914      	cbnz	r4, 8010b22 <__match+0x12>
 8010b1c:	6003      	str	r3, [r0, #0]
 8010b1e:	2001      	movs	r0, #1
 8010b20:	bd30      	pop	{r4, r5, pc}
 8010b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b2a:	2d19      	cmp	r5, #25
 8010b2c:	bf98      	it	ls
 8010b2e:	3220      	addls	r2, #32
 8010b30:	42a2      	cmp	r2, r4
 8010b32:	d0f0      	beq.n	8010b16 <__match+0x6>
 8010b34:	2000      	movs	r0, #0
 8010b36:	e7f3      	b.n	8010b20 <__match+0x10>

08010b38 <__hexnan>:
 8010b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3c:	680b      	ldr	r3, [r1, #0]
 8010b3e:	6801      	ldr	r1, [r0, #0]
 8010b40:	115e      	asrs	r6, r3, #5
 8010b42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b46:	f013 031f 	ands.w	r3, r3, #31
 8010b4a:	b087      	sub	sp, #28
 8010b4c:	bf18      	it	ne
 8010b4e:	3604      	addne	r6, #4
 8010b50:	2500      	movs	r5, #0
 8010b52:	1f37      	subs	r7, r6, #4
 8010b54:	4682      	mov	sl, r0
 8010b56:	4690      	mov	r8, r2
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b5e:	46b9      	mov	r9, r7
 8010b60:	463c      	mov	r4, r7
 8010b62:	9502      	str	r5, [sp, #8]
 8010b64:	46ab      	mov	fp, r5
 8010b66:	784a      	ldrb	r2, [r1, #1]
 8010b68:	1c4b      	adds	r3, r1, #1
 8010b6a:	9303      	str	r3, [sp, #12]
 8010b6c:	b342      	cbz	r2, 8010bc0 <__hexnan+0x88>
 8010b6e:	4610      	mov	r0, r2
 8010b70:	9105      	str	r1, [sp, #20]
 8010b72:	9204      	str	r2, [sp, #16]
 8010b74:	f7ff fd5e 	bl	8010634 <__hexdig_fun>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d14f      	bne.n	8010c1c <__hexnan+0xe4>
 8010b7c:	9a04      	ldr	r2, [sp, #16]
 8010b7e:	9905      	ldr	r1, [sp, #20]
 8010b80:	2a20      	cmp	r2, #32
 8010b82:	d818      	bhi.n	8010bb6 <__hexnan+0x7e>
 8010b84:	9b02      	ldr	r3, [sp, #8]
 8010b86:	459b      	cmp	fp, r3
 8010b88:	dd13      	ble.n	8010bb2 <__hexnan+0x7a>
 8010b8a:	454c      	cmp	r4, r9
 8010b8c:	d206      	bcs.n	8010b9c <__hexnan+0x64>
 8010b8e:	2d07      	cmp	r5, #7
 8010b90:	dc04      	bgt.n	8010b9c <__hexnan+0x64>
 8010b92:	462a      	mov	r2, r5
 8010b94:	4649      	mov	r1, r9
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7ff ffa8 	bl	8010aec <L_shift>
 8010b9c:	4544      	cmp	r4, r8
 8010b9e:	d950      	bls.n	8010c42 <__hexnan+0x10a>
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ba6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010baa:	f8cd b008 	str.w	fp, [sp, #8]
 8010bae:	464c      	mov	r4, r9
 8010bb0:	461d      	mov	r5, r3
 8010bb2:	9903      	ldr	r1, [sp, #12]
 8010bb4:	e7d7      	b.n	8010b66 <__hexnan+0x2e>
 8010bb6:	2a29      	cmp	r2, #41	; 0x29
 8010bb8:	d156      	bne.n	8010c68 <__hexnan+0x130>
 8010bba:	3102      	adds	r1, #2
 8010bbc:	f8ca 1000 	str.w	r1, [sl]
 8010bc0:	f1bb 0f00 	cmp.w	fp, #0
 8010bc4:	d050      	beq.n	8010c68 <__hexnan+0x130>
 8010bc6:	454c      	cmp	r4, r9
 8010bc8:	d206      	bcs.n	8010bd8 <__hexnan+0xa0>
 8010bca:	2d07      	cmp	r5, #7
 8010bcc:	dc04      	bgt.n	8010bd8 <__hexnan+0xa0>
 8010bce:	462a      	mov	r2, r5
 8010bd0:	4649      	mov	r1, r9
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f7ff ff8a 	bl	8010aec <L_shift>
 8010bd8:	4544      	cmp	r4, r8
 8010bda:	d934      	bls.n	8010c46 <__hexnan+0x10e>
 8010bdc:	f1a8 0204 	sub.w	r2, r8, #4
 8010be0:	4623      	mov	r3, r4
 8010be2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010be6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010bea:	429f      	cmp	r7, r3
 8010bec:	d2f9      	bcs.n	8010be2 <__hexnan+0xaa>
 8010bee:	1b3b      	subs	r3, r7, r4
 8010bf0:	f023 0303 	bic.w	r3, r3, #3
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	3401      	adds	r4, #1
 8010bf8:	3e03      	subs	r6, #3
 8010bfa:	42b4      	cmp	r4, r6
 8010bfc:	bf88      	it	hi
 8010bfe:	2304      	movhi	r3, #4
 8010c00:	4443      	add	r3, r8
 8010c02:	2200      	movs	r2, #0
 8010c04:	f843 2b04 	str.w	r2, [r3], #4
 8010c08:	429f      	cmp	r7, r3
 8010c0a:	d2fb      	bcs.n	8010c04 <__hexnan+0xcc>
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	b91b      	cbnz	r3, 8010c18 <__hexnan+0xe0>
 8010c10:	4547      	cmp	r7, r8
 8010c12:	d127      	bne.n	8010c64 <__hexnan+0x12c>
 8010c14:	2301      	movs	r3, #1
 8010c16:	603b      	str	r3, [r7, #0]
 8010c18:	2005      	movs	r0, #5
 8010c1a:	e026      	b.n	8010c6a <__hexnan+0x132>
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	2d08      	cmp	r5, #8
 8010c20:	f10b 0b01 	add.w	fp, fp, #1
 8010c24:	dd06      	ble.n	8010c34 <__hexnan+0xfc>
 8010c26:	4544      	cmp	r4, r8
 8010c28:	d9c3      	bls.n	8010bb2 <__hexnan+0x7a>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c30:	2501      	movs	r5, #1
 8010c32:	3c04      	subs	r4, #4
 8010c34:	6822      	ldr	r2, [r4, #0]
 8010c36:	f000 000f 	and.w	r0, r0, #15
 8010c3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010c3e:	6022      	str	r2, [r4, #0]
 8010c40:	e7b7      	b.n	8010bb2 <__hexnan+0x7a>
 8010c42:	2508      	movs	r5, #8
 8010c44:	e7b5      	b.n	8010bb2 <__hexnan+0x7a>
 8010c46:	9b01      	ldr	r3, [sp, #4]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d0df      	beq.n	8010c0c <__hexnan+0xd4>
 8010c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c50:	f1c3 0320 	rsb	r3, r3, #32
 8010c54:	fa22 f303 	lsr.w	r3, r2, r3
 8010c58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010c5c:	401a      	ands	r2, r3
 8010c5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010c62:	e7d3      	b.n	8010c0c <__hexnan+0xd4>
 8010c64:	3f04      	subs	r7, #4
 8010c66:	e7d1      	b.n	8010c0c <__hexnan+0xd4>
 8010c68:	2004      	movs	r0, #4
 8010c6a:	b007      	add	sp, #28
 8010c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c70 <_localeconv_r>:
 8010c70:	4800      	ldr	r0, [pc, #0]	; (8010c74 <_localeconv_r+0x4>)
 8010c72:	4770      	bx	lr
 8010c74:	20000188 	.word	0x20000188

08010c78 <_lseek_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	4d07      	ldr	r5, [pc, #28]	; (8010c98 <_lseek_r+0x20>)
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	4608      	mov	r0, r1
 8010c80:	4611      	mov	r1, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	602a      	str	r2, [r5, #0]
 8010c86:	461a      	mov	r2, r3
 8010c88:	f7f2 f996 	bl	8002fb8 <_lseek>
 8010c8c:	1c43      	adds	r3, r0, #1
 8010c8e:	d102      	bne.n	8010c96 <_lseek_r+0x1e>
 8010c90:	682b      	ldr	r3, [r5, #0]
 8010c92:	b103      	cbz	r3, 8010c96 <_lseek_r+0x1e>
 8010c94:	6023      	str	r3, [r4, #0]
 8010c96:	bd38      	pop	{r3, r4, r5, pc}
 8010c98:	2000571c 	.word	0x2000571c

08010c9c <__ascii_mbtowc>:
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	b901      	cbnz	r1, 8010ca2 <__ascii_mbtowc+0x6>
 8010ca0:	a901      	add	r1, sp, #4
 8010ca2:	b142      	cbz	r2, 8010cb6 <__ascii_mbtowc+0x1a>
 8010ca4:	b14b      	cbz	r3, 8010cba <__ascii_mbtowc+0x1e>
 8010ca6:	7813      	ldrb	r3, [r2, #0]
 8010ca8:	600b      	str	r3, [r1, #0]
 8010caa:	7812      	ldrb	r2, [r2, #0]
 8010cac:	1e10      	subs	r0, r2, #0
 8010cae:	bf18      	it	ne
 8010cb0:	2001      	movne	r0, #1
 8010cb2:	b002      	add	sp, #8
 8010cb4:	4770      	bx	lr
 8010cb6:	4610      	mov	r0, r2
 8010cb8:	e7fb      	b.n	8010cb2 <__ascii_mbtowc+0x16>
 8010cba:	f06f 0001 	mvn.w	r0, #1
 8010cbe:	e7f8      	b.n	8010cb2 <__ascii_mbtowc+0x16>

08010cc0 <__malloc_lock>:
 8010cc0:	4801      	ldr	r0, [pc, #4]	; (8010cc8 <__malloc_lock+0x8>)
 8010cc2:	f7fc bcd8 	b.w	800d676 <__retarget_lock_acquire_recursive>
 8010cc6:	bf00      	nop
 8010cc8:	20005714 	.word	0x20005714

08010ccc <__malloc_unlock>:
 8010ccc:	4801      	ldr	r0, [pc, #4]	; (8010cd4 <__malloc_unlock+0x8>)
 8010cce:	f7fc bcd3 	b.w	800d678 <__retarget_lock_release_recursive>
 8010cd2:	bf00      	nop
 8010cd4:	20005714 	.word	0x20005714

08010cd8 <_Balloc>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	b976      	cbnz	r6, 8010d00 <_Balloc+0x28>
 8010ce2:	2010      	movs	r0, #16
 8010ce4:	f7fc fcca 	bl	800d67c <malloc>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	6260      	str	r0, [r4, #36]	; 0x24
 8010cec:	b920      	cbnz	r0, 8010cf8 <_Balloc+0x20>
 8010cee:	4b18      	ldr	r3, [pc, #96]	; (8010d50 <_Balloc+0x78>)
 8010cf0:	4818      	ldr	r0, [pc, #96]	; (8010d54 <_Balloc+0x7c>)
 8010cf2:	2166      	movs	r1, #102	; 0x66
 8010cf4:	f7fe fcd2 	bl	800f69c <__assert_func>
 8010cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cfc:	6006      	str	r6, [r0, #0]
 8010cfe:	60c6      	str	r6, [r0, #12]
 8010d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010d02:	68f3      	ldr	r3, [r6, #12]
 8010d04:	b183      	cbz	r3, 8010d28 <_Balloc+0x50>
 8010d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d0e:	b9b8      	cbnz	r0, 8010d40 <_Balloc+0x68>
 8010d10:	2101      	movs	r1, #1
 8010d12:	fa01 f605 	lsl.w	r6, r1, r5
 8010d16:	1d72      	adds	r2, r6, #5
 8010d18:	0092      	lsls	r2, r2, #2
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 fc97 	bl	801164e <_calloc_r>
 8010d20:	b160      	cbz	r0, 8010d3c <_Balloc+0x64>
 8010d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d26:	e00e      	b.n	8010d46 <_Balloc+0x6e>
 8010d28:	2221      	movs	r2, #33	; 0x21
 8010d2a:	2104      	movs	r1, #4
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f000 fc8e 	bl	801164e <_calloc_r>
 8010d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d34:	60f0      	str	r0, [r6, #12]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1e4      	bne.n	8010d06 <_Balloc+0x2e>
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	bd70      	pop	{r4, r5, r6, pc}
 8010d40:	6802      	ldr	r2, [r0, #0]
 8010d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d46:	2300      	movs	r3, #0
 8010d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d4c:	e7f7      	b.n	8010d3e <_Balloc+0x66>
 8010d4e:	bf00      	nop
 8010d50:	08012dfa 	.word	0x08012dfa
 8010d54:	08012f00 	.word	0x08012f00

08010d58 <_Bfree>:
 8010d58:	b570      	push	{r4, r5, r6, lr}
 8010d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	460c      	mov	r4, r1
 8010d60:	b976      	cbnz	r6, 8010d80 <_Bfree+0x28>
 8010d62:	2010      	movs	r0, #16
 8010d64:	f7fc fc8a 	bl	800d67c <malloc>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8010d6c:	b920      	cbnz	r0, 8010d78 <_Bfree+0x20>
 8010d6e:	4b09      	ldr	r3, [pc, #36]	; (8010d94 <_Bfree+0x3c>)
 8010d70:	4809      	ldr	r0, [pc, #36]	; (8010d98 <_Bfree+0x40>)
 8010d72:	218a      	movs	r1, #138	; 0x8a
 8010d74:	f7fe fc92 	bl	800f69c <__assert_func>
 8010d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d7c:	6006      	str	r6, [r0, #0]
 8010d7e:	60c6      	str	r6, [r0, #12]
 8010d80:	b13c      	cbz	r4, 8010d92 <_Bfree+0x3a>
 8010d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010d84:	6862      	ldr	r2, [r4, #4]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d8c:	6021      	str	r1, [r4, #0]
 8010d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	08012dfa 	.word	0x08012dfa
 8010d98:	08012f00 	.word	0x08012f00

08010d9c <__multadd>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	690e      	ldr	r6, [r1, #16]
 8010da2:	4607      	mov	r7, r0
 8010da4:	4698      	mov	r8, r3
 8010da6:	460c      	mov	r4, r1
 8010da8:	f101 0014 	add.w	r0, r1, #20
 8010dac:	2300      	movs	r3, #0
 8010dae:	6805      	ldr	r5, [r0, #0]
 8010db0:	b2a9      	uxth	r1, r5
 8010db2:	fb02 8101 	mla	r1, r2, r1, r8
 8010db6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010dba:	0c2d      	lsrs	r5, r5, #16
 8010dbc:	fb02 c505 	mla	r5, r2, r5, ip
 8010dc0:	b289      	uxth	r1, r1
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010dc8:	429e      	cmp	r6, r3
 8010dca:	f840 1b04 	str.w	r1, [r0], #4
 8010dce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010dd2:	dcec      	bgt.n	8010dae <__multadd+0x12>
 8010dd4:	f1b8 0f00 	cmp.w	r8, #0
 8010dd8:	d022      	beq.n	8010e20 <__multadd+0x84>
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	42b3      	cmp	r3, r6
 8010dde:	dc19      	bgt.n	8010e14 <__multadd+0x78>
 8010de0:	6861      	ldr	r1, [r4, #4]
 8010de2:	4638      	mov	r0, r7
 8010de4:	3101      	adds	r1, #1
 8010de6:	f7ff ff77 	bl	8010cd8 <_Balloc>
 8010dea:	4605      	mov	r5, r0
 8010dec:	b928      	cbnz	r0, 8010dfa <__multadd+0x5e>
 8010dee:	4602      	mov	r2, r0
 8010df0:	4b0d      	ldr	r3, [pc, #52]	; (8010e28 <__multadd+0x8c>)
 8010df2:	480e      	ldr	r0, [pc, #56]	; (8010e2c <__multadd+0x90>)
 8010df4:	21b5      	movs	r1, #181	; 0xb5
 8010df6:	f7fe fc51 	bl	800f69c <__assert_func>
 8010dfa:	6922      	ldr	r2, [r4, #16]
 8010dfc:	3202      	adds	r2, #2
 8010dfe:	f104 010c 	add.w	r1, r4, #12
 8010e02:	0092      	lsls	r2, r2, #2
 8010e04:	300c      	adds	r0, #12
 8010e06:	f7fc fc49 	bl	800d69c <memcpy>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4638      	mov	r0, r7
 8010e0e:	f7ff ffa3 	bl	8010d58 <_Bfree>
 8010e12:	462c      	mov	r4, r5
 8010e14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010e18:	3601      	adds	r6, #1
 8010e1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010e1e:	6126      	str	r6, [r4, #16]
 8010e20:	4620      	mov	r0, r4
 8010e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e26:	bf00      	nop
 8010e28:	08012e70 	.word	0x08012e70
 8010e2c:	08012f00 	.word	0x08012f00

08010e30 <__s2b>:
 8010e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e34:	460c      	mov	r4, r1
 8010e36:	4615      	mov	r5, r2
 8010e38:	461f      	mov	r7, r3
 8010e3a:	2209      	movs	r2, #9
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	4606      	mov	r6, r0
 8010e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e44:	2100      	movs	r1, #0
 8010e46:	2201      	movs	r2, #1
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	db09      	blt.n	8010e60 <__s2b+0x30>
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	f7ff ff43 	bl	8010cd8 <_Balloc>
 8010e52:	b940      	cbnz	r0, 8010e66 <__s2b+0x36>
 8010e54:	4602      	mov	r2, r0
 8010e56:	4b19      	ldr	r3, [pc, #100]	; (8010ebc <__s2b+0x8c>)
 8010e58:	4819      	ldr	r0, [pc, #100]	; (8010ec0 <__s2b+0x90>)
 8010e5a:	21ce      	movs	r1, #206	; 0xce
 8010e5c:	f7fe fc1e 	bl	800f69c <__assert_func>
 8010e60:	0052      	lsls	r2, r2, #1
 8010e62:	3101      	adds	r1, #1
 8010e64:	e7f0      	b.n	8010e48 <__s2b+0x18>
 8010e66:	9b08      	ldr	r3, [sp, #32]
 8010e68:	6143      	str	r3, [r0, #20]
 8010e6a:	2d09      	cmp	r5, #9
 8010e6c:	f04f 0301 	mov.w	r3, #1
 8010e70:	6103      	str	r3, [r0, #16]
 8010e72:	dd16      	ble.n	8010ea2 <__s2b+0x72>
 8010e74:	f104 0909 	add.w	r9, r4, #9
 8010e78:	46c8      	mov	r8, r9
 8010e7a:	442c      	add	r4, r5
 8010e7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e80:	4601      	mov	r1, r0
 8010e82:	3b30      	subs	r3, #48	; 0x30
 8010e84:	220a      	movs	r2, #10
 8010e86:	4630      	mov	r0, r6
 8010e88:	f7ff ff88 	bl	8010d9c <__multadd>
 8010e8c:	45a0      	cmp	r8, r4
 8010e8e:	d1f5      	bne.n	8010e7c <__s2b+0x4c>
 8010e90:	f1a5 0408 	sub.w	r4, r5, #8
 8010e94:	444c      	add	r4, r9
 8010e96:	1b2d      	subs	r5, r5, r4
 8010e98:	1963      	adds	r3, r4, r5
 8010e9a:	42bb      	cmp	r3, r7
 8010e9c:	db04      	blt.n	8010ea8 <__s2b+0x78>
 8010e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	340a      	adds	r4, #10
 8010ea4:	2509      	movs	r5, #9
 8010ea6:	e7f6      	b.n	8010e96 <__s2b+0x66>
 8010ea8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010eac:	4601      	mov	r1, r0
 8010eae:	3b30      	subs	r3, #48	; 0x30
 8010eb0:	220a      	movs	r2, #10
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7ff ff72 	bl	8010d9c <__multadd>
 8010eb8:	e7ee      	b.n	8010e98 <__s2b+0x68>
 8010eba:	bf00      	nop
 8010ebc:	08012e70 	.word	0x08012e70
 8010ec0:	08012f00 	.word	0x08012f00

08010ec4 <__hi0bits>:
 8010ec4:	0c03      	lsrs	r3, r0, #16
 8010ec6:	041b      	lsls	r3, r3, #16
 8010ec8:	b9d3      	cbnz	r3, 8010f00 <__hi0bits+0x3c>
 8010eca:	0400      	lsls	r0, r0, #16
 8010ecc:	2310      	movs	r3, #16
 8010ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ed2:	bf04      	itt	eq
 8010ed4:	0200      	lsleq	r0, r0, #8
 8010ed6:	3308      	addeq	r3, #8
 8010ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010edc:	bf04      	itt	eq
 8010ede:	0100      	lsleq	r0, r0, #4
 8010ee0:	3304      	addeq	r3, #4
 8010ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ee6:	bf04      	itt	eq
 8010ee8:	0080      	lsleq	r0, r0, #2
 8010eea:	3302      	addeq	r3, #2
 8010eec:	2800      	cmp	r0, #0
 8010eee:	db05      	blt.n	8010efc <__hi0bits+0x38>
 8010ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ef4:	f103 0301 	add.w	r3, r3, #1
 8010ef8:	bf08      	it	eq
 8010efa:	2320      	moveq	r3, #32
 8010efc:	4618      	mov	r0, r3
 8010efe:	4770      	bx	lr
 8010f00:	2300      	movs	r3, #0
 8010f02:	e7e4      	b.n	8010ece <__hi0bits+0xa>

08010f04 <__lo0bits>:
 8010f04:	6803      	ldr	r3, [r0, #0]
 8010f06:	f013 0207 	ands.w	r2, r3, #7
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	d00b      	beq.n	8010f26 <__lo0bits+0x22>
 8010f0e:	07da      	lsls	r2, r3, #31
 8010f10:	d424      	bmi.n	8010f5c <__lo0bits+0x58>
 8010f12:	0798      	lsls	r0, r3, #30
 8010f14:	bf49      	itett	mi
 8010f16:	085b      	lsrmi	r3, r3, #1
 8010f18:	089b      	lsrpl	r3, r3, #2
 8010f1a:	2001      	movmi	r0, #1
 8010f1c:	600b      	strmi	r3, [r1, #0]
 8010f1e:	bf5c      	itt	pl
 8010f20:	600b      	strpl	r3, [r1, #0]
 8010f22:	2002      	movpl	r0, #2
 8010f24:	4770      	bx	lr
 8010f26:	b298      	uxth	r0, r3
 8010f28:	b9b0      	cbnz	r0, 8010f58 <__lo0bits+0x54>
 8010f2a:	0c1b      	lsrs	r3, r3, #16
 8010f2c:	2010      	movs	r0, #16
 8010f2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010f32:	bf04      	itt	eq
 8010f34:	0a1b      	lsreq	r3, r3, #8
 8010f36:	3008      	addeq	r0, #8
 8010f38:	071a      	lsls	r2, r3, #28
 8010f3a:	bf04      	itt	eq
 8010f3c:	091b      	lsreq	r3, r3, #4
 8010f3e:	3004      	addeq	r0, #4
 8010f40:	079a      	lsls	r2, r3, #30
 8010f42:	bf04      	itt	eq
 8010f44:	089b      	lsreq	r3, r3, #2
 8010f46:	3002      	addeq	r0, #2
 8010f48:	07da      	lsls	r2, r3, #31
 8010f4a:	d403      	bmi.n	8010f54 <__lo0bits+0x50>
 8010f4c:	085b      	lsrs	r3, r3, #1
 8010f4e:	f100 0001 	add.w	r0, r0, #1
 8010f52:	d005      	beq.n	8010f60 <__lo0bits+0x5c>
 8010f54:	600b      	str	r3, [r1, #0]
 8010f56:	4770      	bx	lr
 8010f58:	4610      	mov	r0, r2
 8010f5a:	e7e8      	b.n	8010f2e <__lo0bits+0x2a>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	4770      	bx	lr
 8010f60:	2020      	movs	r0, #32
 8010f62:	4770      	bx	lr

08010f64 <__i2b>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	2101      	movs	r1, #1
 8010f6a:	f7ff feb5 	bl	8010cd8 <_Balloc>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	b928      	cbnz	r0, 8010f7e <__i2b+0x1a>
 8010f72:	4b05      	ldr	r3, [pc, #20]	; (8010f88 <__i2b+0x24>)
 8010f74:	4805      	ldr	r0, [pc, #20]	; (8010f8c <__i2b+0x28>)
 8010f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010f7a:	f7fe fb8f 	bl	800f69c <__assert_func>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	6144      	str	r4, [r0, #20]
 8010f82:	6103      	str	r3, [r0, #16]
 8010f84:	bd10      	pop	{r4, pc}
 8010f86:	bf00      	nop
 8010f88:	08012e70 	.word	0x08012e70
 8010f8c:	08012f00 	.word	0x08012f00

08010f90 <__multiply>:
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	4614      	mov	r4, r2
 8010f96:	690a      	ldr	r2, [r1, #16]
 8010f98:	6923      	ldr	r3, [r4, #16]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	bfb8      	it	lt
 8010f9e:	460b      	movlt	r3, r1
 8010fa0:	460d      	mov	r5, r1
 8010fa2:	bfbc      	itt	lt
 8010fa4:	4625      	movlt	r5, r4
 8010fa6:	461c      	movlt	r4, r3
 8010fa8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010fac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010fb0:	68ab      	ldr	r3, [r5, #8]
 8010fb2:	6869      	ldr	r1, [r5, #4]
 8010fb4:	eb0a 0709 	add.w	r7, sl, r9
 8010fb8:	42bb      	cmp	r3, r7
 8010fba:	b085      	sub	sp, #20
 8010fbc:	bfb8      	it	lt
 8010fbe:	3101      	addlt	r1, #1
 8010fc0:	f7ff fe8a 	bl	8010cd8 <_Balloc>
 8010fc4:	b930      	cbnz	r0, 8010fd4 <__multiply+0x44>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	4b42      	ldr	r3, [pc, #264]	; (80110d4 <__multiply+0x144>)
 8010fca:	4843      	ldr	r0, [pc, #268]	; (80110d8 <__multiply+0x148>)
 8010fcc:	f240 115d 	movw	r1, #349	; 0x15d
 8010fd0:	f7fe fb64 	bl	800f69c <__assert_func>
 8010fd4:	f100 0614 	add.w	r6, r0, #20
 8010fd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010fdc:	4633      	mov	r3, r6
 8010fde:	2200      	movs	r2, #0
 8010fe0:	4543      	cmp	r3, r8
 8010fe2:	d31e      	bcc.n	8011022 <__multiply+0x92>
 8010fe4:	f105 0c14 	add.w	ip, r5, #20
 8010fe8:	f104 0314 	add.w	r3, r4, #20
 8010fec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010ff0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010ff4:	9202      	str	r2, [sp, #8]
 8010ff6:	ebac 0205 	sub.w	r2, ip, r5
 8010ffa:	3a15      	subs	r2, #21
 8010ffc:	f022 0203 	bic.w	r2, r2, #3
 8011000:	3204      	adds	r2, #4
 8011002:	f105 0115 	add.w	r1, r5, #21
 8011006:	458c      	cmp	ip, r1
 8011008:	bf38      	it	cc
 801100a:	2204      	movcc	r2, #4
 801100c:	9201      	str	r2, [sp, #4]
 801100e:	9a02      	ldr	r2, [sp, #8]
 8011010:	9303      	str	r3, [sp, #12]
 8011012:	429a      	cmp	r2, r3
 8011014:	d808      	bhi.n	8011028 <__multiply+0x98>
 8011016:	2f00      	cmp	r7, #0
 8011018:	dc55      	bgt.n	80110c6 <__multiply+0x136>
 801101a:	6107      	str	r7, [r0, #16]
 801101c:	b005      	add	sp, #20
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	f843 2b04 	str.w	r2, [r3], #4
 8011026:	e7db      	b.n	8010fe0 <__multiply+0x50>
 8011028:	f8b3 a000 	ldrh.w	sl, [r3]
 801102c:	f1ba 0f00 	cmp.w	sl, #0
 8011030:	d020      	beq.n	8011074 <__multiply+0xe4>
 8011032:	f105 0e14 	add.w	lr, r5, #20
 8011036:	46b1      	mov	r9, r6
 8011038:	2200      	movs	r2, #0
 801103a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801103e:	f8d9 b000 	ldr.w	fp, [r9]
 8011042:	b2a1      	uxth	r1, r4
 8011044:	fa1f fb8b 	uxth.w	fp, fp
 8011048:	fb0a b101 	mla	r1, sl, r1, fp
 801104c:	4411      	add	r1, r2
 801104e:	f8d9 2000 	ldr.w	r2, [r9]
 8011052:	0c24      	lsrs	r4, r4, #16
 8011054:	0c12      	lsrs	r2, r2, #16
 8011056:	fb0a 2404 	mla	r4, sl, r4, r2
 801105a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801105e:	b289      	uxth	r1, r1
 8011060:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011064:	45f4      	cmp	ip, lr
 8011066:	f849 1b04 	str.w	r1, [r9], #4
 801106a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801106e:	d8e4      	bhi.n	801103a <__multiply+0xaa>
 8011070:	9901      	ldr	r1, [sp, #4]
 8011072:	5072      	str	r2, [r6, r1]
 8011074:	9a03      	ldr	r2, [sp, #12]
 8011076:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801107a:	3304      	adds	r3, #4
 801107c:	f1b9 0f00 	cmp.w	r9, #0
 8011080:	d01f      	beq.n	80110c2 <__multiply+0x132>
 8011082:	6834      	ldr	r4, [r6, #0]
 8011084:	f105 0114 	add.w	r1, r5, #20
 8011088:	46b6      	mov	lr, r6
 801108a:	f04f 0a00 	mov.w	sl, #0
 801108e:	880a      	ldrh	r2, [r1, #0]
 8011090:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011094:	fb09 b202 	mla	r2, r9, r2, fp
 8011098:	4492      	add	sl, r2
 801109a:	b2a4      	uxth	r4, r4
 801109c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80110a0:	f84e 4b04 	str.w	r4, [lr], #4
 80110a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80110a8:	f8be 2000 	ldrh.w	r2, [lr]
 80110ac:	0c24      	lsrs	r4, r4, #16
 80110ae:	fb09 2404 	mla	r4, r9, r4, r2
 80110b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80110b6:	458c      	cmp	ip, r1
 80110b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80110bc:	d8e7      	bhi.n	801108e <__multiply+0xfe>
 80110be:	9a01      	ldr	r2, [sp, #4]
 80110c0:	50b4      	str	r4, [r6, r2]
 80110c2:	3604      	adds	r6, #4
 80110c4:	e7a3      	b.n	801100e <__multiply+0x7e>
 80110c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1a5      	bne.n	801101a <__multiply+0x8a>
 80110ce:	3f01      	subs	r7, #1
 80110d0:	e7a1      	b.n	8011016 <__multiply+0x86>
 80110d2:	bf00      	nop
 80110d4:	08012e70 	.word	0x08012e70
 80110d8:	08012f00 	.word	0x08012f00

080110dc <__pow5mult>:
 80110dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e0:	4615      	mov	r5, r2
 80110e2:	f012 0203 	ands.w	r2, r2, #3
 80110e6:	4606      	mov	r6, r0
 80110e8:	460f      	mov	r7, r1
 80110ea:	d007      	beq.n	80110fc <__pow5mult+0x20>
 80110ec:	4c25      	ldr	r4, [pc, #148]	; (8011184 <__pow5mult+0xa8>)
 80110ee:	3a01      	subs	r2, #1
 80110f0:	2300      	movs	r3, #0
 80110f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110f6:	f7ff fe51 	bl	8010d9c <__multadd>
 80110fa:	4607      	mov	r7, r0
 80110fc:	10ad      	asrs	r5, r5, #2
 80110fe:	d03d      	beq.n	801117c <__pow5mult+0xa0>
 8011100:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011102:	b97c      	cbnz	r4, 8011124 <__pow5mult+0x48>
 8011104:	2010      	movs	r0, #16
 8011106:	f7fc fab9 	bl	800d67c <malloc>
 801110a:	4602      	mov	r2, r0
 801110c:	6270      	str	r0, [r6, #36]	; 0x24
 801110e:	b928      	cbnz	r0, 801111c <__pow5mult+0x40>
 8011110:	4b1d      	ldr	r3, [pc, #116]	; (8011188 <__pow5mult+0xac>)
 8011112:	481e      	ldr	r0, [pc, #120]	; (801118c <__pow5mult+0xb0>)
 8011114:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011118:	f7fe fac0 	bl	800f69c <__assert_func>
 801111c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011120:	6004      	str	r4, [r0, #0]
 8011122:	60c4      	str	r4, [r0, #12]
 8011124:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801112c:	b94c      	cbnz	r4, 8011142 <__pow5mult+0x66>
 801112e:	f240 2171 	movw	r1, #625	; 0x271
 8011132:	4630      	mov	r0, r6
 8011134:	f7ff ff16 	bl	8010f64 <__i2b>
 8011138:	2300      	movs	r3, #0
 801113a:	f8c8 0008 	str.w	r0, [r8, #8]
 801113e:	4604      	mov	r4, r0
 8011140:	6003      	str	r3, [r0, #0]
 8011142:	f04f 0900 	mov.w	r9, #0
 8011146:	07eb      	lsls	r3, r5, #31
 8011148:	d50a      	bpl.n	8011160 <__pow5mult+0x84>
 801114a:	4639      	mov	r1, r7
 801114c:	4622      	mov	r2, r4
 801114e:	4630      	mov	r0, r6
 8011150:	f7ff ff1e 	bl	8010f90 <__multiply>
 8011154:	4639      	mov	r1, r7
 8011156:	4680      	mov	r8, r0
 8011158:	4630      	mov	r0, r6
 801115a:	f7ff fdfd 	bl	8010d58 <_Bfree>
 801115e:	4647      	mov	r7, r8
 8011160:	106d      	asrs	r5, r5, #1
 8011162:	d00b      	beq.n	801117c <__pow5mult+0xa0>
 8011164:	6820      	ldr	r0, [r4, #0]
 8011166:	b938      	cbnz	r0, 8011178 <__pow5mult+0x9c>
 8011168:	4622      	mov	r2, r4
 801116a:	4621      	mov	r1, r4
 801116c:	4630      	mov	r0, r6
 801116e:	f7ff ff0f 	bl	8010f90 <__multiply>
 8011172:	6020      	str	r0, [r4, #0]
 8011174:	f8c0 9000 	str.w	r9, [r0]
 8011178:	4604      	mov	r4, r0
 801117a:	e7e4      	b.n	8011146 <__pow5mult+0x6a>
 801117c:	4638      	mov	r0, r7
 801117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011182:	bf00      	nop
 8011184:	08013050 	.word	0x08013050
 8011188:	08012dfa 	.word	0x08012dfa
 801118c:	08012f00 	.word	0x08012f00

08011190 <__lshift>:
 8011190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011194:	460c      	mov	r4, r1
 8011196:	6849      	ldr	r1, [r1, #4]
 8011198:	6923      	ldr	r3, [r4, #16]
 801119a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801119e:	68a3      	ldr	r3, [r4, #8]
 80111a0:	4607      	mov	r7, r0
 80111a2:	4691      	mov	r9, r2
 80111a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111a8:	f108 0601 	add.w	r6, r8, #1
 80111ac:	42b3      	cmp	r3, r6
 80111ae:	db0b      	blt.n	80111c8 <__lshift+0x38>
 80111b0:	4638      	mov	r0, r7
 80111b2:	f7ff fd91 	bl	8010cd8 <_Balloc>
 80111b6:	4605      	mov	r5, r0
 80111b8:	b948      	cbnz	r0, 80111ce <__lshift+0x3e>
 80111ba:	4602      	mov	r2, r0
 80111bc:	4b28      	ldr	r3, [pc, #160]	; (8011260 <__lshift+0xd0>)
 80111be:	4829      	ldr	r0, [pc, #164]	; (8011264 <__lshift+0xd4>)
 80111c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80111c4:	f7fe fa6a 	bl	800f69c <__assert_func>
 80111c8:	3101      	adds	r1, #1
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	e7ee      	b.n	80111ac <__lshift+0x1c>
 80111ce:	2300      	movs	r3, #0
 80111d0:	f100 0114 	add.w	r1, r0, #20
 80111d4:	f100 0210 	add.w	r2, r0, #16
 80111d8:	4618      	mov	r0, r3
 80111da:	4553      	cmp	r3, sl
 80111dc:	db33      	blt.n	8011246 <__lshift+0xb6>
 80111de:	6920      	ldr	r0, [r4, #16]
 80111e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111e4:	f104 0314 	add.w	r3, r4, #20
 80111e8:	f019 091f 	ands.w	r9, r9, #31
 80111ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111f4:	d02b      	beq.n	801124e <__lshift+0xbe>
 80111f6:	f1c9 0e20 	rsb	lr, r9, #32
 80111fa:	468a      	mov	sl, r1
 80111fc:	2200      	movs	r2, #0
 80111fe:	6818      	ldr	r0, [r3, #0]
 8011200:	fa00 f009 	lsl.w	r0, r0, r9
 8011204:	4302      	orrs	r2, r0
 8011206:	f84a 2b04 	str.w	r2, [sl], #4
 801120a:	f853 2b04 	ldr.w	r2, [r3], #4
 801120e:	459c      	cmp	ip, r3
 8011210:	fa22 f20e 	lsr.w	r2, r2, lr
 8011214:	d8f3      	bhi.n	80111fe <__lshift+0x6e>
 8011216:	ebac 0304 	sub.w	r3, ip, r4
 801121a:	3b15      	subs	r3, #21
 801121c:	f023 0303 	bic.w	r3, r3, #3
 8011220:	3304      	adds	r3, #4
 8011222:	f104 0015 	add.w	r0, r4, #21
 8011226:	4584      	cmp	ip, r0
 8011228:	bf38      	it	cc
 801122a:	2304      	movcc	r3, #4
 801122c:	50ca      	str	r2, [r1, r3]
 801122e:	b10a      	cbz	r2, 8011234 <__lshift+0xa4>
 8011230:	f108 0602 	add.w	r6, r8, #2
 8011234:	3e01      	subs	r6, #1
 8011236:	4638      	mov	r0, r7
 8011238:	612e      	str	r6, [r5, #16]
 801123a:	4621      	mov	r1, r4
 801123c:	f7ff fd8c 	bl	8010d58 <_Bfree>
 8011240:	4628      	mov	r0, r5
 8011242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011246:	f842 0f04 	str.w	r0, [r2, #4]!
 801124a:	3301      	adds	r3, #1
 801124c:	e7c5      	b.n	80111da <__lshift+0x4a>
 801124e:	3904      	subs	r1, #4
 8011250:	f853 2b04 	ldr.w	r2, [r3], #4
 8011254:	f841 2f04 	str.w	r2, [r1, #4]!
 8011258:	459c      	cmp	ip, r3
 801125a:	d8f9      	bhi.n	8011250 <__lshift+0xc0>
 801125c:	e7ea      	b.n	8011234 <__lshift+0xa4>
 801125e:	bf00      	nop
 8011260:	08012e70 	.word	0x08012e70
 8011264:	08012f00 	.word	0x08012f00

08011268 <__mcmp>:
 8011268:	b530      	push	{r4, r5, lr}
 801126a:	6902      	ldr	r2, [r0, #16]
 801126c:	690c      	ldr	r4, [r1, #16]
 801126e:	1b12      	subs	r2, r2, r4
 8011270:	d10e      	bne.n	8011290 <__mcmp+0x28>
 8011272:	f100 0314 	add.w	r3, r0, #20
 8011276:	3114      	adds	r1, #20
 8011278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801127c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011288:	42a5      	cmp	r5, r4
 801128a:	d003      	beq.n	8011294 <__mcmp+0x2c>
 801128c:	d305      	bcc.n	801129a <__mcmp+0x32>
 801128e:	2201      	movs	r2, #1
 8011290:	4610      	mov	r0, r2
 8011292:	bd30      	pop	{r4, r5, pc}
 8011294:	4283      	cmp	r3, r0
 8011296:	d3f3      	bcc.n	8011280 <__mcmp+0x18>
 8011298:	e7fa      	b.n	8011290 <__mcmp+0x28>
 801129a:	f04f 32ff 	mov.w	r2, #4294967295
 801129e:	e7f7      	b.n	8011290 <__mcmp+0x28>

080112a0 <__mdiff>:
 80112a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	460c      	mov	r4, r1
 80112a6:	4606      	mov	r6, r0
 80112a8:	4611      	mov	r1, r2
 80112aa:	4620      	mov	r0, r4
 80112ac:	4617      	mov	r7, r2
 80112ae:	f7ff ffdb 	bl	8011268 <__mcmp>
 80112b2:	1e05      	subs	r5, r0, #0
 80112b4:	d110      	bne.n	80112d8 <__mdiff+0x38>
 80112b6:	4629      	mov	r1, r5
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7ff fd0d 	bl	8010cd8 <_Balloc>
 80112be:	b930      	cbnz	r0, 80112ce <__mdiff+0x2e>
 80112c0:	4b39      	ldr	r3, [pc, #228]	; (80113a8 <__mdiff+0x108>)
 80112c2:	4602      	mov	r2, r0
 80112c4:	f240 2132 	movw	r1, #562	; 0x232
 80112c8:	4838      	ldr	r0, [pc, #224]	; (80113ac <__mdiff+0x10c>)
 80112ca:	f7fe f9e7 	bl	800f69c <__assert_func>
 80112ce:	2301      	movs	r3, #1
 80112d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d8:	bfa4      	itt	ge
 80112da:	463b      	movge	r3, r7
 80112dc:	4627      	movge	r7, r4
 80112de:	4630      	mov	r0, r6
 80112e0:	6879      	ldr	r1, [r7, #4]
 80112e2:	bfa6      	itte	ge
 80112e4:	461c      	movge	r4, r3
 80112e6:	2500      	movge	r5, #0
 80112e8:	2501      	movlt	r5, #1
 80112ea:	f7ff fcf5 	bl	8010cd8 <_Balloc>
 80112ee:	b920      	cbnz	r0, 80112fa <__mdiff+0x5a>
 80112f0:	4b2d      	ldr	r3, [pc, #180]	; (80113a8 <__mdiff+0x108>)
 80112f2:	4602      	mov	r2, r0
 80112f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80112f8:	e7e6      	b.n	80112c8 <__mdiff+0x28>
 80112fa:	693e      	ldr	r6, [r7, #16]
 80112fc:	60c5      	str	r5, [r0, #12]
 80112fe:	6925      	ldr	r5, [r4, #16]
 8011300:	f107 0114 	add.w	r1, r7, #20
 8011304:	f104 0914 	add.w	r9, r4, #20
 8011308:	f100 0e14 	add.w	lr, r0, #20
 801130c:	f107 0210 	add.w	r2, r7, #16
 8011310:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011314:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011318:	46f2      	mov	sl, lr
 801131a:	2700      	movs	r7, #0
 801131c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011320:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011324:	fa1f f883 	uxth.w	r8, r3
 8011328:	fa17 f78b 	uxtah	r7, r7, fp
 801132c:	0c1b      	lsrs	r3, r3, #16
 801132e:	eba7 0808 	sub.w	r8, r7, r8
 8011332:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011336:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801133a:	fa1f f888 	uxth.w	r8, r8
 801133e:	141f      	asrs	r7, r3, #16
 8011340:	454d      	cmp	r5, r9
 8011342:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011346:	f84a 3b04 	str.w	r3, [sl], #4
 801134a:	d8e7      	bhi.n	801131c <__mdiff+0x7c>
 801134c:	1b2b      	subs	r3, r5, r4
 801134e:	3b15      	subs	r3, #21
 8011350:	f023 0303 	bic.w	r3, r3, #3
 8011354:	3304      	adds	r3, #4
 8011356:	3415      	adds	r4, #21
 8011358:	42a5      	cmp	r5, r4
 801135a:	bf38      	it	cc
 801135c:	2304      	movcc	r3, #4
 801135e:	4419      	add	r1, r3
 8011360:	4473      	add	r3, lr
 8011362:	469e      	mov	lr, r3
 8011364:	460d      	mov	r5, r1
 8011366:	4565      	cmp	r5, ip
 8011368:	d30e      	bcc.n	8011388 <__mdiff+0xe8>
 801136a:	f10c 0203 	add.w	r2, ip, #3
 801136e:	1a52      	subs	r2, r2, r1
 8011370:	f022 0203 	bic.w	r2, r2, #3
 8011374:	3903      	subs	r1, #3
 8011376:	458c      	cmp	ip, r1
 8011378:	bf38      	it	cc
 801137a:	2200      	movcc	r2, #0
 801137c:	441a      	add	r2, r3
 801137e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011382:	b17b      	cbz	r3, 80113a4 <__mdiff+0x104>
 8011384:	6106      	str	r6, [r0, #16]
 8011386:	e7a5      	b.n	80112d4 <__mdiff+0x34>
 8011388:	f855 8b04 	ldr.w	r8, [r5], #4
 801138c:	fa17 f488 	uxtah	r4, r7, r8
 8011390:	1422      	asrs	r2, r4, #16
 8011392:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011396:	b2a4      	uxth	r4, r4
 8011398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801139c:	f84e 4b04 	str.w	r4, [lr], #4
 80113a0:	1417      	asrs	r7, r2, #16
 80113a2:	e7e0      	b.n	8011366 <__mdiff+0xc6>
 80113a4:	3e01      	subs	r6, #1
 80113a6:	e7ea      	b.n	801137e <__mdiff+0xde>
 80113a8:	08012e70 	.word	0x08012e70
 80113ac:	08012f00 	.word	0x08012f00

080113b0 <__ulp>:
 80113b0:	b082      	sub	sp, #8
 80113b2:	ed8d 0b00 	vstr	d0, [sp]
 80113b6:	9b01      	ldr	r3, [sp, #4]
 80113b8:	4912      	ldr	r1, [pc, #72]	; (8011404 <__ulp+0x54>)
 80113ba:	4019      	ands	r1, r3
 80113bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80113c0:	2900      	cmp	r1, #0
 80113c2:	dd05      	ble.n	80113d0 <__ulp+0x20>
 80113c4:	2200      	movs	r2, #0
 80113c6:	460b      	mov	r3, r1
 80113c8:	ec43 2b10 	vmov	d0, r2, r3
 80113cc:	b002      	add	sp, #8
 80113ce:	4770      	bx	lr
 80113d0:	4249      	negs	r1, r1
 80113d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80113d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80113da:	f04f 0200 	mov.w	r2, #0
 80113de:	f04f 0300 	mov.w	r3, #0
 80113e2:	da04      	bge.n	80113ee <__ulp+0x3e>
 80113e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80113e8:	fa41 f300 	asr.w	r3, r1, r0
 80113ec:	e7ec      	b.n	80113c8 <__ulp+0x18>
 80113ee:	f1a0 0114 	sub.w	r1, r0, #20
 80113f2:	291e      	cmp	r1, #30
 80113f4:	bfda      	itte	le
 80113f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80113fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80113fe:	2101      	movgt	r1, #1
 8011400:	460a      	mov	r2, r1
 8011402:	e7e1      	b.n	80113c8 <__ulp+0x18>
 8011404:	7ff00000 	.word	0x7ff00000

08011408 <__b2d>:
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140a:	6905      	ldr	r5, [r0, #16]
 801140c:	f100 0714 	add.w	r7, r0, #20
 8011410:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011414:	1f2e      	subs	r6, r5, #4
 8011416:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801141a:	4620      	mov	r0, r4
 801141c:	f7ff fd52 	bl	8010ec4 <__hi0bits>
 8011420:	f1c0 0320 	rsb	r3, r0, #32
 8011424:	280a      	cmp	r0, #10
 8011426:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80114a4 <__b2d+0x9c>
 801142a:	600b      	str	r3, [r1, #0]
 801142c:	dc14      	bgt.n	8011458 <__b2d+0x50>
 801142e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011432:	fa24 f10e 	lsr.w	r1, r4, lr
 8011436:	42b7      	cmp	r7, r6
 8011438:	ea41 030c 	orr.w	r3, r1, ip
 801143c:	bf34      	ite	cc
 801143e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011442:	2100      	movcs	r1, #0
 8011444:	3015      	adds	r0, #21
 8011446:	fa04 f000 	lsl.w	r0, r4, r0
 801144a:	fa21 f10e 	lsr.w	r1, r1, lr
 801144e:	ea40 0201 	orr.w	r2, r0, r1
 8011452:	ec43 2b10 	vmov	d0, r2, r3
 8011456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011458:	42b7      	cmp	r7, r6
 801145a:	bf3a      	itte	cc
 801145c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011460:	f1a5 0608 	subcc.w	r6, r5, #8
 8011464:	2100      	movcs	r1, #0
 8011466:	380b      	subs	r0, #11
 8011468:	d017      	beq.n	801149a <__b2d+0x92>
 801146a:	f1c0 0c20 	rsb	ip, r0, #32
 801146e:	fa04 f500 	lsl.w	r5, r4, r0
 8011472:	42be      	cmp	r6, r7
 8011474:	fa21 f40c 	lsr.w	r4, r1, ip
 8011478:	ea45 0504 	orr.w	r5, r5, r4
 801147c:	bf8c      	ite	hi
 801147e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011482:	2400      	movls	r4, #0
 8011484:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011488:	fa01 f000 	lsl.w	r0, r1, r0
 801148c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011490:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011494:	ea40 0204 	orr.w	r2, r0, r4
 8011498:	e7db      	b.n	8011452 <__b2d+0x4a>
 801149a:	ea44 030c 	orr.w	r3, r4, ip
 801149e:	460a      	mov	r2, r1
 80114a0:	e7d7      	b.n	8011452 <__b2d+0x4a>
 80114a2:	bf00      	nop
 80114a4:	3ff00000 	.word	0x3ff00000

080114a8 <__d2b>:
 80114a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114ac:	4689      	mov	r9, r1
 80114ae:	2101      	movs	r1, #1
 80114b0:	ec57 6b10 	vmov	r6, r7, d0
 80114b4:	4690      	mov	r8, r2
 80114b6:	f7ff fc0f 	bl	8010cd8 <_Balloc>
 80114ba:	4604      	mov	r4, r0
 80114bc:	b930      	cbnz	r0, 80114cc <__d2b+0x24>
 80114be:	4602      	mov	r2, r0
 80114c0:	4b25      	ldr	r3, [pc, #148]	; (8011558 <__d2b+0xb0>)
 80114c2:	4826      	ldr	r0, [pc, #152]	; (801155c <__d2b+0xb4>)
 80114c4:	f240 310a 	movw	r1, #778	; 0x30a
 80114c8:	f7fe f8e8 	bl	800f69c <__assert_func>
 80114cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80114d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114d4:	bb35      	cbnz	r5, 8011524 <__d2b+0x7c>
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	d028      	beq.n	801152e <__d2b+0x86>
 80114dc:	4668      	mov	r0, sp
 80114de:	9600      	str	r6, [sp, #0]
 80114e0:	f7ff fd10 	bl	8010f04 <__lo0bits>
 80114e4:	9900      	ldr	r1, [sp, #0]
 80114e6:	b300      	cbz	r0, 801152a <__d2b+0x82>
 80114e8:	9a01      	ldr	r2, [sp, #4]
 80114ea:	f1c0 0320 	rsb	r3, r0, #32
 80114ee:	fa02 f303 	lsl.w	r3, r2, r3
 80114f2:	430b      	orrs	r3, r1
 80114f4:	40c2      	lsrs	r2, r0
 80114f6:	6163      	str	r3, [r4, #20]
 80114f8:	9201      	str	r2, [sp, #4]
 80114fa:	9b01      	ldr	r3, [sp, #4]
 80114fc:	61a3      	str	r3, [r4, #24]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	bf14      	ite	ne
 8011502:	2202      	movne	r2, #2
 8011504:	2201      	moveq	r2, #1
 8011506:	6122      	str	r2, [r4, #16]
 8011508:	b1d5      	cbz	r5, 8011540 <__d2b+0x98>
 801150a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801150e:	4405      	add	r5, r0
 8011510:	f8c9 5000 	str.w	r5, [r9]
 8011514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011518:	f8c8 0000 	str.w	r0, [r8]
 801151c:	4620      	mov	r0, r4
 801151e:	b003      	add	sp, #12
 8011520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011528:	e7d5      	b.n	80114d6 <__d2b+0x2e>
 801152a:	6161      	str	r1, [r4, #20]
 801152c:	e7e5      	b.n	80114fa <__d2b+0x52>
 801152e:	a801      	add	r0, sp, #4
 8011530:	f7ff fce8 	bl	8010f04 <__lo0bits>
 8011534:	9b01      	ldr	r3, [sp, #4]
 8011536:	6163      	str	r3, [r4, #20]
 8011538:	2201      	movs	r2, #1
 801153a:	6122      	str	r2, [r4, #16]
 801153c:	3020      	adds	r0, #32
 801153e:	e7e3      	b.n	8011508 <__d2b+0x60>
 8011540:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011548:	f8c9 0000 	str.w	r0, [r9]
 801154c:	6918      	ldr	r0, [r3, #16]
 801154e:	f7ff fcb9 	bl	8010ec4 <__hi0bits>
 8011552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011556:	e7df      	b.n	8011518 <__d2b+0x70>
 8011558:	08012e70 	.word	0x08012e70
 801155c:	08012f00 	.word	0x08012f00

08011560 <__ratio>:
 8011560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	4688      	mov	r8, r1
 8011566:	4669      	mov	r1, sp
 8011568:	4681      	mov	r9, r0
 801156a:	f7ff ff4d 	bl	8011408 <__b2d>
 801156e:	a901      	add	r1, sp, #4
 8011570:	4640      	mov	r0, r8
 8011572:	ec55 4b10 	vmov	r4, r5, d0
 8011576:	f7ff ff47 	bl	8011408 <__b2d>
 801157a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801157e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011582:	eba3 0c02 	sub.w	ip, r3, r2
 8011586:	e9dd 3200 	ldrd	r3, r2, [sp]
 801158a:	1a9b      	subs	r3, r3, r2
 801158c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011590:	ec51 0b10 	vmov	r0, r1, d0
 8011594:	2b00      	cmp	r3, #0
 8011596:	bfd6      	itet	le
 8011598:	460a      	movle	r2, r1
 801159a:	462a      	movgt	r2, r5
 801159c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80115a0:	468b      	mov	fp, r1
 80115a2:	462f      	mov	r7, r5
 80115a4:	bfd4      	ite	le
 80115a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80115aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80115ae:	4620      	mov	r0, r4
 80115b0:	ee10 2a10 	vmov	r2, s0
 80115b4:	465b      	mov	r3, fp
 80115b6:	4639      	mov	r1, r7
 80115b8:	f7ef f958 	bl	800086c <__aeabi_ddiv>
 80115bc:	ec41 0b10 	vmov	d0, r0, r1
 80115c0:	b003      	add	sp, #12
 80115c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115c6 <__copybits>:
 80115c6:	3901      	subs	r1, #1
 80115c8:	b570      	push	{r4, r5, r6, lr}
 80115ca:	1149      	asrs	r1, r1, #5
 80115cc:	6914      	ldr	r4, [r2, #16]
 80115ce:	3101      	adds	r1, #1
 80115d0:	f102 0314 	add.w	r3, r2, #20
 80115d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115dc:	1f05      	subs	r5, r0, #4
 80115de:	42a3      	cmp	r3, r4
 80115e0:	d30c      	bcc.n	80115fc <__copybits+0x36>
 80115e2:	1aa3      	subs	r3, r4, r2
 80115e4:	3b11      	subs	r3, #17
 80115e6:	f023 0303 	bic.w	r3, r3, #3
 80115ea:	3211      	adds	r2, #17
 80115ec:	42a2      	cmp	r2, r4
 80115ee:	bf88      	it	hi
 80115f0:	2300      	movhi	r3, #0
 80115f2:	4418      	add	r0, r3
 80115f4:	2300      	movs	r3, #0
 80115f6:	4288      	cmp	r0, r1
 80115f8:	d305      	bcc.n	8011606 <__copybits+0x40>
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8011600:	f845 6f04 	str.w	r6, [r5, #4]!
 8011604:	e7eb      	b.n	80115de <__copybits+0x18>
 8011606:	f840 3b04 	str.w	r3, [r0], #4
 801160a:	e7f4      	b.n	80115f6 <__copybits+0x30>

0801160c <__any_on>:
 801160c:	f100 0214 	add.w	r2, r0, #20
 8011610:	6900      	ldr	r0, [r0, #16]
 8011612:	114b      	asrs	r3, r1, #5
 8011614:	4298      	cmp	r0, r3
 8011616:	b510      	push	{r4, lr}
 8011618:	db11      	blt.n	801163e <__any_on+0x32>
 801161a:	dd0a      	ble.n	8011632 <__any_on+0x26>
 801161c:	f011 011f 	ands.w	r1, r1, #31
 8011620:	d007      	beq.n	8011632 <__any_on+0x26>
 8011622:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011626:	fa24 f001 	lsr.w	r0, r4, r1
 801162a:	fa00 f101 	lsl.w	r1, r0, r1
 801162e:	428c      	cmp	r4, r1
 8011630:	d10b      	bne.n	801164a <__any_on+0x3e>
 8011632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011636:	4293      	cmp	r3, r2
 8011638:	d803      	bhi.n	8011642 <__any_on+0x36>
 801163a:	2000      	movs	r0, #0
 801163c:	bd10      	pop	{r4, pc}
 801163e:	4603      	mov	r3, r0
 8011640:	e7f7      	b.n	8011632 <__any_on+0x26>
 8011642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011646:	2900      	cmp	r1, #0
 8011648:	d0f5      	beq.n	8011636 <__any_on+0x2a>
 801164a:	2001      	movs	r0, #1
 801164c:	e7f6      	b.n	801163c <__any_on+0x30>

0801164e <_calloc_r>:
 801164e:	b513      	push	{r0, r1, r4, lr}
 8011650:	434a      	muls	r2, r1
 8011652:	4611      	mov	r1, r2
 8011654:	9201      	str	r2, [sp, #4]
 8011656:	f7fc f8a1 	bl	800d79c <_malloc_r>
 801165a:	4604      	mov	r4, r0
 801165c:	b118      	cbz	r0, 8011666 <_calloc_r+0x18>
 801165e:	9a01      	ldr	r2, [sp, #4]
 8011660:	2100      	movs	r1, #0
 8011662:	f7fc f843 	bl	800d6ec <memset>
 8011666:	4620      	mov	r0, r4
 8011668:	b002      	add	sp, #8
 801166a:	bd10      	pop	{r4, pc}

0801166c <_realloc_r>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	4607      	mov	r7, r0
 8011670:	4614      	mov	r4, r2
 8011672:	460e      	mov	r6, r1
 8011674:	b921      	cbnz	r1, 8011680 <_realloc_r+0x14>
 8011676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801167a:	4611      	mov	r1, r2
 801167c:	f7fc b88e 	b.w	800d79c <_malloc_r>
 8011680:	b922      	cbnz	r2, 801168c <_realloc_r+0x20>
 8011682:	f7fc f83b 	bl	800d6fc <_free_r>
 8011686:	4625      	mov	r5, r4
 8011688:	4628      	mov	r0, r5
 801168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801168c:	f000 ffaa 	bl	80125e4 <_malloc_usable_size_r>
 8011690:	42a0      	cmp	r0, r4
 8011692:	d20f      	bcs.n	80116b4 <_realloc_r+0x48>
 8011694:	4621      	mov	r1, r4
 8011696:	4638      	mov	r0, r7
 8011698:	f7fc f880 	bl	800d79c <_malloc_r>
 801169c:	4605      	mov	r5, r0
 801169e:	2800      	cmp	r0, #0
 80116a0:	d0f2      	beq.n	8011688 <_realloc_r+0x1c>
 80116a2:	4631      	mov	r1, r6
 80116a4:	4622      	mov	r2, r4
 80116a6:	f7fb fff9 	bl	800d69c <memcpy>
 80116aa:	4631      	mov	r1, r6
 80116ac:	4638      	mov	r0, r7
 80116ae:	f7fc f825 	bl	800d6fc <_free_r>
 80116b2:	e7e9      	b.n	8011688 <_realloc_r+0x1c>
 80116b4:	4635      	mov	r5, r6
 80116b6:	e7e7      	b.n	8011688 <_realloc_r+0x1c>

080116b8 <__ssputs_r>:
 80116b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116bc:	688e      	ldr	r6, [r1, #8]
 80116be:	429e      	cmp	r6, r3
 80116c0:	4682      	mov	sl, r0
 80116c2:	460c      	mov	r4, r1
 80116c4:	4690      	mov	r8, r2
 80116c6:	461f      	mov	r7, r3
 80116c8:	d838      	bhi.n	801173c <__ssputs_r+0x84>
 80116ca:	898a      	ldrh	r2, [r1, #12]
 80116cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116d0:	d032      	beq.n	8011738 <__ssputs_r+0x80>
 80116d2:	6825      	ldr	r5, [r4, #0]
 80116d4:	6909      	ldr	r1, [r1, #16]
 80116d6:	eba5 0901 	sub.w	r9, r5, r1
 80116da:	6965      	ldr	r5, [r4, #20]
 80116dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116e4:	3301      	adds	r3, #1
 80116e6:	444b      	add	r3, r9
 80116e8:	106d      	asrs	r5, r5, #1
 80116ea:	429d      	cmp	r5, r3
 80116ec:	bf38      	it	cc
 80116ee:	461d      	movcc	r5, r3
 80116f0:	0553      	lsls	r3, r2, #21
 80116f2:	d531      	bpl.n	8011758 <__ssputs_r+0xa0>
 80116f4:	4629      	mov	r1, r5
 80116f6:	f7fc f851 	bl	800d79c <_malloc_r>
 80116fa:	4606      	mov	r6, r0
 80116fc:	b950      	cbnz	r0, 8011714 <__ssputs_r+0x5c>
 80116fe:	230c      	movs	r3, #12
 8011700:	f8ca 3000 	str.w	r3, [sl]
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	f04f 30ff 	mov.w	r0, #4294967295
 8011710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011714:	6921      	ldr	r1, [r4, #16]
 8011716:	464a      	mov	r2, r9
 8011718:	f7fb ffc0 	bl	800d69c <memcpy>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	6126      	str	r6, [r4, #16]
 801172a:	6165      	str	r5, [r4, #20]
 801172c:	444e      	add	r6, r9
 801172e:	eba5 0509 	sub.w	r5, r5, r9
 8011732:	6026      	str	r6, [r4, #0]
 8011734:	60a5      	str	r5, [r4, #8]
 8011736:	463e      	mov	r6, r7
 8011738:	42be      	cmp	r6, r7
 801173a:	d900      	bls.n	801173e <__ssputs_r+0x86>
 801173c:	463e      	mov	r6, r7
 801173e:	4632      	mov	r2, r6
 8011740:	6820      	ldr	r0, [r4, #0]
 8011742:	4641      	mov	r1, r8
 8011744:	f7fb ffb8 	bl	800d6b8 <memmove>
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	1b9b      	subs	r3, r3, r6
 801174e:	4432      	add	r2, r6
 8011750:	60a3      	str	r3, [r4, #8]
 8011752:	6022      	str	r2, [r4, #0]
 8011754:	2000      	movs	r0, #0
 8011756:	e7db      	b.n	8011710 <__ssputs_r+0x58>
 8011758:	462a      	mov	r2, r5
 801175a:	f7ff ff87 	bl	801166c <_realloc_r>
 801175e:	4606      	mov	r6, r0
 8011760:	2800      	cmp	r0, #0
 8011762:	d1e1      	bne.n	8011728 <__ssputs_r+0x70>
 8011764:	6921      	ldr	r1, [r4, #16]
 8011766:	4650      	mov	r0, sl
 8011768:	f7fb ffc8 	bl	800d6fc <_free_r>
 801176c:	e7c7      	b.n	80116fe <__ssputs_r+0x46>
	...

08011770 <_svfiprintf_r>:
 8011770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	4698      	mov	r8, r3
 8011776:	898b      	ldrh	r3, [r1, #12]
 8011778:	061b      	lsls	r3, r3, #24
 801177a:	b09d      	sub	sp, #116	; 0x74
 801177c:	4607      	mov	r7, r0
 801177e:	460d      	mov	r5, r1
 8011780:	4614      	mov	r4, r2
 8011782:	d50e      	bpl.n	80117a2 <_svfiprintf_r+0x32>
 8011784:	690b      	ldr	r3, [r1, #16]
 8011786:	b963      	cbnz	r3, 80117a2 <_svfiprintf_r+0x32>
 8011788:	2140      	movs	r1, #64	; 0x40
 801178a:	f7fc f807 	bl	800d79c <_malloc_r>
 801178e:	6028      	str	r0, [r5, #0]
 8011790:	6128      	str	r0, [r5, #16]
 8011792:	b920      	cbnz	r0, 801179e <_svfiprintf_r+0x2e>
 8011794:	230c      	movs	r3, #12
 8011796:	603b      	str	r3, [r7, #0]
 8011798:	f04f 30ff 	mov.w	r0, #4294967295
 801179c:	e0d1      	b.n	8011942 <_svfiprintf_r+0x1d2>
 801179e:	2340      	movs	r3, #64	; 0x40
 80117a0:	616b      	str	r3, [r5, #20]
 80117a2:	2300      	movs	r3, #0
 80117a4:	9309      	str	r3, [sp, #36]	; 0x24
 80117a6:	2320      	movs	r3, #32
 80117a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80117b0:	2330      	movs	r3, #48	; 0x30
 80117b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801195c <_svfiprintf_r+0x1ec>
 80117b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117ba:	f04f 0901 	mov.w	r9, #1
 80117be:	4623      	mov	r3, r4
 80117c0:	469a      	mov	sl, r3
 80117c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117c6:	b10a      	cbz	r2, 80117cc <_svfiprintf_r+0x5c>
 80117c8:	2a25      	cmp	r2, #37	; 0x25
 80117ca:	d1f9      	bne.n	80117c0 <_svfiprintf_r+0x50>
 80117cc:	ebba 0b04 	subs.w	fp, sl, r4
 80117d0:	d00b      	beq.n	80117ea <_svfiprintf_r+0x7a>
 80117d2:	465b      	mov	r3, fp
 80117d4:	4622      	mov	r2, r4
 80117d6:	4629      	mov	r1, r5
 80117d8:	4638      	mov	r0, r7
 80117da:	f7ff ff6d 	bl	80116b8 <__ssputs_r>
 80117de:	3001      	adds	r0, #1
 80117e0:	f000 80aa 	beq.w	8011938 <_svfiprintf_r+0x1c8>
 80117e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117e6:	445a      	add	r2, fp
 80117e8:	9209      	str	r2, [sp, #36]	; 0x24
 80117ea:	f89a 3000 	ldrb.w	r3, [sl]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f000 80a2 	beq.w	8011938 <_svfiprintf_r+0x1c8>
 80117f4:	2300      	movs	r3, #0
 80117f6:	f04f 32ff 	mov.w	r2, #4294967295
 80117fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117fe:	f10a 0a01 	add.w	sl, sl, #1
 8011802:	9304      	str	r3, [sp, #16]
 8011804:	9307      	str	r3, [sp, #28]
 8011806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801180a:	931a      	str	r3, [sp, #104]	; 0x68
 801180c:	4654      	mov	r4, sl
 801180e:	2205      	movs	r2, #5
 8011810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011814:	4851      	ldr	r0, [pc, #324]	; (801195c <_svfiprintf_r+0x1ec>)
 8011816:	f7ee fcf3 	bl	8000200 <memchr>
 801181a:	9a04      	ldr	r2, [sp, #16]
 801181c:	b9d8      	cbnz	r0, 8011856 <_svfiprintf_r+0xe6>
 801181e:	06d0      	lsls	r0, r2, #27
 8011820:	bf44      	itt	mi
 8011822:	2320      	movmi	r3, #32
 8011824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011828:	0711      	lsls	r1, r2, #28
 801182a:	bf44      	itt	mi
 801182c:	232b      	movmi	r3, #43	; 0x2b
 801182e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011832:	f89a 3000 	ldrb.w	r3, [sl]
 8011836:	2b2a      	cmp	r3, #42	; 0x2a
 8011838:	d015      	beq.n	8011866 <_svfiprintf_r+0xf6>
 801183a:	9a07      	ldr	r2, [sp, #28]
 801183c:	4654      	mov	r4, sl
 801183e:	2000      	movs	r0, #0
 8011840:	f04f 0c0a 	mov.w	ip, #10
 8011844:	4621      	mov	r1, r4
 8011846:	f811 3b01 	ldrb.w	r3, [r1], #1
 801184a:	3b30      	subs	r3, #48	; 0x30
 801184c:	2b09      	cmp	r3, #9
 801184e:	d94e      	bls.n	80118ee <_svfiprintf_r+0x17e>
 8011850:	b1b0      	cbz	r0, 8011880 <_svfiprintf_r+0x110>
 8011852:	9207      	str	r2, [sp, #28]
 8011854:	e014      	b.n	8011880 <_svfiprintf_r+0x110>
 8011856:	eba0 0308 	sub.w	r3, r0, r8
 801185a:	fa09 f303 	lsl.w	r3, r9, r3
 801185e:	4313      	orrs	r3, r2
 8011860:	9304      	str	r3, [sp, #16]
 8011862:	46a2      	mov	sl, r4
 8011864:	e7d2      	b.n	801180c <_svfiprintf_r+0x9c>
 8011866:	9b03      	ldr	r3, [sp, #12]
 8011868:	1d19      	adds	r1, r3, #4
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	9103      	str	r1, [sp, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	bfbb      	ittet	lt
 8011872:	425b      	neglt	r3, r3
 8011874:	f042 0202 	orrlt.w	r2, r2, #2
 8011878:	9307      	strge	r3, [sp, #28]
 801187a:	9307      	strlt	r3, [sp, #28]
 801187c:	bfb8      	it	lt
 801187e:	9204      	strlt	r2, [sp, #16]
 8011880:	7823      	ldrb	r3, [r4, #0]
 8011882:	2b2e      	cmp	r3, #46	; 0x2e
 8011884:	d10c      	bne.n	80118a0 <_svfiprintf_r+0x130>
 8011886:	7863      	ldrb	r3, [r4, #1]
 8011888:	2b2a      	cmp	r3, #42	; 0x2a
 801188a:	d135      	bne.n	80118f8 <_svfiprintf_r+0x188>
 801188c:	9b03      	ldr	r3, [sp, #12]
 801188e:	1d1a      	adds	r2, r3, #4
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	9203      	str	r2, [sp, #12]
 8011894:	2b00      	cmp	r3, #0
 8011896:	bfb8      	it	lt
 8011898:	f04f 33ff 	movlt.w	r3, #4294967295
 801189c:	3402      	adds	r4, #2
 801189e:	9305      	str	r3, [sp, #20]
 80118a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801196c <_svfiprintf_r+0x1fc>
 80118a4:	7821      	ldrb	r1, [r4, #0]
 80118a6:	2203      	movs	r2, #3
 80118a8:	4650      	mov	r0, sl
 80118aa:	f7ee fca9 	bl	8000200 <memchr>
 80118ae:	b140      	cbz	r0, 80118c2 <_svfiprintf_r+0x152>
 80118b0:	2340      	movs	r3, #64	; 0x40
 80118b2:	eba0 000a 	sub.w	r0, r0, sl
 80118b6:	fa03 f000 	lsl.w	r0, r3, r0
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	4303      	orrs	r3, r0
 80118be:	3401      	adds	r4, #1
 80118c0:	9304      	str	r3, [sp, #16]
 80118c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118c6:	4826      	ldr	r0, [pc, #152]	; (8011960 <_svfiprintf_r+0x1f0>)
 80118c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118cc:	2206      	movs	r2, #6
 80118ce:	f7ee fc97 	bl	8000200 <memchr>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d038      	beq.n	8011948 <_svfiprintf_r+0x1d8>
 80118d6:	4b23      	ldr	r3, [pc, #140]	; (8011964 <_svfiprintf_r+0x1f4>)
 80118d8:	bb1b      	cbnz	r3, 8011922 <_svfiprintf_r+0x1b2>
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	3307      	adds	r3, #7
 80118de:	f023 0307 	bic.w	r3, r3, #7
 80118e2:	3308      	adds	r3, #8
 80118e4:	9303      	str	r3, [sp, #12]
 80118e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e8:	4433      	add	r3, r6
 80118ea:	9309      	str	r3, [sp, #36]	; 0x24
 80118ec:	e767      	b.n	80117be <_svfiprintf_r+0x4e>
 80118ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80118f2:	460c      	mov	r4, r1
 80118f4:	2001      	movs	r0, #1
 80118f6:	e7a5      	b.n	8011844 <_svfiprintf_r+0xd4>
 80118f8:	2300      	movs	r3, #0
 80118fa:	3401      	adds	r4, #1
 80118fc:	9305      	str	r3, [sp, #20]
 80118fe:	4619      	mov	r1, r3
 8011900:	f04f 0c0a 	mov.w	ip, #10
 8011904:	4620      	mov	r0, r4
 8011906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801190a:	3a30      	subs	r2, #48	; 0x30
 801190c:	2a09      	cmp	r2, #9
 801190e:	d903      	bls.n	8011918 <_svfiprintf_r+0x1a8>
 8011910:	2b00      	cmp	r3, #0
 8011912:	d0c5      	beq.n	80118a0 <_svfiprintf_r+0x130>
 8011914:	9105      	str	r1, [sp, #20]
 8011916:	e7c3      	b.n	80118a0 <_svfiprintf_r+0x130>
 8011918:	fb0c 2101 	mla	r1, ip, r1, r2
 801191c:	4604      	mov	r4, r0
 801191e:	2301      	movs	r3, #1
 8011920:	e7f0      	b.n	8011904 <_svfiprintf_r+0x194>
 8011922:	ab03      	add	r3, sp, #12
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	462a      	mov	r2, r5
 8011928:	4b0f      	ldr	r3, [pc, #60]	; (8011968 <_svfiprintf_r+0x1f8>)
 801192a:	a904      	add	r1, sp, #16
 801192c:	4638      	mov	r0, r7
 801192e:	f7fc f82f 	bl	800d990 <_printf_float>
 8011932:	1c42      	adds	r2, r0, #1
 8011934:	4606      	mov	r6, r0
 8011936:	d1d6      	bne.n	80118e6 <_svfiprintf_r+0x176>
 8011938:	89ab      	ldrh	r3, [r5, #12]
 801193a:	065b      	lsls	r3, r3, #25
 801193c:	f53f af2c 	bmi.w	8011798 <_svfiprintf_r+0x28>
 8011940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011942:	b01d      	add	sp, #116	; 0x74
 8011944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011948:	ab03      	add	r3, sp, #12
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	462a      	mov	r2, r5
 801194e:	4b06      	ldr	r3, [pc, #24]	; (8011968 <_svfiprintf_r+0x1f8>)
 8011950:	a904      	add	r1, sp, #16
 8011952:	4638      	mov	r0, r7
 8011954:	f7fc fac0 	bl	800ded8 <_printf_i>
 8011958:	e7eb      	b.n	8011932 <_svfiprintf_r+0x1c2>
 801195a:	bf00      	nop
 801195c:	0801305c 	.word	0x0801305c
 8011960:	08013066 	.word	0x08013066
 8011964:	0800d991 	.word	0x0800d991
 8011968:	080116b9 	.word	0x080116b9
 801196c:	08013062 	.word	0x08013062

08011970 <_sungetc_r>:
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	1c4b      	adds	r3, r1, #1
 8011974:	4614      	mov	r4, r2
 8011976:	d103      	bne.n	8011980 <_sungetc_r+0x10>
 8011978:	f04f 35ff 	mov.w	r5, #4294967295
 801197c:	4628      	mov	r0, r5
 801197e:	bd38      	pop	{r3, r4, r5, pc}
 8011980:	8993      	ldrh	r3, [r2, #12]
 8011982:	f023 0320 	bic.w	r3, r3, #32
 8011986:	8193      	strh	r3, [r2, #12]
 8011988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801198a:	6852      	ldr	r2, [r2, #4]
 801198c:	b2cd      	uxtb	r5, r1
 801198e:	b18b      	cbz	r3, 80119b4 <_sungetc_r+0x44>
 8011990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011992:	4293      	cmp	r3, r2
 8011994:	dd08      	ble.n	80119a8 <_sungetc_r+0x38>
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	1e5a      	subs	r2, r3, #1
 801199a:	6022      	str	r2, [r4, #0]
 801199c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80119a0:	6863      	ldr	r3, [r4, #4]
 80119a2:	3301      	adds	r3, #1
 80119a4:	6063      	str	r3, [r4, #4]
 80119a6:	e7e9      	b.n	801197c <_sungetc_r+0xc>
 80119a8:	4621      	mov	r1, r4
 80119aa:	f000 fcaf 	bl	801230c <__submore>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d0f1      	beq.n	8011996 <_sungetc_r+0x26>
 80119b2:	e7e1      	b.n	8011978 <_sungetc_r+0x8>
 80119b4:	6921      	ldr	r1, [r4, #16]
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	b151      	cbz	r1, 80119d0 <_sungetc_r+0x60>
 80119ba:	4299      	cmp	r1, r3
 80119bc:	d208      	bcs.n	80119d0 <_sungetc_r+0x60>
 80119be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80119c2:	42a9      	cmp	r1, r5
 80119c4:	d104      	bne.n	80119d0 <_sungetc_r+0x60>
 80119c6:	3b01      	subs	r3, #1
 80119c8:	3201      	adds	r2, #1
 80119ca:	6023      	str	r3, [r4, #0]
 80119cc:	6062      	str	r2, [r4, #4]
 80119ce:	e7d5      	b.n	801197c <_sungetc_r+0xc>
 80119d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80119d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119d8:	6363      	str	r3, [r4, #52]	; 0x34
 80119da:	2303      	movs	r3, #3
 80119dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80119de:	4623      	mov	r3, r4
 80119e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	2301      	movs	r3, #1
 80119e8:	e7dc      	b.n	80119a4 <_sungetc_r+0x34>

080119ea <__ssrefill_r>:
 80119ea:	b510      	push	{r4, lr}
 80119ec:	460c      	mov	r4, r1
 80119ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80119f0:	b169      	cbz	r1, 8011a0e <__ssrefill_r+0x24>
 80119f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119f6:	4299      	cmp	r1, r3
 80119f8:	d001      	beq.n	80119fe <__ssrefill_r+0x14>
 80119fa:	f7fb fe7f 	bl	800d6fc <_free_r>
 80119fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a00:	6063      	str	r3, [r4, #4]
 8011a02:	2000      	movs	r0, #0
 8011a04:	6360      	str	r0, [r4, #52]	; 0x34
 8011a06:	b113      	cbz	r3, 8011a0e <__ssrefill_r+0x24>
 8011a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a0a:	6023      	str	r3, [r4, #0]
 8011a0c:	bd10      	pop	{r4, pc}
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	2300      	movs	r3, #0
 8011a14:	6063      	str	r3, [r4, #4]
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	f043 0320 	orr.w	r3, r3, #32
 8011a1c:	81a3      	strh	r3, [r4, #12]
 8011a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a22:	e7f3      	b.n	8011a0c <__ssrefill_r+0x22>

08011a24 <__ssvfiscanf_r>:
 8011a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	460c      	mov	r4, r1
 8011a2a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011a2e:	2100      	movs	r1, #0
 8011a30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011a34:	49b2      	ldr	r1, [pc, #712]	; (8011d00 <__ssvfiscanf_r+0x2dc>)
 8011a36:	91a0      	str	r1, [sp, #640]	; 0x280
 8011a38:	f10d 0804 	add.w	r8, sp, #4
 8011a3c:	49b1      	ldr	r1, [pc, #708]	; (8011d04 <__ssvfiscanf_r+0x2e0>)
 8011a3e:	4fb2      	ldr	r7, [pc, #712]	; (8011d08 <__ssvfiscanf_r+0x2e4>)
 8011a40:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8011d0c <__ssvfiscanf_r+0x2e8>
 8011a44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011a48:	4606      	mov	r6, r0
 8011a4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8011a4c:	9300      	str	r3, [sp, #0]
 8011a4e:	f892 a000 	ldrb.w	sl, [r2]
 8011a52:	f1ba 0f00 	cmp.w	sl, #0
 8011a56:	f000 8151 	beq.w	8011cfc <__ssvfiscanf_r+0x2d8>
 8011a5a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8011a5e:	f013 0308 	ands.w	r3, r3, #8
 8011a62:	f102 0501 	add.w	r5, r2, #1
 8011a66:	d019      	beq.n	8011a9c <__ssvfiscanf_r+0x78>
 8011a68:	6863      	ldr	r3, [r4, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	dd0f      	ble.n	8011a8e <__ssvfiscanf_r+0x6a>
 8011a6e:	6823      	ldr	r3, [r4, #0]
 8011a70:	781a      	ldrb	r2, [r3, #0]
 8011a72:	5cba      	ldrb	r2, [r7, r2]
 8011a74:	0712      	lsls	r2, r2, #28
 8011a76:	d401      	bmi.n	8011a7c <__ssvfiscanf_r+0x58>
 8011a78:	462a      	mov	r2, r5
 8011a7a:	e7e8      	b.n	8011a4e <__ssvfiscanf_r+0x2a>
 8011a7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011a7e:	3201      	adds	r2, #1
 8011a80:	9245      	str	r2, [sp, #276]	; 0x114
 8011a82:	6862      	ldr	r2, [r4, #4]
 8011a84:	3301      	adds	r3, #1
 8011a86:	3a01      	subs	r2, #1
 8011a88:	6062      	str	r2, [r4, #4]
 8011a8a:	6023      	str	r3, [r4, #0]
 8011a8c:	e7ec      	b.n	8011a68 <__ssvfiscanf_r+0x44>
 8011a8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a90:	4621      	mov	r1, r4
 8011a92:	4630      	mov	r0, r6
 8011a94:	4798      	blx	r3
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d0e9      	beq.n	8011a6e <__ssvfiscanf_r+0x4a>
 8011a9a:	e7ed      	b.n	8011a78 <__ssvfiscanf_r+0x54>
 8011a9c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8011aa0:	f040 8083 	bne.w	8011baa <__ssvfiscanf_r+0x186>
 8011aa4:	9341      	str	r3, [sp, #260]	; 0x104
 8011aa6:	9343      	str	r3, [sp, #268]	; 0x10c
 8011aa8:	7853      	ldrb	r3, [r2, #1]
 8011aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8011aac:	bf02      	ittt	eq
 8011aae:	2310      	moveq	r3, #16
 8011ab0:	1c95      	addeq	r5, r2, #2
 8011ab2:	9341      	streq	r3, [sp, #260]	; 0x104
 8011ab4:	220a      	movs	r2, #10
 8011ab6:	46ab      	mov	fp, r5
 8011ab8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8011abc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	d91d      	bls.n	8011b00 <__ssvfiscanf_r+0xdc>
 8011ac4:	4891      	ldr	r0, [pc, #580]	; (8011d0c <__ssvfiscanf_r+0x2e8>)
 8011ac6:	2203      	movs	r2, #3
 8011ac8:	f7ee fb9a 	bl	8000200 <memchr>
 8011acc:	b140      	cbz	r0, 8011ae0 <__ssvfiscanf_r+0xbc>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	eba0 0009 	sub.w	r0, r0, r9
 8011ad4:	fa03 f000 	lsl.w	r0, r3, r0
 8011ad8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ada:	4318      	orrs	r0, r3
 8011adc:	9041      	str	r0, [sp, #260]	; 0x104
 8011ade:	465d      	mov	r5, fp
 8011ae0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ae4:	2b78      	cmp	r3, #120	; 0x78
 8011ae6:	d806      	bhi.n	8011af6 <__ssvfiscanf_r+0xd2>
 8011ae8:	2b57      	cmp	r3, #87	; 0x57
 8011aea:	d810      	bhi.n	8011b0e <__ssvfiscanf_r+0xea>
 8011aec:	2b25      	cmp	r3, #37	; 0x25
 8011aee:	d05c      	beq.n	8011baa <__ssvfiscanf_r+0x186>
 8011af0:	d856      	bhi.n	8011ba0 <__ssvfiscanf_r+0x17c>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d074      	beq.n	8011be0 <__ssvfiscanf_r+0x1bc>
 8011af6:	2303      	movs	r3, #3
 8011af8:	9347      	str	r3, [sp, #284]	; 0x11c
 8011afa:	230a      	movs	r3, #10
 8011afc:	9342      	str	r3, [sp, #264]	; 0x108
 8011afe:	e081      	b.n	8011c04 <__ssvfiscanf_r+0x1e0>
 8011b00:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011b02:	fb02 1303 	mla	r3, r2, r3, r1
 8011b06:	3b30      	subs	r3, #48	; 0x30
 8011b08:	9343      	str	r3, [sp, #268]	; 0x10c
 8011b0a:	465d      	mov	r5, fp
 8011b0c:	e7d3      	b.n	8011ab6 <__ssvfiscanf_r+0x92>
 8011b0e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011b12:	2a20      	cmp	r2, #32
 8011b14:	d8ef      	bhi.n	8011af6 <__ssvfiscanf_r+0xd2>
 8011b16:	a101      	add	r1, pc, #4	; (adr r1, 8011b1c <__ssvfiscanf_r+0xf8>)
 8011b18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011b1c:	08011bef 	.word	0x08011bef
 8011b20:	08011af7 	.word	0x08011af7
 8011b24:	08011af7 	.word	0x08011af7
 8011b28:	08011c4d 	.word	0x08011c4d
 8011b2c:	08011af7 	.word	0x08011af7
 8011b30:	08011af7 	.word	0x08011af7
 8011b34:	08011af7 	.word	0x08011af7
 8011b38:	08011af7 	.word	0x08011af7
 8011b3c:	08011af7 	.word	0x08011af7
 8011b40:	08011af7 	.word	0x08011af7
 8011b44:	08011af7 	.word	0x08011af7
 8011b48:	08011c63 	.word	0x08011c63
 8011b4c:	08011c39 	.word	0x08011c39
 8011b50:	08011ba7 	.word	0x08011ba7
 8011b54:	08011ba7 	.word	0x08011ba7
 8011b58:	08011ba7 	.word	0x08011ba7
 8011b5c:	08011af7 	.word	0x08011af7
 8011b60:	08011c3d 	.word	0x08011c3d
 8011b64:	08011af7 	.word	0x08011af7
 8011b68:	08011af7 	.word	0x08011af7
 8011b6c:	08011af7 	.word	0x08011af7
 8011b70:	08011af7 	.word	0x08011af7
 8011b74:	08011c73 	.word	0x08011c73
 8011b78:	08011c45 	.word	0x08011c45
 8011b7c:	08011be7 	.word	0x08011be7
 8011b80:	08011af7 	.word	0x08011af7
 8011b84:	08011af7 	.word	0x08011af7
 8011b88:	08011c6f 	.word	0x08011c6f
 8011b8c:	08011af7 	.word	0x08011af7
 8011b90:	08011c39 	.word	0x08011c39
 8011b94:	08011af7 	.word	0x08011af7
 8011b98:	08011af7 	.word	0x08011af7
 8011b9c:	08011bef 	.word	0x08011bef
 8011ba0:	3b45      	subs	r3, #69	; 0x45
 8011ba2:	2b02      	cmp	r3, #2
 8011ba4:	d8a7      	bhi.n	8011af6 <__ssvfiscanf_r+0xd2>
 8011ba6:	2305      	movs	r3, #5
 8011ba8:	e02b      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011baa:	6863      	ldr	r3, [r4, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	dd0d      	ble.n	8011bcc <__ssvfiscanf_r+0x1a8>
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	781a      	ldrb	r2, [r3, #0]
 8011bb4:	4552      	cmp	r2, sl
 8011bb6:	f040 80a1 	bne.w	8011cfc <__ssvfiscanf_r+0x2d8>
 8011bba:	3301      	adds	r3, #1
 8011bbc:	6862      	ldr	r2, [r4, #4]
 8011bbe:	6023      	str	r3, [r4, #0]
 8011bc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011bc2:	3a01      	subs	r2, #1
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	6062      	str	r2, [r4, #4]
 8011bc8:	9345      	str	r3, [sp, #276]	; 0x114
 8011bca:	e755      	b.n	8011a78 <__ssvfiscanf_r+0x54>
 8011bcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011bce:	4621      	mov	r1, r4
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	4798      	blx	r3
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d0eb      	beq.n	8011bb0 <__ssvfiscanf_r+0x18c>
 8011bd8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	f040 8084 	bne.w	8011ce8 <__ssvfiscanf_r+0x2c4>
 8011be0:	f04f 30ff 	mov.w	r0, #4294967295
 8011be4:	e086      	b.n	8011cf4 <__ssvfiscanf_r+0x2d0>
 8011be6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011be8:	f042 0220 	orr.w	r2, r2, #32
 8011bec:	9241      	str	r2, [sp, #260]	; 0x104
 8011bee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011bf4:	9241      	str	r2, [sp, #260]	; 0x104
 8011bf6:	2210      	movs	r2, #16
 8011bf8:	2b6f      	cmp	r3, #111	; 0x6f
 8011bfa:	9242      	str	r2, [sp, #264]	; 0x108
 8011bfc:	bf34      	ite	cc
 8011bfe:	2303      	movcc	r3, #3
 8011c00:	2304      	movcs	r3, #4
 8011c02:	9347      	str	r3, [sp, #284]	; 0x11c
 8011c04:	6863      	ldr	r3, [r4, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	dd41      	ble.n	8011c8e <__ssvfiscanf_r+0x26a>
 8011c0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c0c:	0659      	lsls	r1, r3, #25
 8011c0e:	d404      	bmi.n	8011c1a <__ssvfiscanf_r+0x1f6>
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	5cba      	ldrb	r2, [r7, r2]
 8011c16:	0712      	lsls	r2, r2, #28
 8011c18:	d440      	bmi.n	8011c9c <__ssvfiscanf_r+0x278>
 8011c1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011c1c:	2b02      	cmp	r3, #2
 8011c1e:	dc4f      	bgt.n	8011cc0 <__ssvfiscanf_r+0x29c>
 8011c20:	466b      	mov	r3, sp
 8011c22:	4622      	mov	r2, r4
 8011c24:	a941      	add	r1, sp, #260	; 0x104
 8011c26:	4630      	mov	r0, r6
 8011c28:	f000 f9ce 	bl	8011fc8 <_scanf_chars>
 8011c2c:	2801      	cmp	r0, #1
 8011c2e:	d065      	beq.n	8011cfc <__ssvfiscanf_r+0x2d8>
 8011c30:	2802      	cmp	r0, #2
 8011c32:	f47f af21 	bne.w	8011a78 <__ssvfiscanf_r+0x54>
 8011c36:	e7cf      	b.n	8011bd8 <__ssvfiscanf_r+0x1b4>
 8011c38:	220a      	movs	r2, #10
 8011c3a:	e7dd      	b.n	8011bf8 <__ssvfiscanf_r+0x1d4>
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9342      	str	r3, [sp, #264]	; 0x108
 8011c40:	2303      	movs	r3, #3
 8011c42:	e7de      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011c44:	2308      	movs	r3, #8
 8011c46:	9342      	str	r3, [sp, #264]	; 0x108
 8011c48:	2304      	movs	r3, #4
 8011c4a:	e7da      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4640      	mov	r0, r8
 8011c50:	f000 fb22 	bl	8012298 <__sccl>
 8011c54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5a:	9341      	str	r3, [sp, #260]	; 0x104
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e7cf      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011c62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c68:	9341      	str	r3, [sp, #260]	; 0x104
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e7c9      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011c6e:	2302      	movs	r3, #2
 8011c70:	e7c7      	b.n	8011c02 <__ssvfiscanf_r+0x1de>
 8011c72:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011c74:	06c3      	lsls	r3, r0, #27
 8011c76:	f53f aeff 	bmi.w	8011a78 <__ssvfiscanf_r+0x54>
 8011c7a:	9b00      	ldr	r3, [sp, #0]
 8011c7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011c7e:	1d19      	adds	r1, r3, #4
 8011c80:	9100      	str	r1, [sp, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	07c0      	lsls	r0, r0, #31
 8011c86:	bf4c      	ite	mi
 8011c88:	801a      	strhmi	r2, [r3, #0]
 8011c8a:	601a      	strpl	r2, [r3, #0]
 8011c8c:	e6f4      	b.n	8011a78 <__ssvfiscanf_r+0x54>
 8011c8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011c90:	4621      	mov	r1, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	4798      	blx	r3
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d0b7      	beq.n	8011c0a <__ssvfiscanf_r+0x1e6>
 8011c9a:	e79d      	b.n	8011bd8 <__ssvfiscanf_r+0x1b4>
 8011c9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011c9e:	3201      	adds	r2, #1
 8011ca0:	9245      	str	r2, [sp, #276]	; 0x114
 8011ca2:	6862      	ldr	r2, [r4, #4]
 8011ca4:	3a01      	subs	r2, #1
 8011ca6:	2a00      	cmp	r2, #0
 8011ca8:	6062      	str	r2, [r4, #4]
 8011caa:	dd02      	ble.n	8011cb2 <__ssvfiscanf_r+0x28e>
 8011cac:	3301      	adds	r3, #1
 8011cae:	6023      	str	r3, [r4, #0]
 8011cb0:	e7ae      	b.n	8011c10 <__ssvfiscanf_r+0x1ec>
 8011cb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	4798      	blx	r3
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d0a8      	beq.n	8011c10 <__ssvfiscanf_r+0x1ec>
 8011cbe:	e78b      	b.n	8011bd8 <__ssvfiscanf_r+0x1b4>
 8011cc0:	2b04      	cmp	r3, #4
 8011cc2:	dc06      	bgt.n	8011cd2 <__ssvfiscanf_r+0x2ae>
 8011cc4:	466b      	mov	r3, sp
 8011cc6:	4622      	mov	r2, r4
 8011cc8:	a941      	add	r1, sp, #260	; 0x104
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f000 f9d4 	bl	8012078 <_scanf_i>
 8011cd0:	e7ac      	b.n	8011c2c <__ssvfiscanf_r+0x208>
 8011cd2:	4b0f      	ldr	r3, [pc, #60]	; (8011d10 <__ssvfiscanf_r+0x2ec>)
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f43f aecf 	beq.w	8011a78 <__ssvfiscanf_r+0x54>
 8011cda:	466b      	mov	r3, sp
 8011cdc:	4622      	mov	r2, r4
 8011cde:	a941      	add	r1, sp, #260	; 0x104
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7fc fa1f 	bl	800e124 <_scanf_float>
 8011ce6:	e7a1      	b.n	8011c2c <__ssvfiscanf_r+0x208>
 8011ce8:	89a3      	ldrh	r3, [r4, #12]
 8011cea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011cee:	bf18      	it	ne
 8011cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8011cf4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011cfe:	e7f9      	b.n	8011cf4 <__ssvfiscanf_r+0x2d0>
 8011d00:	08011971 	.word	0x08011971
 8011d04:	080119eb 	.word	0x080119eb
 8011d08:	08012ced 	.word	0x08012ced
 8011d0c:	08013062 	.word	0x08013062
 8011d10:	0800e125 	.word	0x0800e125

08011d14 <__sfputc_r>:
 8011d14:	6893      	ldr	r3, [r2, #8]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	b410      	push	{r4}
 8011d1c:	6093      	str	r3, [r2, #8]
 8011d1e:	da08      	bge.n	8011d32 <__sfputc_r+0x1e>
 8011d20:	6994      	ldr	r4, [r2, #24]
 8011d22:	42a3      	cmp	r3, r4
 8011d24:	db01      	blt.n	8011d2a <__sfputc_r+0x16>
 8011d26:	290a      	cmp	r1, #10
 8011d28:	d103      	bne.n	8011d32 <__sfputc_r+0x1e>
 8011d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d2e:	f000 bb27 	b.w	8012380 <__swbuf_r>
 8011d32:	6813      	ldr	r3, [r2, #0]
 8011d34:	1c58      	adds	r0, r3, #1
 8011d36:	6010      	str	r0, [r2, #0]
 8011d38:	7019      	strb	r1, [r3, #0]
 8011d3a:	4608      	mov	r0, r1
 8011d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <__sfputs_r>:
 8011d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d44:	4606      	mov	r6, r0
 8011d46:	460f      	mov	r7, r1
 8011d48:	4614      	mov	r4, r2
 8011d4a:	18d5      	adds	r5, r2, r3
 8011d4c:	42ac      	cmp	r4, r5
 8011d4e:	d101      	bne.n	8011d54 <__sfputs_r+0x12>
 8011d50:	2000      	movs	r0, #0
 8011d52:	e007      	b.n	8011d64 <__sfputs_r+0x22>
 8011d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d58:	463a      	mov	r2, r7
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f7ff ffda 	bl	8011d14 <__sfputc_r>
 8011d60:	1c43      	adds	r3, r0, #1
 8011d62:	d1f3      	bne.n	8011d4c <__sfputs_r+0xa>
 8011d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d68 <_vfiprintf_r>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	460d      	mov	r5, r1
 8011d6e:	b09d      	sub	sp, #116	; 0x74
 8011d70:	4614      	mov	r4, r2
 8011d72:	4698      	mov	r8, r3
 8011d74:	4606      	mov	r6, r0
 8011d76:	b118      	cbz	r0, 8011d80 <_vfiprintf_r+0x18>
 8011d78:	6983      	ldr	r3, [r0, #24]
 8011d7a:	b90b      	cbnz	r3, 8011d80 <_vfiprintf_r+0x18>
 8011d7c:	f7fb fbb8 	bl	800d4f0 <__sinit>
 8011d80:	4b89      	ldr	r3, [pc, #548]	; (8011fa8 <_vfiprintf_r+0x240>)
 8011d82:	429d      	cmp	r5, r3
 8011d84:	d11b      	bne.n	8011dbe <_vfiprintf_r+0x56>
 8011d86:	6875      	ldr	r5, [r6, #4]
 8011d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d8a:	07d9      	lsls	r1, r3, #31
 8011d8c:	d405      	bmi.n	8011d9a <_vfiprintf_r+0x32>
 8011d8e:	89ab      	ldrh	r3, [r5, #12]
 8011d90:	059a      	lsls	r2, r3, #22
 8011d92:	d402      	bmi.n	8011d9a <_vfiprintf_r+0x32>
 8011d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d96:	f7fb fc6e 	bl	800d676 <__retarget_lock_acquire_recursive>
 8011d9a:	89ab      	ldrh	r3, [r5, #12]
 8011d9c:	071b      	lsls	r3, r3, #28
 8011d9e:	d501      	bpl.n	8011da4 <_vfiprintf_r+0x3c>
 8011da0:	692b      	ldr	r3, [r5, #16]
 8011da2:	b9eb      	cbnz	r3, 8011de0 <_vfiprintf_r+0x78>
 8011da4:	4629      	mov	r1, r5
 8011da6:	4630      	mov	r0, r6
 8011da8:	f000 fb4a 	bl	8012440 <__swsetup_r>
 8011dac:	b1c0      	cbz	r0, 8011de0 <_vfiprintf_r+0x78>
 8011dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011db0:	07dc      	lsls	r4, r3, #31
 8011db2:	d50e      	bpl.n	8011dd2 <_vfiprintf_r+0x6a>
 8011db4:	f04f 30ff 	mov.w	r0, #4294967295
 8011db8:	b01d      	add	sp, #116	; 0x74
 8011dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dbe:	4b7b      	ldr	r3, [pc, #492]	; (8011fac <_vfiprintf_r+0x244>)
 8011dc0:	429d      	cmp	r5, r3
 8011dc2:	d101      	bne.n	8011dc8 <_vfiprintf_r+0x60>
 8011dc4:	68b5      	ldr	r5, [r6, #8]
 8011dc6:	e7df      	b.n	8011d88 <_vfiprintf_r+0x20>
 8011dc8:	4b79      	ldr	r3, [pc, #484]	; (8011fb0 <_vfiprintf_r+0x248>)
 8011dca:	429d      	cmp	r5, r3
 8011dcc:	bf08      	it	eq
 8011dce:	68f5      	ldreq	r5, [r6, #12]
 8011dd0:	e7da      	b.n	8011d88 <_vfiprintf_r+0x20>
 8011dd2:	89ab      	ldrh	r3, [r5, #12]
 8011dd4:	0598      	lsls	r0, r3, #22
 8011dd6:	d4ed      	bmi.n	8011db4 <_vfiprintf_r+0x4c>
 8011dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dda:	f7fb fc4d 	bl	800d678 <__retarget_lock_release_recursive>
 8011dde:	e7e9      	b.n	8011db4 <_vfiprintf_r+0x4c>
 8011de0:	2300      	movs	r3, #0
 8011de2:	9309      	str	r3, [sp, #36]	; 0x24
 8011de4:	2320      	movs	r3, #32
 8011de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dee:	2330      	movs	r3, #48	; 0x30
 8011df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011fb4 <_vfiprintf_r+0x24c>
 8011df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011df8:	f04f 0901 	mov.w	r9, #1
 8011dfc:	4623      	mov	r3, r4
 8011dfe:	469a      	mov	sl, r3
 8011e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e04:	b10a      	cbz	r2, 8011e0a <_vfiprintf_r+0xa2>
 8011e06:	2a25      	cmp	r2, #37	; 0x25
 8011e08:	d1f9      	bne.n	8011dfe <_vfiprintf_r+0x96>
 8011e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e0e:	d00b      	beq.n	8011e28 <_vfiprintf_r+0xc0>
 8011e10:	465b      	mov	r3, fp
 8011e12:	4622      	mov	r2, r4
 8011e14:	4629      	mov	r1, r5
 8011e16:	4630      	mov	r0, r6
 8011e18:	f7ff ff93 	bl	8011d42 <__sfputs_r>
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	f000 80aa 	beq.w	8011f76 <_vfiprintf_r+0x20e>
 8011e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e24:	445a      	add	r2, fp
 8011e26:	9209      	str	r2, [sp, #36]	; 0x24
 8011e28:	f89a 3000 	ldrb.w	r3, [sl]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 80a2 	beq.w	8011f76 <_vfiprintf_r+0x20e>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f04f 32ff 	mov.w	r2, #4294967295
 8011e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e3c:	f10a 0a01 	add.w	sl, sl, #1
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	9307      	str	r3, [sp, #28]
 8011e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e48:	931a      	str	r3, [sp, #104]	; 0x68
 8011e4a:	4654      	mov	r4, sl
 8011e4c:	2205      	movs	r2, #5
 8011e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e52:	4858      	ldr	r0, [pc, #352]	; (8011fb4 <_vfiprintf_r+0x24c>)
 8011e54:	f7ee f9d4 	bl	8000200 <memchr>
 8011e58:	9a04      	ldr	r2, [sp, #16]
 8011e5a:	b9d8      	cbnz	r0, 8011e94 <_vfiprintf_r+0x12c>
 8011e5c:	06d1      	lsls	r1, r2, #27
 8011e5e:	bf44      	itt	mi
 8011e60:	2320      	movmi	r3, #32
 8011e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e66:	0713      	lsls	r3, r2, #28
 8011e68:	bf44      	itt	mi
 8011e6a:	232b      	movmi	r3, #43	; 0x2b
 8011e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e70:	f89a 3000 	ldrb.w	r3, [sl]
 8011e74:	2b2a      	cmp	r3, #42	; 0x2a
 8011e76:	d015      	beq.n	8011ea4 <_vfiprintf_r+0x13c>
 8011e78:	9a07      	ldr	r2, [sp, #28]
 8011e7a:	4654      	mov	r4, sl
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	f04f 0c0a 	mov.w	ip, #10
 8011e82:	4621      	mov	r1, r4
 8011e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e88:	3b30      	subs	r3, #48	; 0x30
 8011e8a:	2b09      	cmp	r3, #9
 8011e8c:	d94e      	bls.n	8011f2c <_vfiprintf_r+0x1c4>
 8011e8e:	b1b0      	cbz	r0, 8011ebe <_vfiprintf_r+0x156>
 8011e90:	9207      	str	r2, [sp, #28]
 8011e92:	e014      	b.n	8011ebe <_vfiprintf_r+0x156>
 8011e94:	eba0 0308 	sub.w	r3, r0, r8
 8011e98:	fa09 f303 	lsl.w	r3, r9, r3
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	9304      	str	r3, [sp, #16]
 8011ea0:	46a2      	mov	sl, r4
 8011ea2:	e7d2      	b.n	8011e4a <_vfiprintf_r+0xe2>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	1d19      	adds	r1, r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	9103      	str	r1, [sp, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bfbb      	ittet	lt
 8011eb0:	425b      	neglt	r3, r3
 8011eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011eb6:	9307      	strge	r3, [sp, #28]
 8011eb8:	9307      	strlt	r3, [sp, #28]
 8011eba:	bfb8      	it	lt
 8011ebc:	9204      	strlt	r2, [sp, #16]
 8011ebe:	7823      	ldrb	r3, [r4, #0]
 8011ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ec2:	d10c      	bne.n	8011ede <_vfiprintf_r+0x176>
 8011ec4:	7863      	ldrb	r3, [r4, #1]
 8011ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ec8:	d135      	bne.n	8011f36 <_vfiprintf_r+0x1ce>
 8011eca:	9b03      	ldr	r3, [sp, #12]
 8011ecc:	1d1a      	adds	r2, r3, #4
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	9203      	str	r2, [sp, #12]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	bfb8      	it	lt
 8011ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011eda:	3402      	adds	r4, #2
 8011edc:	9305      	str	r3, [sp, #20]
 8011ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011fc4 <_vfiprintf_r+0x25c>
 8011ee2:	7821      	ldrb	r1, [r4, #0]
 8011ee4:	2203      	movs	r2, #3
 8011ee6:	4650      	mov	r0, sl
 8011ee8:	f7ee f98a 	bl	8000200 <memchr>
 8011eec:	b140      	cbz	r0, 8011f00 <_vfiprintf_r+0x198>
 8011eee:	2340      	movs	r3, #64	; 0x40
 8011ef0:	eba0 000a 	sub.w	r0, r0, sl
 8011ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8011ef8:	9b04      	ldr	r3, [sp, #16]
 8011efa:	4303      	orrs	r3, r0
 8011efc:	3401      	adds	r4, #1
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f04:	482c      	ldr	r0, [pc, #176]	; (8011fb8 <_vfiprintf_r+0x250>)
 8011f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f0a:	2206      	movs	r2, #6
 8011f0c:	f7ee f978 	bl	8000200 <memchr>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d03f      	beq.n	8011f94 <_vfiprintf_r+0x22c>
 8011f14:	4b29      	ldr	r3, [pc, #164]	; (8011fbc <_vfiprintf_r+0x254>)
 8011f16:	bb1b      	cbnz	r3, 8011f60 <_vfiprintf_r+0x1f8>
 8011f18:	9b03      	ldr	r3, [sp, #12]
 8011f1a:	3307      	adds	r3, #7
 8011f1c:	f023 0307 	bic.w	r3, r3, #7
 8011f20:	3308      	adds	r3, #8
 8011f22:	9303      	str	r3, [sp, #12]
 8011f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f26:	443b      	add	r3, r7
 8011f28:	9309      	str	r3, [sp, #36]	; 0x24
 8011f2a:	e767      	b.n	8011dfc <_vfiprintf_r+0x94>
 8011f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f30:	460c      	mov	r4, r1
 8011f32:	2001      	movs	r0, #1
 8011f34:	e7a5      	b.n	8011e82 <_vfiprintf_r+0x11a>
 8011f36:	2300      	movs	r3, #0
 8011f38:	3401      	adds	r4, #1
 8011f3a:	9305      	str	r3, [sp, #20]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	f04f 0c0a 	mov.w	ip, #10
 8011f42:	4620      	mov	r0, r4
 8011f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f48:	3a30      	subs	r2, #48	; 0x30
 8011f4a:	2a09      	cmp	r2, #9
 8011f4c:	d903      	bls.n	8011f56 <_vfiprintf_r+0x1ee>
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d0c5      	beq.n	8011ede <_vfiprintf_r+0x176>
 8011f52:	9105      	str	r1, [sp, #20]
 8011f54:	e7c3      	b.n	8011ede <_vfiprintf_r+0x176>
 8011f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	e7f0      	b.n	8011f42 <_vfiprintf_r+0x1da>
 8011f60:	ab03      	add	r3, sp, #12
 8011f62:	9300      	str	r3, [sp, #0]
 8011f64:	462a      	mov	r2, r5
 8011f66:	4b16      	ldr	r3, [pc, #88]	; (8011fc0 <_vfiprintf_r+0x258>)
 8011f68:	a904      	add	r1, sp, #16
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	f7fb fd10 	bl	800d990 <_printf_float>
 8011f70:	4607      	mov	r7, r0
 8011f72:	1c78      	adds	r0, r7, #1
 8011f74:	d1d6      	bne.n	8011f24 <_vfiprintf_r+0x1bc>
 8011f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f78:	07d9      	lsls	r1, r3, #31
 8011f7a:	d405      	bmi.n	8011f88 <_vfiprintf_r+0x220>
 8011f7c:	89ab      	ldrh	r3, [r5, #12]
 8011f7e:	059a      	lsls	r2, r3, #22
 8011f80:	d402      	bmi.n	8011f88 <_vfiprintf_r+0x220>
 8011f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f84:	f7fb fb78 	bl	800d678 <__retarget_lock_release_recursive>
 8011f88:	89ab      	ldrh	r3, [r5, #12]
 8011f8a:	065b      	lsls	r3, r3, #25
 8011f8c:	f53f af12 	bmi.w	8011db4 <_vfiprintf_r+0x4c>
 8011f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f92:	e711      	b.n	8011db8 <_vfiprintf_r+0x50>
 8011f94:	ab03      	add	r3, sp, #12
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	462a      	mov	r2, r5
 8011f9a:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <_vfiprintf_r+0x258>)
 8011f9c:	a904      	add	r1, sp, #16
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f7fb ff9a 	bl	800ded8 <_printf_i>
 8011fa4:	e7e4      	b.n	8011f70 <_vfiprintf_r+0x208>
 8011fa6:	bf00      	nop
 8011fa8:	08012be4 	.word	0x08012be4
 8011fac:	08012c04 	.word	0x08012c04
 8011fb0:	08012bc4 	.word	0x08012bc4
 8011fb4:	0801305c 	.word	0x0801305c
 8011fb8:	08013066 	.word	0x08013066
 8011fbc:	0800d991 	.word	0x0800d991
 8011fc0:	08011d43 	.word	0x08011d43
 8011fc4:	08013062 	.word	0x08013062

08011fc8 <_scanf_chars>:
 8011fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fcc:	4615      	mov	r5, r2
 8011fce:	688a      	ldr	r2, [r1, #8]
 8011fd0:	4680      	mov	r8, r0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	b932      	cbnz	r2, 8011fe4 <_scanf_chars+0x1c>
 8011fd6:	698a      	ldr	r2, [r1, #24]
 8011fd8:	2a00      	cmp	r2, #0
 8011fda:	bf0c      	ite	eq
 8011fdc:	2201      	moveq	r2, #1
 8011fde:	f04f 32ff 	movne.w	r2, #4294967295
 8011fe2:	608a      	str	r2, [r1, #8]
 8011fe4:	6822      	ldr	r2, [r4, #0]
 8011fe6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012074 <_scanf_chars+0xac>
 8011fea:	06d1      	lsls	r1, r2, #27
 8011fec:	bf5f      	itttt	pl
 8011fee:	681a      	ldrpl	r2, [r3, #0]
 8011ff0:	1d11      	addpl	r1, r2, #4
 8011ff2:	6019      	strpl	r1, [r3, #0]
 8011ff4:	6816      	ldrpl	r6, [r2, #0]
 8011ff6:	2700      	movs	r7, #0
 8011ff8:	69a0      	ldr	r0, [r4, #24]
 8011ffa:	b188      	cbz	r0, 8012020 <_scanf_chars+0x58>
 8011ffc:	2801      	cmp	r0, #1
 8011ffe:	d107      	bne.n	8012010 <_scanf_chars+0x48>
 8012000:	682b      	ldr	r3, [r5, #0]
 8012002:	781a      	ldrb	r2, [r3, #0]
 8012004:	6963      	ldr	r3, [r4, #20]
 8012006:	5c9b      	ldrb	r3, [r3, r2]
 8012008:	b953      	cbnz	r3, 8012020 <_scanf_chars+0x58>
 801200a:	bb27      	cbnz	r7, 8012056 <_scanf_chars+0x8e>
 801200c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012010:	2802      	cmp	r0, #2
 8012012:	d120      	bne.n	8012056 <_scanf_chars+0x8e>
 8012014:	682b      	ldr	r3, [r5, #0]
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	f813 3009 	ldrb.w	r3, [r3, r9]
 801201c:	071b      	lsls	r3, r3, #28
 801201e:	d41a      	bmi.n	8012056 <_scanf_chars+0x8e>
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	06da      	lsls	r2, r3, #27
 8012024:	bf5e      	ittt	pl
 8012026:	682b      	ldrpl	r3, [r5, #0]
 8012028:	781b      	ldrbpl	r3, [r3, #0]
 801202a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801202e:	682a      	ldr	r2, [r5, #0]
 8012030:	686b      	ldr	r3, [r5, #4]
 8012032:	3201      	adds	r2, #1
 8012034:	602a      	str	r2, [r5, #0]
 8012036:	68a2      	ldr	r2, [r4, #8]
 8012038:	3b01      	subs	r3, #1
 801203a:	3a01      	subs	r2, #1
 801203c:	606b      	str	r3, [r5, #4]
 801203e:	3701      	adds	r7, #1
 8012040:	60a2      	str	r2, [r4, #8]
 8012042:	b142      	cbz	r2, 8012056 <_scanf_chars+0x8e>
 8012044:	2b00      	cmp	r3, #0
 8012046:	dcd7      	bgt.n	8011ff8 <_scanf_chars+0x30>
 8012048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801204c:	4629      	mov	r1, r5
 801204e:	4640      	mov	r0, r8
 8012050:	4798      	blx	r3
 8012052:	2800      	cmp	r0, #0
 8012054:	d0d0      	beq.n	8011ff8 <_scanf_chars+0x30>
 8012056:	6823      	ldr	r3, [r4, #0]
 8012058:	f013 0310 	ands.w	r3, r3, #16
 801205c:	d105      	bne.n	801206a <_scanf_chars+0xa2>
 801205e:	68e2      	ldr	r2, [r4, #12]
 8012060:	3201      	adds	r2, #1
 8012062:	60e2      	str	r2, [r4, #12]
 8012064:	69a2      	ldr	r2, [r4, #24]
 8012066:	b102      	cbz	r2, 801206a <_scanf_chars+0xa2>
 8012068:	7033      	strb	r3, [r6, #0]
 801206a:	6923      	ldr	r3, [r4, #16]
 801206c:	441f      	add	r7, r3
 801206e:	6127      	str	r7, [r4, #16]
 8012070:	2000      	movs	r0, #0
 8012072:	e7cb      	b.n	801200c <_scanf_chars+0x44>
 8012074:	08012ced 	.word	0x08012ced

08012078 <_scanf_i>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	4698      	mov	r8, r3
 801207e:	4b74      	ldr	r3, [pc, #464]	; (8012250 <_scanf_i+0x1d8>)
 8012080:	460c      	mov	r4, r1
 8012082:	4682      	mov	sl, r0
 8012084:	4616      	mov	r6, r2
 8012086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801208a:	b087      	sub	sp, #28
 801208c:	ab03      	add	r3, sp, #12
 801208e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012092:	4b70      	ldr	r3, [pc, #448]	; (8012254 <_scanf_i+0x1dc>)
 8012094:	69a1      	ldr	r1, [r4, #24]
 8012096:	4a70      	ldr	r2, [pc, #448]	; (8012258 <_scanf_i+0x1e0>)
 8012098:	2903      	cmp	r1, #3
 801209a:	bf18      	it	ne
 801209c:	461a      	movne	r2, r3
 801209e:	68a3      	ldr	r3, [r4, #8]
 80120a0:	9201      	str	r2, [sp, #4]
 80120a2:	1e5a      	subs	r2, r3, #1
 80120a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80120a8:	bf88      	it	hi
 80120aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80120ae:	4627      	mov	r7, r4
 80120b0:	bf82      	ittt	hi
 80120b2:	eb03 0905 	addhi.w	r9, r3, r5
 80120b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80120ba:	60a3      	strhi	r3, [r4, #8]
 80120bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80120c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80120c4:	bf98      	it	ls
 80120c6:	f04f 0900 	movls.w	r9, #0
 80120ca:	6023      	str	r3, [r4, #0]
 80120cc:	463d      	mov	r5, r7
 80120ce:	f04f 0b00 	mov.w	fp, #0
 80120d2:	6831      	ldr	r1, [r6, #0]
 80120d4:	ab03      	add	r3, sp, #12
 80120d6:	7809      	ldrb	r1, [r1, #0]
 80120d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80120dc:	2202      	movs	r2, #2
 80120de:	f7ee f88f 	bl	8000200 <memchr>
 80120e2:	b328      	cbz	r0, 8012130 <_scanf_i+0xb8>
 80120e4:	f1bb 0f01 	cmp.w	fp, #1
 80120e8:	d159      	bne.n	801219e <_scanf_i+0x126>
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	b92a      	cbnz	r2, 80120fa <_scanf_i+0x82>
 80120ee:	6822      	ldr	r2, [r4, #0]
 80120f0:	2308      	movs	r3, #8
 80120f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120f6:	6063      	str	r3, [r4, #4]
 80120f8:	6022      	str	r2, [r4, #0]
 80120fa:	6822      	ldr	r2, [r4, #0]
 80120fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012100:	6022      	str	r2, [r4, #0]
 8012102:	68a2      	ldr	r2, [r4, #8]
 8012104:	1e51      	subs	r1, r2, #1
 8012106:	60a1      	str	r1, [r4, #8]
 8012108:	b192      	cbz	r2, 8012130 <_scanf_i+0xb8>
 801210a:	6832      	ldr	r2, [r6, #0]
 801210c:	1c51      	adds	r1, r2, #1
 801210e:	6031      	str	r1, [r6, #0]
 8012110:	7812      	ldrb	r2, [r2, #0]
 8012112:	f805 2b01 	strb.w	r2, [r5], #1
 8012116:	6872      	ldr	r2, [r6, #4]
 8012118:	3a01      	subs	r2, #1
 801211a:	2a00      	cmp	r2, #0
 801211c:	6072      	str	r2, [r6, #4]
 801211e:	dc07      	bgt.n	8012130 <_scanf_i+0xb8>
 8012120:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012124:	4631      	mov	r1, r6
 8012126:	4650      	mov	r0, sl
 8012128:	4790      	blx	r2
 801212a:	2800      	cmp	r0, #0
 801212c:	f040 8085 	bne.w	801223a <_scanf_i+0x1c2>
 8012130:	f10b 0b01 	add.w	fp, fp, #1
 8012134:	f1bb 0f03 	cmp.w	fp, #3
 8012138:	d1cb      	bne.n	80120d2 <_scanf_i+0x5a>
 801213a:	6863      	ldr	r3, [r4, #4]
 801213c:	b90b      	cbnz	r3, 8012142 <_scanf_i+0xca>
 801213e:	230a      	movs	r3, #10
 8012140:	6063      	str	r3, [r4, #4]
 8012142:	6863      	ldr	r3, [r4, #4]
 8012144:	4945      	ldr	r1, [pc, #276]	; (801225c <_scanf_i+0x1e4>)
 8012146:	6960      	ldr	r0, [r4, #20]
 8012148:	1ac9      	subs	r1, r1, r3
 801214a:	f000 f8a5 	bl	8012298 <__sccl>
 801214e:	f04f 0b00 	mov.w	fp, #0
 8012152:	68a3      	ldr	r3, [r4, #8]
 8012154:	6822      	ldr	r2, [r4, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d03d      	beq.n	80121d6 <_scanf_i+0x15e>
 801215a:	6831      	ldr	r1, [r6, #0]
 801215c:	6960      	ldr	r0, [r4, #20]
 801215e:	f891 c000 	ldrb.w	ip, [r1]
 8012162:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012166:	2800      	cmp	r0, #0
 8012168:	d035      	beq.n	80121d6 <_scanf_i+0x15e>
 801216a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801216e:	d124      	bne.n	80121ba <_scanf_i+0x142>
 8012170:	0510      	lsls	r0, r2, #20
 8012172:	d522      	bpl.n	80121ba <_scanf_i+0x142>
 8012174:	f10b 0b01 	add.w	fp, fp, #1
 8012178:	f1b9 0f00 	cmp.w	r9, #0
 801217c:	d003      	beq.n	8012186 <_scanf_i+0x10e>
 801217e:	3301      	adds	r3, #1
 8012180:	f109 39ff 	add.w	r9, r9, #4294967295
 8012184:	60a3      	str	r3, [r4, #8]
 8012186:	6873      	ldr	r3, [r6, #4]
 8012188:	3b01      	subs	r3, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	6073      	str	r3, [r6, #4]
 801218e:	dd1b      	ble.n	80121c8 <_scanf_i+0x150>
 8012190:	6833      	ldr	r3, [r6, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	6033      	str	r3, [r6, #0]
 8012196:	68a3      	ldr	r3, [r4, #8]
 8012198:	3b01      	subs	r3, #1
 801219a:	60a3      	str	r3, [r4, #8]
 801219c:	e7d9      	b.n	8012152 <_scanf_i+0xda>
 801219e:	f1bb 0f02 	cmp.w	fp, #2
 80121a2:	d1ae      	bne.n	8012102 <_scanf_i+0x8a>
 80121a4:	6822      	ldr	r2, [r4, #0]
 80121a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80121aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80121ae:	d1bf      	bne.n	8012130 <_scanf_i+0xb8>
 80121b0:	2310      	movs	r3, #16
 80121b2:	6063      	str	r3, [r4, #4]
 80121b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80121b8:	e7a2      	b.n	8012100 <_scanf_i+0x88>
 80121ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80121be:	6022      	str	r2, [r4, #0]
 80121c0:	780b      	ldrb	r3, [r1, #0]
 80121c2:	f805 3b01 	strb.w	r3, [r5], #1
 80121c6:	e7de      	b.n	8012186 <_scanf_i+0x10e>
 80121c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80121cc:	4631      	mov	r1, r6
 80121ce:	4650      	mov	r0, sl
 80121d0:	4798      	blx	r3
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0df      	beq.n	8012196 <_scanf_i+0x11e>
 80121d6:	6823      	ldr	r3, [r4, #0]
 80121d8:	05d9      	lsls	r1, r3, #23
 80121da:	d50d      	bpl.n	80121f8 <_scanf_i+0x180>
 80121dc:	42bd      	cmp	r5, r7
 80121de:	d909      	bls.n	80121f4 <_scanf_i+0x17c>
 80121e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80121e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121e8:	4632      	mov	r2, r6
 80121ea:	4650      	mov	r0, sl
 80121ec:	4798      	blx	r3
 80121ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80121f2:	464d      	mov	r5, r9
 80121f4:	42bd      	cmp	r5, r7
 80121f6:	d028      	beq.n	801224a <_scanf_i+0x1d2>
 80121f8:	6822      	ldr	r2, [r4, #0]
 80121fa:	f012 0210 	ands.w	r2, r2, #16
 80121fe:	d113      	bne.n	8012228 <_scanf_i+0x1b0>
 8012200:	702a      	strb	r2, [r5, #0]
 8012202:	6863      	ldr	r3, [r4, #4]
 8012204:	9e01      	ldr	r6, [sp, #4]
 8012206:	4639      	mov	r1, r7
 8012208:	4650      	mov	r0, sl
 801220a:	47b0      	blx	r6
 801220c:	f8d8 3000 	ldr.w	r3, [r8]
 8012210:	6821      	ldr	r1, [r4, #0]
 8012212:	1d1a      	adds	r2, r3, #4
 8012214:	f8c8 2000 	str.w	r2, [r8]
 8012218:	f011 0f20 	tst.w	r1, #32
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	d00f      	beq.n	8012240 <_scanf_i+0x1c8>
 8012220:	6018      	str	r0, [r3, #0]
 8012222:	68e3      	ldr	r3, [r4, #12]
 8012224:	3301      	adds	r3, #1
 8012226:	60e3      	str	r3, [r4, #12]
 8012228:	1bed      	subs	r5, r5, r7
 801222a:	44ab      	add	fp, r5
 801222c:	6925      	ldr	r5, [r4, #16]
 801222e:	445d      	add	r5, fp
 8012230:	6125      	str	r5, [r4, #16]
 8012232:	2000      	movs	r0, #0
 8012234:	b007      	add	sp, #28
 8012236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223a:	f04f 0b00 	mov.w	fp, #0
 801223e:	e7ca      	b.n	80121d6 <_scanf_i+0x15e>
 8012240:	07ca      	lsls	r2, r1, #31
 8012242:	bf4c      	ite	mi
 8012244:	8018      	strhmi	r0, [r3, #0]
 8012246:	6018      	strpl	r0, [r3, #0]
 8012248:	e7eb      	b.n	8012222 <_scanf_i+0x1aa>
 801224a:	2001      	movs	r0, #1
 801224c:	e7f2      	b.n	8012234 <_scanf_i+0x1bc>
 801224e:	bf00      	nop
 8012250:	08012a48 	.word	0x08012a48
 8012254:	0800f675 	.word	0x0800f675
 8012258:	0800f579 	.word	0x0800f579
 801225c:	08013086 	.word	0x08013086

08012260 <_read_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	4d07      	ldr	r5, [pc, #28]	; (8012280 <_read_r+0x20>)
 8012264:	4604      	mov	r4, r0
 8012266:	4608      	mov	r0, r1
 8012268:	4611      	mov	r1, r2
 801226a:	2200      	movs	r2, #0
 801226c:	602a      	str	r2, [r5, #0]
 801226e:	461a      	mov	r2, r3
 8012270:	f7f0 fe42 	bl	8002ef8 <_read>
 8012274:	1c43      	adds	r3, r0, #1
 8012276:	d102      	bne.n	801227e <_read_r+0x1e>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	b103      	cbz	r3, 801227e <_read_r+0x1e>
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	bd38      	pop	{r3, r4, r5, pc}
 8012280:	2000571c 	.word	0x2000571c
 8012284:	00000000 	.word	0x00000000

08012288 <nan>:
 8012288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012290 <nan+0x8>
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	00000000 	.word	0x00000000
 8012294:	7ff80000 	.word	0x7ff80000

08012298 <__sccl>:
 8012298:	b570      	push	{r4, r5, r6, lr}
 801229a:	780b      	ldrb	r3, [r1, #0]
 801229c:	4604      	mov	r4, r0
 801229e:	2b5e      	cmp	r3, #94	; 0x5e
 80122a0:	bf0b      	itete	eq
 80122a2:	784b      	ldrbeq	r3, [r1, #1]
 80122a4:	1c48      	addne	r0, r1, #1
 80122a6:	1c88      	addeq	r0, r1, #2
 80122a8:	2200      	movne	r2, #0
 80122aa:	bf08      	it	eq
 80122ac:	2201      	moveq	r2, #1
 80122ae:	1e61      	subs	r1, r4, #1
 80122b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80122b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80122b8:	42a9      	cmp	r1, r5
 80122ba:	d1fb      	bne.n	80122b4 <__sccl+0x1c>
 80122bc:	b90b      	cbnz	r3, 80122c2 <__sccl+0x2a>
 80122be:	3801      	subs	r0, #1
 80122c0:	bd70      	pop	{r4, r5, r6, pc}
 80122c2:	f082 0101 	eor.w	r1, r2, #1
 80122c6:	54e1      	strb	r1, [r4, r3]
 80122c8:	1c42      	adds	r2, r0, #1
 80122ca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80122ce:	2d2d      	cmp	r5, #45	; 0x2d
 80122d0:	f102 36ff 	add.w	r6, r2, #4294967295
 80122d4:	4610      	mov	r0, r2
 80122d6:	d006      	beq.n	80122e6 <__sccl+0x4e>
 80122d8:	2d5d      	cmp	r5, #93	; 0x5d
 80122da:	d0f1      	beq.n	80122c0 <__sccl+0x28>
 80122dc:	b90d      	cbnz	r5, 80122e2 <__sccl+0x4a>
 80122de:	4630      	mov	r0, r6
 80122e0:	e7ee      	b.n	80122c0 <__sccl+0x28>
 80122e2:	462b      	mov	r3, r5
 80122e4:	e7ef      	b.n	80122c6 <__sccl+0x2e>
 80122e6:	7816      	ldrb	r6, [r2, #0]
 80122e8:	2e5d      	cmp	r6, #93	; 0x5d
 80122ea:	d0fa      	beq.n	80122e2 <__sccl+0x4a>
 80122ec:	42b3      	cmp	r3, r6
 80122ee:	dcf8      	bgt.n	80122e2 <__sccl+0x4a>
 80122f0:	4618      	mov	r0, r3
 80122f2:	3001      	adds	r0, #1
 80122f4:	4286      	cmp	r6, r0
 80122f6:	5421      	strb	r1, [r4, r0]
 80122f8:	dcfb      	bgt.n	80122f2 <__sccl+0x5a>
 80122fa:	43d8      	mvns	r0, r3
 80122fc:	4430      	add	r0, r6
 80122fe:	1c5d      	adds	r5, r3, #1
 8012300:	42b3      	cmp	r3, r6
 8012302:	bfa8      	it	ge
 8012304:	2000      	movge	r0, #0
 8012306:	182b      	adds	r3, r5, r0
 8012308:	3202      	adds	r2, #2
 801230a:	e7de      	b.n	80122ca <__sccl+0x32>

0801230c <__submore>:
 801230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012310:	460c      	mov	r4, r1
 8012312:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012318:	4299      	cmp	r1, r3
 801231a:	d11d      	bne.n	8012358 <__submore+0x4c>
 801231c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012320:	f7fb fa3c 	bl	800d79c <_malloc_r>
 8012324:	b918      	cbnz	r0, 801232e <__submore+0x22>
 8012326:	f04f 30ff 	mov.w	r0, #4294967295
 801232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801232e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012332:	63a3      	str	r3, [r4, #56]	; 0x38
 8012334:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012338:	6360      	str	r0, [r4, #52]	; 0x34
 801233a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801233e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012342:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012346:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801234a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801234e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012352:	6020      	str	r0, [r4, #0]
 8012354:	2000      	movs	r0, #0
 8012356:	e7e8      	b.n	801232a <__submore+0x1e>
 8012358:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801235a:	0077      	lsls	r7, r6, #1
 801235c:	463a      	mov	r2, r7
 801235e:	f7ff f985 	bl	801166c <_realloc_r>
 8012362:	4605      	mov	r5, r0
 8012364:	2800      	cmp	r0, #0
 8012366:	d0de      	beq.n	8012326 <__submore+0x1a>
 8012368:	eb00 0806 	add.w	r8, r0, r6
 801236c:	4601      	mov	r1, r0
 801236e:	4632      	mov	r2, r6
 8012370:	4640      	mov	r0, r8
 8012372:	f7fb f993 	bl	800d69c <memcpy>
 8012376:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801237a:	f8c4 8000 	str.w	r8, [r4]
 801237e:	e7e9      	b.n	8012354 <__submore+0x48>

08012380 <__swbuf_r>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	460e      	mov	r6, r1
 8012384:	4614      	mov	r4, r2
 8012386:	4605      	mov	r5, r0
 8012388:	b118      	cbz	r0, 8012392 <__swbuf_r+0x12>
 801238a:	6983      	ldr	r3, [r0, #24]
 801238c:	b90b      	cbnz	r3, 8012392 <__swbuf_r+0x12>
 801238e:	f7fb f8af 	bl	800d4f0 <__sinit>
 8012392:	4b21      	ldr	r3, [pc, #132]	; (8012418 <__swbuf_r+0x98>)
 8012394:	429c      	cmp	r4, r3
 8012396:	d12b      	bne.n	80123f0 <__swbuf_r+0x70>
 8012398:	686c      	ldr	r4, [r5, #4]
 801239a:	69a3      	ldr	r3, [r4, #24]
 801239c:	60a3      	str	r3, [r4, #8]
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	071a      	lsls	r2, r3, #28
 80123a2:	d52f      	bpl.n	8012404 <__swbuf_r+0x84>
 80123a4:	6923      	ldr	r3, [r4, #16]
 80123a6:	b36b      	cbz	r3, 8012404 <__swbuf_r+0x84>
 80123a8:	6923      	ldr	r3, [r4, #16]
 80123aa:	6820      	ldr	r0, [r4, #0]
 80123ac:	1ac0      	subs	r0, r0, r3
 80123ae:	6963      	ldr	r3, [r4, #20]
 80123b0:	b2f6      	uxtb	r6, r6
 80123b2:	4283      	cmp	r3, r0
 80123b4:	4637      	mov	r7, r6
 80123b6:	dc04      	bgt.n	80123c2 <__swbuf_r+0x42>
 80123b8:	4621      	mov	r1, r4
 80123ba:	4628      	mov	r0, r5
 80123bc:	f7fe f89a 	bl	80104f4 <_fflush_r>
 80123c0:	bb30      	cbnz	r0, 8012410 <__swbuf_r+0x90>
 80123c2:	68a3      	ldr	r3, [r4, #8]
 80123c4:	3b01      	subs	r3, #1
 80123c6:	60a3      	str	r3, [r4, #8]
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	1c5a      	adds	r2, r3, #1
 80123cc:	6022      	str	r2, [r4, #0]
 80123ce:	701e      	strb	r6, [r3, #0]
 80123d0:	6963      	ldr	r3, [r4, #20]
 80123d2:	3001      	adds	r0, #1
 80123d4:	4283      	cmp	r3, r0
 80123d6:	d004      	beq.n	80123e2 <__swbuf_r+0x62>
 80123d8:	89a3      	ldrh	r3, [r4, #12]
 80123da:	07db      	lsls	r3, r3, #31
 80123dc:	d506      	bpl.n	80123ec <__swbuf_r+0x6c>
 80123de:	2e0a      	cmp	r6, #10
 80123e0:	d104      	bne.n	80123ec <__swbuf_r+0x6c>
 80123e2:	4621      	mov	r1, r4
 80123e4:	4628      	mov	r0, r5
 80123e6:	f7fe f885 	bl	80104f4 <_fflush_r>
 80123ea:	b988      	cbnz	r0, 8012410 <__swbuf_r+0x90>
 80123ec:	4638      	mov	r0, r7
 80123ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123f0:	4b0a      	ldr	r3, [pc, #40]	; (801241c <__swbuf_r+0x9c>)
 80123f2:	429c      	cmp	r4, r3
 80123f4:	d101      	bne.n	80123fa <__swbuf_r+0x7a>
 80123f6:	68ac      	ldr	r4, [r5, #8]
 80123f8:	e7cf      	b.n	801239a <__swbuf_r+0x1a>
 80123fa:	4b09      	ldr	r3, [pc, #36]	; (8012420 <__swbuf_r+0xa0>)
 80123fc:	429c      	cmp	r4, r3
 80123fe:	bf08      	it	eq
 8012400:	68ec      	ldreq	r4, [r5, #12]
 8012402:	e7ca      	b.n	801239a <__swbuf_r+0x1a>
 8012404:	4621      	mov	r1, r4
 8012406:	4628      	mov	r0, r5
 8012408:	f000 f81a 	bl	8012440 <__swsetup_r>
 801240c:	2800      	cmp	r0, #0
 801240e:	d0cb      	beq.n	80123a8 <__swbuf_r+0x28>
 8012410:	f04f 37ff 	mov.w	r7, #4294967295
 8012414:	e7ea      	b.n	80123ec <__swbuf_r+0x6c>
 8012416:	bf00      	nop
 8012418:	08012be4 	.word	0x08012be4
 801241c:	08012c04 	.word	0x08012c04
 8012420:	08012bc4 	.word	0x08012bc4

08012424 <__ascii_wctomb>:
 8012424:	b149      	cbz	r1, 801243a <__ascii_wctomb+0x16>
 8012426:	2aff      	cmp	r2, #255	; 0xff
 8012428:	bf85      	ittet	hi
 801242a:	238a      	movhi	r3, #138	; 0x8a
 801242c:	6003      	strhi	r3, [r0, #0]
 801242e:	700a      	strbls	r2, [r1, #0]
 8012430:	f04f 30ff 	movhi.w	r0, #4294967295
 8012434:	bf98      	it	ls
 8012436:	2001      	movls	r0, #1
 8012438:	4770      	bx	lr
 801243a:	4608      	mov	r0, r1
 801243c:	4770      	bx	lr
	...

08012440 <__swsetup_r>:
 8012440:	4b32      	ldr	r3, [pc, #200]	; (801250c <__swsetup_r+0xcc>)
 8012442:	b570      	push	{r4, r5, r6, lr}
 8012444:	681d      	ldr	r5, [r3, #0]
 8012446:	4606      	mov	r6, r0
 8012448:	460c      	mov	r4, r1
 801244a:	b125      	cbz	r5, 8012456 <__swsetup_r+0x16>
 801244c:	69ab      	ldr	r3, [r5, #24]
 801244e:	b913      	cbnz	r3, 8012456 <__swsetup_r+0x16>
 8012450:	4628      	mov	r0, r5
 8012452:	f7fb f84d 	bl	800d4f0 <__sinit>
 8012456:	4b2e      	ldr	r3, [pc, #184]	; (8012510 <__swsetup_r+0xd0>)
 8012458:	429c      	cmp	r4, r3
 801245a:	d10f      	bne.n	801247c <__swsetup_r+0x3c>
 801245c:	686c      	ldr	r4, [r5, #4]
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012464:	0719      	lsls	r1, r3, #28
 8012466:	d42c      	bmi.n	80124c2 <__swsetup_r+0x82>
 8012468:	06dd      	lsls	r5, r3, #27
 801246a:	d411      	bmi.n	8012490 <__swsetup_r+0x50>
 801246c:	2309      	movs	r3, #9
 801246e:	6033      	str	r3, [r6, #0]
 8012470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012474:	81a3      	strh	r3, [r4, #12]
 8012476:	f04f 30ff 	mov.w	r0, #4294967295
 801247a:	e03e      	b.n	80124fa <__swsetup_r+0xba>
 801247c:	4b25      	ldr	r3, [pc, #148]	; (8012514 <__swsetup_r+0xd4>)
 801247e:	429c      	cmp	r4, r3
 8012480:	d101      	bne.n	8012486 <__swsetup_r+0x46>
 8012482:	68ac      	ldr	r4, [r5, #8]
 8012484:	e7eb      	b.n	801245e <__swsetup_r+0x1e>
 8012486:	4b24      	ldr	r3, [pc, #144]	; (8012518 <__swsetup_r+0xd8>)
 8012488:	429c      	cmp	r4, r3
 801248a:	bf08      	it	eq
 801248c:	68ec      	ldreq	r4, [r5, #12]
 801248e:	e7e6      	b.n	801245e <__swsetup_r+0x1e>
 8012490:	0758      	lsls	r0, r3, #29
 8012492:	d512      	bpl.n	80124ba <__swsetup_r+0x7a>
 8012494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012496:	b141      	cbz	r1, 80124aa <__swsetup_r+0x6a>
 8012498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801249c:	4299      	cmp	r1, r3
 801249e:	d002      	beq.n	80124a6 <__swsetup_r+0x66>
 80124a0:	4630      	mov	r0, r6
 80124a2:	f7fb f92b 	bl	800d6fc <_free_r>
 80124a6:	2300      	movs	r3, #0
 80124a8:	6363      	str	r3, [r4, #52]	; 0x34
 80124aa:	89a3      	ldrh	r3, [r4, #12]
 80124ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124b0:	81a3      	strh	r3, [r4, #12]
 80124b2:	2300      	movs	r3, #0
 80124b4:	6063      	str	r3, [r4, #4]
 80124b6:	6923      	ldr	r3, [r4, #16]
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	89a3      	ldrh	r3, [r4, #12]
 80124bc:	f043 0308 	orr.w	r3, r3, #8
 80124c0:	81a3      	strh	r3, [r4, #12]
 80124c2:	6923      	ldr	r3, [r4, #16]
 80124c4:	b94b      	cbnz	r3, 80124da <__swsetup_r+0x9a>
 80124c6:	89a3      	ldrh	r3, [r4, #12]
 80124c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124d0:	d003      	beq.n	80124da <__swsetup_r+0x9a>
 80124d2:	4621      	mov	r1, r4
 80124d4:	4630      	mov	r0, r6
 80124d6:	f000 f845 	bl	8012564 <__smakebuf_r>
 80124da:	89a0      	ldrh	r0, [r4, #12]
 80124dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124e0:	f010 0301 	ands.w	r3, r0, #1
 80124e4:	d00a      	beq.n	80124fc <__swsetup_r+0xbc>
 80124e6:	2300      	movs	r3, #0
 80124e8:	60a3      	str	r3, [r4, #8]
 80124ea:	6963      	ldr	r3, [r4, #20]
 80124ec:	425b      	negs	r3, r3
 80124ee:	61a3      	str	r3, [r4, #24]
 80124f0:	6923      	ldr	r3, [r4, #16]
 80124f2:	b943      	cbnz	r3, 8012506 <__swsetup_r+0xc6>
 80124f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124f8:	d1ba      	bne.n	8012470 <__swsetup_r+0x30>
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	0781      	lsls	r1, r0, #30
 80124fe:	bf58      	it	pl
 8012500:	6963      	ldrpl	r3, [r4, #20]
 8012502:	60a3      	str	r3, [r4, #8]
 8012504:	e7f4      	b.n	80124f0 <__swsetup_r+0xb0>
 8012506:	2000      	movs	r0, #0
 8012508:	e7f7      	b.n	80124fa <__swsetup_r+0xba>
 801250a:	bf00      	nop
 801250c:	20000030 	.word	0x20000030
 8012510:	08012be4 	.word	0x08012be4
 8012514:	08012c04 	.word	0x08012c04
 8012518:	08012bc4 	.word	0x08012bc4

0801251c <__swhatbuf_r>:
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	460e      	mov	r6, r1
 8012520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012524:	2900      	cmp	r1, #0
 8012526:	b096      	sub	sp, #88	; 0x58
 8012528:	4614      	mov	r4, r2
 801252a:	461d      	mov	r5, r3
 801252c:	da07      	bge.n	801253e <__swhatbuf_r+0x22>
 801252e:	2300      	movs	r3, #0
 8012530:	602b      	str	r3, [r5, #0]
 8012532:	89b3      	ldrh	r3, [r6, #12]
 8012534:	061a      	lsls	r2, r3, #24
 8012536:	d410      	bmi.n	801255a <__swhatbuf_r+0x3e>
 8012538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801253c:	e00e      	b.n	801255c <__swhatbuf_r+0x40>
 801253e:	466a      	mov	r2, sp
 8012540:	f000 f858 	bl	80125f4 <_fstat_r>
 8012544:	2800      	cmp	r0, #0
 8012546:	dbf2      	blt.n	801252e <__swhatbuf_r+0x12>
 8012548:	9a01      	ldr	r2, [sp, #4]
 801254a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801254e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012552:	425a      	negs	r2, r3
 8012554:	415a      	adcs	r2, r3
 8012556:	602a      	str	r2, [r5, #0]
 8012558:	e7ee      	b.n	8012538 <__swhatbuf_r+0x1c>
 801255a:	2340      	movs	r3, #64	; 0x40
 801255c:	2000      	movs	r0, #0
 801255e:	6023      	str	r3, [r4, #0]
 8012560:	b016      	add	sp, #88	; 0x58
 8012562:	bd70      	pop	{r4, r5, r6, pc}

08012564 <__smakebuf_r>:
 8012564:	898b      	ldrh	r3, [r1, #12]
 8012566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012568:	079d      	lsls	r5, r3, #30
 801256a:	4606      	mov	r6, r0
 801256c:	460c      	mov	r4, r1
 801256e:	d507      	bpl.n	8012580 <__smakebuf_r+0x1c>
 8012570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012574:	6023      	str	r3, [r4, #0]
 8012576:	6123      	str	r3, [r4, #16]
 8012578:	2301      	movs	r3, #1
 801257a:	6163      	str	r3, [r4, #20]
 801257c:	b002      	add	sp, #8
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	ab01      	add	r3, sp, #4
 8012582:	466a      	mov	r2, sp
 8012584:	f7ff ffca 	bl	801251c <__swhatbuf_r>
 8012588:	9900      	ldr	r1, [sp, #0]
 801258a:	4605      	mov	r5, r0
 801258c:	4630      	mov	r0, r6
 801258e:	f7fb f905 	bl	800d79c <_malloc_r>
 8012592:	b948      	cbnz	r0, 80125a8 <__smakebuf_r+0x44>
 8012594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012598:	059a      	lsls	r2, r3, #22
 801259a:	d4ef      	bmi.n	801257c <__smakebuf_r+0x18>
 801259c:	f023 0303 	bic.w	r3, r3, #3
 80125a0:	f043 0302 	orr.w	r3, r3, #2
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	e7e3      	b.n	8012570 <__smakebuf_r+0xc>
 80125a8:	4b0d      	ldr	r3, [pc, #52]	; (80125e0 <__smakebuf_r+0x7c>)
 80125aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80125ac:	89a3      	ldrh	r3, [r4, #12]
 80125ae:	6020      	str	r0, [r4, #0]
 80125b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125b4:	81a3      	strh	r3, [r4, #12]
 80125b6:	9b00      	ldr	r3, [sp, #0]
 80125b8:	6163      	str	r3, [r4, #20]
 80125ba:	9b01      	ldr	r3, [sp, #4]
 80125bc:	6120      	str	r0, [r4, #16]
 80125be:	b15b      	cbz	r3, 80125d8 <__smakebuf_r+0x74>
 80125c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125c4:	4630      	mov	r0, r6
 80125c6:	f000 f827 	bl	8012618 <_isatty_r>
 80125ca:	b128      	cbz	r0, 80125d8 <__smakebuf_r+0x74>
 80125cc:	89a3      	ldrh	r3, [r4, #12]
 80125ce:	f023 0303 	bic.w	r3, r3, #3
 80125d2:	f043 0301 	orr.w	r3, r3, #1
 80125d6:	81a3      	strh	r3, [r4, #12]
 80125d8:	89a0      	ldrh	r0, [r4, #12]
 80125da:	4305      	orrs	r5, r0
 80125dc:	81a5      	strh	r5, [r4, #12]
 80125de:	e7cd      	b.n	801257c <__smakebuf_r+0x18>
 80125e0:	0800d489 	.word	0x0800d489

080125e4 <_malloc_usable_size_r>:
 80125e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125e8:	1f18      	subs	r0, r3, #4
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	bfbc      	itt	lt
 80125ee:	580b      	ldrlt	r3, [r1, r0]
 80125f0:	18c0      	addlt	r0, r0, r3
 80125f2:	4770      	bx	lr

080125f4 <_fstat_r>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	4d07      	ldr	r5, [pc, #28]	; (8012614 <_fstat_r+0x20>)
 80125f8:	2300      	movs	r3, #0
 80125fa:	4604      	mov	r4, r0
 80125fc:	4608      	mov	r0, r1
 80125fe:	4611      	mov	r1, r2
 8012600:	602b      	str	r3, [r5, #0]
 8012602:	f7f0 fcbe 	bl	8002f82 <_fstat>
 8012606:	1c43      	adds	r3, r0, #1
 8012608:	d102      	bne.n	8012610 <_fstat_r+0x1c>
 801260a:	682b      	ldr	r3, [r5, #0]
 801260c:	b103      	cbz	r3, 8012610 <_fstat_r+0x1c>
 801260e:	6023      	str	r3, [r4, #0]
 8012610:	bd38      	pop	{r3, r4, r5, pc}
 8012612:	bf00      	nop
 8012614:	2000571c 	.word	0x2000571c

08012618 <_isatty_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	4d06      	ldr	r5, [pc, #24]	; (8012634 <_isatty_r+0x1c>)
 801261c:	2300      	movs	r3, #0
 801261e:	4604      	mov	r4, r0
 8012620:	4608      	mov	r0, r1
 8012622:	602b      	str	r3, [r5, #0]
 8012624:	f7f0 fcbd 	bl	8002fa2 <_isatty>
 8012628:	1c43      	adds	r3, r0, #1
 801262a:	d102      	bne.n	8012632 <_isatty_r+0x1a>
 801262c:	682b      	ldr	r3, [r5, #0]
 801262e:	b103      	cbz	r3, 8012632 <_isatty_r+0x1a>
 8012630:	6023      	str	r3, [r4, #0]
 8012632:	bd38      	pop	{r3, r4, r5, pc}
 8012634:	2000571c 	.word	0x2000571c

08012638 <_init>:
 8012638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263a:	bf00      	nop
 801263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263e:	bc08      	pop	{r3}
 8012640:	469e      	mov	lr, r3
 8012642:	4770      	bx	lr

08012644 <_fini>:
 8012644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012646:	bf00      	nop
 8012648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801264a:	bc08      	pop	{r3}
 801264c:	469e      	mov	lr, r3
 801264e:	4770      	bx	lr
